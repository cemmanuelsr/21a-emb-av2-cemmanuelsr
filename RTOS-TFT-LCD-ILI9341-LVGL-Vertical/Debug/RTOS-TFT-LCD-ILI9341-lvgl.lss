
RTOS-TFT-LCD-ILI9341-lvgl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00030a10  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00430a10  00430a10  00040a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a70  20400000  00430a18  00050000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000398c8  20400a70  00431488  00050a70  2**2
                  ALLOC
  4 .stack        00002000  2043a338  0046ad50  00050a70  2**0
                  ALLOC
  5 .heap         00000200  2043c338  0046cd50  00050a70  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00050a70  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00050a9e  2**0
                  CONTENTS, READONLY
  8 .debug_info   000acda0  00000000  00000000  00050af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f43b  00000000  00000000  000fd897  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00050a55  00000000  00000000  0010ccd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029d8  00000000  00000000  0015d727  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005170  00000000  00000000  001600ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000307f6  00000000  00000000  0016526f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003faea  00000000  00000000  00195a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ae973  00000000  00000000  001d554f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008794  00000000  00000000  00283ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	38 c3 43 20 e1 16 42 00 df 16 42 00 df 16 42 00     8.C ..B...B...B.
  400010:	df 16 42 00 df 16 42 00 df 16 42 00 00 00 00 00     ..B...B...B.....
	...
  40002c:	61 10 40 00 df 16 42 00 00 00 00 00 01 11 40 00     a.@...B.......@.
  40003c:	69 11 40 00 df 16 42 00 df 16 42 00 df 16 42 00     i.@...B...B...B.
  40004c:	df 16 42 00 df 16 42 00 df 16 42 00 df 16 42 00     ..B...B...B...B.
  40005c:	df 16 42 00 df 16 42 00 00 00 00 00 b5 12 42 00     ..B...B.......B.
  40006c:	c9 12 42 00 dd 12 42 00 df 16 42 00 25 1d 42 00     ..B...B...B.%.B.
  40007c:	df 16 42 00 f1 12 42 00 05 13 42 00 df 16 42 00     ..B...B...B...B.
  40008c:	df 16 42 00 df 16 42 00 df 16 42 00 df 16 42 00     ..B...B...B...B.
  40009c:	df 16 42 00 df 16 42 00 df 16 42 00 df 16 42 00     ..B...B...B...B.
  4000ac:	df 16 42 00 df 16 42 00 ad 0e 40 00 df 16 42 00     ..B...B...@...B.
  4000bc:	df 16 42 00 df 16 42 00 df 16 42 00 df 16 42 00     ..B...B...B...B.
  4000cc:	df 16 42 00 df 16 42 00 df 16 42 00 df 16 42 00     ..B...B...B...B.
  4000dc:	df 16 42 00 c1 0e 40 00 df 16 42 00 df 16 42 00     ..B...@...B...B.
  4000ec:	df 16 42 00 df 16 42 00 df 16 42 00 df 16 42 00     ..B...B...B...B.
  4000fc:	df 16 42 00 df 16 42 00 df 16 42 00 df 16 42 00     ..B...B...B...B.
  40010c:	df 16 42 00 df 16 42 00 00 00 00 00 00 00 00 00     ..B...B.........
  40011c:	00 00 00 00 df 16 42 00 df 16 42 00 df 16 42 00     ......B...B...B.
  40012c:	df 16 42 00 df 16 42 00 df 16 42 00 df 16 42 00     ..B...B...B...B.
  40013c:	df 16 42 00 df 16 42 00 df 16 42 00 df 16 42 00     ..B...B...B...B.
  40014c:	df 16 42 00 df 16 42 00 df 16 42 00 df 16 42 00     ..B...B...B...B.
  40015c:	df 16 42 00 df 16 42 00 df 16 42 00                 ..B...B...B.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400a70 	.word	0x20400a70
  400184:	00000000 	.word	0x00000000
  400188:	00430a18 	.word	0x00430a18

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00430a18 	.word	0x00430a18
  4001c8:	20400a74 	.word	0x20400a74
  4001cc:	00430a18 	.word	0x00430a18
  4001d0:	00000000 	.word	0x00000000

004001d4 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001d4:	b921      	cbnz	r1, 4001e0 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001d6:	6843      	ldr	r3, [r0, #4]
  4001d8:	f023 0301 	bic.w	r3, r3, #1
  4001dc:	6043      	str	r3, [r0, #4]
  4001de:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001e0:	6843      	ldr	r3, [r0, #4]
  4001e2:	f043 0301 	orr.w	r3, r3, #1
  4001e6:	6043      	str	r3, [r0, #4]
  4001e8:	4770      	bx	lr

004001ea <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001ea:	6201      	str	r1, [r0, #32]
  4001ec:	4770      	bx	lr

004001ee <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001ee:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001f0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001f2:	6884      	ldr	r4, [r0, #8]
  4001f4:	42a5      	cmp	r5, r4
  4001f6:	d003      	beq.n	400200 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001f8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001fa:	6884      	ldr	r4, [r0, #8]
  4001fc:	42ac      	cmp	r4, r5
  4001fe:	d1fb      	bne.n	4001f8 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  400200:	b161      	cbz	r1, 40021c <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400202:	f3c4 5001 	ubfx	r0, r4, #20, #2
  400206:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40020a:	f3c4 4003 	ubfx	r0, r4, #16, #4
  40020e:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  400212:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  400216:	bf18      	it	ne
  400218:	300c      	addne	r0, #12
  40021a:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  40021c:	b142      	cbz	r2, 400230 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  40021e:	f3c4 3102 	ubfx	r1, r4, #12, #3
  400222:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  400226:	f3c4 2003 	ubfx	r0, r4, #8, #4
  40022a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40022e:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400230:	b143      	cbz	r3, 400244 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400232:	f3c4 1202 	ubfx	r2, r4, #4, #3
  400236:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40023a:	f004 040f 	and.w	r4, r4, #15
  40023e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  400242:	601c      	str	r4, [r3, #0]
	}
}
  400244:	bc30      	pop	{r4, r5}
  400246:	4770      	bx	lr

00400248 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400248:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  40024a:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  40024c:	f014 0f01 	tst.w	r4, #1
  400250:	d005      	beq.n	40025e <rtc_set_time+0x16>
  400252:	290c      	cmp	r1, #12
  400254:	d903      	bls.n	40025e <rtc_set_time+0x16>
			ul_hour -= 12;
  400256:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400258:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  40025c:	e000      	b.n	400260 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  40025e:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400260:	4c1c      	ldr	r4, [pc, #112]	; (4002d4 <rtc_set_time+0x8c>)
  400262:	fba4 5603 	umull	r5, r6, r4, r3
  400266:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400268:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  40026c:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400270:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400274:	fba4 6502 	umull	r6, r5, r4, r2
  400278:	08ed      	lsrs	r5, r5, #3
  40027a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  40027e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400282:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  400286:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  40028a:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40028c:	fba4 4201 	umull	r4, r2, r4, r1
  400290:	08d2      	lsrs	r2, r2, #3
  400292:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400296:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40029a:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40029e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4002a2:	6983      	ldr	r3, [r0, #24]
  4002a4:	f013 0f04 	tst.w	r3, #4
  4002a8:	d0fb      	beq.n	4002a2 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  4002aa:	6803      	ldr	r3, [r0, #0]
  4002ac:	f043 0301 	orr.w	r3, r3, #1
  4002b0:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4002b2:	6983      	ldr	r3, [r0, #24]
  4002b4:	f013 0f01 	tst.w	r3, #1
  4002b8:	d0fb      	beq.n	4002b2 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4002ba:	2301      	movs	r3, #1
  4002bc:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  4002be:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  4002c0:	6803      	ldr	r3, [r0, #0]
  4002c2:	f023 0301 	bic.w	r3, r3, #1
  4002c6:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002c8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002ca:	f000 0001 	and.w	r0, r0, #1
  4002ce:	bcf0      	pop	{r4, r5, r6, r7}
  4002d0:	4770      	bx	lr
  4002d2:	bf00      	nop
  4002d4:	cccccccd 	.word	0xcccccccd

004002d8 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4002d8:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002da:	4d2a      	ldr	r5, [pc, #168]	; (400384 <rtc_set_date+0xac>)
  4002dc:	fba5 4603 	umull	r4, r6, r5, r3
  4002e0:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4002e2:	9c03      	ldr	r4, [sp, #12]
  4002e4:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002e6:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4002ea:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4002ee:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002f2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4002f6:	fba5 6402 	umull	r6, r4, r5, r2
  4002fa:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002fc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400300:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400304:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400308:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  40030c:	4b1e      	ldr	r3, [pc, #120]	; (400388 <rtc_set_date+0xb0>)
  40030e:	fba3 4301 	umull	r4, r3, r3, r1
  400312:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400314:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400318:	4b1c      	ldr	r3, [pc, #112]	; (40038c <rtc_set_date+0xb4>)
  40031a:	fba3 4301 	umull	r4, r3, r3, r1
  40031e:	095b      	lsrs	r3, r3, #5
  400320:	fba5 6403 	umull	r6, r4, r5, r3
  400324:	08e4      	lsrs	r4, r4, #3
  400326:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40032a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40032e:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400330:	fba5 4301 	umull	r4, r3, r5, r1
  400334:	08db      	lsrs	r3, r3, #3
  400336:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40033a:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40033e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400342:	fba5 1503 	umull	r1, r5, r5, r3
  400346:	08ed      	lsrs	r5, r5, #3
  400348:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40034c:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400350:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400354:	6983      	ldr	r3, [r0, #24]
  400356:	f013 0f04 	tst.w	r3, #4
  40035a:	d0fb      	beq.n	400354 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40035c:	6803      	ldr	r3, [r0, #0]
  40035e:	f043 0302 	orr.w	r3, r3, #2
  400362:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400364:	6983      	ldr	r3, [r0, #24]
  400366:	f013 0f01 	tst.w	r3, #1
  40036a:	d0fb      	beq.n	400364 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40036c:	2301      	movs	r3, #1
  40036e:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400370:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400372:	6803      	ldr	r3, [r0, #0]
  400374:	f023 0302 	bic.w	r3, r3, #2
  400378:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40037a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40037c:	f000 0002 	and.w	r0, r0, #2
  400380:	bc70      	pop	{r4, r5, r6}
  400382:	4770      	bx	lr
  400384:	cccccccd 	.word	0xcccccccd
  400388:	10624dd3 	.word	0x10624dd3
  40038c:	51eb851f 	.word	0x51eb851f

00400390 <insert_sort>:

static void insert_sort(int array[], uint8_t size) {
  uint8_t j;
  int save;

  for (int i = 1; i < size; i++) {
  400390:	2901      	cmp	r1, #1
  400392:	dd23      	ble.n	4003dc <insert_sort+0x4c>
static void insert_sort(int array[], uint8_t size) {
  400394:	b5f0      	push	{r4, r5, r6, r7, lr}
  400396:	4686      	mov	lr, r0
  for (int i = 1; i < size; i++) {
  400398:	2701      	movs	r7, #1
    save = array[i];
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  40039a:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  40039e:	e004      	b.n	4003aa <insert_sort+0x1a>
    array[j] = array[j - 1];
    array[j] = save;
  4003a0:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
  for (int i = 1; i < size; i++) {
  4003a4:	3701      	adds	r7, #1
  4003a6:	428f      	cmp	r7, r1
  4003a8:	d017      	beq.n	4003da <insert_sort+0x4a>
    save = array[i];
  4003aa:	f85e 5f04 	ldr.w	r5, [lr, #4]!
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  4003ae:	f017 03ff 	ands.w	r3, r7, #255	; 0xff
  4003b2:	d0f5      	beq.n	4003a0 <insert_sort+0x10>
  4003b4:	b2fc      	uxtb	r4, r7
  4003b6:	19a2      	adds	r2, r4, r6
  4003b8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4003bc:	4295      	cmp	r5, r2
  4003be:	daef      	bge.n	4003a0 <insert_sort+0x10>
    array[j] = array[j - 1];
  4003c0:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  4003c4:	3b01      	subs	r3, #1
  4003c6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  4003ca:	d0e9      	beq.n	4003a0 <insert_sort+0x10>
  4003cc:	461c      	mov	r4, r3
  4003ce:	199a      	adds	r2, r3, r6
  4003d0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4003d4:	4295      	cmp	r5, r2
  4003d6:	dbf3      	blt.n	4003c0 <insert_sort+0x30>
  4003d8:	e7e2      	b.n	4003a0 <insert_sort+0x10>
  4003da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4003dc:	4770      	bx	lr
	...

004003e0 <configure_touch>:
void configure_touch(void) {
  4003e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003e4:	b089      	sub	sp, #36	; 0x24
  pmc_enable_periph_clk(XM_PIO_ID);
  4003e6:	200c      	movs	r0, #12
  4003e8:	4c24      	ldr	r4, [pc, #144]	; (40047c <configure_touch+0x9c>)
  4003ea:	47a0      	blx	r4
  pmc_enable_periph_clk(YP_PIO_ID);
  4003ec:	2010      	movs	r0, #16
  4003ee:	47a0      	blx	r4
  pmc_enable_periph_clk(XP_PIO_ID);
  4003f0:	200c      	movs	r0, #12
  4003f2:	47a0      	blx	r4
  pmc_enable_periph_clk(YM_PIO_ID);
  4003f4:	2010      	movs	r0, #16
  4003f6:	47a0      	blx	r4
  afec_enable(XM_AFEC);
  4003f8:	4c21      	ldr	r4, [pc, #132]	; (400480 <configure_touch+0xa0>)
  4003fa:	4620      	mov	r0, r4
  4003fc:	4e21      	ldr	r6, [pc, #132]	; (400484 <configure_touch+0xa4>)
  4003fe:	47b0      	blx	r6
  afec_enable(YP_AFEC);
  400400:	4d21      	ldr	r5, [pc, #132]	; (400488 <configure_touch+0xa8>)
  400402:	4628      	mov	r0, r5
  400404:	47b0      	blx	r6
  afec_get_config_defaults(&afec_cfg);
  400406:	a802      	add	r0, sp, #8
  400408:	f8df b084 	ldr.w	fp, [pc, #132]	; 400490 <configure_touch+0xb0>
  40040c:	47d8      	blx	fp
  afec_init(afec, &afec_cfg);
  40040e:	a902      	add	r1, sp, #8
  400410:	4628      	mov	r0, r5
  400412:	4b1e      	ldr	r3, [pc, #120]	; (40048c <configure_touch+0xac>)
  400414:	4798      	blx	r3
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  400416:	686b      	ldr	r3, [r5, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
  400418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  40041c:	606b      	str	r3, [r5, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  40041e:	a801      	add	r0, sp, #4
  400420:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400494 <configure_touch+0xb4>
  400424:	47c8      	blx	r9
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  400426:	2600      	movs	r6, #0
  400428:	f88d 6005 	strb.w	r6, [sp, #5]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  40042c:	aa01      	add	r2, sp, #4
  40042e:	4631      	mov	r1, r6
  400430:	4628      	mov	r0, r5
  400432:	f8df 8064 	ldr.w	r8, [pc, #100]	; 400498 <configure_touch+0xb8>
  400436:	47c0      	blx	r8
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400438:	666e      	str	r6, [r5, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40043a:	f44f 7a00 	mov.w	sl, #512	; 0x200
  40043e:	f8c5 a06c 	str.w	sl, [r5, #108]	; 0x6c
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400442:	2701      	movs	r7, #1
  400444:	616f      	str	r7, [r5, #20]
  afec_get_config_defaults(&afec_cfg);
  400446:	a802      	add	r0, sp, #8
  400448:	47d8      	blx	fp
  afec_init(afec, &afec_cfg);
  40044a:	a902      	add	r1, sp, #8
  40044c:	4620      	mov	r0, r4
  40044e:	4b0f      	ldr	r3, [pc, #60]	; (40048c <configure_touch+0xac>)
  400450:	4798      	blx	r3
	reg = afec->AFEC_MR;
  400452:	6863      	ldr	r3, [r4, #4]
		reg |= AFEC_MR_FREERUN_ON;
  400454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	afec->AFEC_MR = reg;
  400458:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  40045a:	a801      	add	r0, sp, #4
  40045c:	47c8      	blx	r9
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  40045e:	f88d 6005 	strb.w	r6, [sp, #5]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  400462:	aa01      	add	r2, sp, #4
  400464:	4639      	mov	r1, r7
  400466:	4620      	mov	r0, r4
  400468:	47c0      	blx	r8
	afec->AFEC_CSELR = afec_ch;
  40046a:	6667      	str	r7, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40046c:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400470:	2302      	movs	r3, #2
  400472:	6163      	str	r3, [r4, #20]
}
  400474:	b009      	add	sp, #36	; 0x24
  400476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40047a:	bf00      	nop
  40047c:	00421439 	.word	0x00421439
  400480:	40064000 	.word	0x40064000
  400484:	00400ed5 	.word	0x00400ed5
  400488:	4003c000 	.word	0x4003c000
  40048c:	00400de5 	.word	0x00400de5
  400490:	00400da9 	.word	0x00400da9
  400494:	00400dd9 	.word	0x00400dd9
  400498:	00400d79 	.word	0x00400d79

0040049c <configReadTouchX>:
void configReadTouchX(void){
  40049c:	b538      	push	{r3, r4, r5, lr}
  40049e:	2201      	movs	r2, #1
  4004a0:	4b14      	ldr	r3, [pc, #80]	; (4004f4 <configReadTouchX+0x58>)
  4004a2:	615a      	str	r2, [r3, #20]
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  4004a4:	2202      	movs	r2, #2
  4004a6:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4004aa:	619a      	str	r2, [r3, #24]
  pio_configure(XP_PIO, PIO_OUTPUT_1, XP_MASK, PIO_DEFAULT);
  4004ac:	4d12      	ldr	r5, [pc, #72]	; (4004f8 <configReadTouchX+0x5c>)
  4004ae:	2300      	movs	r3, #0
  4004b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4004b4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4004b8:	4628      	mov	r0, r5
  4004ba:	4c10      	ldr	r4, [pc, #64]	; (4004fc <configReadTouchX+0x60>)
  4004bc:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_OUTPUT_0, XM_MASK, PIO_DEFAULT);
  4004be:	2300      	movs	r3, #0
  4004c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4004c4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4004c8:	4628      	mov	r0, r5
  4004ca:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_INPUT, YM_MASK, PIO_DEFAULT);
  4004cc:	f505 7500 	add.w	r5, r5, #512	; 0x200
  4004d0:	2300      	movs	r3, #0
  4004d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4004d6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4004da:	4628      	mov	r0, r5
  4004dc:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  4004de:	2300      	movs	r3, #0
  4004e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4004e4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4004e8:	4628      	mov	r0, r5
  4004ea:	47a0      	blx	r4
  delay_ms(5);
  4004ec:	4804      	ldr	r0, [pc, #16]	; (400500 <configReadTouchX+0x64>)
  4004ee:	4b05      	ldr	r3, [pc, #20]	; (400504 <configReadTouchX+0x68>)
  4004f0:	4798      	blx	r3
  4004f2:	bd38      	pop	{r3, r4, r5, pc}
  4004f4:	4003c000 	.word	0x4003c000
  4004f8:	400e1200 	.word	0x400e1200
  4004fc:	00421081 	.word	0x00421081
  400500:	0003dbc2 	.word	0x0003dbc2
  400504:	20400001 	.word	0x20400001

00400508 <configReadTouchY>:
void configReadTouchY(void) {
  400508:	b538      	push	{r3, r4, r5, lr}
  40050a:	2201      	movs	r2, #1
  40050c:	4b14      	ldr	r3, [pc, #80]	; (400560 <configReadTouchY+0x58>)
  40050e:	619a      	str	r2, [r3, #24]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400510:	2202      	movs	r2, #2
  400512:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400516:	615a      	str	r2, [r3, #20]
  pio_configure(YP_PIO, PIO_OUTPUT_1, YP_MASK, PIO_DEFAULT);
  400518:	4d12      	ldr	r5, [pc, #72]	; (400564 <configReadTouchY+0x5c>)
  40051a:	2300      	movs	r3, #0
  40051c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400520:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400524:	4628      	mov	r0, r5
  400526:	4c10      	ldr	r4, [pc, #64]	; (400568 <configReadTouchY+0x60>)
  400528:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_0, YM_MASK, PIO_DEFAULT);
  40052a:	2300      	movs	r3, #0
  40052c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400530:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400534:	4628      	mov	r0, r5
  400536:	47a0      	blx	r4
  pio_configure(XP_PIO, PIO_INPUT, XP_MASK, PIO_DEFAULT);
  400538:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
  40053c:	2300      	movs	r3, #0
  40053e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400542:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400546:	4628      	mov	r0, r5
  400548:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  40054a:	2300      	movs	r3, #0
  40054c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400550:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400554:	4628      	mov	r0, r5
  400556:	47a0      	blx	r4
  delay_ms(5);
  400558:	4804      	ldr	r0, [pc, #16]	; (40056c <configReadTouchY+0x64>)
  40055a:	4b05      	ldr	r3, [pc, #20]	; (400570 <configReadTouchY+0x68>)
  40055c:	4798      	blx	r3
  40055e:	bd38      	pop	{r3, r4, r5, pc}
  400560:	4003c000 	.word	0x4003c000
  400564:	400e1400 	.word	0x400e1400
  400568:	00421081 	.word	0x00421081
  40056c:	0003dbc2 	.word	0x0003dbc2
  400570:	20400001 	.word	0x20400001

00400574 <readTouchZ>:
int readTouchZ(int rxplate) {
  400574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400576:	ed2d 8b02 	vpush	{d8}
  40057a:	ee08 0a10 	vmov	s16, r0
  pio_configure(XP_PIO, PIO_OUTPUT_0, XP_MASK, PIO_DEFAULT);
  40057e:	4d2f      	ldr	r5, [pc, #188]	; (40063c <readTouchZ+0xc8>)
  400580:	2300      	movs	r3, #0
  400582:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400586:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40058a:	4628      	mov	r0, r5
  40058c:	4c2c      	ldr	r4, [pc, #176]	; (400640 <readTouchZ+0xcc>)
  40058e:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_1, YM_MASK, PIO_DEFAULT);
  400590:	4e2c      	ldr	r6, [pc, #176]	; (400644 <readTouchZ+0xd0>)
  400592:	2300      	movs	r3, #0
  400594:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400598:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40059c:	4630      	mov	r0, r6
  40059e:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  4005a0:	2300      	movs	r3, #0
  4005a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4005a6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4005aa:	4630      	mov	r0, r6
  4005ac:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  4005ae:	2300      	movs	r3, #0
  4005b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4005b4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4005b8:	4628      	mov	r0, r5
  4005ba:	47a0      	blx	r4
  4005bc:	4e22      	ldr	r6, [pc, #136]	; (400648 <readTouchZ+0xd4>)
  4005be:	2701      	movs	r7, #1
  4005c0:	6177      	str	r7, [r6, #20]
  4005c2:	4c22      	ldr	r4, [pc, #136]	; (40064c <readTouchZ+0xd8>)
  4005c4:	2302      	movs	r3, #2
  4005c6:	6163      	str	r3, [r4, #20]
  delay_ms(5);
  4005c8:	4821      	ldr	r0, [pc, #132]	; (400650 <readTouchZ+0xdc>)
  4005ca:	4b22      	ldr	r3, [pc, #136]	; (400654 <readTouchZ+0xe0>)
  4005cc:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  4005ce:	6667      	str	r7, [r4, #100]	; 0x64
	return afec->AFEC_CDR;
  4005d0:	6ea5      	ldr	r5, [r4, #104]	; 0x68
	afec->AFEC_CSELR = afec_ch;
  4005d2:	2300      	movs	r3, #0
  4005d4:	6673      	str	r3, [r6, #100]	; 0x64
	return afec->AFEC_CDR;
  4005d6:	6eb6      	ldr	r6, [r6, #104]	; 0x68
  configReadTouchX();
  4005d8:	4b1f      	ldr	r3, [pc, #124]	; (400658 <readTouchZ+0xe4>)
  4005da:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  4005dc:	6667      	str	r7, [r4, #100]	; 0x64
	return afec->AFEC_CDR;
  4005de:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
  rtouch = z2;
  4005e2:	ee07 6a10 	vmov	s14, r6
  4005e6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
  rtouch /= z1;
  4005ea:	ee07 5a10 	vmov	s14, r5
  4005ee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  4005f2:	ee86 7a26 	vdiv.f32	s14, s12, s13
  rtouch -= 1;
  4005f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  4005fa:	ee37 7a66 	vsub.f32	s14, s14, s13
  rtouch *= x;
  4005fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400602:	ee27 7a87 	vmul.f32	s14, s15, s14
  rtouch *= rxplate;
  400606:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  40060a:	ee67 7a87 	vmul.f32	s15, s15, s14
  rtouch /= 1024;
  40060e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 40065c <readTouchZ+0xe8>
  400612:	ee67 7a87 	vmul.f32	s15, s15, s14
  if(rtouch < 100.0)
  400616:	ed9f 7a12 	vldr	s14, [pc, #72]	; 400660 <readTouchZ+0xec>
  rtouch = 1024.0;
  40061a:	eef4 7a47 	vcmp.f32	s15, s14
  40061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400622:	ed9f 7a10 	vldr	s14, [pc, #64]	; 400664 <readTouchZ+0xf0>
  400626:	bf48      	it	mi
  400628:	eef0 7a47 	vmovmi.f32	s15, s14
}
  40062c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400630:	ee17 0a90 	vmov	r0, s15
  400634:	ecbd 8b02 	vpop	{d8}
  400638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40063a:	bf00      	nop
  40063c:	400e1200 	.word	0x400e1200
  400640:	00421081 	.word	0x00421081
  400644:	400e1400 	.word	0x400e1400
  400648:	4003c000 	.word	0x4003c000
  40064c:	40064000 	.word	0x40064000
  400650:	0003dbc2 	.word	0x0003dbc2
  400654:	20400001 	.word	0x20400001
  400658:	0040049d 	.word	0x0040049d
  40065c:	3a800000 	.word	0x3a800000
  400660:	42c80000 	.word	0x42c80000
  400664:	44800000 	.word	0x44800000

00400668 <readRawPoint>:
  }
}

void readRawPoint(int *x, int *y, int *z) {
  400668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40066c:	b0c3      	sub	sp, #268	; 0x10c
  40066e:	4683      	mov	fp, r0
  400670:	468a      	mov	sl, r1
  400672:	9201      	str	r2, [sp, #4]
  int samples[TOUCH_NUMSAMPLES];
  char valid = 0 ;
  
  configReadTouchX();
  400674:	4b19      	ldr	r3, [pc, #100]	; (4006dc <readRawPoint+0x74>)
  400676:	4798      	blx	r3
  400678:	ad01      	add	r5, sp, #4
  40067a:	f50d 7982 	add.w	r9, sp, #260	; 0x104
  40067e:	462c      	mov	r4, r5
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
    delay_us(1);
  400680:	f04f 0833 	mov.w	r8, #51	; 0x33
  400684:	4f16      	ldr	r7, [pc, #88]	; (4006e0 <readRawPoint+0x78>)
	afec->AFEC_CSELR = afec_ch;
  400686:	4e17      	ldr	r6, [pc, #92]	; (4006e4 <readRawPoint+0x7c>)
  400688:	4640      	mov	r0, r8
  40068a:	47b8      	blx	r7
  40068c:	2300      	movs	r3, #0
  40068e:	6673      	str	r3, [r6, #100]	; 0x64
	return afec->AFEC_CDR;
  400690:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    samples[i] = readTouchX();
  400692:	f844 3f04 	str.w	r3, [r4, #4]!
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400696:	454c      	cmp	r4, r9
  400698:	d1f6      	bne.n	400688 <readRawPoint+0x20>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  40069a:	2140      	movs	r1, #64	; 0x40
  40069c:	a802      	add	r0, sp, #8
  40069e:	4b12      	ldr	r3, [pc, #72]	; (4006e8 <readRawPoint+0x80>)
  4006a0:	4798      	blx	r3
  *x = (samples[TOUCH_NUMSAMPLES / 2]);
  4006a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4006a4:	f8cb 3000 	str.w	r3, [fp]
  
  configReadTouchY();
  4006a8:	4b10      	ldr	r3, [pc, #64]	; (4006ec <readRawPoint+0x84>)
  4006aa:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  4006ac:	4b10      	ldr	r3, [pc, #64]	; (4006f0 <readRawPoint+0x88>)
  4006ae:	2101      	movs	r1, #1
  4006b0:	6659      	str	r1, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4006b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
    samples[i] = readTouchY();
  4006b4:	f845 2f04 	str.w	r2, [r5, #4]!
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  4006b8:	42a5      	cmp	r5, r4
  4006ba:	d1f9      	bne.n	4006b0 <readRawPoint+0x48>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  4006bc:	2140      	movs	r1, #64	; 0x40
  4006be:	a802      	add	r0, sp, #8
  4006c0:	4b09      	ldr	r3, [pc, #36]	; (4006e8 <readRawPoint+0x80>)
  4006c2:	4798      	blx	r3
  *y = (samples[TOUCH_NUMSAMPLES / 2]);
  4006c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4006c6:	f8ca 3000 	str.w	r3, [sl]
  
  *z = readTouchZ(300);
  4006ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
  4006ce:	4b09      	ldr	r3, [pc, #36]	; (4006f4 <readRawPoint+0x8c>)
  4006d0:	4798      	blx	r3
  4006d2:	9b01      	ldr	r3, [sp, #4]
  4006d4:	6018      	str	r0, [r3, #0]
}
  4006d6:	b043      	add	sp, #268	; 0x10c
  4006d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4006dc:	0040049d 	.word	0x0040049d
  4006e0:	20400001 	.word	0x20400001
  4006e4:	4003c000 	.word	0x4003c000
  4006e8:	00400391 	.word	0x00400391
  4006ec:	00400509 	.word	0x00400509
  4006f0:	40064000 	.word	0x40064000
  4006f4:	00400575 	.word	0x00400575

004006f8 <pointToCoordinate>:

// returns if valid touch
// checks Z pressure!
int pointToCoordinate(int x, int y, int z, int *px, int *py) {
  4006f8:	b510      	push	{r4, lr}
  int xtemp, ytemp;
  
  xtemp = TOUCH_LCD_WIDTH*(x-TOUCH_X_240)/(TOUCH_X_0-TOUCH_X_240);
  4006fa:	f2a0 20ee 	subw	r0, r0, #750	; 0x2ee
  4006fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  400702:	0100      	lsls	r0, r0, #4
  400704:	4c15      	ldr	r4, [pc, #84]	; (40075c <pointToCoordinate+0x64>)
  400706:	fb84 e400 	smull	lr, r4, r4, r0
  40070a:	4404      	add	r4, r0
  40070c:	17c0      	asrs	r0, r0, #31
  40070e:	ebc0 20e4 	rsb	r0, r0, r4, asr #11
  400712:	28f0      	cmp	r0, #240	; 0xf0
  400714:	bfa8      	it	ge
  400716:	20f0      	movge	r0, #240	; 0xf0
  if(xtemp > TOUCH_LCD_WIDTH) xtemp=TOUCH_LCD_WIDTH;
  if(xtemp < 0) xtemp=0;
  *py = xtemp;
  400718:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  40071c:	9c02      	ldr	r4, [sp, #8]
  40071e:	6020      	str	r0, [r4, #0]
    
  ytemp = TOUCH_LCD_HEIGHT - TOUCH_LCD_HEIGHT*(y-TOUCH_Y_0)/(TOUCH_Y_320-TOUCH_Y_0);
  400720:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
  400724:	ebc1 6001 	rsb	r0, r1, r1, lsl #24
  400728:	ebc1 0180 	rsb	r1, r1, r0, lsl #2
  40072c:	0189      	lsls	r1, r1, #6
  40072e:	480c      	ldr	r0, [pc, #48]	; (400760 <pointToCoordinate+0x68>)
  400730:	fb80 4001 	smull	r4, r0, r0, r1
  400734:	4408      	add	r0, r1
  400736:	17c9      	asrs	r1, r1, #31
  400738:	ebc1 21e0 	rsb	r1, r1, r0, asr #11
  40073c:	f501 71a0 	add.w	r1, r1, #320	; 0x140
  400740:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
  400744:	bfa8      	it	ge
  400746:	f44f 71a0 	movge.w	r1, #320	; 0x140
  if(ytemp > TOUCH_LCD_HEIGHT) ytemp=TOUCH_LCD_HEIGHT;
  if(ytemp < 0) ytemp=0;
  *px = ytemp;
  40074a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  40074e:	6019      	str	r1, [r3, #0]

  if(z < TOUCH_PRESSURE_DETECT) {
    return 1;
  }  
  return 0;
}
  400750:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
  400754:	bfac      	ite	ge
  400756:	2000      	movge	r0, #0
  400758:	2001      	movlt	r0, #1
  40075a:	bd10      	pop	{r4, pc}
  40075c:	cd9a6735 	.word	0xcd9a6735
  400760:	bc97c21f 	.word	0xbc97c21f

00400764 <readPoint>:

int readPoint(int *px, int *py){
  400764:	b530      	push	{r4, r5, lr}
  400766:	b087      	sub	sp, #28
  400768:	4604      	mov	r4, r0
  40076a:	460d      	mov	r5, r1
  int x, y, z;
  readRawPoint(&x, &y, &z);
  40076c:	aa03      	add	r2, sp, #12
  40076e:	a904      	add	r1, sp, #16
  400770:	a805      	add	r0, sp, #20
  400772:	4b05      	ldr	r3, [pc, #20]	; (400788 <readPoint+0x24>)
  400774:	4798      	blx	r3
  return(pointToCoordinate(x,y,z, px, py));
  400776:	9500      	str	r5, [sp, #0]
  400778:	4623      	mov	r3, r4
  40077a:	9a03      	ldr	r2, [sp, #12]
  40077c:	9904      	ldr	r1, [sp, #16]
  40077e:	9805      	ldr	r0, [sp, #20]
  400780:	4c02      	ldr	r4, [pc, #8]	; (40078c <readPoint+0x28>)
  400782:	47a0      	blx	r4
}
  400784:	b007      	add	sp, #28
  400786:	bd30      	pop	{r4, r5, pc}
  400788:	00400669 	.word	0x00400669
  40078c:	004006f9 	.word	0x004006f9

00400790 <ili9341_send_command>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400790:	2240      	movs	r2, #64	; 0x40
  400792:	4b0b      	ldr	r3, [pc, #44]	; (4007c0 <ili9341_send_command+0x30>)
  400794:	635a      	str	r2, [r3, #52]	; 0x34
  400796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40079a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  40079e:	635a      	str	r2, [r3, #52]	; 0x34
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4007a0:	4a08      	ldr	r2, [pc, #32]	; (4007c4 <ili9341_send_command+0x34>)
  4007a2:	6913      	ldr	r3, [r2, #16]
 * \brief Helper function to wait for the last send operation to complete
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
	/* Wait for TX to complete */
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4007a4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4007a8:	d0fb      	beq.n	4007a2 <ili9341_send_command+0x12>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4007aa:	4b06      	ldr	r3, [pc, #24]	; (4007c4 <ili9341_send_command+0x34>)
  4007ac:	60d8      	str	r0, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4007ae:	461a      	mov	r2, r3
  4007b0:	6913      	ldr	r3, [r2, #16]
  4007b2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4007b6:	d0fb      	beq.n	4007b0 <ili9341_send_command+0x20>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4007b8:	2240      	movs	r2, #64	; 0x40
  4007ba:	4b01      	ldr	r3, [pc, #4]	; (4007c0 <ili9341_send_command+0x30>)
  4007bc:	631a      	str	r2, [r3, #48]	; 0x30
  4007be:	4770      	bx	lr
  4007c0:	400e0e00 	.word	0x400e0e00
  4007c4:	40008000 	.word	0x40008000

004007c8 <ili9341_send_draw_limits>:
 * drawing limits to the display, as set through the various limit functions.
 *
 * \param send_end_limits  True to also send the lower-right drawing limits
 */
static void ili9341_send_draw_limits(const bool send_end_limits)
{
  4007c8:	b510      	push	{r4, lr}
  4007ca:	4604      	mov	r4, r0
	ili9341_send_command(ILI9341_CMD_COLUMN_ADDRESS_SET);
  4007cc:	202a      	movs	r0, #42	; 0x2a
  4007ce:	4b35      	ldr	r3, [pc, #212]	; (4008a4 <ili9341_send_draw_limits+0xdc>)
  4007d0:	4798      	blx	r3
	ili9341_send_byte(limit_start_x >> 8);
  4007d2:	4b35      	ldr	r3, [pc, #212]	; (4008a8 <ili9341_send_draw_limits+0xe0>)
  4007d4:	f9b3 1000 	ldrsh.w	r1, [r3]
  4007d8:	f3c1 2007 	ubfx	r0, r1, #8, #8
  4007dc:	4a33      	ldr	r2, [pc, #204]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  4007de:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4007e0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4007e4:	d0fb      	beq.n	4007de <ili9341_send_draw_limits+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4007e6:	4b31      	ldr	r3, [pc, #196]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  4007e8:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_x & 0xFF);
  4007ea:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4007ec:	461a      	mov	r2, r3
  4007ee:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4007f0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4007f4:	d0fb      	beq.n	4007ee <ili9341_send_draw_limits+0x26>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4007f6:	4b2d      	ldr	r3, [pc, #180]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  4007f8:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
  4007fa:	b19c      	cbz	r4, 400824 <ili9341_send_draw_limits+0x5c>
		ili9341_send_byte(limit_end_x >> 8);
  4007fc:	4b2c      	ldr	r3, [pc, #176]	; (4008b0 <ili9341_send_draw_limits+0xe8>)
  4007fe:	f9b3 1000 	ldrsh.w	r1, [r3]
  400802:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400806:	4a29      	ldr	r2, [pc, #164]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  400808:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40080a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40080e:	d0fb      	beq.n	400808 <ili9341_send_draw_limits+0x40>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400810:	4b26      	ldr	r3, [pc, #152]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  400812:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_x & 0xFF);
  400814:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400816:	461a      	mov	r2, r3
  400818:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40081a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40081e:	d0fb      	beq.n	400818 <ili9341_send_draw_limits+0x50>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400820:	4b22      	ldr	r3, [pc, #136]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  400822:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400824:	4a21      	ldr	r2, [pc, #132]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  400826:	6913      	ldr	r3, [r2, #16]
  400828:	f413 7f00 	tst.w	r3, #512	; 0x200
  40082c:	d0fb      	beq.n	400826 <ili9341_send_draw_limits+0x5e>
  40082e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400832:	4b20      	ldr	r3, [pc, #128]	; (4008b4 <ili9341_send_draw_limits+0xec>)
  400834:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();

	ili9341_send_command(ILI9341_CMD_PAGE_ADDRESS_SET);
  400836:	202b      	movs	r0, #43	; 0x2b
  400838:	4b1a      	ldr	r3, [pc, #104]	; (4008a4 <ili9341_send_draw_limits+0xdc>)
  40083a:	4798      	blx	r3
	ili9341_send_byte(limit_start_y >> 8);
  40083c:	4b1e      	ldr	r3, [pc, #120]	; (4008b8 <ili9341_send_draw_limits+0xf0>)
  40083e:	f9b3 1000 	ldrsh.w	r1, [r3]
  400842:	f3c1 2007 	ubfx	r0, r1, #8, #8
  400846:	4a19      	ldr	r2, [pc, #100]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  400848:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40084a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40084e:	d0fb      	beq.n	400848 <ili9341_send_draw_limits+0x80>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400850:	4b16      	ldr	r3, [pc, #88]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  400852:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_y & 0xFF);
  400854:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400856:	461a      	mov	r2, r3
  400858:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40085a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40085e:	d0fb      	beq.n	400858 <ili9341_send_draw_limits+0x90>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400860:	4b12      	ldr	r3, [pc, #72]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  400862:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
  400864:	b19c      	cbz	r4, 40088e <ili9341_send_draw_limits+0xc6>
		ili9341_send_byte(limit_end_y >> 8);
  400866:	4b15      	ldr	r3, [pc, #84]	; (4008bc <ili9341_send_draw_limits+0xf4>)
  400868:	f9b3 1000 	ldrsh.w	r1, [r3]
  40086c:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400870:	4a0e      	ldr	r2, [pc, #56]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  400872:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400874:	f413 7f00 	tst.w	r3, #512	; 0x200
  400878:	d0fb      	beq.n	400872 <ili9341_send_draw_limits+0xaa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40087a:	4b0c      	ldr	r3, [pc, #48]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  40087c:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_y & 0xFF);
  40087e:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400880:	461a      	mov	r2, r3
  400882:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400884:	f413 7f00 	tst.w	r3, #512	; 0x200
  400888:	d0fb      	beq.n	400882 <ili9341_send_draw_limits+0xba>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40088a:	4b08      	ldr	r3, [pc, #32]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  40088c:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40088e:	4a07      	ldr	r2, [pc, #28]	; (4008ac <ili9341_send_draw_limits+0xe4>)
  400890:	6913      	ldr	r3, [r2, #16]
  400892:	f413 7f00 	tst.w	r3, #512	; 0x200
  400896:	d0fb      	beq.n	400890 <ili9341_send_draw_limits+0xc8>
  400898:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40089c:	4b05      	ldr	r3, [pc, #20]	; (4008b4 <ili9341_send_draw_limits+0xec>)
  40089e:	631a      	str	r2, [r3, #48]	; 0x30
  4008a0:	bd10      	pop	{r4, pc}
  4008a2:	bf00      	nop
  4008a4:	00400791 	.word	0x00400791
  4008a8:	20400a90 	.word	0x20400a90
  4008ac:	40008000 	.word	0x40008000
  4008b0:	20400a8c 	.word	0x20400a8c
  4008b4:	400e1400 	.word	0x400e1400
  4008b8:	20400a92 	.word	0x20400a92
  4008bc:	20400a8e 	.word	0x20400a8e

004008c0 <ili9341_set_top_left_limit>:
 *
 * \param x The x coordinate of the top left corner
 * \param y The y coordinate of the top left corner
 */
void ili9341_set_top_left_limit(ili9341_coord_t x, ili9341_coord_t y)
{
  4008c0:	b508      	push	{r3, lr}
	limit_start_x = x;
  4008c2:	4b04      	ldr	r3, [pc, #16]	; (4008d4 <ili9341_set_top_left_limit+0x14>)
  4008c4:	8018      	strh	r0, [r3, #0]
	limit_start_y = y;
  4008c6:	4b04      	ldr	r3, [pc, #16]	; (4008d8 <ili9341_set_top_left_limit+0x18>)
  4008c8:	8019      	strh	r1, [r3, #0]

	ili9341_send_draw_limits(false);
  4008ca:	2000      	movs	r0, #0
  4008cc:	4b03      	ldr	r3, [pc, #12]	; (4008dc <ili9341_set_top_left_limit+0x1c>)
  4008ce:	4798      	blx	r3
  4008d0:	bd08      	pop	{r3, pc}
  4008d2:	bf00      	nop
  4008d4:	20400a90 	.word	0x20400a90
  4008d8:	20400a92 	.word	0x20400a92
  4008dc:	004007c9 	.word	0x004007c9

004008e0 <ili9341_set_bottom_right_limit>:
 *
 * \param x The x coordinate of the bottom right corner
 * \param y The y coordinate of the bottom right corner
 */
void ili9341_set_bottom_right_limit(ili9341_coord_t x, ili9341_coord_t y)
{
  4008e0:	b508      	push	{r3, lr}
	limit_end_x = x;
  4008e2:	4b04      	ldr	r3, [pc, #16]	; (4008f4 <ili9341_set_bottom_right_limit+0x14>)
  4008e4:	8018      	strh	r0, [r3, #0]
	limit_end_y = y;
  4008e6:	4b04      	ldr	r3, [pc, #16]	; (4008f8 <ili9341_set_bottom_right_limit+0x18>)
  4008e8:	8019      	strh	r1, [r3, #0]

	ili9341_send_draw_limits(true);
  4008ea:	2001      	movs	r0, #1
  4008ec:	4b03      	ldr	r3, [pc, #12]	; (4008fc <ili9341_set_bottom_right_limit+0x1c>)
  4008ee:	4798      	blx	r3
  4008f0:	bd08      	pop	{r3, pc}
  4008f2:	bf00      	nop
  4008f4:	20400a8c 	.word	0x20400a8c
  4008f8:	20400a8e 	.word	0x20400a8e
  4008fc:	004007c9 	.word	0x004007c9

00400900 <ili9341_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9341_set_limits(ili9341_coord_t start_x, ili9341_coord_t start_y,
		ili9341_coord_t end_x, ili9341_coord_t end_y)
{
  400900:	b510      	push	{r4, lr}
	limit_start_x = start_x;
  400902:	4c06      	ldr	r4, [pc, #24]	; (40091c <ili9341_set_limits+0x1c>)
  400904:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  400906:	4806      	ldr	r0, [pc, #24]	; (400920 <ili9341_set_limits+0x20>)
  400908:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  40090a:	4906      	ldr	r1, [pc, #24]	; (400924 <ili9341_set_limits+0x24>)
  40090c:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  40090e:	4a06      	ldr	r2, [pc, #24]	; (400928 <ili9341_set_limits+0x28>)
  400910:	8013      	strh	r3, [r2, #0]

	ili9341_send_draw_limits(true);
  400912:	2001      	movs	r0, #1
  400914:	4b05      	ldr	r3, [pc, #20]	; (40092c <ili9341_set_limits+0x2c>)
  400916:	4798      	blx	r3
  400918:	bd10      	pop	{r4, pc}
  40091a:	bf00      	nop
  40091c:	20400a90 	.word	0x20400a90
  400920:	20400a92 	.word	0x20400a92
  400924:	20400a8c 	.word	0x20400a8c
  400928:	20400a8e 	.word	0x20400a8e
  40092c:	004007c9 	.word	0x004007c9

00400930 <ili9341_copy_pixels_to_screen>:
 *
 * \param pixels Pointer to the pixel data
 * \param count Number of pixels to copy to the screen
 */
void ili9341_copy_pixels_to_screen(const ili9341_color_t *pixels, uint32_t count)
{
  400930:	b570      	push	{r4, r5, r6, lr}
  400932:	4604      	mov	r4, r0
  400934:	460e      	mov	r6, r1
	const ili9341_color_t *pixel = pixels;

	/* Sanity check to make sure that the pixel count is not zero */
	Assert(count > 0);

	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
  400936:	202c      	movs	r0, #44	; 0x2c
  400938:	4b10      	ldr	r3, [pc, #64]	; (40097c <ili9341_copy_pixels_to_screen+0x4c>)
  40093a:	4798      	blx	r3

  // TODO> usar dma!
	while (count--) {
  40093c:	b1a6      	cbz	r6, 400968 <ili9341_copy_pixels_to_screen+0x38>
  40093e:	1e75      	subs	r5, r6, #1
  400940:	1ea0      	subs	r0, r4, #2
  400942:	4b0f      	ldr	r3, [pc, #60]	; (400980 <ili9341_copy_pixels_to_screen+0x50>)
		ili9341_send_byte(*pixel);
  400944:	7881      	ldrb	r1, [r0, #2]
  400946:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400948:	f412 7f00 	tst.w	r2, #512	; 0x200
  40094c:	d0fb      	beq.n	400946 <ili9341_copy_pixels_to_screen+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40094e:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(*pixel >> 8);
  400950:	f830 1f02 	ldrh.w	r1, [r0, #2]!
  400954:	0a09      	lsrs	r1, r1, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400956:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400958:	f412 7f00 	tst.w	r2, #512	; 0x200
  40095c:	d0fb      	beq.n	400956 <ili9341_copy_pixels_to_screen+0x26>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40095e:	60d9      	str	r1, [r3, #12]
	while (count--) {
  400960:	3d01      	subs	r5, #1
  400962:	f1b5 3fff 	cmp.w	r5, #4294967295
  400966:	d1ed      	bne.n	400944 <ili9341_copy_pixels_to_screen+0x14>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400968:	4a05      	ldr	r2, [pc, #20]	; (400980 <ili9341_copy_pixels_to_screen+0x50>)
  40096a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40096c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400970:	d0fb      	beq.n	40096a <ili9341_copy_pixels_to_screen+0x3a>
  400972:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400976:	4b03      	ldr	r3, [pc, #12]	; (400984 <ili9341_copy_pixels_to_screen+0x54>)
  400978:	631a      	str	r2, [r3, #48]	; 0x30
  40097a:	bd70      	pop	{r4, r5, r6, pc}
  40097c:	00400791 	.word	0x00400791
  400980:	40008000 	.word	0x40008000
  400984:	400e1400 	.word	0x400e1400

00400988 <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
  400988:	b510      	push	{r4, lr}
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
  40098a:	f080 0005 	eor.w	r0, r0, #5

	if (flags & ILI9341_FLIP_X) {
  40098e:	f000 0301 	and.w	r3, r0, #1
		madctl &= ~(1 << 6);
  400992:	2b00      	cmp	r3, #0
  400994:	bf0c      	ite	eq
  400996:	2448      	moveq	r4, #72	; 0x48
  400998:	2408      	movne	r4, #8
	}

	if (flags & ILI9341_FLIP_Y) {
  40099a:	f010 0f02 	tst.w	r0, #2
		madctl |= 1 << 7;
  40099e:	bf18      	it	ne
  4009a0:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
	}

	if (flags & ILI9341_SWITCH_XY) {
  4009a4:	f010 0f04 	tst.w	r0, #4
		madctl |= 1 << 5;
  4009a8:	bf18      	it	ne
  4009aa:	f044 0420 	orrne.w	r4, r4, #32
	}

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
  4009ae:	2036      	movs	r0, #54	; 0x36
  4009b0:	4b09      	ldr	r3, [pc, #36]	; (4009d8 <ili9341_set_orientation+0x50>)
  4009b2:	4798      	blx	r3
  4009b4:	4a09      	ldr	r2, [pc, #36]	; (4009dc <ili9341_set_orientation+0x54>)
  4009b6:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4009b8:	f413 7f00 	tst.w	r3, #512	; 0x200
  4009bc:	d0fb      	beq.n	4009b6 <ili9341_set_orientation+0x2e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4009be:	4b07      	ldr	r3, [pc, #28]	; (4009dc <ili9341_set_orientation+0x54>)
  4009c0:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4009c2:	461a      	mov	r2, r3
  4009c4:	6913      	ldr	r3, [r2, #16]
  4009c6:	f413 7f00 	tst.w	r3, #512	; 0x200
  4009ca:	d0fb      	beq.n	4009c4 <ili9341_set_orientation+0x3c>
  4009cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4009d0:	4b03      	ldr	r3, [pc, #12]	; (4009e0 <ili9341_set_orientation+0x58>)
  4009d2:	631a      	str	r2, [r3, #48]	; 0x30
  4009d4:	bd10      	pop	{r4, pc}
  4009d6:	bf00      	nop
  4009d8:	00400791 	.word	0x00400791
  4009dc:	40008000 	.word	0x40008000
  4009e0:	400e1400 	.word	0x400e1400

004009e4 <ili9341_init>:
{
  4009e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009e8:	b084      	sub	sp, #16
	struct spi_device device = { .id = BOARD_ILI9488_SPI_NPCS, };     	// Board specific chip select configuration
  4009ea:	2703      	movs	r7, #3
  4009ec:	ad04      	add	r5, sp, #16
  4009ee:	f845 7d04 	str.w	r7, [r5, #-4]!
	spi_master_init(CONF_ILI9341_SPI);
  4009f2:	4ca5      	ldr	r4, [pc, #660]	; (400c88 <ili9341_init+0x2a4>)
  4009f4:	4620      	mov	r0, r4
  4009f6:	4ba5      	ldr	r3, [pc, #660]	; (400c8c <ili9341_init+0x2a8>)
  4009f8:	4798      	blx	r3
	spi_master_setup_device(CONF_ILI9341_SPI, &device, spi_flags, CONF_ILI9341_CLOCK_SPEED, spi_select_id);
  4009fa:	2600      	movs	r6, #0
  4009fc:	9600      	str	r6, [sp, #0]
  4009fe:	4ba4      	ldr	r3, [pc, #656]	; (400c90 <ili9341_init+0x2ac>)
  400a00:	4632      	mov	r2, r6
  400a02:	4629      	mov	r1, r5
  400a04:	4620      	mov	r0, r4
  400a06:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 400cb0 <ili9341_init+0x2cc>
  400a0a:	47c0      	blx	r8
 	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400a0c:	4632      	mov	r2, r6
  400a0e:	4639      	mov	r1, r7
  400a10:	4620      	mov	r0, r4
  400a12:	4ba0      	ldr	r3, [pc, #640]	; (400c94 <ili9341_init+0x2b0>)
  400a14:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400a16:	2601      	movs	r6, #1
  400a18:	6026      	str	r6, [r4, #0]
  spi_select_device(CONF_ILI9341_SPI, &device);
  400a1a:	4629      	mov	r1, r5
  400a1c:	4620      	mov	r0, r4
  400a1e:	4b9e      	ldr	r3, [pc, #632]	; (400c98 <ili9341_init+0x2b4>)
  400a20:	4798      	blx	r3
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a22:	23f0      	movs	r3, #240	; 0xf0
  400a24:	60e3      	str	r3, [r4, #12]
  400a26:	60e6      	str	r6, [r4, #12]
  delay_ms(150);
  400a28:	4e9c      	ldr	r6, [pc, #624]	; (400c9c <ili9341_init+0x2b8>)
  400a2a:	4630      	mov	r0, r6
  400a2c:	4c9c      	ldr	r4, [pc, #624]	; (400ca0 <ili9341_init+0x2bc>)
  400a2e:	47a0      	blx	r4
  400a30:	4d9c      	ldr	r5, [pc, #624]	; (400ca4 <ili9341_init+0x2c0>)
  400a32:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
  400a36:	632f      	str	r7, [r5, #48]	; 0x30
	delay_ms(10);
  400a38:	f8df 8278 	ldr.w	r8, [pc, #632]	; 400cb4 <ili9341_init+0x2d0>
  400a3c:	4640      	mov	r0, r8
  400a3e:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400a40:	636f      	str	r7, [r5, #52]	; 0x34
	delay_ms(10);
  400a42:	4640      	mov	r0, r8
  400a44:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a46:	632f      	str	r7, [r5, #48]	; 0x30
	delay_ms(150);
  400a48:	4630      	mov	r0, r6
  400a4a:	47a0      	blx	r4
	ili9341_send_command(ILI9341_CMD_SLEEP_OUT);
  400a4c:	2011      	movs	r0, #17
  400a4e:	4d96      	ldr	r5, [pc, #600]	; (400ca8 <ili9341_init+0x2c4>)
  400a50:	47a8      	blx	r5
  400a52:	4f96      	ldr	r7, [pc, #600]	; (400cac <ili9341_init+0x2c8>)
  400a54:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
  400a58:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	delay_ms(150);
  400a5c:	4630      	mov	r0, r6
  400a5e:	47a0      	blx	r4
	ili9341_send_command(ILI9341_CMD_DISPLAY_ON);
  400a60:	2029      	movs	r0, #41	; 0x29
  400a62:	47a8      	blx	r5
  400a64:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_A);
  400a68:	20cd      	movs	r0, #205	; 0xcd
  400a6a:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a6c:	4a86      	ldr	r2, [pc, #536]	; (400c88 <ili9341_init+0x2a4>)
  400a6e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400a70:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a74:	d0fb      	beq.n	400a6e <ili9341_init+0x8a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a76:	2239      	movs	r2, #57	; 0x39
  400a78:	4b83      	ldr	r3, [pc, #524]	; (400c88 <ili9341_init+0x2a4>)
  400a7a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a7c:	461a      	mov	r2, r3
  400a7e:	6913      	ldr	r3, [r2, #16]
  400a80:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a84:	d0fb      	beq.n	400a7e <ili9341_init+0x9a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a86:	222c      	movs	r2, #44	; 0x2c
  400a88:	4b7f      	ldr	r3, [pc, #508]	; (400c88 <ili9341_init+0x2a4>)
  400a8a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a8c:	461a      	mov	r2, r3
  400a8e:	6913      	ldr	r3, [r2, #16]
  400a90:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a94:	d0fb      	beq.n	400a8e <ili9341_init+0xaa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a96:	2200      	movs	r2, #0
  400a98:	4b7b      	ldr	r3, [pc, #492]	; (400c88 <ili9341_init+0x2a4>)
  400a9a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a9c:	461a      	mov	r2, r3
  400a9e:	6913      	ldr	r3, [r2, #16]
  400aa0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400aa4:	d0fb      	beq.n	400a9e <ili9341_init+0xba>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400aa6:	2234      	movs	r2, #52	; 0x34
  400aa8:	4b77      	ldr	r3, [pc, #476]	; (400c88 <ili9341_init+0x2a4>)
  400aaa:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400aac:	461a      	mov	r2, r3
  400aae:	6913      	ldr	r3, [r2, #16]
  400ab0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ab4:	d0fb      	beq.n	400aae <ili9341_init+0xca>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ab6:	2202      	movs	r2, #2
  400ab8:	4b73      	ldr	r3, [pc, #460]	; (400c88 <ili9341_init+0x2a4>)
  400aba:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400abc:	461a      	mov	r2, r3
  400abe:	6913      	ldr	r3, [r2, #16]
  400ac0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ac4:	d0fb      	beq.n	400abe <ili9341_init+0xda>
  400ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400aca:	4b78      	ldr	r3, [pc, #480]	; (400cac <ili9341_init+0x2c8>)
  400acc:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_B);
  400ace:	20cf      	movs	r0, #207	; 0xcf
  400ad0:	4b75      	ldr	r3, [pc, #468]	; (400ca8 <ili9341_init+0x2c4>)
  400ad2:	4798      	blx	r3
  400ad4:	4a6c      	ldr	r2, [pc, #432]	; (400c88 <ili9341_init+0x2a4>)
  400ad6:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ad8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400adc:	d0fb      	beq.n	400ad6 <ili9341_init+0xf2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ade:	2200      	movs	r2, #0
  400ae0:	4b69      	ldr	r3, [pc, #420]	; (400c88 <ili9341_init+0x2a4>)
  400ae2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ae4:	461a      	mov	r2, r3
  400ae6:	6913      	ldr	r3, [r2, #16]
  400ae8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400aec:	d0fb      	beq.n	400ae6 <ili9341_init+0x102>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400aee:	22aa      	movs	r2, #170	; 0xaa
  400af0:	4b65      	ldr	r3, [pc, #404]	; (400c88 <ili9341_init+0x2a4>)
  400af2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400af4:	461a      	mov	r2, r3
  400af6:	6913      	ldr	r3, [r2, #16]
  400af8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400afc:	d0fb      	beq.n	400af6 <ili9341_init+0x112>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400afe:	22b0      	movs	r2, #176	; 0xb0
  400b00:	4b61      	ldr	r3, [pc, #388]	; (400c88 <ili9341_init+0x2a4>)
  400b02:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400b04:	461a      	mov	r2, r3
  400b06:	6913      	ldr	r3, [r2, #16]
  400b08:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b0c:	d0fb      	beq.n	400b06 <ili9341_init+0x122>
  400b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400b12:	4b66      	ldr	r3, [pc, #408]	; (400cac <ili9341_init+0x2c8>)
  400b14:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_PUMP_RATIO_CONTROL);
  400b16:	20f7      	movs	r0, #247	; 0xf7
  400b18:	4b63      	ldr	r3, [pc, #396]	; (400ca8 <ili9341_init+0x2c4>)
  400b1a:	4798      	blx	r3
  400b1c:	4a5a      	ldr	r2, [pc, #360]	; (400c88 <ili9341_init+0x2a4>)
  400b1e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400b20:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b24:	d0fb      	beq.n	400b1e <ili9341_init+0x13a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400b26:	2230      	movs	r2, #48	; 0x30
  400b28:	4b57      	ldr	r3, [pc, #348]	; (400c88 <ili9341_init+0x2a4>)
  400b2a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400b2c:	461a      	mov	r2, r3
  400b2e:	6913      	ldr	r3, [r2, #16]
  400b30:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b34:	d0fb      	beq.n	400b2e <ili9341_init+0x14a>
  400b36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400b3a:	4b5c      	ldr	r3, [pc, #368]	; (400cac <ili9341_init+0x2c8>)
  400b3c:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_1);
  400b3e:	20c0      	movs	r0, #192	; 0xc0
  400b40:	4b59      	ldr	r3, [pc, #356]	; (400ca8 <ili9341_init+0x2c4>)
  400b42:	4798      	blx	r3
  400b44:	4a50      	ldr	r2, [pc, #320]	; (400c88 <ili9341_init+0x2a4>)
  400b46:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400b48:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b4c:	d0fb      	beq.n	400b46 <ili9341_init+0x162>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400b4e:	2225      	movs	r2, #37	; 0x25
  400b50:	4b4d      	ldr	r3, [pc, #308]	; (400c88 <ili9341_init+0x2a4>)
  400b52:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400b54:	461a      	mov	r2, r3
  400b56:	6913      	ldr	r3, [r2, #16]
  400b58:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b5c:	d0fb      	beq.n	400b56 <ili9341_init+0x172>
  400b5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400b62:	4b52      	ldr	r3, [pc, #328]	; (400cac <ili9341_init+0x2c8>)
  400b64:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_2);
  400b66:	20c1      	movs	r0, #193	; 0xc1
  400b68:	4b4f      	ldr	r3, [pc, #316]	; (400ca8 <ili9341_init+0x2c4>)
  400b6a:	4798      	blx	r3
  400b6c:	4a46      	ldr	r2, [pc, #280]	; (400c88 <ili9341_init+0x2a4>)
  400b6e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400b70:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b74:	d0fb      	beq.n	400b6e <ili9341_init+0x18a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400b76:	2211      	movs	r2, #17
  400b78:	4b43      	ldr	r3, [pc, #268]	; (400c88 <ili9341_init+0x2a4>)
  400b7a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400b7c:	461a      	mov	r2, r3
  400b7e:	6913      	ldr	r3, [r2, #16]
  400b80:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b84:	d0fb      	beq.n	400b7e <ili9341_init+0x19a>
  400b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400b8a:	4b48      	ldr	r3, [pc, #288]	; (400cac <ili9341_init+0x2c8>)
  400b8c:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_1);
  400b8e:	20c5      	movs	r0, #197	; 0xc5
  400b90:	4b45      	ldr	r3, [pc, #276]	; (400ca8 <ili9341_init+0x2c4>)
  400b92:	4798      	blx	r3
  400b94:	4a3c      	ldr	r2, [pc, #240]	; (400c88 <ili9341_init+0x2a4>)
  400b96:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400b98:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b9c:	d0fb      	beq.n	400b96 <ili9341_init+0x1b2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400b9e:	225c      	movs	r2, #92	; 0x5c
  400ba0:	4b39      	ldr	r3, [pc, #228]	; (400c88 <ili9341_init+0x2a4>)
  400ba2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ba4:	461a      	mov	r2, r3
  400ba6:	6913      	ldr	r3, [r2, #16]
  400ba8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400bac:	d0fb      	beq.n	400ba6 <ili9341_init+0x1c2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400bae:	224c      	movs	r2, #76	; 0x4c
  400bb0:	4b35      	ldr	r3, [pc, #212]	; (400c88 <ili9341_init+0x2a4>)
  400bb2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400bb4:	461a      	mov	r2, r3
  400bb6:	6913      	ldr	r3, [r2, #16]
  400bb8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400bbc:	d0fb      	beq.n	400bb6 <ili9341_init+0x1d2>
  400bbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400bc2:	4b3a      	ldr	r3, [pc, #232]	; (400cac <ili9341_init+0x2c8>)
  400bc4:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_2);
  400bc6:	20c7      	movs	r0, #199	; 0xc7
  400bc8:	4b37      	ldr	r3, [pc, #220]	; (400ca8 <ili9341_init+0x2c4>)
  400bca:	4798      	blx	r3
  400bcc:	4a2e      	ldr	r2, [pc, #184]	; (400c88 <ili9341_init+0x2a4>)
  400bce:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400bd0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400bd4:	d0fb      	beq.n	400bce <ili9341_init+0x1ea>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400bd6:	2294      	movs	r2, #148	; 0x94
  400bd8:	4b2b      	ldr	r3, [pc, #172]	; (400c88 <ili9341_init+0x2a4>)
  400bda:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400bdc:	461a      	mov	r2, r3
  400bde:	6913      	ldr	r3, [r2, #16]
  400be0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400be4:	d0fb      	beq.n	400bde <ili9341_init+0x1fa>
  400be6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400bea:	4b30      	ldr	r3, [pc, #192]	; (400cac <ili9341_init+0x2c8>)
  400bec:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_A);
  400bee:	20e8      	movs	r0, #232	; 0xe8
  400bf0:	4b2d      	ldr	r3, [pc, #180]	; (400ca8 <ili9341_init+0x2c4>)
  400bf2:	4798      	blx	r3
  400bf4:	4a24      	ldr	r2, [pc, #144]	; (400c88 <ili9341_init+0x2a4>)
  400bf6:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400bf8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400bfc:	d0fb      	beq.n	400bf6 <ili9341_init+0x212>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400bfe:	2285      	movs	r2, #133	; 0x85
  400c00:	4b21      	ldr	r3, [pc, #132]	; (400c88 <ili9341_init+0x2a4>)
  400c02:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c04:	461a      	mov	r2, r3
  400c06:	6913      	ldr	r3, [r2, #16]
  400c08:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c0c:	d0fb      	beq.n	400c06 <ili9341_init+0x222>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c0e:	2201      	movs	r2, #1
  400c10:	4b1d      	ldr	r3, [pc, #116]	; (400c88 <ili9341_init+0x2a4>)
  400c12:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c14:	461a      	mov	r2, r3
  400c16:	6913      	ldr	r3, [r2, #16]
  400c18:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c1c:	d0fb      	beq.n	400c16 <ili9341_init+0x232>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c1e:	2278      	movs	r2, #120	; 0x78
  400c20:	4b19      	ldr	r3, [pc, #100]	; (400c88 <ili9341_init+0x2a4>)
  400c22:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c24:	461a      	mov	r2, r3
  400c26:	6913      	ldr	r3, [r2, #16]
  400c28:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c2c:	d0fb      	beq.n	400c26 <ili9341_init+0x242>
  400c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400c32:	4b1e      	ldr	r3, [pc, #120]	; (400cac <ili9341_init+0x2c8>)
  400c34:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_B);
  400c36:	20ea      	movs	r0, #234	; 0xea
  400c38:	4b1b      	ldr	r3, [pc, #108]	; (400ca8 <ili9341_init+0x2c4>)
  400c3a:	4798      	blx	r3
  400c3c:	4a12      	ldr	r2, [pc, #72]	; (400c88 <ili9341_init+0x2a4>)
  400c3e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400c40:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c44:	d0fb      	beq.n	400c3e <ili9341_init+0x25a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c46:	2200      	movs	r2, #0
  400c48:	4b0f      	ldr	r3, [pc, #60]	; (400c88 <ili9341_init+0x2a4>)
  400c4a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c4c:	461a      	mov	r2, r3
  400c4e:	6913      	ldr	r3, [r2, #16]
  400c50:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c54:	d0fb      	beq.n	400c4e <ili9341_init+0x26a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c56:	2200      	movs	r2, #0
  400c58:	4b0b      	ldr	r3, [pc, #44]	; (400c88 <ili9341_init+0x2a4>)
  400c5a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c5c:	461a      	mov	r2, r3
  400c5e:	6913      	ldr	r3, [r2, #16]
  400c60:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c64:	d0fb      	beq.n	400c5e <ili9341_init+0x27a>
  400c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400c6a:	4b10      	ldr	r3, [pc, #64]	; (400cac <ili9341_init+0x2c8>)
  400c6c:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_COLMOD_PIXEL_FORMAT_SET);
  400c6e:	203a      	movs	r0, #58	; 0x3a
  400c70:	4b0d      	ldr	r3, [pc, #52]	; (400ca8 <ili9341_init+0x2c4>)
  400c72:	4798      	blx	r3
  400c74:	4a04      	ldr	r2, [pc, #16]	; (400c88 <ili9341_init+0x2a4>)
  400c76:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400c78:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c7c:	d0fb      	beq.n	400c76 <ili9341_init+0x292>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c7e:	2255      	movs	r2, #85	; 0x55
  400c80:	4b01      	ldr	r3, [pc, #4]	; (400c88 <ili9341_init+0x2a4>)
  400c82:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c84:	461a      	mov	r2, r3
  400c86:	e017      	b.n	400cb8 <ili9341_init+0x2d4>
  400c88:	40008000 	.word	0x40008000
  400c8c:	00420b41 	.word	0x00420b41
  400c90:	02625a00 	.word	0x02625a00
  400c94:	004214e9 	.word	0x004214e9
  400c98:	00420c15 	.word	0x00420c15
  400c9c:	0073c0b7 	.word	0x0073c0b7
  400ca0:	20400001 	.word	0x20400001
  400ca4:	400e0e00 	.word	0x400e0e00
  400ca8:	00400791 	.word	0x00400791
  400cac:	400e1400 	.word	0x400e1400
  400cb0:	00420b95 	.word	0x00420b95
  400cb4:	0007b784 	.word	0x0007b784
  400cb8:	6913      	ldr	r3, [r2, #16]
  400cba:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cbe:	d0fb      	beq.n	400cb8 <ili9341_init+0x2d4>
  400cc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400cc4:	4b07      	ldr	r3, [pc, #28]	; (400ce4 <ili9341_init+0x300>)
  400cc6:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_set_orientation(0);
  400cc8:	2000      	movs	r0, #0
  400cca:	4b07      	ldr	r3, [pc, #28]	; (400ce8 <ili9341_init+0x304>)
  400ccc:	4798      	blx	r3
	ili9341_set_limits(0, 0, ILI9341_DEFAULT_WIDTH,
  400cce:	23f0      	movs	r3, #240	; 0xf0
  400cd0:	f44f 72a0 	mov.w	r2, #320	; 0x140
  400cd4:	2100      	movs	r1, #0
  400cd6:	4608      	mov	r0, r1
  400cd8:	4c04      	ldr	r4, [pc, #16]	; (400cec <ili9341_init+0x308>)
  400cda:	47a0      	blx	r4
}
  400cdc:	b004      	add	sp, #16
  400cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ce2:	bf00      	nop
  400ce4:	400e1400 	.word	0x400e1400
  400ce8:	00400989 	.word	0x00400989
  400cec:	00400901 	.word	0x00400901

00400cf0 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400cf0:	b570      	push	{r4, r5, r6, lr}
  400cf2:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400cf4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400cf6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400cf8:	4013      	ands	r3, r2
  400cfa:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400cfc:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400cfe:	4e1c      	ldr	r6, [pc, #112]	; (400d70 <afec_process_callback+0x80>)
  400d00:	4d1c      	ldr	r5, [pc, #112]	; (400d74 <afec_process_callback+0x84>)
  400d02:	42a8      	cmp	r0, r5
  400d04:	bf14      	ite	ne
  400d06:	2000      	movne	r0, #0
  400d08:	2001      	moveq	r0, #1
  400d0a:	0105      	lsls	r5, r0, #4
  400d0c:	e00b      	b.n	400d26 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400d0e:	2c0e      	cmp	r4, #14
  400d10:	d81e      	bhi.n	400d50 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400d12:	9a01      	ldr	r2, [sp, #4]
  400d14:	f104 010c 	add.w	r1, r4, #12
  400d18:	2301      	movs	r3, #1
  400d1a:	408b      	lsls	r3, r1
  400d1c:	4213      	tst	r3, r2
  400d1e:	d110      	bne.n	400d42 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400d20:	3401      	adds	r4, #1
  400d22:	2c10      	cmp	r4, #16
  400d24:	d022      	beq.n	400d6c <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400d26:	2c0b      	cmp	r4, #11
  400d28:	d8f1      	bhi.n	400d0e <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400d2a:	9a01      	ldr	r2, [sp, #4]
  400d2c:	2301      	movs	r3, #1
  400d2e:	40a3      	lsls	r3, r4
  400d30:	4213      	tst	r3, r2
  400d32:	d0f5      	beq.n	400d20 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400d34:	192b      	adds	r3, r5, r4
  400d36:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400d3a:	2b00      	cmp	r3, #0
  400d3c:	d0f0      	beq.n	400d20 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400d3e:	4798      	blx	r3
  400d40:	e7ee      	b.n	400d20 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400d42:	192b      	adds	r3, r5, r4
  400d44:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400d48:	2b00      	cmp	r3, #0
  400d4a:	d0e9      	beq.n	400d20 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400d4c:	4798      	blx	r3
  400d4e:	e7e7      	b.n	400d20 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400d50:	9a01      	ldr	r2, [sp, #4]
  400d52:	f104 010f 	add.w	r1, r4, #15
  400d56:	2301      	movs	r3, #1
  400d58:	408b      	lsls	r3, r1
  400d5a:	4213      	tst	r3, r2
  400d5c:	d0e0      	beq.n	400d20 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400d5e:	192b      	adds	r3, r5, r4
  400d60:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400d64:	2b00      	cmp	r3, #0
  400d66:	d0db      	beq.n	400d20 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400d68:	4798      	blx	r3
  400d6a:	e7d9      	b.n	400d20 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400d6c:	b002      	add	sp, #8
  400d6e:	bd70      	pop	{r4, r5, r6, pc}
  400d70:	2043a084 	.word	0x2043a084
  400d74:	40064000 	.word	0x40064000

00400d78 <afec_ch_set_config>:
{
  400d78:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400d7a:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400d7c:	2301      	movs	r3, #1
  400d7e:	408b      	lsls	r3, r1
  400d80:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400d84:	7815      	ldrb	r5, [r2, #0]
  400d86:	2d00      	cmp	r5, #0
  400d88:	bf08      	it	eq
  400d8a:	2300      	moveq	r3, #0
  400d8c:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400d8e:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400d90:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400d92:	004b      	lsls	r3, r1, #1
  400d94:	2103      	movs	r1, #3
  400d96:	4099      	lsls	r1, r3
  400d98:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400d9c:	7851      	ldrb	r1, [r2, #1]
  400d9e:	4099      	lsls	r1, r3
  400da0:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400da2:	6541      	str	r1, [r0, #84]	; 0x54
}
  400da4:	bc30      	pop	{r4, r5}
  400da6:	4770      	bx	lr

00400da8 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400da8:	2200      	movs	r2, #0
  400daa:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400dac:	4b08      	ldr	r3, [pc, #32]	; (400dd0 <afec_get_config_defaults+0x28>)
  400dae:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400db0:	4b08      	ldr	r3, [pc, #32]	; (400dd4 <afec_get_config_defaults+0x2c>)
  400db2:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400db4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400db8:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  400dba:	2302      	movs	r3, #2
  400dbc:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  400dbe:	2301      	movs	r3, #1
  400dc0:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400dc2:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400dc4:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400dc6:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400dc8:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400dca:	7583      	strb	r3, [r0, #22]
  400dcc:	4770      	bx	lr
  400dce:	bf00      	nop
  400dd0:	11e1a300 	.word	0x11e1a300
  400dd4:	005b8d80 	.word	0x005b8d80

00400dd8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400dd8:	2300      	movs	r3, #0
  400dda:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400ddc:	2301      	movs	r3, #1
  400dde:	7043      	strb	r3, [r0, #1]
  400de0:	4770      	bx	lr
	...

00400de4 <afec_init>:
	return afec->AFEC_ISR;
  400de4:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400de6:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  400dea:	d001      	beq.n	400df0 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400dec:	2019      	movs	r0, #25
  400dee:	4770      	bx	lr
{
  400df0:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400df2:	2301      	movs	r3, #1
  400df4:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400df6:	7ccb      	ldrb	r3, [r1, #19]
  400df8:	2b00      	cmp	r3, #0
  400dfa:	bf18      	it	ne
  400dfc:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400e00:	684b      	ldr	r3, [r1, #4]
  400e02:	688c      	ldr	r4, [r1, #8]
  400e04:	fbb3 f3f4 	udiv	r3, r3, r4
  400e08:	3b01      	subs	r3, #1
  400e0a:	021b      	lsls	r3, r3, #8
  400e0c:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e0e:	68cc      	ldr	r4, [r1, #12]
  400e10:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400e14:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400e16:	7c0c      	ldrb	r4, [r1, #16]
  400e18:	0624      	lsls	r4, r4, #24
  400e1a:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e1e:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400e20:	7c4c      	ldrb	r4, [r1, #17]
  400e22:	0724      	lsls	r4, r4, #28
  400e24:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e28:	4323      	orrs	r3, r4
  400e2a:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400e2c:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400e2e:	7d0b      	ldrb	r3, [r1, #20]
  400e30:	2b00      	cmp	r3, #0
  400e32:	bf14      	ite	ne
  400e34:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400e38:	2300      	moveq	r3, #0
  400e3a:	680a      	ldr	r2, [r1, #0]
  400e3c:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400e3e:	7d4a      	ldrb	r2, [r1, #21]
  400e40:	2a00      	cmp	r2, #0
  400e42:	bf14      	ite	ne
  400e44:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400e48:	2200      	moveq	r2, #0
			(config->resolution) |
  400e4a:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400e4c:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400e4e:	7d8b      	ldrb	r3, [r1, #22]
  400e50:	021b      	lsls	r3, r3, #8
  400e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400e56:	f043 030c 	orr.w	r3, r3, #12
  400e5a:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400e5e:	4b0f      	ldr	r3, [pc, #60]	; (400e9c <afec_init+0xb8>)
  400e60:	4298      	cmp	r0, r3
  400e62:	d006      	beq.n	400e72 <afec_init+0x8e>
	if(afec == AFEC1) {
  400e64:	4b0e      	ldr	r3, [pc, #56]	; (400ea0 <afec_init+0xbc>)
  400e66:	4298      	cmp	r0, r3
  400e68:	d00d      	beq.n	400e86 <afec_init+0xa2>
	return STATUS_OK;
  400e6a:	2000      	movs	r0, #0
}
  400e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e70:	4770      	bx	lr
  400e72:	4b0c      	ldr	r3, [pc, #48]	; (400ea4 <afec_init+0xc0>)
  400e74:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  400e78:	2200      	movs	r2, #0
  400e7a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400e7e:	428b      	cmp	r3, r1
  400e80:	d1fb      	bne.n	400e7a <afec_init+0x96>
	return STATUS_OK;
  400e82:	2000      	movs	r0, #0
  400e84:	e7f2      	b.n	400e6c <afec_init+0x88>
  400e86:	4b08      	ldr	r3, [pc, #32]	; (400ea8 <afec_init+0xc4>)
  400e88:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400e8c:	2200      	movs	r2, #0
  400e8e:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400e92:	428b      	cmp	r3, r1
  400e94:	d1fb      	bne.n	400e8e <afec_init+0xaa>
	return STATUS_OK;
  400e96:	2000      	movs	r0, #0
  400e98:	e7e8      	b.n	400e6c <afec_init+0x88>
  400e9a:	bf00      	nop
  400e9c:	4003c000 	.word	0x4003c000
  400ea0:	40064000 	.word	0x40064000
  400ea4:	2043a080 	.word	0x2043a080
  400ea8:	2043a0c4 	.word	0x2043a0c4

00400eac <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400eac:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400eae:	4802      	ldr	r0, [pc, #8]	; (400eb8 <AFEC0_Handler+0xc>)
  400eb0:	4b02      	ldr	r3, [pc, #8]	; (400ebc <AFEC0_Handler+0x10>)
  400eb2:	4798      	blx	r3
  400eb4:	bd08      	pop	{r3, pc}
  400eb6:	bf00      	nop
  400eb8:	4003c000 	.word	0x4003c000
  400ebc:	00400cf1 	.word	0x00400cf1

00400ec0 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400ec0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400ec2:	4802      	ldr	r0, [pc, #8]	; (400ecc <AFEC1_Handler+0xc>)
  400ec4:	4b02      	ldr	r3, [pc, #8]	; (400ed0 <AFEC1_Handler+0x10>)
  400ec6:	4798      	blx	r3
  400ec8:	bd08      	pop	{r3, pc}
  400eca:	bf00      	nop
  400ecc:	40064000 	.word	0x40064000
  400ed0:	00400cf1 	.word	0x00400cf1

00400ed4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400ed4:	b500      	push	{lr}
  400ed6:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400ed8:	4b13      	ldr	r3, [pc, #76]	; (400f28 <afec_enable+0x54>)
  400eda:	4298      	cmp	r0, r3
  400edc:	bf0c      	ite	eq
  400ede:	2028      	moveq	r0, #40	; 0x28
  400ee0:	201d      	movne	r0, #29
  400ee2:	4b12      	ldr	r3, [pc, #72]	; (400f2c <afec_enable+0x58>)
  400ee4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400ee6:	4b12      	ldr	r3, [pc, #72]	; (400f30 <afec_enable+0x5c>)
  400ee8:	789b      	ldrb	r3, [r3, #2]
  400eea:	2bff      	cmp	r3, #255	; 0xff
  400eec:	d01a      	beq.n	400f24 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400eee:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400ef2:	fab3 f383 	clz	r3, r3
  400ef6:	095b      	lsrs	r3, r3, #5
  400ef8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400efa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400efc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400f00:	2200      	movs	r2, #0
  400f02:	4b0c      	ldr	r3, [pc, #48]	; (400f34 <afec_enable+0x60>)
  400f04:	701a      	strb	r2, [r3, #0]
	return flags;
  400f06:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400f08:	4a09      	ldr	r2, [pc, #36]	; (400f30 <afec_enable+0x5c>)
  400f0a:	7893      	ldrb	r3, [r2, #2]
  400f0c:	3301      	adds	r3, #1
  400f0e:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400f10:	b129      	cbz	r1, 400f1e <afec_enable+0x4a>
		cpu_irq_enable();
  400f12:	2201      	movs	r2, #1
  400f14:	4b07      	ldr	r3, [pc, #28]	; (400f34 <afec_enable+0x60>)
  400f16:	701a      	strb	r2, [r3, #0]
  400f18:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400f1c:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400f1e:	b003      	add	sp, #12
  400f20:	f85d fb04 	ldr.w	pc, [sp], #4
  400f24:	e7fe      	b.n	400f24 <afec_enable+0x50>
  400f26:	bf00      	nop
  400f28:	40064000 	.word	0x40064000
  400f2c:	00421439 	.word	0x00421439
  400f30:	2043a07c 	.word	0x2043a07c
  400f34:	204000b4 	.word	0x204000b4

00400f38 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f38:	f100 0308 	add.w	r3, r0, #8
  400f3c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400f3e:	f04f 32ff 	mov.w	r2, #4294967295
  400f42:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f44:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f46:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400f48:	2300      	movs	r3, #0
  400f4a:	6003      	str	r3, [r0, #0]
  400f4c:	4770      	bx	lr

00400f4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400f4e:	2300      	movs	r3, #0
  400f50:	6103      	str	r3, [r0, #16]
  400f52:	4770      	bx	lr

00400f54 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400f54:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400f56:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400f58:	689a      	ldr	r2, [r3, #8]
  400f5a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400f5c:	689a      	ldr	r2, [r3, #8]
  400f5e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400f60:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400f62:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400f64:	6803      	ldr	r3, [r0, #0]
  400f66:	3301      	adds	r3, #1
  400f68:	6003      	str	r3, [r0, #0]
  400f6a:	4770      	bx	lr

00400f6c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400f6c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400f6e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400f70:	f1b5 3fff 	cmp.w	r5, #4294967295
  400f74:	d002      	beq.n	400f7c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f76:	f100 0208 	add.w	r2, r0, #8
  400f7a:	e002      	b.n	400f82 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400f7c:	6902      	ldr	r2, [r0, #16]
  400f7e:	e004      	b.n	400f8a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f80:	461a      	mov	r2, r3
  400f82:	6853      	ldr	r3, [r2, #4]
  400f84:	681c      	ldr	r4, [r3, #0]
  400f86:	42a5      	cmp	r5, r4
  400f88:	d2fa      	bcs.n	400f80 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400f8a:	6853      	ldr	r3, [r2, #4]
  400f8c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400f8e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400f90:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400f92:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400f94:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400f96:	6803      	ldr	r3, [r0, #0]
  400f98:	3301      	adds	r3, #1
  400f9a:	6003      	str	r3, [r0, #0]
}
  400f9c:	bc30      	pop	{r4, r5}
  400f9e:	4770      	bx	lr

00400fa0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400fa0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400fa2:	6842      	ldr	r2, [r0, #4]
  400fa4:	6881      	ldr	r1, [r0, #8]
  400fa6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400fa8:	6882      	ldr	r2, [r0, #8]
  400faa:	6841      	ldr	r1, [r0, #4]
  400fac:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400fae:	685a      	ldr	r2, [r3, #4]
  400fb0:	4290      	cmp	r0, r2
  400fb2:	d005      	beq.n	400fc0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400fb4:	2200      	movs	r2, #0
  400fb6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400fb8:	6818      	ldr	r0, [r3, #0]
  400fba:	3801      	subs	r0, #1
  400fbc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400fbe:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400fc0:	6882      	ldr	r2, [r0, #8]
  400fc2:	605a      	str	r2, [r3, #4]
  400fc4:	e7f6      	b.n	400fb4 <uxListRemove+0x14>
	...

00400fc8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400fc8:	4b0d      	ldr	r3, [pc, #52]	; (401000 <prvTaskExitError+0x38>)
  400fca:	681b      	ldr	r3, [r3, #0]
  400fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fd0:	d00a      	beq.n	400fe8 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400fd2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fd6:	b672      	cpsid	i
  400fd8:	f383 8811 	msr	BASEPRI, r3
  400fdc:	f3bf 8f6f 	isb	sy
  400fe0:	f3bf 8f4f 	dsb	sy
  400fe4:	b662      	cpsie	i
  400fe6:	e7fe      	b.n	400fe6 <prvTaskExitError+0x1e>
  400fe8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fec:	b672      	cpsid	i
  400fee:	f383 8811 	msr	BASEPRI, r3
  400ff2:	f3bf 8f6f 	isb	sy
  400ff6:	f3bf 8f4f 	dsb	sy
  400ffa:	b662      	cpsie	i
  400ffc:	e7fe      	b.n	400ffc <prvTaskExitError+0x34>
  400ffe:	bf00      	nop
  401000:	2040000c 	.word	0x2040000c

00401004 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401004:	4806      	ldr	r0, [pc, #24]	; (401020 <prvPortStartFirstTask+0x1c>)
  401006:	6800      	ldr	r0, [r0, #0]
  401008:	6800      	ldr	r0, [r0, #0]
  40100a:	f380 8808 	msr	MSP, r0
  40100e:	b662      	cpsie	i
  401010:	b661      	cpsie	f
  401012:	f3bf 8f4f 	dsb	sy
  401016:	f3bf 8f6f 	isb	sy
  40101a:	df00      	svc	0
  40101c:	bf00      	nop
  40101e:	0000      	.short	0x0000
  401020:	e000ed08 	.word	0xe000ed08

00401024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401034 <vPortEnableVFP+0x10>
  401028:	6801      	ldr	r1, [r0, #0]
  40102a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40102e:	6001      	str	r1, [r0, #0]
  401030:	4770      	bx	lr
  401032:	0000      	.short	0x0000
  401034:	e000ed88 	.word	0xe000ed88

00401038 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40103c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401040:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401044:	4b05      	ldr	r3, [pc, #20]	; (40105c <pxPortInitialiseStack+0x24>)
  401046:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40104a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40104e:	f06f 0302 	mvn.w	r3, #2
  401052:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401056:	3844      	subs	r0, #68	; 0x44
  401058:	4770      	bx	lr
  40105a:	bf00      	nop
  40105c:	00400fc9 	.word	0x00400fc9

00401060 <SVC_Handler>:
	__asm volatile (
  401060:	4b06      	ldr	r3, [pc, #24]	; (40107c <pxCurrentTCBConst2>)
  401062:	6819      	ldr	r1, [r3, #0]
  401064:	6808      	ldr	r0, [r1, #0]
  401066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40106a:	f380 8809 	msr	PSP, r0
  40106e:	f3bf 8f6f 	isb	sy
  401072:	f04f 0000 	mov.w	r0, #0
  401076:	f380 8811 	msr	BASEPRI, r0
  40107a:	4770      	bx	lr

0040107c <pxCurrentTCBConst2>:
  40107c:	2040c2a4 	.word	0x2040c2a4
  401080:	4770      	bx	lr
  401082:	bf00      	nop

00401084 <vPortEnterCritical>:
  401084:	f04f 0380 	mov.w	r3, #128	; 0x80
  401088:	b672      	cpsid	i
  40108a:	f383 8811 	msr	BASEPRI, r3
  40108e:	f3bf 8f6f 	isb	sy
  401092:	f3bf 8f4f 	dsb	sy
  401096:	b662      	cpsie	i
	uxCriticalNesting++;
  401098:	4a0b      	ldr	r2, [pc, #44]	; (4010c8 <vPortEnterCritical+0x44>)
  40109a:	6813      	ldr	r3, [r2, #0]
  40109c:	3301      	adds	r3, #1
  40109e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4010a0:	2b01      	cmp	r3, #1
  4010a2:	d10f      	bne.n	4010c4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4010a4:	4b09      	ldr	r3, [pc, #36]	; (4010cc <vPortEnterCritical+0x48>)
  4010a6:	681b      	ldr	r3, [r3, #0]
  4010a8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4010ac:	d00a      	beq.n	4010c4 <vPortEnterCritical+0x40>
  4010ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010b2:	b672      	cpsid	i
  4010b4:	f383 8811 	msr	BASEPRI, r3
  4010b8:	f3bf 8f6f 	isb	sy
  4010bc:	f3bf 8f4f 	dsb	sy
  4010c0:	b662      	cpsie	i
  4010c2:	e7fe      	b.n	4010c2 <vPortEnterCritical+0x3e>
  4010c4:	4770      	bx	lr
  4010c6:	bf00      	nop
  4010c8:	2040000c 	.word	0x2040000c
  4010cc:	e000ed04 	.word	0xe000ed04

004010d0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4010d0:	4b0a      	ldr	r3, [pc, #40]	; (4010fc <vPortExitCritical+0x2c>)
  4010d2:	681b      	ldr	r3, [r3, #0]
  4010d4:	b953      	cbnz	r3, 4010ec <vPortExitCritical+0x1c>
  4010d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010da:	b672      	cpsid	i
  4010dc:	f383 8811 	msr	BASEPRI, r3
  4010e0:	f3bf 8f6f 	isb	sy
  4010e4:	f3bf 8f4f 	dsb	sy
  4010e8:	b662      	cpsie	i
  4010ea:	e7fe      	b.n	4010ea <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4010ec:	3b01      	subs	r3, #1
  4010ee:	4a03      	ldr	r2, [pc, #12]	; (4010fc <vPortExitCritical+0x2c>)
  4010f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4010f2:	b90b      	cbnz	r3, 4010f8 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4010f4:	f383 8811 	msr	BASEPRI, r3
  4010f8:	4770      	bx	lr
  4010fa:	bf00      	nop
  4010fc:	2040000c 	.word	0x2040000c

00401100 <PendSV_Handler>:
	__asm volatile
  401100:	f3ef 8009 	mrs	r0, PSP
  401104:	f3bf 8f6f 	isb	sy
  401108:	4b15      	ldr	r3, [pc, #84]	; (401160 <pxCurrentTCBConst>)
  40110a:	681a      	ldr	r2, [r3, #0]
  40110c:	f01e 0f10 	tst.w	lr, #16
  401110:	bf08      	it	eq
  401112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40111a:	6010      	str	r0, [r2, #0]
  40111c:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401120:	f04f 0080 	mov.w	r0, #128	; 0x80
  401124:	b672      	cpsid	i
  401126:	f380 8811 	msr	BASEPRI, r0
  40112a:	f3bf 8f4f 	dsb	sy
  40112e:	f3bf 8f6f 	isb	sy
  401132:	b662      	cpsie	i
  401134:	f001 f976 	bl	402424 <vTaskSwitchContext>
  401138:	f04f 0000 	mov.w	r0, #0
  40113c:	f380 8811 	msr	BASEPRI, r0
  401140:	bc08      	pop	{r3}
  401142:	6819      	ldr	r1, [r3, #0]
  401144:	6808      	ldr	r0, [r1, #0]
  401146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40114a:	f01e 0f10 	tst.w	lr, #16
  40114e:	bf08      	it	eq
  401150:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401154:	f380 8809 	msr	PSP, r0
  401158:	f3bf 8f6f 	isb	sy
  40115c:	4770      	bx	lr
  40115e:	bf00      	nop

00401160 <pxCurrentTCBConst>:
  401160:	2040c2a4 	.word	0x2040c2a4
  401164:	4770      	bx	lr
  401166:	bf00      	nop

00401168 <SysTick_Handler>:
{
  401168:	b508      	push	{r3, lr}
	__asm volatile
  40116a:	f3ef 8311 	mrs	r3, BASEPRI
  40116e:	f04f 0280 	mov.w	r2, #128	; 0x80
  401172:	b672      	cpsid	i
  401174:	f382 8811 	msr	BASEPRI, r2
  401178:	f3bf 8f6f 	isb	sy
  40117c:	f3bf 8f4f 	dsb	sy
  401180:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  401182:	4b05      	ldr	r3, [pc, #20]	; (401198 <SysTick_Handler+0x30>)
  401184:	4798      	blx	r3
  401186:	b118      	cbz	r0, 401190 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40118c:	4b03      	ldr	r3, [pc, #12]	; (40119c <SysTick_Handler+0x34>)
  40118e:	601a      	str	r2, [r3, #0]
	__asm volatile
  401190:	2300      	movs	r3, #0
  401192:	f383 8811 	msr	BASEPRI, r3
  401196:	bd08      	pop	{r3, pc}
  401198:	00402091 	.word	0x00402091
  40119c:	e000ed04 	.word	0xe000ed04

004011a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4011a0:	4a03      	ldr	r2, [pc, #12]	; (4011b0 <vPortSetupTimerInterrupt+0x10>)
  4011a2:	4b04      	ldr	r3, [pc, #16]	; (4011b4 <vPortSetupTimerInterrupt+0x14>)
  4011a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4011a6:	2207      	movs	r2, #7
  4011a8:	3b04      	subs	r3, #4
  4011aa:	601a      	str	r2, [r3, #0]
  4011ac:	4770      	bx	lr
  4011ae:	bf00      	nop
  4011b0:	0003a97f 	.word	0x0003a97f
  4011b4:	e000e014 	.word	0xe000e014

004011b8 <xPortStartScheduler>:
{
  4011b8:	b500      	push	{lr}
  4011ba:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4011bc:	4b25      	ldr	r3, [pc, #148]	; (401254 <xPortStartScheduler+0x9c>)
  4011be:	781a      	ldrb	r2, [r3, #0]
  4011c0:	b2d2      	uxtb	r2, r2
  4011c2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4011c4:	22ff      	movs	r2, #255	; 0xff
  4011c6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4011c8:	781b      	ldrb	r3, [r3, #0]
  4011ca:	b2db      	uxtb	r3, r3
  4011cc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4011d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4011d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4011d8:	4a1f      	ldr	r2, [pc, #124]	; (401258 <xPortStartScheduler+0xa0>)
  4011da:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4011dc:	2207      	movs	r2, #7
  4011de:	4b1f      	ldr	r3, [pc, #124]	; (40125c <xPortStartScheduler+0xa4>)
  4011e0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4011e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4011e6:	f013 0f80 	tst.w	r3, #128	; 0x80
  4011ea:	d010      	beq.n	40120e <xPortStartScheduler+0x56>
  4011ec:	2206      	movs	r2, #6
  4011ee:	e000      	b.n	4011f2 <xPortStartScheduler+0x3a>
  4011f0:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4011f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4011f6:	005b      	lsls	r3, r3, #1
  4011f8:	b2db      	uxtb	r3, r3
  4011fa:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4011fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401202:	1e51      	subs	r1, r2, #1
  401204:	f013 0f80 	tst.w	r3, #128	; 0x80
  401208:	d1f2      	bne.n	4011f0 <xPortStartScheduler+0x38>
  40120a:	4b14      	ldr	r3, [pc, #80]	; (40125c <xPortStartScheduler+0xa4>)
  40120c:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40120e:	4a13      	ldr	r2, [pc, #76]	; (40125c <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401210:	6813      	ldr	r3, [r2, #0]
  401212:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401214:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401218:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40121a:	9b01      	ldr	r3, [sp, #4]
  40121c:	b2db      	uxtb	r3, r3
  40121e:	4a0d      	ldr	r2, [pc, #52]	; (401254 <xPortStartScheduler+0x9c>)
  401220:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401222:	4b0f      	ldr	r3, [pc, #60]	; (401260 <xPortStartScheduler+0xa8>)
  401224:	681a      	ldr	r2, [r3, #0]
  401226:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40122a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40122c:	681a      	ldr	r2, [r3, #0]
  40122e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401232:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401234:	4b0b      	ldr	r3, [pc, #44]	; (401264 <xPortStartScheduler+0xac>)
  401236:	4798      	blx	r3
	uxCriticalNesting = 0;
  401238:	2200      	movs	r2, #0
  40123a:	4b0b      	ldr	r3, [pc, #44]	; (401268 <xPortStartScheduler+0xb0>)
  40123c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40123e:	4b0b      	ldr	r3, [pc, #44]	; (40126c <xPortStartScheduler+0xb4>)
  401240:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401242:	4a0b      	ldr	r2, [pc, #44]	; (401270 <xPortStartScheduler+0xb8>)
  401244:	6813      	ldr	r3, [r2, #0]
  401246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40124a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40124c:	4b09      	ldr	r3, [pc, #36]	; (401274 <xPortStartScheduler+0xbc>)
  40124e:	4798      	blx	r3
	prvTaskExitError();
  401250:	4b09      	ldr	r3, [pc, #36]	; (401278 <xPortStartScheduler+0xc0>)
  401252:	4798      	blx	r3
  401254:	e000e400 	.word	0xe000e400
  401258:	20400a94 	.word	0x20400a94
  40125c:	20400a98 	.word	0x20400a98
  401260:	e000ed20 	.word	0xe000ed20
  401264:	004011a1 	.word	0x004011a1
  401268:	2040000c 	.word	0x2040000c
  40126c:	00401025 	.word	0x00401025
  401270:	e000ef34 	.word	0xe000ef34
  401274:	00401005 	.word	0x00401005
  401278:	00400fc9 	.word	0x00400fc9

0040127c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  40127c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401280:	2b0f      	cmp	r3, #15
  401282:	d911      	bls.n	4012a8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401284:	4a12      	ldr	r2, [pc, #72]	; (4012d0 <vPortValidateInterruptPriority+0x54>)
  401286:	5c9b      	ldrb	r3, [r3, r2]
  401288:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40128a:	4a12      	ldr	r2, [pc, #72]	; (4012d4 <vPortValidateInterruptPriority+0x58>)
  40128c:	7812      	ldrb	r2, [r2, #0]
  40128e:	429a      	cmp	r2, r3
  401290:	d90a      	bls.n	4012a8 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401292:	f04f 0380 	mov.w	r3, #128	; 0x80
  401296:	b672      	cpsid	i
  401298:	f383 8811 	msr	BASEPRI, r3
  40129c:	f3bf 8f6f 	isb	sy
  4012a0:	f3bf 8f4f 	dsb	sy
  4012a4:	b662      	cpsie	i
  4012a6:	e7fe      	b.n	4012a6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4012a8:	4b0b      	ldr	r3, [pc, #44]	; (4012d8 <vPortValidateInterruptPriority+0x5c>)
  4012aa:	681b      	ldr	r3, [r3, #0]
  4012ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4012b0:	4a0a      	ldr	r2, [pc, #40]	; (4012dc <vPortValidateInterruptPriority+0x60>)
  4012b2:	6812      	ldr	r2, [r2, #0]
  4012b4:	4293      	cmp	r3, r2
  4012b6:	d90a      	bls.n	4012ce <vPortValidateInterruptPriority+0x52>
  4012b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012bc:	b672      	cpsid	i
  4012be:	f383 8811 	msr	BASEPRI, r3
  4012c2:	f3bf 8f6f 	isb	sy
  4012c6:	f3bf 8f4f 	dsb	sy
  4012ca:	b662      	cpsie	i
  4012cc:	e7fe      	b.n	4012cc <vPortValidateInterruptPriority+0x50>
  4012ce:	4770      	bx	lr
  4012d0:	e000e3f0 	.word	0xe000e3f0
  4012d4:	20400a94 	.word	0x20400a94
  4012d8:	e000ed0c 	.word	0xe000ed0c
  4012dc:	20400a98 	.word	0x20400a98

004012e0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4012e0:	b538      	push	{r3, r4, r5, lr}
  4012e2:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4012e4:	f010 0f07 	tst.w	r0, #7
  4012e8:	d002      	beq.n	4012f0 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4012ea:	f020 0407 	bic.w	r4, r0, #7
  4012ee:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  4012f0:	4b11      	ldr	r3, [pc, #68]	; (401338 <pvPortMalloc+0x58>)
  4012f2:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  4012f4:	4b11      	ldr	r3, [pc, #68]	; (40133c <pvPortMalloc+0x5c>)
  4012f6:	681b      	ldr	r3, [r3, #0]
  4012f8:	b193      	cbz	r3, 401320 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  4012fa:	4b11      	ldr	r3, [pc, #68]	; (401340 <pvPortMalloc+0x60>)
  4012fc:	681b      	ldr	r3, [r3, #0]
  4012fe:	441c      	add	r4, r3
  401300:	42a3      	cmp	r3, r4
  401302:	d213      	bcs.n	40132c <pvPortMalloc+0x4c>
  401304:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  401308:	4294      	cmp	r4, r2
  40130a:	d80f      	bhi.n	40132c <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  40130c:	4a0b      	ldr	r2, [pc, #44]	; (40133c <pvPortMalloc+0x5c>)
  40130e:	6815      	ldr	r5, [r2, #0]
  401310:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  401312:	4b0b      	ldr	r3, [pc, #44]	; (401340 <pvPortMalloc+0x60>)
  401314:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401316:	4b0b      	ldr	r3, [pc, #44]	; (401344 <pvPortMalloc+0x64>)
  401318:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40131a:	b14d      	cbz	r5, 401330 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  40131c:	4628      	mov	r0, r5
  40131e:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  401320:	4b09      	ldr	r3, [pc, #36]	; (401348 <pvPortMalloc+0x68>)
  401322:	f023 0307 	bic.w	r3, r3, #7
  401326:	4a05      	ldr	r2, [pc, #20]	; (40133c <pvPortMalloc+0x5c>)
  401328:	6013      	str	r3, [r2, #0]
  40132a:	e7e6      	b.n	4012fa <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  40132c:	4b05      	ldr	r3, [pc, #20]	; (401344 <pvPortMalloc+0x64>)
  40132e:	4798      	blx	r3
			vApplicationMallocFailedHook();
  401330:	4b06      	ldr	r3, [pc, #24]	; (40134c <pvPortMalloc+0x6c>)
  401332:	4798      	blx	r3
  401334:	2500      	movs	r5, #0
	return pvReturn;
  401336:	e7f1      	b.n	40131c <pvPortMalloc+0x3c>
  401338:	00402075 	.word	0x00402075
  40133c:	20400a9c 	.word	0x20400a9c
  401340:	2040c2a0 	.word	0x2040c2a0
  401344:	004021dd 	.word	0x004021dd
  401348:	20400aa8 	.word	0x20400aa8
  40134c:	00421d0f 	.word	0x00421d0f

00401350 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  401350:	b150      	cbz	r0, 401368 <vPortFree+0x18>
  401352:	f04f 0380 	mov.w	r3, #128	; 0x80
  401356:	b672      	cpsid	i
  401358:	f383 8811 	msr	BASEPRI, r3
  40135c:	f3bf 8f6f 	isb	sy
  401360:	f3bf 8f4f 	dsb	sy
  401364:	b662      	cpsie	i
  401366:	e7fe      	b.n	401366 <vPortFree+0x16>
  401368:	4770      	bx	lr
	...

0040136c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40136c:	b538      	push	{r3, r4, r5, lr}
  40136e:	4604      	mov	r4, r0
  401370:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401372:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401374:	b95a      	cbnz	r2, 40138e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401376:	6803      	ldr	r3, [r0, #0]
  401378:	2b00      	cmp	r3, #0
  40137a:	d12e      	bne.n	4013da <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40137c:	6840      	ldr	r0, [r0, #4]
  40137e:	4b1b      	ldr	r3, [pc, #108]	; (4013ec <prvCopyDataToQueue+0x80>)
  401380:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401382:	2300      	movs	r3, #0
  401384:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401388:	3301      	adds	r3, #1
  40138a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  40138c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  40138e:	b96d      	cbnz	r5, 4013ac <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401390:	6880      	ldr	r0, [r0, #8]
  401392:	4b17      	ldr	r3, [pc, #92]	; (4013f0 <prvCopyDataToQueue+0x84>)
  401394:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401396:	68a3      	ldr	r3, [r4, #8]
  401398:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40139a:	4413      	add	r3, r2
  40139c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40139e:	6862      	ldr	r2, [r4, #4]
  4013a0:	4293      	cmp	r3, r2
  4013a2:	d31c      	bcc.n	4013de <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4013a4:	6823      	ldr	r3, [r4, #0]
  4013a6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4013a8:	2000      	movs	r0, #0
  4013aa:	e7ec      	b.n	401386 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4013ac:	68c0      	ldr	r0, [r0, #12]
  4013ae:	4b10      	ldr	r3, [pc, #64]	; (4013f0 <prvCopyDataToQueue+0x84>)
  4013b0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4013b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4013b4:	425b      	negs	r3, r3
  4013b6:	68e2      	ldr	r2, [r4, #12]
  4013b8:	441a      	add	r2, r3
  4013ba:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4013bc:	6821      	ldr	r1, [r4, #0]
  4013be:	428a      	cmp	r2, r1
  4013c0:	d202      	bcs.n	4013c8 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4013c2:	6862      	ldr	r2, [r4, #4]
  4013c4:	4413      	add	r3, r2
  4013c6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4013c8:	2d02      	cmp	r5, #2
  4013ca:	d10a      	bne.n	4013e2 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4013cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4013ce:	b153      	cbz	r3, 4013e6 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4013d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4013d2:	3b01      	subs	r3, #1
  4013d4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4013d6:	2000      	movs	r0, #0
  4013d8:	e7d5      	b.n	401386 <prvCopyDataToQueue+0x1a>
  4013da:	2000      	movs	r0, #0
  4013dc:	e7d3      	b.n	401386 <prvCopyDataToQueue+0x1a>
  4013de:	2000      	movs	r0, #0
  4013e0:	e7d1      	b.n	401386 <prvCopyDataToQueue+0x1a>
  4013e2:	2000      	movs	r0, #0
  4013e4:	e7cf      	b.n	401386 <prvCopyDataToQueue+0x1a>
  4013e6:	2000      	movs	r0, #0
  4013e8:	e7cd      	b.n	401386 <prvCopyDataToQueue+0x1a>
  4013ea:	bf00      	nop
  4013ec:	00402825 	.word	0x00402825
  4013f0:	00423005 	.word	0x00423005

004013f4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4013f4:	b530      	push	{r4, r5, lr}
  4013f6:	b083      	sub	sp, #12
  4013f8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4013fa:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4013fc:	b174      	cbz	r4, 40141c <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4013fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401400:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401402:	429a      	cmp	r2, r3
  401404:	d315      	bcc.n	401432 <prvNotifyQueueSetContainer+0x3e>
  401406:	f04f 0380 	mov.w	r3, #128	; 0x80
  40140a:	b672      	cpsid	i
  40140c:	f383 8811 	msr	BASEPRI, r3
  401410:	f3bf 8f6f 	isb	sy
  401414:	f3bf 8f4f 	dsb	sy
  401418:	b662      	cpsie	i
  40141a:	e7fe      	b.n	40141a <prvNotifyQueueSetContainer+0x26>
  40141c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401420:	b672      	cpsid	i
  401422:	f383 8811 	msr	BASEPRI, r3
  401426:	f3bf 8f6f 	isb	sy
  40142a:	f3bf 8f4f 	dsb	sy
  40142e:	b662      	cpsie	i
  401430:	e7fe      	b.n	401430 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401432:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401434:	4293      	cmp	r3, r2
  401436:	d803      	bhi.n	401440 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401438:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40143a:	4628      	mov	r0, r5
  40143c:	b003      	add	sp, #12
  40143e:	bd30      	pop	{r4, r5, pc}
  401440:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401442:	a901      	add	r1, sp, #4
  401444:	4620      	mov	r0, r4
  401446:	4b0b      	ldr	r3, [pc, #44]	; (401474 <prvNotifyQueueSetContainer+0x80>)
  401448:	4798      	blx	r3
  40144a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40144c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40144e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401452:	d10a      	bne.n	40146a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401454:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401456:	2b00      	cmp	r3, #0
  401458:	d0ef      	beq.n	40143a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40145a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40145e:	4b06      	ldr	r3, [pc, #24]	; (401478 <prvNotifyQueueSetContainer+0x84>)
  401460:	4798      	blx	r3
  401462:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401464:	bf18      	it	ne
  401466:	2501      	movne	r5, #1
  401468:	e7e7      	b.n	40143a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  40146a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40146c:	3301      	adds	r3, #1
  40146e:	64a3      	str	r3, [r4, #72]	; 0x48
  401470:	e7e3      	b.n	40143a <prvNotifyQueueSetContainer+0x46>
  401472:	bf00      	nop
  401474:	0040136d 	.word	0x0040136d
  401478:	004025f9 	.word	0x004025f9

0040147c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40147c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40147e:	b172      	cbz	r2, 40149e <prvCopyDataFromQueue+0x22>
{
  401480:	b510      	push	{r4, lr}
  401482:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401484:	68c4      	ldr	r4, [r0, #12]
  401486:	4414      	add	r4, r2
  401488:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40148a:	6840      	ldr	r0, [r0, #4]
  40148c:	4284      	cmp	r4, r0
  40148e:	d301      	bcc.n	401494 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401490:	6818      	ldr	r0, [r3, #0]
  401492:	60d8      	str	r0, [r3, #12]
  401494:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401496:	68d9      	ldr	r1, [r3, #12]
  401498:	4b01      	ldr	r3, [pc, #4]	; (4014a0 <prvCopyDataFromQueue+0x24>)
  40149a:	4798      	blx	r3
  40149c:	bd10      	pop	{r4, pc}
  40149e:	4770      	bx	lr
  4014a0:	00423005 	.word	0x00423005

004014a4 <prvUnlockQueue>:
{
  4014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014a6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4014a8:	4b22      	ldr	r3, [pc, #136]	; (401534 <prvUnlockQueue+0x90>)
  4014aa:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4014ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014ae:	2b00      	cmp	r3, #0
  4014b0:	dd1b      	ble.n	4014ea <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4014b2:	4d21      	ldr	r5, [pc, #132]	; (401538 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4014b4:	4f21      	ldr	r7, [pc, #132]	; (40153c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4014b6:	4e22      	ldr	r6, [pc, #136]	; (401540 <prvUnlockQueue+0x9c>)
  4014b8:	e00b      	b.n	4014d2 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4014ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014bc:	b1ab      	cbz	r3, 4014ea <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4014be:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014c2:	47b0      	blx	r6
  4014c4:	b978      	cbnz	r0, 4014e6 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4014c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014c8:	3b01      	subs	r3, #1
  4014ca:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4014cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014ce:	2b00      	cmp	r3, #0
  4014d0:	dd0b      	ble.n	4014ea <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4014d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4014d4:	2b00      	cmp	r3, #0
  4014d6:	d0f0      	beq.n	4014ba <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4014d8:	2100      	movs	r1, #0
  4014da:	4620      	mov	r0, r4
  4014dc:	47a8      	blx	r5
  4014de:	2801      	cmp	r0, #1
  4014e0:	d1f1      	bne.n	4014c6 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4014e2:	47b8      	blx	r7
  4014e4:	e7ef      	b.n	4014c6 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4014e6:	47b8      	blx	r7
  4014e8:	e7ed      	b.n	4014c6 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4014ea:	f04f 33ff 	mov.w	r3, #4294967295
  4014ee:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4014f0:	4b14      	ldr	r3, [pc, #80]	; (401544 <prvUnlockQueue+0xa0>)
  4014f2:	4798      	blx	r3
	taskENTER_CRITICAL();
  4014f4:	4b0f      	ldr	r3, [pc, #60]	; (401534 <prvUnlockQueue+0x90>)
  4014f6:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4014f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4014fa:	2b00      	cmp	r3, #0
  4014fc:	dd14      	ble.n	401528 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4014fe:	6923      	ldr	r3, [r4, #16]
  401500:	b193      	cbz	r3, 401528 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401502:	f104 0610 	add.w	r6, r4, #16
  401506:	4d0e      	ldr	r5, [pc, #56]	; (401540 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401508:	4f0c      	ldr	r7, [pc, #48]	; (40153c <prvUnlockQueue+0x98>)
  40150a:	e007      	b.n	40151c <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  40150c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40150e:	3b01      	subs	r3, #1
  401510:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401512:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401514:	2b00      	cmp	r3, #0
  401516:	dd07      	ble.n	401528 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401518:	6923      	ldr	r3, [r4, #16]
  40151a:	b12b      	cbz	r3, 401528 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40151c:	4630      	mov	r0, r6
  40151e:	47a8      	blx	r5
  401520:	2800      	cmp	r0, #0
  401522:	d0f3      	beq.n	40150c <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401524:	47b8      	blx	r7
  401526:	e7f1      	b.n	40150c <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401528:	f04f 33ff 	mov.w	r3, #4294967295
  40152c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  40152e:	4b05      	ldr	r3, [pc, #20]	; (401544 <prvUnlockQueue+0xa0>)
  401530:	4798      	blx	r3
  401532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401534:	00401085 	.word	0x00401085
  401538:	004013f5 	.word	0x004013f5
  40153c:	00402755 	.word	0x00402755
  401540:	004025f9 	.word	0x004025f9
  401544:	004010d1 	.word	0x004010d1

00401548 <xQueueGenericReset>:
{
  401548:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40154a:	b308      	cbz	r0, 401590 <xQueueGenericReset+0x48>
  40154c:	4604      	mov	r4, r0
  40154e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401550:	4b1d      	ldr	r3, [pc, #116]	; (4015c8 <xQueueGenericReset+0x80>)
  401552:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401554:	6822      	ldr	r2, [r4, #0]
  401556:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401558:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40155a:	fb03 f301 	mul.w	r3, r3, r1
  40155e:	18d0      	adds	r0, r2, r3
  401560:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401562:	2000      	movs	r0, #0
  401564:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401566:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401568:	1a5b      	subs	r3, r3, r1
  40156a:	4413      	add	r3, r2
  40156c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40156e:	f04f 33ff 	mov.w	r3, #4294967295
  401572:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401574:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401576:	b9fd      	cbnz	r5, 4015b8 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401578:	6923      	ldr	r3, [r4, #16]
  40157a:	b12b      	cbz	r3, 401588 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40157c:	f104 0010 	add.w	r0, r4, #16
  401580:	4b12      	ldr	r3, [pc, #72]	; (4015cc <xQueueGenericReset+0x84>)
  401582:	4798      	blx	r3
  401584:	2801      	cmp	r0, #1
  401586:	d00e      	beq.n	4015a6 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401588:	4b11      	ldr	r3, [pc, #68]	; (4015d0 <xQueueGenericReset+0x88>)
  40158a:	4798      	blx	r3
}
  40158c:	2001      	movs	r0, #1
  40158e:	bd38      	pop	{r3, r4, r5, pc}
  401590:	f04f 0380 	mov.w	r3, #128	; 0x80
  401594:	b672      	cpsid	i
  401596:	f383 8811 	msr	BASEPRI, r3
  40159a:	f3bf 8f6f 	isb	sy
  40159e:	f3bf 8f4f 	dsb	sy
  4015a2:	b662      	cpsie	i
  4015a4:	e7fe      	b.n	4015a4 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  4015a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015aa:	4b0a      	ldr	r3, [pc, #40]	; (4015d4 <xQueueGenericReset+0x8c>)
  4015ac:	601a      	str	r2, [r3, #0]
  4015ae:	f3bf 8f4f 	dsb	sy
  4015b2:	f3bf 8f6f 	isb	sy
  4015b6:	e7e7      	b.n	401588 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4015b8:	f104 0010 	add.w	r0, r4, #16
  4015bc:	4d06      	ldr	r5, [pc, #24]	; (4015d8 <xQueueGenericReset+0x90>)
  4015be:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4015c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015c4:	47a8      	blx	r5
  4015c6:	e7df      	b.n	401588 <xQueueGenericReset+0x40>
  4015c8:	00401085 	.word	0x00401085
  4015cc:	004025f9 	.word	0x004025f9
  4015d0:	004010d1 	.word	0x004010d1
  4015d4:	e000ed04 	.word	0xe000ed04
  4015d8:	00400f39 	.word	0x00400f39

004015dc <xQueueGenericCreate>:
{
  4015dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4015de:	b950      	cbnz	r0, 4015f6 <xQueueGenericCreate+0x1a>
  4015e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015e4:	b672      	cpsid	i
  4015e6:	f383 8811 	msr	BASEPRI, r3
  4015ea:	f3bf 8f6f 	isb	sy
  4015ee:	f3bf 8f4f 	dsb	sy
  4015f2:	b662      	cpsie	i
  4015f4:	e7fe      	b.n	4015f4 <xQueueGenericCreate+0x18>
  4015f6:	4606      	mov	r6, r0
  4015f8:	4617      	mov	r7, r2
  4015fa:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  4015fc:	b189      	cbz	r1, 401622 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4015fe:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401602:	3059      	adds	r0, #89	; 0x59
  401604:	4b12      	ldr	r3, [pc, #72]	; (401650 <xQueueGenericCreate+0x74>)
  401606:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401608:	4604      	mov	r4, r0
  40160a:	b9e8      	cbnz	r0, 401648 <xQueueGenericCreate+0x6c>
  40160c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401610:	b672      	cpsid	i
  401612:	f383 8811 	msr	BASEPRI, r3
  401616:	f3bf 8f6f 	isb	sy
  40161a:	f3bf 8f4f 	dsb	sy
  40161e:	b662      	cpsie	i
  401620:	e7fe      	b.n	401620 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401622:	2058      	movs	r0, #88	; 0x58
  401624:	4b0a      	ldr	r3, [pc, #40]	; (401650 <xQueueGenericCreate+0x74>)
  401626:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401628:	4604      	mov	r4, r0
  40162a:	2800      	cmp	r0, #0
  40162c:	d0ee      	beq.n	40160c <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40162e:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401630:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401632:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401634:	2101      	movs	r1, #1
  401636:	4620      	mov	r0, r4
  401638:	4b06      	ldr	r3, [pc, #24]	; (401654 <xQueueGenericCreate+0x78>)
  40163a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  40163c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401640:	2300      	movs	r3, #0
  401642:	6563      	str	r3, [r4, #84]	; 0x54
}
  401644:	4620      	mov	r0, r4
  401646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401648:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40164c:	6003      	str	r3, [r0, #0]
  40164e:	e7ef      	b.n	401630 <xQueueGenericCreate+0x54>
  401650:	004012e1 	.word	0x004012e1
  401654:	00401549 	.word	0x00401549

00401658 <xQueueGenericSend>:
{
  401658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40165c:	b085      	sub	sp, #20
  40165e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401660:	b1b8      	cbz	r0, 401692 <xQueueGenericSend+0x3a>
  401662:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401664:	b301      	cbz	r1, 4016a8 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401666:	2b02      	cmp	r3, #2
  401668:	d02c      	beq.n	4016c4 <xQueueGenericSend+0x6c>
  40166a:	461d      	mov	r5, r3
  40166c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40166e:	4b66      	ldr	r3, [pc, #408]	; (401808 <xQueueGenericSend+0x1b0>)
  401670:	4798      	blx	r3
  401672:	2800      	cmp	r0, #0
  401674:	d134      	bne.n	4016e0 <xQueueGenericSend+0x88>
  401676:	9b01      	ldr	r3, [sp, #4]
  401678:	2b00      	cmp	r3, #0
  40167a:	d038      	beq.n	4016ee <xQueueGenericSend+0x96>
  40167c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401680:	b672      	cpsid	i
  401682:	f383 8811 	msr	BASEPRI, r3
  401686:	f3bf 8f6f 	isb	sy
  40168a:	f3bf 8f4f 	dsb	sy
  40168e:	b662      	cpsie	i
  401690:	e7fe      	b.n	401690 <xQueueGenericSend+0x38>
  401692:	f04f 0380 	mov.w	r3, #128	; 0x80
  401696:	b672      	cpsid	i
  401698:	f383 8811 	msr	BASEPRI, r3
  40169c:	f3bf 8f6f 	isb	sy
  4016a0:	f3bf 8f4f 	dsb	sy
  4016a4:	b662      	cpsie	i
  4016a6:	e7fe      	b.n	4016a6 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4016aa:	2a00      	cmp	r2, #0
  4016ac:	d0db      	beq.n	401666 <xQueueGenericSend+0xe>
  4016ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016b2:	b672      	cpsid	i
  4016b4:	f383 8811 	msr	BASEPRI, r3
  4016b8:	f3bf 8f6f 	isb	sy
  4016bc:	f3bf 8f4f 	dsb	sy
  4016c0:	b662      	cpsie	i
  4016c2:	e7fe      	b.n	4016c2 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4016c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4016c6:	2a01      	cmp	r2, #1
  4016c8:	d0cf      	beq.n	40166a <xQueueGenericSend+0x12>
  4016ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ce:	b672      	cpsid	i
  4016d0:	f383 8811 	msr	BASEPRI, r3
  4016d4:	f3bf 8f6f 	isb	sy
  4016d8:	f3bf 8f4f 	dsb	sy
  4016dc:	b662      	cpsie	i
  4016de:	e7fe      	b.n	4016de <xQueueGenericSend+0x86>
  4016e0:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4016e2:	4e4a      	ldr	r6, [pc, #296]	; (40180c <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4016e4:	f8df a150 	ldr.w	sl, [pc, #336]	; 401838 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  4016e8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401818 <xQueueGenericSend+0x1c0>
  4016ec:	e042      	b.n	401774 <xQueueGenericSend+0x11c>
  4016ee:	2700      	movs	r7, #0
  4016f0:	e7f7      	b.n	4016e2 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4016f2:	462a      	mov	r2, r5
  4016f4:	4641      	mov	r1, r8
  4016f6:	4620      	mov	r0, r4
  4016f8:	4b45      	ldr	r3, [pc, #276]	; (401810 <xQueueGenericSend+0x1b8>)
  4016fa:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4016fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4016fe:	b19b      	cbz	r3, 401728 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401700:	4629      	mov	r1, r5
  401702:	4620      	mov	r0, r4
  401704:	4b43      	ldr	r3, [pc, #268]	; (401814 <xQueueGenericSend+0x1bc>)
  401706:	4798      	blx	r3
  401708:	2801      	cmp	r0, #1
  40170a:	d107      	bne.n	40171c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40170c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401710:	4b41      	ldr	r3, [pc, #260]	; (401818 <xQueueGenericSend+0x1c0>)
  401712:	601a      	str	r2, [r3, #0]
  401714:	f3bf 8f4f 	dsb	sy
  401718:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40171c:	4b3f      	ldr	r3, [pc, #252]	; (40181c <xQueueGenericSend+0x1c4>)
  40171e:	4798      	blx	r3
				return pdPASS;
  401720:	2001      	movs	r0, #1
}
  401722:	b005      	add	sp, #20
  401724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401728:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40172a:	b173      	cbz	r3, 40174a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40172c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401730:	4b3b      	ldr	r3, [pc, #236]	; (401820 <xQueueGenericSend+0x1c8>)
  401732:	4798      	blx	r3
  401734:	2801      	cmp	r0, #1
  401736:	d1f1      	bne.n	40171c <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40173c:	4b36      	ldr	r3, [pc, #216]	; (401818 <xQueueGenericSend+0x1c0>)
  40173e:	601a      	str	r2, [r3, #0]
  401740:	f3bf 8f4f 	dsb	sy
  401744:	f3bf 8f6f 	isb	sy
  401748:	e7e8      	b.n	40171c <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40174a:	2800      	cmp	r0, #0
  40174c:	d0e6      	beq.n	40171c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40174e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401752:	4b31      	ldr	r3, [pc, #196]	; (401818 <xQueueGenericSend+0x1c0>)
  401754:	601a      	str	r2, [r3, #0]
  401756:	f3bf 8f4f 	dsb	sy
  40175a:	f3bf 8f6f 	isb	sy
  40175e:	e7dd      	b.n	40171c <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401760:	4b2e      	ldr	r3, [pc, #184]	; (40181c <xQueueGenericSend+0x1c4>)
  401762:	4798      	blx	r3
					return errQUEUE_FULL;
  401764:	2000      	movs	r0, #0
  401766:	e7dc      	b.n	401722 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401768:	4620      	mov	r0, r4
  40176a:	4b2e      	ldr	r3, [pc, #184]	; (401824 <xQueueGenericSend+0x1cc>)
  40176c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40176e:	4b2e      	ldr	r3, [pc, #184]	; (401828 <xQueueGenericSend+0x1d0>)
  401770:	4798      	blx	r3
  401772:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401774:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401776:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401778:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40177a:	429a      	cmp	r2, r3
  40177c:	d3b9      	bcc.n	4016f2 <xQueueGenericSend+0x9a>
  40177e:	2d02      	cmp	r5, #2
  401780:	d0b7      	beq.n	4016f2 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401782:	9b01      	ldr	r3, [sp, #4]
  401784:	2b00      	cmp	r3, #0
  401786:	d0eb      	beq.n	401760 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401788:	b90f      	cbnz	r7, 40178e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40178a:	a802      	add	r0, sp, #8
  40178c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40178e:	4b23      	ldr	r3, [pc, #140]	; (40181c <xQueueGenericSend+0x1c4>)
  401790:	4798      	blx	r3
		vTaskSuspendAll();
  401792:	4b26      	ldr	r3, [pc, #152]	; (40182c <xQueueGenericSend+0x1d4>)
  401794:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401796:	47b0      	blx	r6
  401798:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40179a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40179e:	d101      	bne.n	4017a4 <xQueueGenericSend+0x14c>
  4017a0:	2300      	movs	r3, #0
  4017a2:	6463      	str	r3, [r4, #68]	; 0x44
  4017a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4017a6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017aa:	d101      	bne.n	4017b0 <xQueueGenericSend+0x158>
  4017ac:	2300      	movs	r3, #0
  4017ae:	64a3      	str	r3, [r4, #72]	; 0x48
  4017b0:	4b1a      	ldr	r3, [pc, #104]	; (40181c <xQueueGenericSend+0x1c4>)
  4017b2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4017b4:	a901      	add	r1, sp, #4
  4017b6:	a802      	add	r0, sp, #8
  4017b8:	4b1d      	ldr	r3, [pc, #116]	; (401830 <xQueueGenericSend+0x1d8>)
  4017ba:	4798      	blx	r3
  4017bc:	b9e0      	cbnz	r0, 4017f8 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  4017be:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4017c0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4017c4:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4017c6:	4b15      	ldr	r3, [pc, #84]	; (40181c <xQueueGenericSend+0x1c4>)
  4017c8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4017ca:	45bb      	cmp	fp, r7
  4017cc:	d1cc      	bne.n	401768 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4017ce:	9901      	ldr	r1, [sp, #4]
  4017d0:	f104 0010 	add.w	r0, r4, #16
  4017d4:	4b17      	ldr	r3, [pc, #92]	; (401834 <xQueueGenericSend+0x1dc>)
  4017d6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4017d8:	4620      	mov	r0, r4
  4017da:	4b12      	ldr	r3, [pc, #72]	; (401824 <xQueueGenericSend+0x1cc>)
  4017dc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4017de:	4b12      	ldr	r3, [pc, #72]	; (401828 <xQueueGenericSend+0x1d0>)
  4017e0:	4798      	blx	r3
  4017e2:	2800      	cmp	r0, #0
  4017e4:	d1c5      	bne.n	401772 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4017e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4017ea:	f8c9 3000 	str.w	r3, [r9]
  4017ee:	f3bf 8f4f 	dsb	sy
  4017f2:	f3bf 8f6f 	isb	sy
  4017f6:	e7bc      	b.n	401772 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  4017f8:	4620      	mov	r0, r4
  4017fa:	4b0a      	ldr	r3, [pc, #40]	; (401824 <xQueueGenericSend+0x1cc>)
  4017fc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4017fe:	4b0a      	ldr	r3, [pc, #40]	; (401828 <xQueueGenericSend+0x1d0>)
  401800:	4798      	blx	r3
			return errQUEUE_FULL;
  401802:	2000      	movs	r0, #0
  401804:	e78d      	b.n	401722 <xQueueGenericSend+0xca>
  401806:	bf00      	nop
  401808:	00402761 	.word	0x00402761
  40180c:	00401085 	.word	0x00401085
  401810:	0040136d 	.word	0x0040136d
  401814:	004013f5 	.word	0x004013f5
  401818:	e000ed04 	.word	0xe000ed04
  40181c:	004010d1 	.word	0x004010d1
  401820:	004025f9 	.word	0x004025f9
  401824:	004014a5 	.word	0x004014a5
  401828:	004021dd 	.word	0x004021dd
  40182c:	00402075 	.word	0x00402075
  401830:	004026c1 	.word	0x004026c1
  401834:	004024f5 	.word	0x004024f5
  401838:	00402691 	.word	0x00402691

0040183c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  40183c:	2800      	cmp	r0, #0
  40183e:	d036      	beq.n	4018ae <xQueueGenericSendFromISR+0x72>
{
  401840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401844:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401846:	2900      	cmp	r1, #0
  401848:	d03c      	beq.n	4018c4 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40184a:	2b02      	cmp	r3, #2
  40184c:	d048      	beq.n	4018e0 <xQueueGenericSendFromISR+0xa4>
  40184e:	461e      	mov	r6, r3
  401850:	4615      	mov	r5, r2
  401852:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401854:	4b35      	ldr	r3, [pc, #212]	; (40192c <xQueueGenericSendFromISR+0xf0>)
  401856:	4798      	blx	r3
	__asm volatile
  401858:	f3ef 8711 	mrs	r7, BASEPRI
  40185c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401860:	b672      	cpsid	i
  401862:	f383 8811 	msr	BASEPRI, r3
  401866:	f3bf 8f6f 	isb	sy
  40186a:	f3bf 8f4f 	dsb	sy
  40186e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401870:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401872:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401874:	429a      	cmp	r2, r3
  401876:	d301      	bcc.n	40187c <xQueueGenericSendFromISR+0x40>
  401878:	2e02      	cmp	r6, #2
  40187a:	d14f      	bne.n	40191c <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40187c:	4632      	mov	r2, r6
  40187e:	4641      	mov	r1, r8
  401880:	4620      	mov	r0, r4
  401882:	4b2b      	ldr	r3, [pc, #172]	; (401930 <xQueueGenericSendFromISR+0xf4>)
  401884:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401886:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401888:	f1b3 3fff 	cmp.w	r3, #4294967295
  40188c:	d141      	bne.n	401912 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  40188e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401890:	2b00      	cmp	r3, #0
  401892:	d033      	beq.n	4018fc <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401894:	4631      	mov	r1, r6
  401896:	4620      	mov	r0, r4
  401898:	4b26      	ldr	r3, [pc, #152]	; (401934 <xQueueGenericSendFromISR+0xf8>)
  40189a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  40189c:	2d00      	cmp	r5, #0
  40189e:	d03f      	beq.n	401920 <xQueueGenericSendFromISR+0xe4>
  4018a0:	2801      	cmp	r0, #1
  4018a2:	d13d      	bne.n	401920 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4018a4:	6028      	str	r0, [r5, #0]
	__asm volatile
  4018a6:	f387 8811 	msr	BASEPRI, r7
}
  4018aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4018ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018b2:	b672      	cpsid	i
  4018b4:	f383 8811 	msr	BASEPRI, r3
  4018b8:	f3bf 8f6f 	isb	sy
  4018bc:	f3bf 8f4f 	dsb	sy
  4018c0:	b662      	cpsie	i
  4018c2:	e7fe      	b.n	4018c2 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4018c4:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4018c6:	2800      	cmp	r0, #0
  4018c8:	d0bf      	beq.n	40184a <xQueueGenericSendFromISR+0xe>
  4018ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018ce:	b672      	cpsid	i
  4018d0:	f383 8811 	msr	BASEPRI, r3
  4018d4:	f3bf 8f6f 	isb	sy
  4018d8:	f3bf 8f4f 	dsb	sy
  4018dc:	b662      	cpsie	i
  4018de:	e7fe      	b.n	4018de <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4018e0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4018e2:	2801      	cmp	r0, #1
  4018e4:	d0b3      	beq.n	40184e <xQueueGenericSendFromISR+0x12>
  4018e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018ea:	b672      	cpsid	i
  4018ec:	f383 8811 	msr	BASEPRI, r3
  4018f0:	f3bf 8f6f 	isb	sy
  4018f4:	f3bf 8f4f 	dsb	sy
  4018f8:	b662      	cpsie	i
  4018fa:	e7fe      	b.n	4018fa <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4018fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4018fe:	b18b      	cbz	r3, 401924 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401900:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401904:	4b0c      	ldr	r3, [pc, #48]	; (401938 <xQueueGenericSendFromISR+0xfc>)
  401906:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401908:	b175      	cbz	r5, 401928 <xQueueGenericSendFromISR+0xec>
  40190a:	b168      	cbz	r0, 401928 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40190c:	2001      	movs	r0, #1
  40190e:	6028      	str	r0, [r5, #0]
  401910:	e7c9      	b.n	4018a6 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401912:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401914:	3301      	adds	r3, #1
  401916:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401918:	2001      	movs	r0, #1
  40191a:	e7c4      	b.n	4018a6 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  40191c:	2000      	movs	r0, #0
  40191e:	e7c2      	b.n	4018a6 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401920:	2001      	movs	r0, #1
  401922:	e7c0      	b.n	4018a6 <xQueueGenericSendFromISR+0x6a>
  401924:	2001      	movs	r0, #1
  401926:	e7be      	b.n	4018a6 <xQueueGenericSendFromISR+0x6a>
  401928:	2001      	movs	r0, #1
  40192a:	e7bc      	b.n	4018a6 <xQueueGenericSendFromISR+0x6a>
  40192c:	0040127d 	.word	0x0040127d
  401930:	0040136d 	.word	0x0040136d
  401934:	004013f5 	.word	0x004013f5
  401938:	004025f9 	.word	0x004025f9

0040193c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  40193c:	b170      	cbz	r0, 40195c <xQueueGiveFromISR+0x20>
{
  40193e:	b570      	push	{r4, r5, r6, lr}
  401940:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401942:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401944:	b1ab      	cbz	r3, 401972 <xQueueGiveFromISR+0x36>
  401946:	f04f 0380 	mov.w	r3, #128	; 0x80
  40194a:	b672      	cpsid	i
  40194c:	f383 8811 	msr	BASEPRI, r3
  401950:	f3bf 8f6f 	isb	sy
  401954:	f3bf 8f4f 	dsb	sy
  401958:	b662      	cpsie	i
  40195a:	e7fe      	b.n	40195a <xQueueGiveFromISR+0x1e>
  40195c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401960:	b672      	cpsid	i
  401962:	f383 8811 	msr	BASEPRI, r3
  401966:	f3bf 8f6f 	isb	sy
  40196a:	f3bf 8f4f 	dsb	sy
  40196e:	b662      	cpsie	i
  401970:	e7fe      	b.n	401970 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401972:	6803      	ldr	r3, [r0, #0]
  401974:	b333      	cbz	r3, 4019c4 <xQueueGiveFromISR+0x88>
  401976:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401978:	4b25      	ldr	r3, [pc, #148]	; (401a10 <xQueueGiveFromISR+0xd4>)
  40197a:	4798      	blx	r3
	__asm volatile
  40197c:	f3ef 8611 	mrs	r6, BASEPRI
  401980:	f04f 0380 	mov.w	r3, #128	; 0x80
  401984:	b672      	cpsid	i
  401986:	f383 8811 	msr	BASEPRI, r3
  40198a:	f3bf 8f6f 	isb	sy
  40198e:	f3bf 8f4f 	dsb	sy
  401992:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401994:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401996:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401998:	429a      	cmp	r2, r3
  40199a:	d231      	bcs.n	401a00 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  40199c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40199e:	3301      	adds	r3, #1
  4019a0:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  4019a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4019a8:	d125      	bne.n	4019f6 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  4019aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4019ac:	b1c3      	cbz	r3, 4019e0 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4019ae:	2100      	movs	r1, #0
  4019b0:	4620      	mov	r0, r4
  4019b2:	4b18      	ldr	r3, [pc, #96]	; (401a14 <xQueueGiveFromISR+0xd8>)
  4019b4:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4019b6:	b32d      	cbz	r5, 401a04 <xQueueGiveFromISR+0xc8>
  4019b8:	2801      	cmp	r0, #1
  4019ba:	d123      	bne.n	401a04 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4019bc:	6028      	str	r0, [r5, #0]
	__asm volatile
  4019be:	f386 8811 	msr	BASEPRI, r6
}
  4019c2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4019c4:	6843      	ldr	r3, [r0, #4]
  4019c6:	2b00      	cmp	r3, #0
  4019c8:	d0d5      	beq.n	401976 <xQueueGiveFromISR+0x3a>
	__asm volatile
  4019ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019ce:	b672      	cpsid	i
  4019d0:	f383 8811 	msr	BASEPRI, r3
  4019d4:	f3bf 8f6f 	isb	sy
  4019d8:	f3bf 8f4f 	dsb	sy
  4019dc:	b662      	cpsie	i
  4019de:	e7fe      	b.n	4019de <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4019e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4019e2:	b18b      	cbz	r3, 401a08 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4019e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4019e8:	4b0b      	ldr	r3, [pc, #44]	; (401a18 <xQueueGiveFromISR+0xdc>)
  4019ea:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4019ec:	b175      	cbz	r5, 401a0c <xQueueGiveFromISR+0xd0>
  4019ee:	b168      	cbz	r0, 401a0c <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4019f0:	2001      	movs	r0, #1
  4019f2:	6028      	str	r0, [r5, #0]
  4019f4:	e7e3      	b.n	4019be <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  4019f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019f8:	3301      	adds	r3, #1
  4019fa:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4019fc:	2001      	movs	r0, #1
  4019fe:	e7de      	b.n	4019be <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  401a00:	2000      	movs	r0, #0
  401a02:	e7dc      	b.n	4019be <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  401a04:	2001      	movs	r0, #1
  401a06:	e7da      	b.n	4019be <xQueueGiveFromISR+0x82>
  401a08:	2001      	movs	r0, #1
  401a0a:	e7d8      	b.n	4019be <xQueueGiveFromISR+0x82>
  401a0c:	2001      	movs	r0, #1
  401a0e:	e7d6      	b.n	4019be <xQueueGiveFromISR+0x82>
  401a10:	0040127d 	.word	0x0040127d
  401a14:	004013f5 	.word	0x004013f5
  401a18:	004025f9 	.word	0x004025f9

00401a1c <xQueueGenericReceive>:
{
  401a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401a20:	b084      	sub	sp, #16
  401a22:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401a24:	b198      	cbz	r0, 401a4e <xQueueGenericReceive+0x32>
  401a26:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401a28:	b1e1      	cbz	r1, 401a64 <xQueueGenericReceive+0x48>
  401a2a:	4698      	mov	r8, r3
  401a2c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401a2e:	4b61      	ldr	r3, [pc, #388]	; (401bb4 <xQueueGenericReceive+0x198>)
  401a30:	4798      	blx	r3
  401a32:	bb28      	cbnz	r0, 401a80 <xQueueGenericReceive+0x64>
  401a34:	9b01      	ldr	r3, [sp, #4]
  401a36:	b353      	cbz	r3, 401a8e <xQueueGenericReceive+0x72>
  401a38:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a3c:	b672      	cpsid	i
  401a3e:	f383 8811 	msr	BASEPRI, r3
  401a42:	f3bf 8f6f 	isb	sy
  401a46:	f3bf 8f4f 	dsb	sy
  401a4a:	b662      	cpsie	i
  401a4c:	e7fe      	b.n	401a4c <xQueueGenericReceive+0x30>
  401a4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a52:	b672      	cpsid	i
  401a54:	f383 8811 	msr	BASEPRI, r3
  401a58:	f3bf 8f6f 	isb	sy
  401a5c:	f3bf 8f4f 	dsb	sy
  401a60:	b662      	cpsie	i
  401a62:	e7fe      	b.n	401a62 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401a64:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401a66:	2a00      	cmp	r2, #0
  401a68:	d0df      	beq.n	401a2a <xQueueGenericReceive+0xe>
  401a6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a6e:	b672      	cpsid	i
  401a70:	f383 8811 	msr	BASEPRI, r3
  401a74:	f3bf 8f6f 	isb	sy
  401a78:	f3bf 8f4f 	dsb	sy
  401a7c:	b662      	cpsie	i
  401a7e:	e7fe      	b.n	401a7e <xQueueGenericReceive+0x62>
  401a80:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401a82:	4d4d      	ldr	r5, [pc, #308]	; (401bb8 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401a84:	f8df a160 	ldr.w	sl, [pc, #352]	; 401be8 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401a88:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401bc8 <xQueueGenericReceive+0x1ac>
  401a8c:	e04b      	b.n	401b26 <xQueueGenericReceive+0x10a>
  401a8e:	2600      	movs	r6, #0
  401a90:	e7f7      	b.n	401a82 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401a92:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401a94:	4639      	mov	r1, r7
  401a96:	4620      	mov	r0, r4
  401a98:	4b48      	ldr	r3, [pc, #288]	; (401bbc <xQueueGenericReceive+0x1a0>)
  401a9a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401a9c:	f1b8 0f00 	cmp.w	r8, #0
  401aa0:	d11d      	bne.n	401ade <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401aa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401aa4:	3b01      	subs	r3, #1
  401aa6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401aa8:	6823      	ldr	r3, [r4, #0]
  401aaa:	b913      	cbnz	r3, 401ab2 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401aac:	4b44      	ldr	r3, [pc, #272]	; (401bc0 <xQueueGenericReceive+0x1a4>)
  401aae:	4798      	blx	r3
  401ab0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401ab2:	6923      	ldr	r3, [r4, #16]
  401ab4:	b16b      	cbz	r3, 401ad2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401ab6:	f104 0010 	add.w	r0, r4, #16
  401aba:	4b42      	ldr	r3, [pc, #264]	; (401bc4 <xQueueGenericReceive+0x1a8>)
  401abc:	4798      	blx	r3
  401abe:	2801      	cmp	r0, #1
  401ac0:	d107      	bne.n	401ad2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ac6:	4b40      	ldr	r3, [pc, #256]	; (401bc8 <xQueueGenericReceive+0x1ac>)
  401ac8:	601a      	str	r2, [r3, #0]
  401aca:	f3bf 8f4f 	dsb	sy
  401ace:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401ad2:	4b3e      	ldr	r3, [pc, #248]	; (401bcc <xQueueGenericReceive+0x1b0>)
  401ad4:	4798      	blx	r3
				return pdPASS;
  401ad6:	2001      	movs	r0, #1
}
  401ad8:	b004      	add	sp, #16
  401ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401ade:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ae2:	2b00      	cmp	r3, #0
  401ae4:	d0f5      	beq.n	401ad2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401ae6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401aea:	4b36      	ldr	r3, [pc, #216]	; (401bc4 <xQueueGenericReceive+0x1a8>)
  401aec:	4798      	blx	r3
  401aee:	2800      	cmp	r0, #0
  401af0:	d0ef      	beq.n	401ad2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401af6:	4b34      	ldr	r3, [pc, #208]	; (401bc8 <xQueueGenericReceive+0x1ac>)
  401af8:	601a      	str	r2, [r3, #0]
  401afa:	f3bf 8f4f 	dsb	sy
  401afe:	f3bf 8f6f 	isb	sy
  401b02:	e7e6      	b.n	401ad2 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401b04:	4b31      	ldr	r3, [pc, #196]	; (401bcc <xQueueGenericReceive+0x1b0>)
  401b06:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401b08:	2000      	movs	r0, #0
  401b0a:	e7e5      	b.n	401ad8 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401b0c:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401b0e:	6860      	ldr	r0, [r4, #4]
  401b10:	4b2f      	ldr	r3, [pc, #188]	; (401bd0 <xQueueGenericReceive+0x1b4>)
  401b12:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401b14:	4b2d      	ldr	r3, [pc, #180]	; (401bcc <xQueueGenericReceive+0x1b0>)
  401b16:	4798      	blx	r3
  401b18:	e030      	b.n	401b7c <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401b1a:	4620      	mov	r0, r4
  401b1c:	4b2d      	ldr	r3, [pc, #180]	; (401bd4 <xQueueGenericReceive+0x1b8>)
  401b1e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401b20:	4b2d      	ldr	r3, [pc, #180]	; (401bd8 <xQueueGenericReceive+0x1bc>)
  401b22:	4798      	blx	r3
  401b24:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401b26:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401b28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b2a:	2b00      	cmp	r3, #0
  401b2c:	d1b1      	bne.n	401a92 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401b2e:	9b01      	ldr	r3, [sp, #4]
  401b30:	2b00      	cmp	r3, #0
  401b32:	d0e7      	beq.n	401b04 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401b34:	b90e      	cbnz	r6, 401b3a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401b36:	a802      	add	r0, sp, #8
  401b38:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401b3a:	4b24      	ldr	r3, [pc, #144]	; (401bcc <xQueueGenericReceive+0x1b0>)
  401b3c:	4798      	blx	r3
		vTaskSuspendAll();
  401b3e:	4b27      	ldr	r3, [pc, #156]	; (401bdc <xQueueGenericReceive+0x1c0>)
  401b40:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401b42:	47a8      	blx	r5
  401b44:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401b46:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b4a:	d101      	bne.n	401b50 <xQueueGenericReceive+0x134>
  401b4c:	2300      	movs	r3, #0
  401b4e:	6463      	str	r3, [r4, #68]	; 0x44
  401b50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401b52:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b56:	d101      	bne.n	401b5c <xQueueGenericReceive+0x140>
  401b58:	2300      	movs	r3, #0
  401b5a:	64a3      	str	r3, [r4, #72]	; 0x48
  401b5c:	4b1b      	ldr	r3, [pc, #108]	; (401bcc <xQueueGenericReceive+0x1b0>)
  401b5e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401b60:	a901      	add	r1, sp, #4
  401b62:	a802      	add	r0, sp, #8
  401b64:	4b1e      	ldr	r3, [pc, #120]	; (401be0 <xQueueGenericReceive+0x1c4>)
  401b66:	4798      	blx	r3
  401b68:	b9e8      	cbnz	r0, 401ba6 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401b6a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401b6c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401b6e:	4b17      	ldr	r3, [pc, #92]	; (401bcc <xQueueGenericReceive+0x1b0>)
  401b70:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401b72:	2e00      	cmp	r6, #0
  401b74:	d1d1      	bne.n	401b1a <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401b76:	6823      	ldr	r3, [r4, #0]
  401b78:	2b00      	cmp	r3, #0
  401b7a:	d0c7      	beq.n	401b0c <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401b7c:	9901      	ldr	r1, [sp, #4]
  401b7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b82:	4b18      	ldr	r3, [pc, #96]	; (401be4 <xQueueGenericReceive+0x1c8>)
  401b84:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401b86:	4620      	mov	r0, r4
  401b88:	4b12      	ldr	r3, [pc, #72]	; (401bd4 <xQueueGenericReceive+0x1b8>)
  401b8a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401b8c:	4b12      	ldr	r3, [pc, #72]	; (401bd8 <xQueueGenericReceive+0x1bc>)
  401b8e:	4798      	blx	r3
  401b90:	2800      	cmp	r0, #0
  401b92:	d1c7      	bne.n	401b24 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401b94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401b98:	f8c9 3000 	str.w	r3, [r9]
  401b9c:	f3bf 8f4f 	dsb	sy
  401ba0:	f3bf 8f6f 	isb	sy
  401ba4:	e7be      	b.n	401b24 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401ba6:	4620      	mov	r0, r4
  401ba8:	4b0a      	ldr	r3, [pc, #40]	; (401bd4 <xQueueGenericReceive+0x1b8>)
  401baa:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401bac:	4b0a      	ldr	r3, [pc, #40]	; (401bd8 <xQueueGenericReceive+0x1bc>)
  401bae:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401bb0:	2000      	movs	r0, #0
  401bb2:	e791      	b.n	401ad8 <xQueueGenericReceive+0xbc>
  401bb4:	00402761 	.word	0x00402761
  401bb8:	00401085 	.word	0x00401085
  401bbc:	0040147d 	.word	0x0040147d
  401bc0:	004028e1 	.word	0x004028e1
  401bc4:	004025f9 	.word	0x004025f9
  401bc8:	e000ed04 	.word	0xe000ed04
  401bcc:	004010d1 	.word	0x004010d1
  401bd0:	00402781 	.word	0x00402781
  401bd4:	004014a5 	.word	0x004014a5
  401bd8:	004021dd 	.word	0x004021dd
  401bdc:	00402075 	.word	0x00402075
  401be0:	004026c1 	.word	0x004026c1
  401be4:	004024f5 	.word	0x004024f5
  401be8:	00402691 	.word	0x00402691

00401bec <xQueueReceiveFromISR>:
{
  401bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxQueue );
  401bee:	2800      	cmp	r0, #0
  401bf0:	d02d      	beq.n	401c4e <xQueueReceiveFromISR+0x62>
  401bf2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401bf4:	2900      	cmp	r1, #0
  401bf6:	d035      	beq.n	401c64 <xQueueReceiveFromISR+0x78>
  401bf8:	4615      	mov	r5, r2
  401bfa:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401bfc:	4b26      	ldr	r3, [pc, #152]	; (401c98 <xQueueReceiveFromISR+0xac>)
  401bfe:	4798      	blx	r3
	__asm volatile
  401c00:	f3ef 8711 	mrs	r7, BASEPRI
  401c04:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c08:	b672      	cpsid	i
  401c0a:	f383 8811 	msr	BASEPRI, r3
  401c0e:	f3bf 8f6f 	isb	sy
  401c12:	f3bf 8f4f 	dsb	sy
  401c16:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401c18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c1a:	2b00      	cmp	r3, #0
  401c1c:	d035      	beq.n	401c8a <xQueueReceiveFromISR+0x9e>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
  401c1e:	4631      	mov	r1, r6
  401c20:	4620      	mov	r0, r4
  401c22:	4b1e      	ldr	r3, [pc, #120]	; (401c9c <xQueueReceiveFromISR+0xb0>)
  401c24:	4798      	blx	r3
			--( pxQueue->uxMessagesWaiting );
  401c26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c28:	3b01      	subs	r3, #1
  401c2a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
  401c2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c32:	d125      	bne.n	401c80 <xQueueReceiveFromISR+0x94>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c34:	6923      	ldr	r3, [r4, #16]
  401c36:	b353      	cbz	r3, 401c8e <xQueueReceiveFromISR+0xa2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c38:	f104 0010 	add.w	r0, r4, #16
  401c3c:	4b18      	ldr	r3, [pc, #96]	; (401ca0 <xQueueReceiveFromISR+0xb4>)
  401c3e:	4798      	blx	r3
						if( pxHigherPriorityTaskWoken != NULL )
  401c40:	b33d      	cbz	r5, 401c92 <xQueueReceiveFromISR+0xa6>
  401c42:	b330      	cbz	r0, 401c92 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
  401c44:	2001      	movs	r0, #1
  401c46:	6028      	str	r0, [r5, #0]
	__asm volatile
  401c48:	f387 8811 	msr	BASEPRI, r7
}
  401c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm volatile
  401c4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c52:	b672      	cpsid	i
  401c54:	f383 8811 	msr	BASEPRI, r3
  401c58:	f3bf 8f6f 	isb	sy
  401c5c:	f3bf 8f4f 	dsb	sy
  401c60:	b662      	cpsie	i
  401c62:	e7fe      	b.n	401c62 <xQueueReceiveFromISR+0x76>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401c64:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401c66:	2b00      	cmp	r3, #0
  401c68:	d0c6      	beq.n	401bf8 <xQueueReceiveFromISR+0xc>
  401c6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c6e:	b672      	cpsid	i
  401c70:	f383 8811 	msr	BASEPRI, r3
  401c74:	f3bf 8f6f 	isb	sy
  401c78:	f3bf 8f4f 	dsb	sy
  401c7c:	b662      	cpsie	i
  401c7e:	e7fe      	b.n	401c7e <xQueueReceiveFromISR+0x92>
				++( pxQueue->xRxLock );
  401c80:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c82:	3301      	adds	r3, #1
  401c84:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
  401c86:	2001      	movs	r0, #1
  401c88:	e7de      	b.n	401c48 <xQueueReceiveFromISR+0x5c>
			xReturn = pdFAIL;
  401c8a:	2000      	movs	r0, #0
  401c8c:	e7dc      	b.n	401c48 <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
  401c8e:	2001      	movs	r0, #1
  401c90:	e7da      	b.n	401c48 <xQueueReceiveFromISR+0x5c>
  401c92:	2001      	movs	r0, #1
  401c94:	e7d8      	b.n	401c48 <xQueueReceiveFromISR+0x5c>
  401c96:	bf00      	nop
  401c98:	0040127d 	.word	0x0040127d
  401c9c:	0040147d 	.word	0x0040147d
  401ca0:	004025f9 	.word	0x004025f9

00401ca4 <vQueueAddToRegistry>:
	{
  401ca4:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401ca6:	4b0b      	ldr	r3, [pc, #44]	; (401cd4 <vQueueAddToRegistry+0x30>)
  401ca8:	681b      	ldr	r3, [r3, #0]
  401caa:	b153      	cbz	r3, 401cc2 <vQueueAddToRegistry+0x1e>
  401cac:	2301      	movs	r3, #1
  401cae:	4c09      	ldr	r4, [pc, #36]	; (401cd4 <vQueueAddToRegistry+0x30>)
  401cb0:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401cb4:	b132      	cbz	r2, 401cc4 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401cb6:	3301      	adds	r3, #1
  401cb8:	2b08      	cmp	r3, #8
  401cba:	d1f9      	bne.n	401cb0 <vQueueAddToRegistry+0xc>
	}
  401cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cc0:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401cc2:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401cc4:	4a03      	ldr	r2, [pc, #12]	; (401cd4 <vQueueAddToRegistry+0x30>)
  401cc6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401cca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401cce:	6058      	str	r0, [r3, #4]
				break;
  401cd0:	e7f4      	b.n	401cbc <vQueueAddToRegistry+0x18>
  401cd2:	bf00      	nop
  401cd4:	2043a104 	.word	0x2043a104

00401cd8 <vQueueWaitForMessageRestricted>:
	{
  401cd8:	b570      	push	{r4, r5, r6, lr}
  401cda:	4604      	mov	r4, r0
  401cdc:	460d      	mov	r5, r1
  401cde:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401ce0:	4b0f      	ldr	r3, [pc, #60]	; (401d20 <vQueueWaitForMessageRestricted+0x48>)
  401ce2:	4798      	blx	r3
  401ce4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cea:	d00b      	beq.n	401d04 <vQueueWaitForMessageRestricted+0x2c>
  401cec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401cee:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cf2:	d00a      	beq.n	401d0a <vQueueWaitForMessageRestricted+0x32>
  401cf4:	4b0b      	ldr	r3, [pc, #44]	; (401d24 <vQueueWaitForMessageRestricted+0x4c>)
  401cf6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401cfa:	b14b      	cbz	r3, 401d10 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401cfc:	4620      	mov	r0, r4
  401cfe:	4b0a      	ldr	r3, [pc, #40]	; (401d28 <vQueueWaitForMessageRestricted+0x50>)
  401d00:	4798      	blx	r3
  401d02:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401d04:	2300      	movs	r3, #0
  401d06:	6463      	str	r3, [r4, #68]	; 0x44
  401d08:	e7f0      	b.n	401cec <vQueueWaitForMessageRestricted+0x14>
  401d0a:	2300      	movs	r3, #0
  401d0c:	64a3      	str	r3, [r4, #72]	; 0x48
  401d0e:	e7f1      	b.n	401cf4 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401d10:	4632      	mov	r2, r6
  401d12:	4629      	mov	r1, r5
  401d14:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d18:	4b04      	ldr	r3, [pc, #16]	; (401d2c <vQueueWaitForMessageRestricted+0x54>)
  401d1a:	4798      	blx	r3
  401d1c:	e7ee      	b.n	401cfc <vQueueWaitForMessageRestricted+0x24>
  401d1e:	bf00      	nop
  401d20:	00401085 	.word	0x00401085
  401d24:	004010d1 	.word	0x004010d1
  401d28:	004014a5 	.word	0x004014a5
  401d2c:	00402579 	.word	0x00402579

00401d30 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d30:	4b08      	ldr	r3, [pc, #32]	; (401d54 <prvResetNextTaskUnblockTime+0x24>)
  401d32:	681b      	ldr	r3, [r3, #0]
  401d34:	681b      	ldr	r3, [r3, #0]
  401d36:	b13b      	cbz	r3, 401d48 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401d38:	4b06      	ldr	r3, [pc, #24]	; (401d54 <prvResetNextTaskUnblockTime+0x24>)
  401d3a:	681b      	ldr	r3, [r3, #0]
  401d3c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401d3e:	68db      	ldr	r3, [r3, #12]
  401d40:	685a      	ldr	r2, [r3, #4]
  401d42:	4b05      	ldr	r3, [pc, #20]	; (401d58 <prvResetNextTaskUnblockTime+0x28>)
  401d44:	601a      	str	r2, [r3, #0]
  401d46:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401d48:	f04f 32ff 	mov.w	r2, #4294967295
  401d4c:	4b02      	ldr	r3, [pc, #8]	; (401d58 <prvResetNextTaskUnblockTime+0x28>)
  401d4e:	601a      	str	r2, [r3, #0]
  401d50:	4770      	bx	lr
  401d52:	bf00      	nop
  401d54:	2040c2a8 	.word	0x2040c2a8
  401d58:	2040c354 	.word	0x2040c354

00401d5c <prvAddCurrentTaskToDelayedList>:
{
  401d5c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401d5e:	4b0f      	ldr	r3, [pc, #60]	; (401d9c <prvAddCurrentTaskToDelayedList+0x40>)
  401d60:	681b      	ldr	r3, [r3, #0]
  401d62:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401d64:	4b0e      	ldr	r3, [pc, #56]	; (401da0 <prvAddCurrentTaskToDelayedList+0x44>)
  401d66:	681b      	ldr	r3, [r3, #0]
  401d68:	4298      	cmp	r0, r3
  401d6a:	d30e      	bcc.n	401d8a <prvAddCurrentTaskToDelayedList+0x2e>
  401d6c:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401d6e:	4b0d      	ldr	r3, [pc, #52]	; (401da4 <prvAddCurrentTaskToDelayedList+0x48>)
  401d70:	6818      	ldr	r0, [r3, #0]
  401d72:	4b0a      	ldr	r3, [pc, #40]	; (401d9c <prvAddCurrentTaskToDelayedList+0x40>)
  401d74:	6819      	ldr	r1, [r3, #0]
  401d76:	3104      	adds	r1, #4
  401d78:	4b0b      	ldr	r3, [pc, #44]	; (401da8 <prvAddCurrentTaskToDelayedList+0x4c>)
  401d7a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401d7c:	4b0b      	ldr	r3, [pc, #44]	; (401dac <prvAddCurrentTaskToDelayedList+0x50>)
  401d7e:	681b      	ldr	r3, [r3, #0]
  401d80:	429c      	cmp	r4, r3
  401d82:	d201      	bcs.n	401d88 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401d84:	4b09      	ldr	r3, [pc, #36]	; (401dac <prvAddCurrentTaskToDelayedList+0x50>)
  401d86:	601c      	str	r4, [r3, #0]
  401d88:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401d8a:	4b09      	ldr	r3, [pc, #36]	; (401db0 <prvAddCurrentTaskToDelayedList+0x54>)
  401d8c:	6818      	ldr	r0, [r3, #0]
  401d8e:	4b03      	ldr	r3, [pc, #12]	; (401d9c <prvAddCurrentTaskToDelayedList+0x40>)
  401d90:	6819      	ldr	r1, [r3, #0]
  401d92:	3104      	adds	r1, #4
  401d94:	4b04      	ldr	r3, [pc, #16]	; (401da8 <prvAddCurrentTaskToDelayedList+0x4c>)
  401d96:	4798      	blx	r3
  401d98:	bd10      	pop	{r4, pc}
  401d9a:	bf00      	nop
  401d9c:	2040c2a4 	.word	0x2040c2a4
  401da0:	2040c39c 	.word	0x2040c39c
  401da4:	2040c2a8 	.word	0x2040c2a8
  401da8:	00400f6d 	.word	0x00400f6d
  401dac:	2040c354 	.word	0x2040c354
  401db0:	2040c2ac 	.word	0x2040c2ac

00401db4 <xTaskGenericCreate>:
{
  401db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401db8:	b083      	sub	sp, #12
  401dba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401dbc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401dc0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401dc2:	b160      	cbz	r0, 401dde <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401dc4:	2d04      	cmp	r5, #4
  401dc6:	d915      	bls.n	401df4 <xTaskGenericCreate+0x40>
  401dc8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dcc:	b672      	cpsid	i
  401dce:	f383 8811 	msr	BASEPRI, r3
  401dd2:	f3bf 8f6f 	isb	sy
  401dd6:	f3bf 8f4f 	dsb	sy
  401dda:	b662      	cpsie	i
  401ddc:	e7fe      	b.n	401ddc <xTaskGenericCreate+0x28>
  401dde:	f04f 0380 	mov.w	r3, #128	; 0x80
  401de2:	b672      	cpsid	i
  401de4:	f383 8811 	msr	BASEPRI, r3
  401de8:	f3bf 8f6f 	isb	sy
  401dec:	f3bf 8f4f 	dsb	sy
  401df0:	b662      	cpsie	i
  401df2:	e7fe      	b.n	401df2 <xTaskGenericCreate+0x3e>
  401df4:	9001      	str	r0, [sp, #4]
  401df6:	4698      	mov	r8, r3
  401df8:	4691      	mov	r9, r2
  401dfa:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401dfc:	b936      	cbnz	r6, 401e0c <xTaskGenericCreate+0x58>
  401dfe:	0090      	lsls	r0, r2, #2
  401e00:	4b62      	ldr	r3, [pc, #392]	; (401f8c <xTaskGenericCreate+0x1d8>)
  401e02:	4798      	blx	r3
		if( pxStack != NULL )
  401e04:	4606      	mov	r6, r0
  401e06:	2800      	cmp	r0, #0
  401e08:	f000 809e 	beq.w	401f48 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401e0c:	2058      	movs	r0, #88	; 0x58
  401e0e:	4b5f      	ldr	r3, [pc, #380]	; (401f8c <xTaskGenericCreate+0x1d8>)
  401e10:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401e12:	4604      	mov	r4, r0
  401e14:	2800      	cmp	r0, #0
  401e16:	f000 8094 	beq.w	401f42 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401e1a:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401e1c:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401e20:	21a5      	movs	r1, #165	; 0xa5
  401e22:	4630      	mov	r0, r6
  401e24:	4b5a      	ldr	r3, [pc, #360]	; (401f90 <xTaskGenericCreate+0x1dc>)
  401e26:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401e28:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401e2c:	444e      	add	r6, r9
  401e2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401e30:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401e34:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401e38:	783b      	ldrb	r3, [r7, #0]
  401e3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401e3e:	783b      	ldrb	r3, [r7, #0]
  401e40:	2b00      	cmp	r3, #0
  401e42:	f040 8084 	bne.w	401f4e <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401e46:	2700      	movs	r7, #0
  401e48:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401e4c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401e4e:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401e50:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401e52:	f104 0904 	add.w	r9, r4, #4
  401e56:	4648      	mov	r0, r9
  401e58:	f8df b184 	ldr.w	fp, [pc, #388]	; 401fe0 <xTaskGenericCreate+0x22c>
  401e5c:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401e5e:	f104 0018 	add.w	r0, r4, #24
  401e62:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401e64:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e66:	f1c5 0305 	rsb	r3, r5, #5
  401e6a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401e6c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401e6e:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401e70:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401e74:	4642      	mov	r2, r8
  401e76:	9901      	ldr	r1, [sp, #4]
  401e78:	4630      	mov	r0, r6
  401e7a:	4b46      	ldr	r3, [pc, #280]	; (401f94 <xTaskGenericCreate+0x1e0>)
  401e7c:	4798      	blx	r3
  401e7e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401e80:	f1ba 0f00 	cmp.w	sl, #0
  401e84:	d001      	beq.n	401e8a <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401e86:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401e8a:	4b43      	ldr	r3, [pc, #268]	; (401f98 <xTaskGenericCreate+0x1e4>)
  401e8c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401e8e:	4a43      	ldr	r2, [pc, #268]	; (401f9c <xTaskGenericCreate+0x1e8>)
  401e90:	6813      	ldr	r3, [r2, #0]
  401e92:	3301      	adds	r3, #1
  401e94:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401e96:	4b42      	ldr	r3, [pc, #264]	; (401fa0 <xTaskGenericCreate+0x1ec>)
  401e98:	681b      	ldr	r3, [r3, #0]
  401e9a:	2b00      	cmp	r3, #0
  401e9c:	d166      	bne.n	401f6c <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401e9e:	4b40      	ldr	r3, [pc, #256]	; (401fa0 <xTaskGenericCreate+0x1ec>)
  401ea0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401ea2:	6813      	ldr	r3, [r2, #0]
  401ea4:	2b01      	cmp	r3, #1
  401ea6:	d121      	bne.n	401eec <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401ea8:	4f3e      	ldr	r7, [pc, #248]	; (401fa4 <xTaskGenericCreate+0x1f0>)
  401eaa:	4638      	mov	r0, r7
  401eac:	4e3e      	ldr	r6, [pc, #248]	; (401fa8 <xTaskGenericCreate+0x1f4>)
  401eae:	47b0      	blx	r6
  401eb0:	f107 0014 	add.w	r0, r7, #20
  401eb4:	47b0      	blx	r6
  401eb6:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401eba:	47b0      	blx	r6
  401ebc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401ec0:	47b0      	blx	r6
  401ec2:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401ec6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401ec8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 401fe4 <xTaskGenericCreate+0x230>
  401ecc:	4640      	mov	r0, r8
  401ece:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401ed0:	4f36      	ldr	r7, [pc, #216]	; (401fac <xTaskGenericCreate+0x1f8>)
  401ed2:	4638      	mov	r0, r7
  401ed4:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401ed6:	4836      	ldr	r0, [pc, #216]	; (401fb0 <xTaskGenericCreate+0x1fc>)
  401ed8:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401eda:	4836      	ldr	r0, [pc, #216]	; (401fb4 <xTaskGenericCreate+0x200>)
  401edc:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401ede:	4836      	ldr	r0, [pc, #216]	; (401fb8 <xTaskGenericCreate+0x204>)
  401ee0:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401ee2:	4b36      	ldr	r3, [pc, #216]	; (401fbc <xTaskGenericCreate+0x208>)
  401ee4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401ee8:	4b35      	ldr	r3, [pc, #212]	; (401fc0 <xTaskGenericCreate+0x20c>)
  401eea:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401eec:	4a35      	ldr	r2, [pc, #212]	; (401fc4 <xTaskGenericCreate+0x210>)
  401eee:	6813      	ldr	r3, [r2, #0]
  401ef0:	3301      	adds	r3, #1
  401ef2:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401ef4:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401ef6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ef8:	4a33      	ldr	r2, [pc, #204]	; (401fc8 <xTaskGenericCreate+0x214>)
  401efa:	6811      	ldr	r1, [r2, #0]
  401efc:	2301      	movs	r3, #1
  401efe:	4083      	lsls	r3, r0
  401f00:	430b      	orrs	r3, r1
  401f02:	6013      	str	r3, [r2, #0]
  401f04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f08:	4649      	mov	r1, r9
  401f0a:	4b26      	ldr	r3, [pc, #152]	; (401fa4 <xTaskGenericCreate+0x1f0>)
  401f0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401f10:	4b2e      	ldr	r3, [pc, #184]	; (401fcc <xTaskGenericCreate+0x218>)
  401f12:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401f14:	4b2e      	ldr	r3, [pc, #184]	; (401fd0 <xTaskGenericCreate+0x21c>)
  401f16:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401f18:	4b2e      	ldr	r3, [pc, #184]	; (401fd4 <xTaskGenericCreate+0x220>)
  401f1a:	681b      	ldr	r3, [r3, #0]
  401f1c:	2b00      	cmp	r3, #0
  401f1e:	d031      	beq.n	401f84 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401f20:	4b1f      	ldr	r3, [pc, #124]	; (401fa0 <xTaskGenericCreate+0x1ec>)
  401f22:	681b      	ldr	r3, [r3, #0]
  401f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f26:	429d      	cmp	r5, r3
  401f28:	d92e      	bls.n	401f88 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f2e:	4b2a      	ldr	r3, [pc, #168]	; (401fd8 <xTaskGenericCreate+0x224>)
  401f30:	601a      	str	r2, [r3, #0]
  401f32:	f3bf 8f4f 	dsb	sy
  401f36:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401f3a:	2001      	movs	r0, #1
}
  401f3c:	b003      	add	sp, #12
  401f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401f42:	4630      	mov	r0, r6
  401f44:	4b25      	ldr	r3, [pc, #148]	; (401fdc <xTaskGenericCreate+0x228>)
  401f46:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401f48:	f04f 30ff 	mov.w	r0, #4294967295
  401f4c:	e7f6      	b.n	401f3c <xTaskGenericCreate+0x188>
  401f4e:	463b      	mov	r3, r7
  401f50:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401f54:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401f56:	7859      	ldrb	r1, [r3, #1]
  401f58:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401f5c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401f60:	2900      	cmp	r1, #0
  401f62:	f43f af70 	beq.w	401e46 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401f66:	42bb      	cmp	r3, r7
  401f68:	d1f5      	bne.n	401f56 <xTaskGenericCreate+0x1a2>
  401f6a:	e76c      	b.n	401e46 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401f6c:	4b19      	ldr	r3, [pc, #100]	; (401fd4 <xTaskGenericCreate+0x220>)
  401f6e:	681b      	ldr	r3, [r3, #0]
  401f70:	2b00      	cmp	r3, #0
  401f72:	d1bb      	bne.n	401eec <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401f74:	4b0a      	ldr	r3, [pc, #40]	; (401fa0 <xTaskGenericCreate+0x1ec>)
  401f76:	681b      	ldr	r3, [r3, #0]
  401f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f7a:	429d      	cmp	r5, r3
  401f7c:	d3b6      	bcc.n	401eec <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401f7e:	4b08      	ldr	r3, [pc, #32]	; (401fa0 <xTaskGenericCreate+0x1ec>)
  401f80:	601c      	str	r4, [r3, #0]
  401f82:	e7b3      	b.n	401eec <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401f84:	2001      	movs	r0, #1
  401f86:	e7d9      	b.n	401f3c <xTaskGenericCreate+0x188>
  401f88:	2001      	movs	r0, #1
	return xReturn;
  401f8a:	e7d7      	b.n	401f3c <xTaskGenericCreate+0x188>
  401f8c:	004012e1 	.word	0x004012e1
  401f90:	00423139 	.word	0x00423139
  401f94:	00401039 	.word	0x00401039
  401f98:	00401085 	.word	0x00401085
  401f9c:	2040c314 	.word	0x2040c314
  401fa0:	2040c2a4 	.word	0x2040c2a4
  401fa4:	2040c2b0 	.word	0x2040c2b0
  401fa8:	00400f39 	.word	0x00400f39
  401fac:	2040c340 	.word	0x2040c340
  401fb0:	2040c35c 	.word	0x2040c35c
  401fb4:	2040c388 	.word	0x2040c388
  401fb8:	2040c374 	.word	0x2040c374
  401fbc:	2040c2a8 	.word	0x2040c2a8
  401fc0:	2040c2ac 	.word	0x2040c2ac
  401fc4:	2040c320 	.word	0x2040c320
  401fc8:	2040c328 	.word	0x2040c328
  401fcc:	00400f55 	.word	0x00400f55
  401fd0:	004010d1 	.word	0x004010d1
  401fd4:	2040c370 	.word	0x2040c370
  401fd8:	e000ed04 	.word	0xe000ed04
  401fdc:	00401351 	.word	0x00401351
  401fe0:	00400f4f 	.word	0x00400f4f
  401fe4:	2040c32c 	.word	0x2040c32c

00401fe8 <vTaskStartScheduler>:
{
  401fe8:	b510      	push	{r4, lr}
  401fea:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401fec:	2300      	movs	r3, #0
  401fee:	9303      	str	r3, [sp, #12]
  401ff0:	9302      	str	r3, [sp, #8]
  401ff2:	9301      	str	r3, [sp, #4]
  401ff4:	9300      	str	r3, [sp, #0]
  401ff6:	2282      	movs	r2, #130	; 0x82
  401ff8:	4916      	ldr	r1, [pc, #88]	; (402054 <vTaskStartScheduler+0x6c>)
  401ffa:	4817      	ldr	r0, [pc, #92]	; (402058 <vTaskStartScheduler+0x70>)
  401ffc:	4c17      	ldr	r4, [pc, #92]	; (40205c <vTaskStartScheduler+0x74>)
  401ffe:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402000:	2801      	cmp	r0, #1
  402002:	d00b      	beq.n	40201c <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  402004:	bb20      	cbnz	r0, 402050 <vTaskStartScheduler+0x68>
  402006:	f04f 0380 	mov.w	r3, #128	; 0x80
  40200a:	b672      	cpsid	i
  40200c:	f383 8811 	msr	BASEPRI, r3
  402010:	f3bf 8f6f 	isb	sy
  402014:	f3bf 8f4f 	dsb	sy
  402018:	b662      	cpsie	i
  40201a:	e7fe      	b.n	40201a <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  40201c:	4b10      	ldr	r3, [pc, #64]	; (402060 <vTaskStartScheduler+0x78>)
  40201e:	4798      	blx	r3
	if( xReturn == pdPASS )
  402020:	2801      	cmp	r0, #1
  402022:	d1ef      	bne.n	402004 <vTaskStartScheduler+0x1c>
  402024:	f04f 0380 	mov.w	r3, #128	; 0x80
  402028:	b672      	cpsid	i
  40202a:	f383 8811 	msr	BASEPRI, r3
  40202e:	f3bf 8f6f 	isb	sy
  402032:	f3bf 8f4f 	dsb	sy
  402036:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402038:	f04f 32ff 	mov.w	r2, #4294967295
  40203c:	4b09      	ldr	r3, [pc, #36]	; (402064 <vTaskStartScheduler+0x7c>)
  40203e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402040:	2201      	movs	r2, #1
  402042:	4b09      	ldr	r3, [pc, #36]	; (402068 <vTaskStartScheduler+0x80>)
  402044:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402046:	2200      	movs	r2, #0
  402048:	4b08      	ldr	r3, [pc, #32]	; (40206c <vTaskStartScheduler+0x84>)
  40204a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40204c:	4b08      	ldr	r3, [pc, #32]	; (402070 <vTaskStartScheduler+0x88>)
  40204e:	4798      	blx	r3
}
  402050:	b004      	add	sp, #16
  402052:	bd10      	pop	{r4, pc}
  402054:	00425a48 	.word	0x00425a48
  402058:	0040238d 	.word	0x0040238d
  40205c:	00401db5 	.word	0x00401db5
  402060:	004029cd 	.word	0x004029cd
  402064:	2040c354 	.word	0x2040c354
  402068:	2040c370 	.word	0x2040c370
  40206c:	2040c39c 	.word	0x2040c39c
  402070:	004011b9 	.word	0x004011b9

00402074 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402074:	4a02      	ldr	r2, [pc, #8]	; (402080 <vTaskSuspendAll+0xc>)
  402076:	6813      	ldr	r3, [r2, #0]
  402078:	3301      	adds	r3, #1
  40207a:	6013      	str	r3, [r2, #0]
  40207c:	4770      	bx	lr
  40207e:	bf00      	nop
  402080:	2040c31c 	.word	0x2040c31c

00402084 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402084:	4b01      	ldr	r3, [pc, #4]	; (40208c <xTaskGetTickCount+0x8>)
  402086:	6818      	ldr	r0, [r3, #0]
}
  402088:	4770      	bx	lr
  40208a:	bf00      	nop
  40208c:	2040c39c 	.word	0x2040c39c

00402090 <xTaskIncrementTick>:
{
  402090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402094:	4b42      	ldr	r3, [pc, #264]	; (4021a0 <xTaskIncrementTick+0x110>)
  402096:	681b      	ldr	r3, [r3, #0]
  402098:	2b00      	cmp	r3, #0
  40209a:	d178      	bne.n	40218e <xTaskIncrementTick+0xfe>
		++xTickCount;
  40209c:	4b41      	ldr	r3, [pc, #260]	; (4021a4 <xTaskIncrementTick+0x114>)
  40209e:	681a      	ldr	r2, [r3, #0]
  4020a0:	3201      	adds	r2, #1
  4020a2:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4020a4:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4020a6:	b9d6      	cbnz	r6, 4020de <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4020a8:	4b3f      	ldr	r3, [pc, #252]	; (4021a8 <xTaskIncrementTick+0x118>)
  4020aa:	681b      	ldr	r3, [r3, #0]
  4020ac:	681b      	ldr	r3, [r3, #0]
  4020ae:	b153      	cbz	r3, 4020c6 <xTaskIncrementTick+0x36>
  4020b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020b4:	b672      	cpsid	i
  4020b6:	f383 8811 	msr	BASEPRI, r3
  4020ba:	f3bf 8f6f 	isb	sy
  4020be:	f3bf 8f4f 	dsb	sy
  4020c2:	b662      	cpsie	i
  4020c4:	e7fe      	b.n	4020c4 <xTaskIncrementTick+0x34>
  4020c6:	4a38      	ldr	r2, [pc, #224]	; (4021a8 <xTaskIncrementTick+0x118>)
  4020c8:	6811      	ldr	r1, [r2, #0]
  4020ca:	4b38      	ldr	r3, [pc, #224]	; (4021ac <xTaskIncrementTick+0x11c>)
  4020cc:	6818      	ldr	r0, [r3, #0]
  4020ce:	6010      	str	r0, [r2, #0]
  4020d0:	6019      	str	r1, [r3, #0]
  4020d2:	4a37      	ldr	r2, [pc, #220]	; (4021b0 <xTaskIncrementTick+0x120>)
  4020d4:	6813      	ldr	r3, [r2, #0]
  4020d6:	3301      	adds	r3, #1
  4020d8:	6013      	str	r3, [r2, #0]
  4020da:	4b36      	ldr	r3, [pc, #216]	; (4021b4 <xTaskIncrementTick+0x124>)
  4020dc:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4020de:	4b36      	ldr	r3, [pc, #216]	; (4021b8 <xTaskIncrementTick+0x128>)
  4020e0:	681b      	ldr	r3, [r3, #0]
  4020e2:	429e      	cmp	r6, r3
  4020e4:	d218      	bcs.n	402118 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4020e6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4020e8:	4b34      	ldr	r3, [pc, #208]	; (4021bc <xTaskIncrementTick+0x12c>)
  4020ea:	681b      	ldr	r3, [r3, #0]
  4020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4020ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4020f2:	4a33      	ldr	r2, [pc, #204]	; (4021c0 <xTaskIncrementTick+0x130>)
  4020f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4020f8:	2b02      	cmp	r3, #2
  4020fa:	bf28      	it	cs
  4020fc:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4020fe:	4b31      	ldr	r3, [pc, #196]	; (4021c4 <xTaskIncrementTick+0x134>)
  402100:	681b      	ldr	r3, [r3, #0]
  402102:	b90b      	cbnz	r3, 402108 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402104:	4b30      	ldr	r3, [pc, #192]	; (4021c8 <xTaskIncrementTick+0x138>)
  402106:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402108:	4b30      	ldr	r3, [pc, #192]	; (4021cc <xTaskIncrementTick+0x13c>)
  40210a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  40210c:	2b00      	cmp	r3, #0
}
  40210e:	bf0c      	ite	eq
  402110:	4620      	moveq	r0, r4
  402112:	2001      	movne	r0, #1
  402114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402118:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40211a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4021a8 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40211e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4021d8 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402122:	4f2b      	ldr	r7, [pc, #172]	; (4021d0 <xTaskIncrementTick+0x140>)
  402124:	e01f      	b.n	402166 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402126:	f04f 32ff 	mov.w	r2, #4294967295
  40212a:	4b23      	ldr	r3, [pc, #140]	; (4021b8 <xTaskIncrementTick+0x128>)
  40212c:	601a      	str	r2, [r3, #0]
						break;
  40212e:	e7db      	b.n	4020e8 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402130:	4a21      	ldr	r2, [pc, #132]	; (4021b8 <xTaskIncrementTick+0x128>)
  402132:	6013      	str	r3, [r2, #0]
							break;
  402134:	e7d8      	b.n	4020e8 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402136:	f105 0018 	add.w	r0, r5, #24
  40213a:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  40213c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40213e:	683a      	ldr	r2, [r7, #0]
  402140:	2301      	movs	r3, #1
  402142:	4083      	lsls	r3, r0
  402144:	4313      	orrs	r3, r2
  402146:	603b      	str	r3, [r7, #0]
  402148:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40214c:	4651      	mov	r1, sl
  40214e:	4b1c      	ldr	r3, [pc, #112]	; (4021c0 <xTaskIncrementTick+0x130>)
  402150:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402154:	4b1f      	ldr	r3, [pc, #124]	; (4021d4 <xTaskIncrementTick+0x144>)
  402156:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402158:	4b18      	ldr	r3, [pc, #96]	; (4021bc <xTaskIncrementTick+0x12c>)
  40215a:	681b      	ldr	r3, [r3, #0]
  40215c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402160:	429a      	cmp	r2, r3
  402162:	bf28      	it	cs
  402164:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402166:	f8d9 3000 	ldr.w	r3, [r9]
  40216a:	681b      	ldr	r3, [r3, #0]
  40216c:	2b00      	cmp	r3, #0
  40216e:	d0da      	beq.n	402126 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402170:	f8d9 3000 	ldr.w	r3, [r9]
  402174:	68db      	ldr	r3, [r3, #12]
  402176:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402178:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40217a:	429e      	cmp	r6, r3
  40217c:	d3d8      	bcc.n	402130 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40217e:	f105 0a04 	add.w	sl, r5, #4
  402182:	4650      	mov	r0, sl
  402184:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402186:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402188:	2b00      	cmp	r3, #0
  40218a:	d1d4      	bne.n	402136 <xTaskIncrementTick+0xa6>
  40218c:	e7d6      	b.n	40213c <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  40218e:	4a0d      	ldr	r2, [pc, #52]	; (4021c4 <xTaskIncrementTick+0x134>)
  402190:	6813      	ldr	r3, [r2, #0]
  402192:	3301      	adds	r3, #1
  402194:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402196:	4b0c      	ldr	r3, [pc, #48]	; (4021c8 <xTaskIncrementTick+0x138>)
  402198:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40219a:	2400      	movs	r4, #0
  40219c:	e7b4      	b.n	402108 <xTaskIncrementTick+0x78>
  40219e:	bf00      	nop
  4021a0:	2040c31c 	.word	0x2040c31c
  4021a4:	2040c39c 	.word	0x2040c39c
  4021a8:	2040c2a8 	.word	0x2040c2a8
  4021ac:	2040c2ac 	.word	0x2040c2ac
  4021b0:	2040c358 	.word	0x2040c358
  4021b4:	00401d31 	.word	0x00401d31
  4021b8:	2040c354 	.word	0x2040c354
  4021bc:	2040c2a4 	.word	0x2040c2a4
  4021c0:	2040c2b0 	.word	0x2040c2b0
  4021c4:	2040c318 	.word	0x2040c318
  4021c8:	00421d0d 	.word	0x00421d0d
  4021cc:	2040c3a0 	.word	0x2040c3a0
  4021d0:	2040c328 	.word	0x2040c328
  4021d4:	00400f55 	.word	0x00400f55
  4021d8:	00400fa1 	.word	0x00400fa1

004021dc <xTaskResumeAll>:
{
  4021dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4021e0:	4b38      	ldr	r3, [pc, #224]	; (4022c4 <xTaskResumeAll+0xe8>)
  4021e2:	681b      	ldr	r3, [r3, #0]
  4021e4:	b953      	cbnz	r3, 4021fc <xTaskResumeAll+0x20>
  4021e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021ea:	b672      	cpsid	i
  4021ec:	f383 8811 	msr	BASEPRI, r3
  4021f0:	f3bf 8f6f 	isb	sy
  4021f4:	f3bf 8f4f 	dsb	sy
  4021f8:	b662      	cpsie	i
  4021fa:	e7fe      	b.n	4021fa <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4021fc:	4b32      	ldr	r3, [pc, #200]	; (4022c8 <xTaskResumeAll+0xec>)
  4021fe:	4798      	blx	r3
		--uxSchedulerSuspended;
  402200:	4b30      	ldr	r3, [pc, #192]	; (4022c4 <xTaskResumeAll+0xe8>)
  402202:	681a      	ldr	r2, [r3, #0]
  402204:	3a01      	subs	r2, #1
  402206:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402208:	681b      	ldr	r3, [r3, #0]
  40220a:	2b00      	cmp	r3, #0
  40220c:	d155      	bne.n	4022ba <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40220e:	4b2f      	ldr	r3, [pc, #188]	; (4022cc <xTaskResumeAll+0xf0>)
  402210:	681b      	ldr	r3, [r3, #0]
  402212:	2b00      	cmp	r3, #0
  402214:	d132      	bne.n	40227c <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402216:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402218:	4b2d      	ldr	r3, [pc, #180]	; (4022d0 <xTaskResumeAll+0xf4>)
  40221a:	4798      	blx	r3
}
  40221c:	4620      	mov	r0, r4
  40221e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402222:	68fb      	ldr	r3, [r7, #12]
  402224:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402226:	f104 0018 	add.w	r0, r4, #24
  40222a:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40222c:	f104 0804 	add.w	r8, r4, #4
  402230:	4640      	mov	r0, r8
  402232:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402234:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402236:	682a      	ldr	r2, [r5, #0]
  402238:	2301      	movs	r3, #1
  40223a:	4083      	lsls	r3, r0
  40223c:	4313      	orrs	r3, r2
  40223e:	602b      	str	r3, [r5, #0]
  402240:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402244:	4641      	mov	r1, r8
  402246:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40224a:	4b22      	ldr	r3, [pc, #136]	; (4022d4 <xTaskResumeAll+0xf8>)
  40224c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40224e:	4b22      	ldr	r3, [pc, #136]	; (4022d8 <xTaskResumeAll+0xfc>)
  402250:	681b      	ldr	r3, [r3, #0]
  402252:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402256:	429a      	cmp	r2, r3
  402258:	d20c      	bcs.n	402274 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40225a:	683b      	ldr	r3, [r7, #0]
  40225c:	2b00      	cmp	r3, #0
  40225e:	d1e0      	bne.n	402222 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402260:	4b1e      	ldr	r3, [pc, #120]	; (4022dc <xTaskResumeAll+0x100>)
  402262:	681b      	ldr	r3, [r3, #0]
  402264:	b1db      	cbz	r3, 40229e <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402266:	4b1d      	ldr	r3, [pc, #116]	; (4022dc <xTaskResumeAll+0x100>)
  402268:	681b      	ldr	r3, [r3, #0]
  40226a:	b1c3      	cbz	r3, 40229e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40226c:	4e1c      	ldr	r6, [pc, #112]	; (4022e0 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  40226e:	4d1d      	ldr	r5, [pc, #116]	; (4022e4 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402270:	4c1a      	ldr	r4, [pc, #104]	; (4022dc <xTaskResumeAll+0x100>)
  402272:	e00e      	b.n	402292 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402274:	2201      	movs	r2, #1
  402276:	4b1b      	ldr	r3, [pc, #108]	; (4022e4 <xTaskResumeAll+0x108>)
  402278:	601a      	str	r2, [r3, #0]
  40227a:	e7ee      	b.n	40225a <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40227c:	4f1a      	ldr	r7, [pc, #104]	; (4022e8 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40227e:	4e1b      	ldr	r6, [pc, #108]	; (4022ec <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402280:	4d1b      	ldr	r5, [pc, #108]	; (4022f0 <xTaskResumeAll+0x114>)
  402282:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4022f8 <xTaskResumeAll+0x11c>
  402286:	e7e8      	b.n	40225a <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402288:	6823      	ldr	r3, [r4, #0]
  40228a:	3b01      	subs	r3, #1
  40228c:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40228e:	6823      	ldr	r3, [r4, #0]
  402290:	b12b      	cbz	r3, 40229e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402292:	47b0      	blx	r6
  402294:	2800      	cmp	r0, #0
  402296:	d0f7      	beq.n	402288 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  402298:	2301      	movs	r3, #1
  40229a:	602b      	str	r3, [r5, #0]
  40229c:	e7f4      	b.n	402288 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  40229e:	4b11      	ldr	r3, [pc, #68]	; (4022e4 <xTaskResumeAll+0x108>)
  4022a0:	681b      	ldr	r3, [r3, #0]
  4022a2:	2b01      	cmp	r3, #1
  4022a4:	d10b      	bne.n	4022be <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4022a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022aa:	4b12      	ldr	r3, [pc, #72]	; (4022f4 <xTaskResumeAll+0x118>)
  4022ac:	601a      	str	r2, [r3, #0]
  4022ae:	f3bf 8f4f 	dsb	sy
  4022b2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4022b6:	2401      	movs	r4, #1
  4022b8:	e7ae      	b.n	402218 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4022ba:	2400      	movs	r4, #0
  4022bc:	e7ac      	b.n	402218 <xTaskResumeAll+0x3c>
  4022be:	2400      	movs	r4, #0
  4022c0:	e7aa      	b.n	402218 <xTaskResumeAll+0x3c>
  4022c2:	bf00      	nop
  4022c4:	2040c31c 	.word	0x2040c31c
  4022c8:	00401085 	.word	0x00401085
  4022cc:	2040c314 	.word	0x2040c314
  4022d0:	004010d1 	.word	0x004010d1
  4022d4:	00400f55 	.word	0x00400f55
  4022d8:	2040c2a4 	.word	0x2040c2a4
  4022dc:	2040c318 	.word	0x2040c318
  4022e0:	00402091 	.word	0x00402091
  4022e4:	2040c3a0 	.word	0x2040c3a0
  4022e8:	2040c35c 	.word	0x2040c35c
  4022ec:	00400fa1 	.word	0x00400fa1
  4022f0:	2040c328 	.word	0x2040c328
  4022f4:	e000ed04 	.word	0xe000ed04
  4022f8:	2040c2b0 	.word	0x2040c2b0

004022fc <vTaskDelay>:
	{
  4022fc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4022fe:	2800      	cmp	r0, #0
  402300:	d029      	beq.n	402356 <vTaskDelay+0x5a>
  402302:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402304:	4b18      	ldr	r3, [pc, #96]	; (402368 <vTaskDelay+0x6c>)
  402306:	681b      	ldr	r3, [r3, #0]
  402308:	b153      	cbz	r3, 402320 <vTaskDelay+0x24>
  40230a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40230e:	b672      	cpsid	i
  402310:	f383 8811 	msr	BASEPRI, r3
  402314:	f3bf 8f6f 	isb	sy
  402318:	f3bf 8f4f 	dsb	sy
  40231c:	b662      	cpsie	i
  40231e:	e7fe      	b.n	40231e <vTaskDelay+0x22>
			vTaskSuspendAll();
  402320:	4b12      	ldr	r3, [pc, #72]	; (40236c <vTaskDelay+0x70>)
  402322:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402324:	4b12      	ldr	r3, [pc, #72]	; (402370 <vTaskDelay+0x74>)
  402326:	681b      	ldr	r3, [r3, #0]
  402328:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40232a:	4b12      	ldr	r3, [pc, #72]	; (402374 <vTaskDelay+0x78>)
  40232c:	6818      	ldr	r0, [r3, #0]
  40232e:	3004      	adds	r0, #4
  402330:	4b11      	ldr	r3, [pc, #68]	; (402378 <vTaskDelay+0x7c>)
  402332:	4798      	blx	r3
  402334:	b948      	cbnz	r0, 40234a <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402336:	4b0f      	ldr	r3, [pc, #60]	; (402374 <vTaskDelay+0x78>)
  402338:	681a      	ldr	r2, [r3, #0]
  40233a:	4910      	ldr	r1, [pc, #64]	; (40237c <vTaskDelay+0x80>)
  40233c:	680b      	ldr	r3, [r1, #0]
  40233e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402340:	2201      	movs	r2, #1
  402342:	4082      	lsls	r2, r0
  402344:	ea23 0302 	bic.w	r3, r3, r2
  402348:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40234a:	4620      	mov	r0, r4
  40234c:	4b0c      	ldr	r3, [pc, #48]	; (402380 <vTaskDelay+0x84>)
  40234e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402350:	4b0c      	ldr	r3, [pc, #48]	; (402384 <vTaskDelay+0x88>)
  402352:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402354:	b938      	cbnz	r0, 402366 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  402356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40235a:	4b0b      	ldr	r3, [pc, #44]	; (402388 <vTaskDelay+0x8c>)
  40235c:	601a      	str	r2, [r3, #0]
  40235e:	f3bf 8f4f 	dsb	sy
  402362:	f3bf 8f6f 	isb	sy
  402366:	bd10      	pop	{r4, pc}
  402368:	2040c31c 	.word	0x2040c31c
  40236c:	00402075 	.word	0x00402075
  402370:	2040c39c 	.word	0x2040c39c
  402374:	2040c2a4 	.word	0x2040c2a4
  402378:	00400fa1 	.word	0x00400fa1
  40237c:	2040c328 	.word	0x2040c328
  402380:	00401d5d 	.word	0x00401d5d
  402384:	004021dd 	.word	0x004021dd
  402388:	e000ed04 	.word	0xe000ed04

0040238c <prvIdleTask>:
{
  40238c:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40238e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402418 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402392:	4e19      	ldr	r6, [pc, #100]	; (4023f8 <prvIdleTask+0x6c>)
				taskYIELD();
  402394:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40241c <prvIdleTask+0x90>
  402398:	e02a      	b.n	4023f0 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40239a:	4b18      	ldr	r3, [pc, #96]	; (4023fc <prvIdleTask+0x70>)
  40239c:	681b      	ldr	r3, [r3, #0]
  40239e:	2b01      	cmp	r3, #1
  4023a0:	d81e      	bhi.n	4023e0 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4023a2:	682b      	ldr	r3, [r5, #0]
  4023a4:	2b00      	cmp	r3, #0
  4023a6:	d0f8      	beq.n	40239a <prvIdleTask+0xe>
			vTaskSuspendAll();
  4023a8:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4023aa:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4023ac:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4023ae:	2c00      	cmp	r4, #0
  4023b0:	d0f7      	beq.n	4023a2 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4023b2:	4b13      	ldr	r3, [pc, #76]	; (402400 <prvIdleTask+0x74>)
  4023b4:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4023b6:	68f3      	ldr	r3, [r6, #12]
  4023b8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4023ba:	1d20      	adds	r0, r4, #4
  4023bc:	4b11      	ldr	r3, [pc, #68]	; (402404 <prvIdleTask+0x78>)
  4023be:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4023c0:	4a11      	ldr	r2, [pc, #68]	; (402408 <prvIdleTask+0x7c>)
  4023c2:	6813      	ldr	r3, [r2, #0]
  4023c4:	3b01      	subs	r3, #1
  4023c6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4023c8:	682b      	ldr	r3, [r5, #0]
  4023ca:	3b01      	subs	r3, #1
  4023cc:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4023ce:	4b0f      	ldr	r3, [pc, #60]	; (40240c <prvIdleTask+0x80>)
  4023d0:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4023d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4023d4:	f8df a048 	ldr.w	sl, [pc, #72]	; 402420 <prvIdleTask+0x94>
  4023d8:	47d0      	blx	sl
		vPortFree( pxTCB );
  4023da:	4620      	mov	r0, r4
  4023dc:	47d0      	blx	sl
  4023de:	e7e0      	b.n	4023a2 <prvIdleTask+0x16>
				taskYIELD();
  4023e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4023e4:	f8c9 3000 	str.w	r3, [r9]
  4023e8:	f3bf 8f4f 	dsb	sy
  4023ec:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4023f0:	4d07      	ldr	r5, [pc, #28]	; (402410 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4023f2:	4f08      	ldr	r7, [pc, #32]	; (402414 <prvIdleTask+0x88>)
  4023f4:	e7d5      	b.n	4023a2 <prvIdleTask+0x16>
  4023f6:	bf00      	nop
  4023f8:	2040c388 	.word	0x2040c388
  4023fc:	2040c2b0 	.word	0x2040c2b0
  402400:	00401085 	.word	0x00401085
  402404:	00400fa1 	.word	0x00400fa1
  402408:	2040c314 	.word	0x2040c314
  40240c:	004010d1 	.word	0x004010d1
  402410:	2040c324 	.word	0x2040c324
  402414:	004021dd 	.word	0x004021dd
  402418:	00402075 	.word	0x00402075
  40241c:	e000ed04 	.word	0xe000ed04
  402420:	00401351 	.word	0x00401351

00402424 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402424:	4b2d      	ldr	r3, [pc, #180]	; (4024dc <vTaskSwitchContext+0xb8>)
  402426:	681b      	ldr	r3, [r3, #0]
  402428:	2b00      	cmp	r3, #0
  40242a:	d12c      	bne.n	402486 <vTaskSwitchContext+0x62>
{
  40242c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40242e:	2200      	movs	r2, #0
  402430:	4b2b      	ldr	r3, [pc, #172]	; (4024e0 <vTaskSwitchContext+0xbc>)
  402432:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402434:	4b2b      	ldr	r3, [pc, #172]	; (4024e4 <vTaskSwitchContext+0xc0>)
  402436:	681b      	ldr	r3, [r3, #0]
  402438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40243a:	681a      	ldr	r2, [r3, #0]
  40243c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402440:	d103      	bne.n	40244a <vTaskSwitchContext+0x26>
  402442:	685a      	ldr	r2, [r3, #4]
  402444:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402448:	d021      	beq.n	40248e <vTaskSwitchContext+0x6a>
  40244a:	4b26      	ldr	r3, [pc, #152]	; (4024e4 <vTaskSwitchContext+0xc0>)
  40244c:	6818      	ldr	r0, [r3, #0]
  40244e:	6819      	ldr	r1, [r3, #0]
  402450:	3134      	adds	r1, #52	; 0x34
  402452:	4b25      	ldr	r3, [pc, #148]	; (4024e8 <vTaskSwitchContext+0xc4>)
  402454:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402456:	4b25      	ldr	r3, [pc, #148]	; (4024ec <vTaskSwitchContext+0xc8>)
  402458:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40245a:	fab3 f383 	clz	r3, r3
  40245e:	b2db      	uxtb	r3, r3
  402460:	f1c3 031f 	rsb	r3, r3, #31
  402464:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402468:	4a21      	ldr	r2, [pc, #132]	; (4024f0 <vTaskSwitchContext+0xcc>)
  40246a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40246e:	b9ba      	cbnz	r2, 4024a0 <vTaskSwitchContext+0x7c>
	__asm volatile
  402470:	f04f 0380 	mov.w	r3, #128	; 0x80
  402474:	b672      	cpsid	i
  402476:	f383 8811 	msr	BASEPRI, r3
  40247a:	f3bf 8f6f 	isb	sy
  40247e:	f3bf 8f4f 	dsb	sy
  402482:	b662      	cpsie	i
  402484:	e7fe      	b.n	402484 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402486:	2201      	movs	r2, #1
  402488:	4b15      	ldr	r3, [pc, #84]	; (4024e0 <vTaskSwitchContext+0xbc>)
  40248a:	601a      	str	r2, [r3, #0]
  40248c:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40248e:	689a      	ldr	r2, [r3, #8]
  402490:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402494:	d1d9      	bne.n	40244a <vTaskSwitchContext+0x26>
  402496:	68db      	ldr	r3, [r3, #12]
  402498:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40249c:	d1d5      	bne.n	40244a <vTaskSwitchContext+0x26>
  40249e:	e7da      	b.n	402456 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4024a0:	4a13      	ldr	r2, [pc, #76]	; (4024f0 <vTaskSwitchContext+0xcc>)
  4024a2:	0099      	lsls	r1, r3, #2
  4024a4:	18c8      	adds	r0, r1, r3
  4024a6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4024aa:	6844      	ldr	r4, [r0, #4]
  4024ac:	6864      	ldr	r4, [r4, #4]
  4024ae:	6044      	str	r4, [r0, #4]
  4024b0:	4419      	add	r1, r3
  4024b2:	4602      	mov	r2, r0
  4024b4:	3208      	adds	r2, #8
  4024b6:	4294      	cmp	r4, r2
  4024b8:	d009      	beq.n	4024ce <vTaskSwitchContext+0xaa>
  4024ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4024be:	4a0c      	ldr	r2, [pc, #48]	; (4024f0 <vTaskSwitchContext+0xcc>)
  4024c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4024c4:	685b      	ldr	r3, [r3, #4]
  4024c6:	68da      	ldr	r2, [r3, #12]
  4024c8:	4b06      	ldr	r3, [pc, #24]	; (4024e4 <vTaskSwitchContext+0xc0>)
  4024ca:	601a      	str	r2, [r3, #0]
  4024cc:	bd10      	pop	{r4, pc}
  4024ce:	6860      	ldr	r0, [r4, #4]
  4024d0:	4a07      	ldr	r2, [pc, #28]	; (4024f0 <vTaskSwitchContext+0xcc>)
  4024d2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4024d6:	6050      	str	r0, [r2, #4]
  4024d8:	e7ef      	b.n	4024ba <vTaskSwitchContext+0x96>
  4024da:	bf00      	nop
  4024dc:	2040c31c 	.word	0x2040c31c
  4024e0:	2040c3a0 	.word	0x2040c3a0
  4024e4:	2040c2a4 	.word	0x2040c2a4
  4024e8:	00421cf5 	.word	0x00421cf5
  4024ec:	2040c328 	.word	0x2040c328
  4024f0:	2040c2b0 	.word	0x2040c2b0

004024f4 <vTaskPlaceOnEventList>:
{
  4024f4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4024f6:	b1e0      	cbz	r0, 402532 <vTaskPlaceOnEventList+0x3e>
  4024f8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4024fa:	4d17      	ldr	r5, [pc, #92]	; (402558 <vTaskPlaceOnEventList+0x64>)
  4024fc:	6829      	ldr	r1, [r5, #0]
  4024fe:	3118      	adds	r1, #24
  402500:	4b16      	ldr	r3, [pc, #88]	; (40255c <vTaskPlaceOnEventList+0x68>)
  402502:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402504:	6828      	ldr	r0, [r5, #0]
  402506:	3004      	adds	r0, #4
  402508:	4b15      	ldr	r3, [pc, #84]	; (402560 <vTaskPlaceOnEventList+0x6c>)
  40250a:	4798      	blx	r3
  40250c:	b940      	cbnz	r0, 402520 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40250e:	682a      	ldr	r2, [r5, #0]
  402510:	4914      	ldr	r1, [pc, #80]	; (402564 <vTaskPlaceOnEventList+0x70>)
  402512:	680b      	ldr	r3, [r1, #0]
  402514:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402516:	2201      	movs	r2, #1
  402518:	4082      	lsls	r2, r0
  40251a:	ea23 0302 	bic.w	r3, r3, r2
  40251e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402520:	f1b4 3fff 	cmp.w	r4, #4294967295
  402524:	d010      	beq.n	402548 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402526:	4b10      	ldr	r3, [pc, #64]	; (402568 <vTaskPlaceOnEventList+0x74>)
  402528:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40252a:	4420      	add	r0, r4
  40252c:	4b0f      	ldr	r3, [pc, #60]	; (40256c <vTaskPlaceOnEventList+0x78>)
  40252e:	4798      	blx	r3
  402530:	bd38      	pop	{r3, r4, r5, pc}
  402532:	f04f 0380 	mov.w	r3, #128	; 0x80
  402536:	b672      	cpsid	i
  402538:	f383 8811 	msr	BASEPRI, r3
  40253c:	f3bf 8f6f 	isb	sy
  402540:	f3bf 8f4f 	dsb	sy
  402544:	b662      	cpsie	i
  402546:	e7fe      	b.n	402546 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402548:	4b03      	ldr	r3, [pc, #12]	; (402558 <vTaskPlaceOnEventList+0x64>)
  40254a:	6819      	ldr	r1, [r3, #0]
  40254c:	3104      	adds	r1, #4
  40254e:	4808      	ldr	r0, [pc, #32]	; (402570 <vTaskPlaceOnEventList+0x7c>)
  402550:	4b08      	ldr	r3, [pc, #32]	; (402574 <vTaskPlaceOnEventList+0x80>)
  402552:	4798      	blx	r3
  402554:	bd38      	pop	{r3, r4, r5, pc}
  402556:	bf00      	nop
  402558:	2040c2a4 	.word	0x2040c2a4
  40255c:	00400f6d 	.word	0x00400f6d
  402560:	00400fa1 	.word	0x00400fa1
  402564:	2040c328 	.word	0x2040c328
  402568:	2040c39c 	.word	0x2040c39c
  40256c:	00401d5d 	.word	0x00401d5d
  402570:	2040c374 	.word	0x2040c374
  402574:	00400f55 	.word	0x00400f55

00402578 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402578:	b1e8      	cbz	r0, 4025b6 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  40257a:	b570      	push	{r4, r5, r6, lr}
  40257c:	4615      	mov	r5, r2
  40257e:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402580:	4e16      	ldr	r6, [pc, #88]	; (4025dc <vTaskPlaceOnEventListRestricted+0x64>)
  402582:	6831      	ldr	r1, [r6, #0]
  402584:	3118      	adds	r1, #24
  402586:	4b16      	ldr	r3, [pc, #88]	; (4025e0 <vTaskPlaceOnEventListRestricted+0x68>)
  402588:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40258a:	6830      	ldr	r0, [r6, #0]
  40258c:	3004      	adds	r0, #4
  40258e:	4b15      	ldr	r3, [pc, #84]	; (4025e4 <vTaskPlaceOnEventListRestricted+0x6c>)
  402590:	4798      	blx	r3
  402592:	b940      	cbnz	r0, 4025a6 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402594:	6832      	ldr	r2, [r6, #0]
  402596:	4914      	ldr	r1, [pc, #80]	; (4025e8 <vTaskPlaceOnEventListRestricted+0x70>)
  402598:	680b      	ldr	r3, [r1, #0]
  40259a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40259c:	2201      	movs	r2, #1
  40259e:	4082      	lsls	r2, r0
  4025a0:	ea23 0302 	bic.w	r3, r3, r2
  4025a4:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4025a6:	2d01      	cmp	r5, #1
  4025a8:	d010      	beq.n	4025cc <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4025aa:	4b10      	ldr	r3, [pc, #64]	; (4025ec <vTaskPlaceOnEventListRestricted+0x74>)
  4025ac:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4025ae:	4420      	add	r0, r4
  4025b0:	4b0f      	ldr	r3, [pc, #60]	; (4025f0 <vTaskPlaceOnEventListRestricted+0x78>)
  4025b2:	4798      	blx	r3
  4025b4:	bd70      	pop	{r4, r5, r6, pc}
  4025b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025ba:	b672      	cpsid	i
  4025bc:	f383 8811 	msr	BASEPRI, r3
  4025c0:	f3bf 8f6f 	isb	sy
  4025c4:	f3bf 8f4f 	dsb	sy
  4025c8:	b662      	cpsie	i
  4025ca:	e7fe      	b.n	4025ca <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4025cc:	4b03      	ldr	r3, [pc, #12]	; (4025dc <vTaskPlaceOnEventListRestricted+0x64>)
  4025ce:	6819      	ldr	r1, [r3, #0]
  4025d0:	3104      	adds	r1, #4
  4025d2:	4808      	ldr	r0, [pc, #32]	; (4025f4 <vTaskPlaceOnEventListRestricted+0x7c>)
  4025d4:	4b02      	ldr	r3, [pc, #8]	; (4025e0 <vTaskPlaceOnEventListRestricted+0x68>)
  4025d6:	4798      	blx	r3
  4025d8:	bd70      	pop	{r4, r5, r6, pc}
  4025da:	bf00      	nop
  4025dc:	2040c2a4 	.word	0x2040c2a4
  4025e0:	00400f55 	.word	0x00400f55
  4025e4:	00400fa1 	.word	0x00400fa1
  4025e8:	2040c328 	.word	0x2040c328
  4025ec:	2040c39c 	.word	0x2040c39c
  4025f0:	00401d5d 	.word	0x00401d5d
  4025f4:	2040c374 	.word	0x2040c374

004025f8 <xTaskRemoveFromEventList>:
{
  4025f8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4025fa:	68c3      	ldr	r3, [r0, #12]
  4025fc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4025fe:	b324      	cbz	r4, 40264a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402600:	f104 0518 	add.w	r5, r4, #24
  402604:	4628      	mov	r0, r5
  402606:	4b1a      	ldr	r3, [pc, #104]	; (402670 <xTaskRemoveFromEventList+0x78>)
  402608:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40260a:	4b1a      	ldr	r3, [pc, #104]	; (402674 <xTaskRemoveFromEventList+0x7c>)
  40260c:	681b      	ldr	r3, [r3, #0]
  40260e:	bb3b      	cbnz	r3, 402660 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402610:	1d25      	adds	r5, r4, #4
  402612:	4628      	mov	r0, r5
  402614:	4b16      	ldr	r3, [pc, #88]	; (402670 <xTaskRemoveFromEventList+0x78>)
  402616:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402618:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40261a:	4a17      	ldr	r2, [pc, #92]	; (402678 <xTaskRemoveFromEventList+0x80>)
  40261c:	6811      	ldr	r1, [r2, #0]
  40261e:	2301      	movs	r3, #1
  402620:	4083      	lsls	r3, r0
  402622:	430b      	orrs	r3, r1
  402624:	6013      	str	r3, [r2, #0]
  402626:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40262a:	4629      	mov	r1, r5
  40262c:	4b13      	ldr	r3, [pc, #76]	; (40267c <xTaskRemoveFromEventList+0x84>)
  40262e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402632:	4b13      	ldr	r3, [pc, #76]	; (402680 <xTaskRemoveFromEventList+0x88>)
  402634:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402636:	4b13      	ldr	r3, [pc, #76]	; (402684 <xTaskRemoveFromEventList+0x8c>)
  402638:	681b      	ldr	r3, [r3, #0]
  40263a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40263e:	429a      	cmp	r2, r3
  402640:	d913      	bls.n	40266a <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402642:	2001      	movs	r0, #1
  402644:	4b10      	ldr	r3, [pc, #64]	; (402688 <xTaskRemoveFromEventList+0x90>)
  402646:	6018      	str	r0, [r3, #0]
  402648:	bd38      	pop	{r3, r4, r5, pc}
  40264a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40264e:	b672      	cpsid	i
  402650:	f383 8811 	msr	BASEPRI, r3
  402654:	f3bf 8f6f 	isb	sy
  402658:	f3bf 8f4f 	dsb	sy
  40265c:	b662      	cpsie	i
  40265e:	e7fe      	b.n	40265e <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402660:	4629      	mov	r1, r5
  402662:	480a      	ldr	r0, [pc, #40]	; (40268c <xTaskRemoveFromEventList+0x94>)
  402664:	4b06      	ldr	r3, [pc, #24]	; (402680 <xTaskRemoveFromEventList+0x88>)
  402666:	4798      	blx	r3
  402668:	e7e5      	b.n	402636 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  40266a:	2000      	movs	r0, #0
}
  40266c:	bd38      	pop	{r3, r4, r5, pc}
  40266e:	bf00      	nop
  402670:	00400fa1 	.word	0x00400fa1
  402674:	2040c31c 	.word	0x2040c31c
  402678:	2040c328 	.word	0x2040c328
  40267c:	2040c2b0 	.word	0x2040c2b0
  402680:	00400f55 	.word	0x00400f55
  402684:	2040c2a4 	.word	0x2040c2a4
  402688:	2040c3a0 	.word	0x2040c3a0
  40268c:	2040c35c 	.word	0x2040c35c

00402690 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402690:	b130      	cbz	r0, 4026a0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402692:	4a09      	ldr	r2, [pc, #36]	; (4026b8 <vTaskSetTimeOutState+0x28>)
  402694:	6812      	ldr	r2, [r2, #0]
  402696:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402698:	4a08      	ldr	r2, [pc, #32]	; (4026bc <vTaskSetTimeOutState+0x2c>)
  40269a:	6812      	ldr	r2, [r2, #0]
  40269c:	6042      	str	r2, [r0, #4]
  40269e:	4770      	bx	lr
  4026a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026a4:	b672      	cpsid	i
  4026a6:	f383 8811 	msr	BASEPRI, r3
  4026aa:	f3bf 8f6f 	isb	sy
  4026ae:	f3bf 8f4f 	dsb	sy
  4026b2:	b662      	cpsie	i
  4026b4:	e7fe      	b.n	4026b4 <vTaskSetTimeOutState+0x24>
  4026b6:	bf00      	nop
  4026b8:	2040c358 	.word	0x2040c358
  4026bc:	2040c39c 	.word	0x2040c39c

004026c0 <xTaskCheckForTimeOut>:
{
  4026c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  4026c2:	b1c0      	cbz	r0, 4026f6 <xTaskCheckForTimeOut+0x36>
  4026c4:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4026c6:	b309      	cbz	r1, 40270c <xTaskCheckForTimeOut+0x4c>
  4026c8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4026ca:	4b1d      	ldr	r3, [pc, #116]	; (402740 <xTaskCheckForTimeOut+0x80>)
  4026cc:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4026ce:	4b1d      	ldr	r3, [pc, #116]	; (402744 <xTaskCheckForTimeOut+0x84>)
  4026d0:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4026d2:	682b      	ldr	r3, [r5, #0]
  4026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4026d8:	d02e      	beq.n	402738 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4026da:	491b      	ldr	r1, [pc, #108]	; (402748 <xTaskCheckForTimeOut+0x88>)
  4026dc:	6809      	ldr	r1, [r1, #0]
  4026de:	6820      	ldr	r0, [r4, #0]
  4026e0:	4288      	cmp	r0, r1
  4026e2:	d002      	beq.n	4026ea <xTaskCheckForTimeOut+0x2a>
  4026e4:	6861      	ldr	r1, [r4, #4]
  4026e6:	428a      	cmp	r2, r1
  4026e8:	d228      	bcs.n	40273c <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4026ea:	6861      	ldr	r1, [r4, #4]
  4026ec:	1a50      	subs	r0, r2, r1
  4026ee:	4283      	cmp	r3, r0
  4026f0:	d817      	bhi.n	402722 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  4026f2:	2401      	movs	r4, #1
  4026f4:	e01c      	b.n	402730 <xTaskCheckForTimeOut+0x70>
  4026f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026fa:	b672      	cpsid	i
  4026fc:	f383 8811 	msr	BASEPRI, r3
  402700:	f3bf 8f6f 	isb	sy
  402704:	f3bf 8f4f 	dsb	sy
  402708:	b662      	cpsie	i
  40270a:	e7fe      	b.n	40270a <xTaskCheckForTimeOut+0x4a>
  40270c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402710:	b672      	cpsid	i
  402712:	f383 8811 	msr	BASEPRI, r3
  402716:	f3bf 8f6f 	isb	sy
  40271a:	f3bf 8f4f 	dsb	sy
  40271e:	b662      	cpsie	i
  402720:	e7fe      	b.n	402720 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402722:	1a9b      	subs	r3, r3, r2
  402724:	440b      	add	r3, r1
  402726:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402728:	4620      	mov	r0, r4
  40272a:	4b08      	ldr	r3, [pc, #32]	; (40274c <xTaskCheckForTimeOut+0x8c>)
  40272c:	4798      	blx	r3
			xReturn = pdFALSE;
  40272e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402730:	4b07      	ldr	r3, [pc, #28]	; (402750 <xTaskCheckForTimeOut+0x90>)
  402732:	4798      	blx	r3
}
  402734:	4620      	mov	r0, r4
  402736:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402738:	2400      	movs	r4, #0
  40273a:	e7f9      	b.n	402730 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  40273c:	2401      	movs	r4, #1
  40273e:	e7f7      	b.n	402730 <xTaskCheckForTimeOut+0x70>
  402740:	00401085 	.word	0x00401085
  402744:	2040c39c 	.word	0x2040c39c
  402748:	2040c358 	.word	0x2040c358
  40274c:	00402691 	.word	0x00402691
  402750:	004010d1 	.word	0x004010d1

00402754 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402754:	2201      	movs	r2, #1
  402756:	4b01      	ldr	r3, [pc, #4]	; (40275c <vTaskMissedYield+0x8>)
  402758:	601a      	str	r2, [r3, #0]
  40275a:	4770      	bx	lr
  40275c:	2040c3a0 	.word	0x2040c3a0

00402760 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402760:	4b05      	ldr	r3, [pc, #20]	; (402778 <xTaskGetSchedulerState+0x18>)
  402762:	681b      	ldr	r3, [r3, #0]
  402764:	b133      	cbz	r3, 402774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402766:	4b05      	ldr	r3, [pc, #20]	; (40277c <xTaskGetSchedulerState+0x1c>)
  402768:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40276a:	2b00      	cmp	r3, #0
  40276c:	bf0c      	ite	eq
  40276e:	2002      	moveq	r0, #2
  402770:	2000      	movne	r0, #0
  402772:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402774:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402776:	4770      	bx	lr
  402778:	2040c370 	.word	0x2040c370
  40277c:	2040c31c 	.word	0x2040c31c

00402780 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402780:	2800      	cmp	r0, #0
  402782:	d044      	beq.n	40280e <vTaskPriorityInherit+0x8e>
	{
  402784:	b538      	push	{r3, r4, r5, lr}
  402786:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402788:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40278a:	4921      	ldr	r1, [pc, #132]	; (402810 <vTaskPriorityInherit+0x90>)
  40278c:	6809      	ldr	r1, [r1, #0]
  40278e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402790:	428a      	cmp	r2, r1
  402792:	d214      	bcs.n	4027be <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402794:	6981      	ldr	r1, [r0, #24]
  402796:	2900      	cmp	r1, #0
  402798:	db05      	blt.n	4027a6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40279a:	491d      	ldr	r1, [pc, #116]	; (402810 <vTaskPriorityInherit+0x90>)
  40279c:	6809      	ldr	r1, [r1, #0]
  40279e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4027a0:	f1c1 0105 	rsb	r1, r1, #5
  4027a4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4027a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4027aa:	491a      	ldr	r1, [pc, #104]	; (402814 <vTaskPriorityInherit+0x94>)
  4027ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4027b0:	6961      	ldr	r1, [r4, #20]
  4027b2:	4291      	cmp	r1, r2
  4027b4:	d004      	beq.n	4027c0 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4027b6:	4a16      	ldr	r2, [pc, #88]	; (402810 <vTaskPriorityInherit+0x90>)
  4027b8:	6812      	ldr	r2, [r2, #0]
  4027ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4027bc:	62e2      	str	r2, [r4, #44]	; 0x2c
  4027be:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4027c0:	1d25      	adds	r5, r4, #4
  4027c2:	4628      	mov	r0, r5
  4027c4:	4b14      	ldr	r3, [pc, #80]	; (402818 <vTaskPriorityInherit+0x98>)
  4027c6:	4798      	blx	r3
  4027c8:	b970      	cbnz	r0, 4027e8 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4027ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4027cc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4027d0:	4a10      	ldr	r2, [pc, #64]	; (402814 <vTaskPriorityInherit+0x94>)
  4027d2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4027d6:	b93a      	cbnz	r2, 4027e8 <vTaskPriorityInherit+0x68>
  4027d8:	4810      	ldr	r0, [pc, #64]	; (40281c <vTaskPriorityInherit+0x9c>)
  4027da:	6802      	ldr	r2, [r0, #0]
  4027dc:	2101      	movs	r1, #1
  4027de:	fa01 f303 	lsl.w	r3, r1, r3
  4027e2:	ea22 0303 	bic.w	r3, r2, r3
  4027e6:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4027e8:	4b09      	ldr	r3, [pc, #36]	; (402810 <vTaskPriorityInherit+0x90>)
  4027ea:	681b      	ldr	r3, [r3, #0]
  4027ec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4027ee:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4027f0:	4a0a      	ldr	r2, [pc, #40]	; (40281c <vTaskPriorityInherit+0x9c>)
  4027f2:	6811      	ldr	r1, [r2, #0]
  4027f4:	2301      	movs	r3, #1
  4027f6:	4083      	lsls	r3, r0
  4027f8:	430b      	orrs	r3, r1
  4027fa:	6013      	str	r3, [r2, #0]
  4027fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402800:	4629      	mov	r1, r5
  402802:	4b04      	ldr	r3, [pc, #16]	; (402814 <vTaskPriorityInherit+0x94>)
  402804:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402808:	4b05      	ldr	r3, [pc, #20]	; (402820 <vTaskPriorityInherit+0xa0>)
  40280a:	4798      	blx	r3
  40280c:	bd38      	pop	{r3, r4, r5, pc}
  40280e:	4770      	bx	lr
  402810:	2040c2a4 	.word	0x2040c2a4
  402814:	2040c2b0 	.word	0x2040c2b0
  402818:	00400fa1 	.word	0x00400fa1
  40281c:	2040c328 	.word	0x2040c328
  402820:	00400f55 	.word	0x00400f55

00402824 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402824:	2800      	cmp	r0, #0
  402826:	d04d      	beq.n	4028c4 <xTaskPriorityDisinherit+0xa0>
	{
  402828:	b538      	push	{r3, r4, r5, lr}
  40282a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  40282c:	4a27      	ldr	r2, [pc, #156]	; (4028cc <xTaskPriorityDisinherit+0xa8>)
  40282e:	6812      	ldr	r2, [r2, #0]
  402830:	4290      	cmp	r0, r2
  402832:	d00a      	beq.n	40284a <xTaskPriorityDisinherit+0x26>
  402834:	f04f 0380 	mov.w	r3, #128	; 0x80
  402838:	b672      	cpsid	i
  40283a:	f383 8811 	msr	BASEPRI, r3
  40283e:	f3bf 8f6f 	isb	sy
  402842:	f3bf 8f4f 	dsb	sy
  402846:	b662      	cpsie	i
  402848:	e7fe      	b.n	402848 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  40284a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40284c:	b952      	cbnz	r2, 402864 <xTaskPriorityDisinherit+0x40>
  40284e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402852:	b672      	cpsid	i
  402854:	f383 8811 	msr	BASEPRI, r3
  402858:	f3bf 8f6f 	isb	sy
  40285c:	f3bf 8f4f 	dsb	sy
  402860:	b662      	cpsie	i
  402862:	e7fe      	b.n	402862 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402864:	3a01      	subs	r2, #1
  402866:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402868:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40286a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40286c:	4288      	cmp	r0, r1
  40286e:	d02b      	beq.n	4028c8 <xTaskPriorityDisinherit+0xa4>
  402870:	bb52      	cbnz	r2, 4028c8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402872:	1d25      	adds	r5, r4, #4
  402874:	4628      	mov	r0, r5
  402876:	4b16      	ldr	r3, [pc, #88]	; (4028d0 <xTaskPriorityDisinherit+0xac>)
  402878:	4798      	blx	r3
  40287a:	b968      	cbnz	r0, 402898 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40287c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40287e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402882:	4b14      	ldr	r3, [pc, #80]	; (4028d4 <xTaskPriorityDisinherit+0xb0>)
  402884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402888:	b933      	cbnz	r3, 402898 <xTaskPriorityDisinherit+0x74>
  40288a:	4813      	ldr	r0, [pc, #76]	; (4028d8 <xTaskPriorityDisinherit+0xb4>)
  40288c:	6803      	ldr	r3, [r0, #0]
  40288e:	2201      	movs	r2, #1
  402890:	408a      	lsls	r2, r1
  402892:	ea23 0302 	bic.w	r3, r3, r2
  402896:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402898:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40289a:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40289c:	f1c0 0305 	rsb	r3, r0, #5
  4028a0:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4028a2:	4a0d      	ldr	r2, [pc, #52]	; (4028d8 <xTaskPriorityDisinherit+0xb4>)
  4028a4:	6811      	ldr	r1, [r2, #0]
  4028a6:	2401      	movs	r4, #1
  4028a8:	fa04 f300 	lsl.w	r3, r4, r0
  4028ac:	430b      	orrs	r3, r1
  4028ae:	6013      	str	r3, [r2, #0]
  4028b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4028b4:	4629      	mov	r1, r5
  4028b6:	4b07      	ldr	r3, [pc, #28]	; (4028d4 <xTaskPriorityDisinherit+0xb0>)
  4028b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4028bc:	4b07      	ldr	r3, [pc, #28]	; (4028dc <xTaskPriorityDisinherit+0xb8>)
  4028be:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4028c0:	4620      	mov	r0, r4
  4028c2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4028c4:	2000      	movs	r0, #0
  4028c6:	4770      	bx	lr
  4028c8:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4028ca:	bd38      	pop	{r3, r4, r5, pc}
  4028cc:	2040c2a4 	.word	0x2040c2a4
  4028d0:	00400fa1 	.word	0x00400fa1
  4028d4:	2040c2b0 	.word	0x2040c2b0
  4028d8:	2040c328 	.word	0x2040c328
  4028dc:	00400f55 	.word	0x00400f55

004028e0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4028e0:	4b05      	ldr	r3, [pc, #20]	; (4028f8 <pvTaskIncrementMutexHeldCount+0x18>)
  4028e2:	681b      	ldr	r3, [r3, #0]
  4028e4:	b123      	cbz	r3, 4028f0 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4028e6:	4b04      	ldr	r3, [pc, #16]	; (4028f8 <pvTaskIncrementMutexHeldCount+0x18>)
  4028e8:	681a      	ldr	r2, [r3, #0]
  4028ea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4028ec:	3301      	adds	r3, #1
  4028ee:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4028f0:	4b01      	ldr	r3, [pc, #4]	; (4028f8 <pvTaskIncrementMutexHeldCount+0x18>)
  4028f2:	6818      	ldr	r0, [r3, #0]
	}
  4028f4:	4770      	bx	lr
  4028f6:	bf00      	nop
  4028f8:	2040c2a4 	.word	0x2040c2a4

004028fc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4028fc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4028fe:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402900:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402902:	4291      	cmp	r1, r2
  402904:	d80c      	bhi.n	402920 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402906:	1ad2      	subs	r2, r2, r3
  402908:	6983      	ldr	r3, [r0, #24]
  40290a:	429a      	cmp	r2, r3
  40290c:	d301      	bcc.n	402912 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40290e:	2001      	movs	r0, #1
  402910:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402912:	1d01      	adds	r1, r0, #4
  402914:	4b09      	ldr	r3, [pc, #36]	; (40293c <prvInsertTimerInActiveList+0x40>)
  402916:	6818      	ldr	r0, [r3, #0]
  402918:	4b09      	ldr	r3, [pc, #36]	; (402940 <prvInsertTimerInActiveList+0x44>)
  40291a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40291c:	2000      	movs	r0, #0
  40291e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402920:	429a      	cmp	r2, r3
  402922:	d203      	bcs.n	40292c <prvInsertTimerInActiveList+0x30>
  402924:	4299      	cmp	r1, r3
  402926:	d301      	bcc.n	40292c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402928:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40292a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40292c:	1d01      	adds	r1, r0, #4
  40292e:	4b05      	ldr	r3, [pc, #20]	; (402944 <prvInsertTimerInActiveList+0x48>)
  402930:	6818      	ldr	r0, [r3, #0]
  402932:	4b03      	ldr	r3, [pc, #12]	; (402940 <prvInsertTimerInActiveList+0x44>)
  402934:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402936:	2000      	movs	r0, #0
  402938:	bd08      	pop	{r3, pc}
  40293a:	bf00      	nop
  40293c:	2040c3a8 	.word	0x2040c3a8
  402940:	00400f6d 	.word	0x00400f6d
  402944:	2040c3a4 	.word	0x2040c3a4

00402948 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402948:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40294a:	4b15      	ldr	r3, [pc, #84]	; (4029a0 <prvCheckForValidListAndQueue+0x58>)
  40294c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40294e:	4b15      	ldr	r3, [pc, #84]	; (4029a4 <prvCheckForValidListAndQueue+0x5c>)
  402950:	681b      	ldr	r3, [r3, #0]
  402952:	b113      	cbz	r3, 40295a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402954:	4b14      	ldr	r3, [pc, #80]	; (4029a8 <prvCheckForValidListAndQueue+0x60>)
  402956:	4798      	blx	r3
  402958:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  40295a:	4d14      	ldr	r5, [pc, #80]	; (4029ac <prvCheckForValidListAndQueue+0x64>)
  40295c:	4628      	mov	r0, r5
  40295e:	4e14      	ldr	r6, [pc, #80]	; (4029b0 <prvCheckForValidListAndQueue+0x68>)
  402960:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402962:	4c14      	ldr	r4, [pc, #80]	; (4029b4 <prvCheckForValidListAndQueue+0x6c>)
  402964:	4620      	mov	r0, r4
  402966:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402968:	4b13      	ldr	r3, [pc, #76]	; (4029b8 <prvCheckForValidListAndQueue+0x70>)
  40296a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40296c:	4b13      	ldr	r3, [pc, #76]	; (4029bc <prvCheckForValidListAndQueue+0x74>)
  40296e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402970:	2200      	movs	r2, #0
  402972:	2110      	movs	r1, #16
  402974:	2005      	movs	r0, #5
  402976:	4b12      	ldr	r3, [pc, #72]	; (4029c0 <prvCheckForValidListAndQueue+0x78>)
  402978:	4798      	blx	r3
  40297a:	4b0a      	ldr	r3, [pc, #40]	; (4029a4 <prvCheckForValidListAndQueue+0x5c>)
  40297c:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  40297e:	b118      	cbz	r0, 402988 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402980:	4910      	ldr	r1, [pc, #64]	; (4029c4 <prvCheckForValidListAndQueue+0x7c>)
  402982:	4b11      	ldr	r3, [pc, #68]	; (4029c8 <prvCheckForValidListAndQueue+0x80>)
  402984:	4798      	blx	r3
  402986:	e7e5      	b.n	402954 <prvCheckForValidListAndQueue+0xc>
  402988:	f04f 0380 	mov.w	r3, #128	; 0x80
  40298c:	b672      	cpsid	i
  40298e:	f383 8811 	msr	BASEPRI, r3
  402992:	f3bf 8f6f 	isb	sy
  402996:	f3bf 8f4f 	dsb	sy
  40299a:	b662      	cpsie	i
  40299c:	e7fe      	b.n	40299c <prvCheckForValidListAndQueue+0x54>
  40299e:	bf00      	nop
  4029a0:	00401085 	.word	0x00401085
  4029a4:	2040c3d8 	.word	0x2040c3d8
  4029a8:	004010d1 	.word	0x004010d1
  4029ac:	2040c3ac 	.word	0x2040c3ac
  4029b0:	00400f39 	.word	0x00400f39
  4029b4:	2040c3c0 	.word	0x2040c3c0
  4029b8:	2040c3a4 	.word	0x2040c3a4
  4029bc:	2040c3a8 	.word	0x2040c3a8
  4029c0:	004015dd 	.word	0x004015dd
  4029c4:	00425a50 	.word	0x00425a50
  4029c8:	00401ca5 	.word	0x00401ca5

004029cc <xTimerCreateTimerTask>:
{
  4029cc:	b510      	push	{r4, lr}
  4029ce:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  4029d0:	4b0f      	ldr	r3, [pc, #60]	; (402a10 <xTimerCreateTimerTask+0x44>)
  4029d2:	4798      	blx	r3
	if( xTimerQueue != NULL )
  4029d4:	4b0f      	ldr	r3, [pc, #60]	; (402a14 <xTimerCreateTimerTask+0x48>)
  4029d6:	681b      	ldr	r3, [r3, #0]
  4029d8:	b173      	cbz	r3, 4029f8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4029da:	2300      	movs	r3, #0
  4029dc:	9303      	str	r3, [sp, #12]
  4029de:	9302      	str	r3, [sp, #8]
  4029e0:	9301      	str	r3, [sp, #4]
  4029e2:	2204      	movs	r2, #4
  4029e4:	9200      	str	r2, [sp, #0]
  4029e6:	f44f 7282 	mov.w	r2, #260	; 0x104
  4029ea:	490b      	ldr	r1, [pc, #44]	; (402a18 <xTimerCreateTimerTask+0x4c>)
  4029ec:	480b      	ldr	r0, [pc, #44]	; (402a1c <xTimerCreateTimerTask+0x50>)
  4029ee:	4c0c      	ldr	r4, [pc, #48]	; (402a20 <xTimerCreateTimerTask+0x54>)
  4029f0:	47a0      	blx	r4
	configASSERT( xReturn );
  4029f2:	b108      	cbz	r0, 4029f8 <xTimerCreateTimerTask+0x2c>
}
  4029f4:	b004      	add	sp, #16
  4029f6:	bd10      	pop	{r4, pc}
  4029f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029fc:	b672      	cpsid	i
  4029fe:	f383 8811 	msr	BASEPRI, r3
  402a02:	f3bf 8f6f 	isb	sy
  402a06:	f3bf 8f4f 	dsb	sy
  402a0a:	b662      	cpsie	i
  402a0c:	e7fe      	b.n	402a0c <xTimerCreateTimerTask+0x40>
  402a0e:	bf00      	nop
  402a10:	00402949 	.word	0x00402949
  402a14:	2040c3d8 	.word	0x2040c3d8
  402a18:	00425a58 	.word	0x00425a58
  402a1c:	00402ba5 	.word	0x00402ba5
  402a20:	00401db5 	.word	0x00401db5

00402a24 <xTimerCreate>:
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
  402a24:	b1c9      	cbz	r1, 402a5a <xTimerCreate+0x36>
{
  402a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a2a:	460f      	mov	r7, r1
  402a2c:	461d      	mov	r5, r3
  402a2e:	4616      	mov	r6, r2
  402a30:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
  402a32:	202c      	movs	r0, #44	; 0x2c
  402a34:	4b0e      	ldr	r3, [pc, #56]	; (402a70 <xTimerCreate+0x4c>)
  402a36:	4798      	blx	r3
		if( pxNewTimer != NULL )
  402a38:	4604      	mov	r4, r0
  402a3a:	b158      	cbz	r0, 402a54 <xTimerCreate+0x30>
			prvCheckForValidListAndQueue();
  402a3c:	4b0d      	ldr	r3, [pc, #52]	; (402a74 <xTimerCreate+0x50>)
  402a3e:	4798      	blx	r3
			pxNewTimer->pcTimerName = pcTimerName;
  402a40:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  402a44:	61a7      	str	r7, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  402a46:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  402a48:	6225      	str	r5, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  402a4a:	9b06      	ldr	r3, [sp, #24]
  402a4c:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  402a4e:	1d20      	adds	r0, r4, #4
  402a50:	4b09      	ldr	r3, [pc, #36]	; (402a78 <xTimerCreate+0x54>)
  402a52:	4798      	blx	r3
}
  402a54:	4620      	mov	r0, r4
  402a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402a5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a5e:	b672      	cpsid	i
  402a60:	f383 8811 	msr	BASEPRI, r3
  402a64:	f3bf 8f6f 	isb	sy
  402a68:	f3bf 8f4f 	dsb	sy
  402a6c:	b662      	cpsie	i
  402a6e:	e7fe      	b.n	402a6e <xTimerCreate+0x4a>
  402a70:	004012e1 	.word	0x004012e1
  402a74:	00402949 	.word	0x00402949
  402a78:	00400f4f 	.word	0x00400f4f

00402a7c <xTimerGenericCommand>:
	configASSERT( xTimer );
  402a7c:	b1d8      	cbz	r0, 402ab6 <xTimerGenericCommand+0x3a>
{
  402a7e:	b530      	push	{r4, r5, lr}
  402a80:	b085      	sub	sp, #20
  402a82:	4615      	mov	r5, r2
  402a84:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402a86:	4a15      	ldr	r2, [pc, #84]	; (402adc <xTimerGenericCommand+0x60>)
  402a88:	6810      	ldr	r0, [r2, #0]
  402a8a:	b320      	cbz	r0, 402ad6 <xTimerGenericCommand+0x5a>
  402a8c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402a8e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402a90:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402a92:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402a94:	2905      	cmp	r1, #5
  402a96:	dc19      	bgt.n	402acc <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402a98:	4b11      	ldr	r3, [pc, #68]	; (402ae0 <xTimerGenericCommand+0x64>)
  402a9a:	4798      	blx	r3
  402a9c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402a9e:	f04f 0300 	mov.w	r3, #0
  402aa2:	bf0c      	ite	eq
  402aa4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402aa6:	461a      	movne	r2, r3
  402aa8:	4669      	mov	r1, sp
  402aaa:	480c      	ldr	r0, [pc, #48]	; (402adc <xTimerGenericCommand+0x60>)
  402aac:	6800      	ldr	r0, [r0, #0]
  402aae:	4c0d      	ldr	r4, [pc, #52]	; (402ae4 <xTimerGenericCommand+0x68>)
  402ab0:	47a0      	blx	r4
}
  402ab2:	b005      	add	sp, #20
  402ab4:	bd30      	pop	{r4, r5, pc}
  402ab6:	f04f 0380 	mov.w	r3, #128	; 0x80
  402aba:	b672      	cpsid	i
  402abc:	f383 8811 	msr	BASEPRI, r3
  402ac0:	f3bf 8f6f 	isb	sy
  402ac4:	f3bf 8f4f 	dsb	sy
  402ac8:	b662      	cpsie	i
  402aca:	e7fe      	b.n	402aca <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402acc:	2300      	movs	r3, #0
  402ace:	4669      	mov	r1, sp
  402ad0:	4c05      	ldr	r4, [pc, #20]	; (402ae8 <xTimerGenericCommand+0x6c>)
  402ad2:	47a0      	blx	r4
  402ad4:	e7ed      	b.n	402ab2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402ad6:	2000      	movs	r0, #0
	return xReturn;
  402ad8:	e7eb      	b.n	402ab2 <xTimerGenericCommand+0x36>
  402ada:	bf00      	nop
  402adc:	2040c3d8 	.word	0x2040c3d8
  402ae0:	00402761 	.word	0x00402761
  402ae4:	00401659 	.word	0x00401659
  402ae8:	0040183d 	.word	0x0040183d

00402aec <prvSampleTimeNow>:
{
  402aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402af0:	b082      	sub	sp, #8
  402af2:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402af4:	4b24      	ldr	r3, [pc, #144]	; (402b88 <prvSampleTimeNow+0x9c>)
  402af6:	4798      	blx	r3
  402af8:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402afa:	4b24      	ldr	r3, [pc, #144]	; (402b8c <prvSampleTimeNow+0xa0>)
  402afc:	681b      	ldr	r3, [r3, #0]
  402afe:	4298      	cmp	r0, r3
  402b00:	d31b      	bcc.n	402b3a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402b02:	2300      	movs	r3, #0
  402b04:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402b08:	4b20      	ldr	r3, [pc, #128]	; (402b8c <prvSampleTimeNow+0xa0>)
  402b0a:	601f      	str	r7, [r3, #0]
}
  402b0c:	4638      	mov	r0, r7
  402b0e:	b002      	add	sp, #8
  402b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402b14:	2100      	movs	r1, #0
  402b16:	9100      	str	r1, [sp, #0]
  402b18:	460b      	mov	r3, r1
  402b1a:	4652      	mov	r2, sl
  402b1c:	4620      	mov	r0, r4
  402b1e:	4c1c      	ldr	r4, [pc, #112]	; (402b90 <prvSampleTimeNow+0xa4>)
  402b20:	47a0      	blx	r4
				configASSERT( xResult );
  402b22:	b960      	cbnz	r0, 402b3e <prvSampleTimeNow+0x52>
  402b24:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b28:	b672      	cpsid	i
  402b2a:	f383 8811 	msr	BASEPRI, r3
  402b2e:	f3bf 8f6f 	isb	sy
  402b32:	f3bf 8f4f 	dsb	sy
  402b36:	b662      	cpsie	i
  402b38:	e7fe      	b.n	402b38 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402b3a:	4d16      	ldr	r5, [pc, #88]	; (402b94 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b3c:	4e16      	ldr	r6, [pc, #88]	; (402b98 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402b3e:	682b      	ldr	r3, [r5, #0]
  402b40:	681a      	ldr	r2, [r3, #0]
  402b42:	b1c2      	cbz	r2, 402b76 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b44:	68db      	ldr	r3, [r3, #12]
  402b46:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b4a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b4c:	f104 0904 	add.w	r9, r4, #4
  402b50:	4648      	mov	r0, r9
  402b52:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402b56:	4620      	mov	r0, r4
  402b58:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b5a:	69e3      	ldr	r3, [r4, #28]
  402b5c:	2b01      	cmp	r3, #1
  402b5e:	d1ee      	bne.n	402b3e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402b60:	69a3      	ldr	r3, [r4, #24]
  402b62:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402b64:	459a      	cmp	sl, r3
  402b66:	d2d5      	bcs.n	402b14 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402b68:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402b6a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402b6c:	4649      	mov	r1, r9
  402b6e:	6828      	ldr	r0, [r5, #0]
  402b70:	4b0a      	ldr	r3, [pc, #40]	; (402b9c <prvSampleTimeNow+0xb0>)
  402b72:	4798      	blx	r3
  402b74:	e7e3      	b.n	402b3e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402b76:	4a0a      	ldr	r2, [pc, #40]	; (402ba0 <prvSampleTimeNow+0xb4>)
  402b78:	6810      	ldr	r0, [r2, #0]
  402b7a:	4906      	ldr	r1, [pc, #24]	; (402b94 <prvSampleTimeNow+0xa8>)
  402b7c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402b7e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402b80:	2301      	movs	r3, #1
  402b82:	f8c8 3000 	str.w	r3, [r8]
  402b86:	e7bf      	b.n	402b08 <prvSampleTimeNow+0x1c>
  402b88:	00402085 	.word	0x00402085
  402b8c:	2040c3d4 	.word	0x2040c3d4
  402b90:	00402a7d 	.word	0x00402a7d
  402b94:	2040c3a4 	.word	0x2040c3a4
  402b98:	00400fa1 	.word	0x00400fa1
  402b9c:	00400f6d 	.word	0x00400f6d
  402ba0:	2040c3a8 	.word	0x2040c3a8

00402ba4 <prvTimerTask>:
{
  402ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ba8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402baa:	4e75      	ldr	r6, [pc, #468]	; (402d80 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402bac:	4f75      	ldr	r7, [pc, #468]	; (402d84 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402bae:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402dac <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402bb2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402db0 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402bb6:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402bb8:	681a      	ldr	r2, [r3, #0]
  402bba:	2a00      	cmp	r2, #0
  402bbc:	f000 80ce 	beq.w	402d5c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402bc0:	68db      	ldr	r3, [r3, #12]
  402bc2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402bc4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402bc6:	a804      	add	r0, sp, #16
  402bc8:	4b6f      	ldr	r3, [pc, #444]	; (402d88 <prvTimerTask+0x1e4>)
  402bca:	4798      	blx	r3
  402bcc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402bce:	9b04      	ldr	r3, [sp, #16]
  402bd0:	2b00      	cmp	r3, #0
  402bd2:	d144      	bne.n	402c5e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402bd4:	42a0      	cmp	r0, r4
  402bd6:	d212      	bcs.n	402bfe <prvTimerTask+0x5a>
  402bd8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402bda:	1b61      	subs	r1, r4, r5
  402bdc:	4b6b      	ldr	r3, [pc, #428]	; (402d8c <prvTimerTask+0x1e8>)
  402bde:	6818      	ldr	r0, [r3, #0]
  402be0:	4b6b      	ldr	r3, [pc, #428]	; (402d90 <prvTimerTask+0x1ec>)
  402be2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402be4:	4b6b      	ldr	r3, [pc, #428]	; (402d94 <prvTimerTask+0x1f0>)
  402be6:	4798      	blx	r3
  402be8:	2800      	cmp	r0, #0
  402bea:	d13a      	bne.n	402c62 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402bec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402bf0:	f8c9 3000 	str.w	r3, [r9]
  402bf4:	f3bf 8f4f 	dsb	sy
  402bf8:	f3bf 8f6f 	isb	sy
  402bfc:	e031      	b.n	402c62 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402bfe:	4b65      	ldr	r3, [pc, #404]	; (402d94 <prvTimerTask+0x1f0>)
  402c00:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402c02:	6833      	ldr	r3, [r6, #0]
  402c04:	68db      	ldr	r3, [r3, #12]
  402c06:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402c0a:	f10a 0004 	add.w	r0, sl, #4
  402c0e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402c10:	f8da 301c 	ldr.w	r3, [sl, #28]
  402c14:	2b01      	cmp	r3, #1
  402c16:	d004      	beq.n	402c22 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402c18:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402c1c:	4650      	mov	r0, sl
  402c1e:	4798      	blx	r3
  402c20:	e01f      	b.n	402c62 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402c22:	f8da 1018 	ldr.w	r1, [sl, #24]
  402c26:	4623      	mov	r3, r4
  402c28:	462a      	mov	r2, r5
  402c2a:	4421      	add	r1, r4
  402c2c:	4650      	mov	r0, sl
  402c2e:	4d5a      	ldr	r5, [pc, #360]	; (402d98 <prvTimerTask+0x1f4>)
  402c30:	47a8      	blx	r5
  402c32:	2801      	cmp	r0, #1
  402c34:	d1f0      	bne.n	402c18 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402c36:	2100      	movs	r1, #0
  402c38:	9100      	str	r1, [sp, #0]
  402c3a:	460b      	mov	r3, r1
  402c3c:	4622      	mov	r2, r4
  402c3e:	4650      	mov	r0, sl
  402c40:	4c56      	ldr	r4, [pc, #344]	; (402d9c <prvTimerTask+0x1f8>)
  402c42:	47a0      	blx	r4
			configASSERT( xResult );
  402c44:	2800      	cmp	r0, #0
  402c46:	d1e7      	bne.n	402c18 <prvTimerTask+0x74>
  402c48:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c4c:	b672      	cpsid	i
  402c4e:	f383 8811 	msr	BASEPRI, r3
  402c52:	f3bf 8f6f 	isb	sy
  402c56:	f3bf 8f4f 	dsb	sy
  402c5a:	b662      	cpsie	i
  402c5c:	e7fe      	b.n	402c5c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402c5e:	4b4d      	ldr	r3, [pc, #308]	; (402d94 <prvTimerTask+0x1f0>)
  402c60:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402c62:	4d4a      	ldr	r5, [pc, #296]	; (402d8c <prvTimerTask+0x1e8>)
  402c64:	4c4e      	ldr	r4, [pc, #312]	; (402da0 <prvTimerTask+0x1fc>)
  402c66:	e006      	b.n	402c76 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402c68:	9907      	ldr	r1, [sp, #28]
  402c6a:	9806      	ldr	r0, [sp, #24]
  402c6c:	9b05      	ldr	r3, [sp, #20]
  402c6e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402c70:	9b04      	ldr	r3, [sp, #16]
  402c72:	2b00      	cmp	r3, #0
  402c74:	da09      	bge.n	402c8a <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402c76:	2300      	movs	r3, #0
  402c78:	461a      	mov	r2, r3
  402c7a:	a904      	add	r1, sp, #16
  402c7c:	6828      	ldr	r0, [r5, #0]
  402c7e:	47a0      	blx	r4
  402c80:	2800      	cmp	r0, #0
  402c82:	d098      	beq.n	402bb6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402c84:	9b04      	ldr	r3, [sp, #16]
  402c86:	2b00      	cmp	r3, #0
  402c88:	dbee      	blt.n	402c68 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402c8a:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402c8e:	f8da 3014 	ldr.w	r3, [sl, #20]
  402c92:	b113      	cbz	r3, 402c9a <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402c94:	f10a 0004 	add.w	r0, sl, #4
  402c98:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402c9a:	a803      	add	r0, sp, #12
  402c9c:	4b3a      	ldr	r3, [pc, #232]	; (402d88 <prvTimerTask+0x1e4>)
  402c9e:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402ca0:	9b04      	ldr	r3, [sp, #16]
  402ca2:	2b09      	cmp	r3, #9
  402ca4:	d8e7      	bhi.n	402c76 <prvTimerTask+0xd2>
  402ca6:	a201      	add	r2, pc, #4	; (adr r2, 402cac <prvTimerTask+0x108>)
  402ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402cac:	00402cd5 	.word	0x00402cd5
  402cb0:	00402cd5 	.word	0x00402cd5
  402cb4:	00402cd5 	.word	0x00402cd5
  402cb8:	00402c77 	.word	0x00402c77
  402cbc:	00402d29 	.word	0x00402d29
  402cc0:	00402d55 	.word	0x00402d55
  402cc4:	00402cd5 	.word	0x00402cd5
  402cc8:	00402cd5 	.word	0x00402cd5
  402ccc:	00402c77 	.word	0x00402c77
  402cd0:	00402d29 	.word	0x00402d29
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402cd4:	9c05      	ldr	r4, [sp, #20]
  402cd6:	f8da 1018 	ldr.w	r1, [sl, #24]
  402cda:	4623      	mov	r3, r4
  402cdc:	4602      	mov	r2, r0
  402cde:	4421      	add	r1, r4
  402ce0:	4650      	mov	r0, sl
  402ce2:	4c2d      	ldr	r4, [pc, #180]	; (402d98 <prvTimerTask+0x1f4>)
  402ce4:	47a0      	blx	r4
  402ce6:	2801      	cmp	r0, #1
  402ce8:	d1bc      	bne.n	402c64 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402cea:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402cee:	4650      	mov	r0, sl
  402cf0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402cf2:	f8da 301c 	ldr.w	r3, [sl, #28]
  402cf6:	2b01      	cmp	r3, #1
  402cf8:	d1b4      	bne.n	402c64 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402cfa:	f8da 2018 	ldr.w	r2, [sl, #24]
  402cfe:	2100      	movs	r1, #0
  402d00:	9100      	str	r1, [sp, #0]
  402d02:	460b      	mov	r3, r1
  402d04:	9805      	ldr	r0, [sp, #20]
  402d06:	4402      	add	r2, r0
  402d08:	4650      	mov	r0, sl
  402d0a:	4c24      	ldr	r4, [pc, #144]	; (402d9c <prvTimerTask+0x1f8>)
  402d0c:	47a0      	blx	r4
							configASSERT( xResult );
  402d0e:	2800      	cmp	r0, #0
  402d10:	d1a8      	bne.n	402c64 <prvTimerTask+0xc0>
  402d12:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d16:	b672      	cpsid	i
  402d18:	f383 8811 	msr	BASEPRI, r3
  402d1c:	f3bf 8f6f 	isb	sy
  402d20:	f3bf 8f4f 	dsb	sy
  402d24:	b662      	cpsie	i
  402d26:	e7fe      	b.n	402d26 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402d28:	9905      	ldr	r1, [sp, #20]
  402d2a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402d2e:	b131      	cbz	r1, 402d3e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402d30:	4603      	mov	r3, r0
  402d32:	4602      	mov	r2, r0
  402d34:	4401      	add	r1, r0
  402d36:	4650      	mov	r0, sl
  402d38:	4c17      	ldr	r4, [pc, #92]	; (402d98 <prvTimerTask+0x1f4>)
  402d3a:	47a0      	blx	r4
  402d3c:	e792      	b.n	402c64 <prvTimerTask+0xc0>
  402d3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d42:	b672      	cpsid	i
  402d44:	f383 8811 	msr	BASEPRI, r3
  402d48:	f3bf 8f6f 	isb	sy
  402d4c:	f3bf 8f4f 	dsb	sy
  402d50:	b662      	cpsie	i
  402d52:	e7fe      	b.n	402d52 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402d54:	4650      	mov	r0, sl
  402d56:	4b13      	ldr	r3, [pc, #76]	; (402da4 <prvTimerTask+0x200>)
  402d58:	4798      	blx	r3
  402d5a:	e783      	b.n	402c64 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402d5c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402d5e:	a804      	add	r0, sp, #16
  402d60:	4b09      	ldr	r3, [pc, #36]	; (402d88 <prvTimerTask+0x1e4>)
  402d62:	4798      	blx	r3
  402d64:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402d66:	9b04      	ldr	r3, [sp, #16]
  402d68:	2b00      	cmp	r3, #0
  402d6a:	f47f af78 	bne.w	402c5e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402d6e:	4b0e      	ldr	r3, [pc, #56]	; (402da8 <prvTimerTask+0x204>)
  402d70:	681b      	ldr	r3, [r3, #0]
  402d72:	681a      	ldr	r2, [r3, #0]
  402d74:	fab2 f282 	clz	r2, r2
  402d78:	0952      	lsrs	r2, r2, #5
  402d7a:	2400      	movs	r4, #0
  402d7c:	e72d      	b.n	402bda <prvTimerTask+0x36>
  402d7e:	bf00      	nop
  402d80:	2040c3a4 	.word	0x2040c3a4
  402d84:	00402075 	.word	0x00402075
  402d88:	00402aed 	.word	0x00402aed
  402d8c:	2040c3d8 	.word	0x2040c3d8
  402d90:	00401cd9 	.word	0x00401cd9
  402d94:	004021dd 	.word	0x004021dd
  402d98:	004028fd 	.word	0x004028fd
  402d9c:	00402a7d 	.word	0x00402a7d
  402da0:	00401a1d 	.word	0x00401a1d
  402da4:	00401351 	.word	0x00401351
  402da8:	2040c3a8 	.word	0x2040c3a8
  402dac:	e000ed04 	.word	0xe000ed04
  402db0:	00400fa1 	.word	0x00400fa1

00402db4 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
  402db4:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  402db6:	4603      	mov	r3, r0
  402db8:	b108      	cbz	r0, 402dbe <lv_disp_get_scr_act+0xa>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
  402dba:	6c58      	ldr	r0, [r3, #68]	; 0x44
  402dbc:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  402dbe:	4b03      	ldr	r3, [pc, #12]	; (402dcc <lv_disp_get_scr_act+0x18>)
  402dc0:	4798      	blx	r3
    if(!disp) {
  402dc2:	4603      	mov	r3, r0
  402dc4:	2800      	cmp	r0, #0
  402dc6:	d1f8      	bne.n	402dba <lv_disp_get_scr_act+0x6>
        return NULL;
  402dc8:	2000      	movs	r0, #0
}
  402dca:	bd08      	pop	{r3, pc}
  402dcc:	004140a1 	.word	0x004140a1

00402dd0 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
  402dd0:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  402dd2:	4603      	mov	r3, r0
  402dd4:	b108      	cbz	r0, 402dda <lv_disp_get_scr_prev+0xa>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
  402dd6:	6c98      	ldr	r0, [r3, #72]	; 0x48
  402dd8:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  402dda:	4b03      	ldr	r3, [pc, #12]	; (402de8 <lv_disp_get_scr_prev+0x18>)
  402ddc:	4798      	blx	r3
    if(!disp) {
  402dde:	4603      	mov	r3, r0
  402de0:	2800      	cmp	r0, #0
  402de2:	d1f8      	bne.n	402dd6 <lv_disp_get_scr_prev+0x6>
        return NULL;
  402de4:	2000      	movs	r0, #0
}
  402de6:	bd08      	pop	{r3, pc}
  402de8:	004140a1 	.word	0x004140a1

00402dec <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
  402dec:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  402dee:	4603      	mov	r3, r0
  402df0:	b108      	cbz	r0, 402df6 <lv_disp_get_layer_top+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
  402df2:	6d18      	ldr	r0, [r3, #80]	; 0x50
  402df4:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  402df6:	4b03      	ldr	r3, [pc, #12]	; (402e04 <lv_disp_get_layer_top+0x18>)
  402df8:	4798      	blx	r3
    if(!disp) {
  402dfa:	4603      	mov	r3, r0
  402dfc:	2800      	cmp	r0, #0
  402dfe:	d1f8      	bne.n	402df2 <lv_disp_get_layer_top+0x6>
        return NULL;
  402e00:	2000      	movs	r0, #0
}
  402e02:	bd08      	pop	{r3, pc}
  402e04:	004140a1 	.word	0x004140a1

00402e08 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
  402e08:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  402e0a:	4603      	mov	r3, r0
  402e0c:	b108      	cbz	r0, 402e12 <lv_disp_get_layer_sys+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
  402e0e:	6d58      	ldr	r0, [r3, #84]	; 0x54
  402e10:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  402e12:	4b03      	ldr	r3, [pc, #12]	; (402e20 <lv_disp_get_layer_sys+0x18>)
  402e14:	4798      	blx	r3
    if(!disp) {
  402e16:	4603      	mov	r3, r0
  402e18:	2800      	cmp	r0, #0
  402e1a:	d1f8      	bne.n	402e0e <lv_disp_get_layer_sys+0x6>
        return NULL;
  402e1c:	2000      	movs	r0, #0
}
  402e1e:	bd08      	pop	{r3, pc}
  402e20:	004140a1 	.word	0x004140a1

00402e24 <obj_to_foreground>:
static void obj_to_foreground(lv_obj_t * obj)
{
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
    while(i != NULL) {
  402e24:	b1a0      	cbz	r0, 402e50 <obj_to_foreground+0x2c>
{
  402e26:	b538      	push	{r3, r4, r5, lr}
  402e28:	4603      	mov	r3, r0
    while(i != NULL) {
  402e2a:	2400      	movs	r4, #0
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
  402e2c:	4d09      	ldr	r5, [pc, #36]	; (402e54 <obj_to_foreground+0x30>)
        if(i->top != 0) last_top = i;
  402e2e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
  402e32:	f002 0220 	and.w	r2, r2, #32
  402e36:	2a00      	cmp	r2, #0
  402e38:	bf18      	it	ne
  402e3a:	461c      	movne	r4, r3
        i = lv_obj_get_parent(i);
  402e3c:	4618      	mov	r0, r3
  402e3e:	47a8      	blx	r5
    while(i != NULL) {
  402e40:	4603      	mov	r3, r0
  402e42:	2800      	cmp	r0, #0
  402e44:	d1f3      	bne.n	402e2e <obj_to_foreground+0xa>
    }

    if(last_top != NULL) {
  402e46:	b114      	cbz	r4, 402e4e <obj_to_foreground+0x2a>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
  402e48:	4620      	mov	r0, r4
  402e4a:	4b03      	ldr	r3, [pc, #12]	; (402e58 <obj_to_foreground+0x34>)
  402e4c:	4798      	blx	r3
  402e4e:	bd38      	pop	{r3, r4, r5, pc}
  402e50:	4770      	bx	lr
  402e52:	bf00      	nop
  402e54:	00404fa5 	.word	0x00404fa5
  402e58:	004055dd 	.word	0x004055dd

00402e5c <focus_next_core>:
{
  402e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(group->frozen) return;
  402e60:	7d03      	ldrb	r3, [r0, #20]
  402e62:	f013 0f01 	tst.w	r3, #1
  402e66:	d131      	bne.n	402ecc <focus_next_core+0x70>
  402e68:	4617      	mov	r7, r2
  402e6a:	468b      	mov	fp, r1
  402e6c:	4606      	mov	r6, r0
    lv_obj_t ** obj_next     = group->obj_focus;
  402e6e:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
  402e70:	f04f 0901 	mov.w	r9, #1
    lv_obj_t ** obj_sentinel = NULL;
  402e74:	2500      	movs	r5, #0
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
  402e76:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 402f4c <focus_next_core+0xf0>
        if(!lv_obj_get_hidden(*obj_next)) break;
  402e7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 402f50 <focus_next_core+0xf4>
        if(obj_next == NULL) {
  402e7e:	b33c      	cbz	r4, 402ed0 <focus_next_core+0x74>
  402e80:	2d00      	cmp	r5, #0
  402e82:	bf08      	it	eq
  402e84:	4625      	moveq	r5, r4
            obj_next = move(&group->obj_ll, obj_next);
  402e86:	4621      	mov	r1, r4
  402e88:	4630      	mov	r0, r6
  402e8a:	47b8      	blx	r7
  402e8c:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
  402e8e:	42a8      	cmp	r0, r5
  402e90:	d01c      	beq.n	402ecc <focus_next_core+0x70>
        if(obj_next == NULL) continue;
  402e92:	2c00      	cmp	r4, #0
  402e94:	d0f3      	beq.n	402e7e <focus_next_core+0x22>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
  402e96:	2100      	movs	r1, #0
  402e98:	6820      	ldr	r0, [r4, #0]
  402e9a:	47c0      	blx	r8
  402e9c:	f010 0f20 	tst.w	r0, #32
  402ea0:	d1ed      	bne.n	402e7e <focus_next_core+0x22>
        if(!lv_obj_get_hidden(*obj_next)) break;
  402ea2:	6820      	ldr	r0, [r4, #0]
  402ea4:	47d0      	blx	sl
  402ea6:	2800      	cmp	r0, #0
  402ea8:	d1e9      	bne.n	402e7e <focus_next_core+0x22>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
  402eaa:	68f3      	ldr	r3, [r6, #12]
  402eac:	42a3      	cmp	r3, r4
  402eae:	d00d      	beq.n	402ecc <focus_next_core+0x70>
    if(group->obj_focus) {
  402eb0:	b313      	cbz	r3, 402ef8 <focus_next_core+0x9c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  402eb2:	6818      	ldr	r0, [r3, #0]
  402eb4:	69c3      	ldr	r3, [r0, #28]
  402eb6:	2200      	movs	r2, #0
  402eb8:	2117      	movs	r1, #23
  402eba:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  402ebc:	68f3      	ldr	r3, [r6, #12]
  402ebe:	2200      	movs	r2, #0
  402ec0:	210e      	movs	r1, #14
  402ec2:	6818      	ldr	r0, [r3, #0]
  402ec4:	4b1e      	ldr	r3, [pc, #120]	; (402f40 <focus_next_core+0xe4>)
  402ec6:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  402ec8:	2801      	cmp	r0, #1
  402eca:	d011      	beq.n	402ef0 <focus_next_core+0x94>
  402ecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(group->wrap || obj_sentinel == NULL) {
  402ed0:	7d33      	ldrb	r3, [r6, #20]
  402ed2:	f013 0f10 	tst.w	r3, #16
  402ed6:	d101      	bne.n	402edc <focus_next_core+0x80>
  402ed8:	2d00      	cmp	r5, #0
  402eda:	d1f7      	bne.n	402ecc <focus_next_core+0x70>
                if(!can_begin) return;
  402edc:	f1b9 0f00 	cmp.w	r9, #0
  402ee0:	d0f4      	beq.n	402ecc <focus_next_core+0x70>
                obj_next  = begin(&group->obj_ll);
  402ee2:	4630      	mov	r0, r6
  402ee4:	47d8      	blx	fp
  402ee6:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
  402ee8:	b31d      	cbz	r5, 402f32 <focus_next_core+0xd6>
                can_begin = false;
  402eea:	f04f 0900 	mov.w	r9, #0
  402eee:	e7d0      	b.n	402e92 <focus_next_core+0x36>
        lv_obj_invalidate(*group->obj_focus);
  402ef0:	68f3      	ldr	r3, [r6, #12]
  402ef2:	6818      	ldr	r0, [r3, #0]
  402ef4:	4b13      	ldr	r3, [pc, #76]	; (402f44 <focus_next_core+0xe8>)
  402ef6:	4798      	blx	r3
    group->obj_focus = obj_next;
  402ef8:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
  402efa:	6820      	ldr	r0, [r4, #0]
  402efc:	69c3      	ldr	r3, [r0, #28]
  402efe:	2200      	movs	r2, #0
  402f00:	2116      	movs	r1, #22
  402f02:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  402f04:	68f3      	ldr	r3, [r6, #12]
  402f06:	2200      	movs	r2, #0
  402f08:	210d      	movs	r1, #13
  402f0a:	6818      	ldr	r0, [r3, #0]
  402f0c:	4b0c      	ldr	r3, [pc, #48]	; (402f40 <focus_next_core+0xe4>)
  402f0e:	4798      	blx	r3
    if(res != LV_RES_OK) return;
  402f10:	2801      	cmp	r0, #1
  402f12:	d1db      	bne.n	402ecc <focus_next_core+0x70>
    obj_to_foreground(*group->obj_focus);
  402f14:	68f3      	ldr	r3, [r6, #12]
  402f16:	6818      	ldr	r0, [r3, #0]
  402f18:	4b0b      	ldr	r3, [pc, #44]	; (402f48 <focus_next_core+0xec>)
  402f1a:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
  402f1c:	68f3      	ldr	r3, [r6, #12]
  402f1e:	6818      	ldr	r0, [r3, #0]
  402f20:	4b08      	ldr	r3, [pc, #32]	; (402f44 <focus_next_core+0xe8>)
  402f22:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
  402f24:	6933      	ldr	r3, [r6, #16]
  402f26:	2b00      	cmp	r3, #0
  402f28:	d0d0      	beq.n	402ecc <focus_next_core+0x70>
  402f2a:	4630      	mov	r0, r6
  402f2c:	4798      	blx	r3
  402f2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(obj_sentinel == NULL) return; /*Group is empty*/
  402f32:	2800      	cmp	r0, #0
  402f34:	d0ca      	beq.n	402ecc <focus_next_core+0x70>
                obj_next  = begin(&group->obj_ll);
  402f36:	4605      	mov	r5, r0
                can_begin = false;
  402f38:	f04f 0900 	mov.w	r9, #0
  402f3c:	e7ab      	b.n	402e96 <focus_next_core+0x3a>
  402f3e:	bf00      	nop
  402f40:	00404e95 	.word	0x00404e95
  402f44:	00405565 	.word	0x00405565
  402f48:	00402e25 	.word	0x00402e25
  402f4c:	00406379 	.word	0x00406379
  402f50:	004053d5 	.word	0x004053d5

00402f54 <_lv_group_init>:
{
  402f54:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
  402f56:	2118      	movs	r1, #24
  402f58:	4801      	ldr	r0, [pc, #4]	; (402f60 <_lv_group_init+0xc>)
  402f5a:	4b02      	ldr	r3, [pc, #8]	; (402f64 <_lv_group_init+0x10>)
  402f5c:	4798      	blx	r3
  402f5e:	bd08      	pop	{r3, pc}
  402f60:	2043a2b4 	.word	0x2043a2b4
  402f64:	00415343 	.word	0x00415343

00402f68 <lv_group_focus_next>:
{
  402f68:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
  402f6a:	4a02      	ldr	r2, [pc, #8]	; (402f74 <lv_group_focus_next+0xc>)
  402f6c:	4902      	ldr	r1, [pc, #8]	; (402f78 <lv_group_focus_next+0x10>)
  402f6e:	4b03      	ldr	r3, [pc, #12]	; (402f7c <lv_group_focus_next+0x14>)
  402f70:	4798      	blx	r3
  402f72:	bd08      	pop	{r3, pc}
  402f74:	00415401 	.word	0x00415401
  402f78:	004153ed 	.word	0x004153ed
  402f7c:	00402e5d 	.word	0x00402e5d

00402f80 <lv_group_focus_prev>:
{
  402f80:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
  402f82:	4a02      	ldr	r2, [pc, #8]	; (402f8c <lv_group_focus_prev+0xc>)
  402f84:	4902      	ldr	r1, [pc, #8]	; (402f90 <lv_group_focus_prev+0x10>)
  402f86:	4b03      	ldr	r3, [pc, #12]	; (402f94 <lv_group_focus_prev+0x14>)
  402f88:	4798      	blx	r3
  402f8a:	bd08      	pop	{r3, pc}
  402f8c:	0041540f 	.word	0x0041540f
  402f90:	004153f7 	.word	0x004153f7
  402f94:	00402e5d 	.word	0x00402e5d

00402f98 <lv_group_refocus>:
{
  402f98:	b538      	push	{r3, r4, r5, lr}
  402f9a:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
  402f9c:	7d03      	ldrb	r3, [r0, #20]
  402f9e:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
  402fa2:	f043 0310 	orr.w	r3, r3, #16
  402fa6:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
  402fa8:	f013 0f08 	tst.w	r3, #8
        lv_group_focus_next(g);
  402fac:	bf0c      	ite	eq
  402fae:	4b04      	ldreq	r3, [pc, #16]	; (402fc0 <lv_group_refocus+0x28>)
        lv_group_focus_prev(g);
  402fb0:	4b04      	ldrne	r3, [pc, #16]	; (402fc4 <lv_group_refocus+0x2c>)
  402fb2:	4798      	blx	r3
    g->wrap = temp_wrap;
  402fb4:	7d23      	ldrb	r3, [r4, #20]
  402fb6:	f365 1304 	bfi	r3, r5, #4, #1
  402fba:	7523      	strb	r3, [r4, #20]
  402fbc:	bd38      	pop	{r3, r4, r5, pc}
  402fbe:	bf00      	nop
  402fc0:	00402f69 	.word	0x00402f69
  402fc4:	00402f81 	.word	0x00402f81

00402fc8 <lv_group_add_obj>:
    if(group == NULL) return;
  402fc8:	2800      	cmp	r0, #0
  402fca:	d036      	beq.n	40303a <lv_group_add_obj+0x72>
{
  402fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402fce:	4605      	mov	r5, r0
  402fd0:	460c      	mov	r4, r1
    _LV_LL_READ(group->obj_ll, obj_i) {
  402fd2:	4607      	mov	r7, r0
  402fd4:	4b19      	ldr	r3, [pc, #100]	; (40303c <lv_group_add_obj+0x74>)
  402fd6:	4798      	blx	r3
  402fd8:	4601      	mov	r1, r0
  402fda:	b158      	cbz	r0, 402ff4 <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
  402fdc:	6803      	ldr	r3, [r0, #0]
  402fde:	429c      	cmp	r4, r3
  402fe0:	d007      	beq.n	402ff2 <lv_group_add_obj+0x2a>
    _LV_LL_READ(group->obj_ll, obj_i) {
  402fe2:	4e17      	ldr	r6, [pc, #92]	; (403040 <lv_group_add_obj+0x78>)
  402fe4:	4638      	mov	r0, r7
  402fe6:	47b0      	blx	r6
  402fe8:	4601      	mov	r1, r0
  402fea:	b118      	cbz	r0, 402ff4 <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
  402fec:	680b      	ldr	r3, [r1, #0]
  402fee:	42a3      	cmp	r3, r4
  402ff0:	d1f8      	bne.n	402fe4 <lv_group_add_obj+0x1c>
  402ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(obj->group_p) {
  402ff4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402ff6:	b133      	cbz	r3, 403006 <lv_group_add_obj+0x3e>
        if(lv_obj_is_focused(obj)) {
  402ff8:	4620      	mov	r0, r4
  402ffa:	4b12      	ldr	r3, [pc, #72]	; (403044 <lv_group_add_obj+0x7c>)
  402ffc:	4798      	blx	r3
  402ffe:	b110      	cbz	r0, 403006 <lv_group_add_obj+0x3e>
            lv_group_refocus(obj->group_p);
  403000:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  403002:	4b11      	ldr	r3, [pc, #68]	; (403048 <lv_group_add_obj+0x80>)
  403004:	4798      	blx	r3
    obj->group_p     = group;
  403006:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
  403008:	4628      	mov	r0, r5
  40300a:	4b10      	ldr	r3, [pc, #64]	; (40304c <lv_group_add_obj+0x84>)
  40300c:	4798      	blx	r3
  40300e:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
  403010:	4b0f      	ldr	r3, [pc, #60]	; (403050 <lv_group_add_obj+0x88>)
  403012:	4798      	blx	r3
  403014:	b158      	cbz	r0, 40302e <lv_group_add_obj+0x66>
    if(next == NULL) return;
  403016:	2e00      	cmp	r6, #0
  403018:	d0eb      	beq.n	402ff2 <lv_group_add_obj+0x2a>
    *next = obj;
  40301a:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
  40301c:	4628      	mov	r0, r5
  40301e:	4b07      	ldr	r3, [pc, #28]	; (40303c <lv_group_add_obj+0x74>)
  403020:	4798      	blx	r3
  403022:	4286      	cmp	r6, r0
  403024:	d1e5      	bne.n	402ff2 <lv_group_add_obj+0x2a>
        lv_group_refocus(group);
  403026:	4628      	mov	r0, r5
  403028:	4b07      	ldr	r3, [pc, #28]	; (403048 <lv_group_add_obj+0x80>)
  40302a:	4798      	blx	r3
  40302c:	e7e1      	b.n	402ff2 <lv_group_add_obj+0x2a>
    LV_ASSERT_MEM(next);
  40302e:	4632      	mov	r2, r6
  403030:	2300      	movs	r3, #0
  403032:	4808      	ldr	r0, [pc, #32]	; (403054 <lv_group_add_obj+0x8c>)
  403034:	4908      	ldr	r1, [pc, #32]	; (403058 <lv_group_add_obj+0x90>)
  403036:	4788      	blx	r1
  403038:	e7fe      	b.n	403038 <lv_group_add_obj+0x70>
  40303a:	4770      	bx	lr
  40303c:	004153ed 	.word	0x004153ed
  403040:	00415401 	.word	0x00415401
  403044:	00407471 	.word	0x00407471
  403048:	00402f99 	.word	0x00402f99
  40304c:	004153a1 	.word	0x004153a1
  403050:	004150ef 	.word	0x004150ef
  403054:	00425a60 	.word	0x00425a60
  403058:	004150f9 	.word	0x004150f9

0040305c <lv_group_remove_obj>:
{
  40305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_group_t * g = obj->group_p;
  403060:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
    if(g == NULL) return;
  403064:	f1b8 0f00 	cmp.w	r8, #0
  403068:	d04f      	beq.n	40310a <lv_group_remove_obj+0xae>
  40306a:	4605      	mov	r5, r0
    if(*g->obj_focus == obj) {
  40306c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  403070:	681b      	ldr	r3, [r3, #0]
  403072:	4298      	cmp	r0, r3
  403074:	d01e      	beq.n	4030b4 <lv_group_remove_obj+0x58>
    _LV_LL_READ(g->obj_ll, i) {
  403076:	4646      	mov	r6, r8
  403078:	4640      	mov	r0, r8
  40307a:	4b25      	ldr	r3, [pc, #148]	; (403110 <lv_group_remove_obj+0xb4>)
  40307c:	4798      	blx	r3
  40307e:	4604      	mov	r4, r0
  403080:	2800      	cmp	r0, #0
  403082:	d042      	beq.n	40310a <lv_group_remove_obj+0xae>
        if(*i == obj) {
  403084:	6803      	ldr	r3, [r0, #0]
  403086:	429d      	cmp	r5, r3
  403088:	d009      	beq.n	40309e <lv_group_remove_obj+0x42>
    _LV_LL_READ(g->obj_ll, i) {
  40308a:	4f22      	ldr	r7, [pc, #136]	; (403114 <lv_group_remove_obj+0xb8>)
  40308c:	4621      	mov	r1, r4
  40308e:	4630      	mov	r0, r6
  403090:	47b8      	blx	r7
  403092:	4604      	mov	r4, r0
  403094:	2800      	cmp	r0, #0
  403096:	d038      	beq.n	40310a <lv_group_remove_obj+0xae>
        if(*i == obj) {
  403098:	6823      	ldr	r3, [r4, #0]
  40309a:	429d      	cmp	r5, r3
  40309c:	d1f6      	bne.n	40308c <lv_group_remove_obj+0x30>
            _lv_ll_remove(&g->obj_ll, i);
  40309e:	4621      	mov	r1, r4
  4030a0:	4640      	mov	r0, r8
  4030a2:	4b1d      	ldr	r3, [pc, #116]	; (403118 <lv_group_remove_obj+0xbc>)
  4030a4:	4798      	blx	r3
            lv_mem_free(i);
  4030a6:	4620      	mov	r0, r4
  4030a8:	4b1c      	ldr	r3, [pc, #112]	; (40311c <lv_group_remove_obj+0xc0>)
  4030aa:	4798      	blx	r3
            obj->group_p = NULL;
  4030ac:	2300      	movs	r3, #0
  4030ae:	63ab      	str	r3, [r5, #56]	; 0x38
            break;
  4030b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(g->frozen) g->frozen = 0;
  4030b4:	f898 3014 	ldrb.w	r3, [r8, #20]
  4030b8:	f013 0f01 	tst.w	r3, #1
  4030bc:	d005      	beq.n	4030ca <lv_group_remove_obj+0x6e>
  4030be:	f898 3014 	ldrb.w	r3, [r8, #20]
  4030c2:	f36f 0300 	bfc	r3, #0, #1
  4030c6:	f888 3014 	strb.w	r3, [r8, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  4030ca:	4640      	mov	r0, r8
  4030cc:	4b10      	ldr	r3, [pc, #64]	; (403110 <lv_group_remove_obj+0xb4>)
  4030ce:	4798      	blx	r3
  4030d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4030d4:	4283      	cmp	r3, r0
  4030d6:	d00b      	beq.n	4030f0 <lv_group_remove_obj+0x94>
            lv_group_refocus(g);
  4030d8:	4640      	mov	r0, r8
  4030da:	4b11      	ldr	r3, [pc, #68]	; (403120 <lv_group_remove_obj+0xc4>)
  4030dc:	4798      	blx	r3
    if(*g->obj_focus == obj) {
  4030de:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4030e2:	681b      	ldr	r3, [r3, #0]
  4030e4:	429d      	cmp	r5, r3
  4030e6:	d1c6      	bne.n	403076 <lv_group_remove_obj+0x1a>
        g->obj_focus = NULL;
  4030e8:	2300      	movs	r3, #0
  4030ea:	f8c8 300c 	str.w	r3, [r8, #12]
  4030ee:	e7c2      	b.n	403076 <lv_group_remove_obj+0x1a>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  4030f0:	4640      	mov	r0, r8
  4030f2:	4b0c      	ldr	r3, [pc, #48]	; (403124 <lv_group_remove_obj+0xc8>)
  4030f4:	4798      	blx	r3
  4030f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4030fa:	4298      	cmp	r0, r3
  4030fc:	d1ec      	bne.n	4030d8 <lv_group_remove_obj+0x7c>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  4030fe:	6800      	ldr	r0, [r0, #0]
  403100:	69c3      	ldr	r3, [r0, #28]
  403102:	2200      	movs	r2, #0
  403104:	2117      	movs	r1, #23
  403106:	4798      	blx	r3
  403108:	e7e9      	b.n	4030de <lv_group_remove_obj+0x82>
  40310a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40310e:	bf00      	nop
  403110:	004153ed 	.word	0x004153ed
  403114:	00415401 	.word	0x00415401
  403118:	004154a5 	.word	0x004154a5
  40311c:	004158b9 	.word	0x004158b9
  403120:	00402f99 	.word	0x00402f99
  403124:	004153f7 	.word	0x004153f7

00403128 <lv_group_get_focused>:
    if(!group) return NULL;
  403128:	b118      	cbz	r0, 403132 <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
  40312a:	68c3      	ldr	r3, [r0, #12]
  40312c:	b11b      	cbz	r3, 403136 <lv_group_get_focused+0xe>
    return *group->obj_focus;
  40312e:	6818      	ldr	r0, [r3, #0]
  403130:	4770      	bx	lr
    if(!group) return NULL;
  403132:	2000      	movs	r0, #0
  403134:	4770      	bx	lr
    if(group->obj_focus == NULL) return NULL;
  403136:	2000      	movs	r0, #0
}
  403138:	4770      	bx	lr
	...

0040313c <lv_group_send_data>:
{
  40313c:	b510      	push	{r4, lr}
  40313e:	b082      	sub	sp, #8
  403140:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
  403142:	4b0a      	ldr	r3, [pc, #40]	; (40316c <lv_group_send_data+0x30>)
  403144:	4798      	blx	r3
    if(act == NULL) return LV_RES_OK;
  403146:	b170      	cbz	r0, 403166 <lv_group_send_data+0x2a>
  403148:	4604      	mov	r4, r0
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
  40314a:	69c3      	ldr	r3, [r0, #28]
  40314c:	aa01      	add	r2, sp, #4
  40314e:	2118      	movs	r1, #24
  403150:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
  403152:	2801      	cmp	r0, #1
  403154:	d001      	beq.n	40315a <lv_group_send_data+0x1e>
}
  403156:	b002      	add	sp, #8
  403158:	bd10      	pop	{r4, pc}
    res = lv_event_send(act, LV_EVENT_KEY, &c);
  40315a:	aa01      	add	r2, sp, #4
  40315c:	210c      	movs	r1, #12
  40315e:	4620      	mov	r0, r4
  403160:	4b03      	ldr	r3, [pc, #12]	; (403170 <lv_group_send_data+0x34>)
  403162:	4798      	blx	r3
  403164:	e7f7      	b.n	403156 <lv_group_send_data+0x1a>
    if(act == NULL) return LV_RES_OK;
  403166:	2001      	movs	r0, #1
  403168:	e7f5      	b.n	403156 <lv_group_send_data+0x1a>
  40316a:	bf00      	nop
  40316c:	00403129 	.word	0x00403129
  403170:	00404e95 	.word	0x00404e95

00403174 <lv_group_set_editing>:
    if(group == NULL) return;
  403174:	b1f8      	cbz	r0, 4031b6 <lv_group_set_editing+0x42>
{
  403176:	b538      	push	{r3, r4, r5, lr}
  403178:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
  40317a:	7d03      	ldrb	r3, [r0, #20]
  40317c:	f3c3 0340 	ubfx	r3, r3, #1, #1
  403180:	428b      	cmp	r3, r1
  403182:	d013      	beq.n	4031ac <lv_group_set_editing+0x38>
    group->editing     = en_val;
  403184:	7d03      	ldrb	r3, [r0, #20]
  403186:	f361 0341 	bfi	r3, r1, #1, #1
  40318a:	7503      	strb	r3, [r0, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
  40318c:	4b0a      	ldr	r3, [pc, #40]	; (4031b8 <lv_group_set_editing+0x44>)
  40318e:	4798      	blx	r3
    if(focused) {
  403190:	4605      	mov	r5, r0
  403192:	b158      	cbz	r0, 4031ac <lv_group_set_editing+0x38>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
  403194:	69c3      	ldr	r3, [r0, #28]
  403196:	2200      	movs	r2, #0
  403198:	2116      	movs	r1, #22
  40319a:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  40319c:	68e3      	ldr	r3, [r4, #12]
  40319e:	2200      	movs	r2, #0
  4031a0:	210d      	movs	r1, #13
  4031a2:	6818      	ldr	r0, [r3, #0]
  4031a4:	4b05      	ldr	r3, [pc, #20]	; (4031bc <lv_group_set_editing+0x48>)
  4031a6:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  4031a8:	2801      	cmp	r0, #1
  4031aa:	d000      	beq.n	4031ae <lv_group_set_editing+0x3a>
  4031ac:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(focused);
  4031ae:	4628      	mov	r0, r5
  4031b0:	4b03      	ldr	r3, [pc, #12]	; (4031c0 <lv_group_set_editing+0x4c>)
  4031b2:	4798      	blx	r3
  4031b4:	e7fa      	b.n	4031ac <lv_group_set_editing+0x38>
  4031b6:	4770      	bx	lr
  4031b8:	00403129 	.word	0x00403129
  4031bc:	00404e95 	.word	0x00404e95
  4031c0:	00405565 	.word	0x00405565

004031c4 <lv_group_focus_obj>:
    if(obj == NULL) return;
  4031c4:	2800      	cmp	r0, #0
  4031c6:	d061      	beq.n	40328c <lv_group_focus_obj+0xc8>
{
  4031c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4031cc:	4605      	mov	r5, r0
    lv_group_t * g = obj->group_p;
  4031ce:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
    if(g == NULL) return;
  4031d2:	f1b8 0f00 	cmp.w	r8, #0
  4031d6:	d031      	beq.n	40323c <lv_group_focus_obj+0x78>
    if(g->frozen != 0) return;
  4031d8:	f898 3014 	ldrb.w	r3, [r8, #20]
  4031dc:	f013 0f01 	tst.w	r3, #1
  4031e0:	d12c      	bne.n	40323c <lv_group_focus_obj+0x78>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
  4031e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4031e6:	b113      	cbz	r3, 4031ee <lv_group_focus_obj+0x2a>
  4031e8:	681b      	ldr	r3, [r3, #0]
  4031ea:	4298      	cmp	r0, r3
  4031ec:	d026      	beq.n	40323c <lv_group_focus_obj+0x78>
    lv_group_set_editing(g, false);
  4031ee:	2100      	movs	r1, #0
  4031f0:	4640      	mov	r0, r8
  4031f2:	4b27      	ldr	r3, [pc, #156]	; (403290 <lv_group_focus_obj+0xcc>)
  4031f4:	4798      	blx	r3
    _LV_LL_READ(g->obj_ll, i) {
  4031f6:	4646      	mov	r6, r8
  4031f8:	4640      	mov	r0, r8
  4031fa:	4b26      	ldr	r3, [pc, #152]	; (403294 <lv_group_focus_obj+0xd0>)
  4031fc:	4798      	blx	r3
  4031fe:	4604      	mov	r4, r0
  403200:	b1e0      	cbz	r0, 40323c <lv_group_focus_obj+0x78>
        if(*i == obj) {
  403202:	6803      	ldr	r3, [r0, #0]
  403204:	429d      	cmp	r5, r3
  403206:	d008      	beq.n	40321a <lv_group_focus_obj+0x56>
    _LV_LL_READ(g->obj_ll, i) {
  403208:	4f23      	ldr	r7, [pc, #140]	; (403298 <lv_group_focus_obj+0xd4>)
  40320a:	4621      	mov	r1, r4
  40320c:	4630      	mov	r0, r6
  40320e:	47b8      	blx	r7
  403210:	4604      	mov	r4, r0
  403212:	b198      	cbz	r0, 40323c <lv_group_focus_obj+0x78>
        if(*i == obj) {
  403214:	6823      	ldr	r3, [r4, #0]
  403216:	429d      	cmp	r5, r3
  403218:	d1f7      	bne.n	40320a <lv_group_focus_obj+0x46>
            if(g->obj_focus != NULL) {
  40321a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  40321e:	b1a3      	cbz	r3, 40324a <lv_group_focus_obj+0x86>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  403220:	6818      	ldr	r0, [r3, #0]
  403222:	69c3      	ldr	r3, [r0, #28]
  403224:	2200      	movs	r2, #0
  403226:	2117      	movs	r1, #23
  403228:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  40322a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  40322e:	2200      	movs	r2, #0
  403230:	210e      	movs	r1, #14
  403232:	6818      	ldr	r0, [r3, #0]
  403234:	4b19      	ldr	r3, [pc, #100]	; (40329c <lv_group_focus_obj+0xd8>)
  403236:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403238:	2801      	cmp	r0, #1
  40323a:	d001      	beq.n	403240 <lv_group_focus_obj+0x7c>
  40323c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                lv_obj_invalidate(*g->obj_focus);
  403240:	f8d8 300c 	ldr.w	r3, [r8, #12]
  403244:	6818      	ldr	r0, [r3, #0]
  403246:	4b16      	ldr	r3, [pc, #88]	; (4032a0 <lv_group_focus_obj+0xdc>)
  403248:	4798      	blx	r3
            g->obj_focus = i;
  40324a:	f8c8 400c 	str.w	r4, [r8, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
  40324e:	6820      	ldr	r0, [r4, #0]
  403250:	69c3      	ldr	r3, [r0, #28]
  403252:	2200      	movs	r2, #0
  403254:	2116      	movs	r1, #22
  403256:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
  403258:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40325c:	b10b      	cbz	r3, 403262 <lv_group_focus_obj+0x9e>
  40325e:	4640      	mov	r0, r8
  403260:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
  403262:	f8d8 300c 	ldr.w	r3, [r8, #12]
  403266:	2200      	movs	r2, #0
  403268:	210d      	movs	r1, #13
  40326a:	6818      	ldr	r0, [r3, #0]
  40326c:	4b0b      	ldr	r3, [pc, #44]	; (40329c <lv_group_focus_obj+0xd8>)
  40326e:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403270:	2801      	cmp	r0, #1
  403272:	d1e3      	bne.n	40323c <lv_group_focus_obj+0x78>
                lv_obj_invalidate(*g->obj_focus);
  403274:	f8d8 300c 	ldr.w	r3, [r8, #12]
  403278:	6818      	ldr	r0, [r3, #0]
  40327a:	4b09      	ldr	r3, [pc, #36]	; (4032a0 <lv_group_focus_obj+0xdc>)
  40327c:	4798      	blx	r3
                obj_to_foreground(*g->obj_focus);
  40327e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  403282:	6818      	ldr	r0, [r3, #0]
  403284:	4b07      	ldr	r3, [pc, #28]	; (4032a4 <lv_group_focus_obj+0xe0>)
  403286:	4798      	blx	r3
  403288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40328c:	4770      	bx	lr
  40328e:	bf00      	nop
  403290:	00403175 	.word	0x00403175
  403294:	004153ed 	.word	0x004153ed
  403298:	00415401 	.word	0x00415401
  40329c:	00404e95 	.word	0x00404e95
  4032a0:	00405565 	.word	0x00405565
  4032a4:	00402e25 	.word	0x00402e25

004032a8 <lv_group_get_editing>:
    if(!group) return false;
  4032a8:	b118      	cbz	r0, 4032b2 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
  4032aa:	7d00      	ldrb	r0, [r0, #20]
  4032ac:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4032b0:	4770      	bx	lr
    if(!group) return false;
  4032b2:	2000      	movs	r0, #0
}
  4032b4:	4770      	bx	lr
	...

004032b8 <indev_proc_reset_query_handler>:
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
    if(indev->proc.reset_query) {
  4032b8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4032bc:	f013 0f02 	tst.w	r3, #2
  4032c0:	d022      	beq.n	403308 <indev_proc_reset_query_handler+0x50>
{
  4032c2:	b410      	push	{r4}
        indev->proc.types.pointer.act_obj           = NULL;
  4032c4:	2300      	movs	r3, #0
  4032c6:	6343      	str	r3, [r0, #52]	; 0x34
        indev->proc.types.pointer.last_obj          = NULL;
  4032c8:	6383      	str	r3, [r0, #56]	; 0x38
        indev->proc.types.pointer.drag_limit_out    = 0;
  4032ca:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_in_prog      = 0;
        indev->proc.long_pr_sent                    = 0;
  4032ce:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
        indev->proc.pr_timestamp                    = 0;
  4032d2:	6483      	str	r3, [r0, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
  4032d4:	64c3      	str	r3, [r0, #76]	; 0x4c
        indev->proc.types.pointer.drag_sum.x        = 0;
  4032d6:	8583      	strh	r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
  4032d8:	85c3      	strh	r3, [r0, #46]	; 0x2e
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  4032da:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  4032de:	2403      	movs	r4, #3
  4032e0:	f364 0184 	bfi	r1, r4, #2, #3
  4032e4:	f880 1046 	strb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_throw_vect.x = 0;
  4032e8:	8603      	strh	r3, [r0, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
  4032ea:	8643      	strh	r3, [r0, #50]	; 0x32
        indev->proc.types.pointer.gesture_sum.x     = 0;
  4032ec:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
  4032f0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        indev->proc.reset_query                     = 0;
  4032f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  4032f8:	f363 0241 	bfi	r2, r3, #1, #1
  4032fc:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        indev_obj_act                               = NULL;
  403300:	4a02      	ldr	r2, [pc, #8]	; (40330c <indev_proc_reset_query_handler+0x54>)
  403302:	6013      	str	r3, [r2, #0]
    }
}
  403304:	f85d 4b04 	ldr.w	r4, [sp], #4
  403308:	4770      	bx	lr
  40330a:	bf00      	nop
  40330c:	2040c3e0 	.word	0x2040c3e0

00403310 <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
  403310:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  403314:	f010 0002 	ands.w	r0, r0, #2
  403318:	d002      	beq.n	403320 <indev_reset_check+0x10>
        indev_obj_act = NULL;
  40331a:	2200      	movs	r2, #0
  40331c:	4b02      	ldr	r3, [pc, #8]	; (403328 <indev_reset_check+0x18>)
  40331e:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
  403320:	3000      	adds	r0, #0
  403322:	bf18      	it	ne
  403324:	2001      	movne	r0, #1
  403326:	4770      	bx	lr
  403328:	2040c3e0 	.word	0x2040c3e0

0040332c <get_dragged_obj>:
{
  40332c:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return NULL;
  40332e:	4604      	mov	r4, r0
  403330:	b148      	cbz	r0, 403346 <get_dragged_obj+0x1a>
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
  403332:	4d06      	ldr	r5, [pc, #24]	; (40334c <get_dragged_obj+0x20>)
        drag_obj = lv_obj_get_parent(drag_obj);
  403334:	4e06      	ldr	r6, [pc, #24]	; (403350 <get_dragged_obj+0x24>)
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
  403336:	4620      	mov	r0, r4
  403338:	47a8      	blx	r5
  40333a:	b124      	cbz	r4, 403346 <get_dragged_obj+0x1a>
  40333c:	b118      	cbz	r0, 403346 <get_dragged_obj+0x1a>
        drag_obj = lv_obj_get_parent(drag_obj);
  40333e:	4620      	mov	r0, r4
  403340:	47b0      	blx	r6
  403342:	4604      	mov	r4, r0
  403344:	e7f7      	b.n	403336 <get_dragged_obj+0xa>
}
  403346:	4620      	mov	r0, r4
  403348:	bd70      	pop	{r4, r5, r6, pc}
  40334a:	bf00      	nop
  40334c:	00405d59 	.word	0x00405d59
  403350:	00404fa5 	.word	0x00404fa5

00403354 <indev_drag_throw>:
    if(proc->types.pointer.drag_in_prog == 0) return;
  403354:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  403358:	f013 0f02 	tst.w	r3, #2
  40335c:	d100      	bne.n	403360 <indev_drag_throw+0xc>
  40335e:	4770      	bx	lr
{
  403360:	b5f0      	push	{r4, r5, r6, r7, lr}
  403362:	b085      	sub	sp, #20
  403364:	4604      	mov	r4, r0
    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
  403366:	69c0      	ldr	r0, [r0, #28]
  403368:	4b63      	ldr	r3, [pc, #396]	; (4034f8 <indev_drag_throw+0x1a4>)
  40336a:	4798      	blx	r3
    if(drag_obj == NULL) return;
  40336c:	4605      	mov	r5, r0
  40336e:	b190      	cbz	r0, 403396 <indev_drag_throw+0x42>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
  403370:	4b62      	ldr	r3, [pc, #392]	; (4034fc <indev_drag_throw+0x1a8>)
  403372:	4798      	blx	r3
  403374:	b9b8      	cbnz	r0, 4033a6 <indev_drag_throw+0x52>
        proc->types.pointer.drag_in_prog = 0;
  403376:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40337a:	f36f 0341 	bfc	r3, #1, #1
  40337e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403382:	69eb      	ldr	r3, [r5, #28]
  403384:	4a5e      	ldr	r2, [pc, #376]	; (403500 <indev_drag_throw+0x1ac>)
  403386:	6812      	ldr	r2, [r2, #0]
  403388:	2113      	movs	r1, #19
  40338a:	4628      	mov	r0, r5
  40338c:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  40338e:	4620      	mov	r0, r4
  403390:	4b5c      	ldr	r3, [pc, #368]	; (403504 <indev_drag_throw+0x1b0>)
  403392:	4798      	blx	r3
  403394:	b108      	cbz	r0, 40339a <indev_drag_throw+0x46>
}
  403396:	b005      	add	sp, #20
  403398:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  40339a:	2200      	movs	r2, #0
  40339c:	2109      	movs	r1, #9
  40339e:	4628      	mov	r0, r5
  4033a0:	4b59      	ldr	r3, [pc, #356]	; (403508 <indev_drag_throw+0x1b4>)
  4033a2:	4798      	blx	r3
        return;
  4033a4:	e7f7      	b.n	403396 <indev_drag_throw+0x42>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  4033a6:	4628      	mov	r0, r5
  4033a8:	4b58      	ldr	r3, [pc, #352]	; (40350c <indev_drag_throw+0x1b8>)
  4033aa:	4798      	blx	r3
  4033ac:	4606      	mov	r6, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
  4033ae:	4b54      	ldr	r3, [pc, #336]	; (403500 <indev_drag_throw+0x1ac>)
  4033b0:	681a      	ldr	r2, [r3, #0]
  4033b2:	7d51      	ldrb	r1, [r2, #21]
  4033b4:	f1c1 0364 	rsb	r3, r1, #100	; 0x64
  4033b8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
  4033bc:	fb01 f103 	mul.w	r1, r1, r3
  4033c0:	4853      	ldr	r0, [pc, #332]	; (403510 <indev_drag_throw+0x1bc>)
  4033c2:	fb80 7301 	smull	r7, r3, r0, r1
  4033c6:	17c9      	asrs	r1, r1, #31
  4033c8:	ebc1 1163 	rsb	r1, r1, r3, asr #5
    proc->types.pointer.drag_throw_vect.x =
  4033cc:	82a1      	strh	r1, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
  4033ce:	7d53      	ldrb	r3, [r2, #21]
  4033d0:	f1c3 0164 	rsb	r1, r3, #100	; 0x64
  4033d4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  4033d8:	fb03 f301 	mul.w	r3, r3, r1
  4033dc:	fb80 1003 	smull	r1, r0, r0, r3
  4033e0:	17db      	asrs	r3, r3, #31
  4033e2:	ebc3 1360 	rsb	r3, r3, r0, asr #5
    proc->types.pointer.drag_throw_vect.y =
  4033e6:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
  4033e8:	6963      	ldr	r3, [r4, #20]
  4033ea:	2b00      	cmp	r3, #0
  4033ec:	d06a      	beq.n	4034c4 <indev_drag_throw+0x170>
        lv_obj_get_coords(drag_obj, &coords_ori);
  4033ee:	4669      	mov	r1, sp
  4033f0:	4628      	mov	r0, r5
  4033f2:	4b48      	ldr	r3, [pc, #288]	; (403514 <indev_drag_throw+0x1c0>)
  4033f4:	4798      	blx	r3
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
  4033f6:	4628      	mov	r0, r5
  4033f8:	4b47      	ldr	r3, [pc, #284]	; (403518 <indev_drag_throw+0x1c4>)
  4033fa:	4798      	blx	r3
  4033fc:	8aa3      	ldrh	r3, [r4, #20]
  4033fe:	4418      	add	r0, r3
  403400:	b207      	sxth	r7, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
  403402:	4628      	mov	r0, r5
  403404:	4b45      	ldr	r3, [pc, #276]	; (40351c <indev_drag_throw+0x1c8>)
  403406:	4798      	blx	r3
  403408:	8ae2      	ldrh	r2, [r4, #22]
  40340a:	4402      	add	r2, r0
  40340c:	b212      	sxth	r2, r2
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  40340e:	2e03      	cmp	r6, #3
  403410:	d03c      	beq.n	40348c <indev_drag_throw+0x138>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403412:	2e01      	cmp	r6, #1
  403414:	d03f      	beq.n	403496 <indev_drag_throw+0x142>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  403416:	2e02      	cmp	r6, #2
  403418:	d042      	beq.n	4034a0 <indev_drag_throw+0x14c>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  40341a:	2e04      	cmp	r6, #4
  40341c:	d045      	beq.n	4034aa <indev_drag_throw+0x156>
        lv_obj_get_coords(drag_obj, &coord_new);
  40341e:	a902      	add	r1, sp, #8
  403420:	4628      	mov	r0, r5
  403422:	4b3c      	ldr	r3, [pc, #240]	; (403514 <indev_drag_throw+0x1c0>)
  403424:	4798      	blx	r3
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403426:	f9bd 2000 	ldrsh.w	r2, [sp]
  40342a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  40342e:	429a      	cmp	r2, r3
  403430:	d003      	beq.n	40343a <indev_drag_throw+0xe6>
  403432:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  403436:	2b00      	cmp	r3, #0
  403438:	d1ad      	bne.n	403396 <indev_drag_throw+0x42>
  40343a:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  40343e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  403442:	429a      	cmp	r2, r3
  403444:	d003      	beq.n	40344e <indev_drag_throw+0xfa>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403446:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  40344a:	2b00      	cmp	r3, #0
  40344c:	d1a3      	bne.n	403396 <indev_drag_throw+0x42>
            proc->types.pointer.drag_in_prog      = 0;
  40344e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403452:	f36f 0341 	bfc	r3, #1, #1
  403456:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
  40345a:	2300      	movs	r3, #0
  40345c:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y            = 0;
  40345e:	81e3      	strh	r3, [r4, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
  403460:	82a3      	strh	r3, [r4, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
  403462:	82e3      	strh	r3, [r4, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403464:	69eb      	ldr	r3, [r5, #28]
  403466:	4a26      	ldr	r2, [pc, #152]	; (403500 <indev_drag_throw+0x1ac>)
  403468:	6812      	ldr	r2, [r2, #0]
  40346a:	2113      	movs	r1, #19
  40346c:	4628      	mov	r0, r5
  40346e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403470:	4620      	mov	r0, r4
  403472:	4b24      	ldr	r3, [pc, #144]	; (403504 <indev_drag_throw+0x1b0>)
  403474:	4798      	blx	r3
  403476:	2800      	cmp	r0, #0
  403478:	d18d      	bne.n	403396 <indev_drag_throw+0x42>
            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  40347a:	2200      	movs	r2, #0
  40347c:	2109      	movs	r1, #9
  40347e:	4628      	mov	r0, r5
  403480:	4b21      	ldr	r3, [pc, #132]	; (403508 <indev_drag_throw+0x1b4>)
  403482:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403484:	4620      	mov	r0, r4
  403486:	4b1f      	ldr	r3, [pc, #124]	; (403504 <indev_drag_throw+0x1b0>)
  403488:	4798      	blx	r3
  40348a:	e784      	b.n	403396 <indev_drag_throw+0x42>
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  40348c:	4639      	mov	r1, r7
  40348e:	4628      	mov	r0, r5
  403490:	4b23      	ldr	r3, [pc, #140]	; (403520 <indev_drag_throw+0x1cc>)
  403492:	4798      	blx	r3
  403494:	e7c3      	b.n	40341e <indev_drag_throw+0xca>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403496:	4639      	mov	r1, r7
  403498:	4628      	mov	r0, r5
  40349a:	4b22      	ldr	r3, [pc, #136]	; (403524 <indev_drag_throw+0x1d0>)
  40349c:	4798      	blx	r3
  40349e:	e7be      	b.n	40341e <indev_drag_throw+0xca>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  4034a0:	4611      	mov	r1, r2
  4034a2:	4628      	mov	r0, r5
  4034a4:	4b20      	ldr	r3, [pc, #128]	; (403528 <indev_drag_throw+0x1d4>)
  4034a6:	4798      	blx	r3
  4034a8:	e7b9      	b.n	40341e <indev_drag_throw+0xca>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
  4034aa:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  4034ae:	b123      	cbz	r3, 4034ba <indev_drag_throw+0x166>
  4034b0:	4639      	mov	r1, r7
  4034b2:	4628      	mov	r0, r5
  4034b4:	4b1b      	ldr	r3, [pc, #108]	; (403524 <indev_drag_throw+0x1d0>)
  4034b6:	4798      	blx	r3
  4034b8:	e7b1      	b.n	40341e <indev_drag_throw+0xca>
            else lv_obj_set_y(drag_obj, act_y);
  4034ba:	4611      	mov	r1, r2
  4034bc:	4628      	mov	r0, r5
  4034be:	4b1a      	ldr	r3, [pc, #104]	; (403528 <indev_drag_throw+0x1d4>)
  4034c0:	4798      	blx	r3
  4034c2:	e7ac      	b.n	40341e <indev_drag_throw+0xca>
        proc->types.pointer.drag_in_prog = 0;
  4034c4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4034c8:	f36f 0341 	bfc	r3, #1, #1
  4034cc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  4034d0:	69eb      	ldr	r3, [r5, #28]
  4034d2:	2113      	movs	r1, #19
  4034d4:	4628      	mov	r0, r5
  4034d6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4034d8:	4620      	mov	r0, r4
  4034da:	4b0a      	ldr	r3, [pc, #40]	; (403504 <indev_drag_throw+0x1b0>)
  4034dc:	4798      	blx	r3
  4034de:	2800      	cmp	r0, #0
  4034e0:	f47f af59 	bne.w	403396 <indev_drag_throw+0x42>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  4034e4:	2200      	movs	r2, #0
  4034e6:	2109      	movs	r1, #9
  4034e8:	4628      	mov	r0, r5
  4034ea:	4b07      	ldr	r3, [pc, #28]	; (403508 <indev_drag_throw+0x1b4>)
  4034ec:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4034ee:	4620      	mov	r0, r4
  4034f0:	4b04      	ldr	r3, [pc, #16]	; (403504 <indev_drag_throw+0x1b0>)
  4034f2:	4798      	blx	r3
  4034f4:	e74f      	b.n	403396 <indev_drag_throw+0x42>
  4034f6:	bf00      	nop
  4034f8:	0040332d 	.word	0x0040332d
  4034fc:	00405d2d 	.word	0x00405d2d
  403500:	2040c3dc 	.word	0x2040c3dc
  403504:	00403311 	.word	0x00403311
  403508:	00404e95 	.word	0x00404e95
  40350c:	00405d01 	.word	0x00405d01
  403510:	51eb851f 	.word	0x51eb851f
  403514:	004050d1 	.word	0x004050d1
  403518:	0040510d 	.word	0x0040510d
  40351c:	0040514d 	.word	0x0040514d
  403520:	00405645 	.word	0x00405645
  403524:	004056fd 	.word	0x004056fd
  403528:	0040573d 	.word	0x0040573d

0040352c <indev_proc_release>:
{
  40352c:	b538      	push	{r3, r4, r5, lr}
    if(proc->wait_until_release != 0) {
  40352e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  403532:	f013 0f08 	tst.w	r3, #8
  403536:	d00d      	beq.n	403554 <indev_proc_release+0x28>
        proc->types.pointer.act_obj  = NULL;
  403538:	2300      	movs	r3, #0
  40353a:	6183      	str	r3, [r0, #24]
        proc->types.pointer.last_obj = NULL;
  40353c:	61c3      	str	r3, [r0, #28]
        proc->pr_timestamp           = 0;
  40353e:	62c3      	str	r3, [r0, #44]	; 0x2c
        proc->longpr_rep_timestamp   = 0;
  403540:	6303      	str	r3, [r0, #48]	; 0x30
        proc->wait_until_release     = 0;
  403542:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  403546:	f363 02c3 	bfi	r2, r3, #3, #1
  40354a:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
  40354e:	4a5b      	ldr	r2, [pc, #364]	; (4036bc <indev_proc_release+0x190>)
  403550:	6013      	str	r3, [r2, #0]
  403552:	bd38      	pop	{r3, r4, r5, pc}
  403554:	4604      	mov	r4, r0
  403556:	6980      	ldr	r0, [r0, #24]
  403558:	4b58      	ldr	r3, [pc, #352]	; (4036bc <indev_proc_release+0x190>)
  40355a:	6018      	str	r0, [r3, #0]
    if(indev_obj_act) {
  40355c:	2800      	cmp	r0, #0
  40355e:	f000 8081 	beq.w	403664 <indev_proc_release+0x138>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
  403562:	2110      	movs	r1, #16
  403564:	4b56      	ldr	r3, [pc, #344]	; (4036c0 <indev_proc_release+0x194>)
  403566:	4798      	blx	r3
  403568:	2800      	cmp	r0, #0
  40356a:	d036      	beq.n	4035da <indev_proc_release+0xae>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  40356c:	4b53      	ldr	r3, [pc, #332]	; (4036bc <indev_proc_release+0x190>)
  40356e:	6818      	ldr	r0, [r3, #0]
  403570:	69c3      	ldr	r3, [r0, #28]
  403572:	4a54      	ldr	r2, [pc, #336]	; (4036c4 <indev_proc_release+0x198>)
  403574:	6812      	ldr	r2, [r2, #0]
  403576:	210e      	movs	r1, #14
  403578:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  40357a:	4620      	mov	r0, r4
  40357c:	4b52      	ldr	r3, [pc, #328]	; (4036c8 <indev_proc_release+0x19c>)
  40357e:	4798      	blx	r3
  403580:	2800      	cmp	r0, #0
  403582:	d176      	bne.n	403672 <indev_proc_release+0x146>
            if(proc->types.pointer.drag_in_prog == 0) {
  403584:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403588:	f013 0f02 	tst.w	r3, #2
  40358c:	d11a      	bne.n	4035c4 <indev_proc_release+0x98>
                if(proc->long_pr_sent == 0) {
  40358e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403592:	f013 0f01 	tst.w	r3, #1
  403596:	d10a      	bne.n	4035ae <indev_proc_release+0x82>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403598:	2200      	movs	r2, #0
  40359a:	2103      	movs	r1, #3
  40359c:	4b47      	ldr	r3, [pc, #284]	; (4036bc <indev_proc_release+0x190>)
  40359e:	6818      	ldr	r0, [r3, #0]
  4035a0:	4b4a      	ldr	r3, [pc, #296]	; (4036cc <indev_proc_release+0x1a0>)
  4035a2:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  4035a4:	4620      	mov	r0, r4
  4035a6:	4b48      	ldr	r3, [pc, #288]	; (4036c8 <indev_proc_release+0x19c>)
  4035a8:	4798      	blx	r3
  4035aa:	2800      	cmp	r0, #0
  4035ac:	d161      	bne.n	403672 <indev_proc_release+0x146>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  4035ae:	2200      	movs	r2, #0
  4035b0:	2106      	movs	r1, #6
  4035b2:	4b42      	ldr	r3, [pc, #264]	; (4036bc <indev_proc_release+0x190>)
  4035b4:	6818      	ldr	r0, [r3, #0]
  4035b6:	4b45      	ldr	r3, [pc, #276]	; (4036cc <indev_proc_release+0x1a0>)
  4035b8:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  4035ba:	4620      	mov	r0, r4
  4035bc:	4b42      	ldr	r3, [pc, #264]	; (4036c8 <indev_proc_release+0x19c>)
  4035be:	4798      	blx	r3
  4035c0:	2800      	cmp	r0, #0
  4035c2:	d156      	bne.n	403672 <indev_proc_release+0x146>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  4035c4:	2200      	movs	r2, #0
  4035c6:	2107      	movs	r1, #7
  4035c8:	4b3c      	ldr	r3, [pc, #240]	; (4036bc <indev_proc_release+0x190>)
  4035ca:	6818      	ldr	r0, [r3, #0]
  4035cc:	4b3f      	ldr	r3, [pc, #252]	; (4036cc <indev_proc_release+0x1a0>)
  4035ce:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4035d0:	4620      	mov	r0, r4
  4035d2:	4b3d      	ldr	r3, [pc, #244]	; (4036c8 <indev_proc_release+0x19c>)
  4035d4:	4798      	blx	r3
  4035d6:	b300      	cbz	r0, 40361a <indev_proc_release+0xee>
  4035d8:	bd38      	pop	{r3, r4, r5, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  4035da:	4b38      	ldr	r3, [pc, #224]	; (4036bc <indev_proc_release+0x190>)
  4035dc:	6818      	ldr	r0, [r3, #0]
  4035de:	69c3      	ldr	r3, [r0, #28]
  4035e0:	4a38      	ldr	r2, [pc, #224]	; (4036c4 <indev_proc_release+0x198>)
  4035e2:	6812      	ldr	r2, [r2, #0]
  4035e4:	210e      	movs	r1, #14
  4035e6:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4035e8:	4620      	mov	r0, r4
  4035ea:	4b37      	ldr	r3, [pc, #220]	; (4036c8 <indev_proc_release+0x19c>)
  4035ec:	4798      	blx	r3
  4035ee:	2800      	cmp	r0, #0
  4035f0:	d13f      	bne.n	403672 <indev_proc_release+0x146>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
  4035f2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4035f6:	f013 0f01 	tst.w	r3, #1
  4035fa:	d146      	bne.n	40368a <indev_proc_release+0x15e>
  4035fc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403600:	f013 0f02 	tst.w	r3, #2
  403604:	d036      	beq.n	403674 <indev_proc_release+0x148>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  403606:	2200      	movs	r2, #0
  403608:	2107      	movs	r1, #7
  40360a:	4b2c      	ldr	r3, [pc, #176]	; (4036bc <indev_proc_release+0x190>)
  40360c:	6818      	ldr	r0, [r3, #0]
  40360e:	4b2f      	ldr	r3, [pc, #188]	; (4036cc <indev_proc_release+0x1a0>)
  403610:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403612:	4620      	mov	r0, r4
  403614:	4b2c      	ldr	r3, [pc, #176]	; (4036c8 <indev_proc_release+0x19c>)
  403616:	4798      	blx	r3
  403618:	bb58      	cbnz	r0, 403672 <indev_proc_release+0x146>
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
  40361a:	4b28      	ldr	r3, [pc, #160]	; (4036bc <indev_proc_release+0x190>)
  40361c:	6818      	ldr	r0, [r3, #0]
  40361e:	4b2c      	ldr	r3, [pc, #176]	; (4036d0 <indev_proc_release+0x1a4>)
  403620:	4798      	blx	r3
        if(drag_obj) {
  403622:	4605      	mov	r5, r0
  403624:	b1d0      	cbz	r0, 40365c <indev_proc_release+0x130>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
  403626:	4b2b      	ldr	r3, [pc, #172]	; (4036d4 <indev_proc_release+0x1a8>)
  403628:	4798      	blx	r3
  40362a:	b1b8      	cbz	r0, 40365c <indev_proc_release+0x130>
  40362c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403630:	f013 0f02 	tst.w	r3, #2
  403634:	d012      	beq.n	40365c <indev_proc_release+0x130>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
  403636:	69eb      	ldr	r3, [r5, #28]
  403638:	b11b      	cbz	r3, 403642 <indev_proc_release+0x116>
  40363a:	2200      	movs	r2, #0
  40363c:	2112      	movs	r1, #18
  40363e:	4628      	mov	r0, r5
  403640:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403642:	4620      	mov	r0, r4
  403644:	4b20      	ldr	r3, [pc, #128]	; (4036c8 <indev_proc_release+0x19c>)
  403646:	4798      	blx	r3
  403648:	b998      	cbnz	r0, 403672 <indev_proc_release+0x146>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
  40364a:	2200      	movs	r2, #0
  40364c:	210a      	movs	r1, #10
  40364e:	4628      	mov	r0, r5
  403650:	4b1e      	ldr	r3, [pc, #120]	; (4036cc <indev_proc_release+0x1a0>)
  403652:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403654:	4620      	mov	r0, r4
  403656:	4b1c      	ldr	r3, [pc, #112]	; (4036c8 <indev_proc_release+0x19c>)
  403658:	4798      	blx	r3
  40365a:	b950      	cbnz	r0, 403672 <indev_proc_release+0x146>
        proc->types.pointer.act_obj = NULL;
  40365c:	2300      	movs	r3, #0
  40365e:	61a3      	str	r3, [r4, #24]
        proc->pr_timestamp          = 0;
  403660:	62e3      	str	r3, [r4, #44]	; 0x2c
        proc->longpr_rep_timestamp  = 0;
  403662:	6323      	str	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
  403664:	69e3      	ldr	r3, [r4, #28]
  403666:	b123      	cbz	r3, 403672 <indev_proc_release+0x146>
  403668:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40366c:	f013 0f02 	tst.w	r3, #2
  403670:	d01c      	beq.n	4036ac <indev_proc_release+0x180>
  403672:	bd38      	pop	{r3, r4, r5, pc}
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403674:	2200      	movs	r2, #0
  403676:	2103      	movs	r1, #3
  403678:	4b10      	ldr	r3, [pc, #64]	; (4036bc <indev_proc_release+0x190>)
  40367a:	6818      	ldr	r0, [r3, #0]
  40367c:	4b13      	ldr	r3, [pc, #76]	; (4036cc <indev_proc_release+0x1a0>)
  40367e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403680:	4620      	mov	r0, r4
  403682:	4b11      	ldr	r3, [pc, #68]	; (4036c8 <indev_proc_release+0x19c>)
  403684:	4798      	blx	r3
  403686:	2800      	cmp	r0, #0
  403688:	d1f3      	bne.n	403672 <indev_proc_release+0x146>
            if(proc->types.pointer.drag_in_prog == 0) {
  40368a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40368e:	f013 0f02 	tst.w	r3, #2
  403692:	d1b8      	bne.n	403606 <indev_proc_release+0xda>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  403694:	2200      	movs	r2, #0
  403696:	2106      	movs	r1, #6
  403698:	4b08      	ldr	r3, [pc, #32]	; (4036bc <indev_proc_release+0x190>)
  40369a:	6818      	ldr	r0, [r3, #0]
  40369c:	4b0b      	ldr	r3, [pc, #44]	; (4036cc <indev_proc_release+0x1a0>)
  40369e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  4036a0:	4620      	mov	r0, r4
  4036a2:	4b09      	ldr	r3, [pc, #36]	; (4036c8 <indev_proc_release+0x19c>)
  4036a4:	4798      	blx	r3
  4036a6:	2800      	cmp	r0, #0
  4036a8:	d0ad      	beq.n	403606 <indev_proc_release+0xda>
  4036aa:	e7e2      	b.n	403672 <indev_proc_release+0x146>
        indev_drag_throw(proc);
  4036ac:	4620      	mov	r0, r4
  4036ae:	4b0a      	ldr	r3, [pc, #40]	; (4036d8 <indev_proc_release+0x1ac>)
  4036b0:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4036b2:	4620      	mov	r0, r4
  4036b4:	4b04      	ldr	r3, [pc, #16]	; (4036c8 <indev_proc_release+0x19c>)
  4036b6:	4798      	blx	r3
  4036b8:	e7db      	b.n	403672 <indev_proc_release+0x146>
  4036ba:	bf00      	nop
  4036bc:	2040c3e0 	.word	0x2040c3e0
  4036c0:	00406345 	.word	0x00406345
  4036c4:	2040c3dc 	.word	0x2040c3dc
  4036c8:	00403311 	.word	0x00403311
  4036cc:	00404e95 	.word	0x00404e95
  4036d0:	0040332d 	.word	0x0040332d
  4036d4:	00405d2d 	.word	0x00405d2d
  4036d8:	00403355 	.word	0x00403355

004036dc <lv_indev_get_act>:
}
  4036dc:	4b01      	ldr	r3, [pc, #4]	; (4036e4 <lv_indev_get_act+0x8>)
  4036de:	6818      	ldr	r0, [r3, #0]
  4036e0:	4770      	bx	lr
  4036e2:	bf00      	nop
  4036e4:	2040c3dc 	.word	0x2040c3dc

004036e8 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
  4036e8:	b108      	cbz	r0, 4036ee <lv_indev_get_type+0x6>
    return indev->driver.type;
  4036ea:	7800      	ldrb	r0, [r0, #0]
  4036ec:	4770      	bx	lr
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
  4036ee:	2000      	movs	r0, #0
}
  4036f0:	4770      	bx	lr
	...

004036f4 <lv_indev_reset>:
{
  4036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(indev) {
  4036f6:	b1b0      	cbz	r0, 403726 <lv_indev_reset+0x32>
  4036f8:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
  4036fa:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
  4036fe:	f042 0202 	orr.w	r2, r2, #2
  403702:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
  403706:	4a1a      	ldr	r2, [pc, #104]	; (403770 <lv_indev_reset+0x7c>)
  403708:	6812      	ldr	r2, [r2, #0]
  40370a:	4290      	cmp	r0, r2
  40370c:	d004      	beq.n	403718 <lv_indev_reset+0x24>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
  40370e:	b139      	cbz	r1, 403720 <lv_indev_reset+0x2c>
  403710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  403712:	4291      	cmp	r1, r2
  403714:	d004      	beq.n	403720 <lv_indev_reset+0x2c>
  403716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(indev_act == indev) indev_obj_act = NULL;
  403718:	2000      	movs	r0, #0
  40371a:	4a16      	ldr	r2, [pc, #88]	; (403774 <lv_indev_reset+0x80>)
  40371c:	6010      	str	r0, [r2, #0]
  40371e:	e7f6      	b.n	40370e <lv_indev_reset+0x1a>
            indev->proc.types.pointer.last_pressed = NULL;
  403720:	2200      	movs	r2, #0
  403722:	63da      	str	r2, [r3, #60]	; 0x3c
  403724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403726:	460c      	mov	r4, r1
        lv_indev_t * i = lv_indev_get_next(NULL);
  403728:	2000      	movs	r0, #0
  40372a:	4b13      	ldr	r3, [pc, #76]	; (403778 <lv_indev_reset+0x84>)
  40372c:	4798      	blx	r3
        while(i) {
  40372e:	4603      	mov	r3, r0
  403730:	2800      	cmp	r0, #0
  403732:	d0f0      	beq.n	403716 <lv_indev_reset+0x22>
            if(indev_act == i) indev_obj_act = NULL;
  403734:	4e0e      	ldr	r6, [pc, #56]	; (403770 <lv_indev_reset+0x7c>)
  403736:	4f0f      	ldr	r7, [pc, #60]	; (403774 <lv_indev_reset+0x80>)
            i = lv_indev_get_next(i);
  403738:	4d0f      	ldr	r5, [pc, #60]	; (403778 <lv_indev_reset+0x84>)
  40373a:	e009      	b.n	403750 <lv_indev_reset+0x5c>
            if(indev_act == i) indev_obj_act = NULL;
  40373c:	2200      	movs	r2, #0
  40373e:	603a      	str	r2, [r7, #0]
  403740:	e00f      	b.n	403762 <lv_indev_reset+0x6e>
                i->proc.types.pointer.last_pressed = NULL;
  403742:	2200      	movs	r2, #0
  403744:	63da      	str	r2, [r3, #60]	; 0x3c
            i = lv_indev_get_next(i);
  403746:	4618      	mov	r0, r3
  403748:	47a8      	blx	r5
        while(i) {
  40374a:	4603      	mov	r3, r0
  40374c:	2800      	cmp	r0, #0
  40374e:	d0e2      	beq.n	403716 <lv_indev_reset+0x22>
            i->proc.reset_query = 1;
  403750:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
  403754:	f042 0202 	orr.w	r2, r2, #2
  403758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
  40375c:	6832      	ldr	r2, [r6, #0]
  40375e:	429a      	cmp	r2, r3
  403760:	d0ec      	beq.n	40373c <lv_indev_reset+0x48>
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
  403762:	2c00      	cmp	r4, #0
  403764:	d0ed      	beq.n	403742 <lv_indev_reset+0x4e>
  403766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  403768:	4294      	cmp	r4, r2
  40376a:	d1ec      	bne.n	403746 <lv_indev_reset+0x52>
  40376c:	e7e9      	b.n	403742 <lv_indev_reset+0x4e>
  40376e:	bf00      	nop
  403770:	2040c3dc 	.word	0x2040c3dc
  403774:	2040c3e0 	.word	0x2040c3e0
  403778:	00414409 	.word	0x00414409

0040377c <_lv_indev_init>:
{
  40377c:	b508      	push	{r3, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
  40377e:	2100      	movs	r1, #0
  403780:	4608      	mov	r0, r1
  403782:	4b01      	ldr	r3, [pc, #4]	; (403788 <_lv_indev_init+0xc>)
  403784:	4798      	blx	r3
  403786:	bd08      	pop	{r3, pc}
  403788:	004036f5 	.word	0x004036f5

0040378c <lv_indev_reset_long_press>:
{
  40378c:	b538      	push	{r3, r4, r5, lr}
  40378e:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
  403790:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  403794:	f36f 0300 	bfc	r3, #0, #1
  403798:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    indev->proc.longpr_rep_timestamp = lv_tick_get();
  40379c:	4d02      	ldr	r5, [pc, #8]	; (4037a8 <lv_indev_reset_long_press+0x1c>)
  40379e:	47a8      	blx	r5
  4037a0:	64e0      	str	r0, [r4, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
  4037a2:	47a8      	blx	r5
  4037a4:	64a0      	str	r0, [r4, #72]	; 0x48
  4037a6:	bd38      	pop	{r3, r4, r5, pc}
  4037a8:	00414495 	.word	0x00414495

004037ac <lv_indev_get_point>:
    if(indev == NULL) {
  4037ac:	b158      	cbz	r0, 4037c6 <lv_indev_get_point+0x1a>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
  4037ae:	7803      	ldrb	r3, [r0, #0]
  4037b0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  4037b4:	2b01      	cmp	r3, #1
  4037b6:	d10a      	bne.n	4037ce <lv_indev_get_point+0x22>
        point->x = indev->proc.types.pointer.act_point.x;
  4037b8:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
  4037bc:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
  4037be:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  4037c2:	804b      	strh	r3, [r1, #2]
  4037c4:	4770      	bx	lr
        point->x = 0;
  4037c6:	2300      	movs	r3, #0
  4037c8:	800b      	strh	r3, [r1, #0]
        point->y = 0;
  4037ca:	804b      	strh	r3, [r1, #2]
        return;
  4037cc:	4770      	bx	lr
        point->x = -1;
  4037ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4037d2:	800b      	strh	r3, [r1, #0]
        point->y = -1;
  4037d4:	804b      	strh	r3, [r1, #2]
  4037d6:	4770      	bx	lr

004037d8 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
  4037d8:	b148      	cbz	r0, 4037ee <lv_indev_is_dragging+0x16>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
  4037da:	7803      	ldrb	r3, [r0, #0]
  4037dc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  4037e0:	2b01      	cmp	r3, #1
  4037e2:	d106      	bne.n	4037f2 <lv_indev_is_dragging+0x1a>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
  4037e4:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
  4037e8:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4037ec:	4770      	bx	lr
    if(indev == NULL) return false;
  4037ee:	2000      	movs	r0, #0
  4037f0:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
  4037f2:	2000      	movs	r0, #0
}
  4037f4:	4770      	bx	lr
	...

004037f8 <lv_indev_get_obj_act>:
}
  4037f8:	4b01      	ldr	r3, [pc, #4]	; (403800 <lv_indev_get_obj_act+0x8>)
  4037fa:	6818      	ldr	r0, [r3, #0]
  4037fc:	4770      	bx	lr
  4037fe:	bf00      	nop
  403800:	2040c3e0 	.word	0x2040c3e0

00403804 <lv_indev_search_obj>:
{
  403804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403808:	4680      	mov	r8, r0
  40380a:	460e      	mov	r6, r1
    if(lv_obj_hittest(obj, point)) {
  40380c:	4b28      	ldr	r3, [pc, #160]	; (4038b0 <lv_indev_search_obj+0xac>)
  40380e:	4798      	blx	r3
  403810:	2800      	cmp	r0, #0
  403812:	d046      	beq.n	4038a2 <lv_indev_search_obj+0x9e>
        _LV_LL_READ(obj->child_ll, i) {
  403814:	f108 0504 	add.w	r5, r8, #4
  403818:	4628      	mov	r0, r5
  40381a:	4b26      	ldr	r3, [pc, #152]	; (4038b4 <lv_indev_search_obj+0xb0>)
  40381c:	4798      	blx	r3
  40381e:	4604      	mov	r4, r0
  403820:	b168      	cbz	r0, 40383e <lv_indev_search_obj+0x3a>
  403822:	4f25      	ldr	r7, [pc, #148]	; (4038b8 <lv_indev_search_obj+0xb4>)
            found_p = lv_indev_search_obj(i, point);
  403824:	4631      	mov	r1, r6
  403826:	4620      	mov	r0, r4
  403828:	f7ff ffec 	bl	403804 <lv_indev_search_obj>
            if(found_p != NULL) {
  40382c:	4603      	mov	r3, r0
  40382e:	2800      	cmp	r0, #0
  403830:	d138      	bne.n	4038a4 <lv_indev_search_obj+0xa0>
        _LV_LL_READ(obj->child_ll, i) {
  403832:	4621      	mov	r1, r4
  403834:	4628      	mov	r0, r5
  403836:	47b8      	blx	r7
  403838:	4604      	mov	r4, r0
  40383a:	2800      	cmp	r0, #0
  40383c:	d1f2      	bne.n	403824 <lv_indev_search_obj+0x20>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  40383e:	4640      	mov	r0, r8
  403840:	4b1e      	ldr	r3, [pc, #120]	; (4038bc <lv_indev_search_obj+0xb8>)
  403842:	4798      	blx	r3
  403844:	2800      	cmp	r0, #0
  403846:	d030      	beq.n	4038aa <lv_indev_search_obj+0xa6>
            while(hidden_i != NULL) {
  403848:	f1b8 0f00 	cmp.w	r8, #0
  40384c:	d00a      	beq.n	403864 <lv_indev_search_obj+0x60>
  40384e:	4644      	mov	r4, r8
                if(lv_obj_get_hidden(hidden_i) == true) break;
  403850:	4d1b      	ldr	r5, [pc, #108]	; (4038c0 <lv_indev_search_obj+0xbc>)
                hidden_i = lv_obj_get_parent(hidden_i);
  403852:	4e1c      	ldr	r6, [pc, #112]	; (4038c4 <lv_indev_search_obj+0xc0>)
                if(lv_obj_get_hidden(hidden_i) == true) break;
  403854:	4620      	mov	r0, r4
  403856:	47a8      	blx	r5
  403858:	b958      	cbnz	r0, 403872 <lv_indev_search_obj+0x6e>
                hidden_i = lv_obj_get_parent(hidden_i);
  40385a:	4620      	mov	r0, r4
  40385c:	47b0      	blx	r6
            while(hidden_i != NULL) {
  40385e:	4604      	mov	r4, r0
  403860:	2800      	cmp	r0, #0
  403862:	d1f7      	bne.n	403854 <lv_indev_search_obj+0x50>
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false) {
  403864:	2140      	movs	r1, #64	; 0x40
  403866:	4640      	mov	r0, r8
  403868:	4b17      	ldr	r3, [pc, #92]	; (4038c8 <lv_indev_search_obj+0xc4>)
  40386a:	4798      	blx	r3
  40386c:	b148      	cbz	r0, 403882 <lv_indev_search_obj+0x7e>
                if(hidden_i == NULL) found_p = obj;
  40386e:	4643      	mov	r3, r8
    return found_p;
  403870:	e018      	b.n	4038a4 <lv_indev_search_obj+0xa0>
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false) {
  403872:	2140      	movs	r1, #64	; 0x40
  403874:	4640      	mov	r0, r8
  403876:	4b14      	ldr	r3, [pc, #80]	; (4038c8 <lv_indev_search_obj+0xc4>)
  403878:	4798      	blx	r3
  40387a:	b968      	cbnz	r0, 403898 <lv_indev_search_obj+0x94>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
  40387c:	b10c      	cbz	r4, 403882 <lv_indev_search_obj+0x7e>
  40387e:	2300      	movs	r3, #0
  403880:	e010      	b.n	4038a4 <lv_indev_search_obj+0xa0>
  403882:	2100      	movs	r1, #0
  403884:	4640      	mov	r0, r8
  403886:	4b11      	ldr	r3, [pc, #68]	; (4038cc <lv_indev_search_obj+0xc8>)
  403888:	4798      	blx	r3
  40388a:	f000 0020 	and.w	r0, r0, #32
  40388e:	2800      	cmp	r0, #0
  403890:	bf0c      	ite	eq
  403892:	4643      	moveq	r3, r8
  403894:	2300      	movne	r3, #0
  403896:	e005      	b.n	4038a4 <lv_indev_search_obj+0xa0>
                if(hidden_i == NULL) found_p = obj;
  403898:	2c00      	cmp	r4, #0
  40389a:	bf0c      	ite	eq
  40389c:	4643      	moveq	r3, r8
  40389e:	2300      	movne	r3, #0
  4038a0:	e000      	b.n	4038a4 <lv_indev_search_obj+0xa0>
    lv_obj_t * found_p = NULL;
  4038a2:	2300      	movs	r3, #0
}
  4038a4:	4618      	mov	r0, r3
  4038a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038aa:	2300      	movs	r3, #0
  4038ac:	e7fa      	b.n	4038a4 <lv_indev_search_obj+0xa0>
  4038ae:	bf00      	nop
  4038b0:	004074ed 	.word	0x004074ed
  4038b4:	004153ed 	.word	0x004153ed
  4038b8:	00415401 	.word	0x00415401
  4038bc:	00405ca9 	.word	0x00405ca9
  4038c0:	004053d5 	.word	0x004053d5
  4038c4:	00404fa5 	.word	0x00404fa5
  4038c8:	00406345 	.word	0x00406345
  4038cc:	00406379 	.word	0x00406379

004038d0 <indev_proc_press>:
    indev_obj_act = proc->types.pointer.act_obj;
  4038d0:	6983      	ldr	r3, [r0, #24]
  4038d2:	4a8d      	ldr	r2, [pc, #564]	; (403b08 <indev_proc_press+0x238>)
  4038d4:	6013      	str	r3, [r2, #0]
    if(proc->wait_until_release != 0) return;
  4038d6:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  4038da:	f012 0f08 	tst.w	r2, #8
  4038de:	f040 8454 	bne.w	40418a <indev_proc_press+0x8ba>
{
  4038e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4038e6:	b083      	sub	sp, #12
  4038e8:	4604      	mov	r4, r0
    lv_disp_t * disp = indev_act->driver.disp;
  4038ea:	4a88      	ldr	r2, [pc, #544]	; (403b0c <indev_proc_press+0x23c>)
  4038ec:	6812      	ldr	r2, [r2, #0]
  4038ee:	68d5      	ldr	r5, [r2, #12]
    if(indev_obj_act == NULL) {
  4038f0:	2b00      	cmp	r3, #0
  4038f2:	f000 80a8 	beq.w	403a46 <indev_proc_press+0x176>
    else if(proc->types.pointer.drag_in_prog == 0 &&
  4038f6:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
  4038fa:	f012 0f02 	tst.w	r2, #2
  4038fe:	f000 80be 	beq.w	403a7e <indev_proc_press+0x1ae>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
  403902:	88a0      	ldrh	r0, [r4, #4]
  403904:	8923      	ldrh	r3, [r4, #8]
  403906:	1ac0      	subs	r0, r0, r3
  403908:	b200      	sxth	r0, r0
  40390a:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
  40390c:	88e1      	ldrh	r1, [r4, #6]
  40390e:	8963      	ldrh	r3, [r4, #10]
  403910:	1ac9      	subs	r1, r1, r3
  403912:	b209      	sxth	r1, r1
  403914:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
  403916:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  40391a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40391e:	10da      	asrs	r2, r3, #3
  403920:	b216      	sxth	r6, r2
  403922:	82a6      	strh	r6, [r4, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
  403924:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  403928:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40392c:	10db      	asrs	r3, r3, #3
  40392e:	b21d      	sxth	r5, r3
  403930:	82e5      	strh	r5, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
  403932:	2e00      	cmp	r6, #0
  403934:	f2c0 81fb 	blt.w	403d2e <indev_proc_press+0x45e>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
  403938:	2e00      	cmp	r6, #0
  40393a:	dd01      	ble.n	403940 <indev_proc_press+0x70>
        proc->types.pointer.drag_throw_vect.x--;
  40393c:	3a01      	subs	r2, #1
  40393e:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
  403940:	2d00      	cmp	r5, #0
  403942:	f2c0 81f7 	blt.w	403d34 <indev_proc_press+0x464>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
  403946:	2d00      	cmp	r5, #0
  403948:	dd01      	ble.n	40394e <indev_proc_press+0x7e>
        proc->types.pointer.drag_throw_vect.y--;
  40394a:	3b01      	subs	r3, #1
  40394c:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
  40394e:	8aa3      	ldrh	r3, [r4, #20]
  403950:	eb03 0060 	add.w	r0, r3, r0, asr #1
  403954:	82a0      	strh	r0, [r4, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
  403956:	8ae3      	ldrh	r3, [r4, #22]
  403958:	eb03 0161 	add.w	r1, r3, r1, asr #1
  40395c:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
  40395e:	4b6a      	ldr	r3, [pc, #424]	; (403b08 <indev_proc_press+0x238>)
  403960:	6818      	ldr	r0, [r3, #0]
  403962:	2800      	cmp	r0, #0
  403964:	f000 80b9 	beq.w	403ada <indev_proc_press+0x20a>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
  403968:	69c3      	ldr	r3, [r0, #28]
  40396a:	4a68      	ldr	r2, [pc, #416]	; (403b0c <indev_proc_press+0x23c>)
  40396c:	6812      	ldr	r2, [r2, #0]
  40396e:	210c      	movs	r1, #12
  403970:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403972:	4620      	mov	r0, r4
  403974:	4b66      	ldr	r3, [pc, #408]	; (403b10 <indev_proc_press+0x240>)
  403976:	4798      	blx	r3
  403978:	2800      	cmp	r0, #0
  40397a:	f040 80ae 	bne.w	403ada <indev_proc_press+0x20a>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  40397e:	2200      	movs	r2, #0
  403980:	2101      	movs	r1, #1
  403982:	4b61      	ldr	r3, [pc, #388]	; (403b08 <indev_proc_press+0x238>)
  403984:	6818      	ldr	r0, [r3, #0]
  403986:	4b63      	ldr	r3, [pc, #396]	; (403b14 <indev_proc_press+0x244>)
  403988:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  40398a:	4620      	mov	r0, r4
  40398c:	4b60      	ldr	r3, [pc, #384]	; (403b10 <indev_proc_press+0x240>)
  40398e:	4798      	blx	r3
  403990:	4605      	mov	r5, r0
  403992:	2800      	cmp	r0, #0
  403994:	f040 80a1 	bne.w	403ada <indev_proc_press+0x20a>
        if(indev_act->proc.wait_until_release) return;
  403998:	4b5c      	ldr	r3, [pc, #368]	; (403b0c <indev_proc_press+0x23c>)
  40399a:	681b      	ldr	r3, [r3, #0]
  40399c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  4039a0:	f013 0f08 	tst.w	r3, #8
  4039a4:	f040 8099 	bne.w	403ada <indev_proc_press+0x20a>
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
  4039a8:	69a0      	ldr	r0, [r4, #24]
  4039aa:	4b5b      	ldr	r3, [pc, #364]	; (403b18 <indev_proc_press+0x248>)
  4039ac:	4798      	blx	r3
    if(drag_obj == NULL) return;
  4039ae:	4606      	mov	r6, r0
  4039b0:	b128      	cbz	r0, 4039be <indev_proc_press+0xee>
    if(lv_obj_get_drag(drag_obj) == false) return;
  4039b2:	4b5a      	ldr	r3, [pc, #360]	; (403b1c <indev_proc_press+0x24c>)
  4039b4:	4798      	blx	r3
  4039b6:	4680      	mov	r8, r0
  4039b8:	2800      	cmp	r0, #0
  4039ba:	f040 81d7 	bne.w	403d6c <indev_proc_press+0x49c>
    if(proc->types.pointer.gesture_sent) return;
  4039be:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4039c2:	f013 0f20 	tst.w	r3, #32
  4039c6:	d10d      	bne.n	4039e4 <indev_proc_press+0x114>
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
  4039c8:	69a5      	ldr	r5, [r4, #24]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  4039ca:	b15d      	cbz	r5, 4039e4 <indev_proc_press+0x114>
  4039cc:	4e54      	ldr	r6, [pc, #336]	; (403b20 <indev_proc_press+0x250>)
        gesture_obj = lv_obj_get_parent(gesture_obj);
  4039ce:	4f55      	ldr	r7, [pc, #340]	; (403b24 <indev_proc_press+0x254>)
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  4039d0:	4628      	mov	r0, r5
  4039d2:	47b0      	blx	r6
  4039d4:	2800      	cmp	r0, #0
  4039d6:	f000 8329 	beq.w	40402c <indev_proc_press+0x75c>
        gesture_obj = lv_obj_get_parent(gesture_obj);
  4039da:	4628      	mov	r0, r5
  4039dc:	47b8      	blx	r7
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  4039de:	4605      	mov	r5, r0
  4039e0:	2800      	cmp	r0, #0
  4039e2:	d1f5      	bne.n	4039d0 <indev_proc_press+0x100>
        if(indev_reset_check(proc)) return;
  4039e4:	4620      	mov	r0, r4
  4039e6:	4b4a      	ldr	r3, [pc, #296]	; (403b10 <indev_proc_press+0x240>)
  4039e8:	4798      	blx	r3
  4039ea:	2800      	cmp	r0, #0
  4039ec:	d175      	bne.n	403ada <indev_proc_press+0x20a>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
  4039ee:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4039f2:	f013 0f02 	tst.w	r3, #2
  4039f6:	d170      	bne.n	403ada <indev_proc_press+0x20a>
  4039f8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4039fc:	f013 0f01 	tst.w	r3, #1
  403a00:	f000 836f 	beq.w	4040e2 <indev_proc_press+0x812>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
  403a04:	6b20      	ldr	r0, [r4, #48]	; 0x30
  403a06:	4b48      	ldr	r3, [pc, #288]	; (403b28 <indev_proc_press+0x258>)
  403a08:	4798      	blx	r3
  403a0a:	4b40      	ldr	r3, [pc, #256]	; (403b0c <indev_proc_press+0x23c>)
  403a0c:	681a      	ldr	r2, [r3, #0]
  403a0e:	8b53      	ldrh	r3, [r2, #26]
  403a10:	4298      	cmp	r0, r3
  403a12:	d962      	bls.n	403ada <indev_proc_press+0x20a>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
  403a14:	4b3c      	ldr	r3, [pc, #240]	; (403b08 <indev_proc_press+0x238>)
  403a16:	6818      	ldr	r0, [r3, #0]
  403a18:	69c3      	ldr	r3, [r0, #28]
  403a1a:	2110      	movs	r1, #16
  403a1c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403a1e:	4620      	mov	r0, r4
  403a20:	4b3b      	ldr	r3, [pc, #236]	; (403b10 <indev_proc_press+0x240>)
  403a22:	4798      	blx	r3
  403a24:	2800      	cmp	r0, #0
  403a26:	d158      	bne.n	403ada <indev_proc_press+0x20a>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  403a28:	2200      	movs	r2, #0
  403a2a:	2105      	movs	r1, #5
  403a2c:	4b36      	ldr	r3, [pc, #216]	; (403b08 <indev_proc_press+0x238>)
  403a2e:	6818      	ldr	r0, [r3, #0]
  403a30:	4b38      	ldr	r3, [pc, #224]	; (403b14 <indev_proc_press+0x244>)
  403a32:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403a34:	4620      	mov	r0, r4
  403a36:	4b36      	ldr	r3, [pc, #216]	; (403b10 <indev_proc_press+0x240>)
  403a38:	4798      	blx	r3
  403a3a:	2800      	cmp	r0, #0
  403a3c:	d14d      	bne.n	403ada <indev_proc_press+0x20a>
                proc->longpr_rep_timestamp = lv_tick_get();
  403a3e:	4b3b      	ldr	r3, [pc, #236]	; (403b2c <indev_proc_press+0x25c>)
  403a40:	4798      	blx	r3
  403a42:	6320      	str	r0, [r4, #48]	; 0x30
  403a44:	e049      	b.n	403ada <indev_proc_press+0x20a>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  403a46:	4628      	mov	r0, r5
  403a48:	4b39      	ldr	r3, [pc, #228]	; (403b30 <indev_proc_press+0x260>)
  403a4a:	4798      	blx	r3
  403a4c:	1d26      	adds	r6, r4, #4
  403a4e:	4631      	mov	r1, r6
  403a50:	4b38      	ldr	r3, [pc, #224]	; (403b34 <indev_proc_press+0x264>)
  403a52:	4798      	blx	r3
  403a54:	4b2c      	ldr	r3, [pc, #176]	; (403b08 <indev_proc_press+0x238>)
  403a56:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  403a58:	bb00      	cbnz	r0, 403a9c <indev_proc_press+0x1cc>
  403a5a:	4628      	mov	r0, r5
  403a5c:	4b36      	ldr	r3, [pc, #216]	; (403b38 <indev_proc_press+0x268>)
  403a5e:	4798      	blx	r3
  403a60:	4631      	mov	r1, r6
  403a62:	4b34      	ldr	r3, [pc, #208]	; (403b34 <indev_proc_press+0x264>)
  403a64:	4798      	blx	r3
  403a66:	4b28      	ldr	r3, [pc, #160]	; (403b08 <indev_proc_press+0x238>)
  403a68:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  403a6a:	b9b8      	cbnz	r0, 403a9c <indev_proc_press+0x1cc>
  403a6c:	4628      	mov	r0, r5
  403a6e:	4b33      	ldr	r3, [pc, #204]	; (403b3c <indev_proc_press+0x26c>)
  403a70:	4798      	blx	r3
  403a72:	4631      	mov	r1, r6
  403a74:	4b2f      	ldr	r3, [pc, #188]	; (403b34 <indev_proc_press+0x264>)
  403a76:	4798      	blx	r3
  403a78:	4b23      	ldr	r3, [pc, #140]	; (403b08 <indev_proc_press+0x238>)
  403a7a:	6018      	str	r0, [r3, #0]
  403a7c:	e00e      	b.n	403a9c <indev_proc_press+0x1cc>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
  403a7e:	2110      	movs	r1, #16
  403a80:	4618      	mov	r0, r3
  403a82:	4b2f      	ldr	r3, [pc, #188]	; (403b40 <indev_proc_press+0x270>)
  403a84:	4798      	blx	r3
    else if(proc->types.pointer.drag_in_prog == 0 &&
  403a86:	b988      	cbnz	r0, 403aac <indev_proc_press+0x1dc>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  403a88:	4628      	mov	r0, r5
  403a8a:	4b29      	ldr	r3, [pc, #164]	; (403b30 <indev_proc_press+0x260>)
  403a8c:	4798      	blx	r3
  403a8e:	1d26      	adds	r6, r4, #4
  403a90:	4631      	mov	r1, r6
  403a92:	4b28      	ldr	r3, [pc, #160]	; (403b34 <indev_proc_press+0x264>)
  403a94:	4798      	blx	r3
  403a96:	4b1c      	ldr	r3, [pc, #112]	; (403b08 <indev_proc_press+0x238>)
  403a98:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  403a9a:	b308      	cbz	r0, 403ae0 <indev_proc_press+0x210>
    if(new_obj_searched && proc->types.pointer.last_obj) {
  403a9c:	69e3      	ldr	r3, [r4, #28]
  403a9e:	b12b      	cbz	r3, 403aac <indev_proc_press+0x1dc>
        proc->types.pointer.drag_throw_vect.x = 0;
  403aa0:	2300      	movs	r3, #0
  403aa2:	82a3      	strh	r3, [r4, #20]
        proc->types.pointer.drag_throw_vect.y = 0;
  403aa4:	82e3      	strh	r3, [r4, #22]
        indev_drag_throw(proc);
  403aa6:	4620      	mov	r0, r4
  403aa8:	4b26      	ldr	r3, [pc, #152]	; (403b44 <indev_proc_press+0x274>)
  403aaa:	4798      	blx	r3
    if(indev_obj_act != proc->types.pointer.act_obj) {
  403aac:	69a5      	ldr	r5, [r4, #24]
  403aae:	4b16      	ldr	r3, [pc, #88]	; (403b08 <indev_proc_press+0x238>)
  403ab0:	681b      	ldr	r3, [r3, #0]
  403ab2:	429d      	cmp	r5, r3
  403ab4:	f43f af25 	beq.w	403902 <indev_proc_press+0x32>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
  403ab8:	88a3      	ldrh	r3, [r4, #4]
  403aba:	8123      	strh	r3, [r4, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
  403abc:	88e3      	ldrh	r3, [r4, #6]
  403abe:	8163      	strh	r3, [r4, #10]
        if(proc->types.pointer.act_obj != NULL) {
  403ac0:	2d00      	cmp	r5, #0
  403ac2:	d04b      	beq.n	403b5c <indev_proc_press+0x28c>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
  403ac4:	69eb      	ldr	r3, [r5, #28]
  403ac6:	4a11      	ldr	r2, [pc, #68]	; (403b0c <indev_proc_press+0x23c>)
  403ac8:	6812      	ldr	r2, [r2, #0]
  403aca:	210d      	movs	r1, #13
  403acc:	4628      	mov	r0, r5
  403ace:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403ad0:	4620      	mov	r0, r4
  403ad2:	4b0f      	ldr	r3, [pc, #60]	; (403b10 <indev_proc_press+0x240>)
  403ad4:	4798      	blx	r3
  403ad6:	2800      	cmp	r0, #0
  403ad8:	d036      	beq.n	403b48 <indev_proc_press+0x278>
}
  403ada:	b003      	add	sp, #12
  403adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  403ae0:	4628      	mov	r0, r5
  403ae2:	4b15      	ldr	r3, [pc, #84]	; (403b38 <indev_proc_press+0x268>)
  403ae4:	4798      	blx	r3
  403ae6:	4631      	mov	r1, r6
  403ae8:	4b12      	ldr	r3, [pc, #72]	; (403b34 <indev_proc_press+0x264>)
  403aea:	4798      	blx	r3
  403aec:	4b06      	ldr	r3, [pc, #24]	; (403b08 <indev_proc_press+0x238>)
  403aee:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  403af0:	2800      	cmp	r0, #0
  403af2:	d1d3      	bne.n	403a9c <indev_proc_press+0x1cc>
  403af4:	4628      	mov	r0, r5
  403af6:	4b11      	ldr	r3, [pc, #68]	; (403b3c <indev_proc_press+0x26c>)
  403af8:	4798      	blx	r3
  403afa:	4631      	mov	r1, r6
  403afc:	4b0d      	ldr	r3, [pc, #52]	; (403b34 <indev_proc_press+0x264>)
  403afe:	4798      	blx	r3
  403b00:	4b01      	ldr	r3, [pc, #4]	; (403b08 <indev_proc_press+0x238>)
  403b02:	6018      	str	r0, [r3, #0]
  403b04:	e7ca      	b.n	403a9c <indev_proc_press+0x1cc>
  403b06:	bf00      	nop
  403b08:	2040c3e0 	.word	0x2040c3e0
  403b0c:	2040c3dc 	.word	0x2040c3dc
  403b10:	00403311 	.word	0x00403311
  403b14:	00404e95 	.word	0x00404e95
  403b18:	0040332d 	.word	0x0040332d
  403b1c:	00405cd5 	.word	0x00405cd5
  403b20:	00405d63 	.word	0x00405d63
  403b24:	00404fa5 	.word	0x00404fa5
  403b28:	004144b1 	.word	0x004144b1
  403b2c:	00414495 	.word	0x00414495
  403b30:	00402e09 	.word	0x00402e09
  403b34:	00403805 	.word	0x00403805
  403b38:	00402ded 	.word	0x00402ded
  403b3c:	00402db5 	.word	0x00402db5
  403b40:	00406345 	.word	0x00406345
  403b44:	00403355 	.word	0x00403355
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
  403b48:	2200      	movs	r2, #0
  403b4a:	2102      	movs	r1, #2
  403b4c:	4628      	mov	r0, r5
  403b4e:	4b7b      	ldr	r3, [pc, #492]	; (403d3c <indev_proc_press+0x46c>)
  403b50:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403b52:	4620      	mov	r0, r4
  403b54:	4b7a      	ldr	r3, [pc, #488]	; (403d40 <indev_proc_press+0x470>)
  403b56:	4798      	blx	r3
  403b58:	2800      	cmp	r0, #0
  403b5a:	d1be      	bne.n	403ada <indev_proc_press+0x20a>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
  403b5c:	4b79      	ldr	r3, [pc, #484]	; (403d44 <indev_proc_press+0x474>)
  403b5e:	681b      	ldr	r3, [r3, #0]
  403b60:	61a3      	str	r3, [r4, #24]
        proc->types.pointer.last_obj = indev_obj_act;
  403b62:	61e3      	str	r3, [r4, #28]
        if(indev_obj_act != NULL) {
  403b64:	2b00      	cmp	r3, #0
  403b66:	f43f aecc 	beq.w	403902 <indev_proc_press+0x32>
            proc->pr_timestamp                 = lv_tick_get();
  403b6a:	4b77      	ldr	r3, [pc, #476]	; (403d48 <indev_proc_press+0x478>)
  403b6c:	4798      	blx	r3
  403b6e:	62e0      	str	r0, [r4, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
  403b70:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403b74:	f36f 0300 	bfc	r3, #0, #1
  403b78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
  403b7c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.drag_sum.x     = 0;
  403b80:	2300      	movs	r3, #0
  403b82:	8223      	strh	r3, [r4, #16]
            proc->types.pointer.drag_sum.y     = 0;
  403b84:	8263      	strh	r3, [r4, #18]
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  403b86:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  403b8a:	2103      	movs	r1, #3
  403b8c:	f361 0284 	bfi	r2, r1, #2, #3
            proc->types.pointer.gesture_sent   = 0;
  403b90:	f363 1245 	bfi	r2, r3, #5, #1
  403b94:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
  403b98:	84e3      	strh	r3, [r4, #38]	; 0x26
            proc->types.pointer.gesture_sum.y  = 0;
  403b9a:	8523      	strh	r3, [r4, #40]	; 0x28
            proc->types.pointer.vect.x         = 0;
  403b9c:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y         = 0;
  403b9e:	81e3      	strh	r3, [r4, #14]
            lv_obj_t * i        = indev_obj_act;
  403ba0:	4b68      	ldr	r3, [pc, #416]	; (403d44 <indev_proc_press+0x474>)
  403ba2:	681b      	ldr	r3, [r3, #0]
            while(i != NULL) {
  403ba4:	b183      	cbz	r3, 403bc8 <indev_proc_press+0x2f8>
  403ba6:	2500      	movs	r5, #0
                i = lv_obj_get_parent(i);
  403ba8:	4e68      	ldr	r6, [pc, #416]	; (403d4c <indev_proc_press+0x47c>)
                if(i->top) last_top = i;
  403baa:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
  403bae:	f012 0f20 	tst.w	r2, #32
  403bb2:	bf18      	it	ne
  403bb4:	461d      	movne	r5, r3
                i = lv_obj_get_parent(i);
  403bb6:	4618      	mov	r0, r3
  403bb8:	47b0      	blx	r6
            while(i != NULL) {
  403bba:	4603      	mov	r3, r0
  403bbc:	2800      	cmp	r0, #0
  403bbe:	d1f4      	bne.n	403baa <indev_proc_press+0x2da>
            if(last_top != NULL) {
  403bc0:	b115      	cbz	r5, 403bc8 <indev_proc_press+0x2f8>
                lv_obj_move_foreground(last_top);
  403bc2:	4628      	mov	r0, r5
  403bc4:	4b62      	ldr	r3, [pc, #392]	; (403d50 <indev_proc_press+0x480>)
  403bc6:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
  403bc8:	4b5e      	ldr	r3, [pc, #376]	; (403d44 <indev_proc_press+0x474>)
  403bca:	6818      	ldr	r0, [r3, #0]
  403bcc:	69c3      	ldr	r3, [r0, #28]
  403bce:	4a61      	ldr	r2, [pc, #388]	; (403d54 <indev_proc_press+0x484>)
  403bd0:	6812      	ldr	r2, [r2, #0]
  403bd2:	210b      	movs	r1, #11
  403bd4:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403bd6:	4620      	mov	r0, r4
  403bd8:	4b59      	ldr	r3, [pc, #356]	; (403d40 <indev_proc_press+0x470>)
  403bda:	4798      	blx	r3
  403bdc:	2800      	cmp	r0, #0
  403bde:	f47f af7c 	bne.w	403ada <indev_proc_press+0x20a>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  403be2:	2200      	movs	r2, #0
  403be4:	4611      	mov	r1, r2
  403be6:	4b57      	ldr	r3, [pc, #348]	; (403d44 <indev_proc_press+0x474>)
  403be8:	6818      	ldr	r0, [r3, #0]
  403bea:	4b54      	ldr	r3, [pc, #336]	; (403d3c <indev_proc_press+0x46c>)
  403bec:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403bee:	4620      	mov	r0, r4
  403bf0:	4b53      	ldr	r3, [pc, #332]	; (403d40 <indev_proc_press+0x470>)
  403bf2:	4798      	blx	r3
  403bf4:	2800      	cmp	r0, #0
  403bf6:	f47f af70 	bne.w	403ada <indev_proc_press+0x20a>
            if(indev_act->proc.wait_until_release) return;
  403bfa:	4b56      	ldr	r3, [pc, #344]	; (403d54 <indev_proc_press+0x484>)
  403bfc:	681d      	ldr	r5, [r3, #0]
  403bfe:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  403c02:	f013 0f08 	tst.w	r3, #8
  403c06:	f47f af68 	bne.w	403ada <indev_proc_press+0x20a>
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
  403c0a:	4f4e      	ldr	r7, [pc, #312]	; (403d44 <indev_proc_press+0x474>)
  403c0c:	6838      	ldr	r0, [r7, #0]
  403c0e:	4b52      	ldr	r3, [pc, #328]	; (403d58 <indev_proc_press+0x488>)
  403c10:	4798      	blx	r3
  403c12:	4606      	mov	r6, r0
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403c14:	2120      	movs	r1, #32
  403c16:	6838      	ldr	r0, [r7, #0]
  403c18:	4b50      	ldr	r3, [pc, #320]	; (403d5c <indev_proc_press+0x48c>)
  403c1a:	4798      	blx	r3
  403c1c:	b9f8      	cbnz	r0, 403c5e <indev_proc_press+0x38e>
  403c1e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403c20:	429e      	cmp	r6, r3
  403c22:	d01c      	beq.n	403c5e <indev_proc_press+0x38e>
            indev_click_focus(&indev_act->proc);
  403c24:	f105 071c 	add.w	r7, r5, #28
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
  403c28:	4630      	mov	r0, r6
  403c2a:	4b4d      	ldr	r3, [pc, #308]	; (403d60 <indev_proc_press+0x490>)
  403c2c:	4798      	blx	r3
  403c2e:	4680      	mov	r8, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403c30:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  403c32:	2800      	cmp	r0, #0
  403c34:	f000 828b 	beq.w	40414e <indev_proc_press+0x87e>
  403c38:	4b49      	ldr	r3, [pc, #292]	; (403d60 <indev_proc_press+0x490>)
  403c3a:	4798      	blx	r3
        if(g_act == g_prev) {
  403c3c:	4580      	cmp	r8, r0
  403c3e:	d015      	beq.n	403c6c <indev_proc_press+0x39c>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403c40:	2800      	cmp	r0, #0
  403c42:	f000 8288 	beq.w	404156 <indev_proc_press+0x886>
                if(proc->types.pointer.last_pressed) {
  403c46:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  403c48:	2800      	cmp	r0, #0
  403c4a:	d04e      	beq.n	403cea <indev_proc_press+0x41a>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
  403c4c:	2200      	movs	r2, #0
  403c4e:	2115      	movs	r1, #21
  403c50:	4b44      	ldr	r3, [pc, #272]	; (403d64 <indev_proc_press+0x494>)
  403c52:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403c54:	4638      	mov	r0, r7
  403c56:	4b3a      	ldr	r3, [pc, #232]	; (403d40 <indev_proc_press+0x470>)
  403c58:	4798      	blx	r3
  403c5a:	2800      	cmp	r0, #0
  403c5c:	d03b      	beq.n	403cd6 <indev_proc_press+0x406>
            if(indev_reset_check(proc)) return;
  403c5e:	4620      	mov	r0, r4
  403c60:	4b37      	ldr	r3, [pc, #220]	; (403d40 <indev_proc_press+0x470>)
  403c62:	4798      	blx	r3
  403c64:	2800      	cmp	r0, #0
  403c66:	f43f ae4c 	beq.w	403902 <indev_proc_press+0x32>
  403c6a:	e736      	b.n	403ada <indev_proc_press+0x20a>
            if(g_act) {
  403c6c:	f1b8 0f00 	cmp.w	r8, #0
  403c70:	d008      	beq.n	403c84 <indev_proc_press+0x3b4>
                lv_group_focus_obj(obj_to_focus);
  403c72:	4630      	mov	r0, r6
  403c74:	4b3c      	ldr	r3, [pc, #240]	; (403d68 <indev_proc_press+0x498>)
  403c76:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403c78:	4638      	mov	r0, r7
  403c7a:	4b31      	ldr	r3, [pc, #196]	; (403d40 <indev_proc_press+0x470>)
  403c7c:	4798      	blx	r3
  403c7e:	2800      	cmp	r0, #0
  403c80:	d03e      	beq.n	403d00 <indev_proc_press+0x430>
  403c82:	e7ec      	b.n	403c5e <indev_proc_press+0x38e>
                if(proc->types.pointer.last_pressed) {
  403c84:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  403c86:	b190      	cbz	r0, 403cae <indev_proc_press+0x3de>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403c88:	2200      	movs	r2, #0
  403c8a:	2117      	movs	r1, #23
  403c8c:	4b35      	ldr	r3, [pc, #212]	; (403d64 <indev_proc_press+0x494>)
  403c8e:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403c90:	4638      	mov	r0, r7
  403c92:	4b2b      	ldr	r3, [pc, #172]	; (403d40 <indev_proc_press+0x470>)
  403c94:	4798      	blx	r3
  403c96:	2800      	cmp	r0, #0
  403c98:	d1e1      	bne.n	403c5e <indev_proc_press+0x38e>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403c9a:	2200      	movs	r2, #0
  403c9c:	210e      	movs	r1, #14
  403c9e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  403ca0:	4b26      	ldr	r3, [pc, #152]	; (403d3c <indev_proc_press+0x46c>)
  403ca2:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403ca4:	4638      	mov	r0, r7
  403ca6:	4b26      	ldr	r3, [pc, #152]	; (403d40 <indev_proc_press+0x470>)
  403ca8:	4798      	blx	r3
  403caa:	2800      	cmp	r0, #0
  403cac:	d1d7      	bne.n	403c5e <indev_proc_press+0x38e>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403cae:	2200      	movs	r2, #0
  403cb0:	2116      	movs	r1, #22
  403cb2:	4630      	mov	r0, r6
  403cb4:	4b2b      	ldr	r3, [pc, #172]	; (403d64 <indev_proc_press+0x494>)
  403cb6:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403cb8:	4638      	mov	r0, r7
  403cba:	4b21      	ldr	r3, [pc, #132]	; (403d40 <indev_proc_press+0x470>)
  403cbc:	4798      	blx	r3
  403cbe:	2800      	cmp	r0, #0
  403cc0:	d1cd      	bne.n	403c5e <indev_proc_press+0x38e>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403cc2:	2200      	movs	r2, #0
  403cc4:	210d      	movs	r1, #13
  403cc6:	4630      	mov	r0, r6
  403cc8:	4b1c      	ldr	r3, [pc, #112]	; (403d3c <indev_proc_press+0x46c>)
  403cca:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403ccc:	4638      	mov	r0, r7
  403cce:	4b1c      	ldr	r3, [pc, #112]	; (403d40 <indev_proc_press+0x470>)
  403cd0:	4798      	blx	r3
  403cd2:	b1a8      	cbz	r0, 403d00 <indev_proc_press+0x430>
  403cd4:	e7c3      	b.n	403c5e <indev_proc_press+0x38e>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
  403cd6:	2200      	movs	r2, #0
  403cd8:	210f      	movs	r1, #15
  403cda:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  403cdc:	4b17      	ldr	r3, [pc, #92]	; (403d3c <indev_proc_press+0x46c>)
  403cde:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403ce0:	4638      	mov	r0, r7
  403ce2:	4b17      	ldr	r3, [pc, #92]	; (403d40 <indev_proc_press+0x470>)
  403ce4:	4798      	blx	r3
  403ce6:	2800      	cmp	r0, #0
  403ce8:	d1b9      	bne.n	403c5e <indev_proc_press+0x38e>
            if(g_act) {
  403cea:	f1b8 0f00 	cmp.w	r8, #0
  403cee:	d009      	beq.n	403d04 <indev_proc_press+0x434>
                lv_group_focus_obj(obj_to_focus);
  403cf0:	4630      	mov	r0, r6
  403cf2:	4b1d      	ldr	r3, [pc, #116]	; (403d68 <indev_proc_press+0x498>)
  403cf4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403cf6:	4638      	mov	r0, r7
  403cf8:	4b11      	ldr	r3, [pc, #68]	; (403d40 <indev_proc_press+0x470>)
  403cfa:	4798      	blx	r3
  403cfc:	2800      	cmp	r0, #0
  403cfe:	d1ae      	bne.n	403c5e <indev_proc_press+0x38e>
        proc->types.pointer.last_pressed = obj_to_focus;
  403d00:	63ee      	str	r6, [r5, #60]	; 0x3c
  403d02:	e7ac      	b.n	403c5e <indev_proc_press+0x38e>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403d04:	2200      	movs	r2, #0
  403d06:	2116      	movs	r1, #22
  403d08:	4630      	mov	r0, r6
  403d0a:	4b16      	ldr	r3, [pc, #88]	; (403d64 <indev_proc_press+0x494>)
  403d0c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403d0e:	4638      	mov	r0, r7
  403d10:	4b0b      	ldr	r3, [pc, #44]	; (403d40 <indev_proc_press+0x470>)
  403d12:	4798      	blx	r3
  403d14:	2800      	cmp	r0, #0
  403d16:	d1a2      	bne.n	403c5e <indev_proc_press+0x38e>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403d18:	2200      	movs	r2, #0
  403d1a:	210d      	movs	r1, #13
  403d1c:	4630      	mov	r0, r6
  403d1e:	4b07      	ldr	r3, [pc, #28]	; (403d3c <indev_proc_press+0x46c>)
  403d20:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403d22:	4638      	mov	r0, r7
  403d24:	4b06      	ldr	r3, [pc, #24]	; (403d40 <indev_proc_press+0x470>)
  403d26:	4798      	blx	r3
  403d28:	2800      	cmp	r0, #0
  403d2a:	d0e9      	beq.n	403d00 <indev_proc_press+0x430>
  403d2c:	e797      	b.n	403c5e <indev_proc_press+0x38e>
        proc->types.pointer.drag_throw_vect.x++;
  403d2e:	3201      	adds	r2, #1
  403d30:	82a2      	strh	r2, [r4, #20]
  403d32:	e605      	b.n	403940 <indev_proc_press+0x70>
        proc->types.pointer.drag_throw_vect.y++;
  403d34:	3301      	adds	r3, #1
  403d36:	82e3      	strh	r3, [r4, #22]
  403d38:	e609      	b.n	40394e <indev_proc_press+0x7e>
  403d3a:	bf00      	nop
  403d3c:	00404e95 	.word	0x00404e95
  403d40:	00403311 	.word	0x00403311
  403d44:	2040c3e0 	.word	0x2040c3e0
  403d48:	00414495 	.word	0x00414495
  403d4c:	00404fa5 	.word	0x00404fa5
  403d50:	004055dd 	.word	0x004055dd
  403d54:	2040c3dc 	.word	0x2040c3dc
  403d58:	004088b1 	.word	0x004088b1
  403d5c:	00406345 	.word	0x00406345
  403d60:	004072a9 	.word	0x004072a9
  403d64:	00404efd 	.word	0x00404efd
  403d68:	004031c5 	.word	0x004031c5
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  403d6c:	4630      	mov	r0, r6
  403d6e:	4ba3      	ldr	r3, [pc, #652]	; (403ffc <indev_proc_press+0x72c>)
  403d70:	4798      	blx	r3
  403d72:	4607      	mov	r7, r0
    if(proc->types.pointer.drag_limit_out == 0) {
  403d74:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403d78:	f013 0f01 	tst.w	r3, #1
  403d7c:	d134      	bne.n	403de8 <indev_proc_press+0x518>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
  403d7e:	8a22      	ldrh	r2, [r4, #16]
  403d80:	89a3      	ldrh	r3, [r4, #12]
  403d82:	441a      	add	r2, r3
  403d84:	b212      	sxth	r2, r2
  403d86:	8222      	strh	r2, [r4, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
  403d88:	8a63      	ldrh	r3, [r4, #18]
  403d8a:	89e1      	ldrh	r1, [r4, #14]
  403d8c:	440b      	add	r3, r1
  403d8e:	b21b      	sxth	r3, r3
  403d90:	8263      	strh	r3, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
  403d92:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
  403d96:	1eb9      	subs	r1, r7, #2
  403d98:	b2c9      	uxtb	r1, r1
  403d9a:	2901      	cmp	r1, #1
  403d9c:	bf8c      	ite	hi
  403d9e:	2100      	movhi	r1, #0
  403da0:	2101      	movls	r1, #1
        if(allowed_dirs == LV_DRAG_DIR_ONE) {
  403da2:	2f04      	cmp	r7, #4
  403da4:	d069      	beq.n	403e7a <indev_proc_press+0x5aa>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
  403da6:	2801      	cmp	r0, #1
  403da8:	d107      	bne.n	403dba <indev_proc_press+0x4ea>
  403daa:	2a00      	cmp	r2, #0
  403dac:	bfb8      	it	lt
  403dae:	4252      	neglt	r2, r2
  403db0:	4893      	ldr	r0, [pc, #588]	; (404000 <indev_proc_press+0x730>)
  403db2:	6800      	ldr	r0, [r0, #0]
  403db4:	7d00      	ldrb	r0, [r0, #20]
  403db6:	4282      	cmp	r2, r0
  403db8:	da0b      	bge.n	403dd2 <indev_proc_press+0x502>
  403dba:	2900      	cmp	r1, #0
  403dbc:	f43f adff 	beq.w	4039be <indev_proc_press+0xee>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
  403dc0:	2b00      	cmp	r3, #0
  403dc2:	bfb8      	it	lt
  403dc4:	425b      	neglt	r3, r3
  403dc6:	4a8e      	ldr	r2, [pc, #568]	; (404000 <indev_proc_press+0x730>)
  403dc8:	6812      	ldr	r2, [r2, #0]
  403dca:	7d12      	ldrb	r2, [r2, #20]
  403dcc:	4293      	cmp	r3, r2
  403dce:	f6ff adf6 	blt.w	4039be <indev_proc_press+0xee>
            proc->types.pointer.drag_limit_out = 1;
  403dd2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403dd6:	f043 0301 	orr.w	r3, r3, #1
  403dda:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    if(proc->types.pointer.drag_limit_out != 0) {
  403dde:	f013 0f01 	tst.w	r3, #1
  403de2:	f43f adec 	beq.w	4039be <indev_proc_press+0xee>
            drag_just_started                   = true;
  403de6:	4645      	mov	r5, r8
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
  403de8:	68e3      	ldr	r3, [r4, #12]
  403dea:	2b00      	cmp	r3, #0
  403dec:	f43f ade7 	beq.w	4039be <indev_proc_press+0xee>
            lv_coord_t prev_x     = drag_obj->coords.x1;
  403df0:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
            lv_coord_t prev_y     = drag_obj->coords.y1;
  403df4:	f9b6 b012 	ldrsh.w	fp, [r6, #18]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  403df8:	4630      	mov	r0, r6
  403dfa:	f8df 822c 	ldr.w	r8, [pc, #556]	; 404028 <indev_proc_press+0x758>
  403dfe:	47c0      	blx	r8
  403e00:	4b80      	ldr	r3, [pc, #512]	; (404004 <indev_proc_press+0x734>)
  403e02:	4798      	blx	r3
  403e04:	9000      	str	r0, [sp, #0]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  403e06:	4630      	mov	r0, r6
  403e08:	47c0      	blx	r8
  403e0a:	4b7f      	ldr	r3, [pc, #508]	; (404008 <indev_proc_press+0x738>)
  403e0c:	4798      	blx	r3
  403e0e:	9001      	str	r0, [sp, #4]
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
  403e10:	4630      	mov	r0, r6
  403e12:	4b7e      	ldr	r3, [pc, #504]	; (40400c <indev_proc_press+0x73c>)
  403e14:	4798      	blx	r3
  403e16:	4680      	mov	r8, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
  403e18:	4630      	mov	r0, r6
  403e1a:	4b7d      	ldr	r3, [pc, #500]	; (404010 <indev_proc_press+0x740>)
  403e1c:	4798      	blx	r3
  403e1e:	4681      	mov	r9, r0
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
  403e20:	2f03      	cmp	r7, #3
  403e22:	d036      	beq.n	403e92 <indev_proc_press+0x5c2>
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
  403e24:	2f01      	cmp	r7, #1
  403e26:	d07b      	beq.n	403f20 <indev_proc_press+0x650>
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
  403e28:	2f02      	cmp	r7, #2
  403e2a:	f000 8089 	beq.w	403f40 <indev_proc_press+0x670>
                if(drag_just_started) {
  403e2e:	2f04      	cmp	r7, #4
  403e30:	d11b      	bne.n	403e6a <indev_proc_press+0x59a>
  403e32:	b1d5      	cbz	r5, 403e6a <indev_proc_press+0x59a>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  403e34:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  403e38:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  403e3c:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
  403e40:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
  403e44:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
  403e48:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
  403e4c:	4288      	cmp	r0, r1
  403e4e:	f340 8086 	ble.w	403f5e <indev_proc_press+0x68e>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  403e52:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e56:	2101      	movs	r1, #1
  403e58:	f361 0384 	bfi	r3, r1, #2, #3
  403e5c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
  403e60:	2300      	movs	r3, #0
  403e62:	8263      	strh	r3, [r4, #18]
                        act_x += proc->types.pointer.drag_sum.x;
  403e64:	4490      	add	r8, r2
  403e66:	fa0f f888 	sxth.w	r8, r8
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  403e6a:	2f04      	cmp	r7, #4
  403e6c:	f000 8084 	beq.w	403f78 <indev_proc_press+0x6a8>
            if(allowed_dirs == LV_DRAG_DIR_VER ||
  403e70:	1ebb      	subs	r3, r7, #2
  403e72:	b2db      	uxtb	r3, r3
  403e74:	2b01      	cmp	r3, #1
  403e76:	d826      	bhi.n	403ec6 <indev_proc_press+0x5f6>
  403e78:	e096      	b.n	403fa8 <indev_proc_press+0x6d8>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  403e7a:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
  403e7e:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
  403e82:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  403e86:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  403e8a:	4285      	cmp	r5, r0
  403e8c:	dc8d      	bgt.n	403daa <indev_proc_press+0x4da>
                ver_en = true;
  403e8e:	4641      	mov	r1, r8
  403e90:	e793      	b.n	403dba <indev_proc_press+0x4ea>
                if(drag_just_started) {
  403e92:	b175      	cbz	r5, 403eb2 <indev_proc_press+0x5e2>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  403e94:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e98:	2203      	movs	r2, #3
  403e9a:	f362 0384 	bfi	r3, r2, #2, #3
  403e9e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
  403ea2:	8a23      	ldrh	r3, [r4, #16]
  403ea4:	4498      	add	r8, r3
  403ea6:	fa0f f888 	sxth.w	r8, r8
                    act_y += proc->types.pointer.drag_sum.y;
  403eaa:	8a63      	ldrh	r3, [r4, #18]
  403eac:	4499      	add	r9, r3
  403eae:	fa0f f989 	sxth.w	r9, r9
                act_x += proc->types.pointer.vect.x;
  403eb2:	89a3      	ldrh	r3, [r4, #12]
  403eb4:	4498      	add	r8, r3
  403eb6:	fa0f f888 	sxth.w	r8, r8
            if(allowed_dirs == LV_DRAG_DIR_VER ||
  403eba:	1ebb      	subs	r3, r7, #2
  403ebc:	b2db      	uxtb	r3, r3
  403ebe:	2b01      	cmp	r3, #1
  403ec0:	d972      	bls.n	403fa8 <indev_proc_press+0x6d8>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  403ec2:	2f04      	cmp	r7, #4
  403ec4:	d064      	beq.n	403f90 <indev_proc_press+0x6c0>
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
  403ec6:	4b4e      	ldr	r3, [pc, #312]	; (404000 <indev_proc_press+0x730>)
  403ec8:	681b      	ldr	r3, [r3, #0]
            uint16_t inv_buf_size =
  403eca:	68d8      	ldr	r0, [r3, #12]
  403ecc:	4b51      	ldr	r3, [pc, #324]	; (404014 <indev_proc_press+0x744>)
  403ece:	4798      	blx	r3
  403ed0:	4607      	mov	r7, r0
            lv_obj_set_pos(drag_obj, act_x, act_y);
  403ed2:	464a      	mov	r2, r9
  403ed4:	4641      	mov	r1, r8
  403ed6:	4630      	mov	r0, r6
  403ed8:	4b4f      	ldr	r3, [pc, #316]	; (404018 <indev_proc_press+0x748>)
  403eda:	4798      	blx	r3
            proc->types.pointer.drag_in_prog = 1;
  403edc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403ee0:	f043 0302 	orr.w	r3, r3, #2
  403ee4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  403ee8:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  403eec:	4553      	cmp	r3, sl
  403eee:	d060      	beq.n	403fb2 <indev_proc_press+0x6e2>
            if(drag_just_started) {
  403ef0:	2d00      	cmp	r5, #0
  403ef2:	f43f ad64 	beq.w	4039be <indev_proc_press+0xee>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
  403ef6:	69f3      	ldr	r3, [r6, #28]
  403ef8:	4a41      	ldr	r2, [pc, #260]	; (404000 <indev_proc_press+0x730>)
  403efa:	6812      	ldr	r2, [r2, #0]
  403efc:	2111      	movs	r1, #17
  403efe:	4630      	mov	r0, r6
  403f00:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403f02:	4620      	mov	r0, r4
  403f04:	4b45      	ldr	r3, [pc, #276]	; (40401c <indev_proc_press+0x74c>)
  403f06:	4798      	blx	r3
  403f08:	2800      	cmp	r0, #0
  403f0a:	f47f ad58 	bne.w	4039be <indev_proc_press+0xee>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
  403f0e:	2200      	movs	r2, #0
  403f10:	2108      	movs	r1, #8
  403f12:	4630      	mov	r0, r6
  403f14:	4b42      	ldr	r3, [pc, #264]	; (404020 <indev_proc_press+0x750>)
  403f16:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403f18:	4620      	mov	r0, r4
  403f1a:	4b40      	ldr	r3, [pc, #256]	; (40401c <indev_proc_press+0x74c>)
  403f1c:	4798      	blx	r3
  403f1e:	e54e      	b.n	4039be <indev_proc_press+0xee>
                if(drag_just_started) {
  403f20:	2d00      	cmp	r5, #0
  403f22:	d0c6      	beq.n	403eb2 <indev_proc_press+0x5e2>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  403f24:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403f28:	2201      	movs	r2, #1
  403f2a:	f362 0384 	bfi	r3, r2, #2, #3
  403f2e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
  403f32:	2300      	movs	r3, #0
  403f34:	8263      	strh	r3, [r4, #18]
                    act_x += proc->types.pointer.drag_sum.x;
  403f36:	8a23      	ldrh	r3, [r4, #16]
  403f38:	4498      	add	r8, r3
  403f3a:	fa0f f888 	sxth.w	r8, r8
  403f3e:	e7b8      	b.n	403eb2 <indev_proc_press+0x5e2>
                if(drag_just_started) {
  403f40:	b395      	cbz	r5, 403fa8 <indev_proc_press+0x6d8>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  403f42:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403f46:	2202      	movs	r2, #2
  403f48:	f362 0384 	bfi	r3, r2, #2, #3
  403f4c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
  403f50:	2300      	movs	r3, #0
  403f52:	8223      	strh	r3, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
  403f54:	8a63      	ldrh	r3, [r4, #18]
  403f56:	4499      	add	r9, r3
  403f58:	fa0f f989 	sxth.w	r9, r9
  403f5c:	e024      	b.n	403fa8 <indev_proc_press+0x6d8>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  403f5e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  403f62:	2102      	movs	r1, #2
  403f64:	f361 0284 	bfi	r2, r1, #2, #3
  403f68:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
  403f6c:	2200      	movs	r2, #0
  403f6e:	8222      	strh	r2, [r4, #16]
                        act_y += proc->types.pointer.drag_sum.y;
  403f70:	4499      	add	r9, r3
  403f72:	fa0f f989 	sxth.w	r9, r9
  403f76:	e778      	b.n	403e6a <indev_proc_press+0x59a>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  403f78:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  403f7c:	2a00      	cmp	r2, #0
  403f7e:	bfb8      	it	lt
  403f80:	4252      	neglt	r2, r2
  403f82:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  403f86:	2b00      	cmp	r3, #0
  403f88:	bfb8      	it	lt
  403f8a:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  403f8c:	429a      	cmp	r2, r3
  403f8e:	dc90      	bgt.n	403eb2 <indev_proc_press+0x5e2>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  403f90:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  403f94:	2a00      	cmp	r2, #0
  403f96:	bfb8      	it	lt
  403f98:	4252      	neglt	r2, r2
  403f9a:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  403f9e:	2b00      	cmp	r3, #0
  403fa0:	bfb8      	it	lt
  403fa2:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  403fa4:	429a      	cmp	r2, r3
  403fa6:	da8e      	bge.n	403ec6 <indev_proc_press+0x5f6>
                act_y += proc->types.pointer.vect.y;
  403fa8:	89e3      	ldrh	r3, [r4, #14]
  403faa:	4499      	add	r9, r3
  403fac:	fa0f f989 	sxth.w	r9, r9
  403fb0:	e789      	b.n	403ec6 <indev_proc_press+0x5f6>
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  403fb2:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  403fb6:	455b      	cmp	r3, fp
  403fb8:	d19a      	bne.n	403ef0 <indev_proc_press+0x620>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  403fba:	4630      	mov	r0, r6
  403fbc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 404028 <indev_proc_press+0x758>
  403fc0:	47c0      	blx	r8
  403fc2:	4b10      	ldr	r3, [pc, #64]	; (404004 <indev_proc_press+0x734>)
  403fc4:	4798      	blx	r3
  403fc6:	4681      	mov	r9, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  403fc8:	4630      	mov	r0, r6
  403fca:	47c0      	blx	r8
  403fcc:	4b0e      	ldr	r3, [pc, #56]	; (404008 <indev_proc_press+0x738>)
  403fce:	4798      	blx	r3
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
  403fd0:	9b00      	ldr	r3, [sp, #0]
  403fd2:	454b      	cmp	r3, r9
  403fd4:	d18c      	bne.n	403ef0 <indev_proc_press+0x620>
  403fd6:	9b01      	ldr	r3, [sp, #4]
  403fd8:	4283      	cmp	r3, r0
  403fda:	d189      	bne.n	403ef0 <indev_proc_press+0x620>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
  403fdc:	f8df 8020 	ldr.w	r8, [pc, #32]	; 404000 <indev_proc_press+0x730>
  403fe0:	f8d8 3000 	ldr.w	r3, [r8]
  403fe4:	68d8      	ldr	r0, [r3, #12]
  403fe6:	4b0b      	ldr	r3, [pc, #44]	; (404014 <indev_proc_press+0x744>)
  403fe8:	4798      	blx	r3
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
  403fea:	1bc1      	subs	r1, r0, r7
  403fec:	f8d8 3000 	ldr.w	r3, [r8]
  403ff0:	b289      	uxth	r1, r1
  403ff2:	68d8      	ldr	r0, [r3, #12]
  403ff4:	4b0b      	ldr	r3, [pc, #44]	; (404024 <indev_proc_press+0x754>)
  403ff6:	4798      	blx	r3
  403ff8:	e77a      	b.n	403ef0 <indev_proc_press+0x620>
  403ffa:	bf00      	nop
  403ffc:	00405d01 	.word	0x00405d01
  404000:	2040c3dc 	.word	0x2040c3dc
  404004:	0040518d 	.word	0x0040518d
  404008:	004051bd 	.word	0x004051bd
  40400c:	0040510d 	.word	0x0040510d
  404010:	0040514d 	.word	0x0040514d
  404014:	0041419d 	.word	0x0041419d
  404018:	00405645 	.word	0x00405645
  40401c:	00403311 	.word	0x00403311
  404020:	00404e95 	.word	0x00404e95
  404024:	004141a7 	.word	0x004141a7
  404028:	00404fa5 	.word	0x00404fa5
    if(gesture_obj == NULL) return;
  40402c:	2d00      	cmp	r5, #0
  40402e:	f43f acd9 	beq.w	4039e4 <indev_proc_press+0x114>
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  404032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404036:	4a55      	ldr	r2, [pc, #340]	; (40418c <indev_proc_press+0x8bc>)
  404038:	6812      	ldr	r2, [r2, #0]
  40403a:	7d91      	ldrb	r1, [r2, #22]
  40403c:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  404040:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  404044:	4288      	cmp	r0, r1
  404046:	da09      	bge.n	40405c <indev_proc_press+0x78c>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
  404048:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
  40404c:	2800      	cmp	r0, #0
  40404e:	bfb8      	it	lt
  404050:	4240      	neglt	r0, r0
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  404052:	4281      	cmp	r1, r0
  404054:	dd02      	ble.n	40405c <indev_proc_press+0x78c>
        proc->types.pointer.gesture_sum.x = 0;
  404056:	2100      	movs	r1, #0
  404058:	84e1      	strh	r1, [r4, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
  40405a:	8521      	strh	r1, [r4, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
  40405c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
  40405e:	440b      	add	r3, r1
  404060:	b21b      	sxth	r3, r3
  404062:	84e3      	strh	r3, [r4, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
  404064:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  404066:	89e0      	ldrh	r0, [r4, #14]
  404068:	4401      	add	r1, r0
  40406a:	b209      	sxth	r1, r1
  40406c:	8521      	strh	r1, [r4, #40]	; 0x28
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  40406e:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
  404072:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  404076:	7dd0      	ldrb	r0, [r2, #23]
  404078:	4286      	cmp	r6, r0
  40407a:	dc06      	bgt.n	40408a <indev_proc_press+0x7ba>
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
  40407c:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
  404080:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  404084:	42b8      	cmp	r0, r7
  404086:	f6bf acad 	bge.w	4039e4 <indev_proc_press+0x114>
        proc->types.pointer.gesture_sent = 1;
  40408a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
  40408e:	f040 0020 	orr.w	r0, r0, #32
  404092:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
  404096:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
  40409a:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
  40409e:	4286      	cmp	r6, r0
  4040a0:	dd18      	ble.n	4040d4 <indev_proc_press+0x804>
            if(proc->types.pointer.gesture_sum.x > 0)
  4040a2:	2b00      	cmp	r3, #0
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
  4040a4:	bfcc      	ite	gt
  4040a6:	2303      	movgt	r3, #3
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
  4040a8:	2302      	movle	r3, #2
  4040aa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
  4040ae:	69eb      	ldr	r3, [r5, #28]
  4040b0:	2114      	movs	r1, #20
  4040b2:	4628      	mov	r0, r5
  4040b4:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4040b6:	4620      	mov	r0, r4
  4040b8:	4b35      	ldr	r3, [pc, #212]	; (404190 <indev_proc_press+0x8c0>)
  4040ba:	4798      	blx	r3
  4040bc:	2800      	cmp	r0, #0
  4040be:	f47f ac91 	bne.w	4039e4 <indev_proc_press+0x114>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
  4040c2:	2200      	movs	r2, #0
  4040c4:	210b      	movs	r1, #11
  4040c6:	4628      	mov	r0, r5
  4040c8:	4b32      	ldr	r3, [pc, #200]	; (404194 <indev_proc_press+0x8c4>)
  4040ca:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4040cc:	4620      	mov	r0, r4
  4040ce:	4b30      	ldr	r3, [pc, #192]	; (404190 <indev_proc_press+0x8c0>)
  4040d0:	4798      	blx	r3
  4040d2:	e487      	b.n	4039e4 <indev_proc_press+0x114>
            if(proc->types.pointer.gesture_sum.y > 0)
  4040d4:	2900      	cmp	r1, #0
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
  4040d6:	bfcc      	ite	gt
  4040d8:	2301      	movgt	r3, #1
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
  4040da:	2300      	movle	r3, #0
  4040dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  4040e0:	e7e5      	b.n	4040ae <indev_proc_press+0x7de>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
  4040e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4040e4:	4b2c      	ldr	r3, [pc, #176]	; (404198 <indev_proc_press+0x8c8>)
  4040e6:	4798      	blx	r3
  4040e8:	4b28      	ldr	r3, [pc, #160]	; (40418c <indev_proc_press+0x8bc>)
  4040ea:	681a      	ldr	r2, [r3, #0]
  4040ec:	8b13      	ldrh	r3, [r2, #24]
  4040ee:	4298      	cmp	r0, r3
  4040f0:	d80c      	bhi.n	40410c <indev_proc_press+0x83c>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
  4040f2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4040f6:	f013 0f02 	tst.w	r3, #2
  4040fa:	f47f acee 	bne.w	403ada <indev_proc_press+0x20a>
  4040fe:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404102:	f013 0f01 	tst.w	r3, #1
  404106:	f43f ace8 	beq.w	403ada <indev_proc_press+0x20a>
  40410a:	e47b      	b.n	403a04 <indev_proc_press+0x134>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
  40410c:	4b23      	ldr	r3, [pc, #140]	; (40419c <indev_proc_press+0x8cc>)
  40410e:	6818      	ldr	r0, [r3, #0]
  404110:	69c3      	ldr	r3, [r0, #28]
  404112:	210f      	movs	r1, #15
  404114:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404116:	4620      	mov	r0, r4
  404118:	4b1d      	ldr	r3, [pc, #116]	; (404190 <indev_proc_press+0x8c0>)
  40411a:	4798      	blx	r3
  40411c:	2800      	cmp	r0, #0
  40411e:	f47f acdc 	bne.w	403ada <indev_proc_press+0x20a>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  404122:	2200      	movs	r2, #0
  404124:	2104      	movs	r1, #4
  404126:	4b1d      	ldr	r3, [pc, #116]	; (40419c <indev_proc_press+0x8cc>)
  404128:	6818      	ldr	r0, [r3, #0]
  40412a:	4b1a      	ldr	r3, [pc, #104]	; (404194 <indev_proc_press+0x8c4>)
  40412c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  40412e:	4620      	mov	r0, r4
  404130:	4b17      	ldr	r3, [pc, #92]	; (404190 <indev_proc_press+0x8c0>)
  404132:	4798      	blx	r3
  404134:	2800      	cmp	r0, #0
  404136:	f47f acd0 	bne.w	403ada <indev_proc_press+0x20a>
                proc->long_pr_sent = 1;
  40413a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40413e:	f043 0301 	orr.w	r3, r3, #1
  404142:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                proc->longpr_rep_timestamp = lv_tick_get();
  404146:	4b16      	ldr	r3, [pc, #88]	; (4041a0 <indev_proc_press+0x8d0>)
  404148:	4798      	blx	r3
  40414a:	6320      	str	r0, [r4, #48]	; 0x30
  40414c:	e7d1      	b.n	4040f2 <indev_proc_press+0x822>
        if(g_act == g_prev) {
  40414e:	f1b8 0f00 	cmp.w	r8, #0
  404152:	f43f adac 	beq.w	403cae <indev_proc_press+0x3de>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  404156:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  404158:	2800      	cmp	r0, #0
  40415a:	f43f adc6 	beq.w	403cea <indev_proc_press+0x41a>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  40415e:	2200      	movs	r2, #0
  404160:	2117      	movs	r1, #23
  404162:	4b10      	ldr	r3, [pc, #64]	; (4041a4 <indev_proc_press+0x8d4>)
  404164:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404166:	4638      	mov	r0, r7
  404168:	4b09      	ldr	r3, [pc, #36]	; (404190 <indev_proc_press+0x8c0>)
  40416a:	4798      	blx	r3
  40416c:	2800      	cmp	r0, #0
  40416e:	f47f ad76 	bne.w	403c5e <indev_proc_press+0x38e>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  404172:	2200      	movs	r2, #0
  404174:	210e      	movs	r1, #14
  404176:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  404178:	4b06      	ldr	r3, [pc, #24]	; (404194 <indev_proc_press+0x8c4>)
  40417a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  40417c:	4638      	mov	r0, r7
  40417e:	4b04      	ldr	r3, [pc, #16]	; (404190 <indev_proc_press+0x8c0>)
  404180:	4798      	blx	r3
  404182:	2800      	cmp	r0, #0
  404184:	f43f adb1 	beq.w	403cea <indev_proc_press+0x41a>
  404188:	e569      	b.n	403c5e <indev_proc_press+0x38e>
  40418a:	4770      	bx	lr
  40418c:	2040c3dc 	.word	0x2040c3dc
  404190:	00403311 	.word	0x00403311
  404194:	00404e95 	.word	0x00404e95
  404198:	004144b1 	.word	0x004144b1
  40419c:	2040c3e0 	.word	0x2040c3e0
  4041a0:	00414495 	.word	0x00414495
  4041a4:	00404efd 	.word	0x00404efd

004041a8 <_lv_indev_read_task>:
{
  4041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041ac:	b087      	sub	sp, #28
    indev_act = task->user_data;
  4041ae:	68c4      	ldr	r4, [r0, #12]
  4041b0:	4ba4      	ldr	r3, [pc, #656]	; (404444 <_lv_indev_read_task+0x29c>)
  4041b2:	601c      	str	r4, [r3, #0]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
  4041b4:	68e3      	ldr	r3, [r4, #12]
  4041b6:	2b00      	cmp	r3, #0
  4041b8:	f000 84a8 	beq.w	404b0c <_lv_indev_read_task+0x964>
    indev_proc_reset_query_handler(indev_act);
  4041bc:	4620      	mov	r0, r4
  4041be:	4ba2      	ldr	r3, [pc, #648]	; (404448 <_lv_indev_read_task+0x2a0>)
  4041c0:	4798      	blx	r3
    if(indev_act->proc.disabled) return;
  4041c2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4041c6:	f013 0f04 	tst.w	r3, #4
  4041ca:	f040 849f 	bne.w	404b0c <_lv_indev_read_task+0x964>
        more_to_read = _lv_indev_read(indev_act, &data);
  4041ce:	4d9d      	ldr	r5, [pc, #628]	; (404444 <_lv_indev_read_task+0x29c>)
  4041d0:	f8df 8298 	ldr.w	r8, [pc, #664]	; 40446c <_lv_indev_read_task+0x2c4>
        indev_proc_reset_query_handler(indev_act);
  4041d4:	4e9c      	ldr	r6, [pc, #624]	; (404448 <_lv_indev_read_task+0x2a0>)
  4041d6:	e09f      	b.n	404318 <_lv_indev_read_task+0x170>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  4041d8:	68e4      	ldr	r4, [r4, #12]
  4041da:	4b9c      	ldr	r3, [pc, #624]	; (40444c <_lv_indev_read_task+0x2a4>)
  4041dc:	4798      	blx	r3
  4041de:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  4041e2:	e0ad      	b.n	404340 <_lv_indev_read_task+0x198>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  4041e4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  4041e8:	2b00      	cmp	r3, #0
  4041ea:	d16c      	bne.n	4042c6 <_lv_indev_read_task+0x11e>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4041ec:	f89d 3016 	ldrb.w	r3, [sp, #22]
    if(i->proc.wait_until_release) {
  4041f0:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  4041f4:	f012 0f08 	tst.w	r2, #8
  4041f8:	d00b      	beq.n	404212 <_lv_indev_read_task+0x6a>
        i->proc.wait_until_release      = 0;
  4041fa:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  4041fe:	2100      	movs	r1, #0
  404200:	64a1      	str	r1, [r4, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  404202:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
  404206:	f361 0200 	bfi	r2, r1, #0, #1
  40420a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  40420e:	f884 1020 	strb.w	r1, [r4, #32]
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
  404212:	f894 a020 	ldrb.w	sl, [r4, #32]
    i->proc.types.keypad.last_state = data->state;
  404216:	f884 3020 	strb.w	r3, [r4, #32]
    i->proc.types.keypad.last_key   = data->key;
  40421a:	9b03      	ldr	r3, [sp, #12]
  40421c:	6263      	str	r3, [r4, #36]	; 0x24
    lv_group_t * g = i->group;
  40421e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
    if(g == NULL) return;
  404222:	f1b9 0f00 	cmp.w	r9, #0
  404226:	d072      	beq.n	40430e <_lv_indev_read_task+0x166>
    indev_obj_act = lv_group_get_focused(g);
  404228:	4648      	mov	r0, r9
  40422a:	4b89      	ldr	r3, [pc, #548]	; (404450 <_lv_indev_read_task+0x2a8>)
  40422c:	4798      	blx	r3
  40422e:	4b89      	ldr	r3, [pc, #548]	; (404454 <_lv_indev_read_task+0x2ac>)
  404230:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  404232:	2800      	cmp	r0, #0
  404234:	d06b      	beq.n	40430e <_lv_indev_read_task+0x166>
    if(data->state != LV_INDEV_STATE_REL) {
  404236:	f89d 3016 	ldrb.w	r3, [sp, #22]
  40423a:	b113      	cbz	r3, 404242 <_lv_indev_read_task+0x9a>
        data->enc_diff = 0;
  40423c:	2300      	movs	r3, #0
  40423e:	f8ad 3014 	strh.w	r3, [sp, #20]
    indev_obj_act = lv_group_get_focused(g);
  404242:	4648      	mov	r0, r9
  404244:	4b82      	ldr	r3, [pc, #520]	; (404450 <_lv_indev_read_task+0x2a8>)
  404246:	4798      	blx	r3
  404248:	4b82      	ldr	r3, [pc, #520]	; (404454 <_lv_indev_read_task+0x2ac>)
  40424a:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  40424c:	2800      	cmp	r0, #0
  40424e:	d05e      	beq.n	40430e <_lv_indev_read_task+0x166>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  404250:	f89d 2016 	ldrb.w	r2, [sp, #22]
  404254:	2a01      	cmp	r2, #1
  404256:	bf14      	ite	ne
  404258:	2100      	movne	r1, #0
  40425a:	2101      	moveq	r1, #1
  40425c:	f1ba 0f00 	cmp.w	sl, #0
  404260:	d102      	bne.n	404268 <_lv_indev_read_task+0xc0>
  404262:	2900      	cmp	r1, #0
  404264:	f040 8266 	bne.w	404734 <_lv_indev_read_task+0x58c>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  404268:	f1ba 0f01 	cmp.w	sl, #1
  40426c:	bf14      	ite	ne
  40426e:	2300      	movne	r3, #0
  404270:	2301      	moveq	r3, #1
  404272:	b111      	cbz	r1, 40427a <_lv_indev_read_task+0xd2>
  404274:	2b00      	cmp	r3, #0
  404276:	f040 82b6 	bne.w	4047e6 <_lv_indev_read_task+0x63e>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
  40427a:	b912      	cbnz	r2, 404282 <_lv_indev_read_task+0xda>
  40427c:	2b00      	cmp	r3, #0
  40427e:	f040 834e 	bne.w	40491e <_lv_indev_read_task+0x776>
    indev_obj_act = NULL;
  404282:	2200      	movs	r2, #0
  404284:	4b73      	ldr	r3, [pc, #460]	; (404454 <_lv_indev_read_task+0x2ac>)
  404286:	601a      	str	r2, [r3, #0]
    if(data->enc_diff != 0) {
  404288:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  40428c:	2b00      	cmp	r3, #0
  40428e:	d03e      	beq.n	40430e <_lv_indev_read_task+0x166>
        if(lv_group_get_editing(g)) {
  404290:	4648      	mov	r0, r9
  404292:	4b71      	ldr	r3, [pc, #452]	; (404458 <_lv_indev_read_task+0x2b0>)
  404294:	4798      	blx	r3
  404296:	2800      	cmp	r0, #0
  404298:	f000 8405 	beq.w	404aa6 <_lv_indev_read_task+0x8fe>
            if(data->enc_diff < 0) {
  40429c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  4042a0:	2b00      	cmp	r3, #0
  4042a2:	f2c0 83ef 	blt.w	404a84 <_lv_indev_read_task+0x8dc>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
  4042a6:	2b00      	cmp	r3, #0
  4042a8:	dd31      	ble.n	40430e <_lv_indev_read_task+0x166>
  4042aa:	2400      	movs	r4, #0
  4042ac:	f04f 0b13 	mov.w	fp, #19
  4042b0:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 404470 <_lv_indev_read_task+0x2c8>
  4042b4:	4659      	mov	r1, fp
  4042b6:	4648      	mov	r0, r9
  4042b8:	47d0      	blx	sl
  4042ba:	3401      	adds	r4, #1
  4042bc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  4042c0:	429c      	cmp	r4, r3
  4042c2:	dbf7      	blt.n	4042b4 <_lv_indev_read_task+0x10c>
  4042c4:	e023      	b.n	40430e <_lv_indev_read_task+0x166>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  4042c6:	68e4      	ldr	r4, [r4, #12]
  4042c8:	4b60      	ldr	r3, [pc, #384]	; (40444c <_lv_indev_read_task+0x2a4>)
  4042ca:	4798      	blx	r3
  4042cc:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  4042d0:	e036      	b.n	404340 <_lv_indev_read_task+0x198>
    if(i->cursor != NULL &&
  4042d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4042d4:	b148      	cbz	r0, 4042ea <_lv_indev_read_task+0x142>
  4042d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4042d8:	9b02      	ldr	r3, [sp, #8]
  4042da:	429a      	cmp	r2, r3
  4042dc:	d005      	beq.n	4042ea <_lv_indev_read_task+0x142>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
  4042de:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  4042e2:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
  4042e6:	4b5d      	ldr	r3, [pc, #372]	; (40445c <_lv_indev_read_task+0x2b4>)
  4042e8:	4798      	blx	r3
    i->proc.types.pointer.act_point.x = data->point.x;
  4042ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  4042ee:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
  4042f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  4042f4:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.state == LV_INDEV_STATE_PR) {
  4042f6:	7f23      	ldrb	r3, [r4, #28]
  4042f8:	2b01      	cmp	r3, #1
        indev_proc_press(&i->proc);
  4042fa:	f104 001c 	add.w	r0, r4, #28
  4042fe:	bf0c      	ite	eq
  404300:	4b57      	ldreq	r3, [pc, #348]	; (404460 <_lv_indev_read_task+0x2b8>)
        indev_proc_release(&i->proc);
  404302:	4b58      	ldrne	r3, [pc, #352]	; (404464 <_lv_indev_read_task+0x2bc>)
  404304:	4798      	blx	r3
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  404306:	8c23      	ldrh	r3, [r4, #32]
  404308:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  40430a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
  40430c:	84e3      	strh	r3, [r4, #38]	; 0x26
        indev_proc_reset_query_handler(indev_act);
  40430e:	6828      	ldr	r0, [r5, #0]
  404310:	47b0      	blx	r6
    } while(more_to_read);
  404312:	2f00      	cmp	r7, #0
  404314:	f000 83f5 	beq.w	404b02 <_lv_indev_read_task+0x95a>
        more_to_read = _lv_indev_read(indev_act, &data);
  404318:	a902      	add	r1, sp, #8
  40431a:	6828      	ldr	r0, [r5, #0]
  40431c:	47c0      	blx	r8
  40431e:	4607      	mov	r7, r0
        indev_proc_reset_query_handler(indev_act);
  404320:	682c      	ldr	r4, [r5, #0]
  404322:	4620      	mov	r0, r4
  404324:	47b0      	blx	r6
        indev_obj_act = NULL;
  404326:	2200      	movs	r2, #0
  404328:	4b4a      	ldr	r3, [pc, #296]	; (404454 <_lv_indev_read_task+0x2ac>)
  40432a:	601a      	str	r2, [r3, #0]
        indev_act->proc.state = data.state;
  40432c:	f89d 3016 	ldrb.w	r3, [sp, #22]
  404330:	7723      	strb	r3, [r4, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
  404332:	2b01      	cmp	r3, #1
  404334:	f43f af50 	beq.w	4041d8 <_lv_indev_read_task+0x30>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  404338:	7823      	ldrb	r3, [r4, #0]
  40433a:	2b04      	cmp	r3, #4
  40433c:	f43f af52 	beq.w	4041e4 <_lv_indev_read_task+0x3c>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
  404340:	682c      	ldr	r4, [r5, #0]
  404342:	7823      	ldrb	r3, [r4, #0]
  404344:	2b01      	cmp	r3, #1
  404346:	d0c4      	beq.n	4042d2 <_lv_indev_read_task+0x12a>
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
  404348:	2b02      	cmp	r3, #2
  40434a:	d030      	beq.n	4043ae <_lv_indev_read_task+0x206>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
  40434c:	2b04      	cmp	r3, #4
  40434e:	f000 81e5 	beq.w	40471c <_lv_indev_read_task+0x574>
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
  404352:	2b03      	cmp	r3, #3
  404354:	d1db      	bne.n	40430e <_lv_indev_read_task+0x166>
    if(i->btn_points == NULL) {
  404356:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  404358:	2b00      	cmp	r3, #0
  40435a:	d0d8      	beq.n	40430e <_lv_indev_read_task+0x166>
    lv_coord_t x = i->btn_points[data->btn_id].x;
  40435c:	9a04      	ldr	r2, [sp, #16]
  40435e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404362:	f933 a022 	ldrsh.w	sl, [r3, r2, lsl #2]
    lv_coord_t y = i->btn_points[data->btn_id].y;
  404366:	f9b1 b002 	ldrsh.w	fp, [r1, #2]
    if(data->state == LV_INDEV_STATE_PR) {
  40436a:	f89d 3016 	ldrb.w	r3, [sp, #22]
  40436e:	2b01      	cmp	r3, #1
  404370:	f000 83b9 	beq.w	404ae6 <_lv_indev_read_task+0x93e>
    if(indev_reset_check(&i->proc)) return;
  404374:	f104 091c 	add.w	r9, r4, #28
  404378:	4648      	mov	r0, r9
  40437a:	4b3b      	ldr	r3, [pc, #236]	; (404468 <_lv_indev_read_task+0x2c0>)
  40437c:	4798      	blx	r3
  40437e:	2800      	cmp	r0, #0
  404380:	d1c5      	bne.n	40430e <_lv_indev_read_task+0x166>
    i->proc.types.pointer.act_point.x = x;
  404382:	f8a4 a020 	strh.w	sl, [r4, #32]
    i->proc.types.pointer.act_point.y = y;
  404386:	f8a4 b022 	strh.w	fp, [r4, #34]	; 0x22
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  40438a:	f89d 3016 	ldrb.w	r3, [sp, #22]
  40438e:	2b01      	cmp	r3, #1
  404390:	4648      	mov	r0, r9
  404392:	bf0c      	ite	eq
  404394:	4b32      	ldreq	r3, [pc, #200]	; (404460 <_lv_indev_read_task+0x2b8>)
    else indev_proc_release(&i->proc);
  404396:	4b33      	ldrne	r3, [pc, #204]	; (404464 <_lv_indev_read_task+0x2bc>)
  404398:	4798      	blx	r3
    if(indev_reset_check(&i->proc)) return;
  40439a:	4648      	mov	r0, r9
  40439c:	4b32      	ldr	r3, [pc, #200]	; (404468 <_lv_indev_read_task+0x2c0>)
  40439e:	4798      	blx	r3
  4043a0:	2800      	cmp	r0, #0
  4043a2:	d1b4      	bne.n	40430e <_lv_indev_read_task+0x166>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  4043a4:	8c23      	ldrh	r3, [r4, #32]
  4043a6:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  4043a8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
  4043aa:	84e3      	strh	r3, [r4, #38]	; 0x26
  4043ac:	e7af      	b.n	40430e <_lv_indev_read_task+0x166>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4043ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
  4043b2:	2b01      	cmp	r3, #1
  4043b4:	d040      	beq.n	404438 <_lv_indev_read_task+0x290>
    if(i->proc.wait_until_release) {
  4043b6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4043ba:	f013 0f08 	tst.w	r3, #8
  4043be:	d00b      	beq.n	4043d8 <_lv_indev_read_task+0x230>
        i->proc.wait_until_release      = 0;
  4043c0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  4043c4:	2200      	movs	r2, #0
  4043c6:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  4043c8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  4043cc:	f362 0300 	bfi	r3, r2, #0, #1
  4043d0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  4043d4:	f884 2020 	strb.w	r2, [r4, #32]
    lv_group_t * g = i->group;
  4043d8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
    if(g == NULL) return;
  4043dc:	f1b9 0f00 	cmp.w	r9, #0
  4043e0:	d095      	beq.n	40430e <_lv_indev_read_task+0x166>
    indev_obj_act = lv_group_get_focused(g);
  4043e2:	4648      	mov	r0, r9
  4043e4:	4b1a      	ldr	r3, [pc, #104]	; (404450 <_lv_indev_read_task+0x2a8>)
  4043e6:	4798      	blx	r3
  4043e8:	4b1a      	ldr	r3, [pc, #104]	; (404454 <_lv_indev_read_task+0x2ac>)
  4043ea:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  4043ec:	2800      	cmp	r0, #0
  4043ee:	d08e      	beq.n	40430e <_lv_indev_read_task+0x166>
    uint32_t prev_key = i->proc.types.keypad.last_key;
  4043f0:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
    i->proc.types.keypad.last_key = data->key;
  4043f4:	9903      	ldr	r1, [sp, #12]
  4043f6:	6261      	str	r1, [r4, #36]	; 0x24
    uint32_t prev_state             = i->proc.types.keypad.last_state;
  4043f8:	f894 2020 	ldrb.w	r2, [r4, #32]
    i->proc.types.keypad.last_state = data->state;
  4043fc:	f89d 3016 	ldrb.w	r3, [sp, #22]
  404400:	f884 3020 	strb.w	r3, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  404404:	2b01      	cmp	r3, #1
  404406:	bf14      	ite	ne
  404408:	f04f 0e00 	movne.w	lr, #0
  40440c:	f04f 0e01 	moveq.w	lr, #1
  404410:	b912      	cbnz	r2, 404418 <_lv_indev_read_task+0x270>
  404412:	f1be 0f00 	cmp.w	lr, #0
  404416:	d12d      	bne.n	404474 <_lv_indev_read_task+0x2cc>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  404418:	2a01      	cmp	r2, #1
  40441a:	bf14      	ite	ne
  40441c:	2200      	movne	r2, #0
  40441e:	2201      	moveq	r2, #1
  404420:	b112      	cbz	r2, 404428 <_lv_indev_read_task+0x280>
  404422:	f1be 0f00 	cmp.w	lr, #0
  404426:	d17d      	bne.n	404524 <_lv_indev_read_task+0x37c>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
  404428:	b913      	cbnz	r3, 404430 <_lv_indev_read_task+0x288>
  40442a:	2a00      	cmp	r2, #0
  40442c:	f040 8121 	bne.w	404672 <_lv_indev_read_task+0x4ca>
    indev_obj_act = NULL;
  404430:	2200      	movs	r2, #0
  404432:	4b08      	ldr	r3, [pc, #32]	; (404454 <_lv_indev_read_task+0x2ac>)
  404434:	601a      	str	r2, [r3, #0]
  404436:	e76a      	b.n	40430e <_lv_indev_read_task+0x166>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  404438:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  40443c:	f013 0f08 	tst.w	r3, #8
  404440:	d0ca      	beq.n	4043d8 <_lv_indev_read_task+0x230>
  404442:	e764      	b.n	40430e <_lv_indev_read_task+0x166>
  404444:	2040c3dc 	.word	0x2040c3dc
  404448:	004032b9 	.word	0x004032b9
  40444c:	00414495 	.word	0x00414495
  404450:	00403129 	.word	0x00403129
  404454:	2040c3e0 	.word	0x2040c3e0
  404458:	004032a9 	.word	0x004032a9
  40445c:	00405645 	.word	0x00405645
  404460:	004038d1 	.word	0x004038d1
  404464:	0040352d 	.word	0x0040352d
  404468:	00403311 	.word	0x00403311
  40446c:	0041442d 	.word	0x0041442d
  404470:	0040313d 	.word	0x0040313d
        i->proc.pr_timestamp = lv_tick_get();
  404474:	4ba0      	ldr	r3, [pc, #640]	; (4046f8 <_lv_indev_read_task+0x550>)
  404476:	4798      	blx	r3
  404478:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  40447a:	9903      	ldr	r1, [sp, #12]
  40447c:	290a      	cmp	r1, #10
  40447e:	d009      	beq.n	404494 <_lv_indev_read_task+0x2ec>
        else if(data->key == LV_KEY_ESC) {
  404480:	291b      	cmp	r1, #27
  404482:	d023      	beq.n	4044cc <_lv_indev_read_task+0x324>
        else if(data->key == LV_KEY_NEXT) {
  404484:	2909      	cmp	r1, #9
  404486:	d031      	beq.n	4044ec <_lv_indev_read_task+0x344>
        else if(data->key == LV_KEY_PREV) {
  404488:	290b      	cmp	r1, #11
  40448a:	d03d      	beq.n	404508 <_lv_indev_read_task+0x360>
            lv_group_send_data(g, data->key);
  40448c:	4648      	mov	r0, r9
  40448e:	4b9b      	ldr	r3, [pc, #620]	; (4046fc <_lv_indev_read_task+0x554>)
  404490:	4798      	blx	r3
  404492:	e7cd      	b.n	404430 <_lv_indev_read_task+0x288>
            lv_group_send_data(g, LV_KEY_ENTER);
  404494:	4648      	mov	r0, r9
  404496:	4b99      	ldr	r3, [pc, #612]	; (4046fc <_lv_indev_read_task+0x554>)
  404498:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  40449a:	4b99      	ldr	r3, [pc, #612]	; (404700 <_lv_indev_read_task+0x558>)
  40449c:	6818      	ldr	r0, [r3, #0]
  40449e:	69c3      	ldr	r3, [r0, #28]
  4044a0:	2200      	movs	r2, #0
  4044a2:	210b      	movs	r1, #11
  4044a4:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4044a6:	341c      	adds	r4, #28
  4044a8:	4620      	mov	r0, r4
  4044aa:	4b96      	ldr	r3, [pc, #600]	; (404704 <_lv_indev_read_task+0x55c>)
  4044ac:	4798      	blx	r3
  4044ae:	2800      	cmp	r0, #0
  4044b0:	f47f af2d 	bne.w	40430e <_lv_indev_read_task+0x166>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  4044b4:	2200      	movs	r2, #0
  4044b6:	4611      	mov	r1, r2
  4044b8:	4b91      	ldr	r3, [pc, #580]	; (404700 <_lv_indev_read_task+0x558>)
  4044ba:	6818      	ldr	r0, [r3, #0]
  4044bc:	4b92      	ldr	r3, [pc, #584]	; (404708 <_lv_indev_read_task+0x560>)
  4044be:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4044c0:	4620      	mov	r0, r4
  4044c2:	4b90      	ldr	r3, [pc, #576]	; (404704 <_lv_indev_read_task+0x55c>)
  4044c4:	4798      	blx	r3
  4044c6:	2800      	cmp	r0, #0
  4044c8:	d0b2      	beq.n	404430 <_lv_indev_read_task+0x288>
  4044ca:	e720      	b.n	40430e <_lv_indev_read_task+0x166>
            lv_group_send_data(g, LV_KEY_ESC);
  4044cc:	4648      	mov	r0, r9
  4044ce:	4b8b      	ldr	r3, [pc, #556]	; (4046fc <_lv_indev_read_task+0x554>)
  4044d0:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  4044d2:	2200      	movs	r2, #0
  4044d4:	2114      	movs	r1, #20
  4044d6:	4b8a      	ldr	r3, [pc, #552]	; (404700 <_lv_indev_read_task+0x558>)
  4044d8:	6818      	ldr	r0, [r3, #0]
  4044da:	4b8b      	ldr	r3, [pc, #556]	; (404708 <_lv_indev_read_task+0x560>)
  4044dc:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4044de:	f104 001c 	add.w	r0, r4, #28
  4044e2:	4b88      	ldr	r3, [pc, #544]	; (404704 <_lv_indev_read_task+0x55c>)
  4044e4:	4798      	blx	r3
  4044e6:	2800      	cmp	r0, #0
  4044e8:	d0a2      	beq.n	404430 <_lv_indev_read_task+0x288>
  4044ea:	e710      	b.n	40430e <_lv_indev_read_task+0x166>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4044ec:	2100      	movs	r1, #0
  4044ee:	4648      	mov	r0, r9
  4044f0:	4b86      	ldr	r3, [pc, #536]	; (40470c <_lv_indev_read_task+0x564>)
  4044f2:	4798      	blx	r3
            lv_group_focus_next(g);
  4044f4:	4648      	mov	r0, r9
  4044f6:	4b86      	ldr	r3, [pc, #536]	; (404710 <_lv_indev_read_task+0x568>)
  4044f8:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4044fa:	f104 001c 	add.w	r0, r4, #28
  4044fe:	4b81      	ldr	r3, [pc, #516]	; (404704 <_lv_indev_read_task+0x55c>)
  404500:	4798      	blx	r3
  404502:	2800      	cmp	r0, #0
  404504:	d094      	beq.n	404430 <_lv_indev_read_task+0x288>
  404506:	e702      	b.n	40430e <_lv_indev_read_task+0x166>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  404508:	2100      	movs	r1, #0
  40450a:	4648      	mov	r0, r9
  40450c:	4b7f      	ldr	r3, [pc, #508]	; (40470c <_lv_indev_read_task+0x564>)
  40450e:	4798      	blx	r3
            lv_group_focus_prev(g);
  404510:	4648      	mov	r0, r9
  404512:	4b80      	ldr	r3, [pc, #512]	; (404714 <_lv_indev_read_task+0x56c>)
  404514:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404516:	f104 001c 	add.w	r0, r4, #28
  40451a:	4b7a      	ldr	r3, [pc, #488]	; (404704 <_lv_indev_read_task+0x55c>)
  40451c:	4798      	blx	r3
  40451e:	2800      	cmp	r0, #0
  404520:	d086      	beq.n	404430 <_lv_indev_read_task+0x288>
  404522:	e6f4      	b.n	40430e <_lv_indev_read_task+0x166>
        if(data->key == LV_KEY_ENTER) {
  404524:	290a      	cmp	r1, #10
  404526:	d020      	beq.n	40456a <_lv_indev_read_task+0x3c2>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  404528:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  40452c:	f013 0f01 	tst.w	r3, #1
  404530:	d033      	beq.n	40459a <_lv_indev_read_task+0x3f2>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  404532:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  404534:	4b78      	ldr	r3, [pc, #480]	; (404718 <_lv_indev_read_task+0x570>)
  404536:	4798      	blx	r3
  404538:	8b63      	ldrh	r3, [r4, #26]
        else if(i->proc.long_pr_sent != 0 &&
  40453a:	4298      	cmp	r0, r3
  40453c:	f67f af78 	bls.w	404430 <_lv_indev_read_task+0x288>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404540:	4b6d      	ldr	r3, [pc, #436]	; (4046f8 <_lv_indev_read_task+0x550>)
  404542:	4798      	blx	r3
  404544:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  404546:	9903      	ldr	r1, [sp, #12]
  404548:	290a      	cmp	r1, #10
  40454a:	d05a      	beq.n	404602 <_lv_indev_read_task+0x45a>
            else if(data->key == LV_KEY_NEXT) {
  40454c:	2909      	cmp	r1, #9
  40454e:	d072      	beq.n	404636 <_lv_indev_read_task+0x48e>
            else if(data->key == LV_KEY_PREV) {
  404550:	290b      	cmp	r1, #11
  404552:	d07f      	beq.n	404654 <_lv_indev_read_task+0x4ac>
                lv_group_send_data(g, data->key);
  404554:	4648      	mov	r0, r9
  404556:	4b69      	ldr	r3, [pc, #420]	; (4046fc <_lv_indev_read_task+0x554>)
  404558:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40455a:	f104 001c 	add.w	r0, r4, #28
  40455e:	4b69      	ldr	r3, [pc, #420]	; (404704 <_lv_indev_read_task+0x55c>)
  404560:	4798      	blx	r3
  404562:	2800      	cmp	r0, #0
  404564:	f43f af64 	beq.w	404430 <_lv_indev_read_task+0x288>
  404568:	e6d1      	b.n	40430e <_lv_indev_read_task+0x166>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
  40456a:	69c3      	ldr	r3, [r0, #28]
  40456c:	2200      	movs	r2, #0
  40456e:	210c      	movs	r1, #12
  404570:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404572:	f104 0a1c 	add.w	sl, r4, #28
  404576:	4650      	mov	r0, sl
  404578:	4b62      	ldr	r3, [pc, #392]	; (404704 <_lv_indev_read_task+0x55c>)
  40457a:	4798      	blx	r3
  40457c:	2800      	cmp	r0, #0
  40457e:	f47f aec6 	bne.w	40430e <_lv_indev_read_task+0x166>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  404582:	2200      	movs	r2, #0
  404584:	2101      	movs	r1, #1
  404586:	4b5e      	ldr	r3, [pc, #376]	; (404700 <_lv_indev_read_task+0x558>)
  404588:	6818      	ldr	r0, [r3, #0]
  40458a:	4b5f      	ldr	r3, [pc, #380]	; (404708 <_lv_indev_read_task+0x560>)
  40458c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40458e:	4650      	mov	r0, sl
  404590:	4b5c      	ldr	r3, [pc, #368]	; (404704 <_lv_indev_read_task+0x55c>)
  404592:	4798      	blx	r3
  404594:	2800      	cmp	r0, #0
  404596:	d0c7      	beq.n	404528 <_lv_indev_read_task+0x380>
  404598:	e6b9      	b.n	40430e <_lv_indev_read_task+0x166>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  40459a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40459c:	4b5e      	ldr	r3, [pc, #376]	; (404718 <_lv_indev_read_task+0x570>)
  40459e:	4798      	blx	r3
  4045a0:	8b23      	ldrh	r3, [r4, #24]
  4045a2:	4298      	cmp	r0, r3
  4045a4:	d926      	bls.n	4045f4 <_lv_indev_read_task+0x44c>
            i->proc.long_pr_sent = 1;
  4045a6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4045aa:	f043 0301 	orr.w	r3, r3, #1
  4045ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
  4045b2:	9b03      	ldr	r3, [sp, #12]
  4045b4:	2b0a      	cmp	r3, #10
  4045b6:	f47f af3b 	bne.w	404430 <_lv_indev_read_task+0x288>
                i->proc.longpr_rep_timestamp = lv_tick_get();
  4045ba:	4b4f      	ldr	r3, [pc, #316]	; (4046f8 <_lv_indev_read_task+0x550>)
  4045bc:	4798      	blx	r3
  4045be:	64e0      	str	r0, [r4, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  4045c0:	4b4f      	ldr	r3, [pc, #316]	; (404700 <_lv_indev_read_task+0x558>)
  4045c2:	6818      	ldr	r0, [r3, #0]
  4045c4:	69c3      	ldr	r3, [r0, #28]
  4045c6:	2200      	movs	r2, #0
  4045c8:	210f      	movs	r1, #15
  4045ca:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4045cc:	341c      	adds	r4, #28
  4045ce:	4620      	mov	r0, r4
  4045d0:	4b4c      	ldr	r3, [pc, #304]	; (404704 <_lv_indev_read_task+0x55c>)
  4045d2:	4798      	blx	r3
  4045d4:	2800      	cmp	r0, #0
  4045d6:	f47f ae9a 	bne.w	40430e <_lv_indev_read_task+0x166>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  4045da:	2200      	movs	r2, #0
  4045dc:	2104      	movs	r1, #4
  4045de:	4b48      	ldr	r3, [pc, #288]	; (404700 <_lv_indev_read_task+0x558>)
  4045e0:	6818      	ldr	r0, [r3, #0]
  4045e2:	4b49      	ldr	r3, [pc, #292]	; (404708 <_lv_indev_read_task+0x560>)
  4045e4:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4045e6:	4620      	mov	r0, r4
  4045e8:	4b46      	ldr	r3, [pc, #280]	; (404704 <_lv_indev_read_task+0x55c>)
  4045ea:	4798      	blx	r3
  4045ec:	2800      	cmp	r0, #0
  4045ee:	f43f af1f 	beq.w	404430 <_lv_indev_read_task+0x288>
  4045f2:	e68c      	b.n	40430e <_lv_indev_read_task+0x166>
        else if(i->proc.long_pr_sent != 0 &&
  4045f4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4045f8:	f013 0f01 	tst.w	r3, #1
  4045fc:	f43f af18 	beq.w	404430 <_lv_indev_read_task+0x288>
  404600:	e797      	b.n	404532 <_lv_indev_read_task+0x38a>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  404602:	4b3f      	ldr	r3, [pc, #252]	; (404700 <_lv_indev_read_task+0x558>)
  404604:	6818      	ldr	r0, [r3, #0]
  404606:	69c3      	ldr	r3, [r0, #28]
  404608:	2200      	movs	r2, #0
  40460a:	2110      	movs	r1, #16
  40460c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40460e:	341c      	adds	r4, #28
  404610:	4620      	mov	r0, r4
  404612:	4b3c      	ldr	r3, [pc, #240]	; (404704 <_lv_indev_read_task+0x55c>)
  404614:	4798      	blx	r3
  404616:	2800      	cmp	r0, #0
  404618:	f47f ae79 	bne.w	40430e <_lv_indev_read_task+0x166>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  40461c:	2200      	movs	r2, #0
  40461e:	2105      	movs	r1, #5
  404620:	4b37      	ldr	r3, [pc, #220]	; (404700 <_lv_indev_read_task+0x558>)
  404622:	6818      	ldr	r0, [r3, #0]
  404624:	4b38      	ldr	r3, [pc, #224]	; (404708 <_lv_indev_read_task+0x560>)
  404626:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404628:	4620      	mov	r0, r4
  40462a:	4b36      	ldr	r3, [pc, #216]	; (404704 <_lv_indev_read_task+0x55c>)
  40462c:	4798      	blx	r3
  40462e:	2800      	cmp	r0, #0
  404630:	f43f aefe 	beq.w	404430 <_lv_indev_read_task+0x288>
  404634:	e66b      	b.n	40430e <_lv_indev_read_task+0x166>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  404636:	2100      	movs	r1, #0
  404638:	4648      	mov	r0, r9
  40463a:	4b34      	ldr	r3, [pc, #208]	; (40470c <_lv_indev_read_task+0x564>)
  40463c:	4798      	blx	r3
                lv_group_focus_next(g);
  40463e:	4648      	mov	r0, r9
  404640:	4b33      	ldr	r3, [pc, #204]	; (404710 <_lv_indev_read_task+0x568>)
  404642:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404644:	f104 001c 	add.w	r0, r4, #28
  404648:	4b2e      	ldr	r3, [pc, #184]	; (404704 <_lv_indev_read_task+0x55c>)
  40464a:	4798      	blx	r3
  40464c:	2800      	cmp	r0, #0
  40464e:	f43f aeef 	beq.w	404430 <_lv_indev_read_task+0x288>
  404652:	e65c      	b.n	40430e <_lv_indev_read_task+0x166>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  404654:	2100      	movs	r1, #0
  404656:	4648      	mov	r0, r9
  404658:	4b2c      	ldr	r3, [pc, #176]	; (40470c <_lv_indev_read_task+0x564>)
  40465a:	4798      	blx	r3
                lv_group_focus_prev(g);
  40465c:	4648      	mov	r0, r9
  40465e:	4b2d      	ldr	r3, [pc, #180]	; (404714 <_lv_indev_read_task+0x56c>)
  404660:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404662:	f104 001c 	add.w	r0, r4, #28
  404666:	4b27      	ldr	r3, [pc, #156]	; (404704 <_lv_indev_read_task+0x55c>)
  404668:	4798      	blx	r3
  40466a:	2800      	cmp	r0, #0
  40466c:	f43f aee0 	beq.w	404430 <_lv_indev_read_task+0x288>
  404670:	e64d      	b.n	40430e <_lv_indev_read_task+0x166>
        data->key = prev_key;
  404672:	f8cd c00c 	str.w	ip, [sp, #12]
        if(data->key == LV_KEY_ENTER) {
  404676:	f1bc 0f0a 	cmp.w	ip, #10
  40467a:	d008      	beq.n	40468e <_lv_indev_read_task+0x4e6>
        i->proc.pr_timestamp = 0;
  40467c:	2200      	movs	r2, #0
  40467e:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  404680:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404684:	f362 0300 	bfi	r3, r2, #0, #1
  404688:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  40468c:	e6d0      	b.n	404430 <_lv_indev_read_task+0x288>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  40468e:	69c3      	ldr	r3, [r0, #28]
  404690:	2200      	movs	r2, #0
  404692:	210e      	movs	r1, #14
  404694:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404696:	f104 091c 	add.w	r9, r4, #28
  40469a:	4648      	mov	r0, r9
  40469c:	4b19      	ldr	r3, [pc, #100]	; (404704 <_lv_indev_read_task+0x55c>)
  40469e:	4798      	blx	r3
  4046a0:	2800      	cmp	r0, #0
  4046a2:	f47f ae34 	bne.w	40430e <_lv_indev_read_task+0x166>
            if(i->proc.long_pr_sent == 0) {
  4046a6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4046aa:	f013 0f01 	tst.w	r3, #1
  4046ae:	d10b      	bne.n	4046c8 <_lv_indev_read_task+0x520>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  4046b0:	2200      	movs	r2, #0
  4046b2:	2103      	movs	r1, #3
  4046b4:	4b12      	ldr	r3, [pc, #72]	; (404700 <_lv_indev_read_task+0x558>)
  4046b6:	6818      	ldr	r0, [r3, #0]
  4046b8:	4b13      	ldr	r3, [pc, #76]	; (404708 <_lv_indev_read_task+0x560>)
  4046ba:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046bc:	4648      	mov	r0, r9
  4046be:	4b11      	ldr	r3, [pc, #68]	; (404704 <_lv_indev_read_task+0x55c>)
  4046c0:	4798      	blx	r3
  4046c2:	2800      	cmp	r0, #0
  4046c4:	f47f ae23 	bne.w	40430e <_lv_indev_read_task+0x166>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  4046c8:	2200      	movs	r2, #0
  4046ca:	2106      	movs	r1, #6
  4046cc:	4b0c      	ldr	r3, [pc, #48]	; (404700 <_lv_indev_read_task+0x558>)
  4046ce:	6818      	ldr	r0, [r3, #0]
  4046d0:	4b0d      	ldr	r3, [pc, #52]	; (404708 <_lv_indev_read_task+0x560>)
  4046d2:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4046d4:	4648      	mov	r0, r9
  4046d6:	4b0b      	ldr	r3, [pc, #44]	; (404704 <_lv_indev_read_task+0x55c>)
  4046d8:	4798      	blx	r3
  4046da:	2800      	cmp	r0, #0
  4046dc:	f47f ae17 	bne.w	40430e <_lv_indev_read_task+0x166>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  4046e0:	2200      	movs	r2, #0
  4046e2:	2107      	movs	r1, #7
  4046e4:	4b06      	ldr	r3, [pc, #24]	; (404700 <_lv_indev_read_task+0x558>)
  4046e6:	6818      	ldr	r0, [r3, #0]
  4046e8:	4b07      	ldr	r3, [pc, #28]	; (404708 <_lv_indev_read_task+0x560>)
  4046ea:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4046ec:	4648      	mov	r0, r9
  4046ee:	4b05      	ldr	r3, [pc, #20]	; (404704 <_lv_indev_read_task+0x55c>)
  4046f0:	4798      	blx	r3
  4046f2:	2800      	cmp	r0, #0
  4046f4:	d0c2      	beq.n	40467c <_lv_indev_read_task+0x4d4>
  4046f6:	e60a      	b.n	40430e <_lv_indev_read_task+0x166>
  4046f8:	00414495 	.word	0x00414495
  4046fc:	0040313d 	.word	0x0040313d
  404700:	2040c3e0 	.word	0x2040c3e0
  404704:	00403311 	.word	0x00403311
  404708:	00404e95 	.word	0x00404e95
  40470c:	00403175 	.word	0x00403175
  404710:	00402f69 	.word	0x00402f69
  404714:	00402f81 	.word	0x00402f81
  404718:	004144b1 	.word	0x004144b1
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  40471c:	f89d 3016 	ldrb.w	r3, [sp, #22]
  404720:	2b01      	cmp	r3, #1
  404722:	f47f ad65 	bne.w	4041f0 <_lv_indev_read_task+0x48>
  404726:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  40472a:	f012 0f08 	tst.w	r2, #8
  40472e:	f43f ad70 	beq.w	404212 <_lv_indev_read_task+0x6a>
  404732:	e5ec      	b.n	40430e <_lv_indev_read_task+0x166>
        i->proc.pr_timestamp = lv_tick_get();
  404734:	4b80      	ldr	r3, [pc, #512]	; (404938 <_lv_indev_read_task+0x790>)
  404736:	4798      	blx	r3
  404738:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  40473a:	9903      	ldr	r1, [sp, #12]
  40473c:	290a      	cmp	r1, #10
  40473e:	d009      	beq.n	404754 <_lv_indev_read_task+0x5ac>
        else if(data->key == LV_KEY_LEFT) {
  404740:	2914      	cmp	r1, #20
  404742:	d033      	beq.n	4047ac <_lv_indev_read_task+0x604>
        else if(data->key == LV_KEY_RIGHT) {
  404744:	2913      	cmp	r1, #19
  404746:	d037      	beq.n	4047b8 <_lv_indev_read_task+0x610>
        else if(data->key == LV_KEY_ESC) {
  404748:	291b      	cmp	r1, #27
  40474a:	d03b      	beq.n	4047c4 <_lv_indev_read_task+0x61c>
            lv_group_send_data(g, data->key);
  40474c:	4648      	mov	r0, r9
  40474e:	4b7b      	ldr	r3, [pc, #492]	; (40493c <_lv_indev_read_task+0x794>)
  404750:	4798      	blx	r3
  404752:	e596      	b.n	404282 <_lv_indev_read_task+0xda>
            bool editable = false;
  404754:	aa06      	add	r2, sp, #24
  404756:	2300      	movs	r3, #0
  404758:	f802 3d11 	strb.w	r3, [r2, #-17]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  40475c:	4b78      	ldr	r3, [pc, #480]	; (404940 <_lv_indev_read_task+0x798>)
  40475e:	6818      	ldr	r0, [r3, #0]
  404760:	69c3      	ldr	r3, [r0, #28]
  404762:	2119      	movs	r1, #25
  404764:	4798      	blx	r3
            if(lv_group_get_editing(g) == true || editable == false) {
  404766:	4648      	mov	r0, r9
  404768:	4b76      	ldr	r3, [pc, #472]	; (404944 <_lv_indev_read_task+0x79c>)
  40476a:	4798      	blx	r3
  40476c:	b920      	cbnz	r0, 404778 <_lv_indev_read_task+0x5d0>
  40476e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404772:	2b00      	cmp	r3, #0
  404774:	f47f ad85 	bne.w	404282 <_lv_indev_read_task+0xda>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  404778:	4b71      	ldr	r3, [pc, #452]	; (404940 <_lv_indev_read_task+0x798>)
  40477a:	6818      	ldr	r0, [r3, #0]
  40477c:	69c3      	ldr	r3, [r0, #28]
  40477e:	2200      	movs	r2, #0
  404780:	210b      	movs	r1, #11
  404782:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404784:	341c      	adds	r4, #28
  404786:	4620      	mov	r0, r4
  404788:	4b6f      	ldr	r3, [pc, #444]	; (404948 <_lv_indev_read_task+0x7a0>)
  40478a:	4798      	blx	r3
  40478c:	2800      	cmp	r0, #0
  40478e:	f47f adbe 	bne.w	40430e <_lv_indev_read_task+0x166>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  404792:	2200      	movs	r2, #0
  404794:	4611      	mov	r1, r2
  404796:	4b6a      	ldr	r3, [pc, #424]	; (404940 <_lv_indev_read_task+0x798>)
  404798:	6818      	ldr	r0, [r3, #0]
  40479a:	4b6c      	ldr	r3, [pc, #432]	; (40494c <_lv_indev_read_task+0x7a4>)
  40479c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40479e:	4620      	mov	r0, r4
  4047a0:	4b69      	ldr	r3, [pc, #420]	; (404948 <_lv_indev_read_task+0x7a0>)
  4047a2:	4798      	blx	r3
  4047a4:	2800      	cmp	r0, #0
  4047a6:	f43f ad6c 	beq.w	404282 <_lv_indev_read_task+0xda>
  4047aa:	e5b0      	b.n	40430e <_lv_indev_read_task+0x166>
            data->enc_diff--;
  4047ac:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  4047b0:	3b01      	subs	r3, #1
  4047b2:	f8ad 3014 	strh.w	r3, [sp, #20]
  4047b6:	e564      	b.n	404282 <_lv_indev_read_task+0xda>
            data->enc_diff++;
  4047b8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  4047bc:	3301      	adds	r3, #1
  4047be:	f8ad 3014 	strh.w	r3, [sp, #20]
  4047c2:	e55e      	b.n	404282 <_lv_indev_read_task+0xda>
            lv_group_send_data(g, LV_KEY_ESC);
  4047c4:	4648      	mov	r0, r9
  4047c6:	4b5d      	ldr	r3, [pc, #372]	; (40493c <_lv_indev_read_task+0x794>)
  4047c8:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  4047ca:	2200      	movs	r2, #0
  4047cc:	2114      	movs	r1, #20
  4047ce:	4b5c      	ldr	r3, [pc, #368]	; (404940 <_lv_indev_read_task+0x798>)
  4047d0:	6818      	ldr	r0, [r3, #0]
  4047d2:	4b5e      	ldr	r3, [pc, #376]	; (40494c <_lv_indev_read_task+0x7a4>)
  4047d4:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4047d6:	f104 001c 	add.w	r0, r4, #28
  4047da:	4b5b      	ldr	r3, [pc, #364]	; (404948 <_lv_indev_read_task+0x7a0>)
  4047dc:	4798      	blx	r3
  4047de:	2800      	cmp	r0, #0
  4047e0:	f43f ad4f 	beq.w	404282 <_lv_indev_read_task+0xda>
  4047e4:	e593      	b.n	40430e <_lv_indev_read_task+0x166>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4047e6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4047ea:	f013 0f01 	tst.w	r3, #1
  4047ee:	d016      	beq.n	40481e <_lv_indev_read_task+0x676>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  4047f0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  4047f2:	4b57      	ldr	r3, [pc, #348]	; (404950 <_lv_indev_read_task+0x7a8>)
  4047f4:	4798      	blx	r3
  4047f6:	8b63      	ldrh	r3, [r4, #26]
  4047f8:	4298      	cmp	r0, r3
  4047fa:	f67f ad42 	bls.w	404282 <_lv_indev_read_task+0xda>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  4047fe:	4b4e      	ldr	r3, [pc, #312]	; (404938 <_lv_indev_read_task+0x790>)
  404800:	4798      	blx	r3
  404802:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  404804:	9903      	ldr	r1, [sp, #12]
  404806:	290a      	cmp	r1, #10
  404808:	d05e      	beq.n	4048c8 <_lv_indev_read_task+0x720>
            else if(data->key == LV_KEY_LEFT) {
  40480a:	2914      	cmp	r1, #20
  40480c:	d076      	beq.n	4048fc <_lv_indev_read_task+0x754>
            else if(data->key == LV_KEY_RIGHT) {
  40480e:	2913      	cmp	r1, #19
  404810:	d17a      	bne.n	404908 <_lv_indev_read_task+0x760>
                data->enc_diff++;
  404812:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  404816:	3301      	adds	r3, #1
  404818:	f8ad 3014 	strh.w	r3, [sp, #20]
  40481c:	e531      	b.n	404282 <_lv_indev_read_task+0xda>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  40481e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  404820:	4b4b      	ldr	r3, [pc, #300]	; (404950 <_lv_indev_read_task+0x7a8>)
  404822:	4798      	blx	r3
  404824:	8b23      	ldrh	r3, [r4, #24]
  404826:	4298      	cmp	r0, r3
  404828:	d806      	bhi.n	404838 <_lv_indev_read_task+0x690>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  40482a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  40482e:	f013 0f01 	tst.w	r3, #1
  404832:	f43f ad26 	beq.w	404282 <_lv_indev_read_task+0xda>
  404836:	e7db      	b.n	4047f0 <_lv_indev_read_task+0x648>
            i->proc.long_pr_sent = 1;
  404838:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  40483c:	f043 0301 	orr.w	r3, r3, #1
  404840:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404844:	4b3c      	ldr	r3, [pc, #240]	; (404938 <_lv_indev_read_task+0x790>)
  404846:	4798      	blx	r3
  404848:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  40484a:	9b03      	ldr	r3, [sp, #12]
  40484c:	2b0a      	cmp	r3, #10
  40484e:	d006      	beq.n	40485e <_lv_indev_read_task+0x6b6>
            i->proc.long_pr_sent = 1;
  404850:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404854:	f043 0301 	orr.w	r3, r3, #1
  404858:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  40485c:	e511      	b.n	404282 <_lv_indev_read_task+0xda>
                bool editable = false;
  40485e:	aa06      	add	r2, sp, #24
  404860:	2300      	movs	r3, #0
  404862:	f802 3d11 	strb.w	r3, [r2, #-17]!
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404866:	4b36      	ldr	r3, [pc, #216]	; (404940 <_lv_indev_read_task+0x798>)
  404868:	6818      	ldr	r0, [r3, #0]
  40486a:	69c3      	ldr	r3, [r0, #28]
  40486c:	2119      	movs	r1, #25
  40486e:	4798      	blx	r3
                if(editable) {
  404870:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404874:	b173      	cbz	r3, 404894 <_lv_indev_read_task+0x6ec>
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
  404876:	4648      	mov	r0, r9
  404878:	4b36      	ldr	r3, [pc, #216]	; (404954 <_lv_indev_read_task+0x7ac>)
  40487a:	4798      	blx	r3
  40487c:	2801      	cmp	r0, #1
  40487e:	d9e7      	bls.n	404850 <_lv_indev_read_task+0x6a8>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
  404880:	4648      	mov	r0, r9
  404882:	4b30      	ldr	r3, [pc, #192]	; (404944 <_lv_indev_read_task+0x79c>)
  404884:	4798      	blx	r3
  404886:	f080 0101 	eor.w	r1, r0, #1
  40488a:	b2c9      	uxtb	r1, r1
  40488c:	4648      	mov	r0, r9
  40488e:	4b32      	ldr	r3, [pc, #200]	; (404958 <_lv_indev_read_task+0x7b0>)
  404890:	4798      	blx	r3
  404892:	e7dd      	b.n	404850 <_lv_indev_read_task+0x6a8>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  404894:	4b2a      	ldr	r3, [pc, #168]	; (404940 <_lv_indev_read_task+0x798>)
  404896:	6818      	ldr	r0, [r3, #0]
  404898:	69c3      	ldr	r3, [r0, #28]
  40489a:	2200      	movs	r2, #0
  40489c:	210f      	movs	r1, #15
  40489e:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4048a0:	f104 0a1c 	add.w	sl, r4, #28
  4048a4:	4650      	mov	r0, sl
  4048a6:	4b28      	ldr	r3, [pc, #160]	; (404948 <_lv_indev_read_task+0x7a0>)
  4048a8:	4798      	blx	r3
  4048aa:	2800      	cmp	r0, #0
  4048ac:	f47f ad2f 	bne.w	40430e <_lv_indev_read_task+0x166>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  4048b0:	2200      	movs	r2, #0
  4048b2:	2104      	movs	r1, #4
  4048b4:	4b22      	ldr	r3, [pc, #136]	; (404940 <_lv_indev_read_task+0x798>)
  4048b6:	6818      	ldr	r0, [r3, #0]
  4048b8:	4b24      	ldr	r3, [pc, #144]	; (40494c <_lv_indev_read_task+0x7a4>)
  4048ba:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4048bc:	4650      	mov	r0, sl
  4048be:	4b22      	ldr	r3, [pc, #136]	; (404948 <_lv_indev_read_task+0x7a0>)
  4048c0:	4798      	blx	r3
  4048c2:	2800      	cmp	r0, #0
  4048c4:	d0c4      	beq.n	404850 <_lv_indev_read_task+0x6a8>
  4048c6:	e522      	b.n	40430e <_lv_indev_read_task+0x166>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  4048c8:	4b1d      	ldr	r3, [pc, #116]	; (404940 <_lv_indev_read_task+0x798>)
  4048ca:	6818      	ldr	r0, [r3, #0]
  4048cc:	69c3      	ldr	r3, [r0, #28]
  4048ce:	2200      	movs	r2, #0
  4048d0:	2110      	movs	r1, #16
  4048d2:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4048d4:	341c      	adds	r4, #28
  4048d6:	4620      	mov	r0, r4
  4048d8:	4b1b      	ldr	r3, [pc, #108]	; (404948 <_lv_indev_read_task+0x7a0>)
  4048da:	4798      	blx	r3
  4048dc:	2800      	cmp	r0, #0
  4048de:	f47f ad16 	bne.w	40430e <_lv_indev_read_task+0x166>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  4048e2:	2200      	movs	r2, #0
  4048e4:	2105      	movs	r1, #5
  4048e6:	4b16      	ldr	r3, [pc, #88]	; (404940 <_lv_indev_read_task+0x798>)
  4048e8:	6818      	ldr	r0, [r3, #0]
  4048ea:	4b18      	ldr	r3, [pc, #96]	; (40494c <_lv_indev_read_task+0x7a4>)
  4048ec:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4048ee:	4620      	mov	r0, r4
  4048f0:	4b15      	ldr	r3, [pc, #84]	; (404948 <_lv_indev_read_task+0x7a0>)
  4048f2:	4798      	blx	r3
  4048f4:	2800      	cmp	r0, #0
  4048f6:	f43f acc4 	beq.w	404282 <_lv_indev_read_task+0xda>
  4048fa:	e508      	b.n	40430e <_lv_indev_read_task+0x166>
                data->enc_diff--;
  4048fc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  404900:	3b01      	subs	r3, #1
  404902:	f8ad 3014 	strh.w	r3, [sp, #20]
  404906:	e4bc      	b.n	404282 <_lv_indev_read_task+0xda>
                lv_group_send_data(g, data->key);
  404908:	4648      	mov	r0, r9
  40490a:	4b0c      	ldr	r3, [pc, #48]	; (40493c <_lv_indev_read_task+0x794>)
  40490c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40490e:	f104 001c 	add.w	r0, r4, #28
  404912:	4b0d      	ldr	r3, [pc, #52]	; (404948 <_lv_indev_read_task+0x7a0>)
  404914:	4798      	blx	r3
  404916:	2800      	cmp	r0, #0
  404918:	f43f acb3 	beq.w	404282 <_lv_indev_read_task+0xda>
  40491c:	e4f7      	b.n	40430e <_lv_indev_read_task+0x166>
        if(data->key == LV_KEY_ENTER) {
  40491e:	9b03      	ldr	r3, [sp, #12]
  404920:	2b0a      	cmp	r3, #10
  404922:	d01b      	beq.n	40495c <_lv_indev_read_task+0x7b4>
        i->proc.pr_timestamp = 0;
  404924:	2200      	movs	r2, #0
  404926:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  404928:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  40492c:	f362 0300 	bfi	r3, r2, #0, #1
  404930:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  404934:	e4a5      	b.n	404282 <_lv_indev_read_task+0xda>
  404936:	bf00      	nop
  404938:	00414495 	.word	0x00414495
  40493c:	0040313d 	.word	0x0040313d
  404940:	2040c3e0 	.word	0x2040c3e0
  404944:	004032a9 	.word	0x004032a9
  404948:	00403311 	.word	0x00403311
  40494c:	00404e95 	.word	0x00404e95
  404950:	004144b1 	.word	0x004144b1
  404954:	004155a5 	.word	0x004155a5
  404958:	00403175 	.word	0x00403175
            bool editable = false;
  40495c:	aa06      	add	r2, sp, #24
  40495e:	2300      	movs	r3, #0
  404960:	f802 3d11 	strb.w	r3, [r2, #-17]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404964:	69c3      	ldr	r3, [r0, #28]
  404966:	2119      	movs	r1, #25
  404968:	4798      	blx	r3
            if(editable == false) {
  40496a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40496e:	2b00      	cmp	r3, #0
  404970:	d045      	beq.n	4049fe <_lv_indev_read_task+0x856>
            else if(g->editing) {
  404972:	f899 3014 	ldrb.w	r3, [r9, #20]
  404976:	f013 0f02 	tst.w	r3, #2
  40497a:	d078      	beq.n	404a6e <_lv_indev_read_task+0x8c6>
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
  40497c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404980:	f013 0f01 	tst.w	r3, #1
  404984:	d004      	beq.n	404990 <_lv_indev_read_task+0x7e8>
  404986:	4648      	mov	r0, r9
  404988:	4b62      	ldr	r3, [pc, #392]	; (404b14 <_lv_indev_read_task+0x96c>)
  40498a:	4798      	blx	r3
  40498c:	2801      	cmp	r0, #1
  40498e:	d8c9      	bhi.n	404924 <_lv_indev_read_task+0x77c>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404990:	4b61      	ldr	r3, [pc, #388]	; (404b18 <_lv_indev_read_task+0x970>)
  404992:	6818      	ldr	r0, [r3, #0]
  404994:	69c3      	ldr	r3, [r0, #28]
  404996:	2200      	movs	r2, #0
  404998:	210e      	movs	r1, #14
  40499a:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  40499c:	f104 0a1c 	add.w	sl, r4, #28
  4049a0:	4650      	mov	r0, sl
  4049a2:	4b5e      	ldr	r3, [pc, #376]	; (404b1c <_lv_indev_read_task+0x974>)
  4049a4:	4798      	blx	r3
  4049a6:	2800      	cmp	r0, #0
  4049a8:	f47f acb1 	bne.w	40430e <_lv_indev_read_task+0x166>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  4049ac:	2200      	movs	r2, #0
  4049ae:	2103      	movs	r1, #3
  4049b0:	4b59      	ldr	r3, [pc, #356]	; (404b18 <_lv_indev_read_task+0x970>)
  4049b2:	6818      	ldr	r0, [r3, #0]
  4049b4:	4b5a      	ldr	r3, [pc, #360]	; (404b20 <_lv_indev_read_task+0x978>)
  4049b6:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4049b8:	4650      	mov	r0, sl
  4049ba:	4b58      	ldr	r3, [pc, #352]	; (404b1c <_lv_indev_read_task+0x974>)
  4049bc:	4798      	blx	r3
  4049be:	2800      	cmp	r0, #0
  4049c0:	f47f aca5 	bne.w	40430e <_lv_indev_read_task+0x166>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  4049c4:	2200      	movs	r2, #0
  4049c6:	2106      	movs	r1, #6
  4049c8:	4b53      	ldr	r3, [pc, #332]	; (404b18 <_lv_indev_read_task+0x970>)
  4049ca:	6818      	ldr	r0, [r3, #0]
  4049cc:	4b54      	ldr	r3, [pc, #336]	; (404b20 <_lv_indev_read_task+0x978>)
  4049ce:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4049d0:	4650      	mov	r0, sl
  4049d2:	4b52      	ldr	r3, [pc, #328]	; (404b1c <_lv_indev_read_task+0x974>)
  4049d4:	4798      	blx	r3
  4049d6:	2800      	cmp	r0, #0
  4049d8:	f47f ac99 	bne.w	40430e <_lv_indev_read_task+0x166>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  4049dc:	2200      	movs	r2, #0
  4049de:	2107      	movs	r1, #7
  4049e0:	4b4d      	ldr	r3, [pc, #308]	; (404b18 <_lv_indev_read_task+0x970>)
  4049e2:	6818      	ldr	r0, [r3, #0]
  4049e4:	4b4e      	ldr	r3, [pc, #312]	; (404b20 <_lv_indev_read_task+0x978>)
  4049e6:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4049e8:	4650      	mov	r0, sl
  4049ea:	4b4c      	ldr	r3, [pc, #304]	; (404b1c <_lv_indev_read_task+0x974>)
  4049ec:	4798      	blx	r3
  4049ee:	2800      	cmp	r0, #0
  4049f0:	f47f ac8d 	bne.w	40430e <_lv_indev_read_task+0x166>
                    lv_group_send_data(g, LV_KEY_ENTER);
  4049f4:	210a      	movs	r1, #10
  4049f6:	4648      	mov	r0, r9
  4049f8:	4b4a      	ldr	r3, [pc, #296]	; (404b24 <_lv_indev_read_task+0x97c>)
  4049fa:	4798      	blx	r3
  4049fc:	e792      	b.n	404924 <_lv_indev_read_task+0x77c>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  4049fe:	4b46      	ldr	r3, [pc, #280]	; (404b18 <_lv_indev_read_task+0x970>)
  404a00:	6818      	ldr	r0, [r3, #0]
  404a02:	69c3      	ldr	r3, [r0, #28]
  404a04:	2200      	movs	r2, #0
  404a06:	210e      	movs	r1, #14
  404a08:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404a0a:	f104 0a1c 	add.w	sl, r4, #28
  404a0e:	4650      	mov	r0, sl
  404a10:	4b42      	ldr	r3, [pc, #264]	; (404b1c <_lv_indev_read_task+0x974>)
  404a12:	4798      	blx	r3
  404a14:	2800      	cmp	r0, #0
  404a16:	f47f ac7a 	bne.w	40430e <_lv_indev_read_task+0x166>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404a1a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404a1e:	f013 0f01 	tst.w	r3, #1
  404a22:	d105      	bne.n	404a30 <_lv_indev_read_task+0x888>
  404a24:	2200      	movs	r2, #0
  404a26:	2103      	movs	r1, #3
  404a28:	4b3b      	ldr	r3, [pc, #236]	; (404b18 <_lv_indev_read_task+0x970>)
  404a2a:	6818      	ldr	r0, [r3, #0]
  404a2c:	4b3c      	ldr	r3, [pc, #240]	; (404b20 <_lv_indev_read_task+0x978>)
  404a2e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404a30:	4650      	mov	r0, sl
  404a32:	4b3a      	ldr	r3, [pc, #232]	; (404b1c <_lv_indev_read_task+0x974>)
  404a34:	4798      	blx	r3
  404a36:	2800      	cmp	r0, #0
  404a38:	f47f ac69 	bne.w	40430e <_lv_indev_read_task+0x166>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404a3c:	2200      	movs	r2, #0
  404a3e:	2106      	movs	r1, #6
  404a40:	4b35      	ldr	r3, [pc, #212]	; (404b18 <_lv_indev_read_task+0x970>)
  404a42:	6818      	ldr	r0, [r3, #0]
  404a44:	4b36      	ldr	r3, [pc, #216]	; (404b20 <_lv_indev_read_task+0x978>)
  404a46:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404a48:	4650      	mov	r0, sl
  404a4a:	4b34      	ldr	r3, [pc, #208]	; (404b1c <_lv_indev_read_task+0x974>)
  404a4c:	4798      	blx	r3
  404a4e:	2800      	cmp	r0, #0
  404a50:	f47f ac5d 	bne.w	40430e <_lv_indev_read_task+0x166>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  404a54:	2200      	movs	r2, #0
  404a56:	2107      	movs	r1, #7
  404a58:	4b2f      	ldr	r3, [pc, #188]	; (404b18 <_lv_indev_read_task+0x970>)
  404a5a:	6818      	ldr	r0, [r3, #0]
  404a5c:	4b30      	ldr	r3, [pc, #192]	; (404b20 <_lv_indev_read_task+0x978>)
  404a5e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404a60:	4650      	mov	r0, sl
  404a62:	4b2e      	ldr	r3, [pc, #184]	; (404b1c <_lv_indev_read_task+0x974>)
  404a64:	4798      	blx	r3
  404a66:	2800      	cmp	r0, #0
  404a68:	f43f af5c 	beq.w	404924 <_lv_indev_read_task+0x77c>
  404a6c:	e44f      	b.n	40430e <_lv_indev_read_task+0x166>
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
  404a6e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404a72:	f013 0f01 	tst.w	r3, #1
  404a76:	f47f af55 	bne.w	404924 <_lv_indev_read_task+0x77c>
                lv_group_set_editing(g, true); /*Set edit mode*/
  404a7a:	2101      	movs	r1, #1
  404a7c:	4648      	mov	r0, r9
  404a7e:	4b2a      	ldr	r3, [pc, #168]	; (404b28 <_lv_indev_read_task+0x980>)
  404a80:	4798      	blx	r3
  404a82:	e74f      	b.n	404924 <_lv_indev_read_task+0x77c>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
  404a84:	f6bf ac43 	bge.w	40430e <_lv_indev_read_task+0x166>
  404a88:	2400      	movs	r4, #0
  404a8a:	f04f 0b14 	mov.w	fp, #20
  404a8e:	f8df a094 	ldr.w	sl, [pc, #148]	; 404b24 <_lv_indev_read_task+0x97c>
  404a92:	4659      	mov	r1, fp
  404a94:	4648      	mov	r0, r9
  404a96:	47d0      	blx	sl
  404a98:	3401      	adds	r4, #1
  404a9a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  404a9e:	425b      	negs	r3, r3
  404aa0:	429c      	cmp	r4, r3
  404aa2:	dbf6      	blt.n	404a92 <_lv_indev_read_task+0x8ea>
  404aa4:	e433      	b.n	40430e <_lv_indev_read_task+0x166>
            if(data->enc_diff < 0) {
  404aa6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  404aaa:	2b00      	cmp	r3, #0
  404aac:	db0d      	blt.n	404aca <_lv_indev_read_task+0x922>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
  404aae:	2b00      	cmp	r3, #0
  404ab0:	f77f ac2d 	ble.w	40430e <_lv_indev_read_task+0x166>
  404ab4:	2400      	movs	r4, #0
  404ab6:	f8df a07c 	ldr.w	sl, [pc, #124]	; 404b34 <_lv_indev_read_task+0x98c>
  404aba:	4648      	mov	r0, r9
  404abc:	47d0      	blx	sl
  404abe:	3401      	adds	r4, #1
  404ac0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  404ac4:	429c      	cmp	r4, r3
  404ac6:	dbf8      	blt.n	404aba <_lv_indev_read_task+0x912>
  404ac8:	e421      	b.n	40430e <_lv_indev_read_task+0x166>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
  404aca:	f6bf ac20 	bge.w	40430e <_lv_indev_read_task+0x166>
  404ace:	2400      	movs	r4, #0
  404ad0:	f8df a064 	ldr.w	sl, [pc, #100]	; 404b38 <_lv_indev_read_task+0x990>
  404ad4:	4648      	mov	r0, r9
  404ad6:	47d0      	blx	sl
  404ad8:	3401      	adds	r4, #1
  404ada:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  404ade:	425b      	negs	r3, r3
  404ae0:	429c      	cmp	r4, r3
  404ae2:	dbf7      	blt.n	404ad4 <_lv_indev_read_task+0x92c>
  404ae4:	e413      	b.n	40430e <_lv_indev_read_task+0x166>
        if(i->proc.types.pointer.last_point.x != x ||
  404ae6:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
  404aea:	4553      	cmp	r3, sl
  404aec:	d004      	beq.n	404af8 <_lv_indev_read_task+0x950>
            indev_proc_release(&i->proc);
  404aee:	f104 001c 	add.w	r0, r4, #28
  404af2:	4b0e      	ldr	r3, [pc, #56]	; (404b2c <_lv_indev_read_task+0x984>)
  404af4:	4798      	blx	r3
  404af6:	e43d      	b.n	404374 <_lv_indev_read_task+0x1cc>
        if(i->proc.types.pointer.last_point.x != x ||
  404af8:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
  404afc:	455b      	cmp	r3, fp
  404afe:	d1f6      	bne.n	404aee <_lv_indev_read_task+0x946>
  404b00:	e438      	b.n	404374 <_lv_indev_read_task+0x1cc>
    indev_act     = NULL;
  404b02:	2300      	movs	r3, #0
  404b04:	4a0a      	ldr	r2, [pc, #40]	; (404b30 <_lv_indev_read_task+0x988>)
  404b06:	6013      	str	r3, [r2, #0]
    indev_obj_act = NULL;
  404b08:	4a03      	ldr	r2, [pc, #12]	; (404b18 <_lv_indev_read_task+0x970>)
  404b0a:	6013      	str	r3, [r2, #0]
}
  404b0c:	b007      	add	sp, #28
  404b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b12:	bf00      	nop
  404b14:	004155a5 	.word	0x004155a5
  404b18:	2040c3e0 	.word	0x2040c3e0
  404b1c:	00403311 	.word	0x00403311
  404b20:	00404e95 	.word	0x00404e95
  404b24:	0040313d 	.word	0x0040313d
  404b28:	00403175 	.word	0x00403175
  404b2c:	0040352d 	.word	0x0040352d
  404b30:	2040c3dc 	.word	0x2040c3dc
  404b34:	00402f69 	.word	0x00402f69
  404b38:	00402f81 	.word	0x00402f81

00404b3c <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
  404b3c:	2850      	cmp	r0, #80	; 0x50
  404b3e:	d017      	beq.n	404b70 <style_prop_is_cacheble+0x34>
  404b40:	d90c      	bls.n	404b5c <style_prop_is_cacheble+0x20>
  404b42:	28ff      	cmp	r0, #255	; 0xff
  404b44:	d014      	beq.n	404b70 <style_prop_is_cacheble+0x34>
  404b46:	d82e      	bhi.n	404ba6 <style_prop_is_cacheble+0x6a>
  404b48:	286e      	cmp	r0, #110	; 0x6e
  404b4a:	d011      	beq.n	404b70 <style_prop_is_cacheble+0x34>
  404b4c:	d926      	bls.n	404b9c <style_prop_is_cacheble+0x60>
  404b4e:	287f      	cmp	r0, #127	; 0x7f
  404b50:	d00e      	beq.n	404b70 <style_prop_is_cacheble+0x34>
  404b52:	2891      	cmp	r0, #145	; 0x91
  404b54:	d00c      	beq.n	404b70 <style_prop_is_cacheble+0x34>
  404b56:	2872      	cmp	r0, #114	; 0x72
  404b58:	d115      	bne.n	404b86 <style_prop_is_cacheble+0x4a>
  404b5a:	e009      	b.n	404b70 <style_prop_is_cacheble+0x34>
  404b5c:	2818      	cmp	r0, #24
  404b5e:	d909      	bls.n	404b74 <style_prop_is_cacheble+0x38>
  404b60:	2833      	cmp	r0, #51	; 0x33
  404b62:	d816      	bhi.n	404b92 <style_prop_is_cacheble+0x56>
  404b64:	2830      	cmp	r0, #48	; 0x30
  404b66:	d203      	bcs.n	404b70 <style_prop_is_cacheble+0x34>
  404b68:	2820      	cmp	r0, #32
  404b6a:	d001      	beq.n	404b70 <style_prop_is_cacheble+0x34>
  404b6c:	282c      	cmp	r0, #44	; 0x2c
  404b6e:	d10a      	bne.n	404b86 <style_prop_is_cacheble+0x4a>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
  404b70:	2001      	movs	r0, #1
            break;
        default:
            return false;
    }
}
  404b72:	4770      	bx	lr
    switch(prop) {
  404b74:	2815      	cmp	r0, #21
  404b76:	d2fb      	bcs.n	404b70 <style_prop_is_cacheble+0x34>
  404b78:	2807      	cmp	r0, #7
  404b7a:	d806      	bhi.n	404b8a <style_prop_is_cacheble+0x4e>
  404b7c:	2804      	cmp	r0, #4
  404b7e:	d2f7      	bcs.n	404b70 <style_prop_is_cacheble+0x34>
  404b80:	3801      	subs	r0, #1
  404b82:	2801      	cmp	r0, #1
  404b84:	d9f4      	bls.n	404b70 <style_prop_is_cacheble+0x34>
            return false;
  404b86:	2000      	movs	r0, #0
  404b88:	4770      	bx	lr
    switch(prop) {
  404b8a:	3810      	subs	r0, #16
  404b8c:	2803      	cmp	r0, #3
  404b8e:	d8fa      	bhi.n	404b86 <style_prop_is_cacheble+0x4a>
  404b90:	e7ee      	b.n	404b70 <style_prop_is_cacheble+0x34>
  404b92:	2840      	cmp	r0, #64	; 0x40
  404b94:	d0ec      	beq.n	404b70 <style_prop_is_cacheble+0x34>
  404b96:	2842      	cmp	r0, #66	; 0x42
  404b98:	d1f5      	bne.n	404b86 <style_prop_is_cacheble+0x4a>
  404b9a:	e7e9      	b.n	404b70 <style_prop_is_cacheble+0x34>
  404b9c:	2854      	cmp	r0, #84	; 0x54
  404b9e:	d0e7      	beq.n	404b70 <style_prop_is_cacheble+0x34>
  404ba0:	2860      	cmp	r0, #96	; 0x60
  404ba2:	d1f0      	bne.n	404b86 <style_prop_is_cacheble+0x4a>
  404ba4:	e7e4      	b.n	404b70 <style_prop_is_cacheble+0x34>
  404ba6:	f248 0383 	movw	r3, #32899	; 0x8083
  404baa:	4298      	cmp	r0, r3
  404bac:	d0e0      	beq.n	404b70 <style_prop_is_cacheble+0x34>
  404bae:	d90c      	bls.n	404bca <style_prop_is_cacheble+0x8e>
  404bb0:	f248 03a0 	movw	r3, #32928	; 0x80a0
  404bb4:	4298      	cmp	r0, r3
  404bb6:	d0db      	beq.n	404b70 <style_prop_is_cacheble+0x34>
  404bb8:	f248 03ad 	movw	r3, #32941	; 0x80ad
  404bbc:	4298      	cmp	r0, r3
  404bbe:	d0d7      	beq.n	404b70 <style_prop_is_cacheble+0x34>
  404bc0:	f248 038e 	movw	r3, #32910	; 0x808e
  404bc4:	4298      	cmp	r0, r3
  404bc6:	d1de      	bne.n	404b86 <style_prop_is_cacheble+0x4a>
  404bc8:	e7d2      	b.n	404b70 <style_prop_is_cacheble+0x34>
  404bca:	f248 030c 	movw	r3, #32780	; 0x800c
  404bce:	4298      	cmp	r0, r3
  404bd0:	d0ce      	beq.n	404b70 <style_prop_is_cacheble+0x34>
  404bd2:	d3d8      	bcc.n	404b86 <style_prop_is_cacheble+0x4a>
  404bd4:	4b02      	ldr	r3, [pc, #8]	; (404be0 <style_prop_is_cacheble+0xa4>)
  404bd6:	4403      	add	r3, r0
  404bd8:	2b01      	cmp	r3, #1
  404bda:	d8d4      	bhi.n	404b86 <style_prop_is_cacheble+0x4a>
  404bdc:	e7c8      	b.n	404b70 <style_prop_is_cacheble+0x34>
  404bde:	bf00      	nop
  404be0:	ffff7f80 	.word	0xffff7f80

00404be4 <refresh_children_position>:
{
  404be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404be8:	4689      	mov	r9, r1
  404bea:	4690      	mov	r8, r2
    _LV_LL_READ(obj->child_ll, i) {
  404bec:	f100 0a04 	add.w	sl, r0, #4
  404bf0:	4650      	mov	r0, sl
  404bf2:	4b11      	ldr	r3, [pc, #68]	; (404c38 <refresh_children_position+0x54>)
  404bf4:	4798      	blx	r3
  404bf6:	b1e0      	cbz	r0, 404c32 <refresh_children_position+0x4e>
  404bf8:	4604      	mov	r4, r0
        i->coords.x1 += x_diff;
  404bfa:	fa1f f689 	uxth.w	r6, r9
        i->coords.y1 += y_diff;
  404bfe:	fa1f f588 	uxth.w	r5, r8
    _LV_LL_READ(obj->child_ll, i) {
  404c02:	4f0e      	ldr	r7, [pc, #56]	; (404c3c <refresh_children_position+0x58>)
        i->coords.x1 += x_diff;
  404c04:	8a23      	ldrh	r3, [r4, #16]
  404c06:	4433      	add	r3, r6
  404c08:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
  404c0a:	8a63      	ldrh	r3, [r4, #18]
  404c0c:	442b      	add	r3, r5
  404c0e:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
  404c10:	8aa3      	ldrh	r3, [r4, #20]
  404c12:	4433      	add	r3, r6
  404c14:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
  404c16:	8ae3      	ldrh	r3, [r4, #22]
  404c18:	442b      	add	r3, r5
  404c1a:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
  404c1c:	4642      	mov	r2, r8
  404c1e:	4649      	mov	r1, r9
  404c20:	4620      	mov	r0, r4
  404c22:	f7ff ffdf 	bl	404be4 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
  404c26:	4621      	mov	r1, r4
  404c28:	4650      	mov	r0, sl
  404c2a:	47b8      	blx	r7
  404c2c:	4604      	mov	r4, r0
  404c2e:	2800      	cmp	r0, #0
  404c30:	d1e8      	bne.n	404c04 <refresh_children_position+0x20>
  404c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404c36:	bf00      	nop
  404c38:	004153ed 	.word	0x004153ed
  404c3c:	00415401 	.word	0x00415401

00404c40 <lv_init>:
    if(lv_initialized) {
  404c40:	4b22      	ldr	r3, [pc, #136]	; (404ccc <lv_init+0x8c>)
  404c42:	781b      	ldrb	r3, [r3, #0]
  404c44:	b103      	cbz	r3, 404c48 <lv_init+0x8>
  404c46:	4770      	bx	lr
{
  404c48:	b510      	push	{r4, lr}
  404c4a:	b084      	sub	sp, #16
    _lv_mem_init();
  404c4c:	4b20      	ldr	r3, [pc, #128]	; (404cd0 <lv_init+0x90>)
  404c4e:	4798      	blx	r3
    _lv_task_core_init();
  404c50:	4b20      	ldr	r3, [pc, #128]	; (404cd4 <lv_init+0x94>)
  404c52:	4798      	blx	r3
    _lv_fs_init();
  404c54:	4b20      	ldr	r3, [pc, #128]	; (404cd8 <lv_init+0x98>)
  404c56:	4798      	blx	r3
    _lv_anim_core_init();
  404c58:	4b20      	ldr	r3, [pc, #128]	; (404cdc <lv_init+0x9c>)
  404c5a:	4798      	blx	r3
    _lv_group_init();
  404c5c:	4b20      	ldr	r3, [pc, #128]	; (404ce0 <lv_init+0xa0>)
  404c5e:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
  404c60:	2110      	movs	r1, #16
  404c62:	4820      	ldr	r0, [pc, #128]	; (404ce4 <lv_init+0xa4>)
  404c64:	4c20      	ldr	r4, [pc, #128]	; (404ce8 <lv_init+0xa8>)
  404c66:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
  404c68:	f44f 71c4 	mov.w	r1, #392	; 0x188
  404c6c:	481f      	ldr	r0, [pc, #124]	; (404cec <lv_init+0xac>)
  404c6e:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
  404c70:	2160      	movs	r1, #96	; 0x60
  404c72:	481f      	ldr	r0, [pc, #124]	; (404cf0 <lv_init+0xb0>)
  404c74:	47a0      	blx	r4
  404c76:	f04f 0000 	mov.w	r0, #0
  404c7a:	2316      	movs	r3, #22
  404c7c:	f363 00c7 	bfi	r0, r3, #3, #5
  404c80:	2214      	movs	r2, #20
  404c82:	f362 200c 	bfi	r0, r2, #8, #5
  404c86:	f36f 304f 	bfc	r0, #13, #3
  404c8a:	f04f 0100 	mov.w	r1, #0
  404c8e:	220d      	movs	r2, #13
  404c90:	f362 01c7 	bfi	r1, r2, #3, #5
  404c94:	f363 210c 	bfi	r1, r3, #8, #5
  404c98:	f36f 314f 	bfc	r1, #13, #3
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
  404c9c:	4b15      	ldr	r3, [pc, #84]	; (404cf4 <lv_init+0xb4>)
  404c9e:	9302      	str	r3, [sp, #8]
  404ca0:	9301      	str	r3, [sp, #4]
  404ca2:	9300      	str	r3, [sp, #0]
  404ca4:	2202      	movs	r2, #2
  404ca6:	4c14      	ldr	r4, [pc, #80]	; (404cf8 <lv_init+0xb8>)
  404ca8:	47a0      	blx	r4
    lv_theme_set_act(th);
  404caa:	4b14      	ldr	r3, [pc, #80]	; (404cfc <lv_init+0xbc>)
  404cac:	4798      	blx	r3
    _lv_refr_init();
  404cae:	4b14      	ldr	r3, [pc, #80]	; (404d00 <lv_init+0xc0>)
  404cb0:	4798      	blx	r3
    _lv_indev_init();
  404cb2:	4b14      	ldr	r3, [pc, #80]	; (404d04 <lv_init+0xc4>)
  404cb4:	4798      	blx	r3
    _lv_img_decoder_init();
  404cb6:	4b14      	ldr	r3, [pc, #80]	; (404d08 <lv_init+0xc8>)
  404cb8:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
  404cba:	2001      	movs	r0, #1
  404cbc:	4b13      	ldr	r3, [pc, #76]	; (404d0c <lv_init+0xcc>)
  404cbe:	4798      	blx	r3
    lv_initialized = true;
  404cc0:	2201      	movs	r2, #1
  404cc2:	4b02      	ldr	r3, [pc, #8]	; (404ccc <lv_init+0x8c>)
  404cc4:	701a      	strb	r2, [r3, #0]
}
  404cc6:	b004      	add	sp, #16
  404cc8:	bd10      	pop	{r4, pc}
  404cca:	bf00      	nop
  404ccc:	2040c3ec 	.word	0x2040c3ec
  404cd0:	004157a5 	.word	0x004157a5
  404cd4:	0041690d 	.word	0x0041690d
  404cd8:	00415149 	.word	0x00415149
  404cdc:	004146d5 	.word	0x004146d5
  404ce0:	00402f55 	.word	0x00402f55
  404ce4:	2043a204 	.word	0x2043a204
  404ce8:	00415343 	.word	0x00415343
  404cec:	2043a160 	.word	0x2043a160
  404cf0:	2043a154 	.word	0x2043a154
  404cf4:	2040002c 	.word	0x2040002c
  404cf8:	0041a3dd 	.word	0x0041a3dd
  404cfc:	00417425 	.word	0x00417425
  404d00:	00408e6d 	.word	0x00408e6d
  404d04:	0040377d 	.word	0x0040377d
  404d08:	00412f0d 	.word	0x00412f0d
  404d0c:	0041251d 	.word	0x0041251d

00404d10 <lv_obj_set_click>:
{
  404d10:	b538      	push	{r3, r4, r5, lr}
  404d12:	4604      	mov	r4, r0
  404d14:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404d16:	4b08      	ldr	r3, [pc, #32]	; (404d38 <lv_obj_set_click+0x28>)
  404d18:	4798      	blx	r3
  404d1a:	b130      	cbz	r0, 404d2a <lv_obj_set_click+0x1a>
    obj->click = (en == true ? 1 : 0);
  404d1c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404d20:	f365 0300 	bfi	r3, r5, #0, #1
  404d24:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  404d28:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404d2a:	4622      	mov	r2, r4
  404d2c:	2300      	movs	r3, #0
  404d2e:	4803      	ldr	r0, [pc, #12]	; (404d3c <lv_obj_set_click+0x2c>)
  404d30:	4903      	ldr	r1, [pc, #12]	; (404d40 <lv_obj_set_click+0x30>)
  404d32:	4788      	blx	r1
  404d34:	e7fe      	b.n	404d34 <lv_obj_set_click+0x24>
  404d36:	bf00      	nop
  404d38:	004150ef 	.word	0x004150ef
  404d3c:	00425a74 	.word	0x00425a74
  404d40:	004150f9 	.word	0x004150f9

00404d44 <lv_obj_add_protect>:
{
  404d44:	b538      	push	{r3, r4, r5, lr}
  404d46:	4604      	mov	r4, r0
  404d48:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404d4a:	4b07      	ldr	r3, [pc, #28]	; (404d68 <lv_obj_add_protect+0x24>)
  404d4c:	4798      	blx	r3
  404d4e:	b128      	cbz	r0, 404d5c <lv_obj_add_protect+0x18>
    obj->protect |= prot;
  404d50:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  404d54:	431d      	orrs	r5, r3
  404d56:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  404d5a:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404d5c:	4622      	mov	r2, r4
  404d5e:	2300      	movs	r3, #0
  404d60:	4802      	ldr	r0, [pc, #8]	; (404d6c <lv_obj_add_protect+0x28>)
  404d62:	4903      	ldr	r1, [pc, #12]	; (404d70 <lv_obj_add_protect+0x2c>)
  404d64:	4788      	blx	r1
  404d66:	e7fe      	b.n	404d66 <lv_obj_add_protect+0x22>
  404d68:	004150ef 	.word	0x004150ef
  404d6c:	00425a74 	.word	0x00425a74
  404d70:	004150f9 	.word	0x004150f9

00404d74 <lv_obj_clear_protect>:
{
  404d74:	b538      	push	{r3, r4, r5, lr}
  404d76:	4604      	mov	r4, r0
  404d78:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404d7a:	4b08      	ldr	r3, [pc, #32]	; (404d9c <lv_obj_clear_protect+0x28>)
  404d7c:	4798      	blx	r3
  404d7e:	b130      	cbz	r0, 404d8e <lv_obj_clear_protect+0x1a>
    obj->protect &= prot;
  404d80:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  404d84:	ea23 0305 	bic.w	r3, r3, r5
  404d88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  404d8c:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404d8e:	4622      	mov	r2, r4
  404d90:	2300      	movs	r3, #0
  404d92:	4803      	ldr	r0, [pc, #12]	; (404da0 <lv_obj_clear_protect+0x2c>)
  404d94:	4903      	ldr	r1, [pc, #12]	; (404da4 <lv_obj_clear_protect+0x30>)
  404d96:	4788      	blx	r1
  404d98:	e7fe      	b.n	404d98 <lv_obj_clear_protect+0x24>
  404d9a:	bf00      	nop
  404d9c:	004150ef 	.word	0x004150ef
  404da0:	00425a74 	.word	0x00425a74
  404da4:	004150f9 	.word	0x004150f9

00404da8 <lv_obj_set_event_cb>:
{
  404da8:	b538      	push	{r3, r4, r5, lr}
  404daa:	4604      	mov	r4, r0
  404dac:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404dae:	4b05      	ldr	r3, [pc, #20]	; (404dc4 <lv_obj_set_event_cb+0x1c>)
  404db0:	4798      	blx	r3
  404db2:	b108      	cbz	r0, 404db8 <lv_obj_set_event_cb+0x10>
    obj->event_cb = event_cb;
  404db4:	61a5      	str	r5, [r4, #24]
  404db6:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404db8:	4622      	mov	r2, r4
  404dba:	2300      	movs	r3, #0
  404dbc:	4802      	ldr	r0, [pc, #8]	; (404dc8 <lv_obj_set_event_cb+0x20>)
  404dbe:	4903      	ldr	r1, [pc, #12]	; (404dcc <lv_obj_set_event_cb+0x24>)
  404dc0:	4788      	blx	r1
  404dc2:	e7fe      	b.n	404dc2 <lv_obj_set_event_cb+0x1a>
  404dc4:	004150ef 	.word	0x004150ef
  404dc8:	00425a74 	.word	0x00425a74
  404dcc:	004150f9 	.word	0x004150f9

00404dd0 <lv_event_send_func>:
{
  404dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404dd4:	b084      	sub	sp, #16
  404dd6:	4607      	mov	r7, r0
  404dd8:	4615      	mov	r5, r2
  404dda:	461e      	mov	r6, r3
    if(obj != NULL) {
  404ddc:	460c      	mov	r4, r1
  404dde:	b121      	cbz	r1, 404dea <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404de0:	4608      	mov	r0, r1
  404de2:	4b25      	ldr	r3, [pc, #148]	; (404e78 <lv_event_send_func+0xa8>)
  404de4:	4798      	blx	r3
  404de6:	2800      	cmp	r0, #0
  404de8:	d035      	beq.n	404e56 <lv_event_send_func+0x86>
    event_temp_data.obj     = obj;
  404dea:	9401      	str	r4, [sp, #4]
    event_temp_data.deleted = false;
  404dec:	2300      	movs	r3, #0
  404dee:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
  404df2:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
  404df4:	4b21      	ldr	r3, [pc, #132]	; (404e7c <lv_event_send_func+0xac>)
  404df6:	681b      	ldr	r3, [r3, #0]
  404df8:	b103      	cbz	r3, 404dfc <lv_event_send_func+0x2c>
        event_temp_data.prev = event_temp_data_head;
  404dfa:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
  404dfc:	aa01      	add	r2, sp, #4
  404dfe:	4b1f      	ldr	r3, [pc, #124]	; (404e7c <lv_event_send_func+0xac>)
  404e00:	601a      	str	r2, [r3, #0]
    const void * event_act_data_save = event_act_data;
  404e02:	4b1f      	ldr	r3, [pc, #124]	; (404e80 <lv_event_send_func+0xb0>)
  404e04:	f8d3 8000 	ldr.w	r8, [r3]
    event_act_data                   = data;
  404e08:	601e      	str	r6, [r3, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
  404e0a:	4b1e      	ldr	r3, [pc, #120]	; (404e84 <lv_event_send_func+0xb4>)
  404e0c:	4798      	blx	r3
    if(indev_act) {
  404e0e:	b118      	cbz	r0, 404e18 <lv_event_send_func+0x48>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
  404e10:	6883      	ldr	r3, [r0, #8]
  404e12:	b10b      	cbz	r3, 404e18 <lv_event_send_func+0x48>
  404e14:	4629      	mov	r1, r5
  404e16:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
  404e18:	b117      	cbz	r7, 404e20 <lv_event_send_func+0x50>
  404e1a:	4629      	mov	r1, r5
  404e1c:	4620      	mov	r0, r4
  404e1e:	47b8      	blx	r7
    event_act_data = event_act_data_save;
  404e20:	4b17      	ldr	r3, [pc, #92]	; (404e80 <lv_event_send_func+0xb0>)
  404e22:	f8c3 8000 	str.w	r8, [r3]
    event_temp_data_head = event_temp_data_head->prev;
  404e26:	4b15      	ldr	r3, [pc, #84]	; (404e7c <lv_event_send_func+0xac>)
  404e28:	681a      	ldr	r2, [r3, #0]
  404e2a:	6892      	ldr	r2, [r2, #8]
  404e2c:	601a      	str	r2, [r3, #0]
    if(event_temp_data.deleted) {
  404e2e:	f89d 3008 	ldrb.w	r3, [sp, #8]
  404e32:	b9b3      	cbnz	r3, 404e62 <lv_event_send_func+0x92>
    if(obj) {
  404e34:	b1cc      	cbz	r4, 404e6a <lv_event_send_func+0x9a>
        if(obj->parent_event && obj->parent) {
  404e36:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404e3a:	f013 0f40 	tst.w	r3, #64	; 0x40
  404e3e:	d016      	beq.n	404e6e <lv_event_send_func+0x9e>
  404e40:	6820      	ldr	r0, [r4, #0]
  404e42:	b1b0      	cbz	r0, 404e72 <lv_event_send_func+0xa2>
            lv_res_t res = lv_event_send(obj->parent, event, data);
  404e44:	4632      	mov	r2, r6
  404e46:	4629      	mov	r1, r5
  404e48:	4b0f      	ldr	r3, [pc, #60]	; (404e88 <lv_event_send_func+0xb8>)
  404e4a:	4798      	blx	r3
        return LV_RES_INV;
  404e4c:	2801      	cmp	r0, #1
  404e4e:	bf14      	ite	ne
  404e50:	2000      	movne	r0, #0
  404e52:	2001      	moveq	r0, #1
  404e54:	e006      	b.n	404e64 <lv_event_send_func+0x94>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404e56:	4622      	mov	r2, r4
  404e58:	2300      	movs	r3, #0
  404e5a:	480c      	ldr	r0, [pc, #48]	; (404e8c <lv_event_send_func+0xbc>)
  404e5c:	490c      	ldr	r1, [pc, #48]	; (404e90 <lv_event_send_func+0xc0>)
  404e5e:	4788      	blx	r1
  404e60:	e7fe      	b.n	404e60 <lv_event_send_func+0x90>
        return LV_RES_INV;
  404e62:	2000      	movs	r0, #0
}
  404e64:	b004      	add	sp, #16
  404e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_RES_OK;
  404e6a:	2001      	movs	r0, #1
  404e6c:	e7fa      	b.n	404e64 <lv_event_send_func+0x94>
  404e6e:	2001      	movs	r0, #1
  404e70:	e7f8      	b.n	404e64 <lv_event_send_func+0x94>
  404e72:	2001      	movs	r0, #1
  404e74:	e7f6      	b.n	404e64 <lv_event_send_func+0x94>
  404e76:	bf00      	nop
  404e78:	004150ef 	.word	0x004150ef
  404e7c:	2040c3e8 	.word	0x2040c3e8
  404e80:	2040c3e4 	.word	0x2040c3e4
  404e84:	004036dd 	.word	0x004036dd
  404e88:	00404e95 	.word	0x00404e95
  404e8c:	00425a74 	.word	0x00425a74
  404e90:	004150f9 	.word	0x004150f9

00404e94 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
  404e94:	b198      	cbz	r0, 404ebe <lv_event_send+0x2a>
{
  404e96:	b570      	push	{r4, r5, r6, lr}
  404e98:	4604      	mov	r4, r0
  404e9a:	4616      	mov	r6, r2
  404e9c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404e9e:	4b09      	ldr	r3, [pc, #36]	; (404ec4 <lv_event_send+0x30>)
  404ea0:	4798      	blx	r3
  404ea2:	b928      	cbnz	r0, 404eb0 <lv_event_send+0x1c>
  404ea4:	4622      	mov	r2, r4
  404ea6:	2300      	movs	r3, #0
  404ea8:	4807      	ldr	r0, [pc, #28]	; (404ec8 <lv_event_send+0x34>)
  404eaa:	4908      	ldr	r1, [pc, #32]	; (404ecc <lv_event_send+0x38>)
  404eac:	4788      	blx	r1
  404eae:	e7fe      	b.n	404eae <lv_event_send+0x1a>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
  404eb0:	4633      	mov	r3, r6
  404eb2:	462a      	mov	r2, r5
  404eb4:	4621      	mov	r1, r4
  404eb6:	69a0      	ldr	r0, [r4, #24]
  404eb8:	4c05      	ldr	r4, [pc, #20]	; (404ed0 <lv_event_send+0x3c>)
  404eba:	47a0      	blx	r4
    return res;
  404ebc:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
  404ebe:	2001      	movs	r0, #1
  404ec0:	4770      	bx	lr
  404ec2:	bf00      	nop
  404ec4:	004150ef 	.word	0x004150ef
  404ec8:	00425a74 	.word	0x00425a74
  404ecc:	004150f9 	.word	0x004150f9
  404ed0:	00404dd1 	.word	0x00404dd1

00404ed4 <lv_obj_set_signal_cb>:
{
  404ed4:	b538      	push	{r3, r4, r5, lr}
  404ed6:	4604      	mov	r4, r0
  404ed8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404eda:	4b05      	ldr	r3, [pc, #20]	; (404ef0 <lv_obj_set_signal_cb+0x1c>)
  404edc:	4798      	blx	r3
  404ede:	b108      	cbz	r0, 404ee4 <lv_obj_set_signal_cb+0x10>
    obj->signal_cb = signal_cb;
  404ee0:	61e5      	str	r5, [r4, #28]
  404ee2:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404ee4:	4622      	mov	r2, r4
  404ee6:	2300      	movs	r3, #0
  404ee8:	4802      	ldr	r0, [pc, #8]	; (404ef4 <lv_obj_set_signal_cb+0x20>)
  404eea:	4903      	ldr	r1, [pc, #12]	; (404ef8 <lv_obj_set_signal_cb+0x24>)
  404eec:	4788      	blx	r1
  404eee:	e7fe      	b.n	404eee <lv_obj_set_signal_cb+0x1a>
  404ef0:	004150ef 	.word	0x004150ef
  404ef4:	00425a74 	.word	0x00425a74
  404ef8:	004150f9 	.word	0x004150f9

00404efc <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
  404efc:	b120      	cbz	r0, 404f08 <lv_signal_send+0xc>
{
  404efe:	b510      	push	{r4, lr}
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
  404f00:	69c4      	ldr	r4, [r0, #28]
  404f02:	b11c      	cbz	r4, 404f0c <lv_signal_send+0x10>
  404f04:	47a0      	blx	r4
  404f06:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
  404f08:	2001      	movs	r0, #1
  404f0a:	4770      	bx	lr
    lv_res_t res = LV_RES_OK;
  404f0c:	2001      	movs	r0, #1
}
  404f0e:	bd10      	pop	{r4, pc}

00404f10 <lv_obj_set_design_cb>:
{
  404f10:	b538      	push	{r3, r4, r5, lr}
  404f12:	4604      	mov	r4, r0
  404f14:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404f16:	4b05      	ldr	r3, [pc, #20]	; (404f2c <lv_obj_set_design_cb+0x1c>)
  404f18:	4798      	blx	r3
  404f1a:	b108      	cbz	r0, 404f20 <lv_obj_set_design_cb+0x10>
    obj->design_cb = design_cb;
  404f1c:	6225      	str	r5, [r4, #32]
  404f1e:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404f20:	4622      	mov	r2, r4
  404f22:	2300      	movs	r3, #0
  404f24:	4802      	ldr	r0, [pc, #8]	; (404f30 <lv_obj_set_design_cb+0x20>)
  404f26:	4903      	ldr	r1, [pc, #12]	; (404f34 <lv_obj_set_design_cb+0x24>)
  404f28:	4788      	blx	r1
  404f2a:	e7fe      	b.n	404f2a <lv_obj_set_design_cb+0x1a>
  404f2c:	004150ef 	.word	0x004150ef
  404f30:	00425a74 	.word	0x00425a74
  404f34:	004150f9 	.word	0x004150f9

00404f38 <lv_obj_allocate_ext_attr>:
{
  404f38:	b538      	push	{r3, r4, r5, lr}
  404f3a:	4604      	mov	r4, r0
  404f3c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404f3e:	4b09      	ldr	r3, [pc, #36]	; (404f64 <lv_obj_allocate_ext_attr+0x2c>)
  404f40:	4798      	blx	r3
  404f42:	b928      	cbnz	r0, 404f50 <lv_obj_allocate_ext_attr+0x18>
  404f44:	4622      	mov	r2, r4
  404f46:	2300      	movs	r3, #0
  404f48:	4807      	ldr	r0, [pc, #28]	; (404f68 <lv_obj_allocate_ext_attr+0x30>)
  404f4a:	4908      	ldr	r1, [pc, #32]	; (404f6c <lv_obj_allocate_ext_attr+0x34>)
  404f4c:	4788      	blx	r1
  404f4e:	e7fe      	b.n	404f4e <lv_obj_allocate_ext_attr+0x16>
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
  404f50:	4629      	mov	r1, r5
  404f52:	6a60      	ldr	r0, [r4, #36]	; 0x24
  404f54:	4b06      	ldr	r3, [pc, #24]	; (404f70 <lv_obj_allocate_ext_attr+0x38>)
  404f56:	4798      	blx	r3
    if(new_ext == NULL) return NULL;
  404f58:	4603      	mov	r3, r0
  404f5a:	b100      	cbz	r0, 404f5e <lv_obj_allocate_ext_attr+0x26>
    obj->ext_attr = new_ext;
  404f5c:	6260      	str	r0, [r4, #36]	; 0x24
}
  404f5e:	4618      	mov	r0, r3
  404f60:	bd38      	pop	{r3, r4, r5, pc}
  404f62:	bf00      	nop
  404f64:	004150ef 	.word	0x004150ef
  404f68:	00425a74 	.word	0x00425a74
  404f6c:	004150f9 	.word	0x004150f9
  404f70:	00415c61 	.word	0x00415c61

00404f74 <lv_obj_refresh_ext_draw_pad>:
{
  404f74:	b510      	push	{r4, lr}
  404f76:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404f78:	4b07      	ldr	r3, [pc, #28]	; (404f98 <lv_obj_refresh_ext_draw_pad+0x24>)
  404f7a:	4798      	blx	r3
  404f7c:	b928      	cbnz	r0, 404f8a <lv_obj_refresh_ext_draw_pad+0x16>
  404f7e:	4622      	mov	r2, r4
  404f80:	2300      	movs	r3, #0
  404f82:	4806      	ldr	r0, [pc, #24]	; (404f9c <lv_obj_refresh_ext_draw_pad+0x28>)
  404f84:	4906      	ldr	r1, [pc, #24]	; (404fa0 <lv_obj_refresh_ext_draw_pad+0x2c>)
  404f86:	4788      	blx	r1
  404f88:	e7fe      	b.n	404f88 <lv_obj_refresh_ext_draw_pad+0x14>
    obj->ext_draw_pad = 0;
  404f8a:	2200      	movs	r2, #0
  404f8c:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
  404f8e:	69e3      	ldr	r3, [r4, #28]
  404f90:	2106      	movs	r1, #6
  404f92:	4620      	mov	r0, r4
  404f94:	4798      	blx	r3
  404f96:	bd10      	pop	{r4, pc}
  404f98:	004150ef 	.word	0x004150ef
  404f9c:	00425a74 	.word	0x00425a74
  404fa0:	004150f9 	.word	0x004150f9

00404fa4 <lv_obj_get_parent>:
{
  404fa4:	b510      	push	{r4, lr}
  404fa6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404fa8:	4b05      	ldr	r3, [pc, #20]	; (404fc0 <lv_obj_get_parent+0x1c>)
  404faa:	4798      	blx	r3
  404fac:	b108      	cbz	r0, 404fb2 <lv_obj_get_parent+0xe>
}
  404fae:	6820      	ldr	r0, [r4, #0]
  404fb0:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404fb2:	4622      	mov	r2, r4
  404fb4:	2300      	movs	r3, #0
  404fb6:	4803      	ldr	r0, [pc, #12]	; (404fc4 <lv_obj_get_parent+0x20>)
  404fb8:	4903      	ldr	r1, [pc, #12]	; (404fc8 <lv_obj_get_parent+0x24>)
  404fba:	4788      	blx	r1
  404fbc:	e7fe      	b.n	404fbc <lv_obj_get_parent+0x18>
  404fbe:	bf00      	nop
  404fc0:	004150ef 	.word	0x004150ef
  404fc4:	00425a74 	.word	0x00425a74
  404fc8:	004150f9 	.word	0x004150f9

00404fcc <lv_obj_get_screen>:
{
  404fcc:	b538      	push	{r3, r4, r5, lr}
  404fce:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404fd0:	4b09      	ldr	r3, [pc, #36]	; (404ff8 <lv_obj_get_screen+0x2c>)
  404fd2:	4798      	blx	r3
  404fd4:	b108      	cbz	r0, 404fda <lv_obj_get_screen+0xe>
        par   = lv_obj_get_parent(act_p);
  404fd6:	4d09      	ldr	r5, [pc, #36]	; (404ffc <lv_obj_get_screen+0x30>)
  404fd8:	e006      	b.n	404fe8 <lv_obj_get_screen+0x1c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  404fda:	4622      	mov	r2, r4
  404fdc:	2300      	movs	r3, #0
  404fde:	4808      	ldr	r0, [pc, #32]	; (405000 <lv_obj_get_screen+0x34>)
  404fe0:	4908      	ldr	r1, [pc, #32]	; (405004 <lv_obj_get_screen+0x38>)
  404fe2:	4788      	blx	r1
  404fe4:	e7fe      	b.n	404fe4 <lv_obj_get_screen+0x18>
        par   = lv_obj_get_parent(act_p);
  404fe6:	461c      	mov	r4, r3
  404fe8:	4620      	mov	r0, r4
  404fea:	47a8      	blx	r5
    } while(par != NULL);
  404fec:	4603      	mov	r3, r0
  404fee:	2800      	cmp	r0, #0
  404ff0:	d1f9      	bne.n	404fe6 <lv_obj_get_screen+0x1a>
}
  404ff2:	4620      	mov	r0, r4
  404ff4:	bd38      	pop	{r3, r4, r5, pc}
  404ff6:	bf00      	nop
  404ff8:	004150ef 	.word	0x004150ef
  404ffc:	00404fa5 	.word	0x00404fa5
  405000:	00425a74 	.word	0x00425a74
  405004:	004150f9 	.word	0x004150f9

00405008 <lv_obj_get_disp>:
{
  405008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40500c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40500e:	4b19      	ldr	r3, [pc, #100]	; (405074 <lv_obj_get_disp+0x6c>)
  405010:	4798      	blx	r3
  405012:	b180      	cbz	r0, 405036 <lv_obj_get_disp+0x2e>
    if(obj->parent == NULL)
  405014:	6823      	ldr	r3, [r4, #0]
  405016:	b11b      	cbz	r3, 405020 <lv_obj_get_disp+0x18>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
  405018:	4620      	mov	r0, r4
  40501a:	4b17      	ldr	r3, [pc, #92]	; (405078 <lv_obj_get_disp+0x70>)
  40501c:	4798      	blx	r3
  40501e:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  405020:	4816      	ldr	r0, [pc, #88]	; (40507c <lv_obj_get_disp+0x74>)
  405022:	4b17      	ldr	r3, [pc, #92]	; (405080 <lv_obj_get_disp+0x78>)
  405024:	4798      	blx	r3
  405026:	4607      	mov	r7, r0
  405028:	b300      	cbz	r0, 40506c <lv_obj_get_disp+0x64>
        _LV_LL_READ(d->scr_ll, s) {
  40502a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 405080 <lv_obj_get_disp+0x78>
  40502e:	4d15      	ldr	r5, [pc, #84]	; (405084 <lv_obj_get_disp+0x7c>)
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  405030:	f8df 8048 	ldr.w	r8, [pc, #72]	; 40507c <lv_obj_get_disp+0x74>
  405034:	e00a      	b.n	40504c <lv_obj_get_disp+0x44>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405036:	4622      	mov	r2, r4
  405038:	2300      	movs	r3, #0
  40503a:	4813      	ldr	r0, [pc, #76]	; (405088 <lv_obj_get_disp+0x80>)
  40503c:	4913      	ldr	r1, [pc, #76]	; (40508c <lv_obj_get_disp+0x84>)
  40503e:	4788      	blx	r1
  405040:	e7fe      	b.n	405040 <lv_obj_get_disp+0x38>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  405042:	4639      	mov	r1, r7
  405044:	4640      	mov	r0, r8
  405046:	47a8      	blx	r5
  405048:	4607      	mov	r7, r0
  40504a:	b178      	cbz	r0, 40506c <lv_obj_get_disp+0x64>
        _LV_LL_READ(d->scr_ll, s) {
  40504c:	f107 0638 	add.w	r6, r7, #56	; 0x38
  405050:	4630      	mov	r0, r6
  405052:	47c8      	blx	r9
  405054:	4601      	mov	r1, r0
  405056:	2800      	cmp	r0, #0
  405058:	d0f3      	beq.n	405042 <lv_obj_get_disp+0x3a>
            if(s == scr) return d;
  40505a:	4284      	cmp	r4, r0
  40505c:	d006      	beq.n	40506c <lv_obj_get_disp+0x64>
        _LV_LL_READ(d->scr_ll, s) {
  40505e:	4630      	mov	r0, r6
  405060:	47a8      	blx	r5
  405062:	4601      	mov	r1, r0
  405064:	2800      	cmp	r0, #0
  405066:	d0ec      	beq.n	405042 <lv_obj_get_disp+0x3a>
            if(s == scr) return d;
  405068:	428c      	cmp	r4, r1
  40506a:	d1f8      	bne.n	40505e <lv_obj_get_disp+0x56>
}
  40506c:	4638      	mov	r0, r7
  40506e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405072:	bf00      	nop
  405074:	004150ef 	.word	0x004150ef
  405078:	00404fcd 	.word	0x00404fcd
  40507c:	2043a160 	.word	0x2043a160
  405080:	004153ed 	.word	0x004153ed
  405084:	00415401 	.word	0x00415401
  405088:	00425a74 	.word	0x00425a74
  40508c:	004150f9 	.word	0x004150f9

00405090 <lv_obj_get_child>:
{
  405090:	b538      	push	{r3, r4, r5, lr}
  405092:	4604      	mov	r4, r0
  405094:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405096:	4b09      	ldr	r3, [pc, #36]	; (4050bc <lv_obj_get_child+0x2c>)
  405098:	4798      	blx	r3
  40509a:	b128      	cbz	r0, 4050a8 <lv_obj_get_child+0x18>
    if(child == NULL) {
  40509c:	b155      	cbz	r5, 4050b4 <lv_obj_get_child+0x24>
        result = _lv_ll_get_next(&obj->child_ll, child);
  40509e:	4629      	mov	r1, r5
  4050a0:	1d20      	adds	r0, r4, #4
  4050a2:	4b07      	ldr	r3, [pc, #28]	; (4050c0 <lv_obj_get_child+0x30>)
  4050a4:	4798      	blx	r3
}
  4050a6:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4050a8:	4622      	mov	r2, r4
  4050aa:	2300      	movs	r3, #0
  4050ac:	4805      	ldr	r0, [pc, #20]	; (4050c4 <lv_obj_get_child+0x34>)
  4050ae:	4906      	ldr	r1, [pc, #24]	; (4050c8 <lv_obj_get_child+0x38>)
  4050b0:	4788      	blx	r1
  4050b2:	e7fe      	b.n	4050b2 <lv_obj_get_child+0x22>
        result = _lv_ll_get_head(&obj->child_ll);
  4050b4:	1d20      	adds	r0, r4, #4
  4050b6:	4b05      	ldr	r3, [pc, #20]	; (4050cc <lv_obj_get_child+0x3c>)
  4050b8:	4798      	blx	r3
  4050ba:	bd38      	pop	{r3, r4, r5, pc}
  4050bc:	004150ef 	.word	0x004150ef
  4050c0:	00415401 	.word	0x00415401
  4050c4:	00425a74 	.word	0x00425a74
  4050c8:	004150f9 	.word	0x004150f9
  4050cc:	004153ed 	.word	0x004153ed

004050d0 <lv_obj_get_coords>:
{
  4050d0:	b538      	push	{r3, r4, r5, lr}
  4050d2:	4605      	mov	r5, r0
  4050d4:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4050d6:	4b0a      	ldr	r3, [pc, #40]	; (405100 <lv_obj_get_coords+0x30>)
  4050d8:	4798      	blx	r3
  4050da:	b158      	cbz	r0, 4050f4 <lv_obj_get_coords+0x24>
  4050dc:	f105 020f 	add.w	r2, r5, #15
  4050e0:	f104 0008 	add.w	r0, r4, #8
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  4050e4:	4623      	mov	r3, r4
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  4050e6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4050ea:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  4050ee:	4283      	cmp	r3, r0
  4050f0:	d1f9      	bne.n	4050e6 <lv_obj_get_coords+0x16>
}
  4050f2:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4050f4:	462a      	mov	r2, r5
  4050f6:	2300      	movs	r3, #0
  4050f8:	4802      	ldr	r0, [pc, #8]	; (405104 <lv_obj_get_coords+0x34>)
  4050fa:	4903      	ldr	r1, [pc, #12]	; (405108 <lv_obj_get_coords+0x38>)
  4050fc:	4788      	blx	r1
  4050fe:	e7fe      	b.n	4050fe <lv_obj_get_coords+0x2e>
  405100:	004150ef 	.word	0x004150ef
  405104:	00425a74 	.word	0x00425a74
  405108:	004150f9 	.word	0x004150f9

0040510c <lv_obj_get_x>:
{
  40510c:	b510      	push	{r4, lr}
  40510e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405110:	4b0a      	ldr	r3, [pc, #40]	; (40513c <lv_obj_get_x+0x30>)
  405112:	4798      	blx	r3
  405114:	b928      	cbnz	r0, 405122 <lv_obj_get_x+0x16>
  405116:	4622      	mov	r2, r4
  405118:	2300      	movs	r3, #0
  40511a:	4809      	ldr	r0, [pc, #36]	; (405140 <lv_obj_get_x+0x34>)
  40511c:	4909      	ldr	r1, [pc, #36]	; (405144 <lv_obj_get_x+0x38>)
  40511e:	4788      	blx	r1
  405120:	e7fe      	b.n	405120 <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405122:	4620      	mov	r0, r4
  405124:	4b08      	ldr	r3, [pc, #32]	; (405148 <lv_obj_get_x+0x3c>)
  405126:	4798      	blx	r3
    if(parent) {
  405128:	4603      	mov	r3, r0
  40512a:	b120      	cbz	r0, 405136 <lv_obj_get_x+0x2a>
        rel_x             = obj->coords.x1 - parent->coords.x1;
  40512c:	8a20      	ldrh	r0, [r4, #16]
  40512e:	8a1b      	ldrh	r3, [r3, #16]
  405130:	1ac0      	subs	r0, r0, r3
  405132:	b200      	sxth	r0, r0
  405134:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
  405136:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
}
  40513a:	bd10      	pop	{r4, pc}
  40513c:	004150ef 	.word	0x004150ef
  405140:	00425a74 	.word	0x00425a74
  405144:	004150f9 	.word	0x004150f9
  405148:	00404fa5 	.word	0x00404fa5

0040514c <lv_obj_get_y>:
{
  40514c:	b510      	push	{r4, lr}
  40514e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405150:	4b0a      	ldr	r3, [pc, #40]	; (40517c <lv_obj_get_y+0x30>)
  405152:	4798      	blx	r3
  405154:	b928      	cbnz	r0, 405162 <lv_obj_get_y+0x16>
  405156:	4622      	mov	r2, r4
  405158:	2300      	movs	r3, #0
  40515a:	4809      	ldr	r0, [pc, #36]	; (405180 <lv_obj_get_y+0x34>)
  40515c:	4909      	ldr	r1, [pc, #36]	; (405184 <lv_obj_get_y+0x38>)
  40515e:	4788      	blx	r1
  405160:	e7fe      	b.n	405160 <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405162:	4620      	mov	r0, r4
  405164:	4b08      	ldr	r3, [pc, #32]	; (405188 <lv_obj_get_y+0x3c>)
  405166:	4798      	blx	r3
    if(parent) {
  405168:	4603      	mov	r3, r0
  40516a:	b120      	cbz	r0, 405176 <lv_obj_get_y+0x2a>
        rel_y             = obj->coords.y1 - parent->coords.y1;
  40516c:	8a60      	ldrh	r0, [r4, #18]
  40516e:	8a5b      	ldrh	r3, [r3, #18]
  405170:	1ac0      	subs	r0, r0, r3
  405172:	b200      	sxth	r0, r0
  405174:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
  405176:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
}
  40517a:	bd10      	pop	{r4, pc}
  40517c:	004150ef 	.word	0x004150ef
  405180:	00425a74 	.word	0x00425a74
  405184:	004150f9 	.word	0x004150f9
  405188:	00404fa5 	.word	0x00404fa5

0040518c <lv_obj_get_width>:
{
  40518c:	b510      	push	{r4, lr}
  40518e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405190:	4b07      	ldr	r3, [pc, #28]	; (4051b0 <lv_obj_get_width+0x24>)
  405192:	4798      	blx	r3
  405194:	b128      	cbz	r0, 4051a2 <lv_obj_get_width+0x16>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  405196:	8aa0      	ldrh	r0, [r4, #20]
  405198:	3001      	adds	r0, #1
  40519a:	8a23      	ldrh	r3, [r4, #16]
  40519c:	1ac0      	subs	r0, r0, r3
}
  40519e:	b200      	sxth	r0, r0
  4051a0:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4051a2:	4622      	mov	r2, r4
  4051a4:	2300      	movs	r3, #0
  4051a6:	4803      	ldr	r0, [pc, #12]	; (4051b4 <lv_obj_get_width+0x28>)
  4051a8:	4903      	ldr	r1, [pc, #12]	; (4051b8 <lv_obj_get_width+0x2c>)
  4051aa:	4788      	blx	r1
  4051ac:	e7fe      	b.n	4051ac <lv_obj_get_width+0x20>
  4051ae:	bf00      	nop
  4051b0:	004150ef 	.word	0x004150ef
  4051b4:	00425a74 	.word	0x00425a74
  4051b8:	004150f9 	.word	0x004150f9

004051bc <lv_obj_get_height>:
{
  4051bc:	b510      	push	{r4, lr}
  4051be:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4051c0:	4b07      	ldr	r3, [pc, #28]	; (4051e0 <lv_obj_get_height+0x24>)
  4051c2:	4798      	blx	r3
  4051c4:	b128      	cbz	r0, 4051d2 <lv_obj_get_height+0x16>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4051c6:	8ae0      	ldrh	r0, [r4, #22]
  4051c8:	3001      	adds	r0, #1
  4051ca:	8a63      	ldrh	r3, [r4, #18]
  4051cc:	1ac0      	subs	r0, r0, r3
}
  4051ce:	b200      	sxth	r0, r0
  4051d0:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4051d2:	4622      	mov	r2, r4
  4051d4:	2300      	movs	r3, #0
  4051d6:	4803      	ldr	r0, [pc, #12]	; (4051e4 <lv_obj_get_height+0x28>)
  4051d8:	4903      	ldr	r1, [pc, #12]	; (4051e8 <lv_obj_get_height+0x2c>)
  4051da:	4788      	blx	r1
  4051dc:	e7fe      	b.n	4051dc <lv_obj_get_height+0x20>
  4051de:	bf00      	nop
  4051e0:	004150ef 	.word	0x004150ef
  4051e4:	00425a74 	.word	0x00425a74
  4051e8:	004150f9 	.word	0x004150f9

004051ec <lv_obj_get_auto_realign>:
{
  4051ec:	b510      	push	{r4, lr}
  4051ee:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4051f0:	4b06      	ldr	r3, [pc, #24]	; (40520c <lv_obj_get_auto_realign+0x20>)
  4051f2:	4798      	blx	r3
  4051f4:	b120      	cbz	r0, 405200 <lv_obj_get_auto_realign+0x14>
    return obj->realign.auto_realign ? true : false;
  4051f6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
}
  4051fa:	f000 0001 	and.w	r0, r0, #1
  4051fe:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405200:	4622      	mov	r2, r4
  405202:	2300      	movs	r3, #0
  405204:	4802      	ldr	r0, [pc, #8]	; (405210 <lv_obj_get_auto_realign+0x24>)
  405206:	4903      	ldr	r1, [pc, #12]	; (405214 <lv_obj_get_auto_realign+0x28>)
  405208:	4788      	blx	r1
  40520a:	e7fe      	b.n	40520a <lv_obj_get_auto_realign+0x1e>
  40520c:	004150ef 	.word	0x004150ef
  405210:	00425a74 	.word	0x00425a74
  405214:	004150f9 	.word	0x004150f9

00405218 <lv_obj_get_style_list>:
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
  405218:	b909      	cbnz	r1, 40521e <lv_obj_get_style_list+0x6>
  40521a:	3028      	adds	r0, #40	; 0x28
  40521c:	4770      	bx	lr
{
  40521e:	b500      	push	{lr}
  405220:	b083      	sub	sp, #12
    info.part = part;
  405222:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
  405226:	2300      	movs	r3, #0
  405228:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
  40522a:	466a      	mov	r2, sp
  40522c:	2108      	movs	r1, #8
  40522e:	4b04      	ldr	r3, [pc, #16]	; (405240 <lv_obj_get_style_list+0x28>)
  405230:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
  405232:	2801      	cmp	r0, #1
    return info.result;
  405234:	bf0c      	ite	eq
  405236:	9801      	ldreq	r0, [sp, #4]
    if(res != LV_RES_OK) return NULL;
  405238:	2000      	movne	r0, #0
}
  40523a:	b003      	add	sp, #12
  40523c:	f85d fb04 	ldr.w	pc, [sp], #4
  405240:	00404efd 	.word	0x00404efd

00405244 <trans_del>:
{
  405244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405248:	4681      	mov	r9, r0
  40524a:	468a      	mov	sl, r1
  40524c:	4693      	mov	fp, r2
  40524e:	461e      	mov	r6, r3
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  405250:	481a      	ldr	r0, [pc, #104]	; (4052bc <trans_del+0x78>)
  405252:	4b1b      	ldr	r3, [pc, #108]	; (4052c0 <trans_del+0x7c>)
  405254:	4798      	blx	r3
  405256:	4604      	mov	r4, r0
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405258:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4052bc <trans_del+0x78>
  40525c:	4f19      	ldr	r7, [pc, #100]	; (4052c4 <trans_del+0x80>)
    while(tr != NULL) {
  40525e:	e006      	b.n	40526e <trans_del+0x2a>
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  405260:	88a3      	ldrh	r3, [r4, #4]
  405262:	455b      	cmp	r3, fp
  405264:	d014      	beq.n	405290 <trans_del+0x4c>
  405266:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
  40526a:	d011      	beq.n	405290 <trans_del+0x4c>
{
  40526c:	462c      	mov	r4, r5
        if(tr == tr_limit) break;
  40526e:	42b4      	cmp	r4, r6
  405270:	d021      	beq.n	4052b6 <trans_del+0x72>
  405272:	b304      	cbz	r4, 4052b6 <trans_del+0x72>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405274:	4621      	mov	r1, r4
  405276:	4640      	mov	r0, r8
  405278:	47b8      	blx	r7
  40527a:	4605      	mov	r5, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  40527c:	6820      	ldr	r0, [r4, #0]
  40527e:	4548      	cmp	r0, r9
  405280:	d1f4      	bne.n	40526c <trans_del+0x28>
  405282:	79a1      	ldrb	r1, [r4, #6]
  405284:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
  405288:	d0ea      	beq.n	405260 <trans_del+0x1c>
  40528a:	4551      	cmp	r1, sl
  40528c:	d1ee      	bne.n	40526c <trans_del+0x28>
  40528e:	e7e7      	b.n	405260 <trans_del+0x1c>
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  405290:	4b0d      	ldr	r3, [pc, #52]	; (4052c8 <trans_del+0x84>)
  405292:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  405294:	4b0d      	ldr	r3, [pc, #52]	; (4052cc <trans_del+0x88>)
  405296:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
  405298:	88a1      	ldrh	r1, [r4, #4]
  40529a:	4b0d      	ldr	r3, [pc, #52]	; (4052d0 <trans_del+0x8c>)
  40529c:	4798      	blx	r3
            lv_anim_del(tr, NULL);
  40529e:	2100      	movs	r1, #0
  4052a0:	4620      	mov	r0, r4
  4052a2:	4b0c      	ldr	r3, [pc, #48]	; (4052d4 <trans_del+0x90>)
  4052a4:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  4052a6:	4621      	mov	r1, r4
  4052a8:	4640      	mov	r0, r8
  4052aa:	4b0b      	ldr	r3, [pc, #44]	; (4052d8 <trans_del+0x94>)
  4052ac:	4798      	blx	r3
            lv_mem_free(tr);
  4052ae:	4620      	mov	r0, r4
  4052b0:	4b0a      	ldr	r3, [pc, #40]	; (4052dc <trans_del+0x98>)
  4052b2:	4798      	blx	r3
  4052b4:	e7da      	b.n	40526c <trans_del+0x28>
  4052b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052ba:	bf00      	nop
  4052bc:	2043a204 	.word	0x2043a204
  4052c0:	004153f7 	.word	0x004153f7
  4052c4:	0041540f 	.word	0x0041540f
  4052c8:	00405219 	.word	0x00405219
  4052cc:	0040a24f 	.word	0x0040a24f
  4052d0:	004097b9 	.word	0x004097b9
  4052d4:	0041476d 	.word	0x0041476d
  4052d8:	004154a5 	.word	0x004154a5
  4052dc:	004158b9 	.word	0x004158b9

004052e0 <lv_obj_clean_style_list>:
{
  4052e0:	b538      	push	{r3, r4, r5, lr}
  4052e2:	4604      	mov	r4, r0
  4052e4:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  4052e6:	4b06      	ldr	r3, [pc, #24]	; (405300 <lv_obj_clean_style_list+0x20>)
  4052e8:	4798      	blx	r3
    if(style_dsc == NULL) {
  4052ea:	b138      	cbz	r0, 4052fc <lv_obj_clean_style_list+0x1c>
    _lv_style_list_reset(style_dsc);
  4052ec:	4b05      	ldr	r3, [pc, #20]	; (405304 <lv_obj_clean_style_list+0x24>)
  4052ee:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
  4052f0:	2300      	movs	r3, #0
  4052f2:	22ff      	movs	r2, #255	; 0xff
  4052f4:	4629      	mov	r1, r5
  4052f6:	4620      	mov	r0, r4
  4052f8:	4c03      	ldr	r4, [pc, #12]	; (405308 <lv_obj_clean_style_list+0x28>)
  4052fa:	47a0      	blx	r4
  4052fc:	bd38      	pop	{r3, r4, r5, pc}
  4052fe:	bf00      	nop
  405300:	00405219 	.word	0x00405219
  405304:	0040a261 	.word	0x0040a261
  405308:	00405245 	.word	0x00405245

0040530c <_lv_obj_disable_style_caching>:
{
  40530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40530e:	4605      	mov	r5, r0
  405310:	460e      	mov	r6, r1
  405312:	2400      	movs	r4, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  405314:	4f0d      	ldr	r7, [pc, #52]	; (40534c <_lv_obj_disable_style_caching+0x40>)
  405316:	b2e1      	uxtb	r1, r4
  405318:	4628      	mov	r0, r5
  40531a:	47b8      	blx	r7
        if(list == NULL) break;
  40531c:	b130      	cbz	r0, 40532c <_lv_obj_disable_style_caching+0x20>
        list->ignore_cache = dis;
  40531e:	7942      	ldrb	r2, [r0, #5]
  405320:	f366 02c3 	bfi	r2, r6, #3, #1
  405324:	7142      	strb	r2, [r0, #5]
  405326:	3401      	adds	r4, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  405328:	2c40      	cmp	r4, #64	; 0x40
  40532a:	d1f4      	bne.n	405316 <_lv_obj_disable_style_caching+0xa>
{
  40532c:	2440      	movs	r4, #64	; 0x40
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  40532e:	4f07      	ldr	r7, [pc, #28]	; (40534c <_lv_obj_disable_style_caching+0x40>)
  405330:	4621      	mov	r1, r4
  405332:	4628      	mov	r0, r5
  405334:	47b8      	blx	r7
        if(list == NULL) break;
  405336:	b138      	cbz	r0, 405348 <_lv_obj_disable_style_caching+0x3c>
        list->ignore_cache = dis;
  405338:	7942      	ldrb	r2, [r0, #5]
  40533a:	f366 02c3 	bfi	r2, r6, #3, #1
  40533e:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  405340:	3401      	adds	r4, #1
  405342:	b2e4      	uxtb	r4, r4
  405344:	2cff      	cmp	r4, #255	; 0xff
  405346:	d1f3      	bne.n	405330 <_lv_obj_disable_style_caching+0x24>
  405348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40534a:	bf00      	nop
  40534c:	00405219 	.word	0x00405219

00405350 <trans_anim_ready_cb>:
{
  405350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_trans_t * tr = a->var;
  405352:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405354:	4817      	ldr	r0, [pc, #92]	; (4053b4 <trans_anim_ready_cb+0x64>)
  405356:	4b18      	ldr	r3, [pc, #96]	; (4053b8 <trans_anim_ready_cb+0x68>)
  405358:	4798      	blx	r3
  40535a:	b308      	cbz	r0, 4053a0 <trans_anim_ready_cb+0x50>
  40535c:	4601      	mov	r1, r0
  40535e:	2700      	movs	r7, #0
  405360:	4e14      	ldr	r6, [pc, #80]	; (4053b4 <trans_anim_ready_cb+0x64>)
  405362:	4d16      	ldr	r5, [pc, #88]	; (4053bc <trans_anim_ready_cb+0x6c>)
  405364:	e003      	b.n	40536e <trans_anim_ready_cb+0x1e>
  405366:	4630      	mov	r0, r6
  405368:	47a8      	blx	r5
  40536a:	4601      	mov	r1, r0
  40536c:	b178      	cbz	r0, 40538e <trans_anim_ready_cb+0x3e>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
  40536e:	428c      	cmp	r4, r1
  405370:	d0f9      	beq.n	405366 <trans_anim_ready_cb+0x16>
  405372:	680a      	ldr	r2, [r1, #0]
  405374:	6823      	ldr	r3, [r4, #0]
  405376:	429a      	cmp	r2, r3
  405378:	d1f5      	bne.n	405366 <trans_anim_ready_cb+0x16>
  40537a:	684b      	ldr	r3, [r1, #4]
  40537c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  405380:	6863      	ldr	r3, [r4, #4]
  405382:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
            running = true;
  405386:	429a      	cmp	r2, r3
  405388:	bf08      	it	eq
  40538a:	2701      	moveq	r7, #1
  40538c:	e7eb      	b.n	405366 <trans_anim_ready_cb+0x16>
    if(!running) {
  40538e:	b13f      	cbz	r7, 4053a0 <trans_anim_ready_cb+0x50>
    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405390:	4621      	mov	r1, r4
  405392:	4808      	ldr	r0, [pc, #32]	; (4053b4 <trans_anim_ready_cb+0x64>)
  405394:	4b0a      	ldr	r3, [pc, #40]	; (4053c0 <trans_anim_ready_cb+0x70>)
  405396:	4798      	blx	r3
    lv_mem_free(tr);
  405398:	4620      	mov	r0, r4
  40539a:	4b0a      	ldr	r3, [pc, #40]	; (4053c4 <trans_anim_ready_cb+0x74>)
  40539c:	4798      	blx	r3
  40539e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  4053a0:	79a1      	ldrb	r1, [r4, #6]
  4053a2:	6820      	ldr	r0, [r4, #0]
  4053a4:	4b08      	ldr	r3, [pc, #32]	; (4053c8 <trans_anim_ready_cb+0x78>)
  4053a6:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  4053a8:	4b08      	ldr	r3, [pc, #32]	; (4053cc <trans_anim_ready_cb+0x7c>)
  4053aa:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
  4053ac:	88a1      	ldrh	r1, [r4, #4]
  4053ae:	4b08      	ldr	r3, [pc, #32]	; (4053d0 <trans_anim_ready_cb+0x80>)
  4053b0:	4798      	blx	r3
  4053b2:	e7ed      	b.n	405390 <trans_anim_ready_cb+0x40>
  4053b4:	2043a204 	.word	0x2043a204
  4053b8:	004153ed 	.word	0x004153ed
  4053bc:	00415401 	.word	0x00415401
  4053c0:	004154a5 	.word	0x004154a5
  4053c4:	004158b9 	.word	0x004158b9
  4053c8:	00405219 	.word	0x00405219
  4053cc:	0040a24f 	.word	0x0040a24f
  4053d0:	004097b9 	.word	0x004097b9

004053d4 <lv_obj_get_hidden>:
{
  4053d4:	b510      	push	{r4, lr}
  4053d6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4053d8:	4b06      	ldr	r3, [pc, #24]	; (4053f4 <lv_obj_get_hidden+0x20>)
  4053da:	4798      	blx	r3
  4053dc:	b120      	cbz	r0, 4053e8 <lv_obj_get_hidden+0x14>
    return obj->hidden == 0 ? false : true;
  4053de:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  4053e2:	f3c0 1000 	ubfx	r0, r0, #4, #1
  4053e6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4053e8:	4622      	mov	r2, r4
  4053ea:	2300      	movs	r3, #0
  4053ec:	4802      	ldr	r0, [pc, #8]	; (4053f8 <lv_obj_get_hidden+0x24>)
  4053ee:	4903      	ldr	r1, [pc, #12]	; (4053fc <lv_obj_get_hidden+0x28>)
  4053f0:	4788      	blx	r1
  4053f2:	e7fe      	b.n	4053f2 <lv_obj_get_hidden+0x1e>
  4053f4:	004150ef 	.word	0x004150ef
  4053f8:	00425a74 	.word	0x00425a74
  4053fc:	004150f9 	.word	0x004150f9

00405400 <lv_obj_area_is_visible>:
{
  405400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405404:	b082      	sub	sp, #8
  405406:	4604      	mov	r4, r0
  405408:	460d      	mov	r5, r1
    if(lv_obj_get_hidden(obj)) return false;
  40540a:	4b35      	ldr	r3, [pc, #212]	; (4054e0 <lv_obj_area_is_visible+0xe0>)
  40540c:	4798      	blx	r3
  40540e:	b120      	cbz	r0, 40541a <lv_obj_area_is_visible+0x1a>
  405410:	2600      	movs	r6, #0
}
  405412:	4630      	mov	r0, r6
  405414:	b002      	add	sp, #8
  405416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40541a:	4606      	mov	r6, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
  40541c:	4620      	mov	r0, r4
  40541e:	4b31      	ldr	r3, [pc, #196]	; (4054e4 <lv_obj_area_is_visible+0xe4>)
  405420:	4798      	blx	r3
  405422:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
  405424:	4b30      	ldr	r3, [pc, #192]	; (4054e8 <lv_obj_area_is_visible+0xe8>)
  405426:	4798      	blx	r3
  405428:	4680      	mov	r8, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  40542a:	4b30      	ldr	r3, [pc, #192]	; (4054ec <lv_obj_area_is_visible+0xec>)
  40542c:	4798      	blx	r3
  40542e:	4287      	cmp	r7, r0
  405430:	d010      	beq.n	405454 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_scr_prev(disp) ||
  405432:	4640      	mov	r0, r8
  405434:	4b2e      	ldr	r3, [pc, #184]	; (4054f0 <lv_obj_area_is_visible+0xf0>)
  405436:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  405438:	4287      	cmp	r7, r0
  40543a:	d00b      	beq.n	405454 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_top(disp) ||
  40543c:	4640      	mov	r0, r8
  40543e:	4b2d      	ldr	r3, [pc, #180]	; (4054f4 <lv_obj_area_is_visible+0xf4>)
  405440:	4798      	blx	r3
       obj_scr == lv_disp_get_scr_prev(disp) ||
  405442:	4287      	cmp	r7, r0
  405444:	d006      	beq.n	405454 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_sys(disp)) {
  405446:	4640      	mov	r0, r8
  405448:	4b2b      	ldr	r3, [pc, #172]	; (4054f8 <lv_obj_area_is_visible+0xf8>)
  40544a:	4798      	blx	r3
       obj_scr == lv_disp_get_layer_top(disp) ||
  40544c:	4287      	cmp	r7, r0
  40544e:	d001      	beq.n	405454 <lv_obj_area_is_visible+0x54>
    return true;
  405450:	2601      	movs	r6, #1
  405452:	e7de      	b.n	405412 <lv_obj_area_is_visible+0x12>
        lv_coord_t ext_size = obj->ext_draw_pad;
  405454:	f9b4 7032 	ldrsh.w	r7, [r4, #50]	; 0x32
  405458:	f104 030f 	add.w	r3, r4, #15
  40545c:	f104 0017 	add.w	r0, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
  405460:	466a      	mov	r2, sp
        *d8 = *s8;
  405462:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  405466:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  40546a:	4298      	cmp	r0, r3
  40546c:	d1f9      	bne.n	405462 <lv_obj_area_is_visible+0x62>
        obj_coords.x1 -= ext_size;
  40546e:	b2bb      	uxth	r3, r7
  405470:	f8bd 2000 	ldrh.w	r2, [sp]
  405474:	1ad2      	subs	r2, r2, r3
  405476:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
  40547a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  40547e:	1ad2      	subs	r2, r2, r3
  405480:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
  405484:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405488:	441a      	add	r2, r3
  40548a:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
  40548e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405492:	4413      	add	r3, r2
  405494:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
  405498:	466a      	mov	r2, sp
  40549a:	4629      	mov	r1, r5
  40549c:	4628      	mov	r0, r5
  40549e:	4b17      	ldr	r3, [pc, #92]	; (4054fc <lv_obj_area_is_visible+0xfc>)
  4054a0:	4798      	blx	r3
        if(is_common == false) return false;  /*The area is not on the object*/
  4054a2:	4682      	mov	sl, r0
  4054a4:	2800      	cmp	r0, #0
  4054a6:	d0b4      	beq.n	405412 <lv_obj_area_is_visible+0x12>
        lv_obj_t * par = lv_obj_get_parent(obj);
  4054a8:	4620      	mov	r0, r4
  4054aa:	4b15      	ldr	r3, [pc, #84]	; (405500 <lv_obj_area_is_visible+0x100>)
  4054ac:	4798      	blx	r3
        while(par != NULL) {
  4054ae:	4604      	mov	r4, r0
  4054b0:	b1a0      	cbz	r0, 4054dc <lv_obj_area_is_visible+0xdc>
            is_common = _lv_area_intersect(area, area, &par->coords);
  4054b2:	4f12      	ldr	r7, [pc, #72]	; (4054fc <lv_obj_area_is_visible+0xfc>)
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
  4054b4:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4054e0 <lv_obj_area_is_visible+0xe0>
            par = lv_obj_get_parent(par);
  4054b8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 405500 <lv_obj_area_is_visible+0x100>
            is_common = _lv_area_intersect(area, area, &par->coords);
  4054bc:	f104 0210 	add.w	r2, r4, #16
  4054c0:	4629      	mov	r1, r5
  4054c2:	4628      	mov	r0, r5
  4054c4:	47b8      	blx	r7
            if(is_common == false) return false;       /*If no common parts with parent break;*/
  4054c6:	2800      	cmp	r0, #0
  4054c8:	d0a3      	beq.n	405412 <lv_obj_area_is_visible+0x12>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
  4054ca:	4620      	mov	r0, r4
  4054cc:	47c0      	blx	r8
  4054ce:	2800      	cmp	r0, #0
  4054d0:	d19f      	bne.n	405412 <lv_obj_area_is_visible+0x12>
            par = lv_obj_get_parent(par);
  4054d2:	4620      	mov	r0, r4
  4054d4:	47c8      	blx	r9
        while(par != NULL) {
  4054d6:	4604      	mov	r4, r0
  4054d8:	2800      	cmp	r0, #0
  4054da:	d1ef      	bne.n	4054bc <lv_obj_area_is_visible+0xbc>
    return true;
  4054dc:	4656      	mov	r6, sl
  4054de:	e798      	b.n	405412 <lv_obj_area_is_visible+0x12>
  4054e0:	004053d5 	.word	0x004053d5
  4054e4:	00404fcd 	.word	0x00404fcd
  4054e8:	00405009 	.word	0x00405009
  4054ec:	00402db5 	.word	0x00402db5
  4054f0:	00402dd1 	.word	0x00402dd1
  4054f4:	00402ded 	.word	0x00402ded
  4054f8:	00402e09 	.word	0x00402e09
  4054fc:	00414957 	.word	0x00414957
  405500:	00404fa5 	.word	0x00404fa5

00405504 <lv_obj_invalidate_area>:
{
  405504:	b530      	push	{r4, r5, lr}
  405506:	b083      	sub	sp, #12
  405508:	4605      	mov	r5, r0
  40550a:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40550c:	4b0f      	ldr	r3, [pc, #60]	; (40554c <lv_obj_invalidate_area+0x48>)
  40550e:	4798      	blx	r3
  405510:	b1a8      	cbz	r0, 40553e <lv_obj_invalidate_area+0x3a>
  405512:	1e63      	subs	r3, r4, #1
  405514:	3407      	adds	r4, #7
  405516:	466a      	mov	r2, sp
        *d8 = *s8;
  405518:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40551c:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  405520:	42a3      	cmp	r3, r4
  405522:	d1f9      	bne.n	405518 <lv_obj_invalidate_area+0x14>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
  405524:	4669      	mov	r1, sp
  405526:	4628      	mov	r0, r5
  405528:	4b09      	ldr	r3, [pc, #36]	; (405550 <lv_obj_invalidate_area+0x4c>)
  40552a:	4798      	blx	r3
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
  40552c:	b128      	cbz	r0, 40553a <lv_obj_invalidate_area+0x36>
  40552e:	4628      	mov	r0, r5
  405530:	4b08      	ldr	r3, [pc, #32]	; (405554 <lv_obj_invalidate_area+0x50>)
  405532:	4798      	blx	r3
  405534:	4669      	mov	r1, sp
  405536:	4b08      	ldr	r3, [pc, #32]	; (405558 <lv_obj_invalidate_area+0x54>)
  405538:	4798      	blx	r3
}
  40553a:	b003      	add	sp, #12
  40553c:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40553e:	462a      	mov	r2, r5
  405540:	2300      	movs	r3, #0
  405542:	4806      	ldr	r0, [pc, #24]	; (40555c <lv_obj_invalidate_area+0x58>)
  405544:	4906      	ldr	r1, [pc, #24]	; (405560 <lv_obj_invalidate_area+0x5c>)
  405546:	4788      	blx	r1
  405548:	e7fe      	b.n	405548 <lv_obj_invalidate_area+0x44>
  40554a:	bf00      	nop
  40554c:	004150ef 	.word	0x004150ef
  405550:	00405401 	.word	0x00405401
  405554:	00405009 	.word	0x00405009
  405558:	00408e71 	.word	0x00408e71
  40555c:	00425a74 	.word	0x00425a74
  405560:	004150f9 	.word	0x004150f9

00405564 <lv_obj_invalidate>:
{
  405564:	b530      	push	{r4, r5, lr}
  405566:	b083      	sub	sp, #12
  405568:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40556a:	4b18      	ldr	r3, [pc, #96]	; (4055cc <lv_obj_invalidate+0x68>)
  40556c:	4798      	blx	r3
  40556e:	b338      	cbz	r0, 4055c0 <lv_obj_invalidate+0x5c>
    lv_coord_t ext_size = obj->ext_draw_pad;
  405570:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
  405574:	f104 020f 	add.w	r2, r4, #15
  405578:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
  40557c:	4669      	mov	r1, sp
        *d8 = *s8;
  40557e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  405582:	f801 0b01 	strb.w	r0, [r1], #1
    while(len) {
  405586:	42aa      	cmp	r2, r5
  405588:	d1f9      	bne.n	40557e <lv_obj_invalidate+0x1a>
    obj_coords.x1 -= ext_size;
  40558a:	b29b      	uxth	r3, r3
  40558c:	f8bd 2000 	ldrh.w	r2, [sp]
  405590:	1ad2      	subs	r2, r2, r3
  405592:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
  405596:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  40559a:	1ad2      	subs	r2, r2, r3
  40559c:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
  4055a0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  4055a4:	441a      	add	r2, r3
  4055a6:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
  4055aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  4055ae:	4413      	add	r3, r2
  4055b0:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
  4055b4:	4669      	mov	r1, sp
  4055b6:	4620      	mov	r0, r4
  4055b8:	4b05      	ldr	r3, [pc, #20]	; (4055d0 <lv_obj_invalidate+0x6c>)
  4055ba:	4798      	blx	r3
}
  4055bc:	b003      	add	sp, #12
  4055be:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4055c0:	4622      	mov	r2, r4
  4055c2:	2300      	movs	r3, #0
  4055c4:	4803      	ldr	r0, [pc, #12]	; (4055d4 <lv_obj_invalidate+0x70>)
  4055c6:	4904      	ldr	r1, [pc, #16]	; (4055d8 <lv_obj_invalidate+0x74>)
  4055c8:	4788      	blx	r1
  4055ca:	e7fe      	b.n	4055ca <lv_obj_invalidate+0x66>
  4055cc:	004150ef 	.word	0x004150ef
  4055d0:	00405505 	.word	0x00405505
  4055d4:	00425a74 	.word	0x00425a74
  4055d8:	004150f9 	.word	0x004150f9

004055dc <lv_obj_move_foreground>:
{
  4055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4055de:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4055e0:	4b11      	ldr	r3, [pc, #68]	; (405628 <lv_obj_move_foreground+0x4c>)
  4055e2:	4798      	blx	r3
  4055e4:	b928      	cbnz	r0, 4055f2 <lv_obj_move_foreground+0x16>
  4055e6:	462a      	mov	r2, r5
  4055e8:	2300      	movs	r3, #0
  4055ea:	4810      	ldr	r0, [pc, #64]	; (40562c <lv_obj_move_foreground+0x50>)
  4055ec:	4910      	ldr	r1, [pc, #64]	; (405630 <lv_obj_move_foreground+0x54>)
  4055ee:	4788      	blx	r1
  4055f0:	e7fe      	b.n	4055f0 <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  4055f2:	4628      	mov	r0, r5
  4055f4:	4b0f      	ldr	r3, [pc, #60]	; (405634 <lv_obj_move_foreground+0x58>)
  4055f6:	4798      	blx	r3
  4055f8:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
  4055fa:	1d06      	adds	r6, r0, #4
  4055fc:	4630      	mov	r0, r6
  4055fe:	4b0e      	ldr	r3, [pc, #56]	; (405638 <lv_obj_move_foreground+0x5c>)
  405600:	4798      	blx	r3
  405602:	4285      	cmp	r5, r0
  405604:	d00f      	beq.n	405626 <lv_obj_move_foreground+0x4a>
    lv_obj_invalidate(parent);
  405606:	4620      	mov	r0, r4
  405608:	4f0c      	ldr	r7, [pc, #48]	; (40563c <lv_obj_move_foreground+0x60>)
  40560a:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
  40560c:	2301      	movs	r3, #1
  40560e:	462a      	mov	r2, r5
  405610:	4631      	mov	r1, r6
  405612:	4630      	mov	r0, r6
  405614:	4e0a      	ldr	r6, [pc, #40]	; (405640 <lv_obj_move_foreground+0x64>)
  405616:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
  405618:	69e3      	ldr	r3, [r4, #28]
  40561a:	462a      	mov	r2, r5
  40561c:	2101      	movs	r1, #1
  40561e:	4620      	mov	r0, r4
  405620:	4798      	blx	r3
    lv_obj_invalidate(parent);
  405622:	4620      	mov	r0, r4
  405624:	47b8      	blx	r7
  405626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405628:	004150ef 	.word	0x004150ef
  40562c:	00425a74 	.word	0x00425a74
  405630:	004150f9 	.word	0x004150f9
  405634:	00404fa5 	.word	0x00404fa5
  405638:	004153ed 	.word	0x004153ed
  40563c:	00405565 	.word	0x00405565
  405640:	00415531 	.word	0x00415531

00405644 <lv_obj_set_pos>:
{
  405644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405648:	b083      	sub	sp, #12
  40564a:	4604      	mov	r4, r0
  40564c:	460f      	mov	r7, r1
  40564e:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405650:	4b24      	ldr	r3, [pc, #144]	; (4056e4 <lv_obj_set_pos+0xa0>)
  405652:	4798      	blx	r3
  405654:	2800      	cmp	r0, #0
  405656:	d03f      	beq.n	4056d8 <lv_obj_set_pos+0x94>
    lv_obj_t * par = obj->parent;
  405658:	6826      	ldr	r6, [r4, #0]
    if(par) {
  40565a:	b12e      	cbz	r6, 405668 <lv_obj_set_pos+0x24>
        x = x + par->coords.x1;
  40565c:	8a33      	ldrh	r3, [r6, #16]
  40565e:	441f      	add	r7, r3
  405660:	b23f      	sxth	r7, r7
        y = y + par->coords.y1;
  405662:	8a73      	ldrh	r3, [r6, #18]
  405664:	441d      	add	r5, r3
  405666:	b22d      	sxth	r5, r5
    diff.x = x - obj->coords.x1;
  405668:	8a23      	ldrh	r3, [r4, #16]
  40566a:	1afb      	subs	r3, r7, r3
  40566c:	fa1f f883 	uxth.w	r8, r3
  405670:	fa0f f788 	sxth.w	r7, r8
    diff.y = y - obj->coords.y1;
  405674:	8a63      	ldrh	r3, [r4, #18]
  405676:	1aed      	subs	r5, r5, r3
  405678:	b2ad      	uxth	r5, r5
  40567a:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
  40567e:	f1b9 0f00 	cmp.w	r9, #0
  405682:	d100      	bne.n	405686 <lv_obj_set_pos+0x42>
  405684:	b32f      	cbz	r7, 4056d2 <lv_obj_set_pos+0x8e>
    lv_obj_invalidate(obj);
  405686:	4620      	mov	r0, r4
  405688:	4b17      	ldr	r3, [pc, #92]	; (4056e8 <lv_obj_set_pos+0xa4>)
  40568a:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  40568c:	4669      	mov	r1, sp
  40568e:	4620      	mov	r0, r4
  405690:	4b16      	ldr	r3, [pc, #88]	; (4056ec <lv_obj_set_pos+0xa8>)
  405692:	4798      	blx	r3
    obj->coords.x1 += diff.x;
  405694:	8a23      	ldrh	r3, [r4, #16]
  405696:	4443      	add	r3, r8
  405698:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
  40569a:	8a63      	ldrh	r3, [r4, #18]
  40569c:	442b      	add	r3, r5
  40569e:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
  4056a0:	8aa3      	ldrh	r3, [r4, #20]
  4056a2:	4443      	add	r3, r8
  4056a4:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
  4056a6:	8ae3      	ldrh	r3, [r4, #22]
  4056a8:	441d      	add	r5, r3
  4056aa:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
  4056ac:	464a      	mov	r2, r9
  4056ae:	4639      	mov	r1, r7
  4056b0:	4620      	mov	r0, r4
  4056b2:	4b0f      	ldr	r3, [pc, #60]	; (4056f0 <lv_obj_set_pos+0xac>)
  4056b4:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  4056b6:	69e3      	ldr	r3, [r4, #28]
  4056b8:	466a      	mov	r2, sp
  4056ba:	2102      	movs	r1, #2
  4056bc:	4620      	mov	r0, r4
  4056be:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  4056c0:	b126      	cbz	r6, 4056cc <lv_obj_set_pos+0x88>
  4056c2:	69f3      	ldr	r3, [r6, #28]
  4056c4:	4622      	mov	r2, r4
  4056c6:	2101      	movs	r1, #1
  4056c8:	4630      	mov	r0, r6
  4056ca:	4798      	blx	r3
    lv_obj_invalidate(obj);
  4056cc:	4620      	mov	r0, r4
  4056ce:	4b06      	ldr	r3, [pc, #24]	; (4056e8 <lv_obj_set_pos+0xa4>)
  4056d0:	4798      	blx	r3
}
  4056d2:	b003      	add	sp, #12
  4056d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056d8:	4622      	mov	r2, r4
  4056da:	2300      	movs	r3, #0
  4056dc:	4805      	ldr	r0, [pc, #20]	; (4056f4 <lv_obj_set_pos+0xb0>)
  4056de:	4906      	ldr	r1, [pc, #24]	; (4056f8 <lv_obj_set_pos+0xb4>)
  4056e0:	4788      	blx	r1
  4056e2:	e7fe      	b.n	4056e2 <lv_obj_set_pos+0x9e>
  4056e4:	004150ef 	.word	0x004150ef
  4056e8:	00405565 	.word	0x00405565
  4056ec:	004050d1 	.word	0x004050d1
  4056f0:	00404be5 	.word	0x00404be5
  4056f4:	00425a74 	.word	0x00425a74
  4056f8:	004150f9 	.word	0x004150f9

004056fc <lv_obj_set_x>:
{
  4056fc:	b538      	push	{r3, r4, r5, lr}
  4056fe:	4604      	mov	r4, r0
  405700:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405702:	4b09      	ldr	r3, [pc, #36]	; (405728 <lv_obj_set_x+0x2c>)
  405704:	4798      	blx	r3
  405706:	b928      	cbnz	r0, 405714 <lv_obj_set_x+0x18>
  405708:	4622      	mov	r2, r4
  40570a:	2300      	movs	r3, #0
  40570c:	4807      	ldr	r0, [pc, #28]	; (40572c <lv_obj_set_x+0x30>)
  40570e:	4908      	ldr	r1, [pc, #32]	; (405730 <lv_obj_set_x+0x34>)
  405710:	4788      	blx	r1
  405712:	e7fe      	b.n	405712 <lv_obj_set_x+0x16>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
  405714:	4620      	mov	r0, r4
  405716:	4b07      	ldr	r3, [pc, #28]	; (405734 <lv_obj_set_x+0x38>)
  405718:	4798      	blx	r3
  40571a:	4602      	mov	r2, r0
  40571c:	4629      	mov	r1, r5
  40571e:	4620      	mov	r0, r4
  405720:	4b05      	ldr	r3, [pc, #20]	; (405738 <lv_obj_set_x+0x3c>)
  405722:	4798      	blx	r3
  405724:	bd38      	pop	{r3, r4, r5, pc}
  405726:	bf00      	nop
  405728:	004150ef 	.word	0x004150ef
  40572c:	00425a74 	.word	0x00425a74
  405730:	004150f9 	.word	0x004150f9
  405734:	0040514d 	.word	0x0040514d
  405738:	00405645 	.word	0x00405645

0040573c <lv_obj_set_y>:
{
  40573c:	b538      	push	{r3, r4, r5, lr}
  40573e:	4604      	mov	r4, r0
  405740:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405742:	4b09      	ldr	r3, [pc, #36]	; (405768 <lv_obj_set_y+0x2c>)
  405744:	4798      	blx	r3
  405746:	b928      	cbnz	r0, 405754 <lv_obj_set_y+0x18>
  405748:	4622      	mov	r2, r4
  40574a:	2300      	movs	r3, #0
  40574c:	4807      	ldr	r0, [pc, #28]	; (40576c <lv_obj_set_y+0x30>)
  40574e:	4908      	ldr	r1, [pc, #32]	; (405770 <lv_obj_set_y+0x34>)
  405750:	4788      	blx	r1
  405752:	e7fe      	b.n	405752 <lv_obj_set_y+0x16>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
  405754:	4620      	mov	r0, r4
  405756:	4b07      	ldr	r3, [pc, #28]	; (405774 <lv_obj_set_y+0x38>)
  405758:	4798      	blx	r3
  40575a:	462a      	mov	r2, r5
  40575c:	4601      	mov	r1, r0
  40575e:	4620      	mov	r0, r4
  405760:	4b05      	ldr	r3, [pc, #20]	; (405778 <lv_obj_set_y+0x3c>)
  405762:	4798      	blx	r3
  405764:	bd38      	pop	{r3, r4, r5, pc}
  405766:	bf00      	nop
  405768:	004150ef 	.word	0x004150ef
  40576c:	00425a74 	.word	0x00425a74
  405770:	004150f9 	.word	0x004150f9
  405774:	0040510d 	.word	0x0040510d
  405778:	00405645 	.word	0x00405645

0040577c <obj_align_core>:
{
  40577c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40577e:	b083      	sub	sp, #12
  405780:	4604      	mov	r4, r0
  405782:	461d      	mov	r5, r3
  405784:	f89d 6020 	ldrb.w	r6, [sp, #32]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
  405788:	f101 0010 	add.w	r0, r1, #16
  40578c:	ab01      	add	r3, sp, #4
  40578e:	f104 0110 	add.w	r1, r4, #16
  405792:	4f16      	ldr	r7, [pc, #88]	; (4057ec <obj_align_core+0x70>)
  405794:	47b8      	blx	r7
    lv_obj_t * par        = lv_obj_get_parent(obj);
  405796:	4620      	mov	r0, r4
  405798:	4b15      	ldr	r3, [pc, #84]	; (4057f0 <obj_align_core+0x74>)
  40579a:	4798      	blx	r3
    lv_coord_t par_abs_y  = par->coords.y1;
  40579c:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.y += y_ofs;
  4057a0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
  4057a4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
  4057a8:	440a      	add	r2, r1
    new_pos.x += x_ofs;
  4057aa:	f8bd 7004 	ldrh.w	r7, [sp, #4]
  4057ae:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  4057b2:	4439      	add	r1, r7
    new_pos.x -= par_abs_x;
  4057b4:	8a00      	ldrh	r0, [r0, #16]
  4057b6:	1a09      	subs	r1, r1, r0
  4057b8:	b209      	sxth	r1, r1
  4057ba:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
  4057be:	1ad2      	subs	r2, r2, r3
  4057c0:	b212      	sxth	r2, r2
  4057c2:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  4057c6:	b105      	cbz	r5, 4057ca <obj_align_core+0x4e>
  4057c8:	b91e      	cbnz	r6, 4057d2 <obj_align_core+0x56>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  4057ca:	b935      	cbnz	r5, 4057da <obj_align_core+0x5e>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  4057cc:	b94e      	cbnz	r6, 4057e2 <obj_align_core+0x66>
}
  4057ce:	b003      	add	sp, #12
  4057d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  4057d2:	4620      	mov	r0, r4
  4057d4:	4b07      	ldr	r3, [pc, #28]	; (4057f4 <obj_align_core+0x78>)
  4057d6:	4798      	blx	r3
  4057d8:	e7f9      	b.n	4057ce <obj_align_core+0x52>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  4057da:	4620      	mov	r0, r4
  4057dc:	4b06      	ldr	r3, [pc, #24]	; (4057f8 <obj_align_core+0x7c>)
  4057de:	4798      	blx	r3
  4057e0:	e7f5      	b.n	4057ce <obj_align_core+0x52>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  4057e2:	4611      	mov	r1, r2
  4057e4:	4620      	mov	r0, r4
  4057e6:	4b05      	ldr	r3, [pc, #20]	; (4057fc <obj_align_core+0x80>)
  4057e8:	4798      	blx	r3
}
  4057ea:	e7f0      	b.n	4057ce <obj_align_core+0x52>
  4057ec:	00414c4d 	.word	0x00414c4d
  4057f0:	00404fa5 	.word	0x00404fa5
  4057f4:	00405645 	.word	0x00405645
  4057f8:	004056fd 	.word	0x004056fd
  4057fc:	0040573d 	.word	0x0040573d

00405800 <lv_obj_align>:
{
  405800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405804:	b085      	sub	sp, #20
  405806:	4604      	mov	r4, r0
  405808:	460d      	mov	r5, r1
  40580a:	4690      	mov	r8, r2
  40580c:	461f      	mov	r7, r3
  40580e:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405812:	4b19      	ldr	r3, [pc, #100]	; (405878 <lv_obj_align+0x78>)
  405814:	4798      	blx	r3
  405816:	b928      	cbnz	r0, 405824 <lv_obj_align+0x24>
  405818:	4622      	mov	r2, r4
  40581a:	2300      	movs	r3, #0
  40581c:	4817      	ldr	r0, [pc, #92]	; (40587c <lv_obj_align+0x7c>)
  40581e:	4918      	ldr	r1, [pc, #96]	; (405880 <lv_obj_align+0x80>)
  405820:	4788      	blx	r1
  405822:	e7fe      	b.n	405822 <lv_obj_align+0x22>
    if(base == NULL) base = lv_obj_get_parent(obj);
  405824:	b14d      	cbz	r5, 40583a <lv_obj_align+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  405826:	4628      	mov	r0, r5
  405828:	4b13      	ldr	r3, [pc, #76]	; (405878 <lv_obj_align+0x78>)
  40582a:	4798      	blx	r3
  40582c:	b950      	cbnz	r0, 405844 <lv_obj_align+0x44>
  40582e:	462a      	mov	r2, r5
  405830:	2300      	movs	r3, #0
  405832:	4812      	ldr	r0, [pc, #72]	; (40587c <lv_obj_align+0x7c>)
  405834:	4912      	ldr	r1, [pc, #72]	; (405880 <lv_obj_align+0x80>)
  405836:	4788      	blx	r1
  405838:	e7fe      	b.n	405838 <lv_obj_align+0x38>
    if(base == NULL) base = lv_obj_get_parent(obj);
  40583a:	4620      	mov	r0, r4
  40583c:	4b11      	ldr	r3, [pc, #68]	; (405884 <lv_obj_align+0x84>)
  40583e:	4798      	blx	r3
  405840:	4605      	mov	r5, r0
  405842:	e7f0      	b.n	405826 <lv_obj_align+0x26>
    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
  405844:	9602      	str	r6, [sp, #8]
  405846:	9701      	str	r7, [sp, #4]
  405848:	2301      	movs	r3, #1
  40584a:	9300      	str	r3, [sp, #0]
  40584c:	4642      	mov	r2, r8
  40584e:	4629      	mov	r1, r5
  405850:	4620      	mov	r0, r4
  405852:	f8df 9034 	ldr.w	r9, [pc, #52]	; 405888 <lv_obj_align+0x88>
  405856:	47c8      	blx	r9
    obj->realign.align       = align;
  405858:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  40585c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  405860:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  405864:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
  405866:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  40586a:	f36f 0341 	bfc	r3, #1, #1
  40586e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  405872:	b005      	add	sp, #20
  405874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405878:	004150ef 	.word	0x004150ef
  40587c:	00425a74 	.word	0x00425a74
  405880:	004150f9 	.word	0x004150f9
  405884:	00404fa5 	.word	0x00404fa5
  405888:	0040577d 	.word	0x0040577d

0040588c <obj_align_mid_core>:
{
  40588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405890:	b083      	sub	sp, #12
  405892:	4607      	mov	r7, r0
  405894:	9001      	str	r0, [sp, #4]
  405896:	4689      	mov	r9, r1
  405898:	4614      	mov	r4, r2
  40589a:	469a      	mov	sl, r3
  40589c:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    lv_coord_t new_x = lv_obj_get_x(obj);
  4058a0:	4ba8      	ldr	r3, [pc, #672]	; (405b44 <obj_align_mid_core+0x2b8>)
  4058a2:	4798      	blx	r3
  4058a4:	4606      	mov	r6, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
  4058a6:	4638      	mov	r0, r7
  4058a8:	4ba7      	ldr	r3, [pc, #668]	; (405b48 <obj_align_mid_core+0x2bc>)
  4058aa:	4798      	blx	r3
  4058ac:	4605      	mov	r5, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  4058ae:	4638      	mov	r0, r7
  4058b0:	4ba6      	ldr	r3, [pc, #664]	; (405b4c <obj_align_mid_core+0x2c0>)
  4058b2:	4798      	blx	r3
  4058b4:	4680      	mov	r8, r0
  4058b6:	2800      	cmp	r0, #0
  4058b8:	bfb8      	it	lt
  4058ba:	f100 0801 	addlt.w	r8, r0, #1
  4058be:	f348 084f 	sbfx	r8, r8, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  4058c2:	9801      	ldr	r0, [sp, #4]
  4058c4:	4ba2      	ldr	r3, [pc, #648]	; (405b50 <obj_align_mid_core+0x2c4>)
  4058c6:	4798      	blx	r3
  4058c8:	4607      	mov	r7, r0
  4058ca:	2800      	cmp	r0, #0
  4058cc:	bfb8      	it	lt
  4058ce:	1c47      	addlt	r7, r0, #1
  4058d0:	f347 074f 	sbfx	r7, r7, #1, #16
    switch(align) {
  4058d4:	2c14      	cmp	r4, #20
  4058d6:	d82a      	bhi.n	40592e <obj_align_mid_core+0xa2>
  4058d8:	e8df f014 	tbh	[pc, r4, lsl #1]
  4058dc:	00500015 	.word	0x00500015
  4058e0:	00630056 	.word	0x00630056
  4058e4:	0075006c 	.word	0x0075006c
  4058e8:	00910085 	.word	0x00910085
  4058ec:	00b0009f 	.word	0x00b0009f
  4058f0:	00c300b6 	.word	0x00c300b6
  4058f4:	00d500cc 	.word	0x00d500cc
  4058f8:	00f100e5 	.word	0x00f100e5
  4058fc:	010500f7 	.word	0x010500f7
  405900:	0117010e 	.word	0x0117010e
  405904:	0128      	.short	0x0128
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405906:	4648      	mov	r0, r9
  405908:	4b90      	ldr	r3, [pc, #576]	; (405b4c <obj_align_mid_core+0x2c0>)
  40590a:	4798      	blx	r3
  40590c:	4606      	mov	r6, r0
  40590e:	2800      	cmp	r0, #0
  405910:	bfb8      	it	lt
  405912:	1c46      	addlt	r6, r0, #1
  405914:	ebc8 0666 	rsb	r6, r8, r6, asr #1
  405918:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  40591a:	4648      	mov	r0, r9
  40591c:	4b8c      	ldr	r3, [pc, #560]	; (405b50 <obj_align_mid_core+0x2c4>)
  40591e:	4798      	blx	r3
  405920:	4605      	mov	r5, r0
  405922:	2800      	cmp	r0, #0
  405924:	bfb8      	it	lt
  405926:	1c45      	addlt	r5, r0, #1
  405928:	ebc7 0565 	rsb	r5, r7, r5, asr #1
  40592c:	b22d      	sxth	r5, r5
    lv_obj_t * par        = lv_obj_get_parent(obj);
  40592e:	9801      	ldr	r0, [sp, #4]
  405930:	4b88      	ldr	r3, [pc, #544]	; (405b54 <obj_align_mid_core+0x2c8>)
  405932:	4798      	blx	r3
    new_x += x_ofs + base_abs_x;
  405934:	f8b9 3010 	ldrh.w	r3, [r9, #16]
  405938:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
  40593c:	4419      	add	r1, r3
  40593e:	440e      	add	r6, r1
    new_x -= par_abs_x;
  405940:	8a01      	ldrh	r1, [r0, #16]
  405942:	1a71      	subs	r1, r6, r1
  405944:	b209      	sxth	r1, r1
    new_y += y_ofs + base_abs_y;
  405946:	f8b9 3012 	ldrh.w	r3, [r9, #18]
  40594a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  40594e:	441a      	add	r2, r3
  405950:	4415      	add	r5, r2
    new_y -= par_abs_y;
  405952:	8a42      	ldrh	r2, [r0, #18]
  405954:	1aaa      	subs	r2, r5, r2
  405956:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  405958:	f1ba 0f00 	cmp.w	sl, #0
  40595c:	d003      	beq.n	405966 <obj_align_mid_core+0xda>
  40595e:	f1bb 0f00 	cmp.w	fp, #0
  405962:	f040 80f9 	bne.w	405b58 <obj_align_mid_core+0x2cc>
    else if(x_set) lv_obj_set_x(obj, new_x);
  405966:	f1ba 0f00 	cmp.w	sl, #0
  40596a:	f040 80f9 	bne.w	405b60 <obj_align_mid_core+0x2d4>
    else if(y_set) lv_obj_set_y(obj, new_y);
  40596e:	f1bb 0f00 	cmp.w	fp, #0
  405972:	f040 80f9 	bne.w	405b68 <obj_align_mid_core+0x2dc>
}
  405976:	b003      	add	sp, #12
  405978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = -obj_w_half;
  40597c:	f1c8 0600 	rsb	r6, r8, #0
  405980:	b236      	sxth	r6, r6
            new_y = -obj_h_half;
  405982:	427d      	negs	r5, r7
  405984:	b22d      	sxth	r5, r5
            break;
  405986:	e7d2      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405988:	4648      	mov	r0, r9
  40598a:	4b70      	ldr	r3, [pc, #448]	; (405b4c <obj_align_mid_core+0x2c0>)
  40598c:	4798      	blx	r3
  40598e:	4606      	mov	r6, r0
  405990:	2800      	cmp	r0, #0
  405992:	bfb8      	it	lt
  405994:	1c46      	addlt	r6, r0, #1
  405996:	ebc8 0666 	rsb	r6, r8, r6, asr #1
  40599a:	b236      	sxth	r6, r6
            new_y = -obj_h_half;
  40599c:	427d      	negs	r5, r7
  40599e:	b22d      	sxth	r5, r5
            break;
  4059a0:	e7c5      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4059a2:	4648      	mov	r0, r9
  4059a4:	4b69      	ldr	r3, [pc, #420]	; (405b4c <obj_align_mid_core+0x2c0>)
  4059a6:	4798      	blx	r3
  4059a8:	eba0 0608 	sub.w	r6, r0, r8
  4059ac:	b236      	sxth	r6, r6
            new_y = -obj_h_half;
  4059ae:	427d      	negs	r5, r7
  4059b0:	b22d      	sxth	r5, r5
            break;
  4059b2:	e7bc      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = -obj_w_half;
  4059b4:	f1c8 0600 	rsb	r6, r8, #0
  4059b8:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) - obj_h_half;
  4059ba:	4648      	mov	r0, r9
  4059bc:	4b64      	ldr	r3, [pc, #400]	; (405b50 <obj_align_mid_core+0x2c4>)
  4059be:	4798      	blx	r3
  4059c0:	1bc5      	subs	r5, r0, r7
  4059c2:	b22d      	sxth	r5, r5
            break;
  4059c4:	e7b3      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4059c6:	4648      	mov	r0, r9
  4059c8:	4b60      	ldr	r3, [pc, #384]	; (405b4c <obj_align_mid_core+0x2c0>)
  4059ca:	4798      	blx	r3
  4059cc:	4606      	mov	r6, r0
  4059ce:	2800      	cmp	r0, #0
  4059d0:	bfb8      	it	lt
  4059d2:	1c46      	addlt	r6, r0, #1
  4059d4:	ebc8 0666 	rsb	r6, r8, r6, asr #1
  4059d8:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) - obj_h_half;
  4059da:	4648      	mov	r0, r9
  4059dc:	4b5c      	ldr	r3, [pc, #368]	; (405b50 <obj_align_mid_core+0x2c4>)
  4059de:	4798      	blx	r3
  4059e0:	1bc5      	subs	r5, r0, r7
  4059e2:	b22d      	sxth	r5, r5
            break;
  4059e4:	e7a3      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4059e6:	4648      	mov	r0, r9
  4059e8:	4b58      	ldr	r3, [pc, #352]	; (405b4c <obj_align_mid_core+0x2c0>)
  4059ea:	4798      	blx	r3
  4059ec:	eba0 0608 	sub.w	r6, r0, r8
  4059f0:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) - obj_h_half;
  4059f2:	4648      	mov	r0, r9
  4059f4:	4b56      	ldr	r3, [pc, #344]	; (405b50 <obj_align_mid_core+0x2c4>)
  4059f6:	4798      	blx	r3
  4059f8:	1bc5      	subs	r5, r0, r7
  4059fa:	b22d      	sxth	r5, r5
            break;
  4059fc:	e797      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = -obj_w_half;
  4059fe:	f1c8 0600 	rsb	r6, r8, #0
  405a02:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405a04:	4648      	mov	r0, r9
  405a06:	4b52      	ldr	r3, [pc, #328]	; (405b50 <obj_align_mid_core+0x2c4>)
  405a08:	4798      	blx	r3
  405a0a:	4605      	mov	r5, r0
  405a0c:	2800      	cmp	r0, #0
  405a0e:	bfb8      	it	lt
  405a10:	1c45      	addlt	r5, r0, #1
  405a12:	ebc7 0565 	rsb	r5, r7, r5, asr #1
  405a16:	b22d      	sxth	r5, r5
            break;
  405a18:	e789      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405a1a:	4648      	mov	r0, r9
  405a1c:	4b4b      	ldr	r3, [pc, #300]	; (405b4c <obj_align_mid_core+0x2c0>)
  405a1e:	4798      	blx	r3
  405a20:	eba0 0608 	sub.w	r6, r0, r8
  405a24:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405a26:	4648      	mov	r0, r9
  405a28:	4b49      	ldr	r3, [pc, #292]	; (405b50 <obj_align_mid_core+0x2c4>)
  405a2a:	4798      	blx	r3
  405a2c:	4605      	mov	r5, r0
  405a2e:	2800      	cmp	r0, #0
  405a30:	bfb8      	it	lt
  405a32:	1c45      	addlt	r5, r0, #1
  405a34:	ebc7 0565 	rsb	r5, r7, r5, asr #1
  405a38:	b22d      	sxth	r5, r5
            break;
  405a3a:	e778      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = -obj_w_half;
  405a3c:	f1c8 0600 	rsb	r6, r8, #0
  405a40:	b236      	sxth	r6, r6
            new_y = -obj_h_half;
  405a42:	427d      	negs	r5, r7
  405a44:	b22d      	sxth	r5, r5
            break;
  405a46:	e772      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405a48:	4648      	mov	r0, r9
  405a4a:	4b40      	ldr	r3, [pc, #256]	; (405b4c <obj_align_mid_core+0x2c0>)
  405a4c:	4798      	blx	r3
  405a4e:	4606      	mov	r6, r0
  405a50:	2800      	cmp	r0, #0
  405a52:	bfb8      	it	lt
  405a54:	1c46      	addlt	r6, r0, #1
  405a56:	ebc8 0666 	rsb	r6, r8, r6, asr #1
  405a5a:	b236      	sxth	r6, r6
            new_y = -obj_h_half;
  405a5c:	427d      	negs	r5, r7
  405a5e:	b22d      	sxth	r5, r5
            break;
  405a60:	e765      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405a62:	4648      	mov	r0, r9
  405a64:	4b39      	ldr	r3, [pc, #228]	; (405b4c <obj_align_mid_core+0x2c0>)
  405a66:	4798      	blx	r3
  405a68:	eba0 0608 	sub.w	r6, r0, r8
  405a6c:	b236      	sxth	r6, r6
            new_y = -obj_h_half;
  405a6e:	427d      	negs	r5, r7
  405a70:	b22d      	sxth	r5, r5
            break;
  405a72:	e75c      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = -obj_w_half;
  405a74:	f1c8 0600 	rsb	r6, r8, #0
  405a78:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) - obj_h_half;
  405a7a:	4648      	mov	r0, r9
  405a7c:	4b34      	ldr	r3, [pc, #208]	; (405b50 <obj_align_mid_core+0x2c4>)
  405a7e:	4798      	blx	r3
  405a80:	1bc5      	subs	r5, r0, r7
  405a82:	b22d      	sxth	r5, r5
            break;
  405a84:	e753      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405a86:	4648      	mov	r0, r9
  405a88:	4b30      	ldr	r3, [pc, #192]	; (405b4c <obj_align_mid_core+0x2c0>)
  405a8a:	4798      	blx	r3
  405a8c:	4606      	mov	r6, r0
  405a8e:	2800      	cmp	r0, #0
  405a90:	bfb8      	it	lt
  405a92:	1c46      	addlt	r6, r0, #1
  405a94:	ebc8 0666 	rsb	r6, r8, r6, asr #1
  405a98:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) - obj_h_half;
  405a9a:	4648      	mov	r0, r9
  405a9c:	4b2c      	ldr	r3, [pc, #176]	; (405b50 <obj_align_mid_core+0x2c4>)
  405a9e:	4798      	blx	r3
  405aa0:	1bc5      	subs	r5, r0, r7
  405aa2:	b22d      	sxth	r5, r5
            break;
  405aa4:	e743      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405aa6:	4648      	mov	r0, r9
  405aa8:	4b28      	ldr	r3, [pc, #160]	; (405b4c <obj_align_mid_core+0x2c0>)
  405aaa:	4798      	blx	r3
  405aac:	eba0 0608 	sub.w	r6, r0, r8
  405ab0:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) - obj_h_half;
  405ab2:	4648      	mov	r0, r9
  405ab4:	4b26      	ldr	r3, [pc, #152]	; (405b50 <obj_align_mid_core+0x2c4>)
  405ab6:	4798      	blx	r3
  405ab8:	1bc5      	subs	r5, r0, r7
  405aba:	b22d      	sxth	r5, r5
            break;
  405abc:	e737      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = -obj_w_half;
  405abe:	f1c8 0600 	rsb	r6, r8, #0
  405ac2:	b236      	sxth	r6, r6
            new_y = -obj_h_half;
  405ac4:	427d      	negs	r5, r7
  405ac6:	b22d      	sxth	r5, r5
            break;
  405ac8:	e731      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = -obj_w_half;
  405aca:	f1c8 0600 	rsb	r6, r8, #0
  405ace:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405ad0:	4648      	mov	r0, r9
  405ad2:	4b1f      	ldr	r3, [pc, #124]	; (405b50 <obj_align_mid_core+0x2c4>)
  405ad4:	4798      	blx	r3
  405ad6:	4605      	mov	r5, r0
  405ad8:	2800      	cmp	r0, #0
  405ada:	bfb8      	it	lt
  405adc:	1c45      	addlt	r5, r0, #1
  405ade:	ebc7 0565 	rsb	r5, r7, r5, asr #1
  405ae2:	b22d      	sxth	r5, r5
            break;
  405ae4:	e723      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = -obj_w_half;
  405ae6:	f1c8 0600 	rsb	r6, r8, #0
  405aea:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) - obj_h_half;
  405aec:	4648      	mov	r0, r9
  405aee:	4b18      	ldr	r3, [pc, #96]	; (405b50 <obj_align_mid_core+0x2c4>)
  405af0:	4798      	blx	r3
  405af2:	1bc5      	subs	r5, r0, r7
  405af4:	b22d      	sxth	r5, r5
            break;
  405af6:	e71a      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405af8:	4648      	mov	r0, r9
  405afa:	4b14      	ldr	r3, [pc, #80]	; (405b4c <obj_align_mid_core+0x2c0>)
  405afc:	4798      	blx	r3
  405afe:	eba0 0608 	sub.w	r6, r0, r8
  405b02:	b236      	sxth	r6, r6
            new_y = -obj_h_half;
  405b04:	427d      	negs	r5, r7
  405b06:	b22d      	sxth	r5, r5
            break;
  405b08:	e711      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405b0a:	4648      	mov	r0, r9
  405b0c:	4b0f      	ldr	r3, [pc, #60]	; (405b4c <obj_align_mid_core+0x2c0>)
  405b0e:	4798      	blx	r3
  405b10:	eba0 0608 	sub.w	r6, r0, r8
  405b14:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405b16:	4648      	mov	r0, r9
  405b18:	4b0d      	ldr	r3, [pc, #52]	; (405b50 <obj_align_mid_core+0x2c4>)
  405b1a:	4798      	blx	r3
  405b1c:	4605      	mov	r5, r0
  405b1e:	2800      	cmp	r0, #0
  405b20:	bfb8      	it	lt
  405b22:	1c45      	addlt	r5, r0, #1
  405b24:	ebc7 0565 	rsb	r5, r7, r5, asr #1
  405b28:	b22d      	sxth	r5, r5
            break;
  405b2a:	e700      	b.n	40592e <obj_align_mid_core+0xa2>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405b2c:	4648      	mov	r0, r9
  405b2e:	4b07      	ldr	r3, [pc, #28]	; (405b4c <obj_align_mid_core+0x2c0>)
  405b30:	4798      	blx	r3
  405b32:	eba0 0608 	sub.w	r6, r0, r8
  405b36:	b236      	sxth	r6, r6
            new_y = lv_obj_get_height(base) - obj_h_half;
  405b38:	4648      	mov	r0, r9
  405b3a:	4b05      	ldr	r3, [pc, #20]	; (405b50 <obj_align_mid_core+0x2c4>)
  405b3c:	4798      	blx	r3
  405b3e:	1bc5      	subs	r5, r0, r7
  405b40:	b22d      	sxth	r5, r5
            break;
  405b42:	e6f4      	b.n	40592e <obj_align_mid_core+0xa2>
  405b44:	0040510d 	.word	0x0040510d
  405b48:	0040514d 	.word	0x0040514d
  405b4c:	0040518d 	.word	0x0040518d
  405b50:	004051bd 	.word	0x004051bd
  405b54:	00404fa5 	.word	0x00404fa5
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  405b58:	9801      	ldr	r0, [sp, #4]
  405b5a:	4b06      	ldr	r3, [pc, #24]	; (405b74 <obj_align_mid_core+0x2e8>)
  405b5c:	4798      	blx	r3
  405b5e:	e70a      	b.n	405976 <obj_align_mid_core+0xea>
    else if(x_set) lv_obj_set_x(obj, new_x);
  405b60:	9801      	ldr	r0, [sp, #4]
  405b62:	4b05      	ldr	r3, [pc, #20]	; (405b78 <obj_align_mid_core+0x2ec>)
  405b64:	4798      	blx	r3
  405b66:	e706      	b.n	405976 <obj_align_mid_core+0xea>
    else if(y_set) lv_obj_set_y(obj, new_y);
  405b68:	4611      	mov	r1, r2
  405b6a:	9801      	ldr	r0, [sp, #4]
  405b6c:	4b03      	ldr	r3, [pc, #12]	; (405b7c <obj_align_mid_core+0x2f0>)
  405b6e:	4798      	blx	r3
}
  405b70:	e701      	b.n	405976 <obj_align_mid_core+0xea>
  405b72:	bf00      	nop
  405b74:	00405645 	.word	0x00405645
  405b78:	004056fd 	.word	0x004056fd
  405b7c:	0040573d 	.word	0x0040573d

00405b80 <lv_obj_align_mid>:
{
  405b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405b84:	b085      	sub	sp, #20
  405b86:	4604      	mov	r4, r0
  405b88:	460d      	mov	r5, r1
  405b8a:	4690      	mov	r8, r2
  405b8c:	461f      	mov	r7, r3
  405b8e:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b92:	4b19      	ldr	r3, [pc, #100]	; (405bf8 <lv_obj_align_mid+0x78>)
  405b94:	4798      	blx	r3
  405b96:	b928      	cbnz	r0, 405ba4 <lv_obj_align_mid+0x24>
  405b98:	4622      	mov	r2, r4
  405b9a:	2300      	movs	r3, #0
  405b9c:	4817      	ldr	r0, [pc, #92]	; (405bfc <lv_obj_align_mid+0x7c>)
  405b9e:	4918      	ldr	r1, [pc, #96]	; (405c00 <lv_obj_align_mid+0x80>)
  405ba0:	4788      	blx	r1
  405ba2:	e7fe      	b.n	405ba2 <lv_obj_align_mid+0x22>
    if(base == NULL) {
  405ba4:	b14d      	cbz	r5, 405bba <lv_obj_align_mid+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  405ba6:	4628      	mov	r0, r5
  405ba8:	4b13      	ldr	r3, [pc, #76]	; (405bf8 <lv_obj_align_mid+0x78>)
  405baa:	4798      	blx	r3
  405bac:	b950      	cbnz	r0, 405bc4 <lv_obj_align_mid+0x44>
  405bae:	462a      	mov	r2, r5
  405bb0:	2300      	movs	r3, #0
  405bb2:	4812      	ldr	r0, [pc, #72]	; (405bfc <lv_obj_align_mid+0x7c>)
  405bb4:	4912      	ldr	r1, [pc, #72]	; (405c00 <lv_obj_align_mid+0x80>)
  405bb6:	4788      	blx	r1
  405bb8:	e7fe      	b.n	405bb8 <lv_obj_align_mid+0x38>
        base = lv_obj_get_parent(obj);
  405bba:	4620      	mov	r0, r4
  405bbc:	4b11      	ldr	r3, [pc, #68]	; (405c04 <lv_obj_align_mid+0x84>)
  405bbe:	4798      	blx	r3
  405bc0:	4605      	mov	r5, r0
  405bc2:	e7f0      	b.n	405ba6 <lv_obj_align_mid+0x26>
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
  405bc4:	9602      	str	r6, [sp, #8]
  405bc6:	9701      	str	r7, [sp, #4]
  405bc8:	2301      	movs	r3, #1
  405bca:	9300      	str	r3, [sp, #0]
  405bcc:	4642      	mov	r2, r8
  405bce:	4629      	mov	r1, r5
  405bd0:	4620      	mov	r0, r4
  405bd2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 405c08 <lv_obj_align_mid+0x88>
  405bd6:	47c8      	blx	r9
    obj->realign.align       = align;
  405bd8:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  405bdc:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  405be0:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  405be4:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
  405be6:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  405bea:	f043 0302 	orr.w	r3, r3, #2
  405bee:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  405bf2:	b005      	add	sp, #20
  405bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405bf8:	004150ef 	.word	0x004150ef
  405bfc:	00425a74 	.word	0x00425a74
  405c00:	004150f9 	.word	0x004150f9
  405c04:	00404fa5 	.word	0x00404fa5
  405c08:	0040588d 	.word	0x0040588d

00405c0c <lv_obj_realign>:
{
  405c0c:	b510      	push	{r4, lr}
  405c0e:	b082      	sub	sp, #8
  405c10:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405c12:	4b0e      	ldr	r3, [pc, #56]	; (405c4c <lv_obj_realign+0x40>)
  405c14:	4798      	blx	r3
  405c16:	b190      	cbz	r0, 405c3e <lv_obj_realign+0x32>
    if(obj->realign.mid_align)
  405c18:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  405c1c:	f013 0f02 	tst.w	r3, #2
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  405c20:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  405c24:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  405c28:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  405c2c:	9100      	str	r1, [sp, #0]
  405c2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  405c30:	4620      	mov	r0, r4
  405c32:	bf14      	ite	ne
  405c34:	4c06      	ldrne	r4, [pc, #24]	; (405c50 <lv_obj_realign+0x44>)
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  405c36:	4c07      	ldreq	r4, [pc, #28]	; (405c54 <lv_obj_realign+0x48>)
  405c38:	47a0      	blx	r4
}
  405c3a:	b002      	add	sp, #8
  405c3c:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405c3e:	4622      	mov	r2, r4
  405c40:	2300      	movs	r3, #0
  405c42:	4805      	ldr	r0, [pc, #20]	; (405c58 <lv_obj_realign+0x4c>)
  405c44:	4905      	ldr	r1, [pc, #20]	; (405c5c <lv_obj_realign+0x50>)
  405c46:	4788      	blx	r1
  405c48:	e7fe      	b.n	405c48 <lv_obj_realign+0x3c>
  405c4a:	bf00      	nop
  405c4c:	004150ef 	.word	0x004150ef
  405c50:	00405b81 	.word	0x00405b81
  405c54:	00405801 	.word	0x00405801
  405c58:	00425a74 	.word	0x00425a74
  405c5c:	004150f9 	.word	0x004150f9

00405c60 <refresh_children_style>:
{
  405c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c64:	4606      	mov	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  405c66:	2100      	movs	r1, #0
  405c68:	4b0d      	ldr	r3, [pc, #52]	; (405ca0 <refresh_children_style+0x40>)
  405c6a:	4798      	blx	r3
    while(child != NULL) {
  405c6c:	b1b0      	cbz	r0, 405c9c <refresh_children_style+0x3c>
  405c6e:	4604      	mov	r4, r0
        lv_obj_invalidate(child);
  405c70:	4d0c      	ldr	r5, [pc, #48]	; (405ca4 <refresh_children_style+0x44>)
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
  405c72:	f04f 0800 	mov.w	r8, #0
        child = lv_obj_get_child(obj, child);
  405c76:	4f0a      	ldr	r7, [pc, #40]	; (405ca0 <refresh_children_style+0x40>)
        lv_obj_invalidate(child);
  405c78:	4620      	mov	r0, r4
  405c7a:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
  405c7c:	69e3      	ldr	r3, [r4, #28]
  405c7e:	4642      	mov	r2, r8
  405c80:	2104      	movs	r1, #4
  405c82:	4620      	mov	r0, r4
  405c84:	4798      	blx	r3
        lv_obj_invalidate(child);
  405c86:	4620      	mov	r0, r4
  405c88:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
  405c8a:	4620      	mov	r0, r4
  405c8c:	f7ff ffe8 	bl	405c60 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
  405c90:	4621      	mov	r1, r4
  405c92:	4630      	mov	r0, r6
  405c94:	47b8      	blx	r7
    while(child != NULL) {
  405c96:	4604      	mov	r4, r0
  405c98:	2800      	cmp	r0, #0
  405c9a:	d1ed      	bne.n	405c78 <refresh_children_style+0x18>
  405c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ca0:	00405091 	.word	0x00405091
  405ca4:	00405565 	.word	0x00405565

00405ca8 <lv_obj_get_click>:
{
  405ca8:	b510      	push	{r4, lr}
  405caa:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405cac:	4b06      	ldr	r3, [pc, #24]	; (405cc8 <lv_obj_get_click+0x20>)
  405cae:	4798      	blx	r3
  405cb0:	b120      	cbz	r0, 405cbc <lv_obj_get_click+0x14>
    return obj->click == 0 ? false : true;
  405cb2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  405cb6:	f000 0001 	and.w	r0, r0, #1
  405cba:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405cbc:	4622      	mov	r2, r4
  405cbe:	2300      	movs	r3, #0
  405cc0:	4802      	ldr	r0, [pc, #8]	; (405ccc <lv_obj_get_click+0x24>)
  405cc2:	4903      	ldr	r1, [pc, #12]	; (405cd0 <lv_obj_get_click+0x28>)
  405cc4:	4788      	blx	r1
  405cc6:	e7fe      	b.n	405cc6 <lv_obj_get_click+0x1e>
  405cc8:	004150ef 	.word	0x004150ef
  405ccc:	00425a74 	.word	0x00425a74
  405cd0:	004150f9 	.word	0x004150f9

00405cd4 <lv_obj_get_drag>:
{
  405cd4:	b510      	push	{r4, lr}
  405cd6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405cd8:	4b06      	ldr	r3, [pc, #24]	; (405cf4 <lv_obj_get_drag+0x20>)
  405cda:	4798      	blx	r3
  405cdc:	b120      	cbz	r0, 405ce8 <lv_obj_get_drag+0x14>
    return obj->drag == 0 ? false : true;
  405cde:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  405ce2:	f3c0 0040 	ubfx	r0, r0, #1, #1
  405ce6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ce8:	4622      	mov	r2, r4
  405cea:	2300      	movs	r3, #0
  405cec:	4802      	ldr	r0, [pc, #8]	; (405cf8 <lv_obj_get_drag+0x24>)
  405cee:	4903      	ldr	r1, [pc, #12]	; (405cfc <lv_obj_get_drag+0x28>)
  405cf0:	4788      	blx	r1
  405cf2:	e7fe      	b.n	405cf2 <lv_obj_get_drag+0x1e>
  405cf4:	004150ef 	.word	0x004150ef
  405cf8:	00425a74 	.word	0x00425a74
  405cfc:	004150f9 	.word	0x004150f9

00405d00 <lv_obj_get_drag_dir>:
{
  405d00:	b510      	push	{r4, lr}
  405d02:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405d04:	4b06      	ldr	r3, [pc, #24]	; (405d20 <lv_obj_get_drag_dir+0x20>)
  405d06:	4798      	blx	r3
  405d08:	b120      	cbz	r0, 405d14 <lv_obj_get_drag_dir+0x14>
    return obj->drag_dir;
  405d0a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
  405d0e:	f3c0 0082 	ubfx	r0, r0, #2, #3
  405d12:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405d14:	4622      	mov	r2, r4
  405d16:	2300      	movs	r3, #0
  405d18:	4802      	ldr	r0, [pc, #8]	; (405d24 <lv_obj_get_drag_dir+0x24>)
  405d1a:	4903      	ldr	r1, [pc, #12]	; (405d28 <lv_obj_get_drag_dir+0x28>)
  405d1c:	4788      	blx	r1
  405d1e:	e7fe      	b.n	405d1e <lv_obj_get_drag_dir+0x1e>
  405d20:	004150ef 	.word	0x004150ef
  405d24:	00425a74 	.word	0x00425a74
  405d28:	004150f9 	.word	0x004150f9

00405d2c <lv_obj_get_drag_throw>:
{
  405d2c:	b510      	push	{r4, lr}
  405d2e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405d30:	4b06      	ldr	r3, [pc, #24]	; (405d4c <lv_obj_get_drag_throw+0x20>)
  405d32:	4798      	blx	r3
  405d34:	b120      	cbz	r0, 405d40 <lv_obj_get_drag_throw+0x14>
    return obj->drag_throw == 0 ? false : true;
  405d36:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  405d3a:	f3c0 0080 	ubfx	r0, r0, #2, #1
  405d3e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405d40:	4622      	mov	r2, r4
  405d42:	2300      	movs	r3, #0
  405d44:	4802      	ldr	r0, [pc, #8]	; (405d50 <lv_obj_get_drag_throw+0x24>)
  405d46:	4903      	ldr	r1, [pc, #12]	; (405d54 <lv_obj_get_drag_throw+0x28>)
  405d48:	4788      	blx	r1
  405d4a:	e7fe      	b.n	405d4a <lv_obj_get_drag_throw+0x1e>
  405d4c:	004150ef 	.word	0x004150ef
  405d50:	00425a74 	.word	0x00425a74
  405d54:	004150f9 	.word	0x004150f9

00405d58 <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
  405d58:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
  405d5c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  405d60:	4770      	bx	lr

00405d62 <lv_obj_get_gesture_parent>:
    return obj->gesture_parent == 0 ? false : true;
  405d62:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  405d66:	f000 0001 	and.w	r0, r0, #1
  405d6a:	4770      	bx	lr

00405d6c <lv_obj_get_base_dir>:
{
  405d6c:	b510      	push	{r4, lr}
  405d6e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405d70:	4b05      	ldr	r3, [pc, #20]	; (405d88 <lv_obj_get_base_dir+0x1c>)
  405d72:	4798      	blx	r3
  405d74:	b108      	cbz	r0, 405d7a <lv_obj_get_base_dir+0xe>
}
  405d76:	2000      	movs	r0, #0
  405d78:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405d7a:	4622      	mov	r2, r4
  405d7c:	2300      	movs	r3, #0
  405d7e:	4803      	ldr	r0, [pc, #12]	; (405d8c <lv_obj_get_base_dir+0x20>)
  405d80:	4903      	ldr	r1, [pc, #12]	; (405d90 <lv_obj_get_base_dir+0x24>)
  405d82:	4788      	blx	r1
  405d84:	e7fe      	b.n	405d84 <lv_obj_get_base_dir+0x18>
  405d86:	bf00      	nop
  405d88:	004150ef 	.word	0x004150ef
  405d8c:	00425a74 	.word	0x00425a74
  405d90:	004150f9 	.word	0x004150f9

00405d94 <lv_obj_create>:
{
  405d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405d98:	460d      	mov	r5, r1
    if(parent == NULL) {
  405d9a:	4606      	mov	r6, r0
  405d9c:	b150      	cbz	r0, 405db4 <lv_obj_create+0x20>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
  405d9e:	4ba2      	ldr	r3, [pc, #648]	; (406028 <lv_obj_create+0x294>)
  405da0:	4798      	blx	r3
  405da2:	2800      	cmp	r0, #0
  405da4:	f040 8168 	bne.w	406078 <lv_obj_create+0x2e4>
  405da8:	4632      	mov	r2, r6
  405daa:	2300      	movs	r3, #0
  405dac:	489f      	ldr	r0, [pc, #636]	; (40602c <lv_obj_create+0x298>)
  405dae:	49a0      	ldr	r1, [pc, #640]	; (406030 <lv_obj_create+0x29c>)
  405db0:	4788      	blx	r1
  405db2:	e7fe      	b.n	405db2 <lv_obj_create+0x1e>
        lv_disp_t * disp = lv_disp_get_default();
  405db4:	4b9f      	ldr	r3, [pc, #636]	; (406034 <lv_obj_create+0x2a0>)
  405db6:	4798      	blx	r3
        if(!disp) {
  405db8:	2800      	cmp	r0, #0
  405dba:	f000 81ef 	beq.w	40619c <lv_obj_create+0x408>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
  405dbe:	3038      	adds	r0, #56	; 0x38
  405dc0:	4b9d      	ldr	r3, [pc, #628]	; (406038 <lv_obj_create+0x2a4>)
  405dc2:	4798      	blx	r3
  405dc4:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  405dc6:	4b98      	ldr	r3, [pc, #608]	; (406028 <lv_obj_create+0x294>)
  405dc8:	4798      	blx	r3
  405dca:	b928      	cbnz	r0, 405dd8 <lv_obj_create+0x44>
  405dcc:	4622      	mov	r2, r4
  405dce:	2300      	movs	r3, #0
  405dd0:	489a      	ldr	r0, [pc, #616]	; (40603c <lv_obj_create+0x2a8>)
  405dd2:	4997      	ldr	r1, [pc, #604]	; (406030 <lv_obj_create+0x29c>)
  405dd4:	4788      	blx	r1
  405dd6:	e7fe      	b.n	405dd6 <lv_obj_create+0x42>
        if(new_obj == NULL) return NULL;
  405dd8:	2c00      	cmp	r4, #0
  405dda:	f000 8121 	beq.w	406020 <lv_obj_create+0x28c>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  405dde:	214c      	movs	r1, #76	; 0x4c
  405de0:	4620      	mov	r0, r4
  405de2:	4b97      	ldr	r3, [pc, #604]	; (406040 <lv_obj_create+0x2ac>)
  405de4:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  405de6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  405dea:	f36f 1346 	bfc	r3, #5, #2
  405dee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  405df2:	4b94      	ldr	r3, [pc, #592]	; (406044 <lv_obj_create+0x2b0>)
  405df4:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  405df6:	4b94      	ldr	r3, [pc, #592]	; (406048 <lv_obj_create+0x2b4>)
  405df8:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  405dfa:	2700      	movs	r7, #0
  405dfc:	61a7      	str	r7, [r4, #24]
        new_obj->coords.x1    = 0;
  405dfe:	8227      	strh	r7, [r4, #16]
        new_obj->coords.y1    = 0;
  405e00:	8267      	strh	r7, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
  405e02:	4638      	mov	r0, r7
  405e04:	4b91      	ldr	r3, [pc, #580]	; (40604c <lv_obj_create+0x2b8>)
  405e06:	4798      	blx	r3
  405e08:	3801      	subs	r0, #1
  405e0a:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
  405e0c:	4638      	mov	r0, r7
  405e0e:	4b90      	ldr	r3, [pc, #576]	; (406050 <lv_obj_create+0x2bc>)
  405e10:	4798      	blx	r3
  405e12:	3801      	subs	r0, #1
  405e14:	82e0      	strh	r0, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
  405e16:	214c      	movs	r1, #76	; 0x4c
  405e18:	1d20      	adds	r0, r4, #4
  405e1a:	4b8e      	ldr	r3, [pc, #568]	; (406054 <lv_obj_create+0x2c0>)
  405e1c:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
  405e1e:	2300      	movs	r3, #0
  405e20:	8663      	strh	r3, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
  405e22:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
  405e26:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    new_obj->realign.align        = LV_ALIGN_CENTER;
  405e2a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
  405e2e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
  405e32:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
  405e36:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
  405e38:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
  405e3c:	f363 0200 	bfi	r2, r3, #0, #1
  405e40:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->group_p = NULL;
  405e44:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
  405e46:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    new_obj->click        = 1;
  405e4a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    new_obj->drag         = 0;
  405e4e:	f041 0101 	orr.w	r1, r1, #1
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
  405e52:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  405e56:	2003      	movs	r0, #3
  405e58:	f360 0284 	bfi	r2, r0, #2, #3
    new_obj->protect      = LV_PROTECT_NONE;
  405e5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    new_obj->parent_event = 0;
  405e60:	f001 01c1 	and.w	r1, r1, #193	; 0xc1
  405e64:	f363 1186 	bfi	r1, r3, #6, #1
  405e68:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    new_obj->gesture_parent = parent ? 1 : 0;
  405e6c:	1af7      	subs	r7, r6, r3
  405e6e:	bf18      	it	ne
  405e70:	2701      	movne	r7, #1
  405e72:	f367 0200 	bfi	r2, r7, #0, #1
    new_obj->focus_parent  = 0;
  405e76:	f363 0241 	bfi	r2, r3, #1, #1
  405e7a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
  405e7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    new_obj->ext_attr = NULL;
  405e82:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
  405e84:	f104 0828 	add.w	r8, r4, #40	; 0x28
  405e88:	4640      	mov	r0, r8
  405e8a:	4b73      	ldr	r3, [pc, #460]	; (406058 <lv_obj_create+0x2c4>)
  405e8c:	4798      	blx	r3
    if(copy == NULL) {
  405e8e:	2d00      	cmp	r5, #0
  405e90:	f000 8179 	beq.w	406186 <lv_obj_create+0x3f2>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
  405e94:	f105 0128 	add.w	r1, r5, #40	; 0x28
  405e98:	4640      	mov	r0, r8
  405e9a:	4b70      	ldr	r3, [pc, #448]	; (40605c <lv_obj_create+0x2c8>)
  405e9c:	4798      	blx	r3
  405e9e:	f105 020f 	add.w	r2, r5, #15
  405ea2:	f104 0118 	add.w	r1, r4, #24
    uint8_t * d8 = (uint8_t *)dst;
  405ea6:	f104 0310 	add.w	r3, r4, #16
        *d8 = *s8;
  405eaa:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  405eae:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
  405eb2:	428b      	cmp	r3, r1
  405eb4:	d1f9      	bne.n	405eaa <lv_obj_create+0x116>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
  405eb6:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  405eba:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
  405ebc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  405ec0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
  405ec4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
  405ec8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->base_dir = copy->base_dir;
  405ecc:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  405ed0:	f3c3 1341 	ubfx	r3, r3, #5, #2
  405ed4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  405ed8:	f363 1246 	bfi	r2, r3, #5, #2
  405edc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->realign.align        = copy->realign.align;
  405ee0:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  405ee4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
  405ee8:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
  405eec:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
  405ef0:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
  405ef4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
  405ef8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  405efa:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
  405efc:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
  405f00:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  405f04:	f362 0300 	bfi	r3, r2, #0, #1
  405f08:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
  405f0c:	69ab      	ldr	r3, [r5, #24]
  405f0e:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
  405f10:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  405f14:	09db      	lsrs	r3, r3, #7
  405f16:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  405f1a:	f363 12c7 	bfi	r2, r3, #7, #1
  405f1e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
  405f22:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
  405f26:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  405f2a:	f362 0300 	bfi	r3, r2, #0, #1
  405f2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
  405f32:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  405f36:	f3c3 0340 	ubfx	r3, r3, #1, #1
  405f3a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  405f3e:	f363 0241 	bfi	r2, r3, #1, #1
  405f42:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
  405f46:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  405f4a:	f3c3 0382 	ubfx	r3, r3, #2, #3
  405f4e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  405f52:	f363 0284 	bfi	r2, r3, #2, #3
  405f56:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
  405f5a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  405f5e:	f3c3 0380 	ubfx	r3, r3, #2, #1
  405f62:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  405f66:	f363 0282 	bfi	r2, r3, #2, #1
  405f6a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
  405f6e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  405f72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  405f76:	b2d2      	uxtb	r2, r2
  405f78:	f363 02c3 	bfi	r2, r3, #3, #1
  405f7c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
  405f80:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  405f84:	f3c3 1300 	ubfx	r3, r3, #4, #1
  405f88:	b2d2      	uxtb	r2, r2
  405f8a:	f363 1204 	bfi	r2, r3, #4, #1
  405f8e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
  405f92:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  405f96:	f3c3 1340 	ubfx	r3, r3, #5, #1
  405f9a:	b2d2      	uxtb	r2, r2
  405f9c:	f363 1245 	bfi	r2, r3, #5, #1
  405fa0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
  405fa4:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  405fa8:	f3c3 1380 	ubfx	r3, r3, #6, #1
  405fac:	b2d2      	uxtb	r2, r2
  405fae:	f363 1286 	bfi	r2, r3, #6, #1
  405fb2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
  405fb6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  405fba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
  405fbe:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
  405fc2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  405fc6:	f362 0300 	bfi	r3, r2, #0, #1
  405fca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
  405fce:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  405fd2:	f3c3 0340 	ubfx	r3, r3, #1, #1
  405fd6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  405fda:	f363 0241 	bfi	r2, r3, #1, #1
  405fde:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
  405fe2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  405fe4:	b110      	cbz	r0, 405fec <lv_obj_create+0x258>
            lv_group_add_obj(copy->group_p, new_obj);
  405fe6:	4621      	mov	r1, r4
  405fe8:	4b1d      	ldr	r3, [pc, #116]	; (406060 <lv_obj_create+0x2cc>)
  405fea:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
  405fec:	4628      	mov	r0, r5
  405fee:	4b1d      	ldr	r3, [pc, #116]	; (406064 <lv_obj_create+0x2d0>)
  405ff0:	4798      	blx	r3
  405ff2:	b160      	cbz	r0, 40600e <lv_obj_create+0x27a>
  405ff4:	b15f      	cbz	r7, 40600e <lv_obj_create+0x27a>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
  405ff6:	4628      	mov	r0, r5
  405ff8:	4b1b      	ldr	r3, [pc, #108]	; (406068 <lv_obj_create+0x2d4>)
  405ffa:	4798      	blx	r3
  405ffc:	4607      	mov	r7, r0
  405ffe:	4628      	mov	r0, r5
  406000:	4b1a      	ldr	r3, [pc, #104]	; (40606c <lv_obj_create+0x2d8>)
  406002:	4798      	blx	r3
  406004:	4602      	mov	r2, r0
  406006:	4639      	mov	r1, r7
  406008:	4620      	mov	r0, r4
  40600a:	4b19      	ldr	r3, [pc, #100]	; (406070 <lv_obj_create+0x2dc>)
  40600c:	4798      	blx	r3
    if(parent != NULL) {
  40600e:	b13e      	cbz	r6, 406020 <lv_obj_create+0x28c>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
  406010:	69f3      	ldr	r3, [r6, #28]
  406012:	4622      	mov	r2, r4
  406014:	2101      	movs	r1, #1
  406016:	4630      	mov	r0, r6
  406018:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
  40601a:	4620      	mov	r0, r4
  40601c:	4b15      	ldr	r3, [pc, #84]	; (406074 <lv_obj_create+0x2e0>)
  40601e:	4798      	blx	r3
}
  406020:	4620      	mov	r0, r4
  406022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406026:	bf00      	nop
  406028:	004150ef 	.word	0x004150ef
  40602c:	00425a74 	.word	0x00425a74
  406030:	004150f9 	.word	0x004150f9
  406034:	004140a1 	.word	0x004140a1
  406038:	00415355 	.word	0x00415355
  40603c:	00425a60 	.word	0x00425a60
  406040:	00415ead 	.word	0x00415ead
  406044:	004088e5 	.word	0x004088e5
  406048:	004078a1 	.word	0x004078a1
  40604c:	004140ad 	.word	0x004140ad
  406050:	004140d5 	.word	0x004140d5
  406054:	00415343 	.word	0x00415343
  406058:	00409511 	.word	0x00409511
  40605c:	0040a2dd 	.word	0x0040a2dd
  406060:	00402fc9 	.word	0x00402fc9
  406064:	00404fa5 	.word	0x00404fa5
  406068:	0040510d 	.word	0x0040510d
  40606c:	0040514d 	.word	0x0040514d
  406070:	00405645 	.word	0x00405645
  406074:	00405565 	.word	0x00405565
        new_obj = _lv_ll_ins_head(&parent->child_ll);
  406078:	1d30      	adds	r0, r6, #4
  40607a:	4b49      	ldr	r3, [pc, #292]	; (4061a0 <lv_obj_create+0x40c>)
  40607c:	4798      	blx	r3
  40607e:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  406080:	4b48      	ldr	r3, [pc, #288]	; (4061a4 <lv_obj_create+0x410>)
  406082:	4798      	blx	r3
  406084:	2800      	cmp	r0, #0
  406086:	d046      	beq.n	406116 <lv_obj_create+0x382>
        if(new_obj == NULL) return NULL;
  406088:	2c00      	cmp	r4, #0
  40608a:	d0c9      	beq.n	406020 <lv_obj_create+0x28c>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  40608c:	214c      	movs	r1, #76	; 0x4c
  40608e:	4620      	mov	r0, r4
  406090:	4b45      	ldr	r3, [pc, #276]	; (4061a8 <lv_obj_create+0x414>)
  406092:	4798      	blx	r3
        new_obj->parent = parent;
  406094:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  406096:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  40609a:	f36f 1346 	bfc	r3, #5, #2
  40609e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  4060a2:	4b42      	ldr	r3, [pc, #264]	; (4061ac <lv_obj_create+0x418>)
  4060a4:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  4060a6:	4b42      	ldr	r3, [pc, #264]	; (4061b0 <lv_obj_create+0x41c>)
  4060a8:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  4060aa:	2000      	movs	r0, #0
  4060ac:	61a0      	str	r0, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
  4060ae:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  4060b2:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  4060b4:	8a77      	ldrh	r7, [r6, #18]
  4060b6:	4b3f      	ldr	r3, [pc, #252]	; (4061b4 <lv_obj_create+0x420>)
  4060b8:	4798      	blx	r3
  4060ba:	2332      	movs	r3, #50	; 0x32
  4060bc:	fb03 f300 	mul.w	r3, r3, r0
  4060c0:	3350      	adds	r3, #80	; 0x50
  4060c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4060c6:	da2c      	bge.n	406122 <lv_obj_create+0x38e>
  4060c8:	2301      	movs	r3, #1
  4060ca:	443b      	add	r3, r7
  4060cc:	82e3      	strh	r3, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
  4060ce:	4620      	mov	r0, r4
  4060d0:	4b39      	ldr	r3, [pc, #228]	; (4061b8 <lv_obj_create+0x424>)
  4060d2:	4798      	blx	r3
  4060d4:	2801      	cmp	r0, #1
  4060d6:	d033      	beq.n	406140 <lv_obj_create+0x3ac>
            new_obj->coords.x1    = parent->coords.x1;
  4060d8:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  4060dc:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  4060de:	8a37      	ldrh	r7, [r6, #16]
  4060e0:	2000      	movs	r0, #0
  4060e2:	4b34      	ldr	r3, [pc, #208]	; (4061b4 <lv_obj_create+0x420>)
  4060e4:	4798      	blx	r3
  4060e6:	2364      	movs	r3, #100	; 0x64
  4060e8:	fb03 f300 	mul.w	r3, r3, r0
  4060ec:	3350      	adds	r3, #80	; 0x50
  4060ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4060f2:	db46      	blt.n	406182 <lv_obj_create+0x3ee>
  4060f4:	2000      	movs	r0, #0
  4060f6:	4b2f      	ldr	r3, [pc, #188]	; (4061b4 <lv_obj_create+0x420>)
  4060f8:	4798      	blx	r3
  4060fa:	2364      	movs	r3, #100	; 0x64
  4060fc:	fb03 f300 	mul.w	r3, r3, r0
  406100:	3350      	adds	r3, #80	; 0x50
  406102:	4a2e      	ldr	r2, [pc, #184]	; (4061bc <lv_obj_create+0x428>)
  406104:	fb82 1203 	smull	r1, r2, r2, r3
  406108:	17db      	asrs	r3, r3, #31
  40610a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  40610e:	b29b      	uxth	r3, r3
  406110:	443b      	add	r3, r7
  406112:	82a3      	strh	r3, [r4, #20]
  406114:	e67f      	b.n	405e16 <lv_obj_create+0x82>
        LV_ASSERT_MEM(new_obj);
  406116:	4622      	mov	r2, r4
  406118:	2300      	movs	r3, #0
  40611a:	4829      	ldr	r0, [pc, #164]	; (4061c0 <lv_obj_create+0x42c>)
  40611c:	4929      	ldr	r1, [pc, #164]	; (4061c4 <lv_obj_create+0x430>)
  40611e:	4788      	blx	r1
  406120:	e7fe      	b.n	406120 <lv_obj_create+0x38c>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  406122:	2000      	movs	r0, #0
  406124:	4b23      	ldr	r3, [pc, #140]	; (4061b4 <lv_obj_create+0x420>)
  406126:	4798      	blx	r3
  406128:	2332      	movs	r3, #50	; 0x32
  40612a:	fb03 f300 	mul.w	r3, r3, r0
  40612e:	3350      	adds	r3, #80	; 0x50
  406130:	4a22      	ldr	r2, [pc, #136]	; (4061bc <lv_obj_create+0x428>)
  406132:	fb82 1203 	smull	r1, r2, r2, r3
  406136:	17db      	asrs	r3, r3, #31
  406138:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  40613c:	b29b      	uxth	r3, r3
  40613e:	e7c4      	b.n	4060ca <lv_obj_create+0x336>
            new_obj->coords.x2    = parent->coords.x2;
  406140:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  406144:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
  406146:	8ab7      	ldrh	r7, [r6, #20]
  406148:	2000      	movs	r0, #0
  40614a:	4b1a      	ldr	r3, [pc, #104]	; (4061b4 <lv_obj_create+0x420>)
  40614c:	4798      	blx	r3
  40614e:	2364      	movs	r3, #100	; 0x64
  406150:	fb03 f300 	mul.w	r3, r3, r0
  406154:	3350      	adds	r3, #80	; 0x50
  406156:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  40615a:	db10      	blt.n	40617e <lv_obj_create+0x3ea>
  40615c:	2000      	movs	r0, #0
  40615e:	4b15      	ldr	r3, [pc, #84]	; (4061b4 <lv_obj_create+0x420>)
  406160:	4798      	blx	r3
  406162:	2364      	movs	r3, #100	; 0x64
  406164:	fb03 f300 	mul.w	r3, r3, r0
  406168:	3350      	adds	r3, #80	; 0x50
  40616a:	4a14      	ldr	r2, [pc, #80]	; (4061bc <lv_obj_create+0x428>)
  40616c:	fb82 1203 	smull	r1, r2, r2, r3
  406170:	17db      	asrs	r3, r3, #31
  406172:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  406176:	b29b      	uxth	r3, r3
  406178:	1afb      	subs	r3, r7, r3
  40617a:	8223      	strh	r3, [r4, #16]
  40617c:	e64b      	b.n	405e16 <lv_obj_create+0x82>
  40617e:	2301      	movs	r3, #1
  406180:	e7fa      	b.n	406178 <lv_obj_create+0x3e4>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  406182:	2301      	movs	r3, #1
  406184:	e7c4      	b.n	406110 <lv_obj_create+0x37c>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
  406186:	b126      	cbz	r6, 406192 <lv_obj_create+0x3fe>
  406188:	2102      	movs	r1, #2
  40618a:	4620      	mov	r0, r4
  40618c:	4b0e      	ldr	r3, [pc, #56]	; (4061c8 <lv_obj_create+0x434>)
  40618e:	4798      	blx	r3
  406190:	e73e      	b.n	406010 <lv_obj_create+0x27c>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
  406192:	2101      	movs	r1, #1
  406194:	4620      	mov	r0, r4
  406196:	4b0c      	ldr	r3, [pc, #48]	; (4061c8 <lv_obj_create+0x434>)
  406198:	4798      	blx	r3
  40619a:	e741      	b.n	406020 <lv_obj_create+0x28c>
            return NULL;
  40619c:	4634      	mov	r4, r6
  40619e:	e73f      	b.n	406020 <lv_obj_create+0x28c>
  4061a0:	00415355 	.word	0x00415355
  4061a4:	004150ef 	.word	0x004150ef
  4061a8:	00415ead 	.word	0x00415ead
  4061ac:	004088e5 	.word	0x004088e5
  4061b0:	004078a1 	.word	0x004078a1
  4061b4:	004140fd 	.word	0x004140fd
  4061b8:	00405d6d 	.word	0x00405d6d
  4061bc:	66666667 	.word	0x66666667
  4061c0:	00425a60 	.word	0x00425a60
  4061c4:	004150f9 	.word	0x004150f9
  4061c8:	00417431 	.word	0x00417431

004061cc <lv_obj_set_size>:
{
  4061cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4061d0:	b082      	sub	sp, #8
  4061d2:	4604      	mov	r4, r0
  4061d4:	460d      	mov	r5, r1
  4061d6:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4061d8:	4b2e      	ldr	r3, [pc, #184]	; (406294 <lv_obj_set_size+0xc8>)
  4061da:	4798      	blx	r3
  4061dc:	b928      	cbnz	r0, 4061ea <lv_obj_set_size+0x1e>
  4061de:	4622      	mov	r2, r4
  4061e0:	2300      	movs	r3, #0
  4061e2:	482d      	ldr	r0, [pc, #180]	; (406298 <lv_obj_set_size+0xcc>)
  4061e4:	492d      	ldr	r1, [pc, #180]	; (40629c <lv_obj_set_size+0xd0>)
  4061e6:	4788      	blx	r1
  4061e8:	e7fe      	b.n	4061e8 <lv_obj_set_size+0x1c>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  4061ea:	4620      	mov	r0, r4
  4061ec:	4b2c      	ldr	r3, [pc, #176]	; (4062a0 <lv_obj_set_size+0xd4>)
  4061ee:	4798      	blx	r3
  4061f0:	42a8      	cmp	r0, r5
  4061f2:	d03f      	beq.n	406274 <lv_obj_set_size+0xa8>
    lv_obj_invalidate(obj);
  4061f4:	4620      	mov	r0, r4
  4061f6:	4b2b      	ldr	r3, [pc, #172]	; (4062a4 <lv_obj_set_size+0xd8>)
  4061f8:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  4061fa:	4669      	mov	r1, sp
  4061fc:	4620      	mov	r0, r4
  4061fe:	4b2a      	ldr	r3, [pc, #168]	; (4062a8 <lv_obj_set_size+0xdc>)
  406200:	4798      	blx	r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
  406202:	1e73      	subs	r3, r6, #1
  406204:	8a62      	ldrh	r2, [r4, #18]
  406206:	4413      	add	r3, r2
  406208:	82e3      	strh	r3, [r4, #22]
    if(lv_obj_get_base_dir(obj) == LV_BIDI_DIR_RTL) {
  40620a:	4620      	mov	r0, r4
  40620c:	4b27      	ldr	r3, [pc, #156]	; (4062ac <lv_obj_set_size+0xe0>)
  40620e:	4798      	blx	r3
  406210:	2801      	cmp	r0, #1
  406212:	d035      	beq.n	406280 <lv_obj_set_size+0xb4>
        obj->coords.x2 = obj->coords.x1 + w - 1;
  406214:	1e6b      	subs	r3, r5, #1
  406216:	8a22      	ldrh	r2, [r4, #16]
  406218:	4413      	add	r3, r2
  40621a:	82a3      	strh	r3, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  40621c:	69e3      	ldr	r3, [r4, #28]
  40621e:	466a      	mov	r2, sp
  406220:	2102      	movs	r1, #2
  406222:	4620      	mov	r0, r4
  406224:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  406226:	4620      	mov	r0, r4
  406228:	4b21      	ldr	r3, [pc, #132]	; (4062b0 <lv_obj_set_size+0xe4>)
  40622a:	4798      	blx	r3
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  40622c:	b118      	cbz	r0, 406236 <lv_obj_set_size+0x6a>
  40622e:	69c5      	ldr	r5, [r0, #28]
  406230:	4622      	mov	r2, r4
  406232:	2101      	movs	r1, #1
  406234:	47a8      	blx	r5
    _LV_LL_READ(obj->child_ll, i) {
  406236:	1d26      	adds	r6, r4, #4
  406238:	4630      	mov	r0, r6
  40623a:	4b1e      	ldr	r3, [pc, #120]	; (4062b4 <lv_obj_set_size+0xe8>)
  40623c:	4798      	blx	r3
  40623e:	4605      	mov	r5, r0
  406240:	b168      	cbz	r0, 40625e <lv_obj_set_size+0x92>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
  406242:	f04f 0803 	mov.w	r8, #3
    _LV_LL_READ(obj->child_ll, i) {
  406246:	4f1c      	ldr	r7, [pc, #112]	; (4062b8 <lv_obj_set_size+0xec>)
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
  406248:	69eb      	ldr	r3, [r5, #28]
  40624a:	466a      	mov	r2, sp
  40624c:	4641      	mov	r1, r8
  40624e:	4628      	mov	r0, r5
  406250:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
  406252:	4629      	mov	r1, r5
  406254:	4630      	mov	r0, r6
  406256:	47b8      	blx	r7
  406258:	4605      	mov	r5, r0
  40625a:	2800      	cmp	r0, #0
  40625c:	d1f4      	bne.n	406248 <lv_obj_set_size+0x7c>
    lv_obj_invalidate(obj);
  40625e:	4620      	mov	r0, r4
  406260:	4b10      	ldr	r3, [pc, #64]	; (4062a4 <lv_obj_set_size+0xd8>)
  406262:	4798      	blx	r3
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  406264:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406268:	f013 0f01 	tst.w	r3, #1
  40626c:	d10e      	bne.n	40628c <lv_obj_set_size+0xc0>
}
  40626e:	b002      	add	sp, #8
  406270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  406274:	4620      	mov	r0, r4
  406276:	4b11      	ldr	r3, [pc, #68]	; (4062bc <lv_obj_set_size+0xf0>)
  406278:	4798      	blx	r3
  40627a:	42b0      	cmp	r0, r6
  40627c:	d1ba      	bne.n	4061f4 <lv_obj_set_size+0x28>
  40627e:	e7f6      	b.n	40626e <lv_obj_set_size+0xa2>
        obj->coords.x1 = obj->coords.x2 - w + 1;
  406280:	f1c5 0301 	rsb	r3, r5, #1
  406284:	8aa2      	ldrh	r2, [r4, #20]
  406286:	4413      	add	r3, r2
  406288:	8223      	strh	r3, [r4, #16]
  40628a:	e7c7      	b.n	40621c <lv_obj_set_size+0x50>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  40628c:	4620      	mov	r0, r4
  40628e:	4b0c      	ldr	r3, [pc, #48]	; (4062c0 <lv_obj_set_size+0xf4>)
  406290:	4798      	blx	r3
  406292:	e7ec      	b.n	40626e <lv_obj_set_size+0xa2>
  406294:	004150ef 	.word	0x004150ef
  406298:	00425a74 	.word	0x00425a74
  40629c:	004150f9 	.word	0x004150f9
  4062a0:	0040518d 	.word	0x0040518d
  4062a4:	00405565 	.word	0x00405565
  4062a8:	004050d1 	.word	0x004050d1
  4062ac:	00405d6d 	.word	0x00405d6d
  4062b0:	00404fa5 	.word	0x00404fa5
  4062b4:	004153ed 	.word	0x004153ed
  4062b8:	00415401 	.word	0x00415401
  4062bc:	004051bd 	.word	0x004051bd
  4062c0:	00405c0d 	.word	0x00405c0d

004062c4 <lv_obj_set_width>:
{
  4062c4:	b538      	push	{r3, r4, r5, lr}
  4062c6:	4604      	mov	r4, r0
  4062c8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4062ca:	4b09      	ldr	r3, [pc, #36]	; (4062f0 <lv_obj_set_width+0x2c>)
  4062cc:	4798      	blx	r3
  4062ce:	b928      	cbnz	r0, 4062dc <lv_obj_set_width+0x18>
  4062d0:	4622      	mov	r2, r4
  4062d2:	2300      	movs	r3, #0
  4062d4:	4807      	ldr	r0, [pc, #28]	; (4062f4 <lv_obj_set_width+0x30>)
  4062d6:	4908      	ldr	r1, [pc, #32]	; (4062f8 <lv_obj_set_width+0x34>)
  4062d8:	4788      	blx	r1
  4062da:	e7fe      	b.n	4062da <lv_obj_set_width+0x16>
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
  4062dc:	4620      	mov	r0, r4
  4062de:	4b07      	ldr	r3, [pc, #28]	; (4062fc <lv_obj_set_width+0x38>)
  4062e0:	4798      	blx	r3
  4062e2:	4602      	mov	r2, r0
  4062e4:	4629      	mov	r1, r5
  4062e6:	4620      	mov	r0, r4
  4062e8:	4b05      	ldr	r3, [pc, #20]	; (406300 <lv_obj_set_width+0x3c>)
  4062ea:	4798      	blx	r3
  4062ec:	bd38      	pop	{r3, r4, r5, pc}
  4062ee:	bf00      	nop
  4062f0:	004150ef 	.word	0x004150ef
  4062f4:	00425a74 	.word	0x00425a74
  4062f8:	004150f9 	.word	0x004150f9
  4062fc:	004051bd 	.word	0x004051bd
  406300:	004061cd 	.word	0x004061cd

00406304 <lv_obj_set_height>:
{
  406304:	b538      	push	{r3, r4, r5, lr}
  406306:	4604      	mov	r4, r0
  406308:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40630a:	4b09      	ldr	r3, [pc, #36]	; (406330 <lv_obj_set_height+0x2c>)
  40630c:	4798      	blx	r3
  40630e:	b928      	cbnz	r0, 40631c <lv_obj_set_height+0x18>
  406310:	4622      	mov	r2, r4
  406312:	2300      	movs	r3, #0
  406314:	4807      	ldr	r0, [pc, #28]	; (406334 <lv_obj_set_height+0x30>)
  406316:	4908      	ldr	r1, [pc, #32]	; (406338 <lv_obj_set_height+0x34>)
  406318:	4788      	blx	r1
  40631a:	e7fe      	b.n	40631a <lv_obj_set_height+0x16>
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
  40631c:	4620      	mov	r0, r4
  40631e:	4b07      	ldr	r3, [pc, #28]	; (40633c <lv_obj_set_height+0x38>)
  406320:	4798      	blx	r3
  406322:	462a      	mov	r2, r5
  406324:	4601      	mov	r1, r0
  406326:	4620      	mov	r0, r4
  406328:	4b05      	ldr	r3, [pc, #20]	; (406340 <lv_obj_set_height+0x3c>)
  40632a:	4798      	blx	r3
  40632c:	bd38      	pop	{r3, r4, r5, pc}
  40632e:	bf00      	nop
  406330:	004150ef 	.word	0x004150ef
  406334:	00425a74 	.word	0x00425a74
  406338:	004150f9 	.word	0x004150f9
  40633c:	0040518d 	.word	0x0040518d
  406340:	004061cd 	.word	0x004061cd

00406344 <lv_obj_is_protected>:
{
  406344:	b538      	push	{r3, r4, r5, lr}
  406346:	4604      	mov	r4, r0
  406348:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40634a:	4b08      	ldr	r3, [pc, #32]	; (40636c <lv_obj_is_protected+0x28>)
  40634c:	4798      	blx	r3
  40634e:	b130      	cbz	r0, 40635e <lv_obj_is_protected+0x1a>
    return (obj->protect & prot) == 0 ? false : true;
  406350:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  406354:	421d      	tst	r5, r3
}
  406356:	bf14      	ite	ne
  406358:	2001      	movne	r0, #1
  40635a:	2000      	moveq	r0, #0
  40635c:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40635e:	4622      	mov	r2, r4
  406360:	2300      	movs	r3, #0
  406362:	4803      	ldr	r0, [pc, #12]	; (406370 <lv_obj_is_protected+0x2c>)
  406364:	4903      	ldr	r1, [pc, #12]	; (406374 <lv_obj_is_protected+0x30>)
  406366:	4788      	blx	r1
  406368:	e7fe      	b.n	406368 <lv_obj_is_protected+0x24>
  40636a:	bf00      	nop
  40636c:	004150ef 	.word	0x004150ef
  406370:	00425a74 	.word	0x00425a74
  406374:	004150f9 	.word	0x004150f9

00406378 <lv_obj_get_state>:
{
  406378:	b530      	push	{r4, r5, lr}
  40637a:	b083      	sub	sp, #12
  40637c:	4604      	mov	r4, r0
  40637e:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406380:	4b0d      	ldr	r3, [pc, #52]	; (4063b8 <lv_obj_get_state+0x40>)
  406382:	4798      	blx	r3
  406384:	b128      	cbz	r0, 406392 <lv_obj_get_state+0x1a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
  406386:	2d3f      	cmp	r5, #63	; 0x3f
  406388:	d809      	bhi.n	40639e <lv_obj_get_state+0x26>
  40638a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
  40638e:	b003      	add	sp, #12
  406390:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406392:	4622      	mov	r2, r4
  406394:	2300      	movs	r3, #0
  406396:	4809      	ldr	r0, [pc, #36]	; (4063bc <lv_obj_get_state+0x44>)
  406398:	4909      	ldr	r1, [pc, #36]	; (4063c0 <lv_obj_get_state+0x48>)
  40639a:	4788      	blx	r1
  40639c:	e7fe      	b.n	40639c <lv_obj_get_state+0x24>
    info.part = part;
  40639e:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
  4063a2:	2300      	movs	r3, #0
  4063a4:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
  4063a8:	aa01      	add	r2, sp, #4
  4063aa:	2109      	movs	r1, #9
  4063ac:	4620      	mov	r0, r4
  4063ae:	4b05      	ldr	r3, [pc, #20]	; (4063c4 <lv_obj_get_state+0x4c>)
  4063b0:	4798      	blx	r3
    return info.result;
  4063b2:	f89d 0005 	ldrb.w	r0, [sp, #5]
  4063b6:	e7ea      	b.n	40638e <lv_obj_get_state+0x16>
  4063b8:	004150ef 	.word	0x004150ef
  4063bc:	00425a74 	.word	0x00425a74
  4063c0:	004150f9 	.word	0x004150f9
  4063c4:	00404efd 	.word	0x00404efd

004063c8 <_lv_obj_get_style_color>:
{
  4063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063cc:	b085      	sub	sp, #20
  4063ce:	4617      	mov	r7, r2
    while(parent) {
  4063d0:	b348      	cbz	r0, 406426 <_lv_obj_get_style_color+0x5e>
  4063d2:	460d      	mov	r5, r1
  4063d4:	ea4f 2b12 	mov.w	fp, r2, lsr #8
  4063d8:	4606      	mov	r6, r0
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  4063da:	f8df a070 	ldr.w	sl, [pc, #112]	; 40644c <_lv_obj_get_style_color+0x84>
        lv_state_t state = lv_obj_get_state(parent, part);
  4063de:	f8df 9070 	ldr.w	r9, [pc, #112]	; 406450 <_lv_obj_get_style_color+0x88>
        res = _lv_style_list_get_color(list, prop, &value_act);
  4063e2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 406454 <_lv_obj_get_style_color+0x8c>
  4063e6:	e004      	b.n	4063f2 <_lv_obj_get_style_color+0x2a>
        if(res == LV_RES_OK) return value_act;
  4063e8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  4063ec:	e023      	b.n	406436 <_lv_obj_get_style_color+0x6e>
  4063ee:	2500      	movs	r5, #0
    while(parent) {
  4063f0:	b1d6      	cbz	r6, 406428 <_lv_obj_get_style_color+0x60>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  4063f2:	4629      	mov	r1, r5
  4063f4:	4630      	mov	r0, r6
  4063f6:	47d0      	blx	sl
  4063f8:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
  4063fa:	4629      	mov	r1, r5
  4063fc:	4630      	mov	r0, r6
  4063fe:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406400:	eb07 2000 	add.w	r0, r7, r0, lsl #8
  406404:	b284      	uxth	r4, r0
        res = _lv_style_list_get_color(list, prop, &value_act);
  406406:	aa03      	add	r2, sp, #12
  406408:	4621      	mov	r1, r4
  40640a:	9801      	ldr	r0, [sp, #4]
  40640c:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
  40640e:	2801      	cmp	r0, #1
  406410:	d0ea      	beq.n	4063e8 <_lv_obj_get_style_color+0x20>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406412:	f01b 0f80 	tst.w	fp, #128	; 0x80
  406416:	d007      	beq.n	406428 <_lv_obj_get_style_color+0x60>
        if(part != LV_OBJ_PART_MAIN) {
  406418:	2d00      	cmp	r5, #0
  40641a:	d1e8      	bne.n	4063ee <_lv_obj_get_style_color+0x26>
        parent = lv_obj_get_parent(parent);
  40641c:	4630      	mov	r0, r6
  40641e:	4b09      	ldr	r3, [pc, #36]	; (406444 <_lv_obj_get_style_color+0x7c>)
  406420:	4798      	blx	r3
  406422:	4606      	mov	r6, r0
  406424:	e7e3      	b.n	4063ee <_lv_obj_get_style_color+0x26>
    while(parent) {
  406426:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
  406428:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
  40642c:	3c29      	subs	r4, #41	; 0x29
  40642e:	2c01      	cmp	r4, #1
  406430:	d904      	bls.n	40643c <_lv_obj_get_style_color+0x74>
    return LV_COLOR_BLACK;
  406432:	f04f 0000 	mov.w	r0, #0
}
  406436:	b005      	add	sp, #20
  406438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_COLOR_WHITE;
  40643c:	4b02      	ldr	r3, [pc, #8]	; (406448 <_lv_obj_get_style_color+0x80>)
  40643e:	8818      	ldrh	r0, [r3, #0]
  406440:	e7f9      	b.n	406436 <_lv_obj_get_style_color+0x6e>
  406442:	bf00      	nop
  406444:	00404fa5 	.word	0x00404fa5
  406448:	00425a70 	.word	0x00425a70
  40644c:	00405219 	.word	0x00405219
  406450:	00406379 	.word	0x00406379
  406454:	0040a5ad 	.word	0x0040a5ad

00406458 <_lv_obj_get_style_opa>:
{
  406458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40645c:	b083      	sub	sp, #12
  40645e:	4690      	mov	r8, r2
    while(parent) {
  406460:	2800      	cmp	r0, #0
  406462:	d057      	beq.n	406514 <_lv_obj_get_style_opa+0xbc>
  406464:	460e      	mov	r6, r1
  406466:	ea4f 2b12 	mov.w	fp, r2, lsr #8
  40646a:	4607      	mov	r7, r0
  40646c:	4614      	mov	r4, r2
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  40646e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 406548 <_lv_obj_get_style_opa+0xf0>
        lv_state_t state = lv_obj_get_state(parent, part);
  406472:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 40654c <_lv_obj_get_style_opa+0xf4>
  406476:	e01f      	b.n	4064b8 <_lv_obj_get_style_opa+0x60>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406478:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  40647c:	4631      	mov	r1, r6
  40647e:	4638      	mov	r0, r7
  406480:	4b2e      	ldr	r3, [pc, #184]	; (40653c <_lv_obj_get_style_opa+0xe4>)
  406482:	4798      	blx	r3
  406484:	e027      	b.n	4064d6 <_lv_obj_get_style_opa+0x7e>
                    if(list->opa_scale_cover) def = true;
  406486:	796b      	ldrb	r3, [r5, #5]
  406488:	f3c3 1340 	ubfx	r3, r3, #5, #1
            if(def) {
  40648c:	2b00      	cmp	r3, #0
  40648e:	d142      	bne.n	406516 <_lv_obj_get_style_opa+0xbe>
        lv_state_t state = lv_obj_get_state(parent, part);
  406490:	4631      	mov	r1, r6
  406492:	4638      	mov	r0, r7
  406494:	47d0      	blx	sl
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406496:	eb08 2000 	add.w	r0, r8, r0, lsl #8
  40649a:	b284      	uxth	r4, r0
        res = _lv_style_list_get_opa(list, prop, &value_act);
  40649c:	f10d 0207 	add.w	r2, sp, #7
  4064a0:	4621      	mov	r1, r4
  4064a2:	4628      	mov	r0, r5
  4064a4:	4b26      	ldr	r3, [pc, #152]	; (406540 <_lv_obj_get_style_opa+0xe8>)
  4064a6:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  4064a8:	2801      	cmp	r0, #1
  4064aa:	d02b      	beq.n	406504 <_lv_obj_get_style_opa+0xac>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  4064ac:	f01b 0f80 	tst.w	fp, #128	; 0x80
  4064b0:	d031      	beq.n	406516 <_lv_obj_get_style_opa+0xbe>
        if(part != LV_OBJ_PART_MAIN) {
  4064b2:	b356      	cbz	r6, 40650a <_lv_obj_get_style_opa+0xb2>
  4064b4:	2600      	movs	r6, #0
    while(parent) {
  4064b6:	b377      	cbz	r7, 406516 <_lv_obj_get_style_opa+0xbe>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  4064b8:	4631      	mov	r1, r6
  4064ba:	4638      	mov	r0, r7
  4064bc:	47c8      	blx	r9
  4064be:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  4064c0:	7943      	ldrb	r3, [r0, #5]
  4064c2:	f013 0f08 	tst.w	r3, #8
  4064c6:	d1e3      	bne.n	406490 <_lv_obj_get_style_opa+0x38>
  4064c8:	7902      	ldrb	r2, [r0, #4]
  4064ca:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  4064ce:	d0df      	beq.n	406490 <_lv_obj_get_style_opa+0x38>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  4064d0:	f013 0f04 	tst.w	r3, #4
  4064d4:	d0d0      	beq.n	406478 <_lv_obj_get_style_opa+0x20>
            switch(prop & (~LV_STYLE_STATE_MASK)) {
  4064d6:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  4064da:	f248 020c 	movw	r2, #32780	; 0x800c
  4064de:	4293      	cmp	r3, r2
  4064e0:	d0d1      	beq.n	406486 <_lv_obj_get_style_opa+0x2e>
  4064e2:	f248 02ad 	movw	r2, #32941	; 0x80ad
  4064e6:	4293      	cmp	r3, r2
  4064e8:	d008      	beq.n	4064fc <_lv_obj_get_style_opa+0xa4>
  4064ea:	2b2c      	cmp	r3, #44	; 0x2c
  4064ec:	d1d0      	bne.n	406490 <_lv_obj_get_style_opa+0x38>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  4064ee:	79ab      	ldrb	r3, [r5, #6]
  4064f0:	f013 0f10 	tst.w	r3, #16
  4064f4:	d11c      	bne.n	406530 <_lv_obj_get_style_opa+0xd8>
                    if(list->bg_opa_transp) def = true;
  4064f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  4064fa:	e7c7      	b.n	40648c <_lv_obj_get_style_opa+0x34>
                    if(list->img_recolor_opa_transp) def = true;
  4064fc:	79eb      	ldrb	r3, [r5, #7]
  4064fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
  406502:	e7c3      	b.n	40648c <_lv_obj_get_style_opa+0x34>
        if(res == LV_RES_OK) return value_act;
  406504:	f89d 0007 	ldrb.w	r0, [sp, #7]
  406508:	e013      	b.n	406532 <_lv_obj_get_style_opa+0xda>
        parent = lv_obj_get_parent(parent);
  40650a:	4638      	mov	r0, r7
  40650c:	4b0d      	ldr	r3, [pc, #52]	; (406544 <_lv_obj_get_style_opa+0xec>)
  40650e:	4798      	blx	r3
  406510:	4607      	mov	r7, r0
  406512:	e7cf      	b.n	4064b4 <_lv_obj_get_style_opa+0x5c>
    while(parent) {
  406514:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
  406516:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
  40651a:	b2a4      	uxth	r4, r4
  40651c:	2c6d      	cmp	r4, #109	; 0x6d
  40651e:	d00b      	beq.n	406538 <_lv_obj_get_style_opa+0xe0>
  406520:	f248 03ad 	movw	r3, #32941	; 0x80ad
  406524:	429c      	cmp	r4, r3
  406526:	d007      	beq.n	406538 <_lv_obj_get_style_opa+0xe0>
  406528:	2c2c      	cmp	r4, #44	; 0x2c
  40652a:	d005      	beq.n	406538 <_lv_obj_get_style_opa+0xe0>
    return LV_OPA_COVER;
  40652c:	20ff      	movs	r0, #255	; 0xff
  40652e:	e000      	b.n	406532 <_lv_obj_get_style_opa+0xda>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  406530:	20ff      	movs	r0, #255	; 0xff
}
  406532:	b003      	add	sp, #12
  406534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_OPA_TRANSP;
  406538:	2000      	movs	r0, #0
  40653a:	e7fa      	b.n	406532 <_lv_obj_get_style_opa+0xda>
  40653c:	00406551 	.word	0x00406551
  406540:	0040a685 	.word	0x0040a685
  406544:	00404fa5 	.word	0x00404fa5
  406548:	00405219 	.word	0x00405219
  40654c:	00406379 	.word	0x00406379

00406550 <update_style_cache>:
 * @param obj pointer to an object
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
  406550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406554:	4605      	mov	r5, r0
  406556:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
  406558:	4610      	mov	r0, r2
  40655a:	4bae      	ldr	r3, [pc, #696]	; (406814 <update_style_cache+0x2c4>)
  40655c:	4798      	blx	r3
  40655e:	b908      	cbnz	r0, 406564 <update_style_cache+0x14>
  406560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406564:	4631      	mov	r1, r6
  406566:	4628      	mov	r0, r5
  406568:	4bab      	ldr	r3, [pc, #684]	; (406818 <update_style_cache+0x2c8>)
  40656a:	4798      	blx	r3
  40656c:	4604      	mov	r4, r0

    bool ignore_cache_ori = list->ignore_cache;
  40656e:	7943      	ldrb	r3, [r0, #5]
  406570:	f3c3 08c0 	ubfx	r8, r3, #3, #1
    list->ignore_cache = 1;
  406574:	f043 0308 	orr.w	r3, r3, #8
  406578:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  40657a:	f248 020c 	movw	r2, #32780	; 0x800c
  40657e:	4631      	mov	r1, r6
  406580:	4628      	mov	r0, r5
  406582:	4ba6      	ldr	r3, [pc, #664]	; (40681c <update_style_cache+0x2cc>)
  406584:	4798      	blx	r3

#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  406586:	28ff      	cmp	r0, #255	; 0xff
  406588:	bf14      	ite	ne
  40658a:	2000      	movne	r0, #0
  40658c:	2001      	moveq	r0, #1
  40658e:	7963      	ldrb	r3, [r4, #5]
  406590:	f360 1345 	bfi	r3, r0, #5, #1
  406594:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  406596:	f248 0282 	movw	r2, #32898	; 0x8082
  40659a:	4631      	mov	r1, r6
  40659c:	4628      	mov	r0, r5
  40659e:	4fa0      	ldr	r7, [pc, #640]	; (406820 <update_style_cache+0x2d0>)
  4065a0:	47b8      	blx	r7
#else
    list->opa_scale_cover    = 1;
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  4065a2:	b2c0      	uxtb	r0, r0
  4065a4:	fab0 f080 	clz	r0, r0
  4065a8:	0940      	lsrs	r0, r0, #5
  4065aa:	79e3      	ldrb	r3, [r4, #7]
  4065ac:	f360 1386 	bfi	r3, r0, #6, #1
  4065b0:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4065b2:	f248 028e 	movw	r2, #32910	; 0x808e
  4065b6:	4631      	mov	r1, r6
  4065b8:	4628      	mov	r0, r5
  4065ba:	4b9a      	ldr	r3, [pc, #616]	; (406824 <update_style_cache+0x2d4>)
  4065bc:	4798      	blx	r3
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
  4065be:	4b9a      	ldr	r3, [pc, #616]	; (406828 <update_style_cache+0x2d8>)
  4065c0:	4283      	cmp	r3, r0
  4065c2:	bf14      	ite	ne
  4065c4:	2000      	movne	r0, #0
  4065c6:	2001      	moveq	r0, #1
  4065c8:	79e3      	ldrb	r3, [r4, #7]
  4065ca:	f360 13c7 	bfi	r3, r0, #7, #1

    list->text_space_zero = 1;
  4065ce:	f043 0320 	orr.w	r3, r3, #32
  4065d2:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  4065d4:	f248 0280 	movw	r2, #32896	; 0x8080
  4065d8:	4631      	mov	r1, r6
  4065da:	4628      	mov	r0, r5
  4065dc:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  4065de:	2800      	cmp	r0, #0
  4065e0:	f000 80ce 	beq.w	406780 <update_style_cache+0x230>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
        list->text_space_zero = 0;
  4065e4:	79e3      	ldrb	r3, [r4, #7]
  4065e6:	f36f 1345 	bfc	r3, #5, #1
  4065ea:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4065ec:	222c      	movs	r2, #44	; 0x2c
  4065ee:	4631      	mov	r1, r6
  4065f0:	4628      	mov	r0, r5
  4065f2:	f8df 9228 	ldr.w	r9, [pc, #552]	; 40681c <update_style_cache+0x2cc>
  4065f6:	47c8      	blx	r9
    }

    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
  4065f8:	fab0 f280 	clz	r2, r0
  4065fc:	0952      	lsrs	r2, r2, #5
  4065fe:	79a3      	ldrb	r3, [r4, #6]
  406600:	f362 03c3 	bfi	r3, r2, #3, #1
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
  406604:	28ff      	cmp	r0, #255	; 0xff
  406606:	bf14      	ite	ne
  406608:	2000      	movne	r0, #0
  40660a:	2001      	moveq	r0, #1
  40660c:	f360 1304 	bfi	r3, r0, #4, #1
  406610:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  406612:	2230      	movs	r2, #48	; 0x30
  406614:	4631      	mov	r1, r6
  406616:	4628      	mov	r0, r5
  406618:	4f81      	ldr	r7, [pc, #516]	; (406820 <update_style_cache+0x2d0>)
  40661a:	47b8      	blx	r7

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
  40661c:	fab0 f080 	clz	r0, r0
  406620:	0940      	lsrs	r0, r0, #5
  406622:	79a3      	ldrb	r3, [r4, #6]
  406624:	f360 1345 	bfi	r3, r0, #5, #1
  406628:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  40662a:	2231      	movs	r2, #49	; 0x31
  40662c:	4631      	mov	r1, r6
  40662e:	4628      	mov	r0, r5
  406630:	47b8      	blx	r7
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
  406632:	b2c0      	uxtb	r0, r0
  406634:	280f      	cmp	r0, #15
  406636:	bf14      	ite	ne
  406638:	2000      	movne	r0, #0
  40663a:	2001      	moveq	r0, #1
  40663c:	79a3      	ldrb	r3, [r4, #6]
  40663e:	f360 1386 	bfi	r3, r0, #6, #1
  406642:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  406644:	2233      	movs	r2, #51	; 0x33
  406646:	4631      	mov	r1, r6
  406648:	4628      	mov	r0, r5
  40664a:	47b8      	blx	r7
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
  40664c:	fab0 f080 	clz	r0, r0
  406650:	0940      	lsrs	r0, r0, #5
  406652:	79a3      	ldrb	r3, [r4, #6]
  406654:	f360 13c7 	bfi	r3, r0, #7, #1
  406658:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  40665a:	2202      	movs	r2, #2
  40665c:	4631      	mov	r1, r6
  40665e:	4628      	mov	r0, r5
  406660:	47b8      	blx	r7
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
  406662:	fab0 f080 	clz	r0, r0
  406666:	0940      	lsrs	r0, r0, #5
  406668:	7963      	ldrb	r3, [r4, #5]
  40666a:	f360 1386 	bfi	r3, r0, #6, #1
  40666e:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  406670:	f248 02ad 	movw	r2, #32941	; 0x80ad
  406674:	4631      	mov	r1, r6
  406676:	4628      	mov	r0, r5
  406678:	47c8      	blx	r9
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  40667a:	fab0 f080 	clz	r0, r0
  40667e:	0940      	lsrs	r0, r0, #5
  406680:	79e3      	ldrb	r3, [r4, #7]
  406682:	f360 1304 	bfi	r3, r0, #4, #1
  406686:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  406688:	2240      	movs	r2, #64	; 0x40
  40668a:	4631      	mov	r1, r6
  40668c:	4628      	mov	r0, r5
  40668e:	47b8      	blx	r7
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
  406690:	fab0 f080 	clz	r0, r0
  406694:	0940      	lsrs	r0, r0, #5
  406696:	79e3      	ldrb	r3, [r4, #7]
  406698:	f360 0300 	bfi	r3, r0, #0, #1
  40669c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  40669e:	226e      	movs	r2, #110	; 0x6e
  4066a0:	4631      	mov	r1, r6
  4066a2:	4628      	mov	r0, r5
  4066a4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 406824 <update_style_cache+0x2d4>
  4066a8:	47c8      	blx	r9
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
  4066aa:	fab0 f080 	clz	r0, r0
  4066ae:	0940      	lsrs	r0, r0, #5
  4066b0:	79e3      	ldrb	r3, [r4, #7]
  4066b2:	f360 0341 	bfi	r3, r0, #1, #1
  4066b6:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4066b8:	2201      	movs	r2, #1
  4066ba:	4631      	mov	r1, r6
  4066bc:	4628      	mov	r0, r5
  4066be:	47b8      	blx	r7
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
  4066c0:	fab0 f080 	clz	r0, r0
  4066c4:	0940      	lsrs	r0, r0, #5
  4066c6:	7963      	ldrb	r3, [r4, #5]
  4066c8:	f360 1304 	bfi	r3, r0, #4, #1
  4066cc:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  4066ce:	2250      	movs	r2, #80	; 0x50
  4066d0:	4631      	mov	r1, r6
  4066d2:	4628      	mov	r0, r5
  4066d4:	47b8      	blx	r7
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
  4066d6:	fab0 f080 	clz	r0, r0
  4066da:	0940      	lsrs	r0, r0, #5
  4066dc:	79e3      	ldrb	r3, [r4, #7]
  4066de:	f360 0382 	bfi	r3, r0, #2, #1
  4066e2:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  4066e4:	227f      	movs	r2, #127	; 0x7f
  4066e6:	4631      	mov	r1, r6
  4066e8:	4628      	mov	r0, r5
  4066ea:	47c8      	blx	r9
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
  4066ec:	fab0 f080 	clz	r0, r0
  4066f0:	0940      	lsrs	r0, r0, #5
  4066f2:	79e3      	ldrb	r3, [r4, #7]
  4066f4:	f360 03c3 	bfi	r3, r0, #3, #1
  4066f8:	71e3      	strb	r3, [r4, #7]

    list->transform_all_zero  = 1;
  4066fa:	7963      	ldrb	r3, [r4, #5]
  4066fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406700:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  406702:	2206      	movs	r2, #6
  406704:	4631      	mov	r1, r6
  406706:	4628      	mov	r0, r5
  406708:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  40670a:	2800      	cmp	r0, #0
  40670c:	d041      	beq.n	406792 <update_style_cache+0x242>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
       lv_obj_get_style_transform_height(obj, part) != 0 ||
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
        list->transform_all_zero  = 0;
  40670e:	7963      	ldrb	r3, [r4, #5]
  406710:	f36f 13c7 	bfc	r3, #7, #1
  406714:	7163      	strb	r3, [r4, #5]
    }

    list->pad_all_zero  = 1;
  406716:	79a3      	ldrb	r3, [r4, #6]
  406718:	f043 0301 	orr.w	r3, r3, #1
  40671c:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  40671e:	2210      	movs	r2, #16
  406720:	4631      	mov	r1, r6
  406722:	4628      	mov	r0, r5
  406724:	4b3e      	ldr	r3, [pc, #248]	; (406820 <update_style_cache+0x2d0>)
  406726:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  406728:	2800      	cmp	r0, #0
  40672a:	d046      	beq.n	4067ba <update_style_cache+0x26a>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
       lv_obj_get_style_pad_left(obj, part) != 0 ||
       lv_obj_get_style_pad_right(obj, part) != 0) {
        list->pad_all_zero  = 0;
  40672c:	79a3      	ldrb	r3, [r4, #6]
  40672e:	f36f 0300 	bfc	r3, #0, #1
  406732:	71a3      	strb	r3, [r4, #6]
    }

    list->margin_all_zero  = 1;
  406734:	79a3      	ldrb	r3, [r4, #6]
  406736:	f043 0302 	orr.w	r3, r3, #2
  40673a:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  40673c:	2215      	movs	r2, #21
  40673e:	4631      	mov	r1, r6
  406740:	4628      	mov	r0, r5
  406742:	4b37      	ldr	r3, [pc, #220]	; (406820 <update_style_cache+0x2d0>)
  406744:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  406746:	2800      	cmp	r0, #0
  406748:	d04d      	beq.n	4067e6 <update_style_cache+0x296>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
       lv_obj_get_style_margin_left(obj, part) != 0 ||
       lv_obj_get_style_margin_right(obj, part) != 0) {
        list->margin_all_zero  = 0;
  40674a:	79a3      	ldrb	r3, [r4, #6]
  40674c:	f36f 0341 	bfc	r3, #1, #1
  406750:	71a3      	strb	r3, [r4, #6]
    }

    list->blend_mode_all_normal = 1;
  406752:	79a3      	ldrb	r3, [r4, #6]
  406754:	f043 0304 	orr.w	r3, r3, #4
  406758:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  40675a:	2220      	movs	r2, #32
  40675c:	4631      	mov	r1, r6
  40675e:	4628      	mov	r0, r5
  406760:	4b2f      	ldr	r3, [pc, #188]	; (406820 <update_style_cache+0x2d0>)
  406762:	4798      	blx	r3
#if LV_USE_BLEND_MODES
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406764:	b2c0      	uxtb	r0, r0
  406766:	2800      	cmp	r0, #0
  406768:	d060      	beq.n	40682c <update_style_cache+0x2dc>
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
        list->blend_mode_all_normal = 0;
  40676a:	79a3      	ldrb	r3, [r4, #6]
  40676c:	f36f 0382 	bfc	r3, #2, #1
  406770:	71a3      	strb	r3, [r4, #6]
    }
#endif
    list->ignore_cache = ignore_cache_ori;
  406772:	7963      	ldrb	r3, [r4, #5]
  406774:	f368 03c3 	bfi	r3, r8, #3, #1
    list->valid_cache = 1;
  406778:	f043 0304 	orr.w	r3, r3, #4
  40677c:	7163      	strb	r3, [r4, #5]
  40677e:	e6ef      	b.n	406560 <update_style_cache+0x10>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  406780:	f248 0281 	movw	r2, #32897	; 0x8081
  406784:	4631      	mov	r1, r6
  406786:	4628      	mov	r0, r5
  406788:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  40678a:	2800      	cmp	r0, #0
  40678c:	f43f af2e 	beq.w	4065ec <update_style_cache+0x9c>
  406790:	e728      	b.n	4065e4 <update_style_cache+0x94>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  406792:	2204      	movs	r2, #4
  406794:	4631      	mov	r1, r6
  406796:	4628      	mov	r0, r5
  406798:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  40679a:	2800      	cmp	r0, #0
  40679c:	d1b7      	bne.n	40670e <update_style_cache+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40679e:	2205      	movs	r2, #5
  4067a0:	4631      	mov	r1, r6
  4067a2:	4628      	mov	r0, r5
  4067a4:	47b8      	blx	r7
       lv_obj_get_style_transform_width(obj, part) != 0 ||
  4067a6:	2800      	cmp	r0, #0
  4067a8:	d1b1      	bne.n	40670e <update_style_cache+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  4067aa:	2207      	movs	r2, #7
  4067ac:	4631      	mov	r1, r6
  4067ae:	4628      	mov	r0, r5
  4067b0:	47b8      	blx	r7
       lv_obj_get_style_transform_height(obj, part) != 0 ||
  4067b2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  4067b6:	d1aa      	bne.n	40670e <update_style_cache+0x1be>
  4067b8:	e7ad      	b.n	406716 <update_style_cache+0x1c6>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4067ba:	2211      	movs	r2, #17
  4067bc:	4631      	mov	r1, r6
  4067be:	4628      	mov	r0, r5
  4067c0:	4b17      	ldr	r3, [pc, #92]	; (406820 <update_style_cache+0x2d0>)
  4067c2:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  4067c4:	2800      	cmp	r0, #0
  4067c6:	d1b1      	bne.n	40672c <update_style_cache+0x1dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4067c8:	2212      	movs	r2, #18
  4067ca:	4631      	mov	r1, r6
  4067cc:	4628      	mov	r0, r5
  4067ce:	4b14      	ldr	r3, [pc, #80]	; (406820 <update_style_cache+0x2d0>)
  4067d0:	4798      	blx	r3
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
  4067d2:	2800      	cmp	r0, #0
  4067d4:	d1aa      	bne.n	40672c <update_style_cache+0x1dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4067d6:	2213      	movs	r2, #19
  4067d8:	4631      	mov	r1, r6
  4067da:	4628      	mov	r0, r5
  4067dc:	4b10      	ldr	r3, [pc, #64]	; (406820 <update_style_cache+0x2d0>)
  4067de:	4798      	blx	r3
       lv_obj_get_style_pad_left(obj, part) != 0 ||
  4067e0:	2800      	cmp	r0, #0
  4067e2:	d0a7      	beq.n	406734 <update_style_cache+0x1e4>
  4067e4:	e7a2      	b.n	40672c <update_style_cache+0x1dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  4067e6:	2216      	movs	r2, #22
  4067e8:	4631      	mov	r1, r6
  4067ea:	4628      	mov	r0, r5
  4067ec:	4b0c      	ldr	r3, [pc, #48]	; (406820 <update_style_cache+0x2d0>)
  4067ee:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  4067f0:	2800      	cmp	r0, #0
  4067f2:	d1aa      	bne.n	40674a <update_style_cache+0x1fa>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  4067f4:	2217      	movs	r2, #23
  4067f6:	4631      	mov	r1, r6
  4067f8:	4628      	mov	r0, r5
  4067fa:	4b09      	ldr	r3, [pc, #36]	; (406820 <update_style_cache+0x2d0>)
  4067fc:	4798      	blx	r3
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
  4067fe:	2800      	cmp	r0, #0
  406800:	d1a3      	bne.n	40674a <update_style_cache+0x1fa>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  406802:	2218      	movs	r2, #24
  406804:	4631      	mov	r1, r6
  406806:	4628      	mov	r0, r5
  406808:	4b05      	ldr	r3, [pc, #20]	; (406820 <update_style_cache+0x2d0>)
  40680a:	4798      	blx	r3
       lv_obj_get_style_margin_left(obj, part) != 0 ||
  40680c:	2800      	cmp	r0, #0
  40680e:	d0a0      	beq.n	406752 <update_style_cache+0x202>
  406810:	e79b      	b.n	40674a <update_style_cache+0x1fa>
  406812:	bf00      	nop
  406814:	00404b3d 	.word	0x00404b3d
  406818:	00405219 	.word	0x00405219
  40681c:	00406459 	.word	0x00406459
  406820:	004069b5 	.word	0x004069b5
  406824:	004068c1 	.word	0x004068c1
  406828:	2040002c 	.word	0x2040002c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  40682c:	2232      	movs	r2, #50	; 0x32
  40682e:	4631      	mov	r1, r6
  406830:	4628      	mov	r0, r5
  406832:	4b22      	ldr	r3, [pc, #136]	; (4068bc <update_style_cache+0x36c>)
  406834:	4798      	blx	r3
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406836:	b2c0      	uxtb	r0, r0
  406838:	2800      	cmp	r0, #0
  40683a:	d196      	bne.n	40676a <update_style_cache+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  40683c:	2260      	movs	r2, #96	; 0x60
  40683e:	4631      	mov	r1, r6
  406840:	4628      	mov	r0, r5
  406842:	4b1e      	ldr	r3, [pc, #120]	; (4068bc <update_style_cache+0x36c>)
  406844:	4798      	blx	r3
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406846:	b2c0      	uxtb	r0, r0
  406848:	2800      	cmp	r0, #0
  40684a:	d18e      	bne.n	40676a <update_style_cache+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  40684c:	2242      	movs	r2, #66	; 0x42
  40684e:	4631      	mov	r1, r6
  406850:	4628      	mov	r0, r5
  406852:	4b1a      	ldr	r3, [pc, #104]	; (4068bc <update_style_cache+0x36c>)
  406854:	4798      	blx	r3
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406856:	b2c0      	uxtb	r0, r0
  406858:	2800      	cmp	r0, #0
  40685a:	d186      	bne.n	40676a <update_style_cache+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  40685c:	2272      	movs	r2, #114	; 0x72
  40685e:	4631      	mov	r1, r6
  406860:	4628      	mov	r0, r5
  406862:	4b16      	ldr	r3, [pc, #88]	; (4068bc <update_style_cache+0x36c>)
  406864:	4798      	blx	r3
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406866:	b2c0      	uxtb	r0, r0
  406868:	2800      	cmp	r0, #0
  40686a:	f47f af7e 	bne.w	40676a <update_style_cache+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  40686e:	f248 0283 	movw	r2, #32899	; 0x8083
  406872:	4631      	mov	r1, r6
  406874:	4628      	mov	r0, r5
  406876:	4b11      	ldr	r3, [pc, #68]	; (4068bc <update_style_cache+0x36c>)
  406878:	4798      	blx	r3
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  40687a:	b2c0      	uxtb	r0, r0
  40687c:	2800      	cmp	r0, #0
  40687e:	f47f af74 	bne.w	40676a <update_style_cache+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  406882:	2291      	movs	r2, #145	; 0x91
  406884:	4631      	mov	r1, r6
  406886:	4628      	mov	r0, r5
  406888:	4b0c      	ldr	r3, [pc, #48]	; (4068bc <update_style_cache+0x36c>)
  40688a:	4798      	blx	r3
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  40688c:	b2c0      	uxtb	r0, r0
  40688e:	2800      	cmp	r0, #0
  406890:	f47f af6b 	bne.w	40676a <update_style_cache+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  406894:	f248 02a0 	movw	r2, #32928	; 0x80a0
  406898:	4631      	mov	r1, r6
  40689a:	4628      	mov	r0, r5
  40689c:	4b07      	ldr	r3, [pc, #28]	; (4068bc <update_style_cache+0x36c>)
  40689e:	4798      	blx	r3
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4068a0:	b2c0      	uxtb	r0, r0
  4068a2:	2800      	cmp	r0, #0
  4068a4:	f47f af61 	bne.w	40676a <update_style_cache+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  4068a8:	2254      	movs	r2, #84	; 0x54
  4068aa:	4631      	mov	r1, r6
  4068ac:	4628      	mov	r0, r5
  4068ae:	4b03      	ldr	r3, [pc, #12]	; (4068bc <update_style_cache+0x36c>)
  4068b0:	4798      	blx	r3
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4068b2:	b2c0      	uxtb	r0, r0
  4068b4:	2800      	cmp	r0, #0
  4068b6:	f43f af5c 	beq.w	406772 <update_style_cache+0x222>
  4068ba:	e756      	b.n	40676a <update_style_cache+0x21a>
  4068bc:	004069b5 	.word	0x004069b5

004068c0 <_lv_obj_get_style_ptr>:
{
  4068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4068c4:	b083      	sub	sp, #12
  4068c6:	4690      	mov	r8, r2
    while(parent) {
  4068c8:	2800      	cmp	r0, #0
  4068ca:	d051      	beq.n	406970 <_lv_obj_get_style_ptr+0xb0>
  4068cc:	460d      	mov	r5, r1
  4068ce:	ea4f 2b12 	mov.w	fp, r2, lsr #8
  4068d2:	4607      	mov	r7, r0
  4068d4:	4614      	mov	r4, r2
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  4068d6:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 4069ac <_lv_obj_get_style_ptr+0xec>
        lv_state_t state = lv_obj_get_state(parent, part);
  4068da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 4069b0 <_lv_obj_get_style_ptr+0xf0>
  4068de:	e01e      	b.n	40691e <_lv_obj_get_style_ptr+0x5e>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  4068e0:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  4068e4:	4629      	mov	r1, r5
  4068e6:	4638      	mov	r0, r7
  4068e8:	4b2b      	ldr	r3, [pc, #172]	; (406998 <_lv_obj_get_style_ptr+0xd8>)
  4068ea:	4798      	blx	r3
  4068ec:	e026      	b.n	40693c <_lv_obj_get_style_ptr+0x7c>
                    if(list->value_txt_str) def = true;
  4068ee:	79f3      	ldrb	r3, [r6, #7]
  4068f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
            if(def) {
  4068f4:	2b00      	cmp	r3, #0
  4068f6:	d13c      	bne.n	406972 <_lv_obj_get_style_ptr+0xb2>
        lv_state_t state = lv_obj_get_state(parent, part);
  4068f8:	4629      	mov	r1, r5
  4068fa:	4638      	mov	r0, r7
  4068fc:	47d0      	blx	sl
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  4068fe:	eb08 2000 	add.w	r0, r8, r0, lsl #8
  406902:	b284      	uxth	r4, r0
        res = _lv_style_list_get_ptr(list, prop, &value_act);
  406904:	aa01      	add	r2, sp, #4
  406906:	4621      	mov	r1, r4
  406908:	4630      	mov	r0, r6
  40690a:	4b24      	ldr	r3, [pc, #144]	; (40699c <_lv_obj_get_style_ptr+0xdc>)
  40690c:	4798      	blx	r3
        if(res == LV_RES_OK)  return value_act;
  40690e:	2801      	cmp	r0, #1
  406910:	d025      	beq.n	40695e <_lv_obj_get_style_ptr+0x9e>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406912:	f01b 0f80 	tst.w	fp, #128	; 0x80
  406916:	d02c      	beq.n	406972 <_lv_obj_get_style_ptr+0xb2>
        if(part != LV_OBJ_PART_MAIN) {
  406918:	b32d      	cbz	r5, 406966 <_lv_obj_get_style_ptr+0xa6>
  40691a:	2500      	movs	r5, #0
    while(parent) {
  40691c:	b34f      	cbz	r7, 406972 <_lv_obj_get_style_ptr+0xb2>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  40691e:	4629      	mov	r1, r5
  406920:	4638      	mov	r0, r7
  406922:	47c8      	blx	r9
  406924:	4606      	mov	r6, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406926:	7943      	ldrb	r3, [r0, #5]
  406928:	f013 0f08 	tst.w	r3, #8
  40692c:	d1e4      	bne.n	4068f8 <_lv_obj_get_style_ptr+0x38>
  40692e:	7902      	ldrb	r2, [r0, #4]
  406930:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406934:	d0e0      	beq.n	4068f8 <_lv_obj_get_style_ptr+0x38>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406936:	f013 0f04 	tst.w	r3, #4
  40693a:	d0d1      	beq.n	4068e0 <_lv_obj_get_style_ptr+0x20>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  40693c:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  406940:	2b7f      	cmp	r3, #127	; 0x7f
  406942:	d0d4      	beq.n	4068ee <_lv_obj_get_style_ptr+0x2e>
  406944:	f248 028e 	movw	r2, #32910	; 0x808e
  406948:	4293      	cmp	r3, r2
  40694a:	d005      	beq.n	406958 <_lv_obj_get_style_ptr+0x98>
  40694c:	2b6e      	cmp	r3, #110	; 0x6e
  40694e:	d1d3      	bne.n	4068f8 <_lv_obj_get_style_ptr+0x38>
                    if(list->pattern_img_null) def = true;
  406950:	79f3      	ldrb	r3, [r6, #7]
  406952:	f3c3 0340 	ubfx	r3, r3, #1, #1
  406956:	e7cd      	b.n	4068f4 <_lv_obj_get_style_ptr+0x34>
                    if(list->text_font_normal) def = true;
  406958:	79f3      	ldrb	r3, [r6, #7]
  40695a:	09db      	lsrs	r3, r3, #7
  40695c:	e7ca      	b.n	4068f4 <_lv_obj_get_style_ptr+0x34>
        if(res == LV_RES_OK)  return value_act;
  40695e:	9801      	ldr	r0, [sp, #4]
}
  406960:	b003      	add	sp, #12
  406962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        parent = lv_obj_get_parent(parent);
  406966:	4638      	mov	r0, r7
  406968:	4b0d      	ldr	r3, [pc, #52]	; (4069a0 <_lv_obj_get_style_ptr+0xe0>)
  40696a:	4798      	blx	r3
  40696c:	4607      	mov	r7, r0
  40696e:	e7d4      	b.n	40691a <_lv_obj_get_style_ptr+0x5a>
    while(parent) {
  406970:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
  406972:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
  406976:	b2a4      	uxth	r4, r4
  406978:	2cbe      	cmp	r4, #190	; 0xbe
  40697a:	d00a      	beq.n	406992 <_lv_obj_get_style_ptr+0xd2>
  40697c:	f248 038e 	movw	r3, #32910	; 0x808e
  406980:	429c      	cmp	r4, r3
  406982:	d003      	beq.n	40698c <_lv_obj_get_style_ptr+0xcc>
  406984:	2c7e      	cmp	r4, #126	; 0x7e
  406986:	d001      	beq.n	40698c <_lv_obj_get_style_ptr+0xcc>
    return NULL;
  406988:	2000      	movs	r0, #0
  40698a:	e7e9      	b.n	406960 <_lv_obj_get_style_ptr+0xa0>
            return lv_theme_get_font_normal();
  40698c:	4b05      	ldr	r3, [pc, #20]	; (4069a4 <_lv_obj_get_style_ptr+0xe4>)
  40698e:	4798      	blx	r3
  406990:	e7e6      	b.n	406960 <_lv_obj_get_style_ptr+0xa0>
            return &lv_anim_path_def;
  406992:	4805      	ldr	r0, [pc, #20]	; (4069a8 <_lv_obj_get_style_ptr+0xe8>)
  406994:	e7e4      	b.n	406960 <_lv_obj_get_style_ptr+0xa0>
  406996:	bf00      	nop
  406998:	00406551 	.word	0x00406551
  40699c:	0040a75d 	.word	0x0040a75d
  4069a0:	00404fa5 	.word	0x00404fa5
  4069a4:	004176f9 	.word	0x004176f9
  4069a8:	0043056c 	.word	0x0043056c
  4069ac:	00405219 	.word	0x00405219
  4069b0:	00406379 	.word	0x00406379

004069b4 <_lv_obj_get_style_int>:
{
  4069b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4069b8:	b083      	sub	sp, #12
  4069ba:	4690      	mov	r8, r2
    while(parent) {
  4069bc:	2800      	cmp	r0, #0
  4069be:	d069      	beq.n	406a94 <_lv_obj_get_style_int+0xe0>
  4069c0:	460e      	mov	r6, r1
  4069c2:	ea4f 2b12 	mov.w	fp, r2, lsr #8
  4069c6:	4607      	mov	r7, r0
  4069c8:	4614      	mov	r4, r2
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  4069ca:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 406b74 <_lv_obj_get_style_int+0x1c0>
        lv_state_t state = lv_obj_get_state(parent, part);
  4069ce:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 406b78 <_lv_obj_get_style_int+0x1c4>
  4069d2:	e021      	b.n	406a18 <_lv_obj_get_style_int+0x64>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  4069d4:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  4069d8:	4631      	mov	r1, r6
  4069da:	4638      	mov	r0, r7
  4069dc:	4b62      	ldr	r3, [pc, #392]	; (406b68 <_lv_obj_get_style_int+0x1b4>)
  4069de:	4798      	blx	r3
  4069e0:	e029      	b.n	406a36 <_lv_obj_get_style_int+0x82>
                    if(list->clip_corner_off) def = true;
  4069e2:	796b      	ldrb	r3, [r5, #5]
  4069e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
            if(def) {
  4069e8:	2b00      	cmp	r3, #0
  4069ea:	d154      	bne.n	406a96 <_lv_obj_get_style_int+0xe2>
        lv_state_t state = lv_obj_get_state(parent, part);
  4069ec:	4631      	mov	r1, r6
  4069ee:	4638      	mov	r0, r7
  4069f0:	47d0      	blx	sl
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  4069f2:	eb08 2000 	add.w	r0, r8, r0, lsl #8
  4069f6:	b284      	uxth	r4, r0
        res = _lv_style_list_get_int(list, prop, &value_act);
  4069f8:	f10d 0206 	add.w	r2, sp, #6
  4069fc:	4621      	mov	r1, r4
  4069fe:	4628      	mov	r0, r5
  406a00:	4b5a      	ldr	r3, [pc, #360]	; (406b6c <_lv_obj_get_style_int+0x1b8>)
  406a02:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406a04:	2801      	cmp	r0, #1
  406a06:	d03b      	beq.n	406a80 <_lv_obj_get_style_int+0xcc>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406a08:	f01b 0f80 	tst.w	fp, #128	; 0x80
  406a0c:	d043      	beq.n	406a96 <_lv_obj_get_style_int+0xe2>
        if(part != LV_OBJ_PART_MAIN) {
  406a0e:	2e00      	cmp	r6, #0
  406a10:	d03b      	beq.n	406a8a <_lv_obj_get_style_int+0xd6>
  406a12:	2600      	movs	r6, #0
    while(parent) {
  406a14:	2f00      	cmp	r7, #0
  406a16:	d03e      	beq.n	406a96 <_lv_obj_get_style_int+0xe2>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406a18:	4631      	mov	r1, r6
  406a1a:	4638      	mov	r0, r7
  406a1c:	47c8      	blx	r9
  406a1e:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406a20:	7943      	ldrb	r3, [r0, #5]
  406a22:	f013 0f08 	tst.w	r3, #8
  406a26:	d1e1      	bne.n	4069ec <_lv_obj_get_style_int+0x38>
  406a28:	7902      	ldrb	r2, [r0, #4]
  406a2a:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406a2e:	d0dd      	beq.n	4069ec <_lv_obj_get_style_int+0x38>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406a30:	f013 0f04 	tst.w	r3, #4
  406a34:	d0ce      	beq.n	4069d4 <_lv_obj_get_style_int+0x20>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406a36:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  406a3a:	2b33      	cmp	r3, #51	; 0x33
  406a3c:	d015      	beq.n	406a6a <_lv_obj_get_style_int+0xb6>
  406a3e:	dc5f      	bgt.n	406b00 <_lv_obj_get_style_int+0x14c>
  406a40:	2b13      	cmp	r3, #19
  406a42:	dc49      	bgt.n	406ad8 <_lv_obj_get_style_int+0x124>
  406a44:	2b10      	cmp	r3, #16
  406a46:	da17      	bge.n	406a78 <_lv_obj_get_style_int+0xc4>
  406a48:	2b02      	cmp	r3, #2
  406a4a:	d0ca      	beq.n	4069e2 <_lv_obj_get_style_int+0x2e>
  406a4c:	dc3e      	bgt.n	406acc <_lv_obj_get_style_int+0x118>
  406a4e:	2b01      	cmp	r3, #1
  406a50:	d1cc      	bne.n	4069ec <_lv_obj_get_style_int+0x38>
                    if(list->radius_zero) def = true;
  406a52:	796b      	ldrb	r3, [r5, #5]
  406a54:	f3c3 1300 	ubfx	r3, r3, #4, #1
  406a58:	e7c6      	b.n	4069e8 <_lv_obj_get_style_int+0x34>
                    if(list->text_space_zero) def = true;
  406a5a:	79eb      	ldrb	r3, [r5, #7]
  406a5c:	f3c3 1340 	ubfx	r3, r3, #5, #1
  406a60:	e7c2      	b.n	4069e8 <_lv_obj_get_style_int+0x34>
                    if(list->border_side_full) def = true;
  406a62:	79ab      	ldrb	r3, [r5, #6]
  406a64:	f3c3 1380 	ubfx	r3, r3, #6, #1
  406a68:	e7be      	b.n	4069e8 <_lv_obj_get_style_int+0x34>
                    if(list->border_post_off) def = true;
  406a6a:	79ab      	ldrb	r3, [r5, #6]
  406a6c:	09db      	lsrs	r3, r3, #7
  406a6e:	e7bb      	b.n	4069e8 <_lv_obj_get_style_int+0x34>
                    if(list->shadow_width_zero) def = true;
  406a70:	79eb      	ldrb	r3, [r5, #7]
  406a72:	f3c3 0380 	ubfx	r3, r3, #2, #1
  406a76:	e7b7      	b.n	4069e8 <_lv_obj_get_style_int+0x34>
                    if(list->pad_all_zero) def = true;
  406a78:	79ab      	ldrb	r3, [r5, #6]
  406a7a:	f003 0301 	and.w	r3, r3, #1
  406a7e:	e7b3      	b.n	4069e8 <_lv_obj_get_style_int+0x34>
        if(res == LV_RES_OK) return value_act;
  406a80:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
}
  406a84:	b003      	add	sp, #12
  406a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        parent = lv_obj_get_parent(parent);
  406a8a:	4638      	mov	r0, r7
  406a8c:	4b38      	ldr	r3, [pc, #224]	; (406b70 <_lv_obj_get_style_int+0x1bc>)
  406a8e:	4798      	blx	r3
  406a90:	4607      	mov	r7, r0
  406a92:	e7be      	b.n	406a12 <_lv_obj_get_style_int+0x5e>
    while(parent) {
  406a94:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
  406a96:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
  406a9a:	b2a4      	uxth	r4, r4
  406a9c:	2c22      	cmp	r4, #34	; 0x22
  406a9e:	d00f      	beq.n	406ac0 <_lv_obj_get_style_int+0x10c>
  406aa0:	d806      	bhi.n	406ab0 <_lv_obj_get_style_int+0xfc>
  406aa2:	2c03      	cmp	r4, #3
  406aa4:	d00a      	beq.n	406abc <_lv_obj_get_style_int+0x108>
  406aa6:	2c07      	cmp	r4, #7
  406aa8:	d10c      	bne.n	406ac4 <_lv_obj_get_style_int+0x110>
            return LV_IMG_ZOOM_NONE;
  406aaa:	f44f 7080 	mov.w	r0, #256	; 0x100
  406aae:	e7e9      	b.n	406a84 <_lv_obj_get_style_int+0xd0>
    switch(prop) {
  406ab0:	2c31      	cmp	r4, #49	; 0x31
  406ab2:	d009      	beq.n	406ac8 <_lv_obj_get_style_int+0x114>
  406ab4:	2cc0      	cmp	r4, #192	; 0xc0
  406ab6:	d105      	bne.n	406ac4 <_lv_obj_get_style_int+0x110>
            return LV_DPI / 8;
  406ab8:	2012      	movs	r0, #18
  406aba:	e7e3      	b.n	406a84 <_lv_obj_get_style_int+0xd0>
            return LV_DPI / 20;
  406abc:	2007      	movs	r0, #7
  406abe:	e7e1      	b.n	406a84 <_lv_obj_get_style_int+0xd0>
            return 255;
  406ac0:	20ff      	movs	r0, #255	; 0xff
  406ac2:	e7df      	b.n	406a84 <_lv_obj_get_style_int+0xd0>
    return 0;
  406ac4:	2000      	movs	r0, #0
  406ac6:	e7dd      	b.n	406a84 <_lv_obj_get_style_int+0xd0>
            return LV_BORDER_SIDE_FULL;
  406ac8:	200f      	movs	r0, #15
  406aca:	e7db      	b.n	406a84 <_lv_obj_get_style_int+0xd0>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406acc:	3b04      	subs	r3, #4
  406ace:	2b03      	cmp	r3, #3
  406ad0:	d88c      	bhi.n	4069ec <_lv_obj_get_style_int+0x38>
                    if(list->transform_all_zero) def = true;
  406ad2:	796b      	ldrb	r3, [r5, #5]
  406ad4:	09db      	lsrs	r3, r3, #7
  406ad6:	e787      	b.n	4069e8 <_lv_obj_get_style_int+0x34>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406ad8:	2b20      	cmp	r3, #32
  406ada:	d03b      	beq.n	406b54 <_lv_obj_get_style_int+0x1a0>
  406adc:	dd08      	ble.n	406af0 <_lv_obj_get_style_int+0x13c>
  406ade:	2b31      	cmp	r3, #49	; 0x31
  406ae0:	d0bf      	beq.n	406a62 <_lv_obj_get_style_int+0xae>
  406ae2:	dc37      	bgt.n	406b54 <_lv_obj_get_style_int+0x1a0>
  406ae4:	2b30      	cmp	r3, #48	; 0x30
  406ae6:	d181      	bne.n	4069ec <_lv_obj_get_style_int+0x38>
                    if(list->border_width_zero) def = true;
  406ae8:	79ab      	ldrb	r3, [r5, #6]
  406aea:	f3c3 1340 	ubfx	r3, r3, #5, #1
  406aee:	e77b      	b.n	4069e8 <_lv_obj_get_style_int+0x34>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406af0:	3b15      	subs	r3, #21
  406af2:	2b03      	cmp	r3, #3
  406af4:	f63f af7a 	bhi.w	4069ec <_lv_obj_get_style_int+0x38>
                    if(list->margin_all_zero) def = true;
  406af8:	79ab      	ldrb	r3, [r5, #6]
  406afa:	f3c3 0340 	ubfx	r3, r3, #1, #1
  406afe:	e773      	b.n	4069e8 <_lv_obj_get_style_int+0x34>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406b00:	2b72      	cmp	r3, #114	; 0x72
  406b02:	d027      	beq.n	406b54 <_lv_obj_get_style_int+0x1a0>
  406b04:	dc12      	bgt.n	406b2c <_lv_obj_get_style_int+0x178>
  406b06:	2b50      	cmp	r3, #80	; 0x50
  406b08:	d0b2      	beq.n	406a70 <_lv_obj_get_style_int+0xbc>
  406b0a:	dc09      	bgt.n	406b20 <_lv_obj_get_style_int+0x16c>
  406b0c:	2b40      	cmp	r3, #64	; 0x40
  406b0e:	d103      	bne.n	406b18 <_lv_obj_get_style_int+0x164>
                    if(list->outline_width_zero) def = true;
  406b10:	79eb      	ldrb	r3, [r5, #7]
  406b12:	f003 0301 	and.w	r3, r3, #1
  406b16:	e767      	b.n	4069e8 <_lv_obj_get_style_int+0x34>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406b18:	2b42      	cmp	r3, #66	; 0x42
  406b1a:	f47f af67 	bne.w	4069ec <_lv_obj_get_style_int+0x38>
  406b1e:	e019      	b.n	406b54 <_lv_obj_get_style_int+0x1a0>
  406b20:	2b54      	cmp	r3, #84	; 0x54
  406b22:	d017      	beq.n	406b54 <_lv_obj_get_style_int+0x1a0>
  406b24:	2b60      	cmp	r3, #96	; 0x60
  406b26:	f47f af61 	bne.w	4069ec <_lv_obj_get_style_int+0x38>
  406b2a:	e013      	b.n	406b54 <_lv_obj_get_style_int+0x1a0>
  406b2c:	f248 0281 	movw	r2, #32897	; 0x8081
  406b30:	4293      	cmp	r3, r2
  406b32:	dd08      	ble.n	406b46 <_lv_obj_get_style_int+0x192>
  406b34:	f248 0283 	movw	r2, #32899	; 0x8083
  406b38:	4293      	cmp	r3, r2
  406b3a:	d00b      	beq.n	406b54 <_lv_obj_get_style_int+0x1a0>
  406b3c:	da0e      	bge.n	406b5c <_lv_obj_get_style_int+0x1a8>
                    if(list->text_decor_none) def = true;
  406b3e:	79eb      	ldrb	r3, [r5, #7]
  406b40:	f3c3 1380 	ubfx	r3, r3, #6, #1
  406b44:	e750      	b.n	4069e8 <_lv_obj_get_style_int+0x34>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406b46:	f248 0280 	movw	r2, #32896	; 0x8080
  406b4a:	4293      	cmp	r3, r2
  406b4c:	da85      	bge.n	406a5a <_lv_obj_get_style_int+0xa6>
  406b4e:	2b91      	cmp	r3, #145	; 0x91
  406b50:	f47f af4c 	bne.w	4069ec <_lv_obj_get_style_int+0x38>
                    if(list->blend_mode_all_normal) def = true;
  406b54:	79ab      	ldrb	r3, [r5, #6]
  406b56:	f3c3 0380 	ubfx	r3, r3, #2, #1
  406b5a:	e745      	b.n	4069e8 <_lv_obj_get_style_int+0x34>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406b5c:	f248 02a0 	movw	r2, #32928	; 0x80a0
  406b60:	4293      	cmp	r3, r2
  406b62:	f47f af43 	bne.w	4069ec <_lv_obj_get_style_int+0x38>
  406b66:	e7f5      	b.n	406b54 <_lv_obj_get_style_int+0x1a0>
  406b68:	00406551 	.word	0x00406551
  406b6c:	0040a4d5 	.word	0x0040a4d5
  406b70:	00404fa5 	.word	0x00404fa5
  406b74:	00405219 	.word	0x00405219
  406b78:	00406379 	.word	0x00406379

00406b7c <lv_obj_get_width_fit>:
{
  406b7c:	b570      	push	{r4, r5, r6, lr}
  406b7e:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406b80:	4b0d      	ldr	r3, [pc, #52]	; (406bb8 <lv_obj_get_width_fit+0x3c>)
  406b82:	4798      	blx	r3
  406b84:	b928      	cbnz	r0, 406b92 <lv_obj_get_width_fit+0x16>
  406b86:	462a      	mov	r2, r5
  406b88:	2300      	movs	r3, #0
  406b8a:	480c      	ldr	r0, [pc, #48]	; (406bbc <lv_obj_get_width_fit+0x40>)
  406b8c:	490c      	ldr	r1, [pc, #48]	; (406bc0 <lv_obj_get_width_fit+0x44>)
  406b8e:	4788      	blx	r1
  406b90:	e7fe      	b.n	406b90 <lv_obj_get_width_fit+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  406b92:	2212      	movs	r2, #18
  406b94:	2100      	movs	r1, #0
  406b96:	4628      	mov	r0, r5
  406b98:	4e0a      	ldr	r6, [pc, #40]	; (406bc4 <lv_obj_get_width_fit+0x48>)
  406b9a:	47b0      	blx	r6
  406b9c:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  406b9e:	2213      	movs	r2, #19
  406ba0:	2100      	movs	r1, #0
  406ba2:	4628      	mov	r0, r5
  406ba4:	47b0      	blx	r6
  406ba6:	4606      	mov	r6, r0
    return lv_obj_get_width(obj) - left - right;
  406ba8:	4628      	mov	r0, r5
  406baa:	4b07      	ldr	r3, [pc, #28]	; (406bc8 <lv_obj_get_width_fit+0x4c>)
  406bac:	4798      	blx	r3
  406bae:	1b00      	subs	r0, r0, r4
  406bb0:	1b80      	subs	r0, r0, r6
}
  406bb2:	b200      	sxth	r0, r0
  406bb4:	bd70      	pop	{r4, r5, r6, pc}
  406bb6:	bf00      	nop
  406bb8:	004150ef 	.word	0x004150ef
  406bbc:	00425a74 	.word	0x00425a74
  406bc0:	004150f9 	.word	0x004150f9
  406bc4:	004069b5 	.word	0x004069b5
  406bc8:	0040518d 	.word	0x0040518d

00406bcc <update_style_cache_children>:
 * Update the cache of style list
 * @param obj pointer to an object
 * @param part the part of the object
 */
static void update_style_cache_children(lv_obj_t * obj)
{
  406bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406bd0:	b083      	sub	sp, #12
  406bd2:	9001      	str	r0, [sp, #4]
  406bd4:	2700      	movs	r7, #0
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406bd6:	4e3c      	ldr	r6, [pc, #240]	; (406cc8 <update_style_cache_children+0xfc>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  406bd8:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 406cd8 <update_style_cache_children+0x10c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  406bdc:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 406cdc <update_style_cache_children+0x110>
  406be0:	e00a      	b.n	406bf8 <update_style_cache_children+0x2c>
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;

        list->text_space_zero = 1;
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
           lv_obj_get_style_text_line_space(obj, part) != 0) {
            list->text_space_zero = 0;
  406be2:	79e3      	ldrb	r3, [r4, #7]
  406be4:	f36f 1345 	bfc	r3, #5, #1
  406be8:	71e3      	strb	r3, [r4, #7]
        }

        list->ignore_cache = ignore_cache_ori;
  406bea:	7963      	ldrb	r3, [r4, #5]
  406bec:	f36b 03c3 	bfi	r3, fp, #3, #1
  406bf0:	7163      	strb	r3, [r4, #5]
  406bf2:	3701      	adds	r7, #1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  406bf4:	2f40      	cmp	r7, #64	; 0x40
  406bf6:	d054      	beq.n	406ca2 <update_style_cache_children+0xd6>
  406bf8:	b2fd      	uxtb	r5, r7
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406bfa:	4629      	mov	r1, r5
  406bfc:	9801      	ldr	r0, [sp, #4]
  406bfe:	47b0      	blx	r6
        if(list == NULL) break;
  406c00:	4604      	mov	r4, r0
  406c02:	2800      	cmp	r0, #0
  406c04:	d04d      	beq.n	406ca2 <update_style_cache_children+0xd6>
        bool ignore_cache_ori = list->ignore_cache;
  406c06:	7943      	ldrb	r3, [r0, #5]
  406c08:	f3c3 0bc0 	ubfx	fp, r3, #3, #1
        list->ignore_cache = 1;
  406c0c:	f043 0308 	orr.w	r3, r3, #8
  406c10:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  406c12:	f248 020c 	movw	r2, #32780	; 0x800c
  406c16:	4629      	mov	r1, r5
  406c18:	9801      	ldr	r0, [sp, #4]
  406c1a:	47d0      	blx	sl
        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  406c1c:	28ff      	cmp	r0, #255	; 0xff
  406c1e:	bf14      	ite	ne
  406c20:	2000      	movne	r0, #0
  406c22:	2001      	moveq	r0, #1
  406c24:	7963      	ldrb	r3, [r4, #5]
  406c26:	f360 1345 	bfi	r3, r0, #5, #1
  406c2a:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  406c2c:	f248 0282 	movw	r2, #32898	; 0x8082
  406c30:	4629      	mov	r1, r5
  406c32:	9801      	ldr	r0, [sp, #4]
  406c34:	47c8      	blx	r9
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  406c36:	b2c0      	uxtb	r0, r0
  406c38:	fab0 f080 	clz	r0, r0
  406c3c:	0940      	lsrs	r0, r0, #5
  406c3e:	79e3      	ldrb	r3, [r4, #7]
  406c40:	f360 1386 	bfi	r3, r0, #6, #1
  406c44:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  406c46:	f248 028e 	movw	r2, #32910	; 0x808e
  406c4a:	4629      	mov	r1, r5
  406c4c:	9801      	ldr	r0, [sp, #4]
  406c4e:	4b1f      	ldr	r3, [pc, #124]	; (406ccc <update_style_cache_children+0x100>)
  406c50:	4798      	blx	r3
  406c52:	4680      	mov	r8, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
  406c54:	4b1e      	ldr	r3, [pc, #120]	; (406cd0 <update_style_cache_children+0x104>)
  406c56:	4798      	blx	r3
  406c58:	4580      	cmp	r8, r0
  406c5a:	bf14      	ite	ne
  406c5c:	2000      	movne	r0, #0
  406c5e:	2001      	moveq	r0, #1
  406c60:	79e3      	ldrb	r3, [r4, #7]
  406c62:	f360 13c7 	bfi	r3, r0, #7, #1
  406c66:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  406c68:	f248 02ad 	movw	r2, #32941	; 0x80ad
  406c6c:	4629      	mov	r1, r5
  406c6e:	9801      	ldr	r0, [sp, #4]
  406c70:	47d0      	blx	sl
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  406c72:	fab0 f080 	clz	r0, r0
  406c76:	0940      	lsrs	r0, r0, #5
  406c78:	79e3      	ldrb	r3, [r4, #7]
  406c7a:	f360 1304 	bfi	r3, r0, #4, #1
        list->text_space_zero = 1;
  406c7e:	f043 0320 	orr.w	r3, r3, #32
  406c82:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  406c84:	f248 0280 	movw	r2, #32896	; 0x8080
  406c88:	4629      	mov	r1, r5
  406c8a:	9801      	ldr	r0, [sp, #4]
  406c8c:	47c8      	blx	r9
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  406c8e:	2800      	cmp	r0, #0
  406c90:	d1a7      	bne.n	406be2 <update_style_cache_children+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  406c92:	f248 0281 	movw	r2, #32897	; 0x8081
  406c96:	4629      	mov	r1, r5
  406c98:	9801      	ldr	r0, [sp, #4]
  406c9a:	47c8      	blx	r9
  406c9c:	2800      	cmp	r0, #0
  406c9e:	d0a4      	beq.n	406bea <update_style_cache_children+0x1e>
  406ca0:	e79f      	b.n	406be2 <update_style_cache_children+0x16>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  406ca2:	2100      	movs	r1, #0
  406ca4:	9801      	ldr	r0, [sp, #4]
  406ca6:	4b0b      	ldr	r3, [pc, #44]	; (406cd4 <update_style_cache_children+0x108>)
  406ca8:	4798      	blx	r3
    while(child) {
  406caa:	4604      	mov	r4, r0
  406cac:	b148      	cbz	r0, 406cc2 <update_style_cache_children+0xf6>
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
  406cae:	4d09      	ldr	r5, [pc, #36]	; (406cd4 <update_style_cache_children+0x108>)
        update_style_cache_children(child);
  406cb0:	4620      	mov	r0, r4
  406cb2:	f7ff ff8b 	bl	406bcc <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
  406cb6:	4621      	mov	r1, r4
  406cb8:	9801      	ldr	r0, [sp, #4]
  406cba:	47a8      	blx	r5
    while(child) {
  406cbc:	4604      	mov	r4, r0
  406cbe:	2800      	cmp	r0, #0
  406cc0:	d1f6      	bne.n	406cb0 <update_style_cache_children+0xe4>
    }

}
  406cc2:	b003      	add	sp, #12
  406cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406cc8:	00405219 	.word	0x00405219
  406ccc:	004068c1 	.word	0x004068c1
  406cd0:	004176f9 	.word	0x004176f9
  406cd4:	00405091 	.word	0x00405091
  406cd8:	00406459 	.word	0x00406459
  406cdc:	004069b5 	.word	0x004069b5

00406ce0 <invalidate_style_cache>:
 * Mark the object and all of it's children's style lists as invalid.
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
  406ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406ce2:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
  406ce4:	4610      	mov	r0, r2
  406ce6:	4b17      	ldr	r3, [pc, #92]	; (406d44 <invalidate_style_cache+0x64>)
  406ce8:	4798      	blx	r3
  406cea:	b350      	cbz	r0, 406d42 <invalidate_style_cache+0x62>
  406cec:	2400      	movs	r4, #0

    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406cee:	4e16      	ldr	r6, [pc, #88]	; (406d48 <invalidate_style_cache+0x68>)
  406cf0:	b2e1      	uxtb	r1, r4
  406cf2:	4628      	mov	r0, r5
  406cf4:	47b0      	blx	r6
        if(list == NULL) break;
  406cf6:	b130      	cbz	r0, 406d06 <invalidate_style_cache+0x26>
        list->valid_cache = 0;
  406cf8:	7942      	ldrb	r2, [r0, #5]
  406cfa:	f36f 0282 	bfc	r2, #2, #1
  406cfe:	7142      	strb	r2, [r0, #5]
  406d00:	3401      	adds	r4, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  406d02:	2c40      	cmp	r4, #64	; 0x40
  406d04:	d1f4      	bne.n	406cf0 <invalidate_style_cache+0x10>
  406d06:	2440      	movs	r4, #64	; 0x40
    }

    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406d08:	4e0f      	ldr	r6, [pc, #60]	; (406d48 <invalidate_style_cache+0x68>)
  406d0a:	4621      	mov	r1, r4
  406d0c:	4628      	mov	r0, r5
  406d0e:	47b0      	blx	r6
        if(list == NULL) break;
  406d10:	b138      	cbz	r0, 406d22 <invalidate_style_cache+0x42>
        list->valid_cache = 0;
  406d12:	7942      	ldrb	r2, [r0, #5]
  406d14:	f36f 0282 	bfc	r2, #2, #1
  406d18:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  406d1a:	3401      	adds	r4, #1
  406d1c:	b2e4      	uxtb	r4, r4
  406d1e:	2cff      	cmp	r4, #255	; 0xff
  406d20:	d1f3      	bne.n	406d0a <invalidate_style_cache+0x2a>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  406d22:	2100      	movs	r1, #0
  406d24:	4628      	mov	r0, r5
  406d26:	4b09      	ldr	r3, [pc, #36]	; (406d4c <invalidate_style_cache+0x6c>)
  406d28:	4798      	blx	r3
    while(child) {
  406d2a:	4604      	mov	r4, r0
  406d2c:	b148      	cbz	r0, 406d42 <invalidate_style_cache+0x62>
        update_style_cache_children(child);
  406d2e:	4f08      	ldr	r7, [pc, #32]	; (406d50 <invalidate_style_cache+0x70>)
        child = lv_obj_get_child(obj, child);
  406d30:	4e06      	ldr	r6, [pc, #24]	; (406d4c <invalidate_style_cache+0x6c>)
        update_style_cache_children(child);
  406d32:	4620      	mov	r0, r4
  406d34:	47b8      	blx	r7
        child = lv_obj_get_child(obj, child);
  406d36:	4621      	mov	r1, r4
  406d38:	4628      	mov	r0, r5
  406d3a:	47b0      	blx	r6
    while(child) {
  406d3c:	4604      	mov	r4, r0
  406d3e:	2800      	cmp	r0, #0
  406d40:	d1f7      	bne.n	406d32 <invalidate_style_cache+0x52>
  406d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406d44:	00404b3d 	.word	0x00404b3d
  406d48:	00405219 	.word	0x00405219
  406d4c:	00405091 	.word	0x00405091
  406d50:	00406bcd 	.word	0x00406bcd

00406d54 <lv_obj_refresh_style>:
{
  406d54:	b570      	push	{r4, r5, r6, lr}
  406d56:	4605      	mov	r5, r0
  406d58:	460e      	mov	r6, r1
  406d5a:	4614      	mov	r4, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406d5c:	4b33      	ldr	r3, [pc, #204]	; (406e2c <lv_obj_refresh_style+0xd8>)
  406d5e:	4798      	blx	r3
  406d60:	b928      	cbnz	r0, 406d6e <lv_obj_refresh_style+0x1a>
  406d62:	462a      	mov	r2, r5
  406d64:	2300      	movs	r3, #0
  406d66:	4832      	ldr	r0, [pc, #200]	; (406e30 <lv_obj_refresh_style+0xdc>)
  406d68:	4932      	ldr	r1, [pc, #200]	; (406e34 <lv_obj_refresh_style+0xe0>)
  406d6a:	4788      	blx	r1
  406d6c:	e7fe      	b.n	406d6c <lv_obj_refresh_style+0x18>
    invalidate_style_cache(obj, part, prop);
  406d6e:	4622      	mov	r2, r4
  406d70:	4631      	mov	r1, r6
  406d72:	4628      	mov	r0, r5
  406d74:	4b30      	ldr	r3, [pc, #192]	; (406e38 <lv_obj_refresh_style+0xe4>)
  406d76:	4798      	blx	r3
    switch(prop) {
  406d78:	2c71      	cmp	r4, #113	; 0x71
  406d7a:	d839      	bhi.n	406df0 <lv_obj_refresh_style+0x9c>
  406d7c:	2c70      	cmp	r4, #112	; 0x70
  406d7e:	d215      	bcs.n	406dac <lv_obj_refresh_style+0x58>
  406d80:	2c41      	cmp	r4, #65	; 0x41
  406d82:	d80d      	bhi.n	406da0 <lv_obj_refresh_style+0x4c>
  406d84:	2c40      	cmp	r4, #64	; 0x40
  406d86:	d211      	bcs.n	406dac <lv_obj_refresh_style+0x58>
  406d88:	2c02      	cmp	r4, #2
  406d8a:	d305      	bcc.n	406d98 <lv_obj_refresh_style+0x44>
  406d8c:	2c07      	cmp	r4, #7
  406d8e:	d90d      	bls.n	406dac <lv_obj_refresh_style+0x58>
  406d90:	f1a4 0310 	sub.w	r3, r4, #16
  406d94:	2b08      	cmp	r3, #8
  406d96:	d909      	bls.n	406dac <lv_obj_refresh_style+0x58>
        lv_obj_invalidate(obj);
  406d98:	4628      	mov	r0, r5
  406d9a:	4b28      	ldr	r3, [pc, #160]	; (406e3c <lv_obj_refresh_style+0xe8>)
  406d9c:	4798      	blx	r3
  406d9e:	bd70      	pop	{r4, r5, r6, pc}
    switch(prop) {
  406da0:	2c53      	cmp	r4, #83	; 0x53
  406da2:	d822      	bhi.n	406dea <lv_obj_refresh_style+0x96>
  406da4:	2c50      	cmp	r4, #80	; 0x50
  406da6:	d201      	bcs.n	406dac <lv_obj_refresh_style+0x58>
  406da8:	2c4c      	cmp	r4, #76	; 0x4c
  406daa:	d1f5      	bne.n	406d98 <lv_obj_refresh_style+0x44>
        lv_obj_invalidate(obj);
  406dac:	4628      	mov	r0, r5
  406dae:	4b23      	ldr	r3, [pc, #140]	; (406e3c <lv_obj_refresh_style+0xe8>)
  406db0:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
  406db2:	69eb      	ldr	r3, [r5, #28]
  406db4:	2200      	movs	r2, #0
  406db6:	2104      	movs	r1, #4
  406db8:	4628      	mov	r0, r5
  406dba:	4798      	blx	r3
        switch(prop) {
  406dbc:	2c15      	cmp	r4, #21
  406dbe:	d309      	bcc.n	406dd4 <lv_obj_refresh_style+0x80>
  406dc0:	2c18      	cmp	r4, #24
  406dc2:	d901      	bls.n	406dc8 <lv_obj_refresh_style+0x74>
  406dc4:	2cff      	cmp	r4, #255	; 0xff
  406dc6:	d105      	bne.n	406dd4 <lv_obj_refresh_style+0x80>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
  406dc8:	6828      	ldr	r0, [r5, #0]
  406dca:	b118      	cbz	r0, 406dd4 <lv_obj_refresh_style+0x80>
  406dcc:	69c3      	ldr	r3, [r0, #28]
  406dce:	2200      	movs	r2, #0
  406dd0:	2101      	movs	r1, #1
  406dd2:	4798      	blx	r3
        lv_obj_invalidate(obj);
  406dd4:	4628      	mov	r0, r5
  406dd6:	4b19      	ldr	r3, [pc, #100]	; (406e3c <lv_obj_refresh_style+0xe8>)
  406dd8:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
  406dda:	2cff      	cmp	r4, #255	; 0xff
  406ddc:	d001      	beq.n	406de2 <lv_obj_refresh_style+0x8e>
  406dde:	0be3      	lsrs	r3, r4, #15
  406de0:	d0dd      	beq.n	406d9e <lv_obj_refresh_style+0x4a>
  406de2:	4628      	mov	r0, r5
  406de4:	4b16      	ldr	r3, [pc, #88]	; (406e40 <lv_obj_refresh_style+0xec>)
  406de6:	4798      	blx	r3
  406de8:	bd70      	pop	{r4, r5, r6, pc}
    switch(prop) {
  406dea:	2c5c      	cmp	r4, #92	; 0x5c
  406dec:	d1d4      	bne.n	406d98 <lv_obj_refresh_style+0x44>
  406dee:	e7dd      	b.n	406dac <lv_obj_refresh_style+0x58>
  406df0:	2c7f      	cmp	r4, #127	; 0x7f
  406df2:	d90c      	bls.n	406e0e <lv_obj_refresh_style+0xba>
  406df4:	f248 0381 	movw	r3, #32897	; 0x8081
  406df8:	429c      	cmp	r4, r3
  406dfa:	d811      	bhi.n	406e20 <lv_obj_refresh_style+0xcc>
  406dfc:	f248 0380 	movw	r3, #32896	; 0x8080
  406e00:	429c      	cmp	r4, r3
  406e02:	d2d3      	bcs.n	406dac <lv_obj_refresh_style+0x58>
  406e04:	2c90      	cmp	r4, #144	; 0x90
  406e06:	d0d1      	beq.n	406dac <lv_obj_refresh_style+0x58>
  406e08:	2cff      	cmp	r4, #255	; 0xff
  406e0a:	d1c5      	bne.n	406d98 <lv_obj_refresh_style+0x44>
  406e0c:	e7ce      	b.n	406dac <lv_obj_refresh_style+0x58>
  406e0e:	2c7e      	cmp	r4, #126	; 0x7e
  406e10:	d2cc      	bcs.n	406dac <lv_obj_refresh_style+0x58>
  406e12:	2c73      	cmp	r4, #115	; 0x73
  406e14:	d3c0      	bcc.n	406d98 <lv_obj_refresh_style+0x44>
  406e16:	2c75      	cmp	r4, #117	; 0x75
  406e18:	d9c8      	bls.n	406dac <lv_obj_refresh_style+0x58>
  406e1a:	2c7c      	cmp	r4, #124	; 0x7c
  406e1c:	d1bc      	bne.n	406d98 <lv_obj_refresh_style+0x44>
  406e1e:	e7c5      	b.n	406dac <lv_obj_refresh_style+0x58>
  406e20:	f248 038e 	movw	r3, #32910	; 0x808e
  406e24:	429c      	cmp	r4, r3
  406e26:	d1b7      	bne.n	406d98 <lv_obj_refresh_style+0x44>
  406e28:	e7c0      	b.n	406dac <lv_obj_refresh_style+0x58>
  406e2a:	bf00      	nop
  406e2c:	004150ef 	.word	0x004150ef
  406e30:	00425a74 	.word	0x00425a74
  406e34:	004150f9 	.word	0x004150f9
  406e38:	00406ce1 	.word	0x00406ce1
  406e3c:	00405565 	.word	0x00405565
  406e40:	00405c61 	.word	0x00405c61

00406e44 <lv_obj_reset_style_list>:
{
  406e44:	b538      	push	{r3, r4, r5, lr}
  406e46:	4604      	mov	r4, r0
  406e48:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
  406e4a:	4b04      	ldr	r3, [pc, #16]	; (406e5c <lv_obj_reset_style_list+0x18>)
  406e4c:	4798      	blx	r3
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  406e4e:	22ff      	movs	r2, #255	; 0xff
  406e50:	4629      	mov	r1, r5
  406e52:	4620      	mov	r0, r4
  406e54:	4b02      	ldr	r3, [pc, #8]	; (406e60 <lv_obj_reset_style_list+0x1c>)
  406e56:	4798      	blx	r3
  406e58:	bd38      	pop	{r3, r4, r5, pc}
  406e5a:	bf00      	nop
  406e5c:	004052e1 	.word	0x004052e1
  406e60:	00406d55 	.word	0x00406d55

00406e64 <_lv_obj_set_style_local_int>:
{
  406e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406e66:	4605      	mov	r5, r0
  406e68:	460e      	mov	r6, r1
  406e6a:	4614      	mov	r4, r2
  406e6c:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  406e6e:	4b09      	ldr	r3, [pc, #36]	; (406e94 <_lv_obj_set_style_local_int+0x30>)
  406e70:	4798      	blx	r3
    _lv_style_list_set_local_int(style_dsc, prop, value);
  406e72:	463a      	mov	r2, r7
  406e74:	4621      	mov	r1, r4
  406e76:	4b08      	ldr	r3, [pc, #32]	; (406e98 <_lv_obj_set_style_local_int+0x34>)
  406e78:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  406e7a:	2300      	movs	r3, #0
  406e7c:	4622      	mov	r2, r4
  406e7e:	4631      	mov	r1, r6
  406e80:	4628      	mov	r0, r5
  406e82:	4f06      	ldr	r7, [pc, #24]	; (406e9c <_lv_obj_set_style_local_int+0x38>)
  406e84:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  406e86:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406e8a:	4631      	mov	r1, r6
  406e8c:	4628      	mov	r0, r5
  406e8e:	4b04      	ldr	r3, [pc, #16]	; (406ea0 <_lv_obj_set_style_local_int+0x3c>)
  406e90:	4798      	blx	r3
  406e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406e94:	00405219 	.word	0x00405219
  406e98:	0040a465 	.word	0x0040a465
  406e9c:	00405245 	.word	0x00405245
  406ea0:	00406d55 	.word	0x00406d55

00406ea4 <_lv_obj_set_style_local_color>:
{
  406ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406ea6:	4605      	mov	r5, r0
  406ea8:	460e      	mov	r6, r1
  406eaa:	4614      	mov	r4, r2
  406eac:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  406eae:	4b09      	ldr	r3, [pc, #36]	; (406ed4 <_lv_obj_set_style_local_color+0x30>)
  406eb0:	4798      	blx	r3
    _lv_style_list_set_local_color(style_dsc, prop, color);
  406eb2:	463a      	mov	r2, r7
  406eb4:	4621      	mov	r1, r4
  406eb6:	4b08      	ldr	r3, [pc, #32]	; (406ed8 <_lv_obj_set_style_local_color+0x34>)
  406eb8:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  406eba:	2300      	movs	r3, #0
  406ebc:	4622      	mov	r2, r4
  406ebe:	4631      	mov	r1, r6
  406ec0:	4628      	mov	r0, r5
  406ec2:	4f06      	ldr	r7, [pc, #24]	; (406edc <_lv_obj_set_style_local_color+0x38>)
  406ec4:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  406ec6:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406eca:	4631      	mov	r1, r6
  406ecc:	4628      	mov	r0, r5
  406ece:	4b04      	ldr	r3, [pc, #16]	; (406ee0 <_lv_obj_set_style_local_color+0x3c>)
  406ed0:	4798      	blx	r3
  406ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406ed4:	00405219 	.word	0x00405219
  406ed8:	0040a49d 	.word	0x0040a49d
  406edc:	00405245 	.word	0x00405245
  406ee0:	00406d55 	.word	0x00406d55

00406ee4 <_lv_obj_set_style_local_opa>:
{
  406ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406ee6:	4605      	mov	r5, r0
  406ee8:	460e      	mov	r6, r1
  406eea:	4614      	mov	r4, r2
  406eec:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  406eee:	4b09      	ldr	r3, [pc, #36]	; (406f14 <_lv_obj_set_style_local_opa+0x30>)
  406ef0:	4798      	blx	r3
    _lv_style_list_set_local_opa(style_dsc, prop, opa);
  406ef2:	463a      	mov	r2, r7
  406ef4:	4621      	mov	r1, r4
  406ef6:	4b08      	ldr	r3, [pc, #32]	; (406f18 <_lv_obj_set_style_local_opa+0x34>)
  406ef8:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  406efa:	2300      	movs	r3, #0
  406efc:	4622      	mov	r2, r4
  406efe:	4631      	mov	r1, r6
  406f00:	4628      	mov	r0, r5
  406f02:	4f06      	ldr	r7, [pc, #24]	; (406f1c <_lv_obj_set_style_local_opa+0x38>)
  406f04:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  406f06:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406f0a:	4631      	mov	r1, r6
  406f0c:	4628      	mov	r0, r5
  406f0e:	4b04      	ldr	r3, [pc, #16]	; (406f20 <_lv_obj_set_style_local_opa+0x3c>)
  406f10:	4798      	blx	r3
  406f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406f14:	00405219 	.word	0x00405219
  406f18:	0040a481 	.word	0x0040a481
  406f1c:	00405245 	.word	0x00405245
  406f20:	00406d55 	.word	0x00406d55

00406f24 <_lv_obj_set_style_local_ptr>:
{
  406f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f26:	4605      	mov	r5, r0
  406f28:	460e      	mov	r6, r1
  406f2a:	4614      	mov	r4, r2
  406f2c:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  406f2e:	4b09      	ldr	r3, [pc, #36]	; (406f54 <_lv_obj_set_style_local_ptr+0x30>)
  406f30:	4798      	blx	r3
    _lv_style_list_set_local_ptr(style_dsc, prop, value);
  406f32:	463a      	mov	r2, r7
  406f34:	4621      	mov	r1, r4
  406f36:	4b08      	ldr	r3, [pc, #32]	; (406f58 <_lv_obj_set_style_local_ptr+0x34>)
  406f38:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  406f3a:	2300      	movs	r3, #0
  406f3c:	4622      	mov	r2, r4
  406f3e:	4631      	mov	r1, r6
  406f40:	4628      	mov	r0, r5
  406f42:	4f06      	ldr	r7, [pc, #24]	; (406f5c <_lv_obj_set_style_local_ptr+0x38>)
  406f44:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  406f46:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406f4a:	4631      	mov	r1, r6
  406f4c:	4628      	mov	r0, r5
  406f4e:	4b04      	ldr	r3, [pc, #16]	; (406f60 <_lv_obj_set_style_local_ptr+0x3c>)
  406f50:	4798      	blx	r3
  406f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406f54:	00405219 	.word	0x00405219
  406f58:	0040a4b9 	.word	0x0040a4b9
  406f5c:	00405245 	.word	0x00405245
  406f60:	00406d55 	.word	0x00406d55

00406f64 <report_style_mod_core>:
{
  406f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f68:	b083      	sub	sp, #12
  406f6a:	4604      	mov	r4, r0
  406f6c:	4688      	mov	r8, r1
  406f6e:	2600      	movs	r6, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406f70:	f8df 909c 	ldr.w	r9, [pc, #156]	; 407010 <report_style_mod_core+0xac>
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  406f74:	4635      	mov	r5, r6
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  406f76:	f8df a09c 	ldr.w	sl, [pc, #156]	; 407014 <report_style_mod_core+0xb0>
  406f7a:	e020      	b.n	406fbe <report_style_mod_core+0x5a>
    if(list->has_trans && list->skip_trans) id++;
  406f7c:	1c5a      	adds	r2, r3, #1
  406f7e:	b2d2      	uxtb	r2, r2
  406f80:	e00b      	b.n	406f9a <report_style_mod_core+0x36>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  406f82:	462a      	mov	r2, r5
            if(_class == style || style == NULL) {
  406f84:	4294      	cmp	r4, r2
  406f86:	d013      	beq.n	406fb0 <report_style_mod_core+0x4c>
  406f88:	b194      	cbz	r4, 406fb0 <report_style_mod_core+0x4c>
        for(ci = 0; ci < list->style_cnt; ci++) {
  406f8a:	3301      	adds	r3, #1
  406f8c:	b2db      	uxtb	r3, r3
  406f8e:	428b      	cmp	r3, r1
  406f90:	da12      	bge.n	406fb8 <report_style_mod_core+0x54>
    if(list->has_trans && list->skip_trans) id++;
  406f92:	f5bb 7fc0 	cmp.w	fp, #384	; 0x180
  406f96:	d0f1      	beq.n	406f7c <report_style_mod_core+0x18>
  406f98:	461a      	mov	r2, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  406f9a:	2800      	cmp	r0, #0
  406f9c:	d0f1      	beq.n	406f82 <report_style_mod_core+0x1e>
  406f9e:	428a      	cmp	r2, r1
  406fa0:	da04      	bge.n	406fac <report_style_mod_core+0x48>
    return list->style_list[id];
  406fa2:	f8dc 7000 	ldr.w	r7, [ip]
  406fa6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
  406faa:	e7eb      	b.n	406f84 <report_style_mod_core+0x20>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  406fac:	462a      	mov	r2, r5
  406fae:	e7e9      	b.n	406f84 <report_style_mod_core+0x20>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  406fb0:	22ff      	movs	r2, #255	; 0xff
  406fb2:	9901      	ldr	r1, [sp, #4]
  406fb4:	4640      	mov	r0, r8
  406fb6:	47d0      	blx	sl
  406fb8:	3601      	adds	r6, #1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  406fba:	2e40      	cmp	r6, #64	; 0x40
  406fbc:	d011      	beq.n	406fe2 <report_style_mod_core+0x7e>
  406fbe:	b2f3      	uxtb	r3, r6
  406fc0:	9301      	str	r3, [sp, #4]
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406fc2:	4619      	mov	r1, r3
  406fc4:	4640      	mov	r0, r8
  406fc6:	47c8      	blx	r9
        if(list == NULL) break;
  406fc8:	4684      	mov	ip, r0
  406fca:	b150      	cbz	r0, 406fe2 <report_style_mod_core+0x7e>
        for(ci = 0; ci < list->style_cnt; ci++) {
  406fcc:	7901      	ldrb	r1, [r0, #4]
  406fce:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
  406fd2:	d0f1      	beq.n	406fb8 <report_style_mod_core+0x54>
    if(list->has_trans && list->skip_trans) id++;
  406fd4:	f8b0 b004 	ldrh.w	fp, [r0, #4]
  406fd8:	f40b 7bc0 	and.w	fp, fp, #384	; 0x180
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  406fdc:	4608      	mov	r0, r1
  406fde:	462b      	mov	r3, r5
  406fe0:	e7d7      	b.n	406f92 <report_style_mod_core+0x2e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  406fe2:	2100      	movs	r1, #0
  406fe4:	4640      	mov	r0, r8
  406fe6:	4b09      	ldr	r3, [pc, #36]	; (40700c <report_style_mod_core+0xa8>)
  406fe8:	4798      	blx	r3
    while(child) {
  406fea:	4605      	mov	r5, r0
  406fec:	b150      	cbz	r0, 407004 <report_style_mod_core+0xa0>
        child = lv_obj_get_child(obj, child);
  406fee:	4e07      	ldr	r6, [pc, #28]	; (40700c <report_style_mod_core+0xa8>)
        report_style_mod_core(style, child);
  406ff0:	4629      	mov	r1, r5
  406ff2:	4620      	mov	r0, r4
  406ff4:	f7ff ffb6 	bl	406f64 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
  406ff8:	4629      	mov	r1, r5
  406ffa:	4640      	mov	r0, r8
  406ffc:	47b0      	blx	r6
    while(child) {
  406ffe:	4605      	mov	r5, r0
  407000:	2800      	cmp	r0, #0
  407002:	d1f5      	bne.n	406ff0 <report_style_mod_core+0x8c>
}
  407004:	b003      	add	sp, #12
  407006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40700a:	bf00      	nop
  40700c:	00405091 	.word	0x00405091
  407010:	00405219 	.word	0x00405219
  407014:	00406d55 	.word	0x00406d55

00407018 <lv_obj_report_style_mod>:
{
  407018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40701c:	4680      	mov	r8, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
  40701e:	2000      	movs	r0, #0
  407020:	4b0f      	ldr	r3, [pc, #60]	; (407060 <lv_obj_report_style_mod+0x48>)
  407022:	4798      	blx	r3
    while(d) {
  407024:	b1c8      	cbz	r0, 40705a <lv_obj_report_style_mod+0x42>
  407026:	4681      	mov	r9, r0
        _LV_LL_READ(d->scr_ll, i) {
  407028:	f8df a040 	ldr.w	sl, [pc, #64]	; 40706c <lv_obj_report_style_mod+0x54>
            report_style_mod_core(style, i);
  40702c:	4f0d      	ldr	r7, [pc, #52]	; (407064 <lv_obj_report_style_mod+0x4c>)
        _LV_LL_READ(d->scr_ll, i) {
  40702e:	4e0e      	ldr	r6, [pc, #56]	; (407068 <lv_obj_report_style_mod+0x50>)
  407030:	f109 0538 	add.w	r5, r9, #56	; 0x38
  407034:	4628      	mov	r0, r5
  407036:	47d0      	blx	sl
  407038:	4604      	mov	r4, r0
  40703a:	b140      	cbz	r0, 40704e <lv_obj_report_style_mod+0x36>
            report_style_mod_core(style, i);
  40703c:	4621      	mov	r1, r4
  40703e:	4640      	mov	r0, r8
  407040:	47b8      	blx	r7
        _LV_LL_READ(d->scr_ll, i) {
  407042:	4621      	mov	r1, r4
  407044:	4628      	mov	r0, r5
  407046:	47b0      	blx	r6
  407048:	4604      	mov	r4, r0
  40704a:	2800      	cmp	r0, #0
  40704c:	d1f6      	bne.n	40703c <lv_obj_report_style_mod+0x24>
        d = lv_disp_get_next(d);
  40704e:	4648      	mov	r0, r9
  407050:	4b03      	ldr	r3, [pc, #12]	; (407060 <lv_obj_report_style_mod+0x48>)
  407052:	4798      	blx	r3
    while(d) {
  407054:	4681      	mov	r9, r0
  407056:	2800      	cmp	r0, #0
  407058:	d1ea      	bne.n	407030 <lv_obj_report_style_mod+0x18>
  40705a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40705e:	bf00      	nop
  407060:	00414175 	.word	0x00414175
  407064:	00406f65 	.word	0x00406f65
  407068:	00415401 	.word	0x00415401
  40706c:	004153ed 	.word	0x004153ed

00407070 <trans_anim_cb>:
{
  407070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407074:	4604      	mov	r4, r0
  407076:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  407078:	7981      	ldrb	r1, [r0, #6]
  40707a:	6800      	ldr	r0, [r0, #0]
  40707c:	4b48      	ldr	r3, [pc, #288]	; (4071a0 <trans_anim_cb+0x130>)
  40707e:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
  407080:	4b48      	ldr	r3, [pc, #288]	; (4071a4 <trans_anim_cb+0x134>)
  407082:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
  407084:	88a1      	ldrh	r1, [r4, #4]
  407086:	f001 030f 	and.w	r3, r1, #15
  40708a:	2b08      	cmp	r3, #8
  40708c:	dc1b      	bgt.n	4070c6 <trans_anim_cb+0x56>
        if(v == 0) x = tr->start_value._int;
  40708e:	b955      	cbnz	r5, 4070a6 <trans_anim_cb+0x36>
  407090:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
  407094:	4b44      	ldr	r3, [pc, #272]	; (4071a8 <trans_anim_cb+0x138>)
  407096:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
  407098:	88a2      	ldrh	r2, [r4, #4]
  40709a:	79a1      	ldrb	r1, [r4, #6]
  40709c:	6820      	ldr	r0, [r4, #0]
  40709e:	4b43      	ldr	r3, [pc, #268]	; (4071ac <trans_anim_cb+0x13c>)
  4070a0:	4798      	blx	r3
  4070a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(v == 255) x = tr->end_value._int;
  4070a6:	2dff      	cmp	r5, #255	; 0xff
  4070a8:	d00a      	beq.n	4070c0 <trans_anim_cb+0x50>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
  4070aa:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
  4070ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4070b2:	1a9b      	subs	r3, r3, r2
  4070b4:	fb05 f503 	mul.w	r5, r5, r3
  4070b8:	eb02 2225 	add.w	r2, r2, r5, asr #8
  4070bc:	b212      	sxth	r2, r2
  4070be:	e7e9      	b.n	407094 <trans_anim_cb+0x24>
        else if(v == 255) x = tr->end_value._int;
  4070c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4070c4:	e7e6      	b.n	407094 <trans_anim_cb+0x24>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  4070c6:	2b0b      	cmp	r3, #11
  4070c8:	dc4e      	bgt.n	407168 <trans_anim_cb+0xf8>
        if(v <= 0) x = tr->start_value._color;
  4070ca:	2d00      	cmp	r5, #0
  4070cc:	dd05      	ble.n	4070da <trans_anim_cb+0x6a>
        else if(v >= 255) x = tr->end_value._color;
  4070ce:	2dfe      	cmp	r5, #254	; 0xfe
  4070d0:	dd05      	ble.n	4070de <trans_anim_cb+0x6e>
  4070d2:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
  4070d4:	4b36      	ldr	r3, [pc, #216]	; (4071b0 <trans_anim_cb+0x140>)
  4070d6:	4798      	blx	r3
  4070d8:	e7de      	b.n	407098 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._color;
  4070da:	8922      	ldrh	r2, [r4, #8]
  4070dc:	e7fa      	b.n	4070d4 <trans_anim_cb+0x64>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4070de:	b2ed      	uxtb	r5, r5
  4070e0:	f1c5 0eff 	rsb	lr, r5, #255	; 0xff
  4070e4:	7b22      	ldrb	r2, [r4, #12]
  4070e6:	08d7      	lsrs	r7, r2, #3
  4070e8:	7a26      	ldrb	r6, [r4, #8]
  4070ea:	08f3      	lsrs	r3, r6, #3
  4070ec:	fb0e f303 	mul.w	r3, lr, r3
  4070f0:	fb05 3707 	mla	r7, r5, r7, r3
  4070f4:	3780      	adds	r7, #128	; 0x80
  4070f6:	eb07 2307 	add.w	r3, r7, r7, lsl #8
  4070fa:	eb07 17c3 	add.w	r7, r7, r3, lsl #7
  4070fe:	f3c7 57c4 	ubfx	r7, r7, #23, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407102:	f002 0c07 	and.w	ip, r2, #7
  407106:	7b63      	ldrb	r3, [r4, #13]
  407108:	095a      	lsrs	r2, r3, #5
  40710a:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
  40710e:	f006 0807 	and.w	r8, r6, #7
  407112:	f894 c009 	ldrb.w	ip, [r4, #9]
  407116:	ea4f 165c 	mov.w	r6, ip, lsr #5
  40711a:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
  40711e:	fb0e f606 	mul.w	r6, lr, r6
  407122:	fb05 6202 	mla	r2, r5, r2, r6
  407126:	3280      	adds	r2, #128	; 0x80
  407128:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40712c:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  407130:	f003 031f 	and.w	r3, r3, #31
  407134:	f00c 0c1f 	and.w	ip, ip, #31
  407138:	fb0e fe0c 	mul.w	lr, lr, ip
  40713c:	fb05 e303 	mla	r3, r5, r3, lr
  407140:	3380      	adds	r3, #128	; 0x80
  407142:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  407146:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40714a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40714e:	0eb5      	lsrs	r5, r6, #26
  407150:	f04f 0200 	mov.w	r2, #0
  407154:	f365 0202 	bfi	r2, r5, #0, #3
  407158:	f367 02c7 	bfi	r2, r7, #3, #5
  40715c:	f363 220c 	bfi	r2, r3, #8, #5
  407160:	0df6      	lsrs	r6, r6, #23
  407162:	f366 324f 	bfi	r2, r6, #13, #3
  407166:	e7b5      	b.n	4070d4 <trans_anim_cb+0x64>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407168:	2b0d      	cmp	r3, #13
  40716a:	dc12      	bgt.n	407192 <trans_anim_cb+0x122>
        if(v <= 0) x = tr->start_value._opa;
  40716c:	2d00      	cmp	r5, #0
  40716e:	dd05      	ble.n	40717c <trans_anim_cb+0x10c>
        else if(v >= 255) x = tr->end_value._opa;
  407170:	2dfe      	cmp	r5, #254	; 0xfe
  407172:	dd05      	ble.n	407180 <trans_anim_cb+0x110>
  407174:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
  407176:	4b0f      	ldr	r3, [pc, #60]	; (4071b4 <trans_anim_cb+0x144>)
  407178:	4798      	blx	r3
  40717a:	e78d      	b.n	407098 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._opa;
  40717c:	7a22      	ldrb	r2, [r4, #8]
  40717e:	e7fa      	b.n	407176 <trans_anim_cb+0x106>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
  407180:	7a22      	ldrb	r2, [r4, #8]
  407182:	7b23      	ldrb	r3, [r4, #12]
  407184:	1a9b      	subs	r3, r3, r2
  407186:	fb05 f503 	mul.w	r5, r5, r3
  40718a:	eb02 2225 	add.w	r2, r2, r5, asr #8
  40718e:	b2d2      	uxtb	r2, r2
  407190:	e7f1      	b.n	407176 <trans_anim_cb+0x106>
        if(v < 128) x = tr->start_value._ptr;
  407192:	2d7f      	cmp	r5, #127	; 0x7f
  407194:	bfd4      	ite	le
  407196:	68a2      	ldrle	r2, [r4, #8]
        else x = tr->end_value._ptr;
  407198:	68e2      	ldrgt	r2, [r4, #12]
        _lv_style_set_ptr(style, tr->prop, x);
  40719a:	4b07      	ldr	r3, [pc, #28]	; (4071b8 <trans_anim_cb+0x148>)
  40719c:	4798      	blx	r3
  40719e:	e77b      	b.n	407098 <trans_anim_cb+0x28>
  4071a0:	00405219 	.word	0x00405219
  4071a4:	0040a24f 	.word	0x0040a24f
  4071a8:	004098e5 	.word	0x004098e5
  4071ac:	00406d55 	.word	0x00406d55
  4071b0:	00409a45 	.word	0x00409a45
  4071b4:	00409ba5 	.word	0x00409ba5
  4071b8:	00409cf1 	.word	0x00409cf1

004071bc <trans_anim_start_cb>:
{
  4071bc:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
  4071be:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
  4071c0:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  4071c2:	f005 030f 	and.w	r3, r5, #15
  4071c6:	2b08      	cmp	r3, #8
  4071c8:	dd13      	ble.n	4071f2 <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  4071ca:	2b0b      	cmp	r3, #11
  4071cc:	dd18      	ble.n	407200 <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  4071ce:	2b0d      	cmp	r3, #13
  4071d0:	dd1d      	ble.n	40720e <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
  4071d2:	462a      	mov	r2, r5
  4071d4:	79a1      	ldrb	r1, [r4, #6]
  4071d6:	6820      	ldr	r0, [r4, #0]
  4071d8:	4b10      	ldr	r3, [pc, #64]	; (40721c <trans_anim_start_cb+0x60>)
  4071da:	4798      	blx	r3
  4071dc:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
  4071de:	2300      	movs	r3, #0
  4071e0:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
  4071e2:	4623      	mov	r3, r4
  4071e4:	462a      	mov	r2, r5
  4071e6:	79a1      	ldrb	r1, [r4, #6]
  4071e8:	6820      	ldr	r0, [r4, #0]
  4071ea:	4e0d      	ldr	r6, [pc, #52]	; (407220 <trans_anim_start_cb+0x64>)
  4071ec:	47b0      	blx	r6
    tr->prop = prop_tmp;
  4071ee:	80a5      	strh	r5, [r4, #4]
  4071f0:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
  4071f2:	462a      	mov	r2, r5
  4071f4:	79a1      	ldrb	r1, [r4, #6]
  4071f6:	6820      	ldr	r0, [r4, #0]
  4071f8:	4b0a      	ldr	r3, [pc, #40]	; (407224 <trans_anim_start_cb+0x68>)
  4071fa:	4798      	blx	r3
  4071fc:	8120      	strh	r0, [r4, #8]
  4071fe:	e7ee      	b.n	4071de <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
  407200:	462a      	mov	r2, r5
  407202:	79a1      	ldrb	r1, [r4, #6]
  407204:	6820      	ldr	r0, [r4, #0]
  407206:	4b08      	ldr	r3, [pc, #32]	; (407228 <trans_anim_start_cb+0x6c>)
  407208:	4798      	blx	r3
  40720a:	8120      	strh	r0, [r4, #8]
  40720c:	e7e7      	b.n	4071de <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
  40720e:	462a      	mov	r2, r5
  407210:	79a1      	ldrb	r1, [r4, #6]
  407212:	6820      	ldr	r0, [r4, #0]
  407214:	4b05      	ldr	r3, [pc, #20]	; (40722c <trans_anim_start_cb+0x70>)
  407216:	4798      	blx	r3
  407218:	7220      	strb	r0, [r4, #8]
  40721a:	e7e0      	b.n	4071de <trans_anim_start_cb+0x22>
  40721c:	004068c1 	.word	0x004068c1
  407220:	00405245 	.word	0x00405245
  407224:	004069b5 	.word	0x004069b5
  407228:	004063c9 	.word	0x004063c9
  40722c:	00406459 	.word	0x00406459

00407230 <lv_obj_get_signal_cb>:
{
  407230:	b510      	push	{r4, lr}
  407232:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407234:	4b05      	ldr	r3, [pc, #20]	; (40724c <lv_obj_get_signal_cb+0x1c>)
  407236:	4798      	blx	r3
  407238:	b108      	cbz	r0, 40723e <lv_obj_get_signal_cb+0xe>
}
  40723a:	69e0      	ldr	r0, [r4, #28]
  40723c:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40723e:	4622      	mov	r2, r4
  407240:	2300      	movs	r3, #0
  407242:	4803      	ldr	r0, [pc, #12]	; (407250 <lv_obj_get_signal_cb+0x20>)
  407244:	4903      	ldr	r1, [pc, #12]	; (407254 <lv_obj_get_signal_cb+0x24>)
  407246:	4788      	blx	r1
  407248:	e7fe      	b.n	407248 <lv_obj_get_signal_cb+0x18>
  40724a:	bf00      	nop
  40724c:	004150ef 	.word	0x004150ef
  407250:	00425a74 	.word	0x00425a74
  407254:	004150f9 	.word	0x004150f9

00407258 <lv_obj_get_design_cb>:
{
  407258:	b510      	push	{r4, lr}
  40725a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40725c:	4b05      	ldr	r3, [pc, #20]	; (407274 <lv_obj_get_design_cb+0x1c>)
  40725e:	4798      	blx	r3
  407260:	b108      	cbz	r0, 407266 <lv_obj_get_design_cb+0xe>
}
  407262:	6a20      	ldr	r0, [r4, #32]
  407264:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407266:	4622      	mov	r2, r4
  407268:	2300      	movs	r3, #0
  40726a:	4803      	ldr	r0, [pc, #12]	; (407278 <lv_obj_get_design_cb+0x20>)
  40726c:	4903      	ldr	r1, [pc, #12]	; (40727c <lv_obj_get_design_cb+0x24>)
  40726e:	4788      	blx	r1
  407270:	e7fe      	b.n	407270 <lv_obj_get_design_cb+0x18>
  407272:	bf00      	nop
  407274:	004150ef 	.word	0x004150ef
  407278:	00425a74 	.word	0x00425a74
  40727c:	004150f9 	.word	0x004150f9

00407280 <lv_obj_get_ext_attr>:
{
  407280:	b510      	push	{r4, lr}
  407282:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407284:	4b05      	ldr	r3, [pc, #20]	; (40729c <lv_obj_get_ext_attr+0x1c>)
  407286:	4798      	blx	r3
  407288:	b108      	cbz	r0, 40728e <lv_obj_get_ext_attr+0xe>
}
  40728a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  40728c:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40728e:	4622      	mov	r2, r4
  407290:	2300      	movs	r3, #0
  407292:	4803      	ldr	r0, [pc, #12]	; (4072a0 <lv_obj_get_ext_attr+0x20>)
  407294:	4903      	ldr	r1, [pc, #12]	; (4072a4 <lv_obj_get_ext_attr+0x24>)
  407296:	4788      	blx	r1
  407298:	e7fe      	b.n	407298 <lv_obj_get_ext_attr+0x18>
  40729a:	bf00      	nop
  40729c:	004150ef 	.word	0x004150ef
  4072a0:	00425a74 	.word	0x00425a74
  4072a4:	004150f9 	.word	0x004150f9

004072a8 <lv_obj_get_group>:
{
  4072a8:	b510      	push	{r4, lr}
  4072aa:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4072ac:	4b05      	ldr	r3, [pc, #20]	; (4072c4 <lv_obj_get_group+0x1c>)
  4072ae:	4798      	blx	r3
  4072b0:	b108      	cbz	r0, 4072b6 <lv_obj_get_group+0xe>
}
  4072b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  4072b4:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4072b6:	4622      	mov	r2, r4
  4072b8:	2300      	movs	r3, #0
  4072ba:	4803      	ldr	r0, [pc, #12]	; (4072c8 <lv_obj_get_group+0x20>)
  4072bc:	4903      	ldr	r1, [pc, #12]	; (4072cc <lv_obj_get_group+0x24>)
  4072be:	4788      	blx	r1
  4072c0:	e7fe      	b.n	4072c0 <lv_obj_get_group+0x18>
  4072c2:	bf00      	nop
  4072c4:	004150ef 	.word	0x004150ef
  4072c8:	00425a74 	.word	0x00425a74
  4072cc:	004150f9 	.word	0x004150f9

004072d0 <obj_del_core>:
{
  4072d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4072d4:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
  4072d6:	2200      	movs	r2, #0
  4072d8:	2115      	movs	r1, #21
  4072da:	4b3a      	ldr	r3, [pc, #232]	; (4073c4 <obj_del_core+0xf4>)
  4072dc:	4798      	blx	r3
    lv_group_t * group = lv_obj_get_group(obj);
  4072de:	4628      	mov	r0, r5
  4072e0:	4b39      	ldr	r3, [pc, #228]	; (4073c8 <obj_del_core+0xf8>)
  4072e2:	4798      	blx	r3
    if(group) lv_group_remove_obj(obj);
  4072e4:	4606      	mov	r6, r0
  4072e6:	b110      	cbz	r0, 4072ee <obj_del_core+0x1e>
  4072e8:	4628      	mov	r0, r5
  4072ea:	4b38      	ldr	r3, [pc, #224]	; (4073cc <obj_del_core+0xfc>)
  4072ec:	4798      	blx	r3
    lv_anim_del(obj, NULL);
  4072ee:	2100      	movs	r1, #0
  4072f0:	4628      	mov	r0, r5
  4072f2:	4b37      	ldr	r3, [pc, #220]	; (4073d0 <obj_del_core+0x100>)
  4072f4:	4798      	blx	r3
    trans_del(obj, 0xFF, 0xFF, NULL);
  4072f6:	2300      	movs	r3, #0
  4072f8:	22ff      	movs	r2, #255	; 0xff
  4072fa:	4611      	mov	r1, r2
  4072fc:	4628      	mov	r0, r5
  4072fe:	4c35      	ldr	r4, [pc, #212]	; (4073d4 <obj_del_core+0x104>)
  407300:	47a0      	blx	r4
    i = _lv_ll_get_head(&(obj->child_ll));
  407302:	1d2c      	adds	r4, r5, #4
  407304:	4620      	mov	r0, r4
  407306:	4b34      	ldr	r3, [pc, #208]	; (4073d8 <obj_del_core+0x108>)
  407308:	4798      	blx	r3
    while(i != NULL) {
  40730a:	4603      	mov	r3, r0
  40730c:	b140      	cbz	r0, 407320 <obj_del_core+0x50>
        i = _lv_ll_get_head(&(obj->child_ll));
  40730e:	4f32      	ldr	r7, [pc, #200]	; (4073d8 <obj_del_core+0x108>)
        obj_del_core(i);
  407310:	4618      	mov	r0, r3
  407312:	f7ff ffdd 	bl	4072d0 <obj_del_core>
        i = _lv_ll_get_head(&(obj->child_ll));
  407316:	4620      	mov	r0, r4
  407318:	47b8      	blx	r7
    while(i != NULL) {
  40731a:	4603      	mov	r3, r0
  40731c:	2800      	cmp	r0, #0
  40731e:	d1f7      	bne.n	407310 <obj_del_core+0x40>
    lv_event_temp_data_t * t = event_temp_data_head;
  407320:	4b2e      	ldr	r3, [pc, #184]	; (4073dc <obj_del_core+0x10c>)
  407322:	681b      	ldr	r3, [r3, #0]
    while(t) {
  407324:	b13b      	cbz	r3, 407336 <obj_del_core+0x66>
        if(t->obj == obj) t->deleted = true;
  407326:	2101      	movs	r1, #1
  407328:	681a      	ldr	r2, [r3, #0]
  40732a:	4295      	cmp	r5, r2
  40732c:	bf08      	it	eq
  40732e:	7119      	strbeq	r1, [r3, #4]
        t = t->prev;
  407330:	689b      	ldr	r3, [r3, #8]
    while(t) {
  407332:	2b00      	cmp	r3, #0
  407334:	d1f8      	bne.n	407328 <obj_del_core+0x58>
    lv_indev_t * indev = lv_indev_get_next(NULL);
  407336:	2000      	movs	r0, #0
  407338:	4b29      	ldr	r3, [pc, #164]	; (4073e0 <obj_del_core+0x110>)
  40733a:	4798      	blx	r3
    while(indev) {
  40733c:	4604      	mov	r4, r0
  40733e:	b318      	cbz	r0, 407388 <obj_del_core+0xb8>
            lv_indev_reset(indev, obj);
  407340:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4073f4 <obj_del_core+0x124>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  407344:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4073f8 <obj_del_core+0x128>
        indev = lv_indev_get_next(indev);
  407348:	4f25      	ldr	r7, [pc, #148]	; (4073e0 <obj_del_core+0x110>)
  40734a:	e00c      	b.n	407366 <obj_del_core+0x96>
            lv_indev_reset(indev, obj);
  40734c:	4629      	mov	r1, r5
  40734e:	4620      	mov	r0, r4
  407350:	47c0      	blx	r8
        if(indev->proc.types.pointer.last_pressed == obj) {
  407352:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  407354:	429d      	cmp	r5, r3
  407356:	d00d      	beq.n	407374 <obj_del_core+0xa4>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  407358:	6da3      	ldr	r3, [r4, #88]	; 0x58
  40735a:	429e      	cmp	r6, r3
  40735c:	d00d      	beq.n	40737a <obj_del_core+0xaa>
        indev = lv_indev_get_next(indev);
  40735e:	4620      	mov	r0, r4
  407360:	47b8      	blx	r7
    while(indev) {
  407362:	4604      	mov	r4, r0
  407364:	b180      	cbz	r0, 407388 <obj_del_core+0xb8>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
  407366:	6b63      	ldr	r3, [r4, #52]	; 0x34
  407368:	429d      	cmp	r5, r3
  40736a:	d0ef      	beq.n	40734c <obj_del_core+0x7c>
  40736c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40736e:	429d      	cmp	r5, r3
  407370:	d1ef      	bne.n	407352 <obj_del_core+0x82>
  407372:	e7eb      	b.n	40734c <obj_del_core+0x7c>
            indev->proc.types.pointer.last_pressed = NULL;
  407374:	2300      	movs	r3, #0
  407376:	63e3      	str	r3, [r4, #60]	; 0x3c
  407378:	e7ee      	b.n	407358 <obj_del_core+0x88>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  40737a:	47c8      	blx	r9
  40737c:	4285      	cmp	r5, r0
  40737e:	d1ee      	bne.n	40735e <obj_del_core+0x8e>
            lv_indev_reset(indev, obj);
  407380:	4629      	mov	r1, r5
  407382:	4620      	mov	r0, r4
  407384:	47c0      	blx	r8
  407386:	e7ea      	b.n	40735e <obj_del_core+0x8e>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
  407388:	69eb      	ldr	r3, [r5, #28]
  40738a:	2200      	movs	r2, #0
  40738c:	4611      	mov	r1, r2
  40738e:	4628      	mov	r0, r5
  407390:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  407392:	4628      	mov	r0, r5
  407394:	4b13      	ldr	r3, [pc, #76]	; (4073e4 <obj_del_core+0x114>)
  407396:	4798      	blx	r3
    if(par == NULL) { /*It is a screen*/
  407398:	b160      	cbz	r0, 4073b4 <obj_del_core+0xe4>
        _lv_ll_remove(&(par->child_ll), obj);
  40739a:	4629      	mov	r1, r5
  40739c:	3004      	adds	r0, #4
  40739e:	4b12      	ldr	r3, [pc, #72]	; (4073e8 <obj_del_core+0x118>)
  4073a0:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
  4073a2:	6a68      	ldr	r0, [r5, #36]	; 0x24
  4073a4:	b108      	cbz	r0, 4073aa <obj_del_core+0xda>
  4073a6:	4b11      	ldr	r3, [pc, #68]	; (4073ec <obj_del_core+0x11c>)
  4073a8:	4798      	blx	r3
    lv_mem_free(obj); /*Free the object itself*/
  4073aa:	4628      	mov	r0, r5
  4073ac:	4b0f      	ldr	r3, [pc, #60]	; (4073ec <obj_del_core+0x11c>)
  4073ae:	4798      	blx	r3
  4073b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
  4073b4:	4628      	mov	r0, r5
  4073b6:	4b0e      	ldr	r3, [pc, #56]	; (4073f0 <obj_del_core+0x120>)
  4073b8:	4798      	blx	r3
        _lv_ll_remove(&d->scr_ll, obj);
  4073ba:	4629      	mov	r1, r5
  4073bc:	3038      	adds	r0, #56	; 0x38
  4073be:	4b0a      	ldr	r3, [pc, #40]	; (4073e8 <obj_del_core+0x118>)
  4073c0:	4798      	blx	r3
  4073c2:	e7ee      	b.n	4073a2 <obj_del_core+0xd2>
  4073c4:	00404e95 	.word	0x00404e95
  4073c8:	004072a9 	.word	0x004072a9
  4073cc:	0040305d 	.word	0x0040305d
  4073d0:	0041476d 	.word	0x0041476d
  4073d4:	00405245 	.word	0x00405245
  4073d8:	004153ed 	.word	0x004153ed
  4073dc:	2040c3e8 	.word	0x2040c3e8
  4073e0:	00414409 	.word	0x00414409
  4073e4:	00404fa5 	.word	0x00404fa5
  4073e8:	004154a5 	.word	0x004154a5
  4073ec:	004158b9 	.word	0x004158b9
  4073f0:	00405009 	.word	0x00405009
  4073f4:	004036f5 	.word	0x004036f5
  4073f8:	004037f9 	.word	0x004037f9

004073fc <lv_obj_del>:
{
  4073fc:	b570      	push	{r4, r5, r6, lr}
  4073fe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407400:	4b14      	ldr	r3, [pc, #80]	; (407454 <lv_obj_del+0x58>)
  407402:	4798      	blx	r3
  407404:	b928      	cbnz	r0, 407412 <lv_obj_del+0x16>
  407406:	4622      	mov	r2, r4
  407408:	2300      	movs	r3, #0
  40740a:	4813      	ldr	r0, [pc, #76]	; (407458 <lv_obj_del+0x5c>)
  40740c:	4913      	ldr	r1, [pc, #76]	; (40745c <lv_obj_del+0x60>)
  40740e:	4788      	blx	r1
  407410:	e7fe      	b.n	407410 <lv_obj_del+0x14>
    lv_obj_invalidate(obj);
  407412:	4620      	mov	r0, r4
  407414:	4b12      	ldr	r3, [pc, #72]	; (407460 <lv_obj_del+0x64>)
  407416:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  407418:	4620      	mov	r0, r4
  40741a:	4b12      	ldr	r3, [pc, #72]	; (407464 <lv_obj_del+0x68>)
  40741c:	4798      	blx	r3
    if(par == NULL) {
  40741e:	4605      	mov	r5, r0
  407420:	b140      	cbz	r0, 407434 <lv_obj_del+0x38>
    obj_del_core(obj);
  407422:	4620      	mov	r0, r4
  407424:	4b10      	ldr	r3, [pc, #64]	; (407468 <lv_obj_del+0x6c>)
  407426:	4798      	blx	r3
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
  407428:	69eb      	ldr	r3, [r5, #28]
  40742a:	2200      	movs	r2, #0
  40742c:	2101      	movs	r1, #1
  40742e:	4628      	mov	r0, r5
  407430:	4798      	blx	r3
  407432:	e00c      	b.n	40744e <lv_obj_del+0x52>
        disp = lv_obj_get_disp(obj);
  407434:	4620      	mov	r0, r4
  407436:	4b0d      	ldr	r3, [pc, #52]	; (40746c <lv_obj_del+0x70>)
  407438:	4798      	blx	r3
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
  40743a:	4605      	mov	r5, r0
  40743c:	b138      	cbz	r0, 40744e <lv_obj_del+0x52>
        if(disp->act_scr == obj) act_scr_del = true;
  40743e:	6c46      	ldr	r6, [r0, #68]	; 0x44
    obj_del_core(obj);
  407440:	4620      	mov	r0, r4
  407442:	4b09      	ldr	r3, [pc, #36]	; (407468 <lv_obj_del+0x6c>)
  407444:	4798      	blx	r3
    if(act_scr_del)  {
  407446:	42b4      	cmp	r4, r6
  407448:	d101      	bne.n	40744e <lv_obj_del+0x52>
        disp->act_scr = NULL;
  40744a:	2300      	movs	r3, #0
  40744c:	646b      	str	r3, [r5, #68]	; 0x44
}
  40744e:	2000      	movs	r0, #0
  407450:	bd70      	pop	{r4, r5, r6, pc}
  407452:	bf00      	nop
  407454:	004150ef 	.word	0x004150ef
  407458:	00425a74 	.word	0x00425a74
  40745c:	004150f9 	.word	0x004150f9
  407460:	00405565 	.word	0x00405565
  407464:	00404fa5 	.word	0x00404fa5
  407468:	004072d1 	.word	0x004072d1
  40746c:	00405009 	.word	0x00405009

00407470 <lv_obj_is_focused>:
{
  407470:	b510      	push	{r4, lr}
  407472:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407474:	4b09      	ldr	r3, [pc, #36]	; (40749c <lv_obj_is_focused+0x2c>)
  407476:	4798      	blx	r3
  407478:	b140      	cbz	r0, 40748c <lv_obj_is_focused+0x1c>
    if(obj->group_p) {
  40747a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  40747c:	b160      	cbz	r0, 407498 <lv_obj_is_focused+0x28>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
  40747e:	4b08      	ldr	r3, [pc, #32]	; (4074a0 <lv_obj_is_focused+0x30>)
  407480:	4798      	blx	r3
  407482:	4284      	cmp	r4, r0
  407484:	bf14      	ite	ne
  407486:	2000      	movne	r0, #0
  407488:	2001      	moveq	r0, #1
  40748a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40748c:	4622      	mov	r2, r4
  40748e:	2300      	movs	r3, #0
  407490:	4804      	ldr	r0, [pc, #16]	; (4074a4 <lv_obj_is_focused+0x34>)
  407492:	4905      	ldr	r1, [pc, #20]	; (4074a8 <lv_obj_is_focused+0x38>)
  407494:	4788      	blx	r1
  407496:	e7fe      	b.n	407496 <lv_obj_is_focused+0x26>
    return false;
  407498:	2000      	movs	r0, #0
}
  40749a:	bd10      	pop	{r4, pc}
  40749c:	004150ef 	.word	0x004150ef
  4074a0:	00403129 	.word	0x00403129
  4074a4:	00425a74 	.word	0x00425a74
  4074a8:	004150f9 	.word	0x004150f9

004074ac <lv_obj_is_point_on_coords>:
{
  4074ac:	b500      	push	{lr}
  4074ae:	b083      	sub	sp, #12
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
  4074b0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
  4074b4:	8a02      	ldrh	r2, [r0, #16]
  4074b6:	1ad2      	subs	r2, r2, r3
  4074b8:	f8ad 2000 	strh.w	r2, [sp]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
  4074bc:	8a82      	ldrh	r2, [r0, #20]
  4074be:	4413      	add	r3, r2
  4074c0:	f8ad 3004 	strh.w	r3, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
  4074c4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  4074c8:	8a42      	ldrh	r2, [r0, #18]
  4074ca:	1ad2      	subs	r2, r2, r3
  4074cc:	f8ad 2002 	strh.w	r2, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
  4074d0:	8ac2      	ldrh	r2, [r0, #22]
  4074d2:	4413      	add	r3, r2
  4074d4:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
  4074d8:	2200      	movs	r2, #0
  4074da:	4668      	mov	r0, sp
  4074dc:	4b02      	ldr	r3, [pc, #8]	; (4074e8 <lv_obj_is_point_on_coords+0x3c>)
  4074de:	4798      	blx	r3
}
  4074e0:	b003      	add	sp, #12
  4074e2:	f85d fb04 	ldr.w	pc, [sp], #4
  4074e6:	bf00      	nop
  4074e8:	004149f5 	.word	0x004149f5

004074ec <lv_obj_hittest>:
{
  4074ec:	b500      	push	{lr}
  4074ee:	b083      	sub	sp, #12
    if(obj->adv_hittest) {
  4074f0:	f990 3034 	ldrsb.w	r3, [r0, #52]	; 0x34
  4074f4:	2b00      	cmp	r3, #0
  4074f6:	db04      	blt.n	407502 <lv_obj_hittest+0x16>
        return lv_obj_is_point_on_coords(obj, point);
  4074f8:	4b07      	ldr	r3, [pc, #28]	; (407518 <lv_obj_hittest+0x2c>)
  4074fa:	4798      	blx	r3
}
  4074fc:	b003      	add	sp, #12
  4074fe:	f85d fb04 	ldr.w	pc, [sp], #4
        hit_info.point = point;
  407502:	9100      	str	r1, [sp, #0]
        hit_info.result = true;
  407504:	2301      	movs	r3, #1
  407506:	f88d 3004 	strb.w	r3, [sp, #4]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
  40750a:	69c3      	ldr	r3, [r0, #28]
  40750c:	466a      	mov	r2, sp
  40750e:	210a      	movs	r1, #10
  407510:	4798      	blx	r3
        return hit_info.result;
  407512:	f89d 0004 	ldrb.w	r0, [sp, #4]
  407516:	e7f1      	b.n	4074fc <lv_obj_hittest+0x10>
  407518:	004074ad 	.word	0x004074ad

0040751c <lv_obj_handle_get_type_signal>:
        if(buf->type[i] == NULL) break;
  40751c:	6803      	ldr	r3, [r0, #0]
  40751e:	b17b      	cbz	r3, 407540 <lv_obj_handle_get_type_signal+0x24>
{
  407520:	b410      	push	{r4}
  407522:	1d02      	adds	r2, r0, #4
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  407524:	2301      	movs	r3, #1
        if(buf->type[i] == NULL) break;
  407526:	f852 4b04 	ldr.w	r4, [r2], #4
  40752a:	b11c      	cbz	r4, 407534 <lv_obj_handle_get_type_signal+0x18>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  40752c:	3301      	adds	r3, #1
  40752e:	b2db      	uxtb	r3, r3
  407530:	2b07      	cmp	r3, #7
  407532:	d1f8      	bne.n	407526 <lv_obj_handle_get_type_signal+0xa>
    buf->type[i] = name;
  407534:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
  407538:	2001      	movs	r0, #1
  40753a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40753e:	4770      	bx	lr
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  407540:	2300      	movs	r3, #0
    buf->type[i] = name;
  407542:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
  407546:	2001      	movs	r0, #1
  407548:	4770      	bx	lr
	...

0040754c <lv_obj_init_draw_rect_dsc>:
{
  40754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407550:	4605      	mov	r5, r0
  407552:	460e      	mov	r6, r1
  407554:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  407556:	2201      	movs	r2, #1
  407558:	4ba9      	ldr	r3, [pc, #676]	; (407800 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40755a:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
  40755c:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  40755e:	f248 020c 	movw	r2, #32780	; 0x800c
  407562:	4631      	mov	r1, r6
  407564:	4628      	mov	r0, r5
  407566:	4ba7      	ldr	r3, [pc, #668]	; (407804 <lv_obj_init_draw_rect_dsc+0x2b8>)
  407568:	4798      	blx	r3
    if(opa_scale <= LV_OPA_MIN) {
  40756a:	2802      	cmp	r0, #2
  40756c:	d966      	bls.n	40763c <lv_obj_init_draw_rect_dsc+0xf0>
  40756e:	4607      	mov	r7, r0
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
  407570:	7b23      	ldrb	r3, [r4, #12]
  407572:	2b00      	cmp	r3, #0
  407574:	d16d      	bne.n	407652 <lv_obj_init_draw_rect_dsc+0x106>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  407576:	2230      	movs	r2, #48	; 0x30
  407578:	4631      	mov	r1, r6
  40757a:	4628      	mov	r0, r5
  40757c:	4ba0      	ldr	r3, [pc, #640]	; (407800 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40757e:	4798      	blx	r3
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
  407580:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
  407582:	b118      	cbz	r0, 40758c <lv_obj_init_draw_rect_dsc+0x40>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
  407584:	7d23      	ldrb	r3, [r4, #20]
  407586:	2b00      	cmp	r3, #0
  407588:	f040 8093 	bne.w	4076b2 <lv_obj_init_draw_rect_dsc+0x166>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  40758c:	2240      	movs	r2, #64	; 0x40
  40758e:	4631      	mov	r1, r6
  407590:	4628      	mov	r0, r5
  407592:	4b9b      	ldr	r3, [pc, #620]	; (407800 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407594:	4798      	blx	r3
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
  407596:	8360      	strh	r0, [r4, #26]
    if(draw_dsc->outline_width) {
  407598:	b118      	cbz	r0, 4075a2 <lv_obj_init_draw_rect_dsc+0x56>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
  40759a:	7fa3      	ldrb	r3, [r4, #30]
  40759c:	2b00      	cmp	r3, #0
  40759e:	f040 80a5 	bne.w	4076ec <lv_obj_init_draw_rect_dsc+0x1a0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  4075a2:	226e      	movs	r2, #110	; 0x6e
  4075a4:	4631      	mov	r1, r6
  4075a6:	4628      	mov	r0, r5
  4075a8:	4b97      	ldr	r3, [pc, #604]	; (407808 <lv_obj_init_draw_rect_dsc+0x2bc>)
  4075aa:	4798      	blx	r3
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
  4075ac:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(draw_dsc->pattern_image) {
  4075ae:	b120      	cbz	r0, 4075ba <lv_obj_init_draw_rect_dsc+0x6e>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
  4075b0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  4075b4:	2b00      	cmp	r3, #0
  4075b6:	f040 80b5 	bne.w	407724 <lv_obj_init_draw_rect_dsc+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  4075ba:	2250      	movs	r2, #80	; 0x50
  4075bc:	4631      	mov	r1, r6
  4075be:	4628      	mov	r0, r5
  4075c0:	4b8f      	ldr	r3, [pc, #572]	; (407800 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4075c2:	4798      	blx	r3
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
  4075c4:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->shadow_width) {
  4075c6:	b120      	cbz	r0, 4075d2 <lv_obj_init_draw_rect_dsc+0x86>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  4075c8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4075cc:	2b02      	cmp	r3, #2
  4075ce:	f200 80ee 	bhi.w	4077ae <lv_obj_init_draw_rect_dsc+0x262>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  4075d2:	227f      	movs	r2, #127	; 0x7f
  4075d4:	4631      	mov	r1, r6
  4075d6:	4628      	mov	r0, r5
  4075d8:	4b8b      	ldr	r3, [pc, #556]	; (407808 <lv_obj_init_draw_rect_dsc+0x2bc>)
  4075da:	4798      	blx	r3
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
  4075dc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(draw_dsc->value_str) {
  4075de:	b120      	cbz	r0, 4075ea <lv_obj_init_draw_rect_dsc+0x9e>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
  4075e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4075e4:	2b02      	cmp	r3, #2
  4075e6:	f200 8115 	bhi.w	407814 <lv_obj_init_draw_rect_dsc+0x2c8>
    if(opa_scale < LV_OPA_MAX) {
  4075ea:	2ffc      	cmp	r7, #252	; 0xfc
  4075ec:	d824      	bhi.n	407638 <lv_obj_init_draw_rect_dsc+0xec>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
  4075ee:	b2bf      	uxth	r7, r7
  4075f0:	7b23      	ldrb	r3, [r4, #12]
  4075f2:	fb13 f307 	smulbb	r3, r3, r7
  4075f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4075fa:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
  4075fc:	7d23      	ldrb	r3, [r4, #20]
  4075fe:	fb13 f307 	smulbb	r3, r3, r7
  407602:	f3c3 2307 	ubfx	r3, r3, #8, #8
  407606:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
  407608:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40760c:	fb13 f307 	smulbb	r3, r3, r7
  407610:	f3c3 2307 	ubfx	r3, r3, #8, #8
  407614:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
  407618:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  40761c:	fb13 f307 	smulbb	r3, r3, r7
  407620:	f3c3 2307 	ubfx	r3, r3, #8, #8
  407624:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
  407628:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40762c:	fb13 f707 	smulbb	r7, r3, r7
  407630:	f3c7 2707 	ubfx	r7, r7, #8, #8
  407634:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  407638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        draw_dsc->bg_opa = LV_OPA_TRANSP;
  40763c:	2300      	movs	r3, #0
  40763e:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
  407640:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
  407642:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
  407646:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
  40764a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
  40764e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  407652:	222c      	movs	r2, #44	; 0x2c
  407654:	4631      	mov	r1, r6
  407656:	4628      	mov	r0, r5
  407658:	4b6a      	ldr	r3, [pc, #424]	; (407804 <lv_obj_init_draw_rect_dsc+0x2b8>)
  40765a:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
  40765c:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
  40765e:	2802      	cmp	r0, #2
  407660:	d989      	bls.n	407576 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  407662:	2229      	movs	r2, #41	; 0x29
  407664:	4631      	mov	r1, r6
  407666:	4628      	mov	r0, r5
  407668:	4b68      	ldr	r3, [pc, #416]	; (40780c <lv_obj_init_draw_rect_dsc+0x2c0>)
  40766a:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
  40766c:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
  40766e:	2223      	movs	r2, #35	; 0x23
  407670:	4631      	mov	r1, r6
  407672:	4628      	mov	r0, r5
  407674:	4b62      	ldr	r3, [pc, #392]	; (407800 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407676:	4798      	blx	r3
  407678:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
  40767a:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
  40767c:	b930      	cbnz	r0, 40768c <lv_obj_init_draw_rect_dsc+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  40767e:	2220      	movs	r2, #32
  407680:	4631      	mov	r1, r6
  407682:	4628      	mov	r0, r5
  407684:	4b5e      	ldr	r3, [pc, #376]	; (407800 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407686:	4798      	blx	r3
  407688:	7360      	strb	r0, [r4, #13]
  40768a:	e774      	b.n	407576 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
  40768c:	222a      	movs	r2, #42	; 0x2a
  40768e:	4631      	mov	r1, r6
  407690:	4628      	mov	r0, r5
  407692:	4b5e      	ldr	r3, [pc, #376]	; (40780c <lv_obj_init_draw_rect_dsc+0x2c0>)
  407694:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
  407696:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
  407698:	2221      	movs	r2, #33	; 0x21
  40769a:	4631      	mov	r1, r6
  40769c:	4628      	mov	r0, r5
  40769e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 407800 <lv_obj_init_draw_rect_dsc+0x2b4>
  4076a2:	47c0      	blx	r8
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
  4076a4:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
  4076a6:	2222      	movs	r2, #34	; 0x22
  4076a8:	4631      	mov	r1, r6
  4076aa:	4628      	mov	r0, r5
  4076ac:	47c0      	blx	r8
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
  4076ae:	8160      	strh	r0, [r4, #10]
  4076b0:	e7e5      	b.n	40767e <lv_obj_init_draw_rect_dsc+0x132>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  4076b2:	223c      	movs	r2, #60	; 0x3c
  4076b4:	4631      	mov	r1, r6
  4076b6:	4628      	mov	r0, r5
  4076b8:	4b52      	ldr	r3, [pc, #328]	; (407804 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4076ba:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
  4076bc:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
  4076be:	2802      	cmp	r0, #2
  4076c0:	d806      	bhi.n	4076d0 <lv_obj_init_draw_rect_dsc+0x184>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  4076c2:	2232      	movs	r2, #50	; 0x32
  4076c4:	4631      	mov	r1, r6
  4076c6:	4628      	mov	r0, r5
  4076c8:	4b4d      	ldr	r3, [pc, #308]	; (407800 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4076ca:	4798      	blx	r3
  4076cc:	7560      	strb	r0, [r4, #21]
  4076ce:	e75d      	b.n	40758c <lv_obj_init_draw_rect_dsc+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  4076d0:	2231      	movs	r2, #49	; 0x31
  4076d2:	4631      	mov	r1, r6
  4076d4:	4628      	mov	r0, r5
  4076d6:	4b4a      	ldr	r3, [pc, #296]	; (407800 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4076d8:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
  4076da:	b2c0      	uxtb	r0, r0
  4076dc:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  4076de:	2239      	movs	r2, #57	; 0x39
  4076e0:	4631      	mov	r1, r6
  4076e2:	4628      	mov	r0, r5
  4076e4:	4b49      	ldr	r3, [pc, #292]	; (40780c <lv_obj_init_draw_rect_dsc+0x2c0>)
  4076e6:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
  4076e8:	81e0      	strh	r0, [r4, #14]
  4076ea:	e7ea      	b.n	4076c2 <lv_obj_init_draw_rect_dsc+0x176>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  4076ec:	224c      	movs	r2, #76	; 0x4c
  4076ee:	4631      	mov	r1, r6
  4076f0:	4628      	mov	r0, r5
  4076f2:	4b44      	ldr	r3, [pc, #272]	; (407804 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4076f4:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
  4076f6:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
  4076f8:	2802      	cmp	r0, #2
  4076fa:	d806      	bhi.n	40770a <lv_obj_init_draw_rect_dsc+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  4076fc:	2242      	movs	r2, #66	; 0x42
  4076fe:	4631      	mov	r1, r6
  407700:	4628      	mov	r0, r5
  407702:	4b3f      	ldr	r3, [pc, #252]	; (407800 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407704:	4798      	blx	r3
  407706:	77e0      	strb	r0, [r4, #31]
  407708:	e74b      	b.n	4075a2 <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  40770a:	2241      	movs	r2, #65	; 0x41
  40770c:	4631      	mov	r1, r6
  40770e:	4628      	mov	r0, r5
  407710:	4b3b      	ldr	r3, [pc, #236]	; (407800 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407712:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
  407714:	83a0      	strh	r0, [r4, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  407716:	2249      	movs	r2, #73	; 0x49
  407718:	4631      	mov	r1, r6
  40771a:	4628      	mov	r0, r5
  40771c:	4b3b      	ldr	r3, [pc, #236]	; (40780c <lv_obj_init_draw_rect_dsc+0x2c0>)
  40771e:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
  407720:	8320      	strh	r0, [r4, #24]
  407722:	e7eb      	b.n	4076fc <lv_obj_init_draw_rect_dsc+0x1b0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  407724:	226c      	movs	r2, #108	; 0x6c
  407726:	4631      	mov	r1, r6
  407728:	4628      	mov	r0, r5
  40772a:	4b36      	ldr	r3, [pc, #216]	; (407804 <lv_obj_init_draw_rect_dsc+0x2b8>)
  40772c:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
  40772e:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
  407732:	2802      	cmp	r0, #2
  407734:	f67f af41 	bls.w	4075ba <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
  407738:	226d      	movs	r2, #109	; 0x6d
  40773a:	4631      	mov	r1, r6
  40773c:	4628      	mov	r0, r5
  40773e:	4b31      	ldr	r3, [pc, #196]	; (407804 <lv_obj_init_draw_rect_dsc+0x2b8>)
  407740:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
  407742:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
  407746:	2261      	movs	r2, #97	; 0x61
  407748:	4631      	mov	r1, r6
  40774a:	4628      	mov	r0, r5
  40774c:	4b2c      	ldr	r3, [pc, #176]	; (407800 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40774e:	4798      	blx	r3
  407750:	3000      	adds	r0, #0
  407752:	bf18      	it	ne
  407754:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
  407756:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  40775a:	f360 0300 	bfi	r3, r0, #0, #1
  40775e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
  407762:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  407764:	4b2a      	ldr	r3, [pc, #168]	; (407810 <lv_obj_init_draw_rect_dsc+0x2c4>)
  407766:	4798      	blx	r3
  407768:	2802      	cmp	r0, #2
  40776a:	d00b      	beq.n	407784 <lv_obj_init_draw_rect_dsc+0x238>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
  40776c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  407770:	2b02      	cmp	r3, #2
  407772:	d815      	bhi.n	4077a0 <lv_obj_init_draw_rect_dsc+0x254>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  407774:	2260      	movs	r2, #96	; 0x60
  407776:	4631      	mov	r1, r6
  407778:	4628      	mov	r0, r5
  40777a:	4b21      	ldr	r3, [pc, #132]	; (407800 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40777c:	4798      	blx	r3
  40777e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  407782:	e71a      	b.n	4075ba <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  407784:	2269      	movs	r2, #105	; 0x69
  407786:	4631      	mov	r1, r6
  407788:	4628      	mov	r0, r5
  40778a:	4b20      	ldr	r3, [pc, #128]	; (40780c <lv_obj_init_draw_rect_dsc+0x2c0>)
  40778c:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  40778e:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  407790:	f248 028e 	movw	r2, #32910	; 0x808e
  407794:	4631      	mov	r1, r6
  407796:	4628      	mov	r0, r5
  407798:	4b1b      	ldr	r3, [pc, #108]	; (407808 <lv_obj_init_draw_rect_dsc+0x2bc>)
  40779a:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
  40779c:	6320      	str	r0, [r4, #48]	; 0x30
  40779e:	e7e9      	b.n	407774 <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  4077a0:	2269      	movs	r2, #105	; 0x69
  4077a2:	4631      	mov	r1, r6
  4077a4:	4628      	mov	r0, r5
  4077a6:	4b19      	ldr	r3, [pc, #100]	; (40780c <lv_obj_init_draw_rect_dsc+0x2c0>)
  4077a8:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  4077aa:	86a0      	strh	r0, [r4, #52]	; 0x34
  4077ac:	e7e2      	b.n	407774 <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  4077ae:	225c      	movs	r2, #92	; 0x5c
  4077b0:	4631      	mov	r1, r6
  4077b2:	4628      	mov	r0, r5
  4077b4:	4b13      	ldr	r3, [pc, #76]	; (407804 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4077b6:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
  4077b8:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  4077bc:	2802      	cmp	r0, #2
  4077be:	f67f af08 	bls.w	4075d2 <lv_obj_init_draw_rect_dsc+0x86>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  4077c2:	2251      	movs	r2, #81	; 0x51
  4077c4:	4631      	mov	r1, r6
  4077c6:	4628      	mov	r0, r5
  4077c8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 407800 <lv_obj_init_draw_rect_dsc+0x2b4>
  4077cc:	47c0      	blx	r8
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
  4077ce:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  4077d0:	2252      	movs	r2, #82	; 0x52
  4077d2:	4631      	mov	r1, r6
  4077d4:	4628      	mov	r0, r5
  4077d6:	47c0      	blx	r8
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
  4077d8:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  4077da:	2253      	movs	r2, #83	; 0x53
  4077dc:	4631      	mov	r1, r6
  4077de:	4628      	mov	r0, r5
  4077e0:	47c0      	blx	r8
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
  4077e2:	8520      	strh	r0, [r4, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  4077e4:	2259      	movs	r2, #89	; 0x59
  4077e6:	4631      	mov	r1, r6
  4077e8:	4628      	mov	r0, r5
  4077ea:	4b08      	ldr	r3, [pc, #32]	; (40780c <lv_obj_init_draw_rect_dsc+0x2c0>)
  4077ec:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
  4077ee:	8420      	strh	r0, [r4, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  4077f0:	2254      	movs	r2, #84	; 0x54
  4077f2:	4631      	mov	r1, r6
  4077f4:	4628      	mov	r0, r5
  4077f6:	47c0      	blx	r8
  4077f8:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  4077fc:	e6e9      	b.n	4075d2 <lv_obj_init_draw_rect_dsc+0x86>
  4077fe:	bf00      	nop
  407800:	004069b5 	.word	0x004069b5
  407804:	00406459 	.word	0x00406459
  407808:	004068c1 	.word	0x004068c1
  40780c:	004063c9 	.word	0x004063c9
  407810:	0040ccd9 	.word	0x0040ccd9
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  407814:	227c      	movs	r2, #124	; 0x7c
  407816:	4631      	mov	r1, r6
  407818:	4628      	mov	r0, r5
  40781a:	4b1d      	ldr	r3, [pc, #116]	; (407890 <lv_obj_init_draw_rect_dsc+0x344>)
  40781c:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
  40781e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
  407822:	2802      	cmp	r0, #2
  407824:	f67f aee1 	bls.w	4075ea <lv_obj_init_draw_rect_dsc+0x9e>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  407828:	2273      	movs	r2, #115	; 0x73
  40782a:	4631      	mov	r1, r6
  40782c:	4628      	mov	r0, r5
  40782e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 40789c <lv_obj_init_draw_rect_dsc+0x350>
  407832:	47c0      	blx	r8
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
  407834:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  407838:	2274      	movs	r2, #116	; 0x74
  40783a:	4631      	mov	r1, r6
  40783c:	4628      	mov	r0, r5
  40783e:	47c0      	blx	r8
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
  407840:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  407844:	2279      	movs	r2, #121	; 0x79
  407846:	4631      	mov	r1, r6
  407848:	4628      	mov	r0, r5
  40784a:	4b12      	ldr	r3, [pc, #72]	; (407894 <lv_obj_init_draw_rect_dsc+0x348>)
  40784c:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
  40784e:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  407852:	227e      	movs	r2, #126	; 0x7e
  407854:	4631      	mov	r1, r6
  407856:	4628      	mov	r0, r5
  407858:	4b0f      	ldr	r3, [pc, #60]	; (407898 <lv_obj_init_draw_rect_dsc+0x34c>)
  40785a:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
  40785c:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  40785e:	2270      	movs	r2, #112	; 0x70
  407860:	4631      	mov	r1, r6
  407862:	4628      	mov	r0, r5
  407864:	47c0      	blx	r8
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
  407866:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
  40786a:	2271      	movs	r2, #113	; 0x71
  40786c:	4631      	mov	r1, r6
  40786e:	4628      	mov	r0, r5
  407870:	47c0      	blx	r8
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
  407872:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  407876:	2275      	movs	r2, #117	; 0x75
  407878:	4631      	mov	r1, r6
  40787a:	4628      	mov	r0, r5
  40787c:	47c0      	blx	r8
  40787e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  407882:	2272      	movs	r2, #114	; 0x72
  407884:	4631      	mov	r1, r6
  407886:	4628      	mov	r0, r5
  407888:	47c0      	blx	r8
  40788a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  40788e:	e6ac      	b.n	4075ea <lv_obj_init_draw_rect_dsc+0x9e>
  407890:	00406459 	.word	0x00406459
  407894:	004063c9 	.word	0x004063c9
  407898:	004068c1 	.word	0x004068c1
  40789c:	004069b5 	.word	0x004069b5

004078a0 <lv_obj_design>:
{
  4078a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4078a4:	b09a      	sub	sp, #104	; 0x68
  4078a6:	4604      	mov	r4, r0
  4078a8:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
  4078aa:	2a02      	cmp	r2, #2
  4078ac:	d008      	beq.n	4078c0 <lv_obj_design+0x20>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  4078ae:	2a00      	cmp	r2, #0
  4078b0:	d06c      	beq.n	40798c <lv_obj_design+0xec>
    else if(mode == LV_DESIGN_DRAW_POST) {
  4078b2:	2a01      	cmp	r2, #1
  4078b4:	f000 80f3 	beq.w	407a9e <lv_obj_design+0x1fe>
    return LV_DESIGN_RES_OK;
  4078b8:	2000      	movs	r0, #0
}
  4078ba:	b01a      	add	sp, #104	; 0x68
  4078bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  4078c0:	2100      	movs	r1, #0
  4078c2:	4ba2      	ldr	r3, [pc, #648]	; (407b4c <lv_obj_design+0x2ac>)
  4078c4:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  4078c6:	b108      	cbz	r0, 4078cc <lv_obj_design+0x2c>
  4078c8:	2003      	movs	r0, #3
  4078ca:	e7f6      	b.n	4078ba <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4078cc:	2201      	movs	r2, #1
  4078ce:	2100      	movs	r1, #0
  4078d0:	4620      	mov	r0, r4
  4078d2:	4d9e      	ldr	r5, [pc, #632]	; (407b4c <lv_obj_design+0x2ac>)
  4078d4:	47a8      	blx	r5
  4078d6:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  4078d8:	2204      	movs	r2, #4
  4078da:	2100      	movs	r1, #0
  4078dc:	4620      	mov	r0, r4
  4078de:	47a8      	blx	r5
  4078e0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  4078e2:	2205      	movs	r2, #5
  4078e4:	2100      	movs	r1, #0
  4078e6:	4620      	mov	r0, r4
  4078e8:	47a8      	blx	r5
  4078ea:	f104 030f 	add.w	r3, r4, #15
  4078ee:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
  4078f2:	aa05      	add	r2, sp, #20
        *d8 = *s8;
  4078f4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4078f8:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  4078fc:	429d      	cmp	r5, r3
  4078fe:	d1f9      	bne.n	4078f4 <lv_obj_design+0x54>
        coords.x1 -= w;
  407900:	fa1f f888 	uxth.w	r8, r8
  407904:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  407908:	eba3 0308 	sub.w	r3, r3, r8
  40790c:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
  407910:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  407914:	4498      	add	r8, r3
  407916:	f8ad 8018 	strh.w	r8, [sp, #24]
        coords.y1 -= h;
  40791a:	b280      	uxth	r0, r0
  40791c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  407920:	1a1b      	subs	r3, r3, r0
  407922:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
  407926:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  40792a:	4418      	add	r0, r3
  40792c:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
  407930:	463a      	mov	r2, r7
  407932:	a905      	add	r1, sp, #20
  407934:	4630      	mov	r0, r6
  407936:	4b86      	ldr	r3, [pc, #536]	; (407b50 <lv_obj_design+0x2b0>)
  407938:	4798      	blx	r3
  40793a:	b908      	cbnz	r0, 407940 <lv_obj_design+0xa0>
  40793c:	2002      	movs	r0, #2
  40793e:	e7bc      	b.n	4078ba <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  407940:	222c      	movs	r2, #44	; 0x2c
  407942:	2100      	movs	r1, #0
  407944:	4620      	mov	r0, r4
  407946:	4b83      	ldr	r3, [pc, #524]	; (407b54 <lv_obj_design+0x2b4>)
  407948:	4798      	blx	r3
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  40794a:	28fc      	cmp	r0, #252	; 0xfc
  40794c:	d801      	bhi.n	407952 <lv_obj_design+0xb2>
  40794e:	2002      	movs	r0, #2
  407950:	e7b3      	b.n	4078ba <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  407952:	2220      	movs	r2, #32
  407954:	2100      	movs	r1, #0
  407956:	4620      	mov	r0, r4
  407958:	4b7c      	ldr	r3, [pc, #496]	; (407b4c <lv_obj_design+0x2ac>)
  40795a:	4798      	blx	r3
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  40795c:	b2c0      	uxtb	r0, r0
  40795e:	b108      	cbz	r0, 407964 <lv_obj_design+0xc4>
  407960:	2002      	movs	r0, #2
  407962:	e7aa      	b.n	4078ba <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  407964:	2232      	movs	r2, #50	; 0x32
  407966:	2100      	movs	r1, #0
  407968:	4620      	mov	r0, r4
  40796a:	4b78      	ldr	r3, [pc, #480]	; (407b4c <lv_obj_design+0x2ac>)
  40796c:	4798      	blx	r3
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  40796e:	b2c0      	uxtb	r0, r0
  407970:	b108      	cbz	r0, 407976 <lv_obj_design+0xd6>
  407972:	2002      	movs	r0, #2
  407974:	e7a1      	b.n	4078ba <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407976:	f248 020c 	movw	r2, #32780	; 0x800c
  40797a:	2100      	movs	r1, #0
  40797c:	4620      	mov	r0, r4
  40797e:	4b75      	ldr	r3, [pc, #468]	; (407b54 <lv_obj_design+0x2b4>)
  407980:	4798      	blx	r3
        return LV_DESIGN_RES_COVER;
  407982:	28fd      	cmp	r0, #253	; 0xfd
  407984:	bf34      	ite	cc
  407986:	2002      	movcc	r0, #2
  407988:	2001      	movcs	r0, #1
  40798a:	e796      	b.n	4078ba <lv_obj_design+0x1a>
        lv_draw_rect_dsc_init(&draw_dsc);
  40798c:	a805      	add	r0, sp, #20
  40798e:	4b72      	ldr	r3, [pc, #456]	; (407b58 <lv_obj_design+0x2b8>)
  407990:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  407992:	2233      	movs	r2, #51	; 0x33
  407994:	2100      	movs	r1, #0
  407996:	4620      	mov	r0, r4
  407998:	4b6c      	ldr	r3, [pc, #432]	; (407b4c <lv_obj_design+0x2ac>)
  40799a:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  40799c:	b128      	cbz	r0, 4079aa <lv_obj_design+0x10a>
            draw_dsc.border_post = 1;
  40799e:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  4079a2:	f043 0301 	orr.w	r3, r3, #1
  4079a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  4079aa:	aa05      	add	r2, sp, #20
  4079ac:	2100      	movs	r1, #0
  4079ae:	4620      	mov	r0, r4
  4079b0:	4b6a      	ldr	r3, [pc, #424]	; (407b5c <lv_obj_design+0x2bc>)
  4079b2:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  4079b4:	2204      	movs	r2, #4
  4079b6:	2100      	movs	r1, #0
  4079b8:	4620      	mov	r0, r4
  4079ba:	4d64      	ldr	r5, [pc, #400]	; (407b4c <lv_obj_design+0x2ac>)
  4079bc:	47a8      	blx	r5
  4079be:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  4079c0:	2205      	movs	r2, #5
  4079c2:	2100      	movs	r1, #0
  4079c4:	4620      	mov	r0, r4
  4079c6:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  4079c8:	f104 0710 	add.w	r7, r4, #16
  4079cc:	f104 030f 	add.w	r3, r4, #15
  4079d0:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
  4079d4:	aa01      	add	r2, sp, #4
        *d8 = *s8;
  4079d6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4079da:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  4079de:	42ab      	cmp	r3, r5
  4079e0:	d1f9      	bne.n	4079d6 <lv_obj_design+0x136>
        coords.x1 -= w;
  4079e2:	fa1f f888 	uxth.w	r8, r8
  4079e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4079ea:	eba3 0308 	sub.w	r3, r3, r8
  4079ee:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
  4079f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  4079f6:	4498      	add	r8, r3
  4079f8:	f8ad 8008 	strh.w	r8, [sp, #8]
        coords.y1 -= h;
  4079fc:	b280      	uxth	r0, r0
  4079fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  407a02:	1a1b      	subs	r3, r3, r0
  407a04:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
  407a08:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  407a0c:	4418      	add	r0, r3
  407a0e:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
  407a12:	aa05      	add	r2, sp, #20
  407a14:	4631      	mov	r1, r6
  407a16:	a801      	add	r0, sp, #4
  407a18:	4b51      	ldr	r3, [pc, #324]	; (407b60 <lv_obj_design+0x2c0>)
  407a1a:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  407a1c:	2202      	movs	r2, #2
  407a1e:	2100      	movs	r1, #0
  407a20:	4620      	mov	r0, r4
  407a22:	4b4a      	ldr	r3, [pc, #296]	; (407b4c <lv_obj_design+0x2ac>)
  407a24:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  407a26:	b908      	cbnz	r0, 407a2c <lv_obj_design+0x18c>
    return LV_DESIGN_RES_OK;
  407a28:	2000      	movs	r0, #0
  407a2a:	e746      	b.n	4078ba <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  407a2c:	201c      	movs	r0, #28
  407a2e:	4b4d      	ldr	r3, [pc, #308]	; (407b64 <lv_obj_design+0x2c4>)
  407a30:	4798      	blx	r3
  407a32:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  407a34:	2201      	movs	r2, #1
  407a36:	2100      	movs	r1, #0
  407a38:	4620      	mov	r0, r4
  407a3a:	4b44      	ldr	r3, [pc, #272]	; (407b4c <lv_obj_design+0x2ac>)
  407a3c:	4798      	blx	r3
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  407a3e:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  407a42:	f013 0f01 	tst.w	r3, #1
  407a46:	d01e      	beq.n	407a86 <lv_obj_design+0x1e6>
  407a48:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  407a4c:	2b01      	cmp	r3, #1
  407a4e:	d91a      	bls.n	407a86 <lv_obj_design+0x1e6>
  407a50:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  407a54:	2b00      	cmp	r3, #0
  407a56:	dd16      	ble.n	407a86 <lv_obj_design+0x1e6>
                cc_area.x1 = obj->coords.x1 + 1;
  407a58:	8a23      	ldrh	r3, [r4, #16]
  407a5a:	3301      	adds	r3, #1
  407a5c:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
  407a60:	8a63      	ldrh	r3, [r4, #18]
  407a62:	3301      	adds	r3, #1
  407a64:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
  407a68:	8aa3      	ldrh	r3, [r4, #20]
  407a6a:	3b01      	subs	r3, #1
  407a6c:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
  407a70:	8ae3      	ldrh	r3, [r4, #22]
  407a72:	3b01      	subs	r3, #1
  407a74:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
  407a78:	2300      	movs	r3, #0
  407a7a:	4602      	mov	r2, r0
  407a7c:	a903      	add	r1, sp, #12
  407a7e:	4628      	mov	r0, r5
  407a80:	4e39      	ldr	r6, [pc, #228]	; (407b68 <lv_obj_design+0x2c8>)
  407a82:	47b0      	blx	r6
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  407a84:	e005      	b.n	407a92 <lv_obj_design+0x1f2>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
  407a86:	2300      	movs	r3, #0
  407a88:	4602      	mov	r2, r0
  407a8a:	4639      	mov	r1, r7
  407a8c:	4628      	mov	r0, r5
  407a8e:	4e36      	ldr	r6, [pc, #216]	; (407b68 <lv_obj_design+0x2c8>)
  407a90:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
  407a92:	f504 7118 	add.w	r1, r4, #608	; 0x260
  407a96:	4628      	mov	r0, r5
  407a98:	4b34      	ldr	r3, [pc, #208]	; (407b6c <lv_obj_design+0x2cc>)
  407a9a:	4798      	blx	r3
  407a9c:	e7c4      	b.n	407a28 <lv_obj_design+0x188>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  407a9e:	2202      	movs	r2, #2
  407aa0:	2100      	movs	r1, #0
  407aa2:	4b2a      	ldr	r3, [pc, #168]	; (407b4c <lv_obj_design+0x2ac>)
  407aa4:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  407aa6:	b938      	cbnz	r0, 407ab8 <lv_obj_design+0x218>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  407aa8:	2233      	movs	r2, #51	; 0x33
  407aaa:	2100      	movs	r1, #0
  407aac:	4620      	mov	r0, r4
  407aae:	4b27      	ldr	r3, [pc, #156]	; (407b4c <lv_obj_design+0x2ac>)
  407ab0:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  407ab2:	b940      	cbnz	r0, 407ac6 <lv_obj_design+0x226>
    return LV_DESIGN_RES_OK;
  407ab4:	2000      	movs	r0, #0
  407ab6:	e700      	b.n	4078ba <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
  407ab8:	f504 7018 	add.w	r0, r4, #608	; 0x260
  407abc:	4b2c      	ldr	r3, [pc, #176]	; (407b70 <lv_obj_design+0x2d0>)
  407abe:	4798      	blx	r3
            _lv_mem_buf_release(param);
  407ac0:	4b2c      	ldr	r3, [pc, #176]	; (407b74 <lv_obj_design+0x2d4>)
  407ac2:	4798      	blx	r3
  407ac4:	e7f0      	b.n	407aa8 <lv_obj_design+0x208>
            lv_draw_rect_dsc_init(&draw_dsc);
  407ac6:	a805      	add	r0, sp, #20
  407ac8:	4b23      	ldr	r3, [pc, #140]	; (407b58 <lv_obj_design+0x2b8>)
  407aca:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  407acc:	2500      	movs	r5, #0
  407ace:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  407ad2:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  407ad6:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
  407ada:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  407ade:	aa05      	add	r2, sp, #20
  407ae0:	4629      	mov	r1, r5
  407ae2:	4620      	mov	r0, r4
  407ae4:	4b1d      	ldr	r3, [pc, #116]	; (407b5c <lv_obj_design+0x2bc>)
  407ae6:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  407ae8:	2204      	movs	r2, #4
  407aea:	4629      	mov	r1, r5
  407aec:	4620      	mov	r0, r4
  407aee:	4f17      	ldr	r7, [pc, #92]	; (407b4c <lv_obj_design+0x2ac>)
  407af0:	47b8      	blx	r7
  407af2:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  407af4:	2205      	movs	r2, #5
  407af6:	4629      	mov	r1, r5
  407af8:	4620      	mov	r0, r4
  407afa:	47b8      	blx	r7
  407afc:	f104 030f 	add.w	r3, r4, #15
  407b00:	3417      	adds	r4, #23
    uint8_t * d8 = (uint8_t *)dst;
  407b02:	aa03      	add	r2, sp, #12
        *d8 = *s8;
  407b04:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  407b08:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  407b0c:	42a3      	cmp	r3, r4
  407b0e:	d1f9      	bne.n	407b04 <lv_obj_design+0x264>
            coords.x1 -= w;
  407b10:	fa1f f788 	uxth.w	r7, r8
  407b14:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407b18:	1bdb      	subs	r3, r3, r7
  407b1a:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
  407b1e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  407b22:	441f      	add	r7, r3
  407b24:	f8ad 7010 	strh.w	r7, [sp, #16]
            coords.y1 -= h;
  407b28:	b280      	uxth	r0, r0
  407b2a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  407b2e:	1a1b      	subs	r3, r3, r0
  407b30:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
  407b34:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  407b38:	4418      	add	r0, r3
  407b3a:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
  407b3e:	aa05      	add	r2, sp, #20
  407b40:	4631      	mov	r1, r6
  407b42:	a803      	add	r0, sp, #12
  407b44:	4b06      	ldr	r3, [pc, #24]	; (407b60 <lv_obj_design+0x2c0>)
  407b46:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  407b48:	2000      	movs	r0, #0
  407b4a:	e6b6      	b.n	4078ba <lv_obj_design+0x1a>
  407b4c:	004069b5 	.word	0x004069b5
  407b50:	00414ba5 	.word	0x00414ba5
  407b54:	00406459 	.word	0x00406459
  407b58:	0040fa91 	.word	0x0040fa91
  407b5c:	0040754d 	.word	0x0040754d
  407b60:	0040fadd 	.word	0x0040fadd
  407b64:	00415cd9 	.word	0x00415cd9
  407b68:	0040f331 	.word	0x0040f331
  407b6c:	0040f0e5 	.word	0x0040f0e5
  407b70:	0040f195 	.word	0x0040f195
  407b74:	0041595d 	.word	0x0041595d

00407b78 <lv_obj_init_draw_label_dsc>:
{
  407b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407b7a:	4605      	mov	r5, r0
  407b7c:	460e      	mov	r6, r1
  407b7e:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
  407b80:	f248 028c 	movw	r2, #32908	; 0x808c
  407b84:	4b2a      	ldr	r3, [pc, #168]	; (407c30 <lv_obj_init_draw_label_dsc+0xb8>)
  407b86:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
  407b88:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  407b8a:	2802      	cmp	r0, #2
  407b8c:	d800      	bhi.n	407b90 <lv_obj_init_draw_label_dsc+0x18>
  407b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407b90:	f248 020c 	movw	r2, #32780	; 0x800c
  407b94:	4631      	mov	r1, r6
  407b96:	4628      	mov	r0, r5
  407b98:	4b25      	ldr	r3, [pc, #148]	; (407c30 <lv_obj_init_draw_label_dsc+0xb8>)
  407b9a:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  407b9c:	28fc      	cmp	r0, #252	; 0xfc
  407b9e:	d805      	bhi.n	407bac <lv_obj_init_draw_label_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  407ba0:	7b23      	ldrb	r3, [r4, #12]
  407ba2:	fb13 f000 	smulbb	r0, r3, r0
  407ba6:	f3c0 2007 	ubfx	r0, r0, #8, #8
  407baa:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  407bac:	7b23      	ldrb	r3, [r4, #12]
  407bae:	2b02      	cmp	r3, #2
  407bb0:	d9ed      	bls.n	407b8e <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  407bb2:	f248 0289 	movw	r2, #32905	; 0x8089
  407bb6:	4631      	mov	r1, r6
  407bb8:	4628      	mov	r0, r5
  407bba:	4b1e      	ldr	r3, [pc, #120]	; (407c34 <lv_obj_init_draw_label_dsc+0xbc>)
  407bbc:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
  407bbe:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  407bc0:	f248 0280 	movw	r2, #32896	; 0x8080
  407bc4:	4631      	mov	r1, r6
  407bc6:	4628      	mov	r0, r5
  407bc8:	4f1b      	ldr	r7, [pc, #108]	; (407c38 <lv_obj_init_draw_label_dsc+0xc0>)
  407bca:	47b8      	blx	r7
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
  407bcc:	8220      	strh	r0, [r4, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  407bce:	f248 0281 	movw	r2, #32897	; 0x8081
  407bd2:	4631      	mov	r1, r6
  407bd4:	4628      	mov	r0, r5
  407bd6:	47b8      	blx	r7
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
  407bd8:	81e0      	strh	r0, [r4, #14]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  407bda:	f248 0282 	movw	r2, #32898	; 0x8082
  407bde:	4631      	mov	r1, r6
  407be0:	4628      	mov	r0, r5
  407be2:	47b8      	blx	r7
  407be4:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  407be8:	f248 0283 	movw	r2, #32899	; 0x8083
  407bec:	4631      	mov	r1, r6
  407bee:	4628      	mov	r0, r5
  407bf0:	47b8      	blx	r7
  407bf2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  407bf6:	f248 028e 	movw	r2, #32910	; 0x808e
  407bfa:	4631      	mov	r1, r6
  407bfc:	4628      	mov	r0, r5
  407bfe:	4b0f      	ldr	r3, [pc, #60]	; (407c3c <lv_obj_init_draw_label_dsc+0xc4>)
  407c00:	4798      	blx	r3
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
  407c02:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
  407c04:	6962      	ldr	r2, [r4, #20]
  407c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
  407c0a:	429a      	cmp	r2, r3
  407c0c:	d0bf      	beq.n	407b8e <lv_obj_init_draw_label_dsc+0x16>
  407c0e:	69a2      	ldr	r2, [r4, #24]
  407c10:	429a      	cmp	r2, r3
  407c12:	d0bc      	beq.n	407b8e <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  407c14:	f248 028a 	movw	r2, #32906	; 0x808a
  407c18:	4631      	mov	r1, r6
  407c1a:	4628      	mov	r0, r5
  407c1c:	4f05      	ldr	r7, [pc, #20]	; (407c34 <lv_obj_init_draw_label_dsc+0xbc>)
  407c1e:	47b8      	blx	r7
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
  407c20:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  407c22:	f248 028b 	movw	r2, #32907	; 0x808b
  407c26:	4631      	mov	r1, r6
  407c28:	4628      	mov	r0, r5
  407c2a:	47b8      	blx	r7
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
  407c2c:	80a0      	strh	r0, [r4, #4]
  407c2e:	e7ae      	b.n	407b8e <lv_obj_init_draw_label_dsc+0x16>
  407c30:	00406459 	.word	0x00406459
  407c34:	004063c9 	.word	0x004063c9
  407c38:	004069b5 	.word	0x004069b5
  407c3c:	004068c1 	.word	0x004068c1

00407c40 <lv_obj_init_draw_img_dsc>:
{
  407c40:	b570      	push	{r4, r5, r6, lr}
  407c42:	4605      	mov	r5, r0
  407c44:	460e      	mov	r6, r1
  407c46:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  407c48:	f248 02ac 	movw	r2, #32940	; 0x80ac
  407c4c:	4b23      	ldr	r3, [pc, #140]	; (407cdc <lv_obj_init_draw_img_dsc+0x9c>)
  407c4e:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
  407c50:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  407c52:	2802      	cmp	r0, #2
  407c54:	d800      	bhi.n	407c58 <lv_obj_init_draw_img_dsc+0x18>
  407c56:	bd70      	pop	{r4, r5, r6, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407c58:	f248 020c 	movw	r2, #32780	; 0x800c
  407c5c:	4631      	mov	r1, r6
  407c5e:	4628      	mov	r0, r5
  407c60:	4b1e      	ldr	r3, [pc, #120]	; (407cdc <lv_obj_init_draw_img_dsc+0x9c>)
  407c62:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  407c64:	28fc      	cmp	r0, #252	; 0xfc
  407c66:	d805      	bhi.n	407c74 <lv_obj_init_draw_img_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  407c68:	7823      	ldrb	r3, [r4, #0]
  407c6a:	fb13 f000 	smulbb	r0, r3, r0
  407c6e:	f3c0 2007 	ubfx	r0, r0, #8, #8
  407c72:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  407c74:	7823      	ldrb	r3, [r4, #0]
  407c76:	2b02      	cmp	r3, #2
  407c78:	d9ed      	bls.n	407c56 <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->angle = 0;
  407c7a:	2300      	movs	r3, #0
  407c7c:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
  407c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
  407c82:	8123      	strh	r3, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  407c84:	8aab      	ldrh	r3, [r5, #20]
  407c86:	3301      	adds	r3, #1
  407c88:	8a2a      	ldrh	r2, [r5, #16]
  407c8a:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  407c8c:	b21b      	sxth	r3, r3
  407c8e:	2b00      	cmp	r3, #0
  407c90:	bfb8      	it	lt
  407c92:	3301      	addlt	r3, #1
  407c94:	105b      	asrs	r3, r3, #1
  407c96:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  407c98:	8aeb      	ldrh	r3, [r5, #22]
  407c9a:	3301      	adds	r3, #1
  407c9c:	8a6a      	ldrh	r2, [r5, #18]
  407c9e:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  407ca0:	b21b      	sxth	r3, r3
  407ca2:	2b00      	cmp	r3, #0
  407ca4:	bfb8      	it	lt
  407ca6:	3301      	addlt	r3, #1
  407ca8:	105b      	asrs	r3, r3, #1
  407caa:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  407cac:	f248 02ad 	movw	r2, #32941	; 0x80ad
  407cb0:	4631      	mov	r1, r6
  407cb2:	4628      	mov	r0, r5
  407cb4:	4b09      	ldr	r3, [pc, #36]	; (407cdc <lv_obj_init_draw_img_dsc+0x9c>)
  407cb6:	4798      	blx	r3
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
  407cb8:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
  407cba:	b938      	cbnz	r0, 407ccc <lv_obj_init_draw_img_dsc+0x8c>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  407cbc:	f248 02a0 	movw	r2, #32928	; 0x80a0
  407cc0:	4631      	mov	r1, r6
  407cc2:	4628      	mov	r0, r5
  407cc4:	4b06      	ldr	r3, [pc, #24]	; (407ce0 <lv_obj_init_draw_img_dsc+0xa0>)
  407cc6:	4798      	blx	r3
  407cc8:	73a0      	strb	r0, [r4, #14]
  407cca:	e7c4      	b.n	407c56 <lv_obj_init_draw_img_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  407ccc:	f248 02a9 	movw	r2, #32937	; 0x80a9
  407cd0:	4631      	mov	r1, r6
  407cd2:	4628      	mov	r0, r5
  407cd4:	4b03      	ldr	r3, [pc, #12]	; (407ce4 <lv_obj_init_draw_img_dsc+0xa4>)
  407cd6:	4798      	blx	r3
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
  407cd8:	81a0      	strh	r0, [r4, #12]
  407cda:	e7ef      	b.n	407cbc <lv_obj_init_draw_img_dsc+0x7c>
  407cdc:	00406459 	.word	0x00406459
  407ce0:	004069b5 	.word	0x004069b5
  407ce4:	004063c9 	.word	0x004063c9

00407ce8 <lv_obj_init_draw_line_dsc>:
{
  407ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407cea:	4605      	mov	r5, r0
  407cec:	460e      	mov	r6, r1
  407cee:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  407cf0:	2290      	movs	r2, #144	; 0x90
  407cf2:	4b24      	ldr	r3, [pc, #144]	; (407d84 <lv_obj_init_draw_line_dsc+0x9c>)
  407cf4:	4798      	blx	r3
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
  407cf6:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
  407cf8:	b900      	cbnz	r0, 407cfc <lv_obj_init_draw_line_dsc+0x14>
  407cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
  407cfc:	229c      	movs	r2, #156	; 0x9c
  407cfe:	4631      	mov	r1, r6
  407d00:	4628      	mov	r0, r5
  407d02:	4b21      	ldr	r3, [pc, #132]	; (407d88 <lv_obj_init_draw_line_dsc+0xa0>)
  407d04:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
  407d06:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  407d08:	2802      	cmp	r0, #2
  407d0a:	d9f6      	bls.n	407cfa <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407d0c:	f248 020c 	movw	r2, #32780	; 0x800c
  407d10:	4631      	mov	r1, r6
  407d12:	4628      	mov	r0, r5
  407d14:	4b1c      	ldr	r3, [pc, #112]	; (407d88 <lv_obj_init_draw_line_dsc+0xa0>)
  407d16:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  407d18:	28fc      	cmp	r0, #252	; 0xfc
  407d1a:	d805      	bhi.n	407d28 <lv_obj_init_draw_line_dsc+0x40>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  407d1c:	7a23      	ldrb	r3, [r4, #8]
  407d1e:	fb13 f000 	smulbb	r0, r3, r0
  407d22:	f3c0 2007 	ubfx	r0, r0, #8, #8
  407d26:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  407d28:	7a23      	ldrb	r3, [r4, #8]
  407d2a:	2b02      	cmp	r3, #2
  407d2c:	d9e5      	bls.n	407cfa <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  407d2e:	2299      	movs	r2, #153	; 0x99
  407d30:	4631      	mov	r1, r6
  407d32:	4628      	mov	r0, r5
  407d34:	4b15      	ldr	r3, [pc, #84]	; (407d8c <lv_obj_init_draw_line_dsc+0xa4>)
  407d36:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
  407d38:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  407d3a:	2292      	movs	r2, #146	; 0x92
  407d3c:	4631      	mov	r1, r6
  407d3e:	4628      	mov	r0, r5
  407d40:	4b10      	ldr	r3, [pc, #64]	; (407d84 <lv_obj_init_draw_line_dsc+0x9c>)
  407d42:	4798      	blx	r3
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
  407d44:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
  407d46:	b9b0      	cbnz	r0, 407d76 <lv_obj_init_draw_line_dsc+0x8e>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  407d48:	2294      	movs	r2, #148	; 0x94
  407d4a:	4631      	mov	r1, r6
  407d4c:	4628      	mov	r0, r5
  407d4e:	4f0d      	ldr	r7, [pc, #52]	; (407d84 <lv_obj_init_draw_line_dsc+0x9c>)
  407d50:	47b8      	blx	r7
  407d52:	3000      	adds	r0, #0
  407d54:	bf18      	it	ne
  407d56:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
  407d58:	7a63      	ldrb	r3, [r4, #9]
  407d5a:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
  407d5e:	f360 03c3 	bfi	r3, r0, #3, #1
  407d62:	7263      	strb	r3, [r4, #9]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  407d64:	2291      	movs	r2, #145	; 0x91
  407d66:	4631      	mov	r1, r6
  407d68:	4628      	mov	r0, r5
  407d6a:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
  407d6c:	7a63      	ldrb	r3, [r4, #9]
  407d6e:	f360 0301 	bfi	r3, r0, #0, #2
  407d72:	7263      	strb	r3, [r4, #9]
  407d74:	e7c1      	b.n	407cfa <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  407d76:	2293      	movs	r2, #147	; 0x93
  407d78:	4631      	mov	r1, r6
  407d7a:	4628      	mov	r0, r5
  407d7c:	4b01      	ldr	r3, [pc, #4]	; (407d84 <lv_obj_init_draw_line_dsc+0x9c>)
  407d7e:	4798      	blx	r3
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
  407d80:	80e0      	strh	r0, [r4, #6]
  407d82:	e7e1      	b.n	407d48 <lv_obj_init_draw_line_dsc+0x60>
  407d84:	004069b5 	.word	0x004069b5
  407d88:	00406459 	.word	0x00406459
  407d8c:	004063c9 	.word	0x004063c9

00407d90 <style_snapshot>:
    }
}

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
  407d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d94:	b083      	sub	sp, #12
  407d96:	4605      	mov	r5, r0
  407d98:	4689      	mov	r9, r1
  407d9a:	4614      	mov	r4, r2
    _lv_obj_disable_style_caching(obj, true);
  407d9c:	2101      	movs	r1, #1
  407d9e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 407f90 <style_snapshot+0x200>
  407da2:	47c0      	blx	r8
    _lv_memset_00(shot, sizeof(style_snapshot_t));
  407da4:	21bc      	movs	r1, #188	; 0xbc
  407da6:	4620      	mov	r0, r4
  407da8:	4b6d      	ldr	r3, [pc, #436]	; (407f60 <style_snapshot+0x1d0>)
  407daa:	4798      	blx	r3
    lv_draw_rect_dsc_init(&shot->rect);
  407dac:	4620      	mov	r0, r4
  407dae:	4b6d      	ldr	r3, [pc, #436]	; (407f64 <style_snapshot+0x1d4>)
  407db0:	4798      	blx	r3
    lv_draw_label_dsc_init(&shot->label);
  407db2:	f104 0a54 	add.w	sl, r4, #84	; 0x54
  407db6:	4650      	mov	r0, sl
  407db8:	4b6b      	ldr	r3, [pc, #428]	; (407f68 <style_snapshot+0x1d8>)
  407dba:	4798      	blx	r3
    lv_draw_img_dsc_init(&shot->img);
  407dbc:	f104 0382 	add.w	r3, r4, #130	; 0x82
  407dc0:	9301      	str	r3, [sp, #4]
  407dc2:	4618      	mov	r0, r3
  407dc4:	4b69      	ldr	r3, [pc, #420]	; (407f6c <style_snapshot+0x1dc>)
  407dc6:	4798      	blx	r3
    lv_draw_line_dsc_init(&shot->line);
  407dc8:	f104 0678 	add.w	r6, r4, #120	; 0x78
  407dcc:	4630      	mov	r0, r6
  407dce:	4b68      	ldr	r3, [pc, #416]	; (407f70 <style_snapshot+0x1e0>)
  407dd0:	4798      	blx	r3

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407dd2:	4649      	mov	r1, r9
  407dd4:	4628      	mov	r0, r5
  407dd6:	4b67      	ldr	r3, [pc, #412]	; (407f74 <style_snapshot+0x1e4>)
  407dd8:	4798      	blx	r3
  407dda:	4607      	mov	r7, r0
    bool trans_ori = list->skip_trans;
  407ddc:	7943      	ldrb	r3, [r0, #5]
  407dde:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
  407de2:	f043 0301 	orr.w	r3, r3, #1
  407de6:	7143      	strb	r3, [r0, #5]

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
  407de8:	4622      	mov	r2, r4
  407dea:	4649      	mov	r1, r9
  407dec:	4628      	mov	r0, r5
  407dee:	4b62      	ldr	r3, [pc, #392]	; (407f78 <style_snapshot+0x1e8>)
  407df0:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
  407df2:	4652      	mov	r2, sl
  407df4:	4649      	mov	r1, r9
  407df6:	4628      	mov	r0, r5
  407df8:	4b60      	ldr	r3, [pc, #384]	; (407f7c <style_snapshot+0x1ec>)
  407dfa:	4798      	blx	r3
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
  407dfc:	9a01      	ldr	r2, [sp, #4]
  407dfe:	4649      	mov	r1, r9
  407e00:	4628      	mov	r0, r5
  407e02:	4b5f      	ldr	r3, [pc, #380]	; (407f80 <style_snapshot+0x1f0>)
  407e04:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
  407e06:	4632      	mov	r2, r6
  407e08:	4649      	mov	r1, r9
  407e0a:	4628      	mov	r0, r5
  407e0c:	4b5d      	ldr	r3, [pc, #372]	; (407f84 <style_snapshot+0x1f4>)
  407e0e:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  407e10:	2210      	movs	r2, #16
  407e12:	4649      	mov	r1, r9
  407e14:	4628      	mov	r0, r5
  407e16:	4e5c      	ldr	r6, [pc, #368]	; (407f88 <style_snapshot+0x1f8>)
  407e18:	47b0      	blx	r6

    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
  407e1a:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  407e1e:	2211      	movs	r2, #17
  407e20:	4649      	mov	r1, r9
  407e22:	4628      	mov	r0, r5
  407e24:	47b0      	blx	r6
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
  407e26:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  407e2a:	2213      	movs	r2, #19
  407e2c:	4649      	mov	r1, r9
  407e2e:	4628      	mov	r0, r5
  407e30:	47b0      	blx	r6
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
  407e32:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  407e36:	2212      	movs	r2, #18
  407e38:	4649      	mov	r1, r9
  407e3a:	4628      	mov	r0, r5
  407e3c:	47b0      	blx	r6
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
  407e3e:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  407e42:	2214      	movs	r2, #20
  407e44:	4649      	mov	r1, r9
  407e46:	4628      	mov	r0, r5
  407e48:	47b0      	blx	r6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
  407e4a:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  407e4e:	2215      	movs	r2, #21
  407e50:	4649      	mov	r1, r9
  407e52:	4628      	mov	r0, r5
  407e54:	47b0      	blx	r6
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
  407e56:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  407e5a:	2216      	movs	r2, #22
  407e5c:	4649      	mov	r1, r9
  407e5e:	4628      	mov	r0, r5
  407e60:	47b0      	blx	r6
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
  407e62:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  407e66:	2217      	movs	r2, #23
  407e68:	4649      	mov	r1, r9
  407e6a:	4628      	mov	r0, r5
  407e6c:	47b0      	blx	r6
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
  407e6e:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  407e72:	2218      	movs	r2, #24
  407e74:	4649      	mov	r1, r9
  407e76:	4628      	mov	r0, r5
  407e78:	47b0      	blx	r6
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
  407e7a:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  407e7e:	2203      	movs	r2, #3
  407e80:	4649      	mov	r1, r9
  407e82:	4628      	mov	r0, r5
  407e84:	47b0      	blx	r6
    shot->size = lv_obj_get_style_size(obj, part);
  407e86:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  407e8a:	2204      	movs	r2, #4
  407e8c:	4649      	mov	r1, r9
  407e8e:	4628      	mov	r0, r5
  407e90:	47b0      	blx	r6
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
  407e92:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  407e96:	2205      	movs	r2, #5
  407e98:	4649      	mov	r1, r9
  407e9a:	4628      	mov	r0, r5
  407e9c:	47b0      	blx	r6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
  407e9e:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  407ea2:	2206      	movs	r2, #6
  407ea4:	4649      	mov	r1, r9
  407ea6:	4628      	mov	r0, r5
  407ea8:	47b0      	blx	r6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
  407eaa:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  407eae:	2207      	movs	r2, #7
  407eb0:	4649      	mov	r1, r9
  407eb2:	4628      	mov	r0, r5
  407eb4:	47b0      	blx	r6
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
  407eb6:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  407eba:	22c0      	movs	r2, #192	; 0xc0
  407ebc:	4649      	mov	r1, r9
  407ebe:	4628      	mov	r0, r5
  407ec0:	47b0      	blx	r6
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
  407ec2:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
  407ec6:	22c1      	movs	r2, #193	; 0xc1
  407ec8:	4649      	mov	r1, r9
  407eca:	4628      	mov	r0, r5
  407ecc:	47b0      	blx	r6
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
  407ece:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  407ed2:	22c2      	movs	r2, #194	; 0xc2
  407ed4:	4649      	mov	r1, r9
  407ed6:	4628      	mov	r0, r5
  407ed8:	47b0      	blx	r6
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
  407eda:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  407ede:	22c3      	movs	r2, #195	; 0xc3
  407ee0:	4649      	mov	r1, r9
  407ee2:	4628      	mov	r0, r5
  407ee4:	47b0      	blx	r6
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
  407ee6:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  407eea:	22c9      	movs	r2, #201	; 0xc9
  407eec:	4649      	mov	r1, r9
  407eee:	4628      	mov	r0, r5
  407ef0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 407f94 <style_snapshot+0x204>
  407ef4:	47d0      	blx	sl
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
  407ef6:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  407efa:	22ca      	movs	r2, #202	; 0xca
  407efc:	4649      	mov	r1, r9
  407efe:	4628      	mov	r0, r5
  407f00:	47d0      	blx	sl
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
  407f02:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407f06:	f248 020c 	movw	r2, #32780	; 0x800c
  407f0a:	4649      	mov	r1, r9
  407f0c:	4628      	mov	r0, r5
  407f0e:	4b1f      	ldr	r3, [pc, #124]	; (407f8c <style_snapshot+0x1fc>)
  407f10:	4798      	blx	r3
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
  407f12:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  407f16:	2202      	movs	r2, #2
  407f18:	4649      	mov	r1, r9
  407f1a:	4628      	mov	r0, r5
  407f1c:	47b0      	blx	r6
  407f1e:	3000      	adds	r0, #0
  407f20:	bf18      	it	ne
  407f22:	2001      	movne	r0, #1
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
  407f24:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  407f28:	f360 0300 	bfi	r3, r0, #0, #1
  407f2c:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  407f30:	2233      	movs	r2, #51	; 0x33
  407f32:	4649      	mov	r1, r9
  407f34:	4628      	mov	r0, r5
  407f36:	47b0      	blx	r6
  407f38:	3000      	adds	r0, #0
  407f3a:	bf18      	it	ne
  407f3c:	2001      	movne	r0, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
  407f3e:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  407f42:	f360 0341 	bfi	r3, r0, #1, #1
  407f46:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb

    _lv_obj_disable_style_caching(obj, false);
  407f4a:	2100      	movs	r1, #0
  407f4c:	4628      	mov	r0, r5
  407f4e:	47c0      	blx	r8
    list->skip_trans = trans_ori;
  407f50:	797b      	ldrb	r3, [r7, #5]
  407f52:	f36b 0300 	bfi	r3, fp, #0, #1
  407f56:	717b      	strb	r3, [r7, #5]
}
  407f58:	b003      	add	sp, #12
  407f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f5e:	bf00      	nop
  407f60:	00415ead 	.word	0x00415ead
  407f64:	0040fa91 	.word	0x0040fa91
  407f68:	0040cd3d 	.word	0x0040cd3d
  407f6c:	0040ca31 	.word	0x0040ca31
  407f70:	0040dc15 	.word	0x0040dc15
  407f74:	00405219 	.word	0x00405219
  407f78:	0040754d 	.word	0x0040754d
  407f7c:	00407b79 	.word	0x00407b79
  407f80:	00407c41 	.word	0x00407c41
  407f84:	00407ce9 	.word	0x00407ce9
  407f88:	004069b5 	.word	0x004069b5
  407f8c:	00406459 	.word	0x00406459
  407f90:	0040530d 	.word	0x0040530d
  407f94:	004063c9 	.word	0x004063c9

00407f98 <lv_obj_set_state>:
    if(obj->state == new_state) return;
  407f98:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  407f9c:	428b      	cmp	r3, r1
  407f9e:	f000 833f 	beq.w	408620 <lv_obj_set_state+0x688>
{
  407fa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407fa6:	b0eb      	sub	sp, #428	; 0x1ac
  407fa8:	460d      	mov	r5, r1
  407faa:	4681      	mov	r9, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407fac:	4bac      	ldr	r3, [pc, #688]	; (408260 <lv_obj_set_state+0x2c8>)
  407fae:	4798      	blx	r3
  407fb0:	b148      	cbz	r0, 407fc6 <lv_obj_set_state+0x2e>
    lv_state_t prev_state = obj->state;
  407fb2:	f899 303d 	ldrb.w	r3, [r9, #61]	; 0x3d
  407fb6:	9300      	str	r3, [sp, #0]
  407fb8:	2400      	movs	r4, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
  407fba:	46a2      	mov	sl, r4
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  407fbc:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 40827c <lv_obj_set_state+0x2e4>
        style_snapshot(obj, part, &shot_pre);
  407fc0:	4ea8      	ldr	r6, [pc, #672]	; (408264 <lv_obj_set_state+0x2cc>)

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  407fc2:	4fa9      	ldr	r7, [pc, #676]	; (408268 <lv_obj_set_state+0x2d0>)
  407fc4:	e08b      	b.n	4080de <lv_obj_set_state+0x146>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407fc6:	464a      	mov	r2, r9
  407fc8:	2300      	movs	r3, #0
  407fca:	48a8      	ldr	r0, [pc, #672]	; (40826c <lv_obj_set_state+0x2d4>)
  407fcc:	49a8      	ldr	r1, [pc, #672]	; (408270 <lv_obj_set_state+0x2d8>)
  407fce:	4788      	blx	r1
  407fd0:	e7fe      	b.n	407fd0 <lv_obj_set_state+0x38>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
  407fd2:	f9bd 20c4 	ldrsh.w	r2, [sp, #196]	; 0xc4
  407fd6:	f9bd 3180 	ldrsh.w	r3, [sp, #384]	; 0x180
  407fda:	429a      	cmp	r2, r3
  407fdc:	d002      	beq.n	407fe4 <lv_obj_set_state+0x4c>
            cmp_res = STYLE_COMPARE_DIFF;
  407fde:	f04f 0a02 	mov.w	sl, #2
  407fe2:	e09f      	b.n	408124 <lv_obj_set_state+0x18c>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
  407fe4:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
  407fe8:	f9bd 2182 	ldrsh.w	r2, [sp, #386]	; 0x182
  407fec:	429a      	cmp	r2, r3
  407fee:	d002      	beq.n	407ff6 <lv_obj_set_state+0x5e>
            cmp_res = STYLE_COMPARE_DIFF;
  407ff0:	f04f 0a02 	mov.w	sl, #2
  407ff4:	e096      	b.n	408124 <lv_obj_set_state+0x18c>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
  407ff6:	f9bd 20c6 	ldrsh.w	r2, [sp, #198]	; 0xc6
  407ffa:	429a      	cmp	r2, r3
  407ffc:	f040 80a1 	bne.w	408142 <lv_obj_set_state+0x1aa>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
  408000:	f9bd 20ca 	ldrsh.w	r2, [sp, #202]	; 0xca
  408004:	f9bd 3186 	ldrsh.w	r3, [sp, #390]	; 0x186
  408008:	429a      	cmp	r2, r3
  40800a:	f040 809d 	bne.w	408148 <lv_obj_set_state+0x1b0>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
  40800e:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  408012:	f9bd 3188 	ldrsh.w	r3, [sp, #392]	; 0x188
  408016:	429a      	cmp	r2, r3
  408018:	f040 8099 	bne.w	40814e <lv_obj_set_state+0x1b6>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  40801c:	f9bd 20ce 	ldrsh.w	r2, [sp, #206]	; 0xce
  408020:	f9bd 318a 	ldrsh.w	r3, [sp, #394]	; 0x18a
  408024:	429a      	cmp	r2, r3
  408026:	f040 8095 	bne.w	408154 <lv_obj_set_state+0x1bc>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  40802a:	f9bd 30d0 	ldrsh.w	r3, [sp, #208]	; 0xd0
  40802e:	f9bd 218e 	ldrsh.w	r2, [sp, #398]	; 0x18e
  408032:	429a      	cmp	r2, r3
  408034:	f040 8091 	bne.w	40815a <lv_obj_set_state+0x1c2>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  408038:	f9bd 20d2 	ldrsh.w	r2, [sp, #210]	; 0xd2
  40803c:	429a      	cmp	r2, r3
  40803e:	f040 808f 	bne.w	408160 <lv_obj_set_state+0x1c8>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  408042:	f9bd 20d6 	ldrsh.w	r2, [sp, #214]	; 0xd6
  408046:	f9bd 3192 	ldrsh.w	r3, [sp, #402]	; 0x192
  40804a:	429a      	cmp	r2, r3
  40804c:	f040 808b 	bne.w	408166 <lv_obj_set_state+0x1ce>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  408050:	f9bd 20d8 	ldrsh.w	r2, [sp, #216]	; 0xd8
  408054:	f9bd 3194 	ldrsh.w	r3, [sp, #404]	; 0x194
  408058:	429a      	cmp	r2, r3
  40805a:	f040 8087 	bne.w	40816c <lv_obj_set_state+0x1d4>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  40805e:	f9bd 20da 	ldrsh.w	r2, [sp, #218]	; 0xda
  408062:	f9bd 3196 	ldrsh.w	r3, [sp, #406]	; 0x196
  408066:	429a      	cmp	r2, r3
  408068:	f040 8083 	bne.w	408172 <lv_obj_set_state+0x1da>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  40806c:	f9bd 20dc 	ldrsh.w	r2, [sp, #220]	; 0xdc
  408070:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	; 0x198
  408074:	429a      	cmp	r2, r3
  408076:	d17f      	bne.n	408178 <lv_obj_set_state+0x1e0>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  408078:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
  40807c:	f9bd 3106 	ldrsh.w	r3, [sp, #262]	; 0x106
  408080:	429a      	cmp	r2, r3
  408082:	d17c      	bne.n	40817e <lv_obj_set_state+0x1e6>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  408084:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  408088:	f9bd 3108 	ldrsh.w	r3, [sp, #264]	; 0x108
  40808c:	429a      	cmp	r2, r3
  40808e:	d179      	bne.n	408184 <lv_obj_set_state+0x1ec>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  408090:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  408092:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
  408094:	429a      	cmp	r2, r3
  408096:	d178      	bne.n	40818a <lv_obj_set_state+0x1f2>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  408098:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
  40809c:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
  4080a0:	429a      	cmp	r2, r3
  4080a2:	d175      	bne.n	408190 <lv_obj_set_state+0x1f8>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  4080a4:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
  4080a8:	f9bd 3114 	ldrsh.w	r3, [sp, #276]	; 0x114
  4080ac:	429a      	cmp	r2, r3
  4080ae:	d172      	bne.n	408196 <lv_obj_set_state+0x1fe>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  4080b0:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  4080b4:	f9bd 310e 	ldrsh.w	r3, [sp, #270]	; 0x10e
  4080b8:	429a      	cmp	r2, r3
  4080ba:	d16f      	bne.n	40819c <lv_obj_set_state+0x204>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  4080bc:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
  4080c0:	f9bd 3110 	ldrsh.w	r3, [sp, #272]	; 0x110
  4080c4:	429a      	cmp	r2, r3
  4080c6:	d16c      	bne.n	4081a2 <lv_obj_set_state+0x20a>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
  4080c8:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
  4080cc:	f9bd 3112 	ldrsh.w	r3, [sp, #274]	; 0x112
  4080d0:	429a      	cmp	r2, r3
  4080d2:	d169      	bne.n	4081a8 <lv_obj_set_state+0x210>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
  4080d4:	f04f 0a01 	mov.w	sl, #1
  4080d8:	3401      	adds	r4, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  4080da:	2c40      	cmp	r4, #64	; 0x40
  4080dc:	d022      	beq.n	408124 <lv_obj_set_state+0x18c>
  4080de:	fa5f fb84 	uxtb.w	fp, r4
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  4080e2:	4659      	mov	r1, fp
  4080e4:	4648      	mov	r0, r9
  4080e6:	47c0      	blx	r8
        if(style_list == NULL) break;   /*No more style lists*/
  4080e8:	b1e0      	cbz	r0, 408124 <lv_obj_set_state+0x18c>
        obj->state = prev_state;
  4080ea:	f89d 3000 	ldrb.w	r3, [sp]
  4080ee:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
        style_snapshot(obj, part, &shot_pre);
  4080f2:	aa0c      	add	r2, sp, #48	; 0x30
  4080f4:	4659      	mov	r1, fp
  4080f6:	4648      	mov	r0, r9
  4080f8:	47b0      	blx	r6
        obj->state = new_state;
  4080fa:	f889 503d 	strb.w	r5, [r9, #61]	; 0x3d
        style_snapshot(obj, part, &shot_post);
  4080fe:	aa3b      	add	r2, sp, #236	; 0xec
  408100:	4659      	mov	r1, fp
  408102:	4648      	mov	r0, r9
  408104:	47b0      	blx	r6
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  408106:	22bc      	movs	r2, #188	; 0xbc
  408108:	a93b      	add	r1, sp, #236	; 0xec
  40810a:	a80c      	add	r0, sp, #48	; 0x30
  40810c:	47b8      	blx	r7
  40810e:	2800      	cmp	r0, #0
  408110:	d0e2      	beq.n	4080d8 <lv_obj_set_state+0x140>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
  408112:	f9bd 20c2 	ldrsh.w	r2, [sp, #194]	; 0xc2
  408116:	f9bd 317e 	ldrsh.w	r3, [sp, #382]	; 0x17e
  40811a:	429a      	cmp	r2, r3
  40811c:	f43f af59 	beq.w	407fd2 <lv_obj_set_state+0x3a>
            cmp_res = STYLE_COMPARE_DIFF;
  408120:	f04f 0a02 	mov.w	sl, #2
    obj->state = new_state;
  408124:	f889 503d 	strb.w	r5, [r9, #61]	; 0x3d
    if(cmp_res == STYLE_COMPARE_SAME) {
  408128:	f1ba 0f00 	cmp.w	sl, #0
  40812c:	f000 8271 	beq.w	408612 <lv_obj_set_state+0x67a>
  408130:	2300      	movs	r3, #0
  408132:	9303      	str	r3, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  408134:	4f4f      	ldr	r7, [pc, #316]	; (408274 <lv_obj_set_state+0x2dc>)
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
  408136:	f8cd a014 	str.w	sl, [sp, #20]
  40813a:	f8dd a000 	ldr.w	sl, [sp]
  40813e:	46ab      	mov	fp, r5
  408140:	e206      	b.n	408550 <lv_obj_set_state+0x5b8>
            cmp_res = STYLE_COMPARE_DIFF;
  408142:	f04f 0a02 	mov.w	sl, #2
  408146:	e7ed      	b.n	408124 <lv_obj_set_state+0x18c>
  408148:	f04f 0a02 	mov.w	sl, #2
  40814c:	e7ea      	b.n	408124 <lv_obj_set_state+0x18c>
  40814e:	f04f 0a02 	mov.w	sl, #2
  408152:	e7e7      	b.n	408124 <lv_obj_set_state+0x18c>
  408154:	f04f 0a02 	mov.w	sl, #2
  408158:	e7e4      	b.n	408124 <lv_obj_set_state+0x18c>
  40815a:	f04f 0a02 	mov.w	sl, #2
  40815e:	e7e1      	b.n	408124 <lv_obj_set_state+0x18c>
  408160:	f04f 0a02 	mov.w	sl, #2
  408164:	e7de      	b.n	408124 <lv_obj_set_state+0x18c>
  408166:	f04f 0a02 	mov.w	sl, #2
  40816a:	e7db      	b.n	408124 <lv_obj_set_state+0x18c>
  40816c:	f04f 0a02 	mov.w	sl, #2
  408170:	e7d8      	b.n	408124 <lv_obj_set_state+0x18c>
  408172:	f04f 0a02 	mov.w	sl, #2
  408176:	e7d5      	b.n	408124 <lv_obj_set_state+0x18c>
  408178:	f04f 0a02 	mov.w	sl, #2
  40817c:	e7d2      	b.n	408124 <lv_obj_set_state+0x18c>
  40817e:	f04f 0a02 	mov.w	sl, #2
  408182:	e7cf      	b.n	408124 <lv_obj_set_state+0x18c>
  408184:	f04f 0a02 	mov.w	sl, #2
  408188:	e7cc      	b.n	408124 <lv_obj_set_state+0x18c>
  40818a:	f04f 0a02 	mov.w	sl, #2
  40818e:	e7c9      	b.n	408124 <lv_obj_set_state+0x18c>
  408190:	f04f 0a02 	mov.w	sl, #2
  408194:	e7c6      	b.n	408124 <lv_obj_set_state+0x18c>
  408196:	f04f 0a02 	mov.w	sl, #2
  40819a:	e7c3      	b.n	408124 <lv_obj_set_state+0x18c>
  40819c:	f04f 0a02 	mov.w	sl, #2
  4081a0:	e7c0      	b.n	408124 <lv_obj_set_state+0x18c>
  4081a2:	f04f 0a02 	mov.w	sl, #2
  4081a6:	e7bd      	b.n	408124 <lv_obj_set_state+0x18c>
  4081a8:	f04f 0a02 	mov.w	sl, #2
  4081ac:	e7ba      	b.n	408124 <lv_obj_set_state+0x18c>
                _lv_style_list_add_trans_style(style_list);
  4081ae:	9806      	ldr	r0, [sp, #24]
  4081b0:	4b31      	ldr	r3, [pc, #196]	; (408278 <lv_obj_set_state+0x2e0>)
  4081b2:	4798      	blx	r3
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  4081b4:	9900      	ldr	r1, [sp, #0]
  4081b6:	4648      	mov	r0, r9
  4081b8:	4b30      	ldr	r3, [pc, #192]	; (40827c <lv_obj_set_state+0x2e4>)
  4081ba:	4798      	blx	r3
  4081bc:	4605      	mov	r5, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
  4081be:	4b30      	ldr	r3, [pc, #192]	; (408280 <lv_obj_set_state+0x2e8>)
  4081c0:	4798      	blx	r3
  4081c2:	9001      	str	r0, [sp, #4]
    bool cache_ori = style_list->ignore_cache;
  4081c4:	796e      	ldrb	r6, [r5, #5]
  4081c6:	f3c6 06c0 	ubfx	r6, r6, #3, #1
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  4081ca:	f004 030f 	and.w	r3, r4, #15
  4081ce:	2b08      	cmp	r3, #8
  4081d0:	dd60      	ble.n	408294 <lv_obj_set_state+0x2fc>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  4081d2:	2b0b      	cmp	r3, #11
  4081d4:	f300 8105 	bgt.w	4083e2 <lv_obj_set_state+0x44a>
        style_list->skip_trans = 1;
  4081d8:	796b      	ldrb	r3, [r5, #5]
        style_list->ignore_cache = 1;
  4081da:	f043 0309 	orr.w	r3, r3, #9
  4081de:	716b      	strb	r3, [r5, #5]
        obj->state = prev_state;
  4081e0:	f889 a03d 	strb.w	sl, [r9, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
  4081e4:	4622      	mov	r2, r4
  4081e6:	9900      	ldr	r1, [sp, #0]
  4081e8:	4648      	mov	r0, r9
  4081ea:	f8df 8098 	ldr.w	r8, [pc, #152]	; 408284 <lv_obj_set_state+0x2ec>
  4081ee:	47c0      	blx	r8
  4081f0:	f8ad 0010 	strh.w	r0, [sp, #16]
        obj->state = new_state;
  4081f4:	f889 b03d 	strb.w	fp, [r9, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
  4081f8:	4622      	mov	r2, r4
  4081fa:	9900      	ldr	r1, [sp, #0]
  4081fc:	4648      	mov	r0, r9
  4081fe:	47c0      	blx	r8
  408200:	4680      	mov	r8, r0
        style_list->skip_trans = 0;
  408202:	796b      	ldrb	r3, [r5, #5]
        style_list->ignore_cache = cache_ori;
  408204:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  408208:	f366 03c3 	bfi	r3, r6, #3, #1
  40820c:	716b      	strb	r3, [r5, #5]
        if(c1.full == c2.full) return NULL;
  40820e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  408212:	b283      	uxth	r3, r0
  408214:	429a      	cmp	r2, r3
  408216:	f000 81e7 	beq.w	4085e8 <lv_obj_set_state+0x650>
        obj->state = prev_state;
  40821a:	f889 a03d 	strb.w	sl, [r9, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
  40821e:	4622      	mov	r2, r4
  408220:	9900      	ldr	r1, [sp, #0]
  408222:	4648      	mov	r0, r9
  408224:	4b17      	ldr	r3, [pc, #92]	; (408284 <lv_obj_set_state+0x2ec>)
  408226:	4798      	blx	r3
  408228:	4602      	mov	r2, r0
  40822a:	f8ad 0010 	strh.w	r0, [sp, #16]
        obj->state = new_state;
  40822e:	f889 b03d 	strb.w	fp, [r9, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
  408232:	4621      	mov	r1, r4
  408234:	9801      	ldr	r0, [sp, #4]
  408236:	4b14      	ldr	r3, [pc, #80]	; (408288 <lv_obj_set_state+0x2f0>)
  408238:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  40823a:	4814      	ldr	r0, [pc, #80]	; (40828c <lv_obj_set_state+0x2f4>)
  40823c:	4b14      	ldr	r3, [pc, #80]	; (408290 <lv_obj_set_state+0x2f8>)
  40823e:	4798      	blx	r3
  408240:	4606      	mov	r6, r0
        LV_ASSERT_MEM(tr);
  408242:	4b07      	ldr	r3, [pc, #28]	; (408260 <lv_obj_set_state+0x2c8>)
  408244:	4798      	blx	r3
  408246:	2800      	cmp	r0, #0
  408248:	f000 80c5 	beq.w	4083d6 <lv_obj_set_state+0x43e>
        if(tr == NULL) return NULL;
  40824c:	2e00      	cmp	r6, #0
  40824e:	f000 81cb 	beq.w	4085e8 <lv_obj_set_state+0x650>
        tr->start_value._color = c1;
  408252:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  408256:	8133      	strh	r3, [r6, #8]
        tr->end_value._color = c2;
  408258:	f8a6 800c 	strh.w	r8, [r6, #12]
  40825c:	e058      	b.n	408310 <lv_obj_set_state+0x378>
  40825e:	bf00      	nop
  408260:	004150ef 	.word	0x004150ef
  408264:	00407d91 	.word	0x00407d91
  408268:	00422fa5 	.word	0x00422fa5
  40826c:	00425a74 	.word	0x00425a74
  408270:	004150f9 	.word	0x004150f9
  408274:	004069b5 	.word	0x004069b5
  408278:	0040a3ed 	.word	0x0040a3ed
  40827c:	00405219 	.word	0x00405219
  408280:	0040a24f 	.word	0x0040a24f
  408284:	004063c9 	.word	0x004063c9
  408288:	00409a45 	.word	0x00409a45
  40828c:	2043a204 	.word	0x2043a204
  408290:	00415355 	.word	0x00415355
        style_list->skip_trans = 1;
  408294:	796b      	ldrb	r3, [r5, #5]
        style_list->ignore_cache = 1;
  408296:	f043 0309 	orr.w	r3, r3, #9
  40829a:	716b      	strb	r3, [r5, #5]
        obj->state = prev_state;
  40829c:	f889 a03d 	strb.w	sl, [r9, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
  4082a0:	4622      	mov	r2, r4
  4082a2:	f8dd 8000 	ldr.w	r8, [sp]
  4082a6:	4641      	mov	r1, r8
  4082a8:	4648      	mov	r0, r9
  4082aa:	47b8      	blx	r7
  4082ac:	9004      	str	r0, [sp, #16]
        obj->state = new_state;
  4082ae:	f889 b03d 	strb.w	fp, [r9, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
  4082b2:	4622      	mov	r2, r4
  4082b4:	f8cd 8000 	str.w	r8, [sp]
  4082b8:	4641      	mov	r1, r8
  4082ba:	4648      	mov	r0, r9
  4082bc:	47b8      	blx	r7
  4082be:	4680      	mov	r8, r0
        style_list->skip_trans = 0;
  4082c0:	796b      	ldrb	r3, [r5, #5]
        style_list->ignore_cache = cache_ori;
  4082c2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4082c6:	f366 03c3 	bfi	r3, r6, #3, #1
  4082ca:	716b      	strb	r3, [r5, #5]
        if(int1 == int2)  return NULL;
  4082cc:	9b04      	ldr	r3, [sp, #16]
  4082ce:	4283      	cmp	r3, r0
  4082d0:	f000 818a 	beq.w	4085e8 <lv_obj_set_state+0x650>
        obj->state = prev_state;
  4082d4:	f889 a03d 	strb.w	sl, [r9, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
  4082d8:	4622      	mov	r2, r4
  4082da:	9900      	ldr	r1, [sp, #0]
  4082dc:	4648      	mov	r0, r9
  4082de:	47b8      	blx	r7
  4082e0:	4605      	mov	r5, r0
        obj->state = new_state;
  4082e2:	f889 b03d 	strb.w	fp, [r9, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
  4082e6:	4602      	mov	r2, r0
  4082e8:	4621      	mov	r1, r4
  4082ea:	9801      	ldr	r0, [sp, #4]
  4082ec:	4b82      	ldr	r3, [pc, #520]	; (4084f8 <lv_obj_set_state+0x560>)
  4082ee:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
  4082f0:	2c01      	cmp	r4, #1
  4082f2:	d03b      	beq.n	40836c <lv_obj_set_state+0x3d4>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  4082f4:	4881      	ldr	r0, [pc, #516]	; (4084fc <lv_obj_set_state+0x564>)
  4082f6:	4b82      	ldr	r3, [pc, #520]	; (408500 <lv_obj_set_state+0x568>)
  4082f8:	4798      	blx	r3
  4082fa:	4606      	mov	r6, r0
        LV_ASSERT_MEM(tr);
  4082fc:	4b81      	ldr	r3, [pc, #516]	; (408504 <lv_obj_set_state+0x56c>)
  4082fe:	4798      	blx	r3
  408300:	2800      	cmp	r0, #0
  408302:	d062      	beq.n	4083ca <lv_obj_set_state+0x432>
        if(tr == NULL) return NULL;
  408304:	2e00      	cmp	r6, #0
  408306:	f000 816f 	beq.w	4085e8 <lv_obj_set_state+0x650>
        tr->start_value._int = int1;
  40830a:	8135      	strh	r5, [r6, #8]
        tr->end_value._int = int2;
  40830c:	f8a6 800c 	strh.w	r8, [r6, #12]
                    tr->obj = obj;
  408310:	f8c6 9000 	str.w	r9, [r6]
                    tr->prop = props[i];
  408314:	80b4      	strh	r4, [r6, #4]
                    tr->part = part;
  408316:	f89d 3000 	ldrb.w	r3, [sp]
  40831a:	71b3      	strb	r3, [r6, #6]
                    lv_anim_init(&a);
  40831c:	a83b      	add	r0, sp, #236	; 0xec
  40831e:	4b7a      	ldr	r3, [pc, #488]	; (408508 <lv_obj_set_state+0x570>)
  408320:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  408322:	963b      	str	r6, [sp, #236]	; 0xec
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
  408324:	4b79      	ldr	r3, [pc, #484]	; (40850c <lv_obj_set_state+0x574>)
  408326:	933c      	str	r3, [sp, #240]	; 0xf0
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
  408328:	4b79      	ldr	r3, [pc, #484]	; (408510 <lv_obj_set_state+0x578>)
  40832a:	933d      	str	r3, [sp, #244]	; 0xf4
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
  40832c:	4b79      	ldr	r3, [pc, #484]	; (408514 <lv_obj_set_state+0x57c>)
  40832e:	933e      	str	r3, [sp, #248]	; 0xf8
    a->start = start;
  408330:	2300      	movs	r3, #0
  408332:	9341      	str	r3, [sp, #260]	; 0x104
    a->current = start;
  408334:	9342      	str	r3, [sp, #264]	; 0x108
    a->end   = end;
  408336:	23ff      	movs	r3, #255	; 0xff
  408338:	9343      	str	r3, [sp, #268]	; 0x10c
    a->time     = duration;
  40833a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40833c:	9344      	str	r3, [sp, #272]	; 0x110
    a->act_time = -(int32_t)(delay);
  40833e:	9b08      	ldr	r3, [sp, #32]
  408340:	425b      	negs	r3, r3
  408342:	9345      	str	r3, [sp, #276]	; 0x114
  408344:	9a07      	ldr	r2, [sp, #28]
  408346:	1e53      	subs	r3, r2, #1
  408348:	1dd1      	adds	r1, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
  40834a:	aa3f      	add	r2, sp, #252	; 0xfc
        *d8 = *s8;
  40834c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  408350:	f802 0b01 	strb.w	r0, [r2], #1
    while(len) {
  408354:	428b      	cmp	r3, r1
  408356:	d1f9      	bne.n	40834c <lv_obj_set_state+0x3b4>
                    a.early_apply = 0;
  408358:	f89d 3126 	ldrb.w	r3, [sp, #294]	; 0x126
  40835c:	f36f 0300 	bfc	r3, #0, #1
  408360:	f88d 3126 	strb.w	r3, [sp, #294]	; 0x126
                    lv_anim_start(&a);
  408364:	a83b      	add	r0, sp, #236	; 0xec
  408366:	4b6c      	ldr	r3, [pc, #432]	; (408518 <lv_obj_set_state+0x580>)
  408368:	4798      	blx	r3
  40836a:	e13d      	b.n	4085e8 <lv_obj_set_state+0x650>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
  40836c:	f647 73ff 	movw	r3, #32767	; 0x7fff
  408370:	429d      	cmp	r5, r3
  408372:	d001      	beq.n	408378 <lv_obj_set_state+0x3e0>
  408374:	4598      	cmp	r8, r3
  408376:	d1bd      	bne.n	4082f4 <lv_obj_set_state+0x35c>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
  408378:	4648      	mov	r0, r9
  40837a:	4b68      	ldr	r3, [pc, #416]	; (40851c <lv_obj_set_state+0x584>)
  40837c:	4798      	blx	r3
  40837e:	4606      	mov	r6, r0
  408380:	2800      	cmp	r0, #0
  408382:	bfb8      	it	lt
  408384:	1c46      	addlt	r6, r0, #1
  408386:	f346 064f 	sbfx	r6, r6, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
  40838a:	4648      	mov	r0, r9
  40838c:	4b63      	ldr	r3, [pc, #396]	; (40851c <lv_obj_set_state+0x584>)
  40838e:	4798      	blx	r3
  408390:	4603      	mov	r3, r0
  408392:	2800      	cmp	r0, #0
  408394:	bfb8      	it	lt
  408396:	1c43      	addlt	r3, r0, #1
  408398:	f343 034f 	sbfx	r3, r3, #1, #16
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  40839c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4083a0:	4295      	cmp	r5, r2
  4083a2:	d109      	bne.n	4083b8 <lv_obj_set_state+0x420>
  4083a4:	1c5d      	adds	r5, r3, #1
  4083a6:	1c72      	adds	r2, r6, #1
  4083a8:	4295      	cmp	r5, r2
  4083aa:	bfa8      	it	ge
  4083ac:	4615      	movge	r5, r2
  4083ae:	b22d      	sxth	r5, r5
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  4083b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4083b4:	4590      	cmp	r8, r2
  4083b6:	d19d      	bne.n	4082f4 <lv_obj_set_state+0x35c>
  4083b8:	f103 0801 	add.w	r8, r3, #1
  4083bc:	3601      	adds	r6, #1
  4083be:	45b0      	cmp	r8, r6
  4083c0:	bfa8      	it	ge
  4083c2:	46b0      	movge	r8, r6
  4083c4:	fa0f f888 	sxth.w	r8, r8
  4083c8:	e794      	b.n	4082f4 <lv_obj_set_state+0x35c>
        LV_ASSERT_MEM(tr);
  4083ca:	4632      	mov	r2, r6
  4083cc:	2300      	movs	r3, #0
  4083ce:	4854      	ldr	r0, [pc, #336]	; (408520 <lv_obj_set_state+0x588>)
  4083d0:	4954      	ldr	r1, [pc, #336]	; (408524 <lv_obj_set_state+0x58c>)
  4083d2:	4788      	blx	r1
  4083d4:	e7fe      	b.n	4083d4 <lv_obj_set_state+0x43c>
        LV_ASSERT_MEM(tr);
  4083d6:	4632      	mov	r2, r6
  4083d8:	2300      	movs	r3, #0
  4083da:	4851      	ldr	r0, [pc, #324]	; (408520 <lv_obj_set_state+0x588>)
  4083dc:	4951      	ldr	r1, [pc, #324]	; (408524 <lv_obj_set_state+0x58c>)
  4083de:	4788      	blx	r1
  4083e0:	e7fe      	b.n	4083e0 <lv_obj_set_state+0x448>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  4083e2:	2b0d      	cmp	r3, #13
  4083e4:	dc40      	bgt.n	408468 <lv_obj_set_state+0x4d0>
        style_list->skip_trans = 1;
  4083e6:	796b      	ldrb	r3, [r5, #5]
        style_list->ignore_cache = 1;
  4083e8:	f043 0309 	orr.w	r3, r3, #9
  4083ec:	716b      	strb	r3, [r5, #5]
        obj->state = prev_state;
  4083ee:	f889 a03d 	strb.w	sl, [r9, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
  4083f2:	4622      	mov	r2, r4
  4083f4:	9900      	ldr	r1, [sp, #0]
  4083f6:	4648      	mov	r0, r9
  4083f8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 408528 <lv_obj_set_state+0x590>
  4083fc:	47c0      	blx	r8
  4083fe:	9004      	str	r0, [sp, #16]
        obj->state = new_state;
  408400:	f889 b03d 	strb.w	fp, [r9, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
  408404:	4622      	mov	r2, r4
  408406:	9900      	ldr	r1, [sp, #0]
  408408:	4648      	mov	r0, r9
  40840a:	47c0      	blx	r8
  40840c:	4680      	mov	r8, r0
        style_list->skip_trans = 0;
  40840e:	796b      	ldrb	r3, [r5, #5]
        style_list->ignore_cache = cache_ori;
  408410:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  408414:	f366 03c3 	bfi	r3, r6, #3, #1
  408418:	716b      	strb	r3, [r5, #5]
        if(o1 == o2) return NULL;
  40841a:	9b04      	ldr	r3, [sp, #16]
  40841c:	4283      	cmp	r3, r0
  40841e:	f000 80e3 	beq.w	4085e8 <lv_obj_set_state+0x650>
        obj->state = prev_state;
  408422:	f889 a03d 	strb.w	sl, [r9, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
  408426:	4622      	mov	r2, r4
  408428:	9900      	ldr	r1, [sp, #0]
  40842a:	4648      	mov	r0, r9
  40842c:	4b3e      	ldr	r3, [pc, #248]	; (408528 <lv_obj_set_state+0x590>)
  40842e:	4798      	blx	r3
  408430:	4605      	mov	r5, r0
        obj->state = new_state;
  408432:	f889 b03d 	strb.w	fp, [r9, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
  408436:	4602      	mov	r2, r0
  408438:	4621      	mov	r1, r4
  40843a:	9801      	ldr	r0, [sp, #4]
  40843c:	4b3b      	ldr	r3, [pc, #236]	; (40852c <lv_obj_set_state+0x594>)
  40843e:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  408440:	482e      	ldr	r0, [pc, #184]	; (4084fc <lv_obj_set_state+0x564>)
  408442:	4b2f      	ldr	r3, [pc, #188]	; (408500 <lv_obj_set_state+0x568>)
  408444:	4798      	blx	r3
  408446:	4606      	mov	r6, r0
        LV_ASSERT_MEM(tr);
  408448:	4b2e      	ldr	r3, [pc, #184]	; (408504 <lv_obj_set_state+0x56c>)
  40844a:	4798      	blx	r3
  40844c:	b130      	cbz	r0, 40845c <lv_obj_set_state+0x4c4>
        if(tr == NULL) return NULL;
  40844e:	2e00      	cmp	r6, #0
  408450:	f000 80ca 	beq.w	4085e8 <lv_obj_set_state+0x650>
        tr->start_value._opa = o1;
  408454:	7235      	strb	r5, [r6, #8]
        tr->end_value._opa = o2;
  408456:	f886 800c 	strb.w	r8, [r6, #12]
  40845a:	e759      	b.n	408310 <lv_obj_set_state+0x378>
        LV_ASSERT_MEM(tr);
  40845c:	4632      	mov	r2, r6
  40845e:	2300      	movs	r3, #0
  408460:	482f      	ldr	r0, [pc, #188]	; (408520 <lv_obj_set_state+0x588>)
  408462:	4930      	ldr	r1, [pc, #192]	; (408524 <lv_obj_set_state+0x58c>)
  408464:	4788      	blx	r1
  408466:	e7fe      	b.n	408466 <lv_obj_set_state+0x4ce>
        obj->state = prev_state;
  408468:	f889 a03d 	strb.w	sl, [r9, #61]	; 0x3d
        style_list->skip_trans = 1;
  40846c:	796b      	ldrb	r3, [r5, #5]
        style_list->ignore_cache = 1;
  40846e:	f043 0309 	orr.w	r3, r3, #9
  408472:	716b      	strb	r3, [r5, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
  408474:	4622      	mov	r2, r4
  408476:	9900      	ldr	r1, [sp, #0]
  408478:	4648      	mov	r0, r9
  40847a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 408534 <lv_obj_set_state+0x59c>
  40847e:	47c0      	blx	r8
  408480:	900b      	str	r0, [sp, #44]	; 0x2c
        obj->state = new_state;
  408482:	f889 b03d 	strb.w	fp, [r9, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
  408486:	4622      	mov	r2, r4
  408488:	9900      	ldr	r1, [sp, #0]
  40848a:	4648      	mov	r0, r9
  40848c:	47c0      	blx	r8
  40848e:	4680      	mov	r8, r0
  408490:	a96a      	add	r1, sp, #424	; 0x1a8
  408492:	f841 0dbc 	str.w	r0, [r1, #-188]!
        style_list->skip_trans = 0;
  408496:	796b      	ldrb	r3, [r5, #5]
        style_list->ignore_cache = cache_ori;
  408498:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  40849c:	f366 03c3 	bfi	r3, r6, #3, #1
  4084a0:	716b      	strb	r3, [r5, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  4084a2:	2204      	movs	r2, #4
  4084a4:	a80b      	add	r0, sp, #44	; 0x2c
  4084a6:	4b22      	ldr	r3, [pc, #136]	; (408530 <lv_obj_set_state+0x598>)
  4084a8:	4798      	blx	r3
  4084aa:	2800      	cmp	r0, #0
  4084ac:	f000 809c 	beq.w	4085e8 <lv_obj_set_state+0x650>
        obj->state = prev_state;
  4084b0:	f889 a03d 	strb.w	sl, [r9, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
  4084b4:	4622      	mov	r2, r4
  4084b6:	9900      	ldr	r1, [sp, #0]
  4084b8:	4648      	mov	r0, r9
  4084ba:	4b1e      	ldr	r3, [pc, #120]	; (408534 <lv_obj_set_state+0x59c>)
  4084bc:	4798      	blx	r3
  4084be:	4605      	mov	r5, r0
  4084c0:	900b      	str	r0, [sp, #44]	; 0x2c
        obj->state = new_state;
  4084c2:	f889 b03d 	strb.w	fp, [r9, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
  4084c6:	4602      	mov	r2, r0
  4084c8:	4621      	mov	r1, r4
  4084ca:	9801      	ldr	r0, [sp, #4]
  4084cc:	4b1a      	ldr	r3, [pc, #104]	; (408538 <lv_obj_set_state+0x5a0>)
  4084ce:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  4084d0:	480a      	ldr	r0, [pc, #40]	; (4084fc <lv_obj_set_state+0x564>)
  4084d2:	4b0b      	ldr	r3, [pc, #44]	; (408500 <lv_obj_set_state+0x568>)
  4084d4:	4798      	blx	r3
  4084d6:	4606      	mov	r6, r0
        LV_ASSERT_MEM(tr);
  4084d8:	4b0a      	ldr	r3, [pc, #40]	; (408504 <lv_obj_set_state+0x56c>)
  4084da:	4798      	blx	r3
  4084dc:	b130      	cbz	r0, 4084ec <lv_obj_set_state+0x554>
        if(tr == NULL) return NULL;
  4084de:	2e00      	cmp	r6, #0
  4084e0:	f000 8082 	beq.w	4085e8 <lv_obj_set_state+0x650>
        tr->start_value._ptr = p1;
  4084e4:	60b5      	str	r5, [r6, #8]
        tr->end_value._ptr = p2;
  4084e6:	f8c6 800c 	str.w	r8, [r6, #12]
  4084ea:	e711      	b.n	408310 <lv_obj_set_state+0x378>
        LV_ASSERT_MEM(tr);
  4084ec:	4632      	mov	r2, r6
  4084ee:	2300      	movs	r3, #0
  4084f0:	480b      	ldr	r0, [pc, #44]	; (408520 <lv_obj_set_state+0x588>)
  4084f2:	490c      	ldr	r1, [pc, #48]	; (408524 <lv_obj_set_state+0x58c>)
  4084f4:	4788      	blx	r1
  4084f6:	e7fe      	b.n	4084f6 <lv_obj_set_state+0x55e>
  4084f8:	004098e5 	.word	0x004098e5
  4084fc:	2043a204 	.word	0x2043a204
  408500:	00415355 	.word	0x00415355
  408504:	004150ef 	.word	0x004150ef
  408508:	00414729 	.word	0x00414729
  40850c:	00407071 	.word	0x00407071
  408510:	004071bd 	.word	0x004071bd
  408514:	00405351 	.word	0x00405351
  408518:	004147ed 	.word	0x004147ed
  40851c:	0040518d 	.word	0x0040518d
  408520:	00425a60 	.word	0x00425a60
  408524:	004150f9 	.word	0x004150f9
  408528:	00406459 	.word	0x00406459
  40852c:	00409ba5 	.word	0x00409ba5
  408530:	00422fa5 	.word	0x00422fa5
  408534:	004068c1 	.word	0x004068c1
  408538:	00409cf1 	.word	0x00409cf1
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  40853c:	22ff      	movs	r2, #255	; 0xff
  40853e:	9900      	ldr	r1, [sp, #0]
  408540:	4648      	mov	r0, r9
  408542:	4b38      	ldr	r3, [pc, #224]	; (408624 <lv_obj_set_state+0x68c>)
  408544:	4798      	blx	r3
  408546:	9b03      	ldr	r3, [sp, #12]
  408548:	3301      	adds	r3, #1
  40854a:	9303      	str	r3, [sp, #12]
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
  40854c:	2b40      	cmp	r3, #64	; 0x40
  40854e:	d05b      	beq.n	408608 <lv_obj_set_state+0x670>
  408550:	f89d 300c 	ldrb.w	r3, [sp, #12]
  408554:	9300      	str	r3, [sp, #0]
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  408556:	4619      	mov	r1, r3
  408558:	4648      	mov	r0, r9
  40855a:	4b33      	ldr	r3, [pc, #204]	; (408628 <lv_obj_set_state+0x690>)
  40855c:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  40855e:	9006      	str	r0, [sp, #24]
  408560:	2800      	cmp	r0, #0
  408562:	d051      	beq.n	408608 <lv_obj_set_state+0x670>
        if(style_list->ignore_trans) continue;
  408564:	7943      	ldrb	r3, [r0, #5]
  408566:	f013 0f02 	tst.w	r3, #2
  40856a:	d1ec      	bne.n	408546 <lv_obj_set_state+0x5ae>
  40856c:	22b0      	movs	r2, #176	; 0xb0
  40856e:	9c00      	ldr	r4, [sp, #0]
  408570:	4621      	mov	r1, r4
  408572:	4648      	mov	r0, r9
  408574:	47b8      	blx	r7
  408576:	9009      	str	r0, [sp, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  408578:	22b1      	movs	r2, #177	; 0xb1
  40857a:	4621      	mov	r1, r4
  40857c:	4648      	mov	r0, r9
  40857e:	47b8      	blx	r7
  408580:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
  408582:	22be      	movs	r2, #190	; 0xbe
  408584:	4621      	mov	r1, r4
  408586:	4648      	mov	r0, r9
  408588:	4b28      	ldr	r3, [pc, #160]	; (40862c <lv_obj_set_state+0x694>)
  40858a:	4798      	blx	r3
  40858c:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
  40858e:	22b2      	movs	r2, #178	; 0xb2
  408590:	4621      	mov	r1, r4
  408592:	4648      	mov	r0, r9
  408594:	47b8      	blx	r7
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
  408596:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
  40859a:	22b3      	movs	r2, #179	; 0xb3
  40859c:	4621      	mov	r1, r4
  40859e:	4648      	mov	r0, r9
  4085a0:	47b8      	blx	r7
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
  4085a2:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  4085a6:	22b4      	movs	r2, #180	; 0xb4
  4085a8:	4621      	mov	r1, r4
  4085aa:	4648      	mov	r0, r9
  4085ac:	47b8      	blx	r7
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
  4085ae:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  4085b2:	22b5      	movs	r2, #181	; 0xb5
  4085b4:	4621      	mov	r1, r4
  4085b6:	4648      	mov	r0, r9
  4085b8:	47b8      	blx	r7
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
  4085ba:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  4085be:	22b6      	movs	r2, #182	; 0xb6
  4085c0:	4621      	mov	r1, r4
  4085c2:	4648      	mov	r0, r9
  4085c4:	47b8      	blx	r7
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
  4085c6:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  4085ca:	22b7      	movs	r2, #183	; 0xb7
  4085cc:	4621      	mov	r1, r4
  4085ce:	4648      	mov	r0, r9
  4085d0:	47b8      	blx	r7
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
  4085d2:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
  4085d6:	ab0c      	add	r3, sp, #48	; 0x30
  4085d8:	9302      	str	r3, [sp, #8]
            if(props[i] != 0) {
  4085da:	9b02      	ldr	r3, [sp, #8]
  4085dc:	f833 4b02 	ldrh.w	r4, [r3], #2
  4085e0:	9302      	str	r3, [sp, #8]
  4085e2:	2c00      	cmp	r4, #0
  4085e4:	f47f ade3 	bne.w	4081ae <lv_obj_set_state+0x216>
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  4085e8:	9b02      	ldr	r3, [sp, #8]
  4085ea:	aa0f      	add	r2, sp, #60	; 0x3c
  4085ec:	4293      	cmp	r3, r2
  4085ee:	d1f4      	bne.n	4085da <lv_obj_set_state+0x642>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  4085f0:	9b05      	ldr	r3, [sp, #20]
  4085f2:	2b02      	cmp	r3, #2
  4085f4:	d0a2      	beq.n	40853c <lv_obj_set_state+0x5a4>
        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  4085f6:	9b05      	ldr	r3, [sp, #20]
  4085f8:	2b01      	cmp	r3, #1
  4085fa:	d1a4      	bne.n	408546 <lv_obj_set_state+0x5ae>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
  4085fc:	22ff      	movs	r2, #255	; 0xff
  4085fe:	9900      	ldr	r1, [sp, #0]
  408600:	4648      	mov	r0, r9
  408602:	4b0b      	ldr	r3, [pc, #44]	; (408630 <lv_obj_set_state+0x698>)
  408604:	4798      	blx	r3
  408606:	e79e      	b.n	408546 <lv_obj_set_state+0x5ae>
  408608:	f8dd a014 	ldr.w	sl, [sp, #20]
    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  40860c:	f1ba 0f01 	cmp.w	sl, #1
  408610:	d002      	beq.n	408618 <lv_obj_set_state+0x680>
}
  408612:	b06b      	add	sp, #428	; 0x1ac
  408614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(obj);
  408618:	4648      	mov	r0, r9
  40861a:	4b06      	ldr	r3, [pc, #24]	; (408634 <lv_obj_set_state+0x69c>)
  40861c:	4798      	blx	r3
  40861e:	e7f8      	b.n	408612 <lv_obj_set_state+0x67a>
  408620:	4770      	bx	lr
  408622:	bf00      	nop
  408624:	00406d55 	.word	0x00406d55
  408628:	00405219 	.word	0x00405219
  40862c:	004068c1 	.word	0x004068c1
  408630:	00406ce1 	.word	0x00406ce1
  408634:	00405565 	.word	0x00405565

00408638 <lv_obj_add_state>:
{
  408638:	b538      	push	{r3, r4, r5, lr}
  40863a:	4605      	mov	r5, r0
  40863c:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40863e:	4b09      	ldr	r3, [pc, #36]	; (408664 <lv_obj_add_state+0x2c>)
  408640:	4798      	blx	r3
  408642:	b148      	cbz	r0, 408658 <lv_obj_add_state+0x20>
    lv_state_t new_state = obj->state | state;
  408644:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  408648:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
  40864c:	428b      	cmp	r3, r1
  40864e:	d002      	beq.n	408656 <lv_obj_add_state+0x1e>
        lv_obj_set_state(obj, new_state);
  408650:	4628      	mov	r0, r5
  408652:	4b05      	ldr	r3, [pc, #20]	; (408668 <lv_obj_add_state+0x30>)
  408654:	4798      	blx	r3
  408656:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408658:	462a      	mov	r2, r5
  40865a:	2300      	movs	r3, #0
  40865c:	4803      	ldr	r0, [pc, #12]	; (40866c <lv_obj_add_state+0x34>)
  40865e:	4904      	ldr	r1, [pc, #16]	; (408670 <lv_obj_add_state+0x38>)
  408660:	4788      	blx	r1
  408662:	e7fe      	b.n	408662 <lv_obj_add_state+0x2a>
  408664:	004150ef 	.word	0x004150ef
  408668:	00407f99 	.word	0x00407f99
  40866c:	00425a74 	.word	0x00425a74
  408670:	004150f9 	.word	0x004150f9

00408674 <lv_obj_clear_state>:
{
  408674:	b538      	push	{r3, r4, r5, lr}
  408676:	4605      	mov	r5, r0
  408678:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40867a:	4b09      	ldr	r3, [pc, #36]	; (4086a0 <lv_obj_clear_state+0x2c>)
  40867c:	4798      	blx	r3
  40867e:	b148      	cbz	r0, 408694 <lv_obj_clear_state+0x20>
    lv_state_t new_state = obj->state & (~state);
  408680:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  408684:	ea23 0104 	bic.w	r1, r3, r4
    if(obj->state != new_state) {
  408688:	428b      	cmp	r3, r1
  40868a:	d002      	beq.n	408692 <lv_obj_clear_state+0x1e>
        lv_obj_set_state(obj, new_state);
  40868c:	4628      	mov	r0, r5
  40868e:	4b05      	ldr	r3, [pc, #20]	; (4086a4 <lv_obj_clear_state+0x30>)
  408690:	4798      	blx	r3
  408692:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408694:	462a      	mov	r2, r5
  408696:	2300      	movs	r3, #0
  408698:	4803      	ldr	r0, [pc, #12]	; (4086a8 <lv_obj_clear_state+0x34>)
  40869a:	4904      	ldr	r1, [pc, #16]	; (4086ac <lv_obj_clear_state+0x38>)
  40869c:	4788      	blx	r1
  40869e:	e7fe      	b.n	40869e <lv_obj_clear_state+0x2a>
  4086a0:	004150ef 	.word	0x004150ef
  4086a4:	00407f99 	.word	0x00407f99
  4086a8:	00425a74 	.word	0x00425a74
  4086ac:	004150f9 	.word	0x004150f9

004086b0 <lv_obj_get_draw_rect_ext_pad_size>:
{
  4086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4086b4:	b089      	sub	sp, #36	; 0x24
  4086b6:	4604      	mov	r4, r0
  4086b8:	460e      	mov	r6, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  4086ba:	2250      	movs	r2, #80	; 0x50
  4086bc:	4b77      	ldr	r3, [pc, #476]	; (40889c <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
  4086be:	4798      	blx	r3
    if(sh_width) {
  4086c0:	4607      	mov	r7, r0
  4086c2:	bb68      	cbnz	r0, 408720 <lv_obj_get_draw_rect_ext_pad_size+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  4086c4:	227f      	movs	r2, #127	; 0x7f
  4086c6:	4631      	mov	r1, r6
  4086c8:	4620      	mov	r0, r4
  4086ca:	4b75      	ldr	r3, [pc, #468]	; (4088a0 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  4086cc:	4798      	blx	r3
    if(value_str) {
  4086ce:	4680      	mov	r8, r0
  4086d0:	b130      	cbz	r0, 4086e0 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  4086d2:	227c      	movs	r2, #124	; 0x7c
  4086d4:	4631      	mov	r1, r6
  4086d6:	4620      	mov	r0, r4
  4086d8:	4b72      	ldr	r3, [pc, #456]	; (4088a4 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  4086da:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
  4086dc:	2802      	cmp	r0, #2
  4086de:	d84e      	bhi.n	40877e <lv_obj_get_draw_rect_ext_pad_size+0xce>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  4086e0:	2240      	movs	r2, #64	; 0x40
  4086e2:	4631      	mov	r1, r6
  4086e4:	4620      	mov	r0, r4
  4086e6:	4b6d      	ldr	r3, [pc, #436]	; (40889c <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
  4086e8:	4798      	blx	r3
    if(outline_width) {
  4086ea:	4605      	mov	r5, r0
  4086ec:	2800      	cmp	r0, #0
  4086ee:	f040 80c1 	bne.w	408874 <lv_obj_get_draw_rect_ext_pad_size+0x1c4>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  4086f2:	2204      	movs	r2, #4
  4086f4:	4631      	mov	r1, r6
  4086f6:	4620      	mov	r0, r4
  4086f8:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 40889c <lv_obj_get_draw_rect_ext_pad_size+0x1ec>
  4086fc:	47c0      	blx	r8
  4086fe:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408700:	2205      	movs	r2, #5
  408702:	4631      	mov	r1, r6
  408704:	4620      	mov	r0, r4
  408706:	47c0      	blx	r8
    lv_coord_t wh = LV_MATH_MAX(w, h);
  408708:	42a8      	cmp	r0, r5
  40870a:	bfb8      	it	lt
  40870c:	4628      	movlt	r0, r5
  40870e:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
  408710:	2800      	cmp	r0, #0
  408712:	dd01      	ble.n	408718 <lv_obj_get_draw_rect_ext_pad_size+0x68>
  408714:	4438      	add	r0, r7
  408716:	b207      	sxth	r7, r0
}
  408718:	4638      	mov	r0, r7
  40871a:	b009      	add	sp, #36	; 0x24
  40871c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  408720:	225c      	movs	r2, #92	; 0x5c
  408722:	4631      	mov	r1, r6
  408724:	4620      	mov	r0, r4
  408726:	4b5f      	ldr	r3, [pc, #380]	; (4088a4 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  408728:	4798      	blx	r3
        if(sh_opa > LV_OPA_MIN) {
  40872a:	2802      	cmp	r0, #2
  40872c:	d801      	bhi.n	408732 <lv_obj_get_draw_rect_ext_pad_size+0x82>
    lv_coord_t s = 0;
  40872e:	2700      	movs	r7, #0
  408730:	e7c8      	b.n	4086c4 <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  408732:	2253      	movs	r2, #83	; 0x53
  408734:	4631      	mov	r1, r6
  408736:	4620      	mov	r0, r4
  408738:	4b58      	ldr	r3, [pc, #352]	; (40889c <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
  40873a:	4798      	blx	r3
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  40873c:	463b      	mov	r3, r7
  40873e:	2f00      	cmp	r7, #0
  408740:	bfb8      	it	lt
  408742:	1c7b      	addlt	r3, r7, #1
            sh_width++;
  408744:	eb00 0763 	add.w	r7, r0, r3, asr #1
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
  408748:	3701      	adds	r7, #1
  40874a:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  40874c:	2251      	movs	r2, #81	; 0x51
  40874e:	4631      	mov	r1, r6
  408750:	4620      	mov	r0, r4
  408752:	f8df 8148 	ldr.w	r8, [pc, #328]	; 40889c <lv_obj_get_draw_rect_ext_pad_size+0x1ec>
  408756:	47c0      	blx	r8
  408758:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  40875a:	2252      	movs	r2, #82	; 0x52
  40875c:	4631      	mov	r1, r6
  40875e:	4620      	mov	r0, r4
  408760:	47c0      	blx	r8
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
  408762:	2800      	cmp	r0, #0
  408764:	bfb8      	it	lt
  408766:	4240      	neglt	r0, r0
  408768:	2d00      	cmp	r5, #0
  40876a:	bfb8      	it	lt
  40876c:	426d      	neglt	r5, r5
  40876e:	42a8      	cmp	r0, r5
  408770:	bfac      	ite	ge
  408772:	183f      	addge	r7, r7, r0
  408774:	197f      	addlt	r7, r7, r5
            s = LV_MATH_MAX(s, sh_width);
  408776:	b238      	sxth	r0, r7
  408778:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
  40877c:	e7a2      	b.n	4086c4 <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  40877e:	2270      	movs	r2, #112	; 0x70
  408780:	4631      	mov	r1, r6
  408782:	4620      	mov	r0, r4
  408784:	4d45      	ldr	r5, [pc, #276]	; (40889c <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
  408786:	47a8      	blx	r5
  408788:	4682      	mov	sl, r0
  40878a:	2270      	movs	r2, #112	; 0x70
  40878c:	4631      	mov	r1, r6
  40878e:	4620      	mov	r0, r4
  408790:	47a8      	blx	r5
  408792:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  408794:	227e      	movs	r2, #126	; 0x7e
  408796:	4631      	mov	r1, r6
  408798:	4620      	mov	r0, r4
  40879a:	4b41      	ldr	r3, [pc, #260]	; (4088a0 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  40879c:	4798      	blx	r3
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
  40879e:	f04f 0900 	mov.w	r9, #0
  4087a2:	f8cd 9008 	str.w	r9, [sp, #8]
  4087a6:	f647 4318 	movw	r3, #31768	; 0x7c18
  4087aa:	9301      	str	r3, [sp, #4]
  4087ac:	f8cd b000 	str.w	fp, [sp]
  4087b0:	4653      	mov	r3, sl
  4087b2:	4602      	mov	r2, r0
  4087b4:	4641      	mov	r1, r8
  4087b6:	a804      	add	r0, sp, #16
  4087b8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 4088a8 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>
  4087bc:	47c0      	blx	r8
            value_area.x1 = 0;
  4087be:	f8ad 9018 	strh.w	r9, [sp, #24]
            value_area.y1 = 0;
  4087c2:	f8ad 901a 	strh.w	r9, [sp, #26]
            value_area.x2 = txt_size.x - 1;
  4087c6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  4087ca:	3b01      	subs	r3, #1
  4087cc:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
  4087d0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4087d4:	3b01      	subs	r3, #1
  4087d6:	f8ad 301e 	strh.w	r3, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  4087da:	2275      	movs	r2, #117	; 0x75
  4087dc:	4631      	mov	r1, r6
  4087de:	4620      	mov	r0, r4
  4087e0:	47a8      	blx	r5
  4087e2:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  4087e4:	2273      	movs	r2, #115	; 0x73
  4087e6:	4631      	mov	r1, r6
  4087e8:	4620      	mov	r0, r4
  4087ea:	47a8      	blx	r5
  4087ec:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  4087ee:	2274      	movs	r2, #116	; 0x74
  4087f0:	4631      	mov	r1, r6
  4087f2:	4620      	mov	r0, r4
  4087f4:	47a8      	blx	r5
  4087f6:	4605      	mov	r5, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
  4087f8:	ab05      	add	r3, sp, #20
  4087fa:	fa5f f289 	uxtb.w	r2, r9
  4087fe:	a906      	add	r1, sp, #24
  408800:	f104 0010 	add.w	r0, r4, #16
  408804:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4088ac <lv_obj_get_draw_rect_ext_pad_size+0x1fc>
  408808:	47c8      	blx	r9
            value_area.x1 += p_align.x + xofs;
  40880a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40880e:	4443      	add	r3, r8
  408810:	b29b      	uxth	r3, r3
            value_area.y1 += p_align.y + yofs;
  408812:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  408816:	442a      	add	r2, r5
  408818:	b292      	uxth	r2, r2
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
  40881a:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
            value_area.x1 += p_align.x + xofs;
  40881e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
  408822:	4419      	add	r1, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
  408824:	b209      	sxth	r1, r1
  408826:	1a40      	subs	r0, r0, r1
  408828:	42b8      	cmp	r0, r7
  40882a:	bfb8      	it	lt
  40882c:	4638      	movlt	r0, r7
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
  40882e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
            value_area.y1 += p_align.y + yofs;
  408832:	f8bd 701a 	ldrh.w	r7, [sp, #26]
  408836:	4417      	add	r7, r2
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
  408838:	b23f      	sxth	r7, r7
  40883a:	1bcf      	subs	r7, r1, r7
  40883c:	b200      	sxth	r0, r0
  40883e:	4287      	cmp	r7, r0
  408840:	bfb8      	it	lt
  408842:	4607      	movlt	r7, r0
            value_area.x2 += p_align.x + xofs;
  408844:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  408848:	4403      	add	r3, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
  40884a:	b21b      	sxth	r3, r3
  40884c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
  408850:	1a18      	subs	r0, r3, r0
  408852:	b23b      	sxth	r3, r7
  408854:	4283      	cmp	r3, r0
  408856:	bfb8      	it	lt
  408858:	4603      	movlt	r3, r0
            value_area.y2 += p_align.y + yofs;
  40885a:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  40885e:	4410      	add	r0, r2
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
  408860:	b200      	sxth	r0, r0
  408862:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
  408866:	1bc7      	subs	r7, r0, r7
  408868:	b218      	sxth	r0, r3
  40886a:	42b8      	cmp	r0, r7
  40886c:	bfb8      	it	lt
  40886e:	4638      	movlt	r0, r7
  408870:	b207      	sxth	r7, r0
  408872:	e735      	b.n	4086e0 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  408874:	224c      	movs	r2, #76	; 0x4c
  408876:	4631      	mov	r1, r6
  408878:	4620      	mov	r0, r4
  40887a:	4b0a      	ldr	r3, [pc, #40]	; (4088a4 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  40887c:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
  40887e:	2802      	cmp	r0, #2
  408880:	f67f af37 	bls.w	4086f2 <lv_obj_get_draw_rect_ext_pad_size+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  408884:	2241      	movs	r2, #65	; 0x41
  408886:	4631      	mov	r1, r6
  408888:	4620      	mov	r0, r4
  40888a:	4b04      	ldr	r3, [pc, #16]	; (40889c <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
  40888c:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
  40888e:	4428      	add	r0, r5
  408890:	42b8      	cmp	r0, r7
  408892:	bfb8      	it	lt
  408894:	4638      	movlt	r0, r7
  408896:	b207      	sxth	r7, r0
  408898:	e72b      	b.n	4086f2 <lv_obj_get_draw_rect_ext_pad_size+0x42>
  40889a:	bf00      	nop
  40889c:	004069b5 	.word	0x004069b5
  4088a0:	004068c1 	.word	0x004068c1
  4088a4:	00406459 	.word	0x00406459
  4088a8:	0041725d 	.word	0x0041725d
  4088ac:	00414c4d 	.word	0x00414c4d

004088b0 <lv_obj_get_focused_obj>:
    if(obj == NULL) return NULL;
  4088b0:	b198      	cbz	r0, 4088da <lv_obj_get_focused_obj+0x2a>
  4088b2:	4603      	mov	r3, r0
    return obj->focus_parent == 0 ? false : true;
  4088b4:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
  4088b8:	f012 0f02 	tst.w	r2, #2
  4088bc:	d00f      	beq.n	4088de <lv_obj_get_focused_obj+0x2e>
{
  4088be:	b510      	push	{r4, lr}
        focus_obj = lv_obj_get_parent(focus_obj);
  4088c0:	4c07      	ldr	r4, [pc, #28]	; (4088e0 <lv_obj_get_focused_obj+0x30>)
  4088c2:	4618      	mov	r0, r3
  4088c4:	47a0      	blx	r4
  4088c6:	4603      	mov	r3, r0
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
  4088c8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
  4088cc:	f012 0f02 	tst.w	r2, #2
  4088d0:	d001      	beq.n	4088d6 <lv_obj_get_focused_obj+0x26>
  4088d2:	2800      	cmp	r0, #0
  4088d4:	d1f5      	bne.n	4088c2 <lv_obj_get_focused_obj+0x12>
        focus_obj = lv_obj_get_parent(focus_obj);
  4088d6:	4618      	mov	r0, r3
  4088d8:	bd10      	pop	{r4, pc}
    if(obj == NULL) return NULL;
  4088da:	2000      	movs	r0, #0
  4088dc:	4770      	bx	lr
  4088de:	4770      	bx	lr
  4088e0:	00404fa5 	.word	0x00404fa5

004088e4 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
  4088e4:	2908      	cmp	r1, #8
  4088e6:	d01a      	beq.n	40891e <lv_obj_signal+0x3a>
{
  4088e8:	b510      	push	{r4, lr}
  4088ea:	4604      	mov	r4, r0
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4088ec:	2907      	cmp	r1, #7
  4088ee:	d020      	beq.n	408932 <lv_obj_signal+0x4e>
    if(sign == LV_SIGNAL_CHILD_CHG) {
  4088f0:	2901      	cmp	r1, #1
  4088f2:	d023      	beq.n	40893c <lv_obj_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  4088f4:	2906      	cmp	r1, #6
  4088f6:	d027      	beq.n	408948 <lv_obj_signal+0x64>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  4088f8:	2903      	cmp	r1, #3
  4088fa:	d030      	beq.n	40895e <lv_obj_signal+0x7a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  4088fc:	2904      	cmp	r1, #4
  4088fe:	d039      	beq.n	408974 <lv_obj_signal+0x90>
    else if(sign == LV_SIGNAL_PRESSED) {
  408900:	290b      	cmp	r1, #11
  408902:	d03b      	beq.n	40897c <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
  408904:	f1a1 030d 	sub.w	r3, r1, #13
  408908:	b2db      	uxtb	r3, r3
  40890a:	2b01      	cmp	r3, #1
  40890c:	d93b      	bls.n	408986 <lv_obj_signal+0xa2>
    else if(sign == LV_SIGNAL_FOCUS) {
  40890e:	2916      	cmp	r1, #22
  408910:	d03e      	beq.n	408990 <lv_obj_signal+0xac>
    else if(sign == LV_SIGNAL_DEFOCUS) {
  408912:	2917      	cmp	r1, #23
  408914:	d056      	beq.n	4089c4 <lv_obj_signal+0xe0>
    else if(sign == LV_SIGNAL_CLEANUP) {
  408916:	2900      	cmp	r1, #0
  408918:	d05b      	beq.n	4089d2 <lv_obj_signal+0xee>
    lv_res_t res = LV_RES_OK;
  40891a:	2001      	movs	r0, #1
}
  40891c:	bd10      	pop	{r4, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
  40891e:	7813      	ldrb	r3, [r2, #0]
  408920:	b91b      	cbnz	r3, 40892a <lv_obj_signal+0x46>
  408922:	3028      	adds	r0, #40	; 0x28
  408924:	6050      	str	r0, [r2, #4]
        return LV_RES_OK;
  408926:	2001      	movs	r0, #1
  408928:	4770      	bx	lr
        else info->result = NULL;
  40892a:	2300      	movs	r3, #0
  40892c:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
  40892e:	2001      	movs	r0, #1
  408930:	4770      	bx	lr
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  408932:	492a      	ldr	r1, [pc, #168]	; (4089dc <lv_obj_signal+0xf8>)
  408934:	4610      	mov	r0, r2
  408936:	4b2a      	ldr	r3, [pc, #168]	; (4089e0 <lv_obj_signal+0xfc>)
  408938:	4798      	blx	r3
  40893a:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  40893c:	4b29      	ldr	r3, [pc, #164]	; (4089e4 <lv_obj_signal+0x100>)
  40893e:	4798      	blx	r3
  408940:	f080 0001 	eor.w	r0, r0, #1
        return LV_RES_OK;
  408944:	b2c0      	uxtb	r0, r0
  408946:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
  408948:	2100      	movs	r1, #0
  40894a:	4b27      	ldr	r3, [pc, #156]	; (4089e8 <lv_obj_signal+0x104>)
  40894c:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
  40894e:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
  408952:	4298      	cmp	r0, r3
  408954:	bfb8      	it	lt
  408956:	4618      	movlt	r0, r3
  408958:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
  40895a:	2001      	movs	r0, #1
  40895c:	bd10      	pop	{r4, pc}
        if(obj->realign.auto_realign) {
  40895e:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
  408962:	f013 0f01 	tst.w	r3, #1
  408966:	d101      	bne.n	40896c <lv_obj_signal+0x88>
    lv_res_t res = LV_RES_OK;
  408968:	2001      	movs	r0, #1
  40896a:	bd10      	pop	{r4, pc}
            lv_obj_realign(obj);
  40896c:	4b1f      	ldr	r3, [pc, #124]	; (4089ec <lv_obj_signal+0x108>)
  40896e:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408970:	2001      	movs	r0, #1
  408972:	bd10      	pop	{r4, pc}
        lv_obj_refresh_ext_draw_pad(obj);
  408974:	4b1e      	ldr	r3, [pc, #120]	; (4089f0 <lv_obj_signal+0x10c>)
  408976:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408978:	2001      	movs	r0, #1
  40897a:	bd10      	pop	{r4, pc}
        lv_obj_add_state(obj, LV_STATE_PRESSED);
  40897c:	2110      	movs	r1, #16
  40897e:	4b1d      	ldr	r3, [pc, #116]	; (4089f4 <lv_obj_signal+0x110>)
  408980:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408982:	2001      	movs	r0, #1
  408984:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
  408986:	2110      	movs	r1, #16
  408988:	4b1b      	ldr	r3, [pc, #108]	; (4089f8 <lv_obj_signal+0x114>)
  40898a:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  40898c:	2001      	movs	r0, #1
  40898e:	bd10      	pop	{r4, pc}
        editing = lv_group_get_editing(lv_obj_get_group(obj));
  408990:	4b1a      	ldr	r3, [pc, #104]	; (4089fc <lv_obj_signal+0x118>)
  408992:	4798      	blx	r3
  408994:	4b1a      	ldr	r3, [pc, #104]	; (408a00 <lv_obj_signal+0x11c>)
  408996:	4798      	blx	r3
        if(editing) {
  408998:	b138      	cbz	r0, 4089aa <lv_obj_signal+0xc6>
            obj = lv_obj_get_focused_obj(obj);
  40899a:	4620      	mov	r0, r4
  40899c:	4b19      	ldr	r3, [pc, #100]	; (408a04 <lv_obj_signal+0x120>)
  40899e:	4798      	blx	r3
            lv_obj_add_state(obj, state);
  4089a0:	2106      	movs	r1, #6
  4089a2:	4b14      	ldr	r3, [pc, #80]	; (4089f4 <lv_obj_signal+0x110>)
  4089a4:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4089a6:	2001      	movs	r0, #1
  4089a8:	bd10      	pop	{r4, pc}
            obj = lv_obj_get_focused_obj(obj);
  4089aa:	4620      	mov	r0, r4
  4089ac:	4b15      	ldr	r3, [pc, #84]	; (408a04 <lv_obj_signal+0x120>)
  4089ae:	4798      	blx	r3
  4089b0:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
  4089b2:	2102      	movs	r1, #2
  4089b4:	4b0f      	ldr	r3, [pc, #60]	; (4089f4 <lv_obj_signal+0x110>)
  4089b6:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
  4089b8:	2104      	movs	r1, #4
  4089ba:	4620      	mov	r0, r4
  4089bc:	4b0e      	ldr	r3, [pc, #56]	; (4089f8 <lv_obj_signal+0x114>)
  4089be:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4089c0:	2001      	movs	r0, #1
  4089c2:	bd10      	pop	{r4, pc}
        obj = lv_obj_get_focused_obj(obj);
  4089c4:	4b0f      	ldr	r3, [pc, #60]	; (408a04 <lv_obj_signal+0x120>)
  4089c6:	4798      	blx	r3
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
  4089c8:	2106      	movs	r1, #6
  4089ca:	4b0b      	ldr	r3, [pc, #44]	; (4089f8 <lv_obj_signal+0x114>)
  4089cc:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4089ce:	2001      	movs	r0, #1
  4089d0:	bd10      	pop	{r4, pc}
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  4089d2:	4b0d      	ldr	r3, [pc, #52]	; (408a08 <lv_obj_signal+0x124>)
  4089d4:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4089d6:	2001      	movs	r0, #1
  4089d8:	bd10      	pop	{r4, pc}
  4089da:	bf00      	nop
  4089dc:	00425a84 	.word	0x00425a84
  4089e0:	0040751d 	.word	0x0040751d
  4089e4:	00406345 	.word	0x00406345
  4089e8:	004086b1 	.word	0x004086b1
  4089ec:	00405c0d 	.word	0x00405c0d
  4089f0:	00404f75 	.word	0x00404f75
  4089f4:	00408639 	.word	0x00408639
  4089f8:	00408675 	.word	0x00408675
  4089fc:	004072a9 	.word	0x004072a9
  408a00:	004032a9 	.word	0x004032a9
  408a04:	004088b1 	.word	0x004088b1
  408a08:	004052e1 	.word	0x004052e1

00408a0c <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
  408a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408a10:	4605      	mov	r5, r0
  408a12:	4688      	mov	r8, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
  408a14:	2200      	movs	r2, #0
  408a16:	3110      	adds	r1, #16
  408a18:	4b26      	ldr	r3, [pc, #152]	; (408ab4 <lv_refr_get_top_obj+0xa8>)
  408a1a:	4798      	blx	r3
  408a1c:	2800      	cmp	r0, #0
  408a1e:	d036      	beq.n	408a8e <lv_refr_get_top_obj+0x82>
  408a20:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
  408a24:	f013 0f10 	tst.w	r3, #16
  408a28:	d133      	bne.n	408a92 <lv_refr_get_top_obj+0x86>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
  408a2a:	f8d8 3020 	ldr.w	r3, [r8, #32]
  408a2e:	2202      	movs	r2, #2
  408a30:	4629      	mov	r1, r5
  408a32:	4640      	mov	r0, r8
  408a34:	4798      	blx	r3
  408a36:	4681      	mov	r9, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  408a38:	2803      	cmp	r0, #3
  408a3a:	d02c      	beq.n	408a96 <lv_refr_get_top_obj+0x8a>

#if LV_USE_OPA_SCALE
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  408a3c:	2801      	cmp	r0, #1
  408a3e:	d01b      	beq.n	408a78 <lv_refr_get_top_obj+0x6c>
            design_res = LV_DESIGN_RES_NOT_COVER;
        }
#endif

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
  408a40:	f108 0604 	add.w	r6, r8, #4
  408a44:	4630      	mov	r0, r6
  408a46:	4b1c      	ldr	r3, [pc, #112]	; (408ab8 <lv_refr_get_top_obj+0xac>)
  408a48:	4798      	blx	r3
  408a4a:	4604      	mov	r4, r0
  408a4c:	b378      	cbz	r0, 408aae <lv_refr_get_top_obj+0xa2>
  408a4e:	4f1b      	ldr	r7, [pc, #108]	; (408abc <lv_refr_get_top_obj+0xb0>)
            found_p = lv_refr_get_top_obj(area_p, i);
  408a50:	4621      	mov	r1, r4
  408a52:	4628      	mov	r0, r5
  408a54:	f7ff ffda 	bl	408a0c <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
  408a58:	4603      	mov	r3, r0
  408a5a:	b950      	cbnz	r0, 408a72 <lv_refr_get_top_obj+0x66>
        _LV_LL_READ(obj->child_ll, i) {
  408a5c:	4621      	mov	r1, r4
  408a5e:	4630      	mov	r0, r6
  408a60:	47b8      	blx	r7
  408a62:	4604      	mov	r4, r0
  408a64:	2800      	cmp	r0, #0
  408a66:	d1f3      	bne.n	408a50 <lv_refr_get_top_obj+0x44>
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
            if(design_res == LV_DESIGN_RES_COVER) {
                found_p = obj;
  408a68:	f1b9 0f01 	cmp.w	r9, #1
  408a6c:	bf14      	ite	ne
  408a6e:	4603      	movne	r3, r0
  408a70:	4643      	moveq	r3, r8
            }
        }
    }

    return found_p;
}
  408a72:	4618      	mov	r0, r3
  408a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408a78:	f248 020c 	movw	r2, #32780	; 0x800c
  408a7c:	2100      	movs	r1, #0
  408a7e:	4640      	mov	r0, r8
  408a80:	4b0f      	ldr	r3, [pc, #60]	; (408ac0 <lv_refr_get_top_obj+0xb4>)
  408a82:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  408a84:	28ff      	cmp	r0, #255	; 0xff
  408a86:	d008      	beq.n	408a9a <lv_refr_get_top_obj+0x8e>
            design_res = LV_DESIGN_RES_NOT_COVER;
  408a88:	f04f 0902 	mov.w	r9, #2
  408a8c:	e7d8      	b.n	408a40 <lv_refr_get_top_obj+0x34>
    lv_obj_t * found_p = NULL;
  408a8e:	2300      	movs	r3, #0
  408a90:	e7ef      	b.n	408a72 <lv_refr_get_top_obj+0x66>
  408a92:	2300      	movs	r3, #0
  408a94:	e7ed      	b.n	408a72 <lv_refr_get_top_obj+0x66>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  408a96:	2300      	movs	r3, #0
  408a98:	e7eb      	b.n	408a72 <lv_refr_get_top_obj+0x66>
        _LV_LL_READ(obj->child_ll, i) {
  408a9a:	f108 0604 	add.w	r6, r8, #4
  408a9e:	4630      	mov	r0, r6
  408aa0:	4b05      	ldr	r3, [pc, #20]	; (408ab8 <lv_refr_get_top_obj+0xac>)
  408aa2:	4798      	blx	r3
  408aa4:	4604      	mov	r4, r0
  408aa6:	2800      	cmp	r0, #0
  408aa8:	d1d1      	bne.n	408a4e <lv_refr_get_top_obj+0x42>
                found_p = obj;
  408aaa:	4643      	mov	r3, r8
  408aac:	e7e1      	b.n	408a72 <lv_refr_get_top_obj+0x66>
    lv_obj_t * found_p = NULL;
  408aae:	4603      	mov	r3, r0
  408ab0:	e7df      	b.n	408a72 <lv_refr_get_top_obj+0x66>
  408ab2:	bf00      	nop
  408ab4:	00414ba5 	.word	0x00414ba5
  408ab8:	004153ed 	.word	0x004153ed
  408abc:	00415401 	.word	0x00415401
  408ac0:	00406459 	.word	0x00406459

00408ac4 <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
  408ac4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  408ac8:	f013 0f10 	tst.w	r3, #16
  408acc:	d000      	beq.n	408ad0 <lv_refr_obj+0xc>
  408ace:	4770      	bx	lr
{
  408ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  408ad4:	b08b      	sub	sp, #44	; 0x2c
  408ad6:	460e      	mov	r6, r1
  408ad8:	4605      	mov	r5, r0
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
  408ada:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
  408ade:	a904      	add	r1, sp, #16
  408ae0:	4b35      	ldr	r3, [pc, #212]	; (408bb8 <lv_refr_obj+0xf4>)
  408ae2:	4798      	blx	r3
    obj_area.x1 -= ext_size;
  408ae4:	b2a3      	uxth	r3, r4
  408ae6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  408aea:	1ad2      	subs	r2, r2, r3
  408aec:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
  408af0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  408af4:	1ad2      	subs	r2, r2, r3
  408af6:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
  408afa:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  408afe:	441a      	add	r2, r3
  408b00:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
  408b04:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  408b08:	4413      	add	r3, r2
  408b0a:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
  408b0e:	aa04      	add	r2, sp, #16
  408b10:	4631      	mov	r1, r6
  408b12:	a806      	add	r0, sp, #24
  408b14:	4b29      	ldr	r3, [pc, #164]	; (408bbc <lv_refr_obj+0xf8>)
  408b16:	4798      	blx	r3

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
  408b18:	b1a8      	cbz	r0, 408b46 <lv_refr_obj+0x82>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
  408b1a:	6a2b      	ldr	r3, [r5, #32]
  408b1c:	b11b      	cbz	r3, 408b26 <lv_refr_obj+0x62>
  408b1e:	2200      	movs	r2, #0
  408b20:	a906      	add	r1, sp, #24
  408b22:	4628      	mov	r0, r5
  408b24:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
  408b26:	a904      	add	r1, sp, #16
  408b28:	4628      	mov	r0, r5
  408b2a:	4b23      	ldr	r3, [pc, #140]	; (408bb8 <lv_refr_obj+0xf4>)
  408b2c:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
  408b2e:	aa04      	add	r2, sp, #16
  408b30:	4631      	mov	r1, r6
  408b32:	a808      	add	r0, sp, #32
  408b34:	4b21      	ldr	r3, [pc, #132]	; (408bbc <lv_refr_obj+0xf8>)
  408b36:	4798      	blx	r3
        if(union_ok != false) {
  408b38:	b940      	cbnz	r0, 408b4c <lv_refr_obj+0x88>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
  408b3a:	6a2b      	ldr	r3, [r5, #32]
  408b3c:	b11b      	cbz	r3, 408b46 <lv_refr_obj+0x82>
  408b3e:	2201      	movs	r2, #1
  408b40:	a906      	add	r1, sp, #24
  408b42:	4628      	mov	r0, r5
  408b44:	4798      	blx	r3
    }
}
  408b46:	b00b      	add	sp, #44	; 0x2c
  408b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
  408b4c:	f105 0804 	add.w	r8, r5, #4
  408b50:	4640      	mov	r0, r8
  408b52:	4b1b      	ldr	r3, [pc, #108]	; (408bc0 <lv_refr_obj+0xfc>)
  408b54:	4798      	blx	r3
  408b56:	4604      	mov	r4, r0
  408b58:	2800      	cmp	r0, #0
  408b5a:	d0ee      	beq.n	408b3a <lv_refr_obj+0x76>
                lv_obj_get_coords(child_p, &child_area);
  408b5c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 408bb8 <lv_refr_obj+0xf4>
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
  408b60:	4e16      	ldr	r6, [pc, #88]	; (408bbc <lv_refr_obj+0xf8>)
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
  408b62:	4f18      	ldr	r7, [pc, #96]	; (408bc4 <lv_refr_obj+0x100>)
  408b64:	e005      	b.n	408b72 <lv_refr_obj+0xae>
  408b66:	4621      	mov	r1, r4
  408b68:	4640      	mov	r0, r8
  408b6a:	47b8      	blx	r7
  408b6c:	4604      	mov	r4, r0
  408b6e:	2800      	cmp	r0, #0
  408b70:	d0e3      	beq.n	408b3a <lv_refr_obj+0x76>
                lv_obj_get_coords(child_p, &child_area);
  408b72:	a902      	add	r1, sp, #8
  408b74:	4620      	mov	r0, r4
  408b76:	47c8      	blx	r9
                child_area.x1 -= ext_size;
  408b78:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  408b7a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  408b7e:	1ad2      	subs	r2, r2, r3
  408b80:	f8ad 2008 	strh.w	r2, [sp, #8]
                child_area.y1 -= ext_size;
  408b84:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  408b88:	1ad2      	subs	r2, r2, r3
  408b8a:	f8ad 200a 	strh.w	r2, [sp, #10]
                child_area.x2 += ext_size;
  408b8e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  408b92:	441a      	add	r2, r3
  408b94:	f8ad 200c 	strh.w	r2, [sp, #12]
                child_area.y2 += ext_size;
  408b98:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  408b9c:	4413      	add	r3, r2
  408b9e:	f8ad 300e 	strh.w	r3, [sp, #14]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
  408ba2:	aa02      	add	r2, sp, #8
  408ba4:	a908      	add	r1, sp, #32
  408ba6:	4668      	mov	r0, sp
  408ba8:	47b0      	blx	r6
                if(union_ok) {
  408baa:	2800      	cmp	r0, #0
  408bac:	d0db      	beq.n	408b66 <lv_refr_obj+0xa2>
                    lv_refr_obj(child_p, &mask_child);
  408bae:	4669      	mov	r1, sp
  408bb0:	4620      	mov	r0, r4
  408bb2:	f7ff ff87 	bl	408ac4 <lv_refr_obj>
  408bb6:	e7d6      	b.n	408b66 <lv_refr_obj+0xa2>
  408bb8:	004050d1 	.word	0x004050d1
  408bbc:	00414957 	.word	0x00414957
  408bc0:	004153f7 	.word	0x004153f7
  408bc4:	0041540f 	.word	0x0041540f

00408bc8 <lv_refr_obj_and_children>:
{
  408bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408bcc:	460f      	mov	r7, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  408bce:	4604      	mov	r4, r0
  408bd0:	b170      	cbz	r0, 408bf0 <lv_refr_obj_and_children+0x28>
    lv_refr_obj(top_p, mask_p);
  408bd2:	4639      	mov	r1, r7
  408bd4:	4620      	mov	r0, r4
  408bd6:	4b1a      	ldr	r3, [pc, #104]	; (408c40 <lv_refr_obj_and_children+0x78>)
  408bd8:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
  408bda:	4620      	mov	r0, r4
  408bdc:	4b19      	ldr	r3, [pc, #100]	; (408c44 <lv_refr_obj_and_children+0x7c>)
  408bde:	4798      	blx	r3
    while(par != NULL) {
  408be0:	4681      	mov	r9, r0
  408be2:	b160      	cbz	r0, 408bfe <lv_refr_obj_and_children+0x36>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
  408be4:	4e18      	ldr	r6, [pc, #96]	; (408c48 <lv_refr_obj_and_children+0x80>)
            lv_refr_obj(i, mask_p);
  408be6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 408c40 <lv_refr_obj_and_children+0x78>
        par = lv_obj_get_parent(par);
  408bea:	f8df a058 	ldr.w	sl, [pc, #88]	; 408c44 <lv_refr_obj_and_children+0x7c>
  408bee:	e00e      	b.n	408c0e <lv_refr_obj_and_children+0x46>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  408bf0:	4b16      	ldr	r3, [pc, #88]	; (408c4c <lv_refr_obj_and_children+0x84>)
  408bf2:	6818      	ldr	r0, [r3, #0]
  408bf4:	4b16      	ldr	r3, [pc, #88]	; (408c50 <lv_refr_obj_and_children+0x88>)
  408bf6:	4798      	blx	r3
    if(top_p == NULL) return;  /*Shouldn't happen*/
  408bf8:	4604      	mov	r4, r0
  408bfa:	2800      	cmp	r0, #0
  408bfc:	d1e9      	bne.n	408bd2 <lv_refr_obj_and_children+0xa>
  408bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        par = lv_obj_get_parent(par);
  408c02:	4648      	mov	r0, r9
  408c04:	47d0      	blx	sl
  408c06:	464c      	mov	r4, r9
    while(par != NULL) {
  408c08:	4681      	mov	r9, r0
  408c0a:	2800      	cmp	r0, #0
  408c0c:	d0f7      	beq.n	408bfe <lv_refr_obj_and_children+0x36>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
  408c0e:	f109 0504 	add.w	r5, r9, #4
  408c12:	4621      	mov	r1, r4
  408c14:	4628      	mov	r0, r5
  408c16:	47b0      	blx	r6
        while(i != NULL) {
  408c18:	4604      	mov	r4, r0
  408c1a:	b140      	cbz	r0, 408c2e <lv_refr_obj_and_children+0x66>
            lv_refr_obj(i, mask_p);
  408c1c:	4639      	mov	r1, r7
  408c1e:	4620      	mov	r0, r4
  408c20:	47c0      	blx	r8
            i = _lv_ll_get_prev(&(par->child_ll), i);
  408c22:	4621      	mov	r1, r4
  408c24:	4628      	mov	r0, r5
  408c26:	47b0      	blx	r6
        while(i != NULL) {
  408c28:	4604      	mov	r4, r0
  408c2a:	2800      	cmp	r0, #0
  408c2c:	d1f6      	bne.n	408c1c <lv_refr_obj_and_children+0x54>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
  408c2e:	f8d9 3020 	ldr.w	r3, [r9, #32]
  408c32:	2b00      	cmp	r3, #0
  408c34:	d0e5      	beq.n	408c02 <lv_refr_obj_and_children+0x3a>
  408c36:	2201      	movs	r2, #1
  408c38:	4639      	mov	r1, r7
  408c3a:	4648      	mov	r0, r9
  408c3c:	4798      	blx	r3
  408c3e:	e7e0      	b.n	408c02 <lv_refr_obj_and_children+0x3a>
  408c40:	00408ac5 	.word	0x00408ac5
  408c44:	00404fa5 	.word	0x00404fa5
  408c48:	0041540f 	.word	0x0041540f
  408c4c:	2040c3f0 	.word	0x2040c3f0
  408c50:	00402db5 	.word	0x00402db5

00408c54 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
  408c54:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  408c56:	4d1d      	ldr	r5, [pc, #116]	; (408ccc <lv_refr_vdb_flush+0x78>)
  408c58:	6828      	ldr	r0, [r5, #0]
  408c5a:	4b1d      	ldr	r3, [pc, #116]	; (408cd0 <lv_refr_vdb_flush+0x7c>)
  408c5c:	4798      	blx	r3
  408c5e:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
  408c60:	6828      	ldr	r0, [r5, #0]
  408c62:	4b1c      	ldr	r3, [pc, #112]	; (408cd4 <lv_refr_vdb_flush+0x80>)
  408c64:	4798      	blx	r3
  408c66:	b978      	cbnz	r0, 408c88 <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
  408c68:	2301      	movs	r3, #1
  408c6a:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
  408c6c:	4b17      	ldr	r3, [pc, #92]	; (408ccc <lv_refr_vdb_flush+0x78>)
  408c6e:	681d      	ldr	r5, [r3, #0]
  408c70:	686b      	ldr	r3, [r5, #4]
  408c72:	6a1a      	ldr	r2, [r3, #32]
  408c74:	f012 0f01 	tst.w	r2, #1
  408c78:	d010      	beq.n	408c9c <lv_refr_vdb_flush+0x48>
  408c7a:	6a1b      	ldr	r3, [r3, #32]
  408c7c:	f013 0f02 	tst.w	r3, #2
  408c80:	d00c      	beq.n	408c9c <lv_refr_vdb_flush+0x48>
  408c82:	2301      	movs	r3, #1
  408c84:	61e3      	str	r3, [r4, #28]
  408c86:	e00b      	b.n	408ca0 <lv_refr_vdb_flush+0x4c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  408c88:	4d10      	ldr	r5, [pc, #64]	; (408ccc <lv_refr_vdb_flush+0x78>)
  408c8a:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
  408c8c:	69a3      	ldr	r3, [r4, #24]
  408c8e:	2b00      	cmp	r3, #0
  408c90:	d0ea      	beq.n	408c68 <lv_refr_vdb_flush+0x14>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  408c92:	69c3      	ldr	r3, [r0, #28]
  408c94:	2b00      	cmp	r3, #0
  408c96:	d0f9      	beq.n	408c8c <lv_refr_vdb_flush+0x38>
  408c98:	4798      	blx	r3
  408c9a:	e7f6      	b.n	408c8a <lv_refr_vdb_flush+0x36>
    else vdb->flushing_last = 0;
  408c9c:	2300      	movs	r3, #0
  408c9e:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  408ca0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  408ca2:	b10b      	cbz	r3, 408ca8 <lv_refr_vdb_flush+0x54>
  408ca4:	4628      	mov	r0, r5
  408ca6:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
  408ca8:	68eb      	ldr	r3, [r5, #12]
  408caa:	b123      	cbz	r3, 408cb6 <lv_refr_vdb_flush+0x62>
  408cac:	68a2      	ldr	r2, [r4, #8]
  408cae:	f104 0110 	add.w	r1, r4, #16
  408cb2:	4628      	mov	r0, r5
  408cb4:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
  408cb6:	6823      	ldr	r3, [r4, #0]
  408cb8:	b133      	cbz	r3, 408cc8 <lv_refr_vdb_flush+0x74>
  408cba:	6862      	ldr	r2, [r4, #4]
  408cbc:	b122      	cbz	r2, 408cc8 <lv_refr_vdb_flush+0x74>
        if(vdb->buf_act == vdb->buf1)
  408cbe:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
  408cc0:	428b      	cmp	r3, r1
  408cc2:	bf08      	it	eq
  408cc4:	4613      	moveq	r3, r2
  408cc6:	60a3      	str	r3, [r4, #8]
  408cc8:	bd38      	pop	{r3, r4, r5, pc}
  408cca:	bf00      	nop
  408ccc:	2040c3f0 	.word	0x2040c3f0
  408cd0:	00414199 	.word	0x00414199
  408cd4:	004141d1 	.word	0x004141d1

00408cd8 <lv_refr_area_part>:
{
  408cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408cdc:	b09c      	sub	sp, #112	; 0x70
  408cde:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  408ce0:	4d51      	ldr	r5, [pc, #324]	; (408e28 <lv_refr_area_part+0x150>)
  408ce2:	6828      	ldr	r0, [r5, #0]
  408ce4:	4b51      	ldr	r3, [pc, #324]	; (408e2c <lv_refr_area_part+0x154>)
  408ce6:	4798      	blx	r3
  408ce8:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
  408cea:	6828      	ldr	r0, [r5, #0]
  408cec:	4b50      	ldr	r3, [pc, #320]	; (408e30 <lv_refr_area_part+0x158>)
  408cee:	4798      	blx	r3
  408cf0:	b938      	cbnz	r0, 408d02 <lv_refr_area_part+0x2a>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  408cf2:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
  408cf4:	69a3      	ldr	r3, [r4, #24]
  408cf6:	b123      	cbz	r3, 408d02 <lv_refr_area_part+0x2a>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  408cf8:	69c3      	ldr	r3, [r0, #28]
  408cfa:	2b00      	cmp	r3, #0
  408cfc:	d0fa      	beq.n	408cf4 <lv_refr_area_part+0x1c>
  408cfe:	4798      	blx	r3
  408d00:	e7f7      	b.n	408cf2 <lv_refr_area_part+0x1a>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
  408d02:	f104 0210 	add.w	r2, r4, #16
  408d06:	4631      	mov	r1, r6
  408d08:	a81a      	add	r0, sp, #104	; 0x68
  408d0a:	4b4a      	ldr	r3, [pc, #296]	; (408e34 <lv_refr_area_part+0x15c>)
  408d0c:	4798      	blx	r3
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
  408d0e:	4c46      	ldr	r4, [pc, #280]	; (408e28 <lv_refr_area_part+0x150>)
  408d10:	6820      	ldr	r0, [r4, #0]
  408d12:	4b49      	ldr	r3, [pc, #292]	; (408e38 <lv_refr_area_part+0x160>)
  408d14:	4798      	blx	r3
  408d16:	4601      	mov	r1, r0
  408d18:	a81a      	add	r0, sp, #104	; 0x68
  408d1a:	4b48      	ldr	r3, [pc, #288]	; (408e3c <lv_refr_area_part+0x164>)
  408d1c:	4798      	blx	r3
  408d1e:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
  408d20:	6823      	ldr	r3, [r4, #0]
  408d22:	6c99      	ldr	r1, [r3, #72]	; 0x48
  408d24:	2900      	cmp	r1, #0
  408d26:	d078      	beq.n	408e1a <lv_refr_area_part+0x142>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
  408d28:	a81a      	add	r0, sp, #104	; 0x68
  408d2a:	4b44      	ldr	r3, [pc, #272]	; (408e3c <lv_refr_area_part+0x164>)
  408d2c:	4798      	blx	r3
    if(top_act_scr == NULL && top_prev_scr == NULL) {
  408d2e:	fab6 f486 	clz	r4, r6
  408d32:	0964      	lsrs	r4, r4, #5
  408d34:	4607      	mov	r7, r0
  408d36:	fab0 f580 	clz	r5, r0
  408d3a:	096d      	lsrs	r5, r5, #5
  408d3c:	b1a4      	cbz	r4, 408d68 <lv_refr_area_part+0x90>
  408d3e:	b19d      	cbz	r5, 408d68 <lv_refr_area_part+0x90>
        if(disp_refr->bg_img) {
  408d40:	4b39      	ldr	r3, [pc, #228]	; (408e28 <lv_refr_area_part+0x150>)
  408d42:	681b      	ldr	r3, [r3, #0]
  408d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  408d46:	2b00      	cmp	r3, #0
  408d48:	d04d      	beq.n	408de6 <lv_refr_area_part+0x10e>
            lv_draw_img_dsc_init(&dsc);
  408d4a:	a805      	add	r0, sp, #20
  408d4c:	4b3c      	ldr	r3, [pc, #240]	; (408e40 <lv_refr_area_part+0x168>)
  408d4e:	4798      	blx	r3
            dsc.opa = disp_refr->bg_opa;
  408d50:	4b35      	ldr	r3, [pc, #212]	; (408e28 <lv_refr_area_part+0x150>)
  408d52:	681b      	ldr	r3, [r3, #0]
  408d54:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
  408d58:	f88d 2014 	strb.w	r2, [sp, #20]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
  408d5c:	a902      	add	r1, sp, #8
  408d5e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
  408d60:	4b38      	ldr	r3, [pc, #224]	; (408e44 <lv_refr_area_part+0x16c>)
  408d62:	4798      	blx	r3
            if(res == LV_RES_OK) {
  408d64:	2801      	cmp	r0, #1
  408d66:	d022      	beq.n	408dae <lv_refr_area_part+0xd6>
    if(disp_refr->prev_scr) {
  408d68:	4b2f      	ldr	r3, [pc, #188]	; (408e28 <lv_refr_area_part+0x150>)
  408d6a:	681b      	ldr	r3, [r3, #0]
  408d6c:	6c98      	ldr	r0, [r3, #72]	; 0x48
  408d6e:	b128      	cbz	r0, 408d7c <lv_refr_area_part+0xa4>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
  408d70:	a91a      	add	r1, sp, #104	; 0x68
  408d72:	2d00      	cmp	r5, #0
  408d74:	bf08      	it	eq
  408d76:	4638      	moveq	r0, r7
  408d78:	4b33      	ldr	r3, [pc, #204]	; (408e48 <lv_refr_area_part+0x170>)
  408d7a:	4798      	blx	r3
    if(top_act_scr == NULL) {
  408d7c:	2c00      	cmp	r4, #0
  408d7e:	d145      	bne.n	408e0c <lv_refr_area_part+0x134>
    lv_refr_obj_and_children(top_act_scr, &start_mask);
  408d80:	a91a      	add	r1, sp, #104	; 0x68
  408d82:	4630      	mov	r0, r6
  408d84:	4d30      	ldr	r5, [pc, #192]	; (408e48 <lv_refr_area_part+0x170>)
  408d86:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
  408d88:	4c27      	ldr	r4, [pc, #156]	; (408e28 <lv_refr_area_part+0x150>)
  408d8a:	6820      	ldr	r0, [r4, #0]
  408d8c:	4b2f      	ldr	r3, [pc, #188]	; (408e4c <lv_refr_area_part+0x174>)
  408d8e:	4798      	blx	r3
  408d90:	a91a      	add	r1, sp, #104	; 0x68
  408d92:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
  408d94:	6820      	ldr	r0, [r4, #0]
  408d96:	4b2e      	ldr	r3, [pc, #184]	; (408e50 <lv_refr_area_part+0x178>)
  408d98:	4798      	blx	r3
  408d9a:	a91a      	add	r1, sp, #104	; 0x68
  408d9c:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
  408d9e:	6820      	ldr	r0, [r4, #0]
  408da0:	4b2c      	ldr	r3, [pc, #176]	; (408e54 <lv_refr_area_part+0x17c>)
  408da2:	4798      	blx	r3
  408da4:	2800      	cmp	r0, #0
  408da6:	d035      	beq.n	408e14 <lv_refr_area_part+0x13c>
}
  408da8:	b01c      	add	sp, #112	; 0x70
  408daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
  408dae:	9b02      	ldr	r3, [sp, #8]
  408db0:	f3c3 238a 	ubfx	r3, r3, #10, #11
  408db4:	3b01      	subs	r3, #1
  408db6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  408dba:	f3c2 124a 	ubfx	r2, r2, #5, #11
  408dbe:	3a01      	subs	r2, #1
  408dc0:	b212      	sxth	r2, r2
  408dc2:	9200      	str	r2, [sp, #0]
  408dc4:	b21b      	sxth	r3, r3
  408dc6:	2200      	movs	r2, #0
  408dc8:	4611      	mov	r1, r2
  408dca:	a803      	add	r0, sp, #12
  408dcc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 408e64 <lv_refr_area_part+0x18c>
  408dd0:	47c0      	blx	r8
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
  408dd2:	4b15      	ldr	r3, [pc, #84]	; (408e28 <lv_refr_area_part+0x150>)
  408dd4:	681a      	ldr	r2, [r3, #0]
  408dd6:	ab05      	add	r3, sp, #20
  408dd8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  408dda:	a91a      	add	r1, sp, #104	; 0x68
  408ddc:	a803      	add	r0, sp, #12
  408dde:	f8df 8088 	ldr.w	r8, [pc, #136]	; 408e68 <lv_refr_area_part+0x190>
  408de2:	47c0      	blx	r8
  408de4:	e7c0      	b.n	408d68 <lv_refr_area_part+0x90>
            lv_draw_rect_dsc_init(&dsc);
  408de6:	a805      	add	r0, sp, #20
  408de8:	4b1b      	ldr	r3, [pc, #108]	; (408e58 <lv_refr_area_part+0x180>)
  408dea:	4798      	blx	r3
            dsc.bg_color = disp_refr->bg_color;
  408dec:	4b0e      	ldr	r3, [pc, #56]	; (408e28 <lv_refr_area_part+0x150>)
  408dee:	681b      	ldr	r3, [r3, #0]
  408df0:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
  408df4:	f8ad 2016 	strh.w	r2, [sp, #22]
            dsc.bg_opa = disp_refr->bg_opa;
  408df8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  408dfc:	f88d 3020 	strb.w	r3, [sp, #32]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
  408e00:	aa05      	add	r2, sp, #20
  408e02:	a91a      	add	r1, sp, #104	; 0x68
  408e04:	4608      	mov	r0, r1
  408e06:	4b15      	ldr	r3, [pc, #84]	; (408e5c <lv_refr_area_part+0x184>)
  408e08:	4798      	blx	r3
  408e0a:	e7ad      	b.n	408d68 <lv_refr_area_part+0x90>
        top_act_scr = disp_refr->act_scr;
  408e0c:	4b06      	ldr	r3, [pc, #24]	; (408e28 <lv_refr_area_part+0x150>)
  408e0e:	681b      	ldr	r3, [r3, #0]
  408e10:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  408e12:	e7b5      	b.n	408d80 <lv_refr_area_part+0xa8>
        lv_refr_vdb_flush();
  408e14:	4b12      	ldr	r3, [pc, #72]	; (408e60 <lv_refr_area_part+0x188>)
  408e16:	4798      	blx	r3
}
  408e18:	e7c6      	b.n	408da8 <lv_refr_area_part+0xd0>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
  408e1a:	2800      	cmp	r0, #0
  408e1c:	d1b0      	bne.n	408d80 <lv_refr_area_part+0xa8>
    lv_obj_t * top_prev_scr = NULL;
  408e1e:	4637      	mov	r7, r6
    if(top_act_scr == NULL && top_prev_scr == NULL) {
  408e20:	2501      	movs	r5, #1
  408e22:	462c      	mov	r4, r5
  408e24:	e78c      	b.n	408d40 <lv_refr_area_part+0x68>
  408e26:	bf00      	nop
  408e28:	2040c3f0 	.word	0x2040c3f0
  408e2c:	00414199 	.word	0x00414199
  408e30:	004141d1 	.word	0x004141d1
  408e34:	00414957 	.word	0x00414957
  408e38:	00402db5 	.word	0x00402db5
  408e3c:	00408a0d 	.word	0x00408a0d
  408e40:	0040ca31 	.word	0x0040ca31
  408e44:	00412d4d 	.word	0x00412d4d
  408e48:	00408bc9 	.word	0x00408bc9
  408e4c:	00402ded 	.word	0x00402ded
  408e50:	00402e09 	.word	0x00402e09
  408e54:	004141e5 	.word	0x004141e5
  408e58:	0040fa91 	.word	0x0040fa91
  408e5c:	0040fadd 	.word	0x0040fadd
  408e60:	00408c55 	.word	0x00408c55
  408e64:	00414923 	.word	0x00414923
  408e68:	0040cac1 	.word	0x0040cac1

00408e6c <_lv_refr_init>:
{
  408e6c:	4770      	bx	lr
	...

00408e70 <_lv_inv_area>:
{
  408e70:	b5f0      	push	{r4, r5, r6, r7, lr}
  408e72:	b085      	sub	sp, #20
  408e74:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
  408e76:	4605      	mov	r5, r0
  408e78:	2800      	cmp	r0, #0
  408e7a:	d054      	beq.n	408f26 <_lv_inv_area+0xb6>
    if(area_p == NULL) {
  408e7c:	2c00      	cmp	r4, #0
  408e7e:	d057      	beq.n	408f30 <_lv_inv_area+0xc0>
    scr_area.x1 = 0;
  408e80:	2300      	movs	r3, #0
  408e82:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
  408e86:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
  408e8a:	4628      	mov	r0, r5
  408e8c:	4b36      	ldr	r3, [pc, #216]	; (408f68 <_lv_inv_area+0xf8>)
  408e8e:	4798      	blx	r3
  408e90:	3801      	subs	r0, #1
  408e92:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
  408e96:	4628      	mov	r0, r5
  408e98:	4b34      	ldr	r3, [pc, #208]	; (408f6c <_lv_inv_area+0xfc>)
  408e9a:	4798      	blx	r3
  408e9c:	3801      	subs	r0, #1
  408e9e:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
  408ea2:	aa02      	add	r2, sp, #8
  408ea4:	4621      	mov	r1, r4
  408ea6:	4668      	mov	r0, sp
  408ea8:	4b31      	ldr	r3, [pc, #196]	; (408f70 <_lv_inv_area+0x100>)
  408eaa:	4798      	blx	r3
    if(suc != false) {
  408eac:	2800      	cmp	r0, #0
  408eae:	d045      	beq.n	408f3c <_lv_inv_area+0xcc>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
  408eb0:	692b      	ldr	r3, [r5, #16]
  408eb2:	b113      	cbz	r3, 408eba <_lv_inv_area+0x4a>
  408eb4:	4669      	mov	r1, sp
  408eb6:	4628      	mov	r0, r5
  408eb8:	4798      	blx	r3
        for(i = 0; i < disp->inv_p; i++) {
  408eba:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  408ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
  408ec2:	b19b      	cbz	r3, 408eec <_lv_inv_area+0x7c>
  408ec4:	2100      	movs	r1, #0
  408ec6:	460c      	mov	r4, r1
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
  408ec8:	460f      	mov	r7, r1
  408eca:	4e2a      	ldr	r6, [pc, #168]	; (408f74 <_lv_inv_area+0x104>)
  408ecc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
  408ed0:	463a      	mov	r2, r7
  408ed2:	3162      	adds	r1, #98	; 0x62
  408ed4:	4668      	mov	r0, sp
  408ed6:	47b0      	blx	r6
  408ed8:	bb80      	cbnz	r0, 408f3c <_lv_inv_area+0xcc>
        for(i = 0; i < disp->inv_p; i++) {
  408eda:	3401      	adds	r4, #1
  408edc:	b2a4      	uxth	r4, r4
  408ede:	4621      	mov	r1, r4
  408ee0:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  408ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
  408ee8:	429c      	cmp	r4, r3
  408eea:	dbef      	blt.n	408ecc <_lv_inv_area+0x5c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
  408eec:	2b1f      	cmp	r3, #31
  408eee:	dc27      	bgt.n	408f40 <_lv_inv_area+0xd0>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
  408ef0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  408ef4:	3362      	adds	r3, #98	; 0x62
  408ef6:	f10d 32ff 	add.w	r2, sp, #4294967295
  408efa:	f103 0008 	add.w	r0, r3, #8
        *d8 = *s8;
  408efe:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  408f02:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  408f06:	4283      	cmp	r3, r0
  408f08:	d1f9      	bne.n	408efe <_lv_inv_area+0x8e>
        disp->inv_p++;
  408f0a:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  408f0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
  408f12:	3201      	adds	r2, #1
  408f14:	f362 0309 	bfi	r3, r2, #0, #10
  408f18:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
  408f1c:	2103      	movs	r1, #3
  408f1e:	6b68      	ldr	r0, [r5, #52]	; 0x34
  408f20:	4b15      	ldr	r3, [pc, #84]	; (408f78 <_lv_inv_area+0x108>)
  408f22:	4798      	blx	r3
  408f24:	e00a      	b.n	408f3c <_lv_inv_area+0xcc>
    if(!disp) disp = lv_disp_get_default();
  408f26:	4b15      	ldr	r3, [pc, #84]	; (408f7c <_lv_inv_area+0x10c>)
  408f28:	4798      	blx	r3
    if(!disp) return;
  408f2a:	4605      	mov	r5, r0
  408f2c:	b130      	cbz	r0, 408f3c <_lv_inv_area+0xcc>
  408f2e:	e7a5      	b.n	408e7c <_lv_inv_area+0xc>
        disp->inv_p = 0;
  408f30:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  408f34:	f36f 0309 	bfc	r3, #0, #10
  408f38:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
}
  408f3c:	b005      	add	sp, #20
  408f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            disp->inv_p = 0;
  408f40:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  408f44:	f36f 0309 	bfc	r3, #0, #10
  408f48:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
  408f4c:	f10d 0207 	add.w	r2, sp, #7
  408f50:	f105 006a 	add.w	r0, r5, #106	; 0x6a
    uint8_t * d8 = (uint8_t *)dst;
  408f54:	f105 0362 	add.w	r3, r5, #98	; 0x62
        *d8 = *s8;
  408f58:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  408f5c:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  408f60:	4283      	cmp	r3, r0
  408f62:	d1f9      	bne.n	408f58 <_lv_inv_area+0xe8>
  408f64:	e7d1      	b.n	408f0a <_lv_inv_area+0x9a>
  408f66:	bf00      	nop
  408f68:	004140ad 	.word	0x004140ad
  408f6c:	004140d5 	.word	0x004140d5
  408f70:	00414957 	.word	0x00414957
  408f74:	00414ba5 	.word	0x00414ba5
  408f78:	00416c89 	.word	0x00416c89
  408f7c:	004140a1 	.word	0x004140a1

00408f80 <_lv_refr_get_disp_refreshing>:
}
  408f80:	4b01      	ldr	r3, [pc, #4]	; (408f88 <_lv_refr_get_disp_refreshing+0x8>)
  408f82:	6818      	ldr	r0, [r3, #0]
  408f84:	4770      	bx	lr
  408f86:	bf00      	nop
  408f88:	2040c3f0 	.word	0x2040c3f0

00408f8c <_lv_disp_refr_task>:
{
  408f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408f90:	b08b      	sub	sp, #44	; 0x2c
  408f92:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
  408f94:	4bbb      	ldr	r3, [pc, #748]	; (409284 <_lv_disp_refr_task+0x2f8>)
  408f96:	4798      	blx	r3
  408f98:	9007      	str	r0, [sp, #28]
    disp_refr = task->user_data;
  408f9a:	4cbb      	ldr	r4, [pc, #748]	; (409288 <_lv_disp_refr_task+0x2fc>)
  408f9c:	68eb      	ldr	r3, [r5, #12]
  408f9e:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
  408fa0:	2100      	movs	r1, #0
  408fa2:	4628      	mov	r0, r5
  408fa4:	4bb9      	ldr	r3, [pc, #740]	; (40928c <_lv_disp_refr_task+0x300>)
  408fa6:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
  408fa8:	6820      	ldr	r0, [r4, #0]
  408faa:	6c43      	ldr	r3, [r0, #68]	; 0x44
  408fac:	b17b      	cbz	r3, 408fce <_lv_disp_refr_task+0x42>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  408fae:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  408fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
  408fb6:	2b00      	cmp	r3, #0
  408fb8:	f000 827b 	beq.w	4094b2 <_lv_disp_refr_task+0x526>
  408fbc:	f04f 0862 	mov.w	r8, #98	; 0x62
  408fc0:	2700      	movs	r7, #0
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
  408fc2:	4db1      	ldr	r5, [pc, #708]	; (409288 <_lv_disp_refr_task+0x2fc>)
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
  408fc4:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 4092b0 <_lv_disp_refr_task+0x324>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  408fc8:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 4092a8 <_lv_disp_refr_task+0x31c>
  408fcc:	e04c      	b.n	409068 <_lv_disp_refr_task+0xdc>
        disp_refr->inv_p = 0;
  408fce:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  408fd2:	f36f 0309 	bfc	r3, #0, #10
  408fd6:	f8a0 3182 	strh.w	r3, [r0, #386]	; 0x182
        return;
  408fda:	e265      	b.n	4094a8 <_lv_disp_refr_task+0x51c>
                disp_refr->inv_area_joined[join_from] = 1;
  408fdc:	4426      	add	r6, r4
  408fde:	2301      	movs	r3, #1
  408fe0:	f886 3162 	strb.w	r3, [r6, #354]	; 0x162
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
  408fe4:	3401      	adds	r4, #1
  408fe6:	6828      	ldr	r0, [r5, #0]
  408fe8:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  408fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
  408ff0:	429c      	cmp	r4, r3
  408ff2:	d22f      	bcs.n	409054 <_lv_disp_refr_task+0xc8>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
  408ff4:	1903      	adds	r3, r0, r4
  408ff6:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  408ffa:	2b00      	cmp	r3, #0
  408ffc:	d1f2      	bne.n	408fe4 <_lv_disp_refr_task+0x58>
  408ffe:	42a7      	cmp	r7, r4
  409000:	d0f0      	beq.n	408fe4 <_lv_disp_refr_task+0x58>
  409002:	00e6      	lsls	r6, r4, #3
  409004:	3662      	adds	r6, #98	; 0x62
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
  409006:	1981      	adds	r1, r0, r6
  409008:	4440      	add	r0, r8
  40900a:	47d0      	blx	sl
  40900c:	2800      	cmp	r0, #0
  40900e:	d0e9      	beq.n	408fe4 <_lv_disp_refr_task+0x58>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
  409010:	6829      	ldr	r1, [r5, #0]
  409012:	198a      	adds	r2, r1, r6
  409014:	4441      	add	r1, r8
  409016:	a808      	add	r0, sp, #32
  409018:	4b9d      	ldr	r3, [pc, #628]	; (409290 <_lv_disp_refr_task+0x304>)
  40901a:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  40901c:	a808      	add	r0, sp, #32
  40901e:	47d8      	blx	fp
  409020:	9001      	str	r0, [sp, #4]
  409022:	6828      	ldr	r0, [r5, #0]
  409024:	4440      	add	r0, r8
  409026:	47d8      	blx	fp
  409028:	4681      	mov	r9, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
  40902a:	6828      	ldr	r0, [r5, #0]
  40902c:	4430      	add	r0, r6
  40902e:	47d8      	blx	fp
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  409030:	4448      	add	r0, r9
  409032:	9b01      	ldr	r3, [sp, #4]
  409034:	4283      	cmp	r3, r0
  409036:	d2d5      	bcs.n	408fe4 <_lv_disp_refr_task+0x58>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
  409038:	682e      	ldr	r6, [r5, #0]
  40903a:	eb06 0308 	add.w	r3, r6, r8
  40903e:	f10d 021f 	add.w	r2, sp, #31
  409042:	f103 0008 	add.w	r0, r3, #8
        *d8 = *s8;
  409046:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40904a:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  40904e:	4283      	cmp	r3, r0
  409050:	d1f9      	bne.n	409046 <_lv_disp_refr_task+0xba>
  409052:	e7c3      	b.n	408fdc <_lv_disp_refr_task+0x50>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  409054:	3701      	adds	r7, #1
  409056:	6828      	ldr	r0, [r5, #0]
  409058:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  40905c:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409060:	f108 0808 	add.w	r8, r8, #8
  409064:	429f      	cmp	r7, r3
  409066:	d20e      	bcs.n	409086 <_lv_disp_refr_task+0xfa>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
  409068:	4438      	add	r0, r7
  40906a:	f890 3162 	ldrb.w	r3, [r0, #354]	; 0x162
  40906e:	2b00      	cmp	r3, #0
  409070:	d1f0      	bne.n	409054 <_lv_disp_refr_task+0xc8>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
  409072:	6828      	ldr	r0, [r5, #0]
  409074:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  409078:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40907c:	2b00      	cmp	r3, #0
  40907e:	f000 81fe 	beq.w	40947e <_lv_disp_refr_task+0x4f2>
  409082:	2400      	movs	r4, #0
  409084:	e7b6      	b.n	408ff4 <_lv_disp_refr_task+0x68>
    px_num = 0;
  409086:	2100      	movs	r1, #0
  409088:	4a82      	ldr	r2, [pc, #520]	; (409294 <_lv_disp_refr_task+0x308>)
  40908a:	6011      	str	r1, [r2, #0]
    if(disp_refr->inv_p == 0) return;
  40908c:	2b00      	cmp	r3, #0
  40908e:	f000 81fe 	beq.w	40948e <_lv_disp_refr_task+0x502>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  409092:	1e5a      	subs	r2, r3, #1
  409094:	4611      	mov	r1, r2
  409096:	9205      	str	r2, [sp, #20]
  409098:	d432      	bmi.n	409100 <_lv_disp_refr_task+0x174>
        if(disp_refr->inv_area_joined[i] == 0) {
  40909a:	1882      	adds	r2, r0, r2
  40909c:	f892 2162 	ldrb.w	r2, [r2, #354]	; 0x162
  4090a0:	b17a      	cbz	r2, 4090c2 <_lv_disp_refr_task+0x136>
  4090a2:	f203 1361 	addw	r3, r3, #353	; 0x161
  4090a6:	4403      	add	r3, r0
  4090a8:	460a      	mov	r2, r1
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  4090aa:	3a01      	subs	r2, #1
  4090ac:	f1b2 3fff 	cmp.w	r2, #4294967295
  4090b0:	d005      	beq.n	4090be <_lv_disp_refr_task+0x132>
        if(disp_refr->inv_area_joined[i] == 0) {
  4090b2:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
  4090b6:	2900      	cmp	r1, #0
  4090b8:	d1f7      	bne.n	4090aa <_lv_disp_refr_task+0x11e>
  4090ba:	9205      	str	r2, [sp, #20]
  4090bc:	e001      	b.n	4090c2 <_lv_disp_refr_task+0x136>
    int32_t last_i = 0;
  4090be:	2300      	movs	r3, #0
  4090c0:	9305      	str	r3, [sp, #20]
    disp_refr->driver.buffer->last_area = 0;
  4090c2:	6842      	ldr	r2, [r0, #4]
  4090c4:	f892 3020 	ldrb.w	r3, [r2, #32]
  4090c8:	f36f 0300 	bfc	r3, #0, #1
  4090cc:	f882 3020 	strb.w	r3, [r2, #32]
    disp_refr->driver.buffer->last_part = 0;
  4090d0:	6842      	ldr	r2, [r0, #4]
  4090d2:	f892 3020 	ldrb.w	r3, [r2, #32]
  4090d6:	f36f 0341 	bfc	r3, #1, #1
  4090da:	f882 3020 	strb.w	r3, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
  4090de:	4b6a      	ldr	r3, [pc, #424]	; (409288 <_lv_disp_refr_task+0x2fc>)
  4090e0:	681c      	ldr	r4, [r3, #0]
  4090e2:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
  4090e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4090ea:	2b00      	cmp	r3, #0
  4090ec:	f000 81cf 	beq.w	40948e <_lv_disp_refr_task+0x502>
  4090f0:	2362      	movs	r3, #98	; 0x62
  4090f2:	9302      	str	r3, [sp, #8]
  4090f4:	f04f 0a00 	mov.w	sl, #0
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
  4090f8:	f8df b18c 	ldr.w	fp, [pc, #396]	; 409288 <_lv_disp_refr_task+0x2fc>
  4090fc:	4627      	mov	r7, r4
  4090fe:	e042      	b.n	409186 <_lv_disp_refr_task+0x1fa>
    int32_t last_i = 0;
  409100:	2300      	movs	r3, #0
  409102:	9305      	str	r3, [sp, #20]
  409104:	e7dd      	b.n	4090c2 <_lv_disp_refr_task+0x136>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  409106:	687a      	ldr	r2, [r7, #4]
  409108:	f892 3020 	ldrb.w	r3, [r2, #32]
  40910c:	f043 0301 	orr.w	r3, r3, #1
  409110:	f882 3020 	strb.w	r3, [r2, #32]
  409114:	e040      	b.n	409198 <_lv_disp_refr_task+0x20c>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409116:	f8db 0000 	ldr.w	r0, [fp]
  40911a:	4b5f      	ldr	r3, [pc, #380]	; (409298 <_lv_disp_refr_task+0x30c>)
  40911c:	4798      	blx	r3
  40911e:	4604      	mov	r4, r0
        vdb->area.x1        = 0;
  409120:	2500      	movs	r5, #0
  409122:	8205      	strh	r5, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
  409124:	f8db 0000 	ldr.w	r0, [fp]
  409128:	4b5c      	ldr	r3, [pc, #368]	; (40929c <_lv_disp_refr_task+0x310>)
  40912a:	4798      	blx	r3
  40912c:	3801      	subs	r0, #1
  40912e:	82a0      	strh	r0, [r4, #20]
        vdb->area.y1        = 0;
  409130:	8265      	strh	r5, [r4, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
  409132:	f8db 0000 	ldr.w	r0, [fp]
  409136:	4b5a      	ldr	r3, [pc, #360]	; (4092a0 <_lv_disp_refr_task+0x314>)
  409138:	4798      	blx	r3
  40913a:	3801      	subs	r0, #1
  40913c:	82e0      	strh	r0, [r4, #22]
        disp_refr->driver.buffer->last_part = 1;
  40913e:	f8db 3000 	ldr.w	r3, [fp]
  409142:	685a      	ldr	r2, [r3, #4]
  409144:	f892 3020 	ldrb.w	r3, [r2, #32]
  409148:	f043 0302 	orr.w	r3, r3, #2
  40914c:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
  409150:	9801      	ldr	r0, [sp, #4]
  409152:	4b54      	ldr	r3, [pc, #336]	; (4092a4 <_lv_disp_refr_task+0x318>)
  409154:	4798      	blx	r3
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
  409156:	f8db 0000 	ldr.w	r0, [fp]
  40915a:	9b02      	ldr	r3, [sp, #8]
  40915c:	4418      	add	r0, r3
  40915e:	4b52      	ldr	r3, [pc, #328]	; (4092a8 <_lv_disp_refr_task+0x31c>)
  409160:	4798      	blx	r3
  409162:	4a4c      	ldr	r2, [pc, #304]	; (409294 <_lv_disp_refr_task+0x308>)
  409164:	6813      	ldr	r3, [r2, #0]
  409166:	4418      	add	r0, r3
  409168:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
  40916a:	f10a 0a01 	add.w	sl, sl, #1
  40916e:	f8db 7000 	ldr.w	r7, [fp]
  409172:	9b02      	ldr	r3, [sp, #8]
  409174:	3308      	adds	r3, #8
  409176:	9302      	str	r3, [sp, #8]
  409178:	f8b7 3182 	ldrh.w	r3, [r7, #386]	; 0x182
  40917c:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409180:	459a      	cmp	sl, r3
  409182:	f280 8184 	bge.w	40948e <_lv_disp_refr_task+0x502>
        if(disp_refr->inv_area_joined[i] == 0) {
  409186:	eb07 030a 	add.w	r3, r7, sl
  40918a:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  40918e:	2b00      	cmp	r3, #0
  409190:	d1eb      	bne.n	40916a <_lv_disp_refr_task+0x1de>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  409192:	9b05      	ldr	r3, [sp, #20]
  409194:	4553      	cmp	r3, sl
  409196:	d0b6      	beq.n	409106 <_lv_disp_refr_task+0x17a>
            disp_refr->driver.buffer->last_part = 0;
  409198:	687a      	ldr	r2, [r7, #4]
  40919a:	f892 3020 	ldrb.w	r3, [r2, #32]
  40919e:	f36f 0341 	bfc	r3, #1, #1
  4091a2:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
  4091a6:	9b02      	ldr	r3, [sp, #8]
  4091a8:	18fb      	adds	r3, r7, r3
  4091aa:	9301      	str	r3, [sp, #4]
    if(lv_disp_is_true_double_buf(disp_refr)) {
  4091ac:	4638      	mov	r0, r7
  4091ae:	4b3f      	ldr	r3, [pc, #252]	; (4092ac <_lv_disp_refr_task+0x320>)
  4091b0:	4798      	blx	r3
  4091b2:	2800      	cmp	r0, #0
  4091b4:	d1af      	bne.n	409116 <_lv_disp_refr_task+0x18a>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  4091b6:	f8db 0000 	ldr.w	r0, [fp]
  4091ba:	4b37      	ldr	r3, [pc, #220]	; (409298 <_lv_disp_refr_task+0x30c>)
  4091bc:	4798      	blx	r3
  4091be:	4606      	mov	r6, r0
  4091c0:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4091c4:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
  4091c8:	3401      	adds	r4, #1
  4091ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
  4091ce:	1ae4      	subs	r4, r4, r3
  4091d0:	b224      	sxth	r4, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4091d2:	f9b7 5068 	ldrsh.w	r5, [r7, #104]	; 0x68
  4091d6:	f105 0801 	add.w	r8, r5, #1
  4091da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
  4091de:	eba8 0803 	sub.w	r8, r8, r3
  4091e2:	fa0f f888 	sxth.w	r8, r8
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  4091e6:	f8db 0000 	ldr.w	r0, [fp]
  4091ea:	4b2d      	ldr	r3, [pc, #180]	; (4092a0 <_lv_disp_refr_task+0x314>)
  4091ec:	4798      	blx	r3
        lv_coord_t y2 =
  4091ee:	4285      	cmp	r5, r0
  4091f0:	da2a      	bge.n	409248 <_lv_disp_refr_task+0x2bc>
  4091f2:	f9b7 9068 	ldrsh.w	r9, [r7, #104]	; 0x68
        int32_t max_row = (uint32_t)vdb->size / w;
  4091f6:	68f3      	ldr	r3, [r6, #12]
  4091f8:	fbb3 f3f4 	udiv	r3, r3, r4
  4091fc:	4598      	cmp	r8, r3
  4091fe:	bfa8      	it	ge
  409200:	4698      	movge	r8, r3
        if(disp_refr->driver.rounder_cb) {
  409202:	f8db 3000 	ldr.w	r3, [fp]
  409206:	691b      	ldr	r3, [r3, #16]
  409208:	b35b      	cbz	r3, 409262 <_lv_disp_refr_task+0x2d6>
            tmp.x1 = 0;
  40920a:	2300      	movs	r3, #0
  40920c:	f8ad 3020 	strh.w	r3, [sp, #32]
            tmp.x2 = 0;
  409210:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            tmp.y1 = 0;
  409214:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            lv_coord_t h_tmp = max_row;
  409218:	fa0f f588 	sxth.w	r5, r8
  40921c:	1e6c      	subs	r4, r5, #1
  40921e:	b224      	sxth	r4, r4
                tmp.y2 = h_tmp - 1;
  409220:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
  409224:	f8db 0000 	ldr.w	r0, [fp]
  409228:	6903      	ldr	r3, [r0, #16]
  40922a:	a908      	add	r1, sp, #32
  40922c:	4798      	blx	r3
  40922e:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
  409232:	1c4b      	adds	r3, r1, #1
  409234:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
  409238:	1a9b      	subs	r3, r3, r2
                if(lv_area_get_height(&tmp) <= max_row) break;
  40923a:	b21b      	sxth	r3, r3
  40923c:	4598      	cmp	r8, r3
  40923e:	da0b      	bge.n	409258 <_lv_disp_refr_task+0x2cc>
                h_tmp--;
  409240:	4625      	mov	r5, r4
            } while(h_tmp > 0);
  409242:	2c00      	cmp	r4, #0
  409244:	dcea      	bgt.n	40921c <_lv_disp_refr_task+0x290>
  409246:	e786      	b.n	409156 <_lv_disp_refr_task+0x1ca>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  409248:	f8db 0000 	ldr.w	r0, [fp]
  40924c:	4b14      	ldr	r3, [pc, #80]	; (4092a0 <_lv_disp_refr_task+0x314>)
  40924e:	4798      	blx	r3
  409250:	3801      	subs	r0, #1
        lv_coord_t y2 =
  409252:	fa0f f980 	sxth.w	r9, r0
  409256:	e7ce      	b.n	4091f6 <_lv_disp_refr_task+0x26a>
            if(h_tmp <= 0) {
  409258:	2d00      	cmp	r5, #0
  40925a:	f77f af7c 	ble.w	409156 <_lv_disp_refr_task+0x1ca>
                max_row = tmp.y2 + 1;
  40925e:	f101 0801 	add.w	r8, r1, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  409262:	f9b7 4064 	ldrsh.w	r4, [r7, #100]	; 0x64
  409266:	f8cd 900c 	str.w	r9, [sp, #12]
  40926a:	eb04 0308 	add.w	r3, r4, r8
  40926e:	3b01      	subs	r3, #1
  409270:	454b      	cmp	r3, r9
  409272:	dc63      	bgt.n	40933c <_lv_disp_refr_task+0x3b0>
            vdb->area.y2 = row + max_row - 1;
  409274:	fa1f f388 	uxth.w	r3, r8
  409278:	9304      	str	r3, [sp, #16]
  40927a:	3b01      	subs	r3, #1
  40927c:	f8cd a018 	str.w	sl, [sp, #24]
  409280:	469a      	mov	sl, r3
  409282:	e025      	b.n	4092d0 <_lv_disp_refr_task+0x344>
  409284:	00414495 	.word	0x00414495
  409288:	2040c3f0 	.word	0x2040c3f0
  40928c:	00416c89 	.word	0x00416c89
  409290:	004149ad 	.word	0x004149ad
  409294:	2040c3f4 	.word	0x2040c3f4
  409298:	00414199 	.word	0x00414199
  40929c:	004140ad 	.word	0x004140ad
  4092a0:	004140d5 	.word	0x004140d5
  4092a4:	00408cd9 	.word	0x00408cd9
  4092a8:	0041493b 	.word	0x0041493b
  4092ac:	004141e5 	.word	0x004141e5
  4092b0:	00414b61 	.word	0x00414b61
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  4092b4:	45a9      	cmp	r9, r5
  4092b6:	d01c      	beq.n	4092f2 <_lv_disp_refr_task+0x366>
            lv_refr_area_part(area_p);
  4092b8:	9801      	ldr	r0, [sp, #4]
  4092ba:	4b83      	ldr	r3, [pc, #524]	; (4094c8 <_lv_disp_refr_task+0x53c>)
  4092bc:	4798      	blx	r3
  4092be:	9b04      	ldr	r3, [sp, #16]
  4092c0:	441c      	add	r4, r3
  4092c2:	b224      	sxth	r4, r4
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  4092c4:	eb04 0308 	add.w	r3, r4, r8
  4092c8:	3b01      	subs	r3, #1
  4092ca:	9a03      	ldr	r2, [sp, #12]
  4092cc:	4293      	cmp	r3, r2
  4092ce:	dc1a      	bgt.n	409306 <_lv_disp_refr_task+0x37a>
            vdb->area.x1 = area_p->x1;
  4092d0:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
  4092d4:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
  4092d6:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
  4092da:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
  4092dc:	8274      	strh	r4, [r6, #18]
  4092de:	b2a4      	uxth	r4, r4
  4092e0:	eb04 050a 	add.w	r5, r4, sl
  4092e4:	b22d      	sxth	r5, r5
            vdb->area.y2 = row + max_row - 1;
  4092e6:	82f5      	strh	r5, [r6, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
  4092e8:	45a9      	cmp	r9, r5
  4092ea:	dae3      	bge.n	4092b4 <_lv_disp_refr_task+0x328>
  4092ec:	f8a6 9016 	strh.w	r9, [r6, #22]
            row_last = vdb->area.y2;
  4092f0:	464d      	mov	r5, r9
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  4092f2:	f8db 3000 	ldr.w	r3, [fp]
  4092f6:	685a      	ldr	r2, [r3, #4]
  4092f8:	f892 3020 	ldrb.w	r3, [r2, #32]
  4092fc:	f043 0302 	orr.w	r3, r3, #2
  409300:	f882 3020 	strb.w	r3, [r2, #32]
  409304:	e7d8      	b.n	4092b8 <_lv_disp_refr_task+0x32c>
  409306:	f8dd a018 	ldr.w	sl, [sp, #24]
        if(y2 != row_last) {
  40930a:	45a9      	cmp	r9, r5
  40930c:	f43f af23 	beq.w	409156 <_lv_disp_refr_task+0x1ca>
            vdb->area.x1 = area_p->x1;
  409310:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
  409314:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
  409316:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
  40931a:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
  40931c:	8274      	strh	r4, [r6, #18]
            vdb->area.y2 = y2;
  40931e:	f8a6 9016 	strh.w	r9, [r6, #22]
            disp_refr->driver.buffer->last_part = 1;
  409322:	f8db 3000 	ldr.w	r3, [fp]
  409326:	685a      	ldr	r2, [r3, #4]
  409328:	f892 3020 	ldrb.w	r3, [r2, #32]
  40932c:	f043 0302 	orr.w	r3, r3, #2
  409330:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
  409334:	9801      	ldr	r0, [sp, #4]
  409336:	4b64      	ldr	r3, [pc, #400]	; (4094c8 <_lv_disp_refr_task+0x53c>)
  409338:	4798      	blx	r3
  40933a:	e70c      	b.n	409156 <_lv_disp_refr_task+0x1ca>
        lv_coord_t row_last = 0;
  40933c:	2500      	movs	r5, #0
  40933e:	e7e4      	b.n	40930a <_lv_disp_refr_task+0x37e>
        if(lv_disp_is_true_double_buf(disp_refr)) {
  409340:	4b62      	ldr	r3, [pc, #392]	; (4094cc <_lv_disp_refr_task+0x540>)
  409342:	4798      	blx	r3
  409344:	b118      	cbz	r0, 40934e <_lv_disp_refr_task+0x3c2>
            if(disp_refr->driver.set_px_cb) {
  409346:	4b62      	ldr	r3, [pc, #392]	; (4094d0 <_lv_disp_refr_task+0x544>)
  409348:	6818      	ldr	r0, [r3, #0]
  40934a:	6943      	ldr	r3, [r0, #20]
  40934c:	b1fb      	cbz	r3, 40938e <_lv_disp_refr_task+0x402>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
  40934e:	4c60      	ldr	r4, [pc, #384]	; (4094d0 <_lv_disp_refr_task+0x544>)
  409350:	6820      	ldr	r0, [r4, #0]
  409352:	f44f 7180 	mov.w	r1, #256	; 0x100
  409356:	3062      	adds	r0, #98	; 0x62
  409358:	4d5e      	ldr	r5, [pc, #376]	; (4094d4 <_lv_disp_refr_task+0x548>)
  40935a:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
  40935c:	6820      	ldr	r0, [r4, #0]
  40935e:	2120      	movs	r1, #32
  409360:	f500 70b1 	add.w	r0, r0, #354	; 0x162
  409364:	47a8      	blx	r5
        disp_refr->inv_p = 0;
  409366:	6823      	ldr	r3, [r4, #0]
  409368:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  40936c:	f36f 0209 	bfc	r2, #0, #10
  409370:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        elaps = lv_tick_elaps(start);
  409374:	9807      	ldr	r0, [sp, #28]
  409376:	4b58      	ldr	r3, [pc, #352]	; (4094d8 <_lv_disp_refr_task+0x54c>)
  409378:	4798      	blx	r3
  40937a:	4601      	mov	r1, r0
        if(disp_refr->driver.monitor_cb) {
  40937c:	6820      	ldr	r0, [r4, #0]
  40937e:	6983      	ldr	r3, [r0, #24]
  409380:	2b00      	cmp	r3, #0
  409382:	f000 808d 	beq.w	4094a0 <_lv_disp_refr_task+0x514>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
  409386:	4a55      	ldr	r2, [pc, #340]	; (4094dc <_lv_disp_refr_task+0x550>)
  409388:	6812      	ldr	r2, [r2, #0]
  40938a:	4798      	blx	r3
  40938c:	e088      	b.n	4094a0 <_lv_disp_refr_task+0x514>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  40938e:	4b54      	ldr	r3, [pc, #336]	; (4094e0 <_lv_disp_refr_task+0x554>)
  409390:	4798      	blx	r3
  409392:	4604      	mov	r4, r0
                lv_refr_vdb_flush();
  409394:	4b53      	ldr	r3, [pc, #332]	; (4094e4 <_lv_disp_refr_task+0x558>)
  409396:	4798      	blx	r3
                while(vdb->flushing);
  409398:	69a3      	ldr	r3, [r4, #24]
  40939a:	2b00      	cmp	r3, #0
  40939c:	d1fc      	bne.n	409398 <_lv_disp_refr_task+0x40c>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
  40939e:	4b4c      	ldr	r3, [pc, #304]	; (4094d0 <_lv_disp_refr_task+0x544>)
  4093a0:	681b      	ldr	r3, [r3, #0]
  4093a2:	f9b3 0000 	ldrsh.w	r0, [r3]
  4093a6:	0040      	lsls	r0, r0, #1
  4093a8:	4b4f      	ldr	r3, [pc, #316]	; (4094e8 <_lv_disp_refr_task+0x55c>)
  4093aa:	4798      	blx	r3
  4093ac:	9001      	str	r0, [sp, #4]
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
  4093ae:	68a3      	ldr	r3, [r4, #8]
  4093b0:	9303      	str	r3, [sp, #12]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  4093b2:	f8d4 a000 	ldr.w	sl, [r4]
  4093b6:	4553      	cmp	r3, sl
  4093b8:	bf08      	it	eq
  4093ba:	f8d4 a004 	ldreq.w	sl, [r4, #4]
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
  4093be:	4c44      	ldr	r4, [pc, #272]	; (4094d0 <_lv_disp_refr_task+0x544>)
  4093c0:	6820      	ldr	r0, [r4, #0]
  4093c2:	4b4a      	ldr	r3, [pc, #296]	; (4094ec <_lv_disp_refr_task+0x560>)
  4093c4:	4798      	blx	r3
  4093c6:	9004      	str	r0, [sp, #16]
                for(a = 0; a < disp_refr->inv_p; a++) {
  4093c8:	6823      	ldr	r3, [r4, #0]
  4093ca:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  4093ce:	f3c2 0209 	ubfx	r2, r2, #0, #10
  4093d2:	2a00      	cmp	r2, #0
  4093d4:	d04b      	beq.n	40946e <_lv_disp_refr_task+0x4e2>
                            start_offs += hres * sizeof(lv_color_t);
  4093d6:	0045      	lsls	r5, r0, #1
  4093d8:	2200      	movs	r2, #0
  4093da:	4690      	mov	r8, r2
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  4093dc:	46a1      	mov	r9, r4
  4093de:	e00c      	b.n	4093fa <_lv_disp_refr_task+0x46e>
                for(a = 0; a < disp_refr->inv_p; a++) {
  4093e0:	f108 0801 	add.w	r8, r8, #1
  4093e4:	fa1f f888 	uxth.w	r8, r8
  4093e8:	4642      	mov	r2, r8
  4093ea:	f8d9 3000 	ldr.w	r3, [r9]
  4093ee:	f8b3 1182 	ldrh.w	r1, [r3, #386]	; 0x182
  4093f2:	f3c1 0109 	ubfx	r1, r1, #0, #10
  4093f6:	4588      	cmp	r8, r1
  4093f8:	da39      	bge.n	40946e <_lv_disp_refr_task+0x4e2>
                    if(disp_refr->inv_area_joined[a] == 0) {
  4093fa:	1899      	adds	r1, r3, r2
  4093fc:	f891 1162 	ldrb.w	r1, [r1, #354]	; 0x162
  409400:	2900      	cmp	r1, #0
  409402:	d1ed      	bne.n	4093e0 <_lv_disp_refr_task+0x454>
  409404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
  409408:	f9b3 7064 	ldrsh.w	r7, [r3, #100]	; 0x64
  40940c:	f9b3 1062 	ldrsh.w	r1, [r3, #98]	; 0x62
  409410:	9804      	ldr	r0, [sp, #16]
  409412:	fb07 1600 	mla	r6, r7, r0, r1
                        uint32_t start_offs =
  409416:	0076      	lsls	r6, r6, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  409418:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  40941c:	3301      	adds	r3, #1
  40941e:	1a5b      	subs	r3, r3, r1
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
  409420:	b21b      	sxth	r3, r3
  409422:	005b      	lsls	r3, r3, #1
  409424:	9302      	str	r3, [sp, #8]
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  409426:	f8d9 3000 	ldr.w	r3, [r9]
  40942a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40942e:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
  409432:	42bb      	cmp	r3, r7
  409434:	dbd4      	blt.n	4093e0 <_lv_disp_refr_task+0x454>
  409436:	eb0a 0b06 	add.w	fp, sl, r6
  40943a:	9b03      	ldr	r3, [sp, #12]
  40943c:	441e      	add	r6, r3
  40943e:	320c      	adds	r2, #12
  409440:	00d4      	lsls	r4, r2, #3
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
  409442:	9a02      	ldr	r2, [sp, #8]
  409444:	4659      	mov	r1, fp
  409446:	9801      	ldr	r0, [sp, #4]
  409448:	4b29      	ldr	r3, [pc, #164]	; (4094f0 <_lv_disp_refr_task+0x564>)
  40944a:	4798      	blx	r3
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
  40944c:	9a02      	ldr	r2, [sp, #8]
  40944e:	9901      	ldr	r1, [sp, #4]
  409450:	4630      	mov	r0, r6
  409452:	4b27      	ldr	r3, [pc, #156]	; (4094f0 <_lv_disp_refr_task+0x564>)
  409454:	4798      	blx	r3
  409456:	3701      	adds	r7, #1
  409458:	b23f      	sxth	r7, r7
  40945a:	44ab      	add	fp, r5
  40945c:	442e      	add	r6, r5
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  40945e:	f8d9 3000 	ldr.w	r3, [r9]
  409462:	4423      	add	r3, r4
  409464:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  409468:	42bb      	cmp	r3, r7
  40946a:	daea      	bge.n	409442 <_lv_disp_refr_task+0x4b6>
  40946c:	e7b8      	b.n	4093e0 <_lv_disp_refr_task+0x454>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
  40946e:	9b01      	ldr	r3, [sp, #4]
  409470:	2b00      	cmp	r3, #0
  409472:	f43f af6c 	beq.w	40934e <_lv_disp_refr_task+0x3c2>
  409476:	4618      	mov	r0, r3
  409478:	4b1e      	ldr	r3, [pc, #120]	; (4094f4 <_lv_disp_refr_task+0x568>)
  40947a:	4798      	blx	r3
  40947c:	e767      	b.n	40934e <_lv_disp_refr_task+0x3c2>
    px_num = 0;
  40947e:	2200      	movs	r2, #0
  409480:	4b16      	ldr	r3, [pc, #88]	; (4094dc <_lv_disp_refr_task+0x550>)
  409482:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
  409484:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  409488:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40948c:	b97b      	cbnz	r3, 4094ae <_lv_disp_refr_task+0x522>
    if(disp_refr->inv_p != 0) {
  40948e:	4b10      	ldr	r3, [pc, #64]	; (4094d0 <_lv_disp_refr_task+0x544>)
  409490:	6818      	ldr	r0, [r3, #0]
  409492:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  409496:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40949a:	2b00      	cmp	r3, #0
  40949c:	f47f af50 	bne.w	409340 <_lv_disp_refr_task+0x3b4>
    _lv_mem_buf_free_all();
  4094a0:	4b15      	ldr	r3, [pc, #84]	; (4094f8 <_lv_disp_refr_task+0x56c>)
  4094a2:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
  4094a4:	4b15      	ldr	r3, [pc, #84]	; (4094fc <_lv_disp_refr_task+0x570>)
  4094a6:	4798      	blx	r3
}
  4094a8:	b00b      	add	sp, #44	; 0x2c
  4094aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t last_i = 0;
  4094ae:	9205      	str	r2, [sp, #20]
  4094b0:	e607      	b.n	4090c2 <_lv_disp_refr_task+0x136>
    px_num = 0;
  4094b2:	2200      	movs	r2, #0
  4094b4:	4b09      	ldr	r3, [pc, #36]	; (4094dc <_lv_disp_refr_task+0x550>)
  4094b6:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
  4094b8:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  4094bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4094c0:	2b00      	cmp	r3, #0
  4094c2:	d0ed      	beq.n	4094a0 <_lv_disp_refr_task+0x514>
    int32_t last_i = 0;
  4094c4:	9205      	str	r2, [sp, #20]
  4094c6:	e5fc      	b.n	4090c2 <_lv_disp_refr_task+0x136>
  4094c8:	00408cd9 	.word	0x00408cd9
  4094cc:	004141e5 	.word	0x004141e5
  4094d0:	2040c3f0 	.word	0x2040c3f0
  4094d4:	00415ead 	.word	0x00415ead
  4094d8:	004144b1 	.word	0x004144b1
  4094dc:	2040c3f4 	.word	0x2040c3f4
  4094e0:	00414199 	.word	0x00414199
  4094e4:	00408c55 	.word	0x00408c55
  4094e8:	00415cd9 	.word	0x00415cd9
  4094ec:	004140ad 	.word	0x004140ad
  4094f0:	00415a1d 	.word	0x00415a1d
  4094f4:	0041595d 	.word	0x0041595d
  4094f8:	004159c1 	.word	0x004159c1
  4094fc:	00414011 	.word	0x00414011

00409500 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
  409500:	b508      	push	{r3, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
  409502:	2104      	movs	r1, #4
  409504:	4b01      	ldr	r3, [pc, #4]	; (40950c <lv_style_init+0xc>)
  409506:	4798      	blx	r3
  409508:	bd08      	pop	{r3, pc}
  40950a:	bf00      	nop
  40950c:	00415ead 	.word	0x00415ead

00409510 <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
  409510:	b508      	push	{r3, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
  409512:	2108      	movs	r1, #8
  409514:	4b01      	ldr	r3, [pc, #4]	; (40951c <lv_style_list_init+0xc>)
  409516:	4798      	blx	r3
  409518:	bd08      	pop	{r3, pc}
  40951a:	bf00      	nop
  40951c:	00415ead 	.word	0x00415ead

00409520 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
  409520:	b570      	push	{r4, r5, r6, lr}
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
  409522:	7903      	ldrb	r3, [r0, #4]
  409524:	f013 063f 	ands.w	r6, r3, #63	; 0x3f
  409528:	d052      	beq.n	4095d0 <_lv_style_list_remove_style+0xb0>
  40952a:	4604      	mov	r4, r0

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
  40952c:	f013 023f 	ands.w	r2, r3, #63	; 0x3f
  409530:	d04e      	beq.n	4095d0 <_lv_style_list_remove_style+0xb0>
        if(list->style_list[i] == style) {
  409532:	6800      	ldr	r0, [r0, #0]
  409534:	6803      	ldr	r3, [r0, #0]
  409536:	4299      	cmp	r1, r3
  409538:	d008      	beq.n	40954c <_lv_style_list_remove_style+0x2c>
  40953a:	2300      	movs	r3, #0
    for(i = 0; i < list->style_cnt; i++) {
  40953c:	3301      	adds	r3, #1
  40953e:	b2db      	uxtb	r3, r3
  409540:	4293      	cmp	r3, r2
  409542:	da17      	bge.n	409574 <_lv_style_list_remove_style+0x54>
        if(list->style_list[i] == style) {
  409544:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  409548:	428d      	cmp	r5, r1
  40954a:	d1f7      	bne.n	40953c <_lv_style_list_remove_style+0x1c>
  40954c:	460d      	mov	r5, r1
            break;
        }
    }
    if(found == false) return;

    if(list->style_cnt == 1) {
  40954e:	2e01      	cmp	r6, #1
  409550:	d011      	beq.n	409576 <_lv_style_list_remove_style+0x56>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
  409552:	3a01      	subs	r2, #1
  409554:	0090      	lsls	r0, r2, #2
  409556:	4b1f      	ldr	r3, [pc, #124]	; (4095d4 <_lv_style_list_remove_style+0xb4>)
  409558:	4798      	blx	r3
  40955a:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
  40955c:	4b1e      	ldr	r3, [pc, #120]	; (4095d8 <_lv_style_list_remove_style+0xb8>)
  40955e:	4798      	blx	r3
  409560:	b1a0      	cbz	r0, 40958c <_lv_style_list_remove_style+0x6c>
    if(new_classes == NULL) {
  409562:	2e00      	cmp	r6, #0
  409564:	d034      	beq.n	4095d0 <_lv_style_list_remove_style+0xb0>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
  409566:	7923      	ldrb	r3, [r4, #4]
  409568:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  40956c:	d025      	beq.n	4095ba <_lv_style_list_remove_style+0x9a>
  40956e:	2100      	movs	r1, #0
  409570:	460b      	mov	r3, r1
  409572:	e018      	b.n	4095a6 <_lv_style_list_remove_style+0x86>
  409574:	bd70      	pop	{r4, r5, r6, pc}
        lv_mem_free(list->style_list);
  409576:	4b19      	ldr	r3, [pc, #100]	; (4095dc <_lv_style_list_remove_style+0xbc>)
  409578:	4798      	blx	r3
        list->style_list = NULL;
  40957a:	2200      	movs	r2, #0
  40957c:	6022      	str	r2, [r4, #0]
        list->style_cnt = 0;
  40957e:	7923      	ldrb	r3, [r4, #4]
        list->has_local = 0;
  409580:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  409584:	f362 1386 	bfi	r3, r2, #6, #1
  409588:	7123      	strb	r3, [r4, #4]
        return;
  40958a:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(new_classes);
  40958c:	4632      	mov	r2, r6
  40958e:	2300      	movs	r3, #0
  409590:	4813      	ldr	r0, [pc, #76]	; (4095e0 <_lv_style_list_remove_style+0xc0>)
  409592:	4914      	ldr	r1, [pc, #80]	; (4095e4 <_lv_style_list_remove_style+0xc4>)
  409594:	4788      	blx	r1
  409596:	e7fe      	b.n	409596 <_lv_style_list_remove_style+0x76>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
  409598:	3301      	adds	r3, #1
  40959a:	b2db      	uxtb	r3, r3
  40959c:	7922      	ldrb	r2, [r4, #4]
  40959e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  4095a2:	4293      	cmp	r3, r2
  4095a4:	da09      	bge.n	4095ba <_lv_style_list_remove_style+0x9a>
        if(list->style_list[i] == style) continue;
  4095a6:	6822      	ldr	r2, [r4, #0]
  4095a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4095ac:	4295      	cmp	r5, r2
  4095ae:	d0f3      	beq.n	409598 <_lv_style_list_remove_style+0x78>
        new_classes[j] = list->style_list[i];
  4095b0:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
        j++;
  4095b4:	3101      	adds	r1, #1
  4095b6:	b2c9      	uxtb	r1, r1
  4095b8:	e7ee      	b.n	409598 <_lv_style_list_remove_style+0x78>

    }

    lv_mem_free(list->style_list);
  4095ba:	6820      	ldr	r0, [r4, #0]
  4095bc:	4b07      	ldr	r3, [pc, #28]	; (4095dc <_lv_style_list_remove_style+0xbc>)
  4095be:	4798      	blx	r3

    list->style_cnt--;
  4095c0:	7923      	ldrb	r3, [r4, #4]
  4095c2:	f103 023f 	add.w	r2, r3, #63	; 0x3f
  4095c6:	f362 0305 	bfi	r3, r2, #0, #6
  4095ca:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  4095cc:	6026      	str	r6, [r4, #0]
  4095ce:	bd70      	pop	{r4, r5, r6, pc}
  4095d0:	bd70      	pop	{r4, r5, r6, pc}
  4095d2:	bf00      	nop
  4095d4:	004157c9 	.word	0x004157c9
  4095d8:	004150ef 	.word	0x004150ef
  4095dc:	004158b9 	.word	0x004158b9
  4095e0:	00425a60 	.word	0x00425a60
  4095e4:	004150f9 	.word	0x004150f9

004095e8 <_lv_style_list_add_style>:
    if(list == NULL) return;
  4095e8:	2800      	cmp	r0, #0
  4095ea:	d03f      	beq.n	40966c <_lv_style_list_add_style+0x84>
{
  4095ec:	b570      	push	{r4, r5, r6, lr}
  4095ee:	4604      	mov	r4, r0
  4095f0:	460e      	mov	r6, r1
    _lv_style_list_remove_style(list, style);
  4095f2:	4b1f      	ldr	r3, [pc, #124]	; (409670 <_lv_style_list_add_style+0x88>)
  4095f4:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
  4095f6:	7923      	ldrb	r3, [r4, #4]
  4095f8:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  4095fc:	d126      	bne.n	40964c <_lv_style_list_add_style+0x64>
  4095fe:	2004      	movs	r0, #4
  409600:	4b1c      	ldr	r3, [pc, #112]	; (409674 <_lv_style_list_add_style+0x8c>)
  409602:	4798      	blx	r3
  409604:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
  409606:	4628      	mov	r0, r5
  409608:	4b1b      	ldr	r3, [pc, #108]	; (409678 <_lv_style_list_add_style+0x90>)
  40960a:	4798      	blx	r3
  40960c:	b340      	cbz	r0, 409660 <_lv_style_list_add_style+0x78>
    if(new_classes == NULL) {
  40960e:	b1e5      	cbz	r5, 40964a <_lv_style_list_add_style+0x62>
    if(list->has_trans) first_style++;
  409610:	7923      	ldrb	r3, [r4, #4]
    uint8_t first_style = 0;
  409612:	09da      	lsrs	r2, r3, #7
    if(list->has_local) first_style++;
  409614:	f013 0f40 	tst.w	r3, #64	; 0x40
  409618:	bf18      	it	ne
  40961a:	3201      	addne	r2, #1
    for(i = list->style_cnt; i > first_style; i--) {
  40961c:	7923      	ldrb	r3, [r4, #4]
  40961e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  409622:	429a      	cmp	r2, r3
  409624:	d209      	bcs.n	40963a <_lv_style_list_add_style+0x52>
        new_classes[i] = new_classes[i - 1];
  409626:	eb05 0183 	add.w	r1, r5, r3, lsl #2
  40962a:	f851 1c04 	ldr.w	r1, [r1, #-4]
  40962e:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    for(i = list->style_cnt; i > first_style; i--) {
  409632:	3b01      	subs	r3, #1
  409634:	b2db      	uxtb	r3, r3
  409636:	429a      	cmp	r2, r3
  409638:	d1f5      	bne.n	409626 <_lv_style_list_add_style+0x3e>
    new_classes[first_style] = style;
  40963a:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
    list->style_cnt++;
  40963e:	7923      	ldrb	r3, [r4, #4]
  409640:	1c5a      	adds	r2, r3, #1
  409642:	f362 0305 	bfi	r3, r2, #0, #6
  409646:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  409648:	6025      	str	r5, [r4, #0]
  40964a:	bd70      	pop	{r4, r5, r6, pc}
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
  40964c:	7921      	ldrb	r1, [r4, #4]
  40964e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  409652:	3101      	adds	r1, #1
  409654:	0089      	lsls	r1, r1, #2
  409656:	6820      	ldr	r0, [r4, #0]
  409658:	4b08      	ldr	r3, [pc, #32]	; (40967c <_lv_style_list_add_style+0x94>)
  40965a:	4798      	blx	r3
  40965c:	4605      	mov	r5, r0
  40965e:	e7d2      	b.n	409606 <_lv_style_list_add_style+0x1e>
    LV_ASSERT_MEM(new_classes);
  409660:	462a      	mov	r2, r5
  409662:	2300      	movs	r3, #0
  409664:	4806      	ldr	r0, [pc, #24]	; (409680 <_lv_style_list_add_style+0x98>)
  409666:	4907      	ldr	r1, [pc, #28]	; (409684 <_lv_style_list_add_style+0x9c>)
  409668:	4788      	blx	r1
  40966a:	e7fe      	b.n	40966a <_lv_style_list_add_style+0x82>
  40966c:	4770      	bx	lr
  40966e:	bf00      	nop
  409670:	00409521 	.word	0x00409521
  409674:	004157c9 	.word	0x004157c9
  409678:	004150ef 	.word	0x004150ef
  40967c:	00415c61 	.word	0x00415c61
  409680:	00425a60 	.word	0x00425a60
  409684:	004150f9 	.word	0x004150f9

00409688 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
  409688:	b538      	push	{r3, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
  40968a:	7902      	ldrb	r2, [r0, #4]
  40968c:	f012 0f40 	tst.w	r2, #64	; 0x40
  409690:	d014      	beq.n	4096bc <get_alloc_local_style+0x34>
  409692:	09d3      	lsrs	r3, r2, #7
    if(list->has_trans && list->skip_trans) id++;
  409694:	8881      	ldrh	r1, [r0, #4]
  409696:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  40969a:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  40969e:	bf08      	it	eq
  4096a0:	3301      	addeq	r3, #1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  4096a2:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  4096a6:	d025      	beq.n	4096f4 <get_alloc_local_style+0x6c>
  4096a8:	7902      	ldrb	r2, [r0, #4]
  4096aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  4096ae:	4293      	cmp	r3, r2
  4096b0:	da22      	bge.n	4096f8 <get_alloc_local_style+0x70>
    return list->style_list[id];
  4096b2:	6802      	ldr	r2, [r0, #0]
  4096b4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
  4096b8:	4628      	mov	r0, r5
  4096ba:	bd38      	pop	{r3, r4, r5, pc}
  4096bc:	4604      	mov	r4, r0
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
  4096be:	2004      	movs	r0, #4
  4096c0:	4b0e      	ldr	r3, [pc, #56]	; (4096fc <get_alloc_local_style+0x74>)
  4096c2:	4798      	blx	r3
  4096c4:	4605      	mov	r5, r0
    LV_ASSERT_MEM(local_style);
  4096c6:	4b0e      	ldr	r3, [pc, #56]	; (409700 <get_alloc_local_style+0x78>)
  4096c8:	4798      	blx	r3
  4096ca:	b168      	cbz	r0, 4096e8 <get_alloc_local_style+0x60>
    if(local_style == NULL) {
  4096cc:	2d00      	cmp	r5, #0
  4096ce:	d0f3      	beq.n	4096b8 <get_alloc_local_style+0x30>
    lv_style_init(local_style);
  4096d0:	4628      	mov	r0, r5
  4096d2:	4b0c      	ldr	r3, [pc, #48]	; (409704 <get_alloc_local_style+0x7c>)
  4096d4:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
  4096d6:	4629      	mov	r1, r5
  4096d8:	4620      	mov	r0, r4
  4096da:	4b0b      	ldr	r3, [pc, #44]	; (409708 <get_alloc_local_style+0x80>)
  4096dc:	4798      	blx	r3
    list->has_local = 1;
  4096de:	7923      	ldrb	r3, [r4, #4]
  4096e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4096e4:	7123      	strb	r3, [r4, #4]
    return local_style;
  4096e6:	e7e7      	b.n	4096b8 <get_alloc_local_style+0x30>
    LV_ASSERT_MEM(local_style);
  4096e8:	462a      	mov	r2, r5
  4096ea:	2300      	movs	r3, #0
  4096ec:	4807      	ldr	r0, [pc, #28]	; (40970c <get_alloc_local_style+0x84>)
  4096ee:	4908      	ldr	r1, [pc, #32]	; (409710 <get_alloc_local_style+0x88>)
  4096f0:	4788      	blx	r1
  4096f2:	e7fe      	b.n	4096f2 <get_alloc_local_style+0x6a>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  4096f4:	2500      	movs	r5, #0
  4096f6:	e7df      	b.n	4096b8 <get_alloc_local_style+0x30>
  4096f8:	2500      	movs	r5, #0
  4096fa:	e7dd      	b.n	4096b8 <get_alloc_local_style+0x30>
  4096fc:	004157c9 	.word	0x004157c9
  409700:	004150ef 	.word	0x004150ef
  409704:	00409501 	.word	0x00409501
  409708:	004095e9 	.word	0x004095e9
  40970c:	00425a60 	.word	0x00425a60
  409710:	004150f9 	.word	0x004150f9

00409714 <lv_style_reset>:
{
  409714:	b510      	push	{r4, lr}
  409716:	4604      	mov	r4, r0
    lv_mem_free(style->map);
  409718:	6800      	ldr	r0, [r0, #0]
  40971a:	4b02      	ldr	r3, [pc, #8]	; (409724 <lv_style_reset+0x10>)
  40971c:	4798      	blx	r3
    style->map = NULL;
  40971e:	2300      	movs	r3, #0
  409720:	6023      	str	r3, [r4, #0]
  409722:	bd10      	pop	{r4, pc}
  409724:	004158b9 	.word	0x004158b9

00409728 <_lv_style_get_mem_size>:
    if(style->map == NULL) return 0;
  409728:	6802      	ldr	r2, [r0, #0]
  40972a:	b342      	cbz	r2, 40977e <_lv_style_get_mem_size+0x56>
{
  40972c:	b082      	sub	sp, #8
 */
static inline lv_style_property_t get_style_prop(const lv_style_t * style, size_t idx)
{
    lv_style_property_t prop;
    uint8_t * prop_p = (uint8_t *)&prop;
    prop_p[0] = style->map[idx];
  40972e:	7813      	ldrb	r3, [r2, #0]
  409730:	f88d 3006 	strb.w	r3, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409734:	7853      	ldrb	r3, [r2, #1]
  409736:	f88d 3007 	strb.w	r3, [sp, #7]
 * @param idx index of the style in style->map
 * @return id of property in style->map + idx
 */
static inline uint8_t get_style_prop_id(const lv_style_t * style, size_t idx)
{
    return get_style_prop(style, idx) & 0xFF;
  40973a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40973e:	2bff      	cmp	r3, #255	; 0xff
  409740:	d018      	beq.n	409774 <_lv_style_get_mem_size+0x4c>
  409742:	2000      	movs	r0, #0
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409744:	2104      	movs	r1, #4
  409746:	e00c      	b.n	409762 <_lv_style_get_mem_size+0x3a>
  409748:	460b      	mov	r3, r1
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
  40974a:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40974c:	5c13      	ldrb	r3, [r2, r0]
  40974e:	f88d 3006 	strb.w	r3, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409752:	1813      	adds	r3, r2, r0
  409754:	785b      	ldrb	r3, [r3, #1]
  409756:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40975a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40975e:	2bff      	cmp	r3, #255	; 0xff
  409760:	d009      	beq.n	409776 <_lv_style_get_mem_size+0x4e>
    prop_id &= 0xF;
  409762:	f003 030f 	and.w	r3, r3, #15
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409766:	2b0b      	cmp	r3, #11
  409768:	d9ee      	bls.n	409748 <_lv_style_get_mem_size+0x20>
    else size += sizeof(const void *);
  40976a:	2b0e      	cmp	r3, #14
  40976c:	bf34      	ite	cc
  40976e:	2303      	movcc	r3, #3
  409770:	2306      	movcs	r3, #6
  409772:	e7ea      	b.n	40974a <_lv_style_get_mem_size+0x22>
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409774:	2000      	movs	r0, #0
    return i + sizeof(lv_style_property_t);
  409776:	3002      	adds	r0, #2
  409778:	b280      	uxth	r0, r0
}
  40977a:	b002      	add	sp, #8
  40977c:	4770      	bx	lr
    if(style->map == NULL) return 0;
  40977e:	2000      	movs	r0, #0
  409780:	4770      	bx	lr
	...

00409784 <lv_style_copy>:
    if(style_src == NULL) return;
  409784:	b181      	cbz	r1, 4097a8 <lv_style_copy+0x24>
{
  409786:	b570      	push	{r4, r5, r6, lr}
  409788:	460c      	mov	r4, r1
    if(style_src->map == NULL) return;
  40978a:	680a      	ldr	r2, [r1, #0]
  40978c:	b15a      	cbz	r2, 4097a6 <lv_style_copy+0x22>
  40978e:	4605      	mov	r5, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
  409790:	4608      	mov	r0, r1
  409792:	4b06      	ldr	r3, [pc, #24]	; (4097ac <lv_style_copy+0x28>)
  409794:	4798      	blx	r3
  409796:	4606      	mov	r6, r0
    style_dest->map = lv_mem_alloc(size);
  409798:	4b05      	ldr	r3, [pc, #20]	; (4097b0 <lv_style_copy+0x2c>)
  40979a:	4798      	blx	r3
  40979c:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
  40979e:	4632      	mov	r2, r6
  4097a0:	6821      	ldr	r1, [r4, #0]
  4097a2:	4b04      	ldr	r3, [pc, #16]	; (4097b4 <lv_style_copy+0x30>)
  4097a4:	4798      	blx	r3
  4097a6:	bd70      	pop	{r4, r5, r6, pc}
  4097a8:	4770      	bx	lr
  4097aa:	bf00      	nop
  4097ac:	00409729 	.word	0x00409729
  4097b0:	004157c9 	.word	0x004157c9
  4097b4:	00415a1d 	.word	0x00415a1d

004097b8 <lv_style_remove_prop>:
    if(style == NULL) return false;
  4097b8:	2800      	cmp	r0, #0
  4097ba:	f000 8089 	beq.w	4098d0 <lv_style_remove_prop+0x118>
{
  4097be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4097c2:	b082      	sub	sp, #8
  4097c4:	4684      	mov	ip, r0
    if(style->map == NULL) return -1;
  4097c6:	6805      	ldr	r5, [r0, #0]
  4097c8:	2d00      	cmp	r5, #0
  4097ca:	f000 8083 	beq.w	4098d4 <lv_style_remove_prop+0x11c>
    uint8_t id_to_find = prop & 0xFF;
  4097ce:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  4097d0:	0a09      	lsrs	r1, r1, #8
    prop_p[0] = style->map[idx];
  4097d2:	782a      	ldrb	r2, [r5, #0]
  4097d4:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  4097d8:	7868      	ldrb	r0, [r5, #1]
  4097da:	f88d 0007 	strb.w	r0, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  4097de:	b2d3      	uxtb	r3, r2
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  4097e0:	2bff      	cmp	r3, #255	; 0xff
  4097e2:	d052      	beq.n	40988a <lv_style_remove_prop+0xd2>
  4097e4:	f04f 3eff 	mov.w	lr, #4294967295
  4097e8:	46f1      	mov	r9, lr
  4097ea:	2400      	movs	r4, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  4097ec:	f001 087f 	and.w	r8, r1, #127	; 0x7f
  4097f0:	ea6f 0808 	mvn.w	r8, r8
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  4097f4:	2704      	movs	r7, #4
  4097f6:	e03d      	b.n	409874 <lv_style_remove_prop+0xbc>
    prop_p[0] = style->map[idx];
  4097f8:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  4097fc:	f88d 0007 	strb.w	r0, [sp, #7]
    return prop;
  409800:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409804:	0a00      	lsrs	r0, r0, #8
  409806:	b2c2      	uxtb	r2, r0
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409808:	ea81 0a02 	eor.w	sl, r1, r2
  40980c:	f01a 0f7f 	tst.w	sl, #127	; 0x7f
  409810:	d00b      	beq.n	40982a <lv_style_remove_prop+0x72>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409812:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  409816:	ea18 0f02 	tst.w	r8, r2
  40981a:	d12d      	bne.n	409878 <lv_style_remove_prop+0xc0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40981c:	454a      	cmp	r2, r9
  40981e:	dd2b      	ble.n	409878 <lv_style_remove_prop+0xc0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409820:	f000 097f 	and.w	r9, r0, #127	; 0x7f
                    id_guess = i;
  409824:	fa0f fe84 	sxth.w	lr, r4
  409828:	e026      	b.n	409878 <lv_style_remove_prop+0xc0>
                return i;
  40982a:	46a6      	mov	lr, r4
    if(id >= 0) {
  40982c:	f1be 0f00 	cmp.w	lr, #0
  409830:	db52      	blt.n	4098d8 <lv_style_remove_prop+0x120>
        attr_found = get_style_prop_attr(style, id);
  409832:	4677      	mov	r7, lr
    prop_p[0] = style->map[idx];
  409834:	f815 300e 	ldrb.w	r3, [r5, lr]
  409838:	f88d 3006 	strb.w	r3, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40983c:	eb05 030e 	add.w	r3, r5, lr
  409840:	785b      	ldrb	r3, [r3, #1]
  409842:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  409846:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40984a:	ea81 2113 	eor.w	r1, r1, r3, lsr #8
  40984e:	f011 0f7f 	tst.w	r1, #127	; 0x7f
  409852:	d01d      	beq.n	409890 <lv_style_remove_prop+0xd8>
    return false;
  409854:	2000      	movs	r0, #0
}
  409856:	b002      	add	sp, #8
  409858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40985c:	463b      	mov	r3, r7
    return idx + get_prop_size(prop_id);
  40985e:	441c      	add	r4, r3
    prop_p[0] = style->map[idx];
  409860:	5d2a      	ldrb	r2, [r5, r4]
  409862:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409866:	1928      	adds	r0, r5, r4
  409868:	7840      	ldrb	r0, [r0, #1]
  40986a:	f88d 0007 	strb.w	r0, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40986e:	b2d3      	uxtb	r3, r2
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409870:	2bff      	cmp	r3, #255	; 0xff
  409872:	d0db      	beq.n	40982c <lv_style_remove_prop+0x74>
        if(prop_id == id_to_find) {
  409874:	429e      	cmp	r6, r3
  409876:	d0bf      	beq.n	4097f8 <lv_style_remove_prop+0x40>
    prop_id &= 0xF;
  409878:	f003 030f 	and.w	r3, r3, #15
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40987c:	2b0b      	cmp	r3, #11
  40987e:	d9ed      	bls.n	40985c <lv_style_remove_prop+0xa4>
    else size += sizeof(const void *);
  409880:	2b0e      	cmp	r3, #14
  409882:	bf34      	ite	cc
  409884:	2303      	movcc	r3, #3
  409886:	2306      	movcs	r3, #6
  409888:	e7e9      	b.n	40985e <lv_style_remove_prop+0xa6>
    int16_t id_guess = -1;
  40988a:	f04f 3eff 	mov.w	lr, #4294967295
  40988e:	e7cd      	b.n	40982c <lv_style_remove_prop+0x74>
  409890:	4665      	mov	r5, ip
            uint32_t map_size = _lv_style_get_mem_size(style);
  409892:	4660      	mov	r0, ip
  409894:	4b11      	ldr	r3, [pc, #68]	; (4098dc <lv_style_remove_prop+0x124>)
  409896:	4798      	blx	r3
    prop_id &= 0xF;
  409898:	f006 060f 	and.w	r6, r6, #15
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40989c:	2e0b      	cmp	r6, #11
  40989e:	d904      	bls.n	4098aa <lv_style_remove_prop+0xf2>
    else size += sizeof(const void *);
  4098a0:	2e0e      	cmp	r6, #14
  4098a2:	bf34      	ite	cc
  4098a4:	2603      	movcc	r6, #3
  4098a6:	2606      	movcs	r6, #6
  4098a8:	e000      	b.n	4098ac <lv_style_remove_prop+0xf4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  4098aa:	2604      	movs	r6, #4
  4098ac:	b2f6      	uxtb	r6, r6
            for(i = id; i < map_size - prop_size; i++) {
  4098ae:	1b81      	subs	r1, r0, r6
  4098b0:	42b9      	cmp	r1, r7
  4098b2:	d907      	bls.n	4098c4 <lv_style_remove_prop+0x10c>
  4098b4:	463b      	mov	r3, r7
                style->map[i] = style->map[i + prop_size];
  4098b6:	682a      	ldr	r2, [r5, #0]
  4098b8:	1994      	adds	r4, r2, r6
  4098ba:	5ce4      	ldrb	r4, [r4, r3]
  4098bc:	54d4      	strb	r4, [r2, r3]
            for(i = id; i < map_size - prop_size; i++) {
  4098be:	3301      	adds	r3, #1
  4098c0:	4299      	cmp	r1, r3
  4098c2:	d1f8      	bne.n	4098b6 <lv_style_remove_prop+0xfe>
    style->map = lv_mem_realloc(style->map, sz);
  4098c4:	6828      	ldr	r0, [r5, #0]
  4098c6:	4b06      	ldr	r3, [pc, #24]	; (4098e0 <lv_style_remove_prop+0x128>)
  4098c8:	4798      	blx	r3
  4098ca:	6028      	str	r0, [r5, #0]
            return true;
  4098cc:	2001      	movs	r0, #1
  4098ce:	e7c2      	b.n	409856 <lv_style_remove_prop+0x9e>
    if(style == NULL) return false;
  4098d0:	2000      	movs	r0, #0
  4098d2:	4770      	bx	lr
    return false;
  4098d4:	2000      	movs	r0, #0
  4098d6:	e7be      	b.n	409856 <lv_style_remove_prop+0x9e>
  4098d8:	2000      	movs	r0, #0
  4098da:	e7bc      	b.n	409856 <lv_style_remove_prop+0x9e>
  4098dc:	00409729 	.word	0x00409729
  4098e0:	00415c61 	.word	0x00415c61

004098e4 <_lv_style_set_int>:
{
  4098e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4098e8:	b084      	sub	sp, #16
  4098ea:	f8ad 1006 	strh.w	r1, [sp, #6]
  4098ee:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(style->map == NULL) return -1;
  4098f2:	6805      	ldr	r5, [r0, #0]
  4098f4:	2d00      	cmp	r5, #0
  4098f6:	d063      	beq.n	4099c0 <_lv_style_set_int+0xdc>
    uint8_t id_to_find = prop & 0xFF;
  4098f8:	fa5f fe81 	uxtb.w	lr, r1
    attr = (prop >> 8) & 0xFF;
  4098fc:	0a0f      	lsrs	r7, r1, #8
    prop_p[0] = style->map[idx];
  4098fe:	782a      	ldrb	r2, [r5, #0]
  409900:	f88d 200c 	strb.w	r2, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409904:	7869      	ldrb	r1, [r5, #1]
  409906:	f88d 100d 	strb.w	r1, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40990a:	b2d3      	uxtb	r3, r2
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40990c:	2bff      	cmp	r3, #255	; 0xff
  40990e:	d039      	beq.n	409984 <_lv_style_set_int+0xa0>
  409910:	f04f 36ff 	mov.w	r6, #4294967295
  409914:	46b1      	mov	r9, r6
  409916:	2400      	movs	r4, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409918:	f007 087f 	and.w	r8, r7, #127	; 0x7f
  40991c:	ea6f 0808 	mvn.w	r8, r8
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409920:	f04f 0c04 	mov.w	ip, #4
  409924:	e023      	b.n	40996e <_lv_style_set_int+0x8a>
    prop_p[0] = style->map[idx];
  409926:	f88d 200c 	strb.w	r2, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40992a:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40992e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409932:	0a09      	lsrs	r1, r1, #8
  409934:	b2ca      	uxtb	r2, r1
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409936:	ea87 0a02 	eor.w	sl, r7, r2
  40993a:	f01a 0f7f 	tst.w	sl, #127	; 0x7f
  40993e:	d024      	beq.n	40998a <_lv_style_set_int+0xa6>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409940:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  409944:	ea18 0f02 	tst.w	r8, r2
  409948:	d113      	bne.n	409972 <_lv_style_set_int+0x8e>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40994a:	454a      	cmp	r2, r9
  40994c:	dd11      	ble.n	409972 <_lv_style_set_int+0x8e>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40994e:	f001 097f 	and.w	r9, r1, #127	; 0x7f
                    id_guess = i;
  409952:	b226      	sxth	r6, r4
  409954:	e00d      	b.n	409972 <_lv_style_set_int+0x8e>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409956:	4663      	mov	r3, ip
    return idx + get_prop_size(prop_id);
  409958:	441c      	add	r4, r3
    prop_p[0] = style->map[idx];
  40995a:	5d2a      	ldrb	r2, [r5, r4]
  40995c:	f88d 200c 	strb.w	r2, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409960:	192b      	adds	r3, r5, r4
  409962:	7859      	ldrb	r1, [r3, #1]
  409964:	f88d 100d 	strb.w	r1, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409968:	b2d3      	uxtb	r3, r2
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40996a:	2bff      	cmp	r3, #255	; 0xff
  40996c:	d00c      	beq.n	409988 <_lv_style_set_int+0xa4>
        if(prop_id == id_to_find) {
  40996e:	459e      	cmp	lr, r3
  409970:	d0d9      	beq.n	409926 <_lv_style_set_int+0x42>
    prop_id &= 0xF;
  409972:	f003 030f 	and.w	r3, r3, #15
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409976:	2b0b      	cmp	r3, #11
  409978:	d9ed      	bls.n	409956 <_lv_style_set_int+0x72>
    else size += sizeof(const void *);
  40997a:	2b0e      	cmp	r3, #14
  40997c:	bf34      	ite	cc
  40997e:	2303      	movcc	r3, #3
  409980:	2306      	movcs	r3, #6
  409982:	e7e9      	b.n	409958 <_lv_style_set_int+0x74>
    int16_t id_guess = -1;
  409984:	f04f 36ff 	mov.w	r6, #4294967295
    return id_guess;
  409988:	4634      	mov	r4, r6
    if(id >= 0) {
  40998a:	2c00      	cmp	r4, #0
  40998c:	db18      	blt.n	4099c0 <_lv_style_set_int+0xdc>
    prop_p[0] = style->map[idx];
  40998e:	5d2b      	ldrb	r3, [r5, r4]
  409990:	f88d 300c 	strb.w	r3, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409994:	192b      	adds	r3, r5, r4
  409996:	785b      	ldrb	r3, [r3, #1]
  409998:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40999c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  4099a0:	ea87 2713 	eor.w	r7, r7, r3, lsr #8
  4099a4:	f017 0f7f 	tst.w	r7, #127	; 0x7f
  4099a8:	d10a      	bne.n	4099c0 <_lv_style_set_int+0xdc>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
  4099aa:	3402      	adds	r4, #2
  4099ac:	192b      	adds	r3, r5, r4
        *d8 = *s8;
  4099ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4099b2:	552a      	strb	r2, [r5, r4]
  4099b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
  4099b8:	705a      	strb	r2, [r3, #1]
}
  4099ba:	b004      	add	sp, #16
  4099bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4099c0:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  4099c2:	23ff      	movs	r3, #255	; 0xff
  4099c4:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  4099c8:	4b19      	ldr	r3, [pc, #100]	; (409a30 <_lv_style_set_int+0x14c>)
  4099ca:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  4099cc:	2800      	cmp	r0, #0
  4099ce:	bf08      	it	eq
  4099d0:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
  4099d2:	1d04      	adds	r4, r0, #4
    style_resize(style, size);
  4099d4:	b2a4      	uxth	r4, r4
    style->map = lv_mem_realloc(style->map, sz);
  4099d6:	4621      	mov	r1, r4
  4099d8:	6828      	ldr	r0, [r5, #0]
  4099da:	4b16      	ldr	r3, [pc, #88]	; (409a34 <_lv_style_set_int+0x150>)
  4099dc:	4798      	blx	r3
  4099de:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  4099e0:	4b15      	ldr	r3, [pc, #84]	; (409a38 <_lv_style_set_int+0x154>)
  4099e2:	4798      	blx	r3
  4099e4:	b1e8      	cbz	r0, 409a22 <_lv_style_set_int+0x13e>
    if(style == NULL) return;
  4099e6:	2d00      	cmp	r5, #0
  4099e8:	d0e7      	beq.n	4099ba <_lv_style_set_int+0xd6>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  4099ea:	1fa3      	subs	r3, r4, #6
  4099ec:	682a      	ldr	r2, [r5, #0]
  4099ee:	18d1      	adds	r1, r2, r3
  4099f0:	f89d 0006 	ldrb.w	r0, [sp, #6]
  4099f4:	54d0      	strb	r0, [r2, r3]
  4099f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4099fa:	704b      	strb	r3, [r1, #1]
  4099fc:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
  4099fe:	682a      	ldr	r2, [r5, #0]
  409a00:	18d1      	adds	r1, r2, r3
  409a02:	f89d 0004 	ldrb.w	r0, [sp, #4]
  409a06:	54d0      	strb	r0, [r2, r3]
  409a08:	f89d 3005 	ldrb.w	r3, [sp, #5]
  409a0c:	704b      	strb	r3, [r1, #1]
  409a0e:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  409a10:	682b      	ldr	r3, [r5, #0]
  409a12:	191a      	adds	r2, r3, r4
  409a14:	f89d 100e 	ldrb.w	r1, [sp, #14]
  409a18:	5519      	strb	r1, [r3, r4]
  409a1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
  409a1e:	7053      	strb	r3, [r2, #1]
  409a20:	e7cb      	b.n	4099ba <_lv_style_set_int+0xd6>
    LV_ASSERT_MEM(style->map);
  409a22:	682a      	ldr	r2, [r5, #0]
  409a24:	2300      	movs	r3, #0
  409a26:	4805      	ldr	r0, [pc, #20]	; (409a3c <_lv_style_set_int+0x158>)
  409a28:	4905      	ldr	r1, [pc, #20]	; (409a40 <_lv_style_set_int+0x15c>)
  409a2a:	4788      	blx	r1
  409a2c:	e7fe      	b.n	409a2c <_lv_style_set_int+0x148>
  409a2e:	bf00      	nop
  409a30:	00409729 	.word	0x00409729
  409a34:	00415c61 	.word	0x00415c61
  409a38:	004150ef 	.word	0x004150ef
  409a3c:	00425a60 	.word	0x00425a60
  409a40:	004150f9 	.word	0x004150f9

00409a44 <_lv_style_set_color>:
{
  409a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409a48:	b084      	sub	sp, #16
  409a4a:	f8ad 2004 	strh.w	r2, [sp, #4]
  409a4e:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  409a52:	6805      	ldr	r5, [r0, #0]
  409a54:	2d00      	cmp	r5, #0
  409a56:	d063      	beq.n	409b20 <_lv_style_set_color+0xdc>
    uint8_t id_to_find = prop & 0xFF;
  409a58:	fa5f fe81 	uxtb.w	lr, r1
    attr = (prop >> 8) & 0xFF;
  409a5c:	0a0f      	lsrs	r7, r1, #8
    prop_p[0] = style->map[idx];
  409a5e:	782a      	ldrb	r2, [r5, #0]
  409a60:	f88d 200c 	strb.w	r2, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409a64:	7869      	ldrb	r1, [r5, #1]
  409a66:	f88d 100d 	strb.w	r1, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409a6a:	b2d3      	uxtb	r3, r2
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409a6c:	2bff      	cmp	r3, #255	; 0xff
  409a6e:	d039      	beq.n	409ae4 <_lv_style_set_color+0xa0>
  409a70:	f04f 36ff 	mov.w	r6, #4294967295
  409a74:	46b1      	mov	r9, r6
  409a76:	2400      	movs	r4, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409a78:	f007 087f 	and.w	r8, r7, #127	; 0x7f
  409a7c:	ea6f 0808 	mvn.w	r8, r8
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409a80:	f04f 0c04 	mov.w	ip, #4
  409a84:	e023      	b.n	409ace <_lv_style_set_color+0x8a>
    prop_p[0] = style->map[idx];
  409a86:	f88d 200c 	strb.w	r2, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409a8a:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409a8e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409a92:	0a09      	lsrs	r1, r1, #8
  409a94:	b2ca      	uxtb	r2, r1
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409a96:	ea87 0a02 	eor.w	sl, r7, r2
  409a9a:	f01a 0f7f 	tst.w	sl, #127	; 0x7f
  409a9e:	d024      	beq.n	409aea <_lv_style_set_color+0xa6>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409aa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  409aa4:	ea18 0f02 	tst.w	r8, r2
  409aa8:	d113      	bne.n	409ad2 <_lv_style_set_color+0x8e>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409aaa:	454a      	cmp	r2, r9
  409aac:	dd11      	ble.n	409ad2 <_lv_style_set_color+0x8e>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409aae:	f001 097f 	and.w	r9, r1, #127	; 0x7f
                    id_guess = i;
  409ab2:	b226      	sxth	r6, r4
  409ab4:	e00d      	b.n	409ad2 <_lv_style_set_color+0x8e>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409ab6:	4663      	mov	r3, ip
    return idx + get_prop_size(prop_id);
  409ab8:	441c      	add	r4, r3
    prop_p[0] = style->map[idx];
  409aba:	5d2a      	ldrb	r2, [r5, r4]
  409abc:	f88d 200c 	strb.w	r2, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409ac0:	192b      	adds	r3, r5, r4
  409ac2:	7859      	ldrb	r1, [r3, #1]
  409ac4:	f88d 100d 	strb.w	r1, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409ac8:	b2d3      	uxtb	r3, r2
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409aca:	2bff      	cmp	r3, #255	; 0xff
  409acc:	d00c      	beq.n	409ae8 <_lv_style_set_color+0xa4>
        if(prop_id == id_to_find) {
  409ace:	459e      	cmp	lr, r3
  409ad0:	d0d9      	beq.n	409a86 <_lv_style_set_color+0x42>
    prop_id &= 0xF;
  409ad2:	f003 030f 	and.w	r3, r3, #15
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409ad6:	2b0b      	cmp	r3, #11
  409ad8:	d9ed      	bls.n	409ab6 <_lv_style_set_color+0x72>
    else size += sizeof(const void *);
  409ada:	2b0e      	cmp	r3, #14
  409adc:	bf34      	ite	cc
  409ade:	2303      	movcc	r3, #3
  409ae0:	2306      	movcs	r3, #6
  409ae2:	e7e9      	b.n	409ab8 <_lv_style_set_color+0x74>
    int16_t id_guess = -1;
  409ae4:	f04f 36ff 	mov.w	r6, #4294967295
    return id_guess;
  409ae8:	4634      	mov	r4, r6
    if(id >= 0) {
  409aea:	2c00      	cmp	r4, #0
  409aec:	db18      	blt.n	409b20 <_lv_style_set_color+0xdc>
    prop_p[0] = style->map[idx];
  409aee:	5d2b      	ldrb	r3, [r5, r4]
  409af0:	f88d 300c 	strb.w	r3, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409af4:	192b      	adds	r3, r5, r4
  409af6:	785b      	ldrb	r3, [r3, #1]
  409af8:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409afc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409b00:	ea87 2713 	eor.w	r7, r7, r3, lsr #8
  409b04:	f017 0f7f 	tst.w	r7, #127	; 0x7f
  409b08:	d10a      	bne.n	409b20 <_lv_style_set_color+0xdc>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
  409b0a:	3402      	adds	r4, #2
  409b0c:	192b      	adds	r3, r5, r4
  409b0e:	f89d 2004 	ldrb.w	r2, [sp, #4]
  409b12:	552a      	strb	r2, [r5, r4]
  409b14:	f89d 2005 	ldrb.w	r2, [sp, #5]
  409b18:	705a      	strb	r2, [r3, #1]
}
  409b1a:	b004      	add	sp, #16
  409b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409b20:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  409b22:	23ff      	movs	r3, #255	; 0xff
  409b24:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  409b28:	4b19      	ldr	r3, [pc, #100]	; (409b90 <_lv_style_set_color+0x14c>)
  409b2a:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  409b2c:	2800      	cmp	r0, #0
  409b2e:	bf08      	it	eq
  409b30:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
  409b32:	1d04      	adds	r4, r0, #4
    style_resize(style, size);
  409b34:	b2a4      	uxth	r4, r4
    style->map = lv_mem_realloc(style->map, sz);
  409b36:	4621      	mov	r1, r4
  409b38:	6828      	ldr	r0, [r5, #0]
  409b3a:	4b16      	ldr	r3, [pc, #88]	; (409b94 <_lv_style_set_color+0x150>)
  409b3c:	4798      	blx	r3
  409b3e:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  409b40:	4b15      	ldr	r3, [pc, #84]	; (409b98 <_lv_style_set_color+0x154>)
  409b42:	4798      	blx	r3
  409b44:	b1e8      	cbz	r0, 409b82 <_lv_style_set_color+0x13e>
    if(style == NULL) return;
  409b46:	2d00      	cmp	r5, #0
  409b48:	d0e7      	beq.n	409b1a <_lv_style_set_color+0xd6>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  409b4a:	1fa3      	subs	r3, r4, #6
  409b4c:	682a      	ldr	r2, [r5, #0]
  409b4e:	18d1      	adds	r1, r2, r3
  409b50:	f89d 0006 	ldrb.w	r0, [sp, #6]
  409b54:	54d0      	strb	r0, [r2, r3]
  409b56:	f89d 3007 	ldrb.w	r3, [sp, #7]
  409b5a:	704b      	strb	r3, [r1, #1]
  409b5c:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
  409b5e:	682a      	ldr	r2, [r5, #0]
  409b60:	18d1      	adds	r1, r2, r3
  409b62:	f89d 0004 	ldrb.w	r0, [sp, #4]
  409b66:	54d0      	strb	r0, [r2, r3]
  409b68:	f89d 3005 	ldrb.w	r3, [sp, #5]
  409b6c:	704b      	strb	r3, [r1, #1]
  409b6e:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  409b70:	682b      	ldr	r3, [r5, #0]
  409b72:	191a      	adds	r2, r3, r4
  409b74:	f89d 100e 	ldrb.w	r1, [sp, #14]
  409b78:	5519      	strb	r1, [r3, r4]
  409b7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
  409b7e:	7053      	strb	r3, [r2, #1]
  409b80:	e7cb      	b.n	409b1a <_lv_style_set_color+0xd6>
    LV_ASSERT_MEM(style->map);
  409b82:	682a      	ldr	r2, [r5, #0]
  409b84:	2300      	movs	r3, #0
  409b86:	4805      	ldr	r0, [pc, #20]	; (409b9c <_lv_style_set_color+0x158>)
  409b88:	4905      	ldr	r1, [pc, #20]	; (409ba0 <_lv_style_set_color+0x15c>)
  409b8a:	4788      	blx	r1
  409b8c:	e7fe      	b.n	409b8c <_lv_style_set_color+0x148>
  409b8e:	bf00      	nop
  409b90:	00409729 	.word	0x00409729
  409b94:	00415c61 	.word	0x00415c61
  409b98:	004150ef 	.word	0x004150ef
  409b9c:	00425a60 	.word	0x00425a60
  409ba0:	004150f9 	.word	0x004150f9

00409ba4 <_lv_style_set_opa>:
{
  409ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409ba8:	b085      	sub	sp, #20
  409baa:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  409bae:	6806      	ldr	r6, [r0, #0]
  409bb0:	2e00      	cmp	r6, #0
  409bb2:	d060      	beq.n	409c76 <_lv_style_set_opa+0xd2>
    uint8_t id_to_find = prop & 0xFF;
  409bb4:	fa5f fc81 	uxtb.w	ip, r1
    attr = (prop >> 8) & 0xFF;
  409bb8:	0a0f      	lsrs	r7, r1, #8
    prop_p[0] = style->map[idx];
  409bba:	7831      	ldrb	r1, [r6, #0]
  409bbc:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409bc0:	7874      	ldrb	r4, [r6, #1]
  409bc2:	f88d 400d 	strb.w	r4, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409bc6:	b2cb      	uxtb	r3, r1
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409bc8:	2bff      	cmp	r3, #255	; 0xff
  409bca:	d03c      	beq.n	409c46 <_lv_style_set_opa+0xa2>
  409bcc:	f04f 3eff 	mov.w	lr, #4294967295
  409bd0:	46f2      	mov	sl, lr
  409bd2:	2500      	movs	r5, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409bd4:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  409bd8:	ea6f 0909 	mvn.w	r9, r9
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409bdc:	f04f 0804 	mov.w	r8, #4
  409be0:	e026      	b.n	409c30 <_lv_style_set_opa+0x8c>
    prop_p[0] = style->map[idx];
  409be2:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409be6:	f88d 400d 	strb.w	r4, [sp, #13]
    return prop;
  409bea:	f8bd 400c 	ldrh.w	r4, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409bee:	0a24      	lsrs	r4, r4, #8
  409bf0:	b2e1      	uxtb	r1, r4
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409bf2:	ea87 0b01 	eor.w	fp, r7, r1
  409bf6:	f01b 0f7f 	tst.w	fp, #127	; 0x7f
  409bfa:	d00b      	beq.n	409c14 <_lv_style_set_opa+0x70>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409bfc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  409c00:	ea19 0f01 	tst.w	r9, r1
  409c04:	d116      	bne.n	409c34 <_lv_style_set_opa+0x90>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409c06:	4551      	cmp	r1, sl
  409c08:	dd14      	ble.n	409c34 <_lv_style_set_opa+0x90>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409c0a:	f004 0a7f 	and.w	sl, r4, #127	; 0x7f
                    id_guess = i;
  409c0e:	fa0f fe85 	sxth.w	lr, r5
  409c12:	e00f      	b.n	409c34 <_lv_style_set_opa+0x90>
                return i;
  409c14:	462b      	mov	r3, r5
  409c16:	e019      	b.n	409c4c <_lv_style_set_opa+0xa8>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409c18:	4643      	mov	r3, r8
    return idx + get_prop_size(prop_id);
  409c1a:	441d      	add	r5, r3
    prop_p[0] = style->map[idx];
  409c1c:	5d71      	ldrb	r1, [r6, r5]
  409c1e:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409c22:	1973      	adds	r3, r6, r5
  409c24:	785c      	ldrb	r4, [r3, #1]
  409c26:	f88d 400d 	strb.w	r4, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409c2a:	b2cb      	uxtb	r3, r1
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409c2c:	2bff      	cmp	r3, #255	; 0xff
  409c2e:	d00c      	beq.n	409c4a <_lv_style_set_opa+0xa6>
        if(prop_id == id_to_find) {
  409c30:	459c      	cmp	ip, r3
  409c32:	d0d6      	beq.n	409be2 <_lv_style_set_opa+0x3e>
    prop_id &= 0xF;
  409c34:	f003 030f 	and.w	r3, r3, #15
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409c38:	2b0b      	cmp	r3, #11
  409c3a:	d9ed      	bls.n	409c18 <_lv_style_set_opa+0x74>
    else size += sizeof(const void *);
  409c3c:	2b0e      	cmp	r3, #14
  409c3e:	bf34      	ite	cc
  409c40:	2303      	movcc	r3, #3
  409c42:	2306      	movcs	r3, #6
  409c44:	e7e9      	b.n	409c1a <_lv_style_set_opa+0x76>
    int16_t id_guess = -1;
  409c46:	f04f 3eff 	mov.w	lr, #4294967295
    return id_guess;
  409c4a:	4673      	mov	r3, lr
    if(id >= 0) {
  409c4c:	2b00      	cmp	r3, #0
  409c4e:	db12      	blt.n	409c76 <_lv_style_set_opa+0xd2>
    prop_p[0] = style->map[idx];
  409c50:	5cf1      	ldrb	r1, [r6, r3]
  409c52:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409c56:	18f1      	adds	r1, r6, r3
  409c58:	7849      	ldrb	r1, [r1, #1]
  409c5a:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409c5e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409c62:	ea87 2711 	eor.w	r7, r7, r1, lsr #8
  409c66:	f017 0f7f 	tst.w	r7, #127	; 0x7f
  409c6a:	d104      	bne.n	409c76 <_lv_style_set_opa+0xd2>
  409c6c:	4433      	add	r3, r6
  409c6e:	709a      	strb	r2, [r3, #2]
}
  409c70:	b005      	add	sp, #20
  409c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409c76:	4616      	mov	r6, r2
  409c78:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  409c7a:	23ff      	movs	r3, #255	; 0xff
  409c7c:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  409c80:	4b16      	ldr	r3, [pc, #88]	; (409cdc <_lv_style_set_opa+0x138>)
  409c82:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  409c84:	2800      	cmp	r0, #0
  409c86:	bf08      	it	eq
  409c88:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
  409c8a:	1cc4      	adds	r4, r0, #3
    style_resize(style, size);
  409c8c:	b2a4      	uxth	r4, r4
    style->map = lv_mem_realloc(style->map, sz);
  409c8e:	4621      	mov	r1, r4
  409c90:	6828      	ldr	r0, [r5, #0]
  409c92:	4b13      	ldr	r3, [pc, #76]	; (409ce0 <_lv_style_set_opa+0x13c>)
  409c94:	4798      	blx	r3
  409c96:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  409c98:	4b12      	ldr	r3, [pc, #72]	; (409ce4 <_lv_style_set_opa+0x140>)
  409c9a:	4798      	blx	r3
  409c9c:	b1c0      	cbz	r0, 409cd0 <_lv_style_set_opa+0x12c>
    if(style == NULL) return;
  409c9e:	2d00      	cmp	r5, #0
  409ca0:	d0e6      	beq.n	409c70 <_lv_style_set_opa+0xcc>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  409ca2:	1f63      	subs	r3, r4, #5
  409ca4:	682a      	ldr	r2, [r5, #0]
  409ca6:	18d1      	adds	r1, r2, r3
  409ca8:	f89d 0006 	ldrb.w	r0, [sp, #6]
  409cac:	54d0      	strb	r0, [r2, r3]
  409cae:	f89d 3007 	ldrb.w	r3, [sp, #7]
  409cb2:	704b      	strb	r3, [r1, #1]
  409cb4:	682b      	ldr	r3, [r5, #0]
  409cb6:	4423      	add	r3, r4
  409cb8:	f803 6c03 	strb.w	r6, [r3, #-3]
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
  409cbc:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  409cbe:	682b      	ldr	r3, [r5, #0]
  409cc0:	191a      	adds	r2, r3, r4
  409cc2:	f89d 100e 	ldrb.w	r1, [sp, #14]
  409cc6:	5519      	strb	r1, [r3, r4]
  409cc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
  409ccc:	7053      	strb	r3, [r2, #1]
  409cce:	e7cf      	b.n	409c70 <_lv_style_set_opa+0xcc>
    LV_ASSERT_MEM(style->map);
  409cd0:	682a      	ldr	r2, [r5, #0]
  409cd2:	2300      	movs	r3, #0
  409cd4:	4804      	ldr	r0, [pc, #16]	; (409ce8 <_lv_style_set_opa+0x144>)
  409cd6:	4905      	ldr	r1, [pc, #20]	; (409cec <_lv_style_set_opa+0x148>)
  409cd8:	4788      	blx	r1
  409cda:	e7fe      	b.n	409cda <_lv_style_set_opa+0x136>
  409cdc:	00409729 	.word	0x00409729
  409ce0:	00415c61 	.word	0x00415c61
  409ce4:	004150ef 	.word	0x004150ef
  409ce8:	00425a60 	.word	0x00425a60
  409cec:	004150f9 	.word	0x004150f9

00409cf0 <_lv_style_set_ptr>:
{
  409cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409cf4:	b084      	sub	sp, #16
  409cf6:	9200      	str	r2, [sp, #0]
  409cf8:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  409cfc:	6805      	ldr	r5, [r0, #0]
  409cfe:	2d00      	cmp	r5, #0
  409d00:	d069      	beq.n	409dd6 <_lv_style_set_ptr+0xe6>
    uint8_t id_to_find = prop & 0xFF;
  409d02:	fa5f fe81 	uxtb.w	lr, r1
    attr = (prop >> 8) & 0xFF;
  409d06:	0a0f      	lsrs	r7, r1, #8
    prop_p[0] = style->map[idx];
  409d08:	782a      	ldrb	r2, [r5, #0]
  409d0a:	f88d 200c 	strb.w	r2, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409d0e:	7869      	ldrb	r1, [r5, #1]
  409d10:	f88d 100d 	strb.w	r1, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409d14:	b2d3      	uxtb	r3, r2
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409d16:	2bff      	cmp	r3, #255	; 0xff
  409d18:	d039      	beq.n	409d8e <_lv_style_set_ptr+0x9e>
  409d1a:	f04f 36ff 	mov.w	r6, #4294967295
  409d1e:	46b1      	mov	r9, r6
  409d20:	2400      	movs	r4, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409d22:	f007 087f 	and.w	r8, r7, #127	; 0x7f
  409d26:	ea6f 0808 	mvn.w	r8, r8
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409d2a:	f04f 0c04 	mov.w	ip, #4
  409d2e:	e023      	b.n	409d78 <_lv_style_set_ptr+0x88>
    prop_p[0] = style->map[idx];
  409d30:	f88d 200c 	strb.w	r2, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409d34:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409d38:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409d3c:	0a09      	lsrs	r1, r1, #8
  409d3e:	b2ca      	uxtb	r2, r1
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409d40:	ea87 0a02 	eor.w	sl, r7, r2
  409d44:	f01a 0f7f 	tst.w	sl, #127	; 0x7f
  409d48:	d024      	beq.n	409d94 <_lv_style_set_ptr+0xa4>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409d4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  409d4e:	ea18 0f02 	tst.w	r8, r2
  409d52:	d113      	bne.n	409d7c <_lv_style_set_ptr+0x8c>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409d54:	454a      	cmp	r2, r9
  409d56:	dd11      	ble.n	409d7c <_lv_style_set_ptr+0x8c>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409d58:	f001 097f 	and.w	r9, r1, #127	; 0x7f
                    id_guess = i;
  409d5c:	b226      	sxth	r6, r4
  409d5e:	e00d      	b.n	409d7c <_lv_style_set_ptr+0x8c>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409d60:	4663      	mov	r3, ip
    return idx + get_prop_size(prop_id);
  409d62:	441c      	add	r4, r3
    prop_p[0] = style->map[idx];
  409d64:	5d2a      	ldrb	r2, [r5, r4]
  409d66:	f88d 200c 	strb.w	r2, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409d6a:	192b      	adds	r3, r5, r4
  409d6c:	7859      	ldrb	r1, [r3, #1]
  409d6e:	f88d 100d 	strb.w	r1, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409d72:	b2d3      	uxtb	r3, r2
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409d74:	2bff      	cmp	r3, #255	; 0xff
  409d76:	d00c      	beq.n	409d92 <_lv_style_set_ptr+0xa2>
        if(prop_id == id_to_find) {
  409d78:	459e      	cmp	lr, r3
  409d7a:	d0d9      	beq.n	409d30 <_lv_style_set_ptr+0x40>
    prop_id &= 0xF;
  409d7c:	f003 030f 	and.w	r3, r3, #15
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409d80:	2b0b      	cmp	r3, #11
  409d82:	d9ed      	bls.n	409d60 <_lv_style_set_ptr+0x70>
    else size += sizeof(const void *);
  409d84:	2b0e      	cmp	r3, #14
  409d86:	bf34      	ite	cc
  409d88:	2303      	movcc	r3, #3
  409d8a:	2306      	movcs	r3, #6
  409d8c:	e7e9      	b.n	409d62 <_lv_style_set_ptr+0x72>
    int16_t id_guess = -1;
  409d8e:	f04f 36ff 	mov.w	r6, #4294967295
    return id_guess;
  409d92:	4634      	mov	r4, r6
    if(id >= 0) {
  409d94:	2c00      	cmp	r4, #0
  409d96:	db1e      	blt.n	409dd6 <_lv_style_set_ptr+0xe6>
    prop_p[0] = style->map[idx];
  409d98:	5d2b      	ldrb	r3, [r5, r4]
  409d9a:	f88d 300c 	strb.w	r3, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409d9e:	192b      	adds	r3, r5, r4
  409da0:	785b      	ldrb	r3, [r3, #1]
  409da2:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409da6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409daa:	ea87 2713 	eor.w	r7, r7, r3, lsr #8
  409dae:	f017 0f7f 	tst.w	r7, #127	; 0x7f
  409db2:	d110      	bne.n	409dd6 <_lv_style_set_ptr+0xe6>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
  409db4:	3402      	adds	r4, #2
  409db6:	192b      	adds	r3, r5, r4
  409db8:	f89d 2000 	ldrb.w	r2, [sp]
  409dbc:	552a      	strb	r2, [r5, r4]
  409dbe:	f89d 2001 	ldrb.w	r2, [sp, #1]
  409dc2:	705a      	strb	r2, [r3, #1]
  409dc4:	f89d 2002 	ldrb.w	r2, [sp, #2]
  409dc8:	709a      	strb	r2, [r3, #2]
  409dca:	f89d 2003 	ldrb.w	r2, [sp, #3]
  409dce:	70da      	strb	r2, [r3, #3]
}
  409dd0:	b004      	add	sp, #16
  409dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409dd6:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  409dd8:	23ff      	movs	r3, #255	; 0xff
  409dda:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  409dde:	4b1d      	ldr	r3, [pc, #116]	; (409e54 <_lv_style_set_ptr+0x164>)
  409de0:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  409de2:	2800      	cmp	r0, #0
  409de4:	bf08      	it	eq
  409de6:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(const void *);
  409de8:	1d84      	adds	r4, r0, #6
    style_resize(style, size);
  409dea:	b2a4      	uxth	r4, r4
    style->map = lv_mem_realloc(style->map, sz);
  409dec:	4621      	mov	r1, r4
  409dee:	6828      	ldr	r0, [r5, #0]
  409df0:	4b19      	ldr	r3, [pc, #100]	; (409e58 <_lv_style_set_ptr+0x168>)
  409df2:	4798      	blx	r3
  409df4:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  409df6:	4b19      	ldr	r3, [pc, #100]	; (409e5c <_lv_style_set_ptr+0x16c>)
  409df8:	4798      	blx	r3
  409dfa:	b320      	cbz	r0, 409e46 <_lv_style_set_ptr+0x156>
    if(style == NULL) return;
  409dfc:	2d00      	cmp	r5, #0
  409dfe:	d0e7      	beq.n	409dd0 <_lv_style_set_ptr+0xe0>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  409e00:	f1a4 0308 	sub.w	r3, r4, #8
  409e04:	682a      	ldr	r2, [r5, #0]
  409e06:	18d1      	adds	r1, r2, r3
  409e08:	f89d 0006 	ldrb.w	r0, [sp, #6]
  409e0c:	54d0      	strb	r0, [r2, r3]
  409e0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  409e12:	704b      	strb	r3, [r1, #1]
  409e14:	1fa2      	subs	r2, r4, #6
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
  409e16:	6829      	ldr	r1, [r5, #0]
  409e18:	188b      	adds	r3, r1, r2
  409e1a:	f89d 0000 	ldrb.w	r0, [sp]
  409e1e:	5488      	strb	r0, [r1, r2]
  409e20:	f89d 2001 	ldrb.w	r2, [sp, #1]
  409e24:	705a      	strb	r2, [r3, #1]
  409e26:	f89d 2002 	ldrb.w	r2, [sp, #2]
  409e2a:	709a      	strb	r2, [r3, #2]
  409e2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
  409e30:	70da      	strb	r2, [r3, #3]
  409e32:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  409e34:	682b      	ldr	r3, [r5, #0]
  409e36:	191a      	adds	r2, r3, r4
  409e38:	f89d 100e 	ldrb.w	r1, [sp, #14]
  409e3c:	5519      	strb	r1, [r3, r4]
  409e3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
  409e42:	7053      	strb	r3, [r2, #1]
  409e44:	e7c4      	b.n	409dd0 <_lv_style_set_ptr+0xe0>
    LV_ASSERT_MEM(style->map);
  409e46:	682a      	ldr	r2, [r5, #0]
  409e48:	2300      	movs	r3, #0
  409e4a:	4805      	ldr	r0, [pc, #20]	; (409e60 <_lv_style_set_ptr+0x170>)
  409e4c:	4905      	ldr	r1, [pc, #20]	; (409e64 <_lv_style_set_ptr+0x174>)
  409e4e:	4788      	blx	r1
  409e50:	e7fe      	b.n	409e50 <_lv_style_set_ptr+0x160>
  409e52:	bf00      	nop
  409e54:	00409729 	.word	0x00409729
  409e58:	00415c61 	.word	0x00415c61
  409e5c:	004150ef 	.word	0x004150ef
  409e60:	00425a60 	.word	0x00425a60
  409e64:	004150f9 	.word	0x004150f9

00409e68 <_lv_style_get_int>:
    if(style == NULL) return -1;
  409e68:	2800      	cmp	r0, #0
  409e6a:	d06e      	beq.n	409f4a <_lv_style_get_int+0xe2>
{
  409e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409e70:	b083      	sub	sp, #12
  409e72:	4682      	mov	sl, r0
    if(style->map == NULL) return -1;
  409e74:	6804      	ldr	r4, [r0, #0]
  409e76:	2c00      	cmp	r4, #0
  409e78:	d06a      	beq.n	409f50 <_lv_style_get_int+0xe8>
    uint8_t id_to_find = prop & 0xFF;
  409e7a:	b2cf      	uxtb	r7, r1
    attr = (prop >> 8) & 0xFF;
  409e7c:	0a09      	lsrs	r1, r1, #8
  409e7e:	fa5f f981 	uxtb.w	r9, r1
    prop_p[0] = style->map[idx];
  409e82:	7825      	ldrb	r5, [r4, #0]
  409e84:	f88d 5006 	strb.w	r5, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409e88:	7866      	ldrb	r6, [r4, #1]
  409e8a:	f88d 6007 	strb.w	r6, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  409e8e:	b2eb      	uxtb	r3, r5
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409e90:	2bff      	cmp	r3, #255	; 0xff
  409e92:	d057      	beq.n	409f44 <_lv_style_get_int+0xdc>
  409e94:	f04f 3cff 	mov.w	ip, #4294967295
  409e98:	46e3      	mov	fp, ip
  409e9a:	2000      	movs	r0, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409e9c:	f009 087f 	and.w	r8, r9, #127	; 0x7f
  409ea0:	ea6f 0808 	mvn.w	r8, r8
  409ea4:	e043      	b.n	409f2e <_lv_style_get_int+0xc6>
    prop_p[0] = style->map[idx];
  409ea6:	f88d 5006 	strb.w	r5, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409eaa:	f88d 6007 	strb.w	r6, [sp, #7]
    return prop;
  409eae:	f8bd 6006 	ldrh.w	r6, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409eb2:	0a36      	lsrs	r6, r6, #8
  409eb4:	b2f5      	uxtb	r5, r6
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409eb6:	ea89 0e05 	eor.w	lr, r9, r5
  409eba:	f01e 0f7f 	tst.w	lr, #127	; 0x7f
  409ebe:	d00b      	beq.n	409ed8 <_lv_style_get_int+0x70>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409ec0:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  409ec4:	ea18 0f05 	tst.w	r8, r5
  409ec8:	d133      	bne.n	409f32 <_lv_style_get_int+0xca>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409eca:	455d      	cmp	r5, fp
  409ecc:	dd31      	ble.n	409f32 <_lv_style_get_int+0xca>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409ece:	f006 0b7f 	and.w	fp, r6, #127	; 0x7f
                    id_guess = i;
  409ed2:	fa0f fc80 	sxth.w	ip, r0
  409ed6:	e02c      	b.n	409f32 <_lv_style_get_int+0xca>
                return i;
  409ed8:	4684      	mov	ip, r0
    if(id < 0) {
  409eda:	f1bc 0f00 	cmp.w	ip, #0
  409ede:	db3a      	blt.n	409f56 <_lv_style_get_int+0xee>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
  409ee0:	f10c 0302 	add.w	r3, ip, #2
  409ee4:	18e0      	adds	r0, r4, r3
  409ee6:	5ce3      	ldrb	r3, [r4, r3]
  409ee8:	7013      	strb	r3, [r2, #0]
  409eea:	7843      	ldrb	r3, [r0, #1]
  409eec:	7053      	strb	r3, [r2, #1]
    prop_p[0] = style->map[idx];
  409eee:	f8da 3000 	ldr.w	r3, [sl]
  409ef2:	f813 200c 	ldrb.w	r2, [r3, ip]
  409ef6:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409efa:	449c      	add	ip, r3
  409efc:	f89c 3001 	ldrb.w	r3, [ip, #1]
  409f00:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  409f04:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  409f08:	ea01 2110 	and.w	r1, r1, r0, lsr #8
  409f0c:	f001 007f 	and.w	r0, r1, #127	; 0x7f
}
  409f10:	b003      	add	sp, #12
  409f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409f16:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409f18:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  409f1a:	5c25      	ldrb	r5, [r4, r0]
  409f1c:	f88d 5006 	strb.w	r5, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409f20:	1823      	adds	r3, r4, r0
  409f22:	785e      	ldrb	r6, [r3, #1]
  409f24:	f88d 6007 	strb.w	r6, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  409f28:	b2eb      	uxtb	r3, r5
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409f2a:	2bff      	cmp	r3, #255	; 0xff
  409f2c:	d0d5      	beq.n	409eda <_lv_style_get_int+0x72>
        if(prop_id == id_to_find) {
  409f2e:	429f      	cmp	r7, r3
  409f30:	d0b9      	beq.n	409ea6 <_lv_style_get_int+0x3e>
    prop_id &= 0xF;
  409f32:	f003 030f 	and.w	r3, r3, #15
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409f36:	2b0b      	cmp	r3, #11
  409f38:	d9ed      	bls.n	409f16 <_lv_style_get_int+0xae>
    else size += sizeof(const void *);
  409f3a:	2b0e      	cmp	r3, #14
  409f3c:	bf34      	ite	cc
  409f3e:	2303      	movcc	r3, #3
  409f40:	2306      	movcs	r3, #6
  409f42:	e7e9      	b.n	409f18 <_lv_style_get_int+0xb0>
    int16_t id_guess = -1;
  409f44:	f04f 3cff 	mov.w	ip, #4294967295
  409f48:	e7c7      	b.n	409eda <_lv_style_get_int+0x72>
    if(style == NULL) return -1;
  409f4a:	f04f 30ff 	mov.w	r0, #4294967295
  409f4e:	4770      	bx	lr
    if(style->map == NULL) return -1;
  409f50:	f04f 30ff 	mov.w	r0, #4294967295
  409f54:	e7dc      	b.n	409f10 <_lv_style_get_int+0xa8>
        return -1;
  409f56:	f04f 30ff 	mov.w	r0, #4294967295
  409f5a:	e7d9      	b.n	409f10 <_lv_style_get_int+0xa8>

00409f5c <_lv_style_get_opa>:
    if(style == NULL) return -1;
  409f5c:	2800      	cmp	r0, #0
  409f5e:	d06a      	beq.n	40a036 <_lv_style_get_opa+0xda>
{
  409f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409f64:	b083      	sub	sp, #12
  409f66:	4682      	mov	sl, r0
    if(style->map == NULL) return -1;
  409f68:	6804      	ldr	r4, [r0, #0]
  409f6a:	2c00      	cmp	r4, #0
  409f6c:	d066      	beq.n	40a03c <_lv_style_get_opa+0xe0>
    uint8_t id_to_find = prop & 0xFF;
  409f6e:	b2cf      	uxtb	r7, r1
    attr = (prop >> 8) & 0xFF;
  409f70:	0a09      	lsrs	r1, r1, #8
  409f72:	fa5f f981 	uxtb.w	r9, r1
    prop_p[0] = style->map[idx];
  409f76:	7825      	ldrb	r5, [r4, #0]
  409f78:	f88d 5006 	strb.w	r5, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409f7c:	7866      	ldrb	r6, [r4, #1]
  409f7e:	f88d 6007 	strb.w	r6, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  409f82:	b2eb      	uxtb	r3, r5
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409f84:	2bff      	cmp	r3, #255	; 0xff
  409f86:	d053      	beq.n	40a030 <_lv_style_get_opa+0xd4>
  409f88:	f04f 3cff 	mov.w	ip, #4294967295
  409f8c:	46e3      	mov	fp, ip
  409f8e:	2000      	movs	r0, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409f90:	f009 087f 	and.w	r8, r9, #127	; 0x7f
  409f94:	ea6f 0808 	mvn.w	r8, r8
  409f98:	e03f      	b.n	40a01a <_lv_style_get_opa+0xbe>
    prop_p[0] = style->map[idx];
  409f9a:	f88d 5006 	strb.w	r5, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409f9e:	f88d 6007 	strb.w	r6, [sp, #7]
    return prop;
  409fa2:	f8bd 6006 	ldrh.w	r6, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409fa6:	0a36      	lsrs	r6, r6, #8
  409fa8:	b2f5      	uxtb	r5, r6
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409faa:	ea89 0e05 	eor.w	lr, r9, r5
  409fae:	f01e 0f7f 	tst.w	lr, #127	; 0x7f
  409fb2:	d00b      	beq.n	409fcc <_lv_style_get_opa+0x70>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409fb4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  409fb8:	ea18 0f05 	tst.w	r8, r5
  409fbc:	d12f      	bne.n	40a01e <_lv_style_get_opa+0xc2>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409fbe:	455d      	cmp	r5, fp
  409fc0:	dd2d      	ble.n	40a01e <_lv_style_get_opa+0xc2>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409fc2:	f006 0b7f 	and.w	fp, r6, #127	; 0x7f
                    id_guess = i;
  409fc6:	fa0f fc80 	sxth.w	ip, r0
  409fca:	e028      	b.n	40a01e <_lv_style_get_opa+0xc2>
                return i;
  409fcc:	4684      	mov	ip, r0
    if(id < 0) {
  409fce:	f1bc 0f00 	cmp.w	ip, #0
  409fd2:	db36      	blt.n	40a042 <_lv_style_get_opa+0xe6>
  409fd4:	4464      	add	r4, ip
  409fd6:	78a3      	ldrb	r3, [r4, #2]
  409fd8:	7013      	strb	r3, [r2, #0]
    prop_p[0] = style->map[idx];
  409fda:	f8da 3000 	ldr.w	r3, [sl]
  409fde:	f813 200c 	ldrb.w	r2, [r3, ip]
  409fe2:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409fe6:	449c      	add	ip, r3
  409fe8:	f89c 3001 	ldrb.w	r3, [ip, #1]
  409fec:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  409ff0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  409ff4:	ea01 2110 	and.w	r1, r1, r0, lsr #8
  409ff8:	f001 007f 	and.w	r0, r1, #127	; 0x7f
}
  409ffc:	b003      	add	sp, #12
  409ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a002:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a004:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a006:	5c25      	ldrb	r5, [r4, r0]
  40a008:	f88d 5006 	strb.w	r5, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a00c:	1823      	adds	r3, r4, r0
  40a00e:	785e      	ldrb	r6, [r3, #1]
  40a010:	f88d 6007 	strb.w	r6, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a014:	b2eb      	uxtb	r3, r5
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a016:	2bff      	cmp	r3, #255	; 0xff
  40a018:	d0d9      	beq.n	409fce <_lv_style_get_opa+0x72>
        if(prop_id == id_to_find) {
  40a01a:	429f      	cmp	r7, r3
  40a01c:	d0bd      	beq.n	409f9a <_lv_style_get_opa+0x3e>
    prop_id &= 0xF;
  40a01e:	f003 030f 	and.w	r3, r3, #15
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a022:	2b0b      	cmp	r3, #11
  40a024:	d9ed      	bls.n	40a002 <_lv_style_get_opa+0xa6>
    else size += sizeof(const void *);
  40a026:	2b0e      	cmp	r3, #14
  40a028:	bf34      	ite	cc
  40a02a:	2303      	movcc	r3, #3
  40a02c:	2306      	movcs	r3, #6
  40a02e:	e7e9      	b.n	40a004 <_lv_style_get_opa+0xa8>
    int16_t id_guess = -1;
  40a030:	f04f 3cff 	mov.w	ip, #4294967295
  40a034:	e7cb      	b.n	409fce <_lv_style_get_opa+0x72>
    if(style == NULL) return -1;
  40a036:	f04f 30ff 	mov.w	r0, #4294967295
  40a03a:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a03c:	f04f 30ff 	mov.w	r0, #4294967295
  40a040:	e7dc      	b.n	409ffc <_lv_style_get_opa+0xa0>
        return -1;
  40a042:	f04f 30ff 	mov.w	r0, #4294967295
  40a046:	e7d9      	b.n	409ffc <_lv_style_get_opa+0xa0>

0040a048 <_lv_style_get_color>:
    if(style == NULL) return -1;
  40a048:	2800      	cmp	r0, #0
  40a04a:	d06e      	beq.n	40a12a <_lv_style_get_color+0xe2>
{
  40a04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a050:	b083      	sub	sp, #12
  40a052:	4682      	mov	sl, r0
    if(style->map == NULL) return -1;
  40a054:	6804      	ldr	r4, [r0, #0]
  40a056:	2c00      	cmp	r4, #0
  40a058:	d06a      	beq.n	40a130 <_lv_style_get_color+0xe8>
    uint8_t id_to_find = prop & 0xFF;
  40a05a:	b2cf      	uxtb	r7, r1
    attr = (prop >> 8) & 0xFF;
  40a05c:	0a09      	lsrs	r1, r1, #8
  40a05e:	fa5f f981 	uxtb.w	r9, r1
    prop_p[0] = style->map[idx];
  40a062:	7825      	ldrb	r5, [r4, #0]
  40a064:	f88d 5006 	strb.w	r5, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a068:	7866      	ldrb	r6, [r4, #1]
  40a06a:	f88d 6007 	strb.w	r6, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a06e:	b2eb      	uxtb	r3, r5
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a070:	2bff      	cmp	r3, #255	; 0xff
  40a072:	d057      	beq.n	40a124 <_lv_style_get_color+0xdc>
  40a074:	f04f 3cff 	mov.w	ip, #4294967295
  40a078:	46e3      	mov	fp, ip
  40a07a:	2000      	movs	r0, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a07c:	f009 087f 	and.w	r8, r9, #127	; 0x7f
  40a080:	ea6f 0808 	mvn.w	r8, r8
  40a084:	e043      	b.n	40a10e <_lv_style_get_color+0xc6>
    prop_p[0] = style->map[idx];
  40a086:	f88d 5006 	strb.w	r5, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a08a:	f88d 6007 	strb.w	r6, [sp, #7]
    return prop;
  40a08e:	f8bd 6006 	ldrh.w	r6, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a092:	0a36      	lsrs	r6, r6, #8
  40a094:	b2f5      	uxtb	r5, r6
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a096:	ea89 0e05 	eor.w	lr, r9, r5
  40a09a:	f01e 0f7f 	tst.w	lr, #127	; 0x7f
  40a09e:	d00b      	beq.n	40a0b8 <_lv_style_get_color+0x70>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a0a0:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  40a0a4:	ea18 0f05 	tst.w	r8, r5
  40a0a8:	d133      	bne.n	40a112 <_lv_style_get_color+0xca>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a0aa:	455d      	cmp	r5, fp
  40a0ac:	dd31      	ble.n	40a112 <_lv_style_get_color+0xca>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a0ae:	f006 0b7f 	and.w	fp, r6, #127	; 0x7f
                    id_guess = i;
  40a0b2:	fa0f fc80 	sxth.w	ip, r0
  40a0b6:	e02c      	b.n	40a112 <_lv_style_get_color+0xca>
                return i;
  40a0b8:	4684      	mov	ip, r0
    if(id < 0) {
  40a0ba:	f1bc 0f00 	cmp.w	ip, #0
  40a0be:	db3a      	blt.n	40a136 <_lv_style_get_color+0xee>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
  40a0c0:	f10c 0302 	add.w	r3, ip, #2
  40a0c4:	18e0      	adds	r0, r4, r3
  40a0c6:	5ce3      	ldrb	r3, [r4, r3]
  40a0c8:	7013      	strb	r3, [r2, #0]
  40a0ca:	7843      	ldrb	r3, [r0, #1]
  40a0cc:	7053      	strb	r3, [r2, #1]
    prop_p[0] = style->map[idx];
  40a0ce:	f8da 3000 	ldr.w	r3, [sl]
  40a0d2:	f813 200c 	ldrb.w	r2, [r3, ip]
  40a0d6:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a0da:	449c      	add	ip, r3
  40a0dc:	f89c 3001 	ldrb.w	r3, [ip, #1]
  40a0e0:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a0e4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a0e8:	ea01 2110 	and.w	r1, r1, r0, lsr #8
  40a0ec:	f001 007f 	and.w	r0, r1, #127	; 0x7f
}
  40a0f0:	b003      	add	sp, #12
  40a0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a0f6:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a0f8:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a0fa:	5c25      	ldrb	r5, [r4, r0]
  40a0fc:	f88d 5006 	strb.w	r5, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a100:	1823      	adds	r3, r4, r0
  40a102:	785e      	ldrb	r6, [r3, #1]
  40a104:	f88d 6007 	strb.w	r6, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a108:	b2eb      	uxtb	r3, r5
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a10a:	2bff      	cmp	r3, #255	; 0xff
  40a10c:	d0d5      	beq.n	40a0ba <_lv_style_get_color+0x72>
        if(prop_id == id_to_find) {
  40a10e:	429f      	cmp	r7, r3
  40a110:	d0b9      	beq.n	40a086 <_lv_style_get_color+0x3e>
    prop_id &= 0xF;
  40a112:	f003 030f 	and.w	r3, r3, #15
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a116:	2b0b      	cmp	r3, #11
  40a118:	d9ed      	bls.n	40a0f6 <_lv_style_get_color+0xae>
    else size += sizeof(const void *);
  40a11a:	2b0e      	cmp	r3, #14
  40a11c:	bf34      	ite	cc
  40a11e:	2303      	movcc	r3, #3
  40a120:	2306      	movcs	r3, #6
  40a122:	e7e9      	b.n	40a0f8 <_lv_style_get_color+0xb0>
    int16_t id_guess = -1;
  40a124:	f04f 3cff 	mov.w	ip, #4294967295
  40a128:	e7c7      	b.n	40a0ba <_lv_style_get_color+0x72>
    if(style == NULL) return -1;
  40a12a:	f04f 30ff 	mov.w	r0, #4294967295
  40a12e:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a130:	f04f 30ff 	mov.w	r0, #4294967295
  40a134:	e7dc      	b.n	40a0f0 <_lv_style_get_color+0xa8>
        return -1;
  40a136:	f04f 30ff 	mov.w	r0, #4294967295
  40a13a:	e7d9      	b.n	40a0f0 <_lv_style_get_color+0xa8>

0040a13c <_lv_style_get_ptr>:
    if(style == NULL) return -1;
  40a13c:	2800      	cmp	r0, #0
  40a13e:	d070      	beq.n	40a222 <_lv_style_get_ptr+0xe6>
{
  40a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a144:	b083      	sub	sp, #12
  40a146:	4682      	mov	sl, r0
    if(style->map == NULL) return -1;
  40a148:	6804      	ldr	r4, [r0, #0]
  40a14a:	2c00      	cmp	r4, #0
  40a14c:	d06c      	beq.n	40a228 <_lv_style_get_ptr+0xec>
    uint8_t id_to_find = prop & 0xFF;
  40a14e:	b2cf      	uxtb	r7, r1
    attr = (prop >> 8) & 0xFF;
  40a150:	0a09      	lsrs	r1, r1, #8
  40a152:	fa5f f981 	uxtb.w	r9, r1
    prop_p[0] = style->map[idx];
  40a156:	7825      	ldrb	r5, [r4, #0]
  40a158:	f88d 5006 	strb.w	r5, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a15c:	7866      	ldrb	r6, [r4, #1]
  40a15e:	f88d 6007 	strb.w	r6, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a162:	b2eb      	uxtb	r3, r5
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a164:	2bff      	cmp	r3, #255	; 0xff
  40a166:	d059      	beq.n	40a21c <_lv_style_get_ptr+0xe0>
  40a168:	f04f 3eff 	mov.w	lr, #4294967295
  40a16c:	46f3      	mov	fp, lr
  40a16e:	2000      	movs	r0, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a170:	f009 087f 	and.w	r8, r9, #127	; 0x7f
  40a174:	ea6f 0808 	mvn.w	r8, r8
  40a178:	e045      	b.n	40a206 <_lv_style_get_ptr+0xca>
    prop_p[0] = style->map[idx];
  40a17a:	f88d 5006 	strb.w	r5, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a17e:	f88d 6007 	strb.w	r6, [sp, #7]
    return prop;
  40a182:	f8bd 6006 	ldrh.w	r6, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a186:	0a36      	lsrs	r6, r6, #8
  40a188:	b2f5      	uxtb	r5, r6
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a18a:	ea89 0c05 	eor.w	ip, r9, r5
  40a18e:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a192:	d00b      	beq.n	40a1ac <_lv_style_get_ptr+0x70>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a194:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  40a198:	ea18 0f05 	tst.w	r8, r5
  40a19c:	d135      	bne.n	40a20a <_lv_style_get_ptr+0xce>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a19e:	455d      	cmp	r5, fp
  40a1a0:	dd33      	ble.n	40a20a <_lv_style_get_ptr+0xce>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a1a2:	f006 0b7f 	and.w	fp, r6, #127	; 0x7f
                    id_guess = i;
  40a1a6:	fa0f fe80 	sxth.w	lr, r0
  40a1aa:	e02e      	b.n	40a20a <_lv_style_get_ptr+0xce>
                return i;
  40a1ac:	4686      	mov	lr, r0
    if(id < 0) {
  40a1ae:	f1be 0f00 	cmp.w	lr, #0
  40a1b2:	db3c      	blt.n	40a22e <_lv_style_get_ptr+0xf2>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
  40a1b4:	4675      	mov	r5, lr
  40a1b6:	f10e 0e01 	add.w	lr, lr, #1
  40a1ba:	4474      	add	r4, lr
  40a1bc:	1d10      	adds	r0, r2, #4
  40a1be:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40a1c2:	f802 3b01 	strb.w	r3, [r2], #1
    while(len) {
  40a1c6:	4290      	cmp	r0, r2
  40a1c8:	d1f9      	bne.n	40a1be <_lv_style_get_ptr+0x82>
    prop_p[0] = style->map[idx];
  40a1ca:	f8da 3000 	ldr.w	r3, [sl]
  40a1ce:	5d5a      	ldrb	r2, [r3, r5]
  40a1d0:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a1d4:	442b      	add	r3, r5
  40a1d6:	785b      	ldrb	r3, [r3, #1]
  40a1d8:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a1dc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a1e0:	ea01 2110 	and.w	r1, r1, r0, lsr #8
  40a1e4:	f001 007f 	and.w	r0, r1, #127	; 0x7f
}
  40a1e8:	b003      	add	sp, #12
  40a1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a1ee:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a1f0:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a1f2:	5c25      	ldrb	r5, [r4, r0]
  40a1f4:	f88d 5006 	strb.w	r5, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a1f8:	1823      	adds	r3, r4, r0
  40a1fa:	785e      	ldrb	r6, [r3, #1]
  40a1fc:	f88d 6007 	strb.w	r6, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a200:	b2eb      	uxtb	r3, r5
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a202:	2bff      	cmp	r3, #255	; 0xff
  40a204:	d0d3      	beq.n	40a1ae <_lv_style_get_ptr+0x72>
        if(prop_id == id_to_find) {
  40a206:	429f      	cmp	r7, r3
  40a208:	d0b7      	beq.n	40a17a <_lv_style_get_ptr+0x3e>
    prop_id &= 0xF;
  40a20a:	f003 030f 	and.w	r3, r3, #15
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a20e:	2b0b      	cmp	r3, #11
  40a210:	d9ed      	bls.n	40a1ee <_lv_style_get_ptr+0xb2>
    else size += sizeof(const void *);
  40a212:	2b0e      	cmp	r3, #14
  40a214:	bf34      	ite	cc
  40a216:	2303      	movcc	r3, #3
  40a218:	2306      	movcs	r3, #6
  40a21a:	e7e9      	b.n	40a1f0 <_lv_style_get_ptr+0xb4>
    int16_t id_guess = -1;
  40a21c:	f04f 3eff 	mov.w	lr, #4294967295
  40a220:	e7c5      	b.n	40a1ae <_lv_style_get_ptr+0x72>
    if(style == NULL) return -1;
  40a222:	f04f 30ff 	mov.w	r0, #4294967295
  40a226:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a228:	f04f 30ff 	mov.w	r0, #4294967295
  40a22c:	e7dc      	b.n	40a1e8 <_lv_style_get_ptr+0xac>
        return -1;
  40a22e:	f04f 30ff 	mov.w	r0, #4294967295
  40a232:	e7d9      	b.n	40a1e8 <_lv_style_get_ptr+0xac>

0040a234 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
  40a234:	7903      	ldrb	r3, [r0, #4]
  40a236:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a23a:	d006      	beq.n	40a24a <lv_style_list_get_local_style+0x16>
    if(list->has_trans) return list->style_list[1];
  40a23c:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a240:	6803      	ldr	r3, [r0, #0]
  40a242:	bf14      	ite	ne
  40a244:	6858      	ldrne	r0, [r3, #4]
    else return list->style_list[0];
  40a246:	6818      	ldreq	r0, [r3, #0]
  40a248:	4770      	bx	lr
    if(!list->has_local) return NULL;
  40a24a:	2000      	movs	r0, #0
}
  40a24c:	4770      	bx	lr

0040a24e <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
  40a24e:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40a252:	2b00      	cmp	r3, #0
  40a254:	da02      	bge.n	40a25c <_lv_style_list_get_transition_style+0xe>
    return list->style_list[0];
  40a256:	6803      	ldr	r3, [r0, #0]
  40a258:	6818      	ldr	r0, [r3, #0]
  40a25a:	4770      	bx	lr
    if(!list->has_trans) return NULL;
  40a25c:	2000      	movs	r0, #0
}
  40a25e:	4770      	bx	lr

0040a260 <_lv_style_list_reset>:
    if(list == NULL) return;
  40a260:	2800      	cmp	r0, #0
  40a262:	d032      	beq.n	40a2ca <_lv_style_list_reset+0x6a>
{
  40a264:	b538      	push	{r3, r4, r5, lr}
  40a266:	4604      	mov	r4, r0
    if(list->has_local) {
  40a268:	7903      	ldrb	r3, [r0, #4]
  40a26a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a26e:	d008      	beq.n	40a282 <_lv_style_list_reset+0x22>
        lv_style_t * local = lv_style_list_get_local_style(list);
  40a270:	4b16      	ldr	r3, [pc, #88]	; (40a2cc <_lv_style_list_reset+0x6c>)
  40a272:	4798      	blx	r3
        if(local) {
  40a274:	4605      	mov	r5, r0
  40a276:	b120      	cbz	r0, 40a282 <_lv_style_list_reset+0x22>
            lv_style_reset(local);
  40a278:	4b15      	ldr	r3, [pc, #84]	; (40a2d0 <_lv_style_list_reset+0x70>)
  40a27a:	4798      	blx	r3
            lv_mem_free(local);
  40a27c:	4628      	mov	r0, r5
  40a27e:	4b15      	ldr	r3, [pc, #84]	; (40a2d4 <_lv_style_list_reset+0x74>)
  40a280:	4798      	blx	r3
    if(list->has_trans) {
  40a282:	f994 3004 	ldrsb.w	r3, [r4, #4]
  40a286:	2b00      	cmp	r3, #0
  40a288:	db13      	blt.n	40a2b2 <_lv_style_list_reset+0x52>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
  40a28a:	7923      	ldrb	r3, [r4, #4]
  40a28c:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  40a290:	d002      	beq.n	40a298 <_lv_style_list_reset+0x38>
  40a292:	6820      	ldr	r0, [r4, #0]
  40a294:	4b0f      	ldr	r3, [pc, #60]	; (40a2d4 <_lv_style_list_reset+0x74>)
  40a296:	4798      	blx	r3
    list->style_list = NULL;
  40a298:	2200      	movs	r2, #0
  40a29a:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
  40a29c:	7923      	ldrb	r3, [r4, #4]
    list->has_trans = 0;
  40a29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40a2a2:	f362 13c7 	bfi	r3, r2, #7, #1
  40a2a6:	7123      	strb	r3, [r4, #4]
    list->skip_trans = 0;
  40a2a8:	7963      	ldrb	r3, [r4, #5]
  40a2aa:	f362 0300 	bfi	r3, r2, #0, #1
  40a2ae:	7163      	strb	r3, [r4, #5]
  40a2b0:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
  40a2b2:	4620      	mov	r0, r4
  40a2b4:	4b08      	ldr	r3, [pc, #32]	; (40a2d8 <_lv_style_list_reset+0x78>)
  40a2b6:	4798      	blx	r3
        if(trans) {
  40a2b8:	4605      	mov	r5, r0
  40a2ba:	2800      	cmp	r0, #0
  40a2bc:	d0e5      	beq.n	40a28a <_lv_style_list_reset+0x2a>
            lv_style_reset(trans);
  40a2be:	4b04      	ldr	r3, [pc, #16]	; (40a2d0 <_lv_style_list_reset+0x70>)
  40a2c0:	4798      	blx	r3
            lv_mem_free(trans);
  40a2c2:	4628      	mov	r0, r5
  40a2c4:	4b03      	ldr	r3, [pc, #12]	; (40a2d4 <_lv_style_list_reset+0x74>)
  40a2c6:	4798      	blx	r3
  40a2c8:	e7df      	b.n	40a28a <_lv_style_list_reset+0x2a>
  40a2ca:	4770      	bx	lr
  40a2cc:	0040a235 	.word	0x0040a235
  40a2d0:	00409715 	.word	0x00409715
  40a2d4:	004158b9 	.word	0x004158b9
  40a2d8:	0040a24f 	.word	0x0040a24f

0040a2dc <lv_style_list_copy>:
{
  40a2dc:	b570      	push	{r4, r5, r6, lr}
  40a2de:	4605      	mov	r5, r0
  40a2e0:	460c      	mov	r4, r1
    _lv_style_list_reset(list_dest);
  40a2e2:	4b3d      	ldr	r3, [pc, #244]	; (40a3d8 <lv_style_list_copy+0xfc>)
  40a2e4:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
  40a2e6:	6823      	ldr	r3, [r4, #0]
  40a2e8:	2b00      	cmp	r3, #0
  40a2ea:	d059      	beq.n	40a3a0 <lv_style_list_copy+0xc4>
    if(list_src->has_local == 0) {
  40a2ec:	7923      	ldrb	r3, [r4, #4]
  40a2ee:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a2f2:	d12f      	bne.n	40a354 <lv_style_list_copy+0x78>
        if(list_src->has_trans) {
  40a2f4:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a2f8:	d113      	bne.n	40a322 <lv_style_list_copy+0x46>
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
  40a2fa:	7920      	ldrb	r0, [r4, #4]
  40a2fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40a300:	0080      	lsls	r0, r0, #2
  40a302:	4b36      	ldr	r3, [pc, #216]	; (40a3dc <lv_style_list_copy+0x100>)
  40a304:	4798      	blx	r3
  40a306:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
  40a308:	7922      	ldrb	r2, [r4, #4]
  40a30a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a30e:	0092      	lsls	r2, r2, #2
  40a310:	6821      	ldr	r1, [r4, #0]
  40a312:	4b33      	ldr	r3, [pc, #204]	; (40a3e0 <lv_style_list_copy+0x104>)
  40a314:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
  40a316:	7922      	ldrb	r2, [r4, #4]
  40a318:	792b      	ldrb	r3, [r5, #4]
  40a31a:	f362 0305 	bfi	r3, r2, #0, #6
  40a31e:	712b      	strb	r3, [r5, #4]
  40a320:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a322:	f003 003f 	and.w	r0, r3, #63	; 0x3f
  40a326:	3801      	subs	r0, #1
  40a328:	0080      	lsls	r0, r0, #2
  40a32a:	4b2c      	ldr	r3, [pc, #176]	; (40a3dc <lv_style_list_copy+0x100>)
  40a32c:	4798      	blx	r3
  40a32e:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a330:	7922      	ldrb	r2, [r4, #4]
  40a332:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a336:	3a01      	subs	r2, #1
  40a338:	6821      	ldr	r1, [r4, #0]
  40a33a:	0092      	lsls	r2, r2, #2
  40a33c:	3104      	adds	r1, #4
  40a33e:	4b28      	ldr	r3, [pc, #160]	; (40a3e0 <lv_style_list_copy+0x104>)
  40a340:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40a342:	7923      	ldrb	r3, [r4, #4]
  40a344:	f3c3 0305 	ubfx	r3, r3, #0, #6
  40a348:	3b01      	subs	r3, #1
  40a34a:	792a      	ldrb	r2, [r5, #4]
  40a34c:	f363 0205 	bfi	r2, r3, #0, #6
  40a350:	712a      	strb	r2, [r5, #4]
  40a352:	bd70      	pop	{r4, r5, r6, pc}
        if(list_src->has_trans) {
  40a354:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a358:	d123      	bne.n	40a3a2 <lv_style_list_copy+0xc6>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a35a:	7920      	ldrb	r0, [r4, #4]
  40a35c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40a360:	3801      	subs	r0, #1
  40a362:	0080      	lsls	r0, r0, #2
  40a364:	4b1d      	ldr	r3, [pc, #116]	; (40a3dc <lv_style_list_copy+0x100>)
  40a366:	4798      	blx	r3
  40a368:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a36a:	7922      	ldrb	r2, [r4, #4]
  40a36c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a370:	3a01      	subs	r2, #1
  40a372:	6821      	ldr	r1, [r4, #0]
  40a374:	0092      	lsls	r2, r2, #2
  40a376:	3104      	adds	r1, #4
  40a378:	4b19      	ldr	r3, [pc, #100]	; (40a3e0 <lv_style_list_copy+0x104>)
  40a37a:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40a37c:	7923      	ldrb	r3, [r4, #4]
  40a37e:	f3c3 0305 	ubfx	r3, r3, #0, #6
  40a382:	3b01      	subs	r3, #1
  40a384:	792a      	ldrb	r2, [r5, #4]
  40a386:	f363 0205 	bfi	r2, r3, #0, #6
  40a38a:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
  40a38c:	4628      	mov	r0, r5
  40a38e:	4d15      	ldr	r5, [pc, #84]	; (40a3e4 <lv_style_list_copy+0x108>)
  40a390:	47a8      	blx	r5
  40a392:	4606      	mov	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
  40a394:	4620      	mov	r0, r4
  40a396:	47a8      	blx	r5
  40a398:	4601      	mov	r1, r0
  40a39a:	4630      	mov	r0, r6
  40a39c:	4b12      	ldr	r3, [pc, #72]	; (40a3e8 <lv_style_list_copy+0x10c>)
  40a39e:	4798      	blx	r3
  40a3a0:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40a3a2:	7920      	ldrb	r0, [r4, #4]
  40a3a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40a3a8:	3802      	subs	r0, #2
  40a3aa:	0080      	lsls	r0, r0, #2
  40a3ac:	4b0b      	ldr	r3, [pc, #44]	; (40a3dc <lv_style_list_copy+0x100>)
  40a3ae:	4798      	blx	r3
  40a3b0:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40a3b2:	7922      	ldrb	r2, [r4, #4]
  40a3b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a3b8:	3a02      	subs	r2, #2
  40a3ba:	6821      	ldr	r1, [r4, #0]
  40a3bc:	0092      	lsls	r2, r2, #2
  40a3be:	3108      	adds	r1, #8
  40a3c0:	4b07      	ldr	r3, [pc, #28]	; (40a3e0 <lv_style_list_copy+0x104>)
  40a3c2:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
  40a3c4:	7923      	ldrb	r3, [r4, #4]
  40a3c6:	f3c3 0305 	ubfx	r3, r3, #0, #6
  40a3ca:	3b02      	subs	r3, #2
  40a3cc:	792a      	ldrb	r2, [r5, #4]
  40a3ce:	f363 0205 	bfi	r2, r3, #0, #6
  40a3d2:	712a      	strb	r2, [r5, #4]
  40a3d4:	e7da      	b.n	40a38c <lv_style_list_copy+0xb0>
  40a3d6:	bf00      	nop
  40a3d8:	0040a261 	.word	0x0040a261
  40a3dc:	004157c9 	.word	0x004157c9
  40a3e0:	00415a1d 	.word	0x00415a1d
  40a3e4:	00409689 	.word	0x00409689
  40a3e8:	00409785 	.word	0x00409785

0040a3ec <_lv_style_list_add_trans_style>:
{
  40a3ec:	b538      	push	{r3, r4, r5, lr}
  40a3ee:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40a3f0:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40a3f4:	2b00      	cmp	r3, #0
  40a3f6:	db1c      	blt.n	40a432 <_lv_style_list_add_trans_style+0x46>
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
  40a3f8:	2004      	movs	r0, #4
  40a3fa:	4b13      	ldr	r3, [pc, #76]	; (40a448 <_lv_style_list_add_trans_style+0x5c>)
  40a3fc:	4798      	blx	r3
  40a3fe:	4605      	mov	r5, r0
    LV_ASSERT_MEM(trans_style);
  40a400:	4b12      	ldr	r3, [pc, #72]	; (40a44c <_lv_style_list_add_trans_style+0x60>)
  40a402:	4798      	blx	r3
  40a404:	b1d0      	cbz	r0, 40a43c <_lv_style_list_add_trans_style+0x50>
    if(trans_style == NULL) {
  40a406:	b1bd      	cbz	r5, 40a438 <_lv_style_list_add_trans_style+0x4c>
    lv_style_init(trans_style);
  40a408:	4628      	mov	r0, r5
  40a40a:	4b11      	ldr	r3, [pc, #68]	; (40a450 <_lv_style_list_add_trans_style+0x64>)
  40a40c:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
  40a40e:	4629      	mov	r1, r5
  40a410:	4620      	mov	r0, r4
  40a412:	4b10      	ldr	r3, [pc, #64]	; (40a454 <_lv_style_list_add_trans_style+0x68>)
  40a414:	4798      	blx	r3
    list->has_trans = 1;
  40a416:	7923      	ldrb	r3, [r4, #4]
  40a418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a41c:	7123      	strb	r3, [r4, #4]
    if(list->has_local) {
  40a41e:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a422:	d009      	beq.n	40a438 <_lv_style_list_add_trans_style+0x4c>
        lv_style_t * tmp = list->style_list[0];
  40a424:	6823      	ldr	r3, [r4, #0]
  40a426:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
  40a428:	6859      	ldr	r1, [r3, #4]
  40a42a:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
  40a42c:	6823      	ldr	r3, [r4, #0]
  40a42e:	605a      	str	r2, [r3, #4]
  40a430:	e002      	b.n	40a438 <_lv_style_list_add_trans_style+0x4c>
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40a432:	4b09      	ldr	r3, [pc, #36]	; (40a458 <_lv_style_list_add_trans_style+0x6c>)
  40a434:	4798      	blx	r3
  40a436:	4605      	mov	r5, r0
}
  40a438:	4628      	mov	r0, r5
  40a43a:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MEM(trans_style);
  40a43c:	462a      	mov	r2, r5
  40a43e:	2300      	movs	r3, #0
  40a440:	4806      	ldr	r0, [pc, #24]	; (40a45c <_lv_style_list_add_trans_style+0x70>)
  40a442:	4907      	ldr	r1, [pc, #28]	; (40a460 <_lv_style_list_add_trans_style+0x74>)
  40a444:	4788      	blx	r1
  40a446:	e7fe      	b.n	40a446 <_lv_style_list_add_trans_style+0x5a>
  40a448:	004157c9 	.word	0x004157c9
  40a44c:	004150ef 	.word	0x004150ef
  40a450:	00409501 	.word	0x00409501
  40a454:	004095e9 	.word	0x004095e9
  40a458:	0040a24f 	.word	0x0040a24f
  40a45c:	00425a60 	.word	0x00425a60
  40a460:	004150f9 	.word	0x004150f9

0040a464 <_lv_style_list_set_local_int>:
{
  40a464:	b538      	push	{r3, r4, r5, lr}
  40a466:	460c      	mov	r4, r1
  40a468:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40a46a:	4b03      	ldr	r3, [pc, #12]	; (40a478 <_lv_style_list_set_local_int+0x14>)
  40a46c:	4798      	blx	r3
    _lv_style_set_int(local, prop, value);
  40a46e:	462a      	mov	r2, r5
  40a470:	4621      	mov	r1, r4
  40a472:	4b02      	ldr	r3, [pc, #8]	; (40a47c <_lv_style_list_set_local_int+0x18>)
  40a474:	4798      	blx	r3
  40a476:	bd38      	pop	{r3, r4, r5, pc}
  40a478:	00409689 	.word	0x00409689
  40a47c:	004098e5 	.word	0x004098e5

0040a480 <_lv_style_list_set_local_opa>:
{
  40a480:	b538      	push	{r3, r4, r5, lr}
  40a482:	460c      	mov	r4, r1
  40a484:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40a486:	4b03      	ldr	r3, [pc, #12]	; (40a494 <_lv_style_list_set_local_opa+0x14>)
  40a488:	4798      	blx	r3
    _lv_style_set_opa(local, prop, value);
  40a48a:	462a      	mov	r2, r5
  40a48c:	4621      	mov	r1, r4
  40a48e:	4b02      	ldr	r3, [pc, #8]	; (40a498 <_lv_style_list_set_local_opa+0x18>)
  40a490:	4798      	blx	r3
  40a492:	bd38      	pop	{r3, r4, r5, pc}
  40a494:	00409689 	.word	0x00409689
  40a498:	00409ba5 	.word	0x00409ba5

0040a49c <_lv_style_list_set_local_color>:
{
  40a49c:	b538      	push	{r3, r4, r5, lr}
  40a49e:	460c      	mov	r4, r1
  40a4a0:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40a4a2:	4b03      	ldr	r3, [pc, #12]	; (40a4b0 <_lv_style_list_set_local_color+0x14>)
  40a4a4:	4798      	blx	r3
    _lv_style_set_color(local, prop, value);
  40a4a6:	462a      	mov	r2, r5
  40a4a8:	4621      	mov	r1, r4
  40a4aa:	4b02      	ldr	r3, [pc, #8]	; (40a4b4 <_lv_style_list_set_local_color+0x18>)
  40a4ac:	4798      	blx	r3
  40a4ae:	bd38      	pop	{r3, r4, r5, pc}
  40a4b0:	00409689 	.word	0x00409689
  40a4b4:	00409a45 	.word	0x00409a45

0040a4b8 <_lv_style_list_set_local_ptr>:
{
  40a4b8:	b538      	push	{r3, r4, r5, lr}
  40a4ba:	460c      	mov	r4, r1
  40a4bc:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40a4be:	4b03      	ldr	r3, [pc, #12]	; (40a4cc <_lv_style_list_set_local_ptr+0x14>)
  40a4c0:	4798      	blx	r3
    _lv_style_set_ptr(local, prop, value);
  40a4c2:	462a      	mov	r2, r5
  40a4c4:	4621      	mov	r1, r4
  40a4c6:	4b02      	ldr	r3, [pc, #8]	; (40a4d0 <_lv_style_list_set_local_ptr+0x18>)
  40a4c8:	4798      	blx	r3
  40a4ca:	bd38      	pop	{r3, r4, r5, pc}
  40a4cc:	00409689 	.word	0x00409689
  40a4d0:	00409cf1 	.word	0x00409cf1

0040a4d4 <_lv_style_list_get_int>:
    if(list == NULL) return LV_RES_INV;
  40a4d4:	2800      	cmp	r0, #0
  40a4d6:	d063      	beq.n	40a5a0 <_lv_style_list_get_int+0xcc>
{
  40a4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a4dc:	b083      	sub	sp, #12
  40a4de:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a4e0:	6803      	ldr	r3, [r0, #0]
  40a4e2:	2b00      	cmp	r3, #0
  40a4e4:	d05e      	beq.n	40a5a4 <_lv_style_list_get_int+0xd0>
    int16_t weight_goal = attr;
  40a4e6:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_style_int_t value_act = 0;
  40a4ea:	2300      	movs	r3, #0
  40a4ec:	f8ad 3006 	strh.w	r3, [sp, #6]
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a4f0:	7903      	ldrb	r3, [r0, #4]
  40a4f2:	f013 033f 	ands.w	r3, r3, #63	; 0x3f
  40a4f6:	d04b      	beq.n	40a590 <_lv_style_list_get_int+0xbc>
  40a4f8:	4693      	mov	fp, r2
  40a4fa:	4689      	mov	r9, r1
  40a4fc:	2400      	movs	r4, #0
  40a4fe:	f04f 36ff 	mov.w	r6, #4294967295
  40a502:	46a2      	mov	sl, r4
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
  40a504:	4f28      	ldr	r7, [pc, #160]	; (40a5a8 <_lv_style_list_get_int+0xd4>)
  40a506:	e01b      	b.n	40a540 <_lv_style_list_get_int+0x6c>
  40a508:	3101      	adds	r1, #1
  40a50a:	b2c9      	uxtb	r1, r1
  40a50c:	e01f      	b.n	40a54e <_lv_style_list_get_int+0x7a>
  40a50e:	4650      	mov	r0, sl
  40a510:	f10d 0206 	add.w	r2, sp, #6
  40a514:	4649      	mov	r1, r9
  40a516:	47b8      	blx	r7
        if(weight_act == weight_goal) {
  40a518:	4580      	cmp	r8, r0
  40a51a:	d024      	beq.n	40a566 <_lv_style_list_get_int+0x92>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a51c:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a520:	2b00      	cmp	r3, #0
  40a522:	db26      	blt.n	40a572 <_lv_style_list_get_int+0x9e>
        else if(weight_act > weight) {
  40a524:	42b0      	cmp	r0, r6
  40a526:	dd04      	ble.n	40a532 <_lv_style_list_get_int+0x5e>
            *res = value_act;
  40a528:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a52c:	f8ab 3000 	strh.w	r3, [fp]
            weight =  weight_act;
  40a530:	4606      	mov	r6, r0
  40a532:	3401      	adds	r4, #1
  40a534:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a536:	792b      	ldrb	r3, [r5, #4]
  40a538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a53c:	429c      	cmp	r4, r3
  40a53e:	da29      	bge.n	40a594 <_lv_style_list_get_int+0xc0>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a540:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a542:	88aa      	ldrh	r2, [r5, #4]
  40a544:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a548:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a54c:	d0dc      	beq.n	40a508 <_lv_style_list_get_int+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a54e:	792a      	ldrb	r2, [r5, #4]
  40a550:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a554:	d0db      	beq.n	40a50e <_lv_style_list_get_int+0x3a>
  40a556:	4299      	cmp	r1, r3
  40a558:	da03      	bge.n	40a562 <_lv_style_list_get_int+0x8e>
    return list->style_list[id];
  40a55a:	682b      	ldr	r3, [r5, #0]
  40a55c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40a560:	e7d6      	b.n	40a510 <_lv_style_list_get_int+0x3c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a562:	4650      	mov	r0, sl
  40a564:	e7d4      	b.n	40a510 <_lv_style_list_get_int+0x3c>
            *res = value_act;
  40a566:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a56a:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
  40a56e:	2001      	movs	r0, #1
  40a570:	e013      	b.n	40a59a <_lv_style_list_get_int+0xc6>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a572:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40a576:	d1d5      	bne.n	40a524 <_lv_style_list_get_int+0x50>
  40a578:	2c00      	cmp	r4, #0
  40a57a:	d1d3      	bne.n	40a524 <_lv_style_list_get_int+0x50>
  40a57c:	796b      	ldrb	r3, [r5, #5]
  40a57e:	f013 0f01 	tst.w	r3, #1
  40a582:	d1cf      	bne.n	40a524 <_lv_style_list_get_int+0x50>
            *res = value_act;
  40a584:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a588:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
  40a58c:	2001      	movs	r0, #1
  40a58e:	e004      	b.n	40a59a <_lv_style_list_get_int+0xc6>
    int16_t weight = -1;
  40a590:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0) return LV_RES_OK;
  40a594:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
  40a596:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
  40a59a:	b003      	add	sp, #12
  40a59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
  40a5a0:	2000      	movs	r0, #0
  40a5a2:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40a5a4:	2000      	movs	r0, #0
  40a5a6:	e7f8      	b.n	40a59a <_lv_style_list_get_int+0xc6>
  40a5a8:	00409e69 	.word	0x00409e69

0040a5ac <_lv_style_list_get_color>:
    if(list == NULL) return LV_RES_INV;
  40a5ac:	2800      	cmp	r0, #0
  40a5ae:	d062      	beq.n	40a676 <_lv_style_list_get_color+0xca>
{
  40a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a5b4:	b083      	sub	sp, #12
  40a5b6:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a5b8:	6803      	ldr	r3, [r0, #0]
  40a5ba:	2b00      	cmp	r3, #0
  40a5bc:	d05d      	beq.n	40a67a <_lv_style_list_get_color+0xce>
    int16_t weight_goal = attr;
  40a5be:	ea4f 2811 	mov.w	r8, r1, lsr #8
    value_act.full = 0;
  40a5c2:	2300      	movs	r3, #0
  40a5c4:	f8ad 3004 	strh.w	r3, [sp, #4]
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a5c8:	7903      	ldrb	r3, [r0, #4]
  40a5ca:	f013 033f 	ands.w	r3, r3, #63	; 0x3f
  40a5ce:	d04a      	beq.n	40a666 <_lv_style_list_get_color+0xba>
  40a5d0:	4693      	mov	fp, r2
  40a5d2:	4689      	mov	r9, r1
  40a5d4:	2400      	movs	r4, #0
  40a5d6:	f04f 36ff 	mov.w	r6, #4294967295
  40a5da:	46a2      	mov	sl, r4
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
  40a5dc:	4f28      	ldr	r7, [pc, #160]	; (40a680 <_lv_style_list_get_color+0xd4>)
  40a5de:	e01a      	b.n	40a616 <_lv_style_list_get_color+0x6a>
  40a5e0:	3101      	adds	r1, #1
  40a5e2:	b2c9      	uxtb	r1, r1
  40a5e4:	e01e      	b.n	40a624 <_lv_style_list_get_color+0x78>
  40a5e6:	4650      	mov	r0, sl
  40a5e8:	aa01      	add	r2, sp, #4
  40a5ea:	4649      	mov	r1, r9
  40a5ec:	47b8      	blx	r7
        if(weight_act == weight_goal) {
  40a5ee:	4580      	cmp	r8, r0
  40a5f0:	d024      	beq.n	40a63c <_lv_style_list_get_color+0x90>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a5f2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a5f6:	2b00      	cmp	r3, #0
  40a5f8:	db26      	blt.n	40a648 <_lv_style_list_get_color+0x9c>
        else if(weight_act > weight) {
  40a5fa:	42b0      	cmp	r0, r6
  40a5fc:	dd04      	ble.n	40a608 <_lv_style_list_get_color+0x5c>
            *res = value_act;
  40a5fe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40a602:	f8ab 3000 	strh.w	r3, [fp]
            weight =  weight_act;
  40a606:	4606      	mov	r6, r0
  40a608:	3401      	adds	r4, #1
  40a60a:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a60c:	792b      	ldrb	r3, [r5, #4]
  40a60e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a612:	429c      	cmp	r4, r3
  40a614:	da29      	bge.n	40a66a <_lv_style_list_get_color+0xbe>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a616:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a618:	88aa      	ldrh	r2, [r5, #4]
  40a61a:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a61e:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a622:	d0dd      	beq.n	40a5e0 <_lv_style_list_get_color+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a624:	792a      	ldrb	r2, [r5, #4]
  40a626:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a62a:	d0dc      	beq.n	40a5e6 <_lv_style_list_get_color+0x3a>
  40a62c:	4299      	cmp	r1, r3
  40a62e:	da03      	bge.n	40a638 <_lv_style_list_get_color+0x8c>
    return list->style_list[id];
  40a630:	682b      	ldr	r3, [r5, #0]
  40a632:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40a636:	e7d7      	b.n	40a5e8 <_lv_style_list_get_color+0x3c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a638:	4650      	mov	r0, sl
  40a63a:	e7d5      	b.n	40a5e8 <_lv_style_list_get_color+0x3c>
            *res = value_act;
  40a63c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40a640:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
  40a644:	2001      	movs	r0, #1
  40a646:	e013      	b.n	40a670 <_lv_style_list_get_color+0xc4>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a648:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40a64c:	d1d5      	bne.n	40a5fa <_lv_style_list_get_color+0x4e>
  40a64e:	2c00      	cmp	r4, #0
  40a650:	d1d3      	bne.n	40a5fa <_lv_style_list_get_color+0x4e>
  40a652:	796b      	ldrb	r3, [r5, #5]
  40a654:	f013 0f01 	tst.w	r3, #1
  40a658:	d1cf      	bne.n	40a5fa <_lv_style_list_get_color+0x4e>
            *res = value_act;
  40a65a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40a65e:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
  40a662:	2001      	movs	r0, #1
  40a664:	e004      	b.n	40a670 <_lv_style_list_get_color+0xc4>
    int16_t weight = -1;
  40a666:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
  40a66a:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
  40a66c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
  40a670:	b003      	add	sp, #12
  40a672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
  40a676:	2000      	movs	r0, #0
  40a678:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40a67a:	2000      	movs	r0, #0
  40a67c:	e7f8      	b.n	40a670 <_lv_style_list_get_color+0xc4>
  40a67e:	bf00      	nop
  40a680:	0040a049 	.word	0x0040a049

0040a684 <_lv_style_list_get_opa>:
    if(list == NULL) return LV_RES_INV;
  40a684:	2800      	cmp	r0, #0
  40a686:	d063      	beq.n	40a750 <_lv_style_list_get_opa+0xcc>
{
  40a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a68c:	b083      	sub	sp, #12
  40a68e:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a690:	6803      	ldr	r3, [r0, #0]
  40a692:	2b00      	cmp	r3, #0
  40a694:	d05e      	beq.n	40a754 <_lv_style_list_get_opa+0xd0>
    int16_t weight_goal = attr;
  40a696:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
  40a69a:	2300      	movs	r3, #0
  40a69c:	f88d 3007 	strb.w	r3, [sp, #7]
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a6a0:	7903      	ldrb	r3, [r0, #4]
  40a6a2:	f013 033f 	ands.w	r3, r3, #63	; 0x3f
  40a6a6:	d04b      	beq.n	40a740 <_lv_style_list_get_opa+0xbc>
  40a6a8:	4693      	mov	fp, r2
  40a6aa:	4689      	mov	r9, r1
  40a6ac:	2400      	movs	r4, #0
  40a6ae:	f04f 36ff 	mov.w	r6, #4294967295
  40a6b2:	46a2      	mov	sl, r4
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
  40a6b4:	4f28      	ldr	r7, [pc, #160]	; (40a758 <_lv_style_list_get_opa+0xd4>)
  40a6b6:	e01b      	b.n	40a6f0 <_lv_style_list_get_opa+0x6c>
  40a6b8:	3101      	adds	r1, #1
  40a6ba:	b2c9      	uxtb	r1, r1
  40a6bc:	e01f      	b.n	40a6fe <_lv_style_list_get_opa+0x7a>
  40a6be:	4650      	mov	r0, sl
  40a6c0:	f10d 0207 	add.w	r2, sp, #7
  40a6c4:	4649      	mov	r1, r9
  40a6c6:	47b8      	blx	r7
        if(weight_act == weight_goal) {
  40a6c8:	4580      	cmp	r8, r0
  40a6ca:	d024      	beq.n	40a716 <_lv_style_list_get_opa+0x92>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a6cc:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a6d0:	2b00      	cmp	r3, #0
  40a6d2:	db26      	blt.n	40a722 <_lv_style_list_get_opa+0x9e>
        else if(weight_act > weight) {
  40a6d4:	42b0      	cmp	r0, r6
  40a6d6:	dd04      	ble.n	40a6e2 <_lv_style_list_get_opa+0x5e>
            *res = value_act;
  40a6d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40a6dc:	f88b 3000 	strb.w	r3, [fp]
            weight =  weight_act;
  40a6e0:	4606      	mov	r6, r0
  40a6e2:	3401      	adds	r4, #1
  40a6e4:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a6e6:	792b      	ldrb	r3, [r5, #4]
  40a6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a6ec:	429c      	cmp	r4, r3
  40a6ee:	da29      	bge.n	40a744 <_lv_style_list_get_opa+0xc0>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a6f0:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a6f2:	88aa      	ldrh	r2, [r5, #4]
  40a6f4:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a6f8:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a6fc:	d0dc      	beq.n	40a6b8 <_lv_style_list_get_opa+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a6fe:	792a      	ldrb	r2, [r5, #4]
  40a700:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a704:	d0db      	beq.n	40a6be <_lv_style_list_get_opa+0x3a>
  40a706:	4299      	cmp	r1, r3
  40a708:	da03      	bge.n	40a712 <_lv_style_list_get_opa+0x8e>
    return list->style_list[id];
  40a70a:	682b      	ldr	r3, [r5, #0]
  40a70c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40a710:	e7d6      	b.n	40a6c0 <_lv_style_list_get_opa+0x3c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a712:	4650      	mov	r0, sl
  40a714:	e7d4      	b.n	40a6c0 <_lv_style_list_get_opa+0x3c>
            *res = value_act;
  40a716:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40a71a:	f88b 3000 	strb.w	r3, [fp]
            return LV_RES_OK;
  40a71e:	2001      	movs	r0, #1
  40a720:	e013      	b.n	40a74a <_lv_style_list_get_opa+0xc6>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a722:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40a726:	d1d5      	bne.n	40a6d4 <_lv_style_list_get_opa+0x50>
  40a728:	2c00      	cmp	r4, #0
  40a72a:	d1d3      	bne.n	40a6d4 <_lv_style_list_get_opa+0x50>
  40a72c:	796b      	ldrb	r3, [r5, #5]
  40a72e:	f013 0f01 	tst.w	r3, #1
  40a732:	d1cf      	bne.n	40a6d4 <_lv_style_list_get_opa+0x50>
            *res = value_act;
  40a734:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40a738:	f88b 3000 	strb.w	r3, [fp]
            return LV_RES_OK;
  40a73c:	2001      	movs	r0, #1
  40a73e:	e004      	b.n	40a74a <_lv_style_list_get_opa+0xc6>
    int16_t weight = -1;
  40a740:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
  40a744:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
  40a746:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
  40a74a:	b003      	add	sp, #12
  40a74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
  40a750:	2000      	movs	r0, #0
  40a752:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40a754:	2000      	movs	r0, #0
  40a756:	e7f8      	b.n	40a74a <_lv_style_list_get_opa+0xc6>
  40a758:	00409f5d 	.word	0x00409f5d

0040a75c <_lv_style_list_get_ptr>:
    if(list == NULL) return LV_RES_INV;
  40a75c:	2800      	cmp	r0, #0
  40a75e:	d05c      	beq.n	40a81a <_lv_style_list_get_ptr+0xbe>
{
  40a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a764:	b083      	sub	sp, #12
  40a766:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a768:	6803      	ldr	r3, [r0, #0]
  40a76a:	2b00      	cmp	r3, #0
  40a76c:	d057      	beq.n	40a81e <_lv_style_list_get_ptr+0xc2>
    int16_t weight_goal = attr;
  40a76e:	ea4f 2811 	mov.w	r8, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a772:	7903      	ldrb	r3, [r0, #4]
  40a774:	f013 033f 	ands.w	r3, r3, #63	; 0x3f
  40a778:	d047      	beq.n	40a80a <_lv_style_list_get_ptr+0xae>
  40a77a:	4693      	mov	fp, r2
  40a77c:	4689      	mov	r9, r1
  40a77e:	2400      	movs	r4, #0
  40a780:	f04f 36ff 	mov.w	r6, #4294967295
  40a784:	46a2      	mov	sl, r4
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
  40a786:	4f27      	ldr	r7, [pc, #156]	; (40a824 <_lv_style_list_get_ptr+0xc8>)
  40a788:	e019      	b.n	40a7be <_lv_style_list_get_ptr+0x62>
  40a78a:	3101      	adds	r1, #1
  40a78c:	b2c9      	uxtb	r1, r1
  40a78e:	e01d      	b.n	40a7cc <_lv_style_list_get_ptr+0x70>
  40a790:	4650      	mov	r0, sl
  40a792:	aa01      	add	r2, sp, #4
  40a794:	4649      	mov	r1, r9
  40a796:	47b8      	blx	r7
        if(weight_act == weight_goal) {
  40a798:	4580      	cmp	r8, r0
  40a79a:	d023      	beq.n	40a7e4 <_lv_style_list_get_ptr+0x88>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a79c:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a7a0:	2b00      	cmp	r3, #0
  40a7a2:	db24      	blt.n	40a7ee <_lv_style_list_get_ptr+0x92>
        else if(weight_act > weight) {
  40a7a4:	42b0      	cmp	r0, r6
  40a7a6:	dd03      	ble.n	40a7b0 <_lv_style_list_get_ptr+0x54>
            *res = value_act;
  40a7a8:	9b01      	ldr	r3, [sp, #4]
  40a7aa:	f8cb 3000 	str.w	r3, [fp]
            weight =  weight_act;
  40a7ae:	4606      	mov	r6, r0
  40a7b0:	3401      	adds	r4, #1
  40a7b2:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a7b4:	792b      	ldrb	r3, [r5, #4]
  40a7b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a7ba:	429c      	cmp	r4, r3
  40a7bc:	da27      	bge.n	40a80e <_lv_style_list_get_ptr+0xb2>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a7be:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a7c0:	88aa      	ldrh	r2, [r5, #4]
  40a7c2:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a7c6:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a7ca:	d0de      	beq.n	40a78a <_lv_style_list_get_ptr+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a7cc:	792a      	ldrb	r2, [r5, #4]
  40a7ce:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a7d2:	d0dd      	beq.n	40a790 <_lv_style_list_get_ptr+0x34>
  40a7d4:	4299      	cmp	r1, r3
  40a7d6:	da03      	bge.n	40a7e0 <_lv_style_list_get_ptr+0x84>
    return list->style_list[id];
  40a7d8:	682b      	ldr	r3, [r5, #0]
  40a7da:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40a7de:	e7d8      	b.n	40a792 <_lv_style_list_get_ptr+0x36>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a7e0:	4650      	mov	r0, sl
  40a7e2:	e7d6      	b.n	40a792 <_lv_style_list_get_ptr+0x36>
            *res = value_act;
  40a7e4:	9b01      	ldr	r3, [sp, #4]
  40a7e6:	f8cb 3000 	str.w	r3, [fp]
            return LV_RES_OK;
  40a7ea:	2001      	movs	r0, #1
  40a7ec:	e012      	b.n	40a814 <_lv_style_list_get_ptr+0xb8>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a7ee:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40a7f2:	d1d7      	bne.n	40a7a4 <_lv_style_list_get_ptr+0x48>
  40a7f4:	2c00      	cmp	r4, #0
  40a7f6:	d1d5      	bne.n	40a7a4 <_lv_style_list_get_ptr+0x48>
  40a7f8:	796b      	ldrb	r3, [r5, #5]
  40a7fa:	f013 0f01 	tst.w	r3, #1
  40a7fe:	d1d1      	bne.n	40a7a4 <_lv_style_list_get_ptr+0x48>
            *res = value_act;
  40a800:	9b01      	ldr	r3, [sp, #4]
  40a802:	f8cb 3000 	str.w	r3, [fp]
            return LV_RES_OK;
  40a806:	2001      	movs	r0, #1
  40a808:	e004      	b.n	40a814 <_lv_style_list_get_ptr+0xb8>
    int16_t weight = -1;
  40a80a:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
  40a80e:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
  40a810:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
  40a814:	b003      	add	sp, #12
  40a816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
  40a81a:	2000      	movs	r0, #0
  40a81c:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40a81e:	2000      	movs	r0, #0
  40a820:	e7f8      	b.n	40a814 <_lv_style_list_get_ptr+0xb8>
  40a822:	bf00      	nop
  40a824:	0040a13d 	.word	0x0040a13d

0040a828 <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
  40a828:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a82a:	f001 0307 	and.w	r3, r1, #7
  40a82e:	f3c1 05c4 	ubfx	r5, r1, #3, #5
  40a832:	f3c1 2604 	ubfx	r6, r1, #8, #5
  40a836:	f3c1 3142 	ubfx	r1, r1, #13, #3

    if(opa <= LV_OPA_MIN) return bg;
  40a83a:	2a02      	cmp	r2, #2
  40a83c:	d94f      	bls.n	40a8de <color_blend_true_color_additive+0xb6>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
  40a83e:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40a842:	442c      	add	r4, r5
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
  40a844:	2c1f      	cmp	r4, #31
  40a846:	bf28      	it	cs
  40a848:	241f      	movcs	r4, #31
  40a84a:	f004 041f 	and.w	r4, r4, #31
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MATH_MIN(tmp, 63);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40a84e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40a852:	f000 0307 	and.w	r3, r0, #7
  40a856:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40a85a:	f3c0 3742 	ubfx	r7, r0, #13, #3
  40a85e:	443b      	add	r3, r7
    tmp = LV_MATH_MIN(tmp, 63);
  40a860:	2b3f      	cmp	r3, #63	; 0x3f
  40a862:	bf28      	it	cs
  40a864:	233f      	movcs	r3, #63	; 0x3f
    fg.ch.green_h = tmp >> 3;
  40a866:	f3c3 0cc2 	ubfx	ip, r3, #3, #3
    fg.ch.green_l = tmp & 0x7;
  40a86a:	f003 0307 	and.w	r3, r3, #7

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
  40a86e:	f3c0 2004 	ubfx	r0, r0, #8, #5
  40a872:	4430      	add	r0, r6
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
  40a874:	281f      	cmp	r0, #31
  40a876:	bf28      	it	cs
  40a878:	201f      	movcs	r0, #31
  40a87a:	f000 071f 	and.w	r7, r0, #31
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
  40a87e:	2aff      	cmp	r2, #255	; 0xff
  40a880:	d038      	beq.n	40a8f4 <color_blend_true_color_additive+0xcc>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40a882:	f1c2 0eff 	rsb	lr, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40a886:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  40a88a:	fb0e f101 	mul.w	r1, lr, r1
  40a88e:	fb02 1303 	mla	r3, r2, r3, r1
  40a892:	3380      	adds	r3, #128	; 0x80
  40a894:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40a898:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40a89c:	0e99      	lsrs	r1, r3, #26
  40a89e:	f04f 0000 	mov.w	r0, #0
  40a8a2:	f361 0002 	bfi	r0, r1, #0, #3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40a8a6:	fb0e f505 	mul.w	r5, lr, r5
  40a8aa:	fb02 5404 	mla	r4, r2, r4, r5
  40a8ae:	3480      	adds	r4, #128	; 0x80
  40a8b0:	eb04 2504 	add.w	r5, r4, r4, lsl #8
  40a8b4:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
  40a8b8:	0de4      	lsrs	r4, r4, #23
  40a8ba:	f364 00c7 	bfi	r0, r4, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40a8be:	fb0e f606 	mul.w	r6, lr, r6
  40a8c2:	fb02 6207 	mla	r2, r2, r7, r6
  40a8c6:	3280      	adds	r2, #128	; 0x80
  40a8c8:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40a8cc:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40a8d0:	0dd2      	lsrs	r2, r2, #23
  40a8d2:	f362 200c 	bfi	r0, r2, #8, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40a8d6:	0ddb      	lsrs	r3, r3, #23
  40a8d8:	f363 304f 	bfi	r0, r3, #13, #3

    return lv_color_mix(fg, bg, opa);
}
  40a8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
  40a8de:	f04f 0000 	mov.w	r0, #0
  40a8e2:	f363 0002 	bfi	r0, r3, #0, #3
  40a8e6:	f365 00c7 	bfi	r0, r5, #3, #5
  40a8ea:	f366 200c 	bfi	r0, r6, #8, #5
  40a8ee:	f361 304f 	bfi	r0, r1, #13, #3
  40a8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa == LV_OPA_COVER) return fg;
  40a8f4:	f04f 0000 	mov.w	r0, #0
  40a8f8:	f36c 0002 	bfi	r0, ip, #0, #3
  40a8fc:	f364 00c7 	bfi	r0, r4, #3, #5
  40a900:	f367 200c 	bfi	r0, r7, #8, #5
  40a904:	f363 304f 	bfi	r0, r3, #13, #3
  40a908:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040a90a <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
  40a90a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a90c:	f001 0307 	and.w	r3, r1, #7
  40a910:	f3c1 05c4 	ubfx	r5, r1, #3, #5
  40a914:	f3c1 2604 	ubfx	r6, r1, #8, #5
  40a918:	f3c1 3142 	ubfx	r1, r1, #13, #3

    if(opa <= LV_OPA_MIN) return bg;
  40a91c:	2a02      	cmp	r2, #2
  40a91e:	d94c      	bls.n	40a9ba <color_blend_true_color_subtractive+0xb0>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
  40a920:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40a924:	1b2c      	subs	r4, r5, r4
    fg.ch.red = LV_MATH_MAX(tmp, 0);
  40a926:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  40a92a:	f004 041f 	and.w	r4, r4, #31

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    fg.ch.green = LV_MATH_MAX(tmp, 0);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40a92e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40a932:	f000 0307 	and.w	r3, r0, #7
  40a936:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40a93a:	f3c0 3742 	ubfx	r7, r0, #13, #3
  40a93e:	443b      	add	r3, r7
    tmp = LV_MATH_MAX(tmp, 0);
  40a940:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fg.ch.green_h = tmp >> 3;
  40a944:	f3c3 0cc2 	ubfx	ip, r3, #3, #3
    fg.ch.green_l = tmp & 0x7;
  40a948:	f003 0307 	and.w	r3, r3, #7
#endif

    tmp = bg.ch.blue - fg.ch.blue;
  40a94c:	f3c0 2004 	ubfx	r0, r0, #8, #5
  40a950:	1a30      	subs	r0, r6, r0
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
  40a952:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  40a956:	f000 071f 	and.w	r7, r0, #31

    if(opa == LV_OPA_COVER) return fg;
  40a95a:	2aff      	cmp	r2, #255	; 0xff
  40a95c:	d038      	beq.n	40a9d0 <color_blend_true_color_subtractive+0xc6>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40a95e:	f1c2 0eff 	rsb	lr, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40a962:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  40a966:	fb0e f101 	mul.w	r1, lr, r1
  40a96a:	fb02 1303 	mla	r3, r2, r3, r1
  40a96e:	3380      	adds	r3, #128	; 0x80
  40a970:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40a974:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40a978:	0e99      	lsrs	r1, r3, #26
  40a97a:	f04f 0000 	mov.w	r0, #0
  40a97e:	f361 0002 	bfi	r0, r1, #0, #3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40a982:	fb0e f505 	mul.w	r5, lr, r5
  40a986:	fb02 5404 	mla	r4, r2, r4, r5
  40a98a:	3480      	adds	r4, #128	; 0x80
  40a98c:	eb04 2504 	add.w	r5, r4, r4, lsl #8
  40a990:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
  40a994:	0de4      	lsrs	r4, r4, #23
  40a996:	f364 00c7 	bfi	r0, r4, #3, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40a99a:	fb0e f606 	mul.w	r6, lr, r6
  40a99e:	fb02 6207 	mla	r2, r2, r7, r6
  40a9a2:	3280      	adds	r2, #128	; 0x80
  40a9a4:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40a9a8:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40a9ac:	0dd2      	lsrs	r2, r2, #23
  40a9ae:	f362 200c 	bfi	r0, r2, #8, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40a9b2:	0ddb      	lsrs	r3, r3, #23
  40a9b4:	f363 304f 	bfi	r0, r3, #13, #3

    return lv_color_mix(fg, bg, opa);
}
  40a9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
  40a9ba:	f04f 0000 	mov.w	r0, #0
  40a9be:	f363 0002 	bfi	r0, r3, #0, #3
  40a9c2:	f365 00c7 	bfi	r0, r5, #3, #5
  40a9c6:	f366 200c 	bfi	r0, r6, #8, #5
  40a9ca:	f361 304f 	bfi	r0, r1, #13, #3
  40a9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa == LV_OPA_COVER) return fg;
  40a9d0:	f04f 0000 	mov.w	r0, #0
  40a9d4:	f36c 0002 	bfi	r0, ip, #0, #3
  40a9d8:	f364 00c7 	bfi	r0, r4, #3, #5
  40a9dc:	f367 200c 	bfi	r0, r7, #8, #5
  40a9e0:	f363 304f 	bfi	r0, r3, #13, #3
  40a9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0040a9e8 <_lv_blend_fill>:
{
  40a9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a9ec:	b095      	sub	sp, #84	; 0x54
  40a9ee:	f89d 4078 	ldrb.w	r4, [sp, #120]	; 0x78
  40a9f2:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
  40a9f6:	f89d 9080 	ldrb.w	r9, [sp, #128]	; 0x80
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40a9fa:	b114      	cbz	r4, 40aa02 <_lv_blend_fill+0x1a>
  40a9fc:	f1bb 0f01 	cmp.w	fp, #1
  40aa00:	d802      	bhi.n	40aa08 <_lv_blend_fill+0x20>
}
  40aa02:	b015      	add	sp, #84	; 0x54
  40aa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa08:	9308      	str	r3, [sp, #32]
  40aa0a:	f8ad 201c 	strh.w	r2, [sp, #28]
  40aa0e:	460e      	mov	r6, r1
  40aa10:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40aa12:	4ba6      	ldr	r3, [pc, #664]	; (40acac <_lv_blend_fill+0x2c4>)
  40aa14:	4798      	blx	r3
  40aa16:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40aa18:	4ba5      	ldr	r3, [pc, #660]	; (40acb0 <_lv_blend_fill+0x2c8>)
  40aa1a:	4798      	blx	r3
  40aa1c:	4607      	mov	r7, r0
    lv_color_t * disp_buf = vdb->buf_act;
  40aa1e:	6883      	ldr	r3, [r0, #8]
  40aa20:	9306      	str	r3, [sp, #24]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40aa22:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  40aa26:	b10b      	cbz	r3, 40aa2c <_lv_blend_fill+0x44>
  40aa28:	4640      	mov	r0, r8
  40aa2a:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
  40aa2c:	4632      	mov	r2, r6
  40aa2e:	4629      	mov	r1, r5
  40aa30:	a812      	add	r0, sp, #72	; 0x48
  40aa32:	4ba0      	ldr	r3, [pc, #640]	; (40acb4 <_lv_blend_fill+0x2cc>)
  40aa34:	4798      	blx	r3
    if(!is_common) return;
  40aa36:	2800      	cmp	r0, #0
  40aa38:	d0e3      	beq.n	40aa02 <_lv_blend_fill+0x1a>
    draw_area.x1 -= disp_area->x1;
  40aa3a:	8a3a      	ldrh	r2, [r7, #16]
  40aa3c:	f8bd c048 	ldrh.w	ip, [sp, #72]	; 0x48
  40aa40:	ebac 0c02 	sub.w	ip, ip, r2
  40aa44:	fa1f fc8c 	uxth.w	ip, ip
  40aa48:	fa0f f68c 	sxth.w	r6, ip
  40aa4c:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
    draw_area.y1 -= disp_area->y1;
  40aa50:	8a7b      	ldrh	r3, [r7, #18]
  40aa52:	f8bd 004a 	ldrh.w	r0, [sp, #74]	; 0x4a
  40aa56:	1ac0      	subs	r0, r0, r3
  40aa58:	b200      	sxth	r0, r0
  40aa5a:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    draw_area.x2 -= disp_area->x1;
  40aa5e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
  40aa62:	1a89      	subs	r1, r1, r2
  40aa64:	b289      	uxth	r1, r1
  40aa66:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
    draw_area.y2 -= disp_area->y1;
  40aa6a:	f8bd 504e 	ldrh.w	r5, [sp, #78]	; 0x4e
  40aa6e:	1aed      	subs	r5, r5, r3
  40aa70:	b22d      	sxth	r5, r5
  40aa72:	f8ad 504e 	strh.w	r5, [sp, #78]	; 0x4e
    if(mask && disp->driver.antialiasing == 0)
  40aa76:	9a08      	ldr	r2, [sp, #32]
  40aa78:	b1ca      	cbz	r2, 40aaae <_lv_blend_fill+0xc6>
  40aa7a:	f898 3008 	ldrb.w	r3, [r8, #8]
  40aa7e:	f013 0f01 	tst.w	r3, #1
  40aa82:	d114      	bne.n	40aaae <_lv_blend_fill+0xc6>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40aa84:	f101 0e01 	add.w	lr, r1, #1
  40aa88:	ebae 0e0c 	sub.w	lr, lr, ip
  40aa8c:	fa0f fe8e 	sxth.w	lr, lr
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40aa90:	f1be 0f00 	cmp.w	lr, #0
  40aa94:	dd0b      	ble.n	40aaae <_lv_blend_fill+0xc6>
  40aa96:	4613      	mov	r3, r2
  40aa98:	4496      	add	lr, r2
  40aa9a:	781a      	ldrb	r2, [r3, #0]
  40aa9c:	2a80      	cmp	r2, #128	; 0x80
  40aa9e:	f04f 32ff 	mov.w	r2, #4294967295
  40aaa2:	bf98      	it	ls
  40aaa4:	2200      	movls	r2, #0
  40aaa6:	f803 2b01 	strb.w	r2, [r3], #1
  40aaaa:	459e      	cmp	lr, r3
  40aaac:	d1f5      	bne.n	40aa9a <_lv_blend_fill+0xb2>
    if(disp->driver.set_px_cb) {
  40aaae:	f8d8 3014 	ldr.w	r3, [r8, #20]
  40aab2:	2b00      	cmp	r3, #0
  40aab4:	d07b      	beq.n	40abae <_lv_blend_fill+0x1c6>
  40aab6:	f8bd 801c 	ldrh.w	r8, [sp, #28]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40aaba:	4b7c      	ldr	r3, [pc, #496]	; (40acac <_lv_blend_fill+0x2c4>)
  40aabc:	4798      	blx	r3
  40aabe:	4606      	mov	r6, r0
  40aac0:	8abb      	ldrh	r3, [r7, #20]
  40aac2:	3301      	adds	r3, #1
  40aac4:	8a3a      	ldrh	r2, [r7, #16]
  40aac6:	1a9b      	subs	r3, r3, r2
  40aac8:	b21b      	sxth	r3, r3
  40aaca:	9307      	str	r3, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40aacc:	2c01      	cmp	r4, #1
  40aace:	d010      	beq.n	40aaf2 <_lv_blend_fill+0x10a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40aad0:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
  40aad4:	9b08      	ldr	r3, [sp, #32]
  40aad6:	1a9f      	subs	r7, r3, r2
  40aad8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40aadc:	3301      	adds	r3, #1
  40aade:	1a9b      	subs	r3, r3, r2
  40aae0:	b21b      	sxth	r3, r3
  40aae2:	9308      	str	r3, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40aae4:	f9bd 904a 	ldrsh.w	r9, [sp, #74]	; 0x4a
  40aae8:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  40aaec:	4599      	cmp	r9, r3
  40aaee:	dd4f      	ble.n	40ab90 <_lv_blend_fill+0x1a8>
  40aaf0:	e787      	b.n	40aa02 <_lv_blend_fill+0x1a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40aaf2:	f9bd 904a 	ldrsh.w	r9, [sp, #74]	; 0x4a
  40aaf6:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  40aafa:	454b      	cmp	r3, r9
  40aafc:	db81      	blt.n	40aa02 <_lv_blend_fill+0x1a>
  40aafe:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40ab02:	465d      	mov	r5, fp
  40ab04:	f8dd b018 	ldr.w	fp, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ab08:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
  40ab0c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40ab10:	429c      	cmp	r4, r3
  40ab12:	dc12      	bgt.n	40ab3a <_lv_blend_fill+0x152>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
  40ab14:	fa0f f789 	sxth.w	r7, r9
  40ab18:	9705      	str	r7, [sp, #20]
  40ab1a:	9502      	str	r5, [sp, #8]
  40ab1c:	f8ad 8004 	strh.w	r8, [sp, #4]
  40ab20:	9b05      	ldr	r3, [sp, #20]
  40ab22:	9300      	str	r3, [sp, #0]
  40ab24:	b223      	sxth	r3, r4
  40ab26:	4652      	mov	r2, sl
  40ab28:	4659      	mov	r1, fp
  40ab2a:	4630      	mov	r0, r6
  40ab2c:	6977      	ldr	r7, [r6, #20]
  40ab2e:	47b8      	blx	r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ab30:	3401      	adds	r4, #1
  40ab32:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40ab36:	429c      	cmp	r4, r3
  40ab38:	ddef      	ble.n	40ab1a <_lv_blend_fill+0x132>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ab3a:	f109 0901 	add.w	r9, r9, #1
  40ab3e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  40ab42:	4599      	cmp	r9, r3
  40ab44:	dde0      	ble.n	40ab08 <_lv_blend_fill+0x120>
  40ab46:	e75c      	b.n	40aa02 <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ab48:	3401      	adds	r4, #1
  40ab4a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40ab4e:	429c      	cmp	r4, r3
  40ab50:	dc13      	bgt.n	40ab7a <_lv_blend_fill+0x192>
                if(mask_tmp[x]) {
  40ab52:	f815 3b01 	ldrb.w	r3, [r5], #1
  40ab56:	2b00      	cmp	r3, #0
  40ab58:	d0f6      	beq.n	40ab48 <_lv_blend_fill+0x160>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40ab5a:	fb03 f30b 	mul.w	r3, r3, fp
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40ab5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40ab62:	9302      	str	r3, [sp, #8]
  40ab64:	f8ad 8004 	strh.w	r8, [sp, #4]
  40ab68:	9b05      	ldr	r3, [sp, #20]
  40ab6a:	9300      	str	r3, [sp, #0]
  40ab6c:	b223      	sxth	r3, r4
  40ab6e:	9a07      	ldr	r2, [sp, #28]
  40ab70:	9906      	ldr	r1, [sp, #24]
  40ab72:	4630      	mov	r0, r6
  40ab74:	6977      	ldr	r7, [r6, #20]
  40ab76:	47b8      	blx	r7
  40ab78:	e7e6      	b.n	40ab48 <_lv_blend_fill+0x160>
  40ab7a:	464f      	mov	r7, r9
  40ab7c:	46d1      	mov	r9, sl
  40ab7e:	9b08      	ldr	r3, [sp, #32]
  40ab80:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ab82:	f109 0901 	add.w	r9, r9, #1
  40ab86:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  40ab8a:	4599      	cmp	r9, r3
  40ab8c:	f73f af39 	bgt.w	40aa02 <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ab90:	f9bd 5048 	ldrsh.w	r5, [sp, #72]	; 0x48
  40ab94:	462c      	mov	r4, r5
  40ab96:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40ab9a:	429d      	cmp	r5, r3
  40ab9c:	dcef      	bgt.n	40ab7e <_lv_blend_fill+0x196>
  40ab9e:	443d      	add	r5, r7
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40aba0:	fa0f fa89 	sxth.w	sl, r9
  40aba4:	4653      	mov	r3, sl
  40aba6:	46ca      	mov	sl, r9
  40aba8:	46b9      	mov	r9, r7
  40abaa:	9305      	str	r3, [sp, #20]
  40abac:	e7d1      	b.n	40ab52 <_lv_blend_fill+0x16a>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40abae:	f1b9 0f00 	cmp.w	r9, #0
  40abb2:	f040 840c 	bne.w	40b3ce <_lv_blend_fill+0x9e6>
  40abb6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  40abba:	4699      	mov	r9, r3
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40abbc:	4b3b      	ldr	r3, [pc, #236]	; (40acac <_lv_blend_fill+0x2c4>)
  40abbe:	4798      	blx	r3
  40abc0:	4606      	mov	r6, r0
  40abc2:	8abb      	ldrh	r3, [r7, #20]
  40abc4:	3301      	adds	r3, #1
  40abc6:	8a3f      	ldrh	r7, [r7, #16]
  40abc8:	1bdf      	subs	r7, r3, r7
  40abca:	b23f      	sxth	r7, r7
  40abcc:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
  40abd0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40abd4:	3301      	adds	r3, #1
  40abd6:	1a9b      	subs	r3, r3, r2
  40abd8:	b21b      	sxth	r3, r3
  40abda:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40abdc:	461d      	mov	r5, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40abde:	f9bd 004e 	ldrsh.w	r0, [sp, #78]	; 0x4e
  40abe2:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40abe6:	1c41      	adds	r1, r0, #1
  40abe8:	1ac9      	subs	r1, r1, r3
    int32_t draw_area_h = lv_area_get_height(draw_area);
  40abea:	b209      	sxth	r1, r1
  40abec:	910e      	str	r1, [sp, #56]	; 0x38
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40abee:	469e      	mov	lr, r3
  40abf0:	fb03 2207 	mla	r2, r3, r7, r2
  40abf4:	9906      	ldr	r1, [sp, #24]
  40abf6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
  40abfa:	9109      	str	r1, [sp, #36]	; 0x24
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40abfc:	2c01      	cmp	r4, #1
  40abfe:	d02d      	beq.n	40ac5c <_lv_blend_fill+0x274>
        if(opa > LV_OPA_MAX) {
  40ac00:	f1bb 0ffd 	cmp.w	fp, #253	; 0xfd
  40ac04:	f200 8126 	bhi.w	40ae54 <_lv_blend_fill+0x46c>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ac08:	4283      	cmp	r3, r0
  40ac0a:	f73f aefa 	bgt.w	40aa02 <_lv_blend_fill+0x1a>
        last_dest_color.full = disp_buf_first[0].full;
  40ac0e:	9b06      	ldr	r3, [sp, #24]
  40ac10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ac14:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  40ac18:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  40ac1c:	9206      	str	r2, [sp, #24]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ac1e:	f000 0107 	and.w	r1, r0, #7
  40ac22:	f3c0 3242 	ubfx	r2, r0, #13, #3
  40ac26:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40ac2a:	9207      	str	r2, [sp, #28]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ac2c:	f3c0 2204 	ubfx	r2, r0, #8, #5
  40ac30:	920a      	str	r2, [sp, #40]	; 0x28
                disp_buf_first += disp_w;
  40ac32:	007a      	lsls	r2, r7, #1
  40ac34:	920c      	str	r2, [sp, #48]	; 0x30
  40ac36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ac38:	920d      	str	r2, [sp, #52]	; 0x34
  40ac3a:	9908      	ldr	r1, [sp, #32]
  40ac3c:	3901      	subs	r1, #1
  40ac3e:	9105      	str	r1, [sp, #20]
  40ac40:	0052      	lsls	r2, r2, #1
  40ac42:	920f      	str	r2, [sp, #60]	; 0x3c
  40ac44:	4619      	mov	r1, r3
  40ac46:	f04f 0c00 	mov.w	ip, #0
  40ac4a:	4662      	mov	r2, ip
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40ac4c:	b280      	uxth	r0, r0
  40ac4e:	9008      	str	r0, [sp, #32]
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40ac50:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  40ac54:	950e      	str	r5, [sp, #56]	; 0x38
  40ac56:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40ac5a:	e3af      	b.n	40b3bc <_lv_blend_fill+0x9d4>
        if(opa > LV_OPA_MAX) {
  40ac5c:	f1bb 0ffd 	cmp.w	fp, #253	; 0xfd
  40ac60:	d92e      	bls.n	40acc0 <_lv_blend_fill+0x2d8>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40ac62:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  40ac64:	b123      	cbz	r3, 40ac70 <_lv_blend_fill+0x288>
  40ac66:	a812      	add	r0, sp, #72	; 0x48
  40ac68:	4b13      	ldr	r3, [pc, #76]	; (40acb8 <_lv_blend_fill+0x2d0>)
  40ac6a:	4798      	blx	r3
  40ac6c:	28f0      	cmp	r0, #240	; 0xf0
  40ac6e:	d812      	bhi.n	40ac96 <_lv_blend_fill+0x2ae>
            for(y = 0; y < draw_area_h; y++) {
  40ac70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ac72:	2b00      	cmp	r3, #0
  40ac74:	f77f aec5 	ble.w	40aa02 <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
  40ac78:	007f      	lsls	r7, r7, #1
  40ac7a:	2400      	movs	r4, #0
                lv_color_fill(disp_buf_first, color, draw_area_w);
  40ac7c:	4d0f      	ldr	r5, [pc, #60]	; (40acbc <_lv_blend_fill+0x2d4>)
  40ac7e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  40ac82:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40ac84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ac86:	4649      	mov	r1, r9
  40ac88:	4630      	mov	r0, r6
  40ac8a:	47a8      	blx	r5
                disp_buf_first += disp_w;
  40ac8c:	443e      	add	r6, r7
            for(y = 0; y < draw_area_h; y++) {
  40ac8e:	3401      	adds	r4, #1
  40ac90:	45a0      	cmp	r8, r4
  40ac92:	d1f7      	bne.n	40ac84 <_lv_blend_fill+0x29c>
  40ac94:	e6b5      	b.n	40aa02 <_lv_blend_fill+0x1a>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
  40ac96:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  40ac9a:	f8ad 3000 	strh.w	r3, [sp]
  40ac9e:	6af4      	ldr	r4, [r6, #44]	; 0x2c
  40aca0:	ab12      	add	r3, sp, #72	; 0x48
  40aca2:	463a      	mov	r2, r7
  40aca4:	9906      	ldr	r1, [sp, #24]
  40aca6:	4630      	mov	r0, r6
  40aca8:	47a0      	blx	r4
  40acaa:	e6aa      	b.n	40aa02 <_lv_blend_fill+0x1a>
  40acac:	00408f81 	.word	0x00408f81
  40acb0:	00414199 	.word	0x00414199
  40acb4:	00414957 	.word	0x00414957
  40acb8:	0041493b 	.word	0x0041493b
  40acbc:	00414f8b 	.word	0x00414f8b
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40acc0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  40acc2:	b383      	cbz	r3, 40ad26 <_lv_blend_fill+0x33e>
  40acc4:	a812      	add	r0, sp, #72	; 0x48
  40acc6:	4b9f      	ldr	r3, [pc, #636]	; (40af44 <_lv_blend_fill+0x55c>)
  40acc8:	4798      	blx	r3
  40acca:	28f0      	cmp	r0, #240	; 0xf0
  40accc:	d92b      	bls.n	40ad26 <_lv_blend_fill+0x33e>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
  40acce:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40acd0:	2800      	cmp	r0, #0
  40acd2:	dd0c      	ble.n	40acee <_lv_blend_fill+0x306>
  40acd4:	f8bd 801c 	ldrh.w	r8, [sp, #28]
  40acd8:	4a9b      	ldr	r2, [pc, #620]	; (40af48 <_lv_blend_fill+0x560>)
  40acda:	1e93      	subs	r3, r2, #2
  40acdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40ace0:	4401      	add	r1, r0
  40ace2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  40ace6:	f823 8f02 	strh.w	r8, [r3, #2]!
  40acea:	429a      	cmp	r2, r3
  40acec:	d1fb      	bne.n	40ace6 <_lv_blend_fill+0x2fe>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40acee:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
  40acf2:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  40acf6:	429d      	cmp	r5, r3
  40acf8:	f73f ae83 	bgt.w	40aa02 <_lv_blend_fill+0x1a>
                    disp_buf_first += disp_w;
  40acfc:	ea4f 0847 	mov.w	r8, r7, lsl #1
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
  40ad00:	f8df a244 	ldr.w	sl, [pc, #580]	; 40af48 <_lv_blend_fill+0x560>
  40ad04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40ad08:	465c      	mov	r4, fp
  40ad0a:	9400      	str	r4, [sp, #0]
  40ad0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ad0e:	4652      	mov	r2, sl
  40ad10:	4649      	mov	r1, r9
  40ad12:	4630      	mov	r0, r6
  40ad14:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  40ad16:	47b8      	blx	r7
                    disp_buf_first += disp_w;
  40ad18:	44c1      	add	r9, r8
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ad1a:	3501      	adds	r5, #1
  40ad1c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  40ad20:	429d      	cmp	r5, r3
  40ad22:	ddf2      	ble.n	40ad0a <_lv_blend_fill+0x322>
  40ad24:	e66d      	b.n	40aa02 <_lv_blend_fill+0x1a>
  40ad26:	f8bd 101c 	ldrh.w	r1, [sp, #28]
  40ad2a:	f001 0207 	and.w	r2, r1, #7
  40ad2e:	f3c1 08c4 	ubfx	r8, r1, #3, #5
  40ad32:	f3c1 2904 	ubfx	r9, r1, #8, #5
  40ad36:	f3c1 3042 	ubfx	r0, r1, #13, #3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ad3a:	fb0b f308 	mul.w	r3, fp, r8
  40ad3e:	3380      	adds	r3, #128	; 0x80
  40ad40:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40ad44:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40ad48:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ad4c:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
  40ad50:	fb0b f300 	mul.w	r3, fp, r0
  40ad54:	3380      	adds	r3, #128	; 0x80
  40ad56:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40ad5a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40ad5e:	f3c3 6e82 	ubfx	lr, r3, #26, #3
  40ad62:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ad66:	fb0b f209 	mul.w	r2, fp, r9
  40ad6a:	3280      	adds	r2, #128	; 0x80
  40ad6c:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  40ad70:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  40ad74:	f3c2 52c4 	ubfx	r2, r2, #23, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40ad78:	fa1f f48b 	uxth.w	r4, fp
  40ad7c:	fb08 f804 	mul.w	r8, r8, r4
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40ad80:	fb14 f000 	smulbb	r0, r4, r0
  40ad84:	fa1f fc80 	uxth.w	ip, r0
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40ad88:	fb09 f904 	mul.w	r9, r9, r4
            lv_opa_t opa_inv = 255 - opa;
  40ad8c:	ea6f 0a0b 	mvn.w	sl, fp
  40ad90:	fa5f fa8a 	uxtb.w	sl, sl
            for(y = 0; y < draw_area_h; y++) {
  40ad94:	980e      	ldr	r0, [sp, #56]	; 0x38
  40ad96:	2800      	cmp	r0, #0
  40ad98:	f77f ae33 	ble.w	40aa02 <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
  40ad9c:	0078      	lsls	r0, r7, #1
  40ad9e:	9007      	str	r0, [sp, #28]
  40ada0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40ada2:	0040      	lsls	r0, r0, #1
  40ada4:	9006      	str	r0, [sp, #24]
  40ada6:	2000      	movs	r0, #0
  40ada8:	9005      	str	r0, [sp, #20]
  40adaa:	4606      	mov	r6, r0
  40adac:	e04a      	b.n	40ae44 <_lv_blend_fill+0x45c>
                    disp_buf_first[x] = last_res_color;
  40adae:	f890 b000 	ldrb.w	fp, [r0]
  40adb2:	f36e 0b02 	bfi	fp, lr, #0, #3
  40adb6:	f361 0bc7 	bfi	fp, r1, #3, #5
  40adba:	f880 b000 	strb.w	fp, [r0]
  40adbe:	f890 b001 	ldrb.w	fp, [r0, #1]
  40adc2:	f362 0b04 	bfi	fp, r2, #0, #5
  40adc6:	f363 1b47 	bfi	fp, r3, #5, #3
  40adca:	f880 b001 	strb.w	fp, [r0, #1]
                    if(last_dest_color.full != disp_buf_first[x].full) {
  40adce:	46b3      	mov	fp, r6
                for(x = 0; x < draw_area_w; x++) {
  40add0:	42bc      	cmp	r4, r7
  40add2:	d02c      	beq.n	40ae2e <_lv_blend_fill+0x446>
                    if(last_dest_color.full != disp_buf_first[x].full) {
  40add4:	4620      	mov	r0, r4
  40add6:	f834 6b02 	ldrh.w	r6, [r4], #2
  40adda:	455e      	cmp	r6, fp
  40addc:	d0e7      	beq.n	40adae <_lv_blend_fill+0x3c6>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40adde:	7802      	ldrb	r2, [r0, #0]
  40ade0:	08d3      	lsrs	r3, r2, #3
  40ade2:	fb0a 8303 	mla	r3, sl, r3, r8
  40ade6:	3380      	adds	r3, #128	; 0x80
  40ade8:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40adec:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40adf0:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40adf4:	f002 0e07 	and.w	lr, r2, #7
  40adf8:	7842      	ldrb	r2, [r0, #1]
  40adfa:	0953      	lsrs	r3, r2, #5
  40adfc:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
  40ae00:	fb0a c303 	mla	r3, sl, r3, ip
  40ae04:	3380      	adds	r3, #128	; 0x80
  40ae06:	eb03 2e03 	add.w	lr, r3, r3, lsl #8
  40ae0a:	eb03 13ce 	add.w	r3, r3, lr, lsl #7
  40ae0e:	f3c3 6e82 	ubfx	lr, r3, #26, #3
  40ae12:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40ae16:	f002 021f 	and.w	r2, r2, #31
  40ae1a:	fb0a 9202 	mla	r2, sl, r2, r9
  40ae1e:	3280      	adds	r2, #128	; 0x80
  40ae20:	eb02 2b02 	add.w	fp, r2, r2, lsl #8
  40ae24:	eb02 12cb 	add.w	r2, r2, fp, lsl #7
  40ae28:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40ae2c:	e7bf      	b.n	40adae <_lv_blend_fill+0x3c6>
                disp_buf_first += disp_w;
  40ae2e:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ae30:	9c07      	ldr	r4, [sp, #28]
  40ae32:	4420      	add	r0, r4
  40ae34:	9009      	str	r0, [sp, #36]	; 0x24
            for(y = 0; y < draw_area_h; y++) {
  40ae36:	9805      	ldr	r0, [sp, #20]
  40ae38:	3001      	adds	r0, #1
  40ae3a:	9005      	str	r0, [sp, #20]
  40ae3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40ae3e:	4284      	cmp	r4, r0
  40ae40:	f43f addf 	beq.w	40aa02 <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w; x++) {
  40ae44:	2d00      	cmp	r5, #0
  40ae46:	ddf2      	ble.n	40ae2e <_lv_blend_fill+0x446>
  40ae48:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ae4a:	4604      	mov	r4, r0
  40ae4c:	9f06      	ldr	r7, [sp, #24]
  40ae4e:	19c7      	adds	r7, r0, r7
  40ae50:	46b3      	mov	fp, r6
  40ae52:	e7bf      	b.n	40add4 <_lv_blend_fill+0x3ec>
            for(y = 0; y < draw_area_h; y++) {
  40ae54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ae56:	2b00      	cmp	r3, #0
  40ae58:	f77f add3 	ble.w	40aa02 <_lv_blend_fill+0x1a>
        int32_t x_end4 = draw_area_w - 4;
  40ae5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ae5e:	f1a3 0b04 	sub.w	fp, r3, #4
                disp_buf_first += disp_w;
  40ae62:	007b      	lsls	r3, r7, #1
  40ae64:	9311      	str	r3, [sp, #68]	; 0x44
  40ae66:	9b08      	ldr	r3, [sp, #32]
  40ae68:	930a      	str	r3, [sp, #40]	; 0x28
  40ae6a:	2300      	movs	r3, #0
  40ae6c:	930c      	str	r3, [sp, #48]	; 0x30
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ae6e:	464a      	mov	r2, r9
  40ae70:	4613      	mov	r3, r2
  40ae72:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  40ae76:	9305      	str	r3, [sp, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ae78:	4613      	mov	r3, r2
  40ae7a:	f3c3 0302 	ubfx	r3, r3, #0, #3
  40ae7e:	9306      	str	r3, [sp, #24]
  40ae80:	4613      	mov	r3, r2
  40ae82:	f3c3 3342 	ubfx	r3, r3, #13, #3
  40ae86:	9307      	str	r3, [sp, #28]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ae88:	4613      	mov	r3, r2
  40ae8a:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40ae8e:	9308      	str	r3, [sp, #32]
  40ae90:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40ae94:	46cb      	mov	fp, r9
  40ae96:	e21a      	b.n	40b2ce <_lv_blend_fill+0x8e6>
                    FILL_NORMAL_MASK_PX(x, color)
  40ae98:	f8ac b000 	strh.w	fp, [ip]
  40ae9c:	463b      	mov	r3, r7
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40ae9e:	3101      	adds	r1, #1
  40aea0:	428d      	cmp	r5, r1
  40aea2:	f000 8380 	beq.w	40b5a6 <_lv_blend_fill+0xbbe>
  40aea6:	f10c 0c02 	add.w	ip, ip, #2
  40aeaa:	f017 0f03 	tst.w	r7, #3
  40aeae:	f000 8389 	beq.w	40b5c4 <_lv_blend_fill+0xbdc>
                    FILL_NORMAL_MASK_PX(x, color)
  40aeb2:	f817 3b01 	ldrb.w	r3, [r7], #1
  40aeb6:	2b00      	cmp	r3, #0
  40aeb8:	d0f0      	beq.n	40ae9c <_lv_blend_fill+0x4b4>
  40aeba:	2bff      	cmp	r3, #255	; 0xff
  40aebc:	d0ec      	beq.n	40ae98 <_lv_blend_fill+0x4b0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40aebe:	f1c3 0eff 	rsb	lr, r3, #255	; 0xff
  40aec2:	f89c 6000 	ldrb.w	r6, [ip]
  40aec6:	08f0      	lsrs	r0, r6, #3
  40aec8:	fb0e f000 	mul.w	r0, lr, r0
  40aecc:	9a05      	ldr	r2, [sp, #20]
  40aece:	fb03 0002 	mla	r0, r3, r2, r0
  40aed2:	3080      	adds	r0, #128	; 0x80
  40aed4:	eb00 2200 	add.w	r2, r0, r0, lsl #8
  40aed8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
  40aedc:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40aee0:	9a07      	ldr	r2, [sp, #28]
  40aee2:	9c06      	ldr	r4, [sp, #24]
  40aee4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  40aee8:	f006 0907 	and.w	r9, r6, #7
  40aeec:	f89c 4001 	ldrb.w	r4, [ip, #1]
  40aef0:	ea4f 1854 	mov.w	r8, r4, lsr #5
  40aef4:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
  40aef8:	fb0e f808 	mul.w	r8, lr, r8
  40aefc:	fb03 8202 	mla	r2, r3, r2, r8
  40af00:	3280      	adds	r2, #128	; 0x80
  40af02:	eb02 2802 	add.w	r8, r2, r2, lsl #8
  40af06:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40af0a:	f004 081f 	and.w	r8, r4, #31
  40af0e:	fb0e fe08 	mul.w	lr, lr, r8
  40af12:	fb03 e30a 	mla	r3, r3, sl, lr
  40af16:	3380      	adds	r3, #128	; 0x80
  40af18:	eb03 2e03 	add.w	lr, r3, r3, lsl #8
  40af1c:	eb03 13ce 	add.w	r3, r3, lr, lsl #7
  40af20:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40af24:	ea4f 6e92 	mov.w	lr, r2, lsr #26
  40af28:	f36e 0602 	bfi	r6, lr, #0, #3
  40af2c:	f360 06c7 	bfi	r6, r0, #3, #5
  40af30:	f88c 6000 	strb.w	r6, [ip]
  40af34:	f363 0404 	bfi	r4, r3, #0, #5
  40af38:	0dd2      	lsrs	r2, r2, #23
  40af3a:	f362 1447 	bfi	r4, r2, #5, #3
  40af3e:	f88c 4001 	strb.w	r4, [ip, #1]
  40af42:	e7ab      	b.n	40ae9c <_lv_blend_fill+0x4b4>
  40af44:	0041493b 	.word	0x0041493b
  40af48:	2040c3f8 	.word	0x2040c3f8
                            disp_buf_first[x] = color;
  40af4c:	f820 bc06 	strh.w	fp, [r0, #-6]
                            disp_buf_first[x + 1] = color;
  40af50:	f820 bc04 	strh.w	fp, [r0, #-4]
                            disp_buf_first[x + 2] = color;
  40af54:	f820 bc02 	strh.w	fp, [r0, #-2]
                            disp_buf_first[x + 3] = color;
  40af58:	f8a0 b000 	strh.w	fp, [r0]
                for(; x <= x_end4; x += 4) {
  40af5c:	3104      	adds	r1, #4
  40af5e:	3304      	adds	r3, #4
  40af60:	3008      	adds	r0, #8
  40af62:	458a      	cmp	sl, r1
  40af64:	f2c0 814a 	blt.w	40b1fc <_lv_blend_fill+0x814>
  40af68:	461a      	mov	r2, r3
                    if(*mask32) {
  40af6a:	f853 4c04 	ldr.w	r4, [r3, #-4]
  40af6e:	2c00      	cmp	r4, #0
  40af70:	d0f4      	beq.n	40af5c <_lv_blend_fill+0x574>
                        if((*mask32) == 0xFFFFFFFF) {
  40af72:	f1b4 3fff 	cmp.w	r4, #4294967295
  40af76:	d0e9      	beq.n	40af4c <_lv_blend_fill+0x564>
                            FILL_NORMAL_MASK_PX(x, color)
  40af78:	f813 4c04 	ldrb.w	r4, [r3, #-4]
  40af7c:	2c00      	cmp	r4, #0
  40af7e:	d049      	beq.n	40b014 <_lv_blend_fill+0x62c>
  40af80:	2cff      	cmp	r4, #255	; 0xff
  40af82:	f000 812f 	beq.w	40b1e4 <_lv_blend_fill+0x7fc>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40af86:	f1c4 0cff 	rsb	ip, r4, #255	; 0xff
  40af8a:	f810 ec06 	ldrb.w	lr, [r0, #-6]
  40af8e:	ea4f 05de 	mov.w	r5, lr, lsr #3
  40af92:	fb0c f505 	mul.w	r5, ip, r5
  40af96:	9e05      	ldr	r6, [sp, #20]
  40af98:	fb04 5506 	mla	r5, r4, r6, r5
  40af9c:	3580      	adds	r5, #128	; 0x80
  40af9e:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  40afa2:	eb05 16c6 	add.w	r6, r5, r6, lsl #7
  40afa6:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40afaa:	960d      	str	r6, [sp, #52]	; 0x34
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40afac:	f00e 0507 	and.w	r5, lr, #7
  40afb0:	f810 7c05 	ldrb.w	r7, [r0, #-5]
  40afb4:	ea4f 1857 	mov.w	r8, r7, lsr #5
  40afb8:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
  40afbc:	fb0c f808 	mul.w	r8, ip, r8
  40afc0:	9d07      	ldr	r5, [sp, #28]
  40afc2:	462e      	mov	r6, r5
  40afc4:	9d06      	ldr	r5, [sp, #24]
  40afc6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  40afca:	fb04 8505 	mla	r5, r4, r5, r8
  40afce:	3580      	adds	r5, #128	; 0x80
  40afd0:	eb05 2805 	add.w	r8, r5, r5, lsl #8
  40afd4:	eb05 15c8 	add.w	r5, r5, r8, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40afd8:	f007 081f 	and.w	r8, r7, #31
  40afdc:	fb0c fc08 	mul.w	ip, ip, r8
  40afe0:	9e08      	ldr	r6, [sp, #32]
  40afe2:	fb04 c406 	mla	r4, r4, r6, ip
  40afe6:	3480      	adds	r4, #128	; 0x80
  40afe8:	eb04 2c04 	add.w	ip, r4, r4, lsl #8
  40afec:	eb04 14cc 	add.w	r4, r4, ip, lsl #7
  40aff0:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40aff4:	ea4f 6c95 	mov.w	ip, r5, lsr #26
  40aff8:	f36c 0e02 	bfi	lr, ip, #0, #3
  40affc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40affe:	f366 0ec7 	bfi	lr, r6, #3, #5
  40b002:	f800 ec06 	strb.w	lr, [r0, #-6]
  40b006:	f364 0704 	bfi	r7, r4, #0, #5
  40b00a:	0ded      	lsrs	r5, r5, #23
  40b00c:	f365 1747 	bfi	r7, r5, #5, #3
  40b010:	f800 7c05 	strb.w	r7, [r0, #-5]
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40b014:	f812 4c03 	ldrb.w	r4, [r2, #-3]
  40b018:	2c00      	cmp	r4, #0
  40b01a:	d049      	beq.n	40b0b0 <_lv_blend_fill+0x6c8>
  40b01c:	2cff      	cmp	r4, #255	; 0xff
  40b01e:	f000 80e4 	beq.w	40b1ea <_lv_blend_fill+0x802>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b022:	f1c4 0cff 	rsb	ip, r4, #255	; 0xff
  40b026:	f810 ec04 	ldrb.w	lr, [r0, #-4]
  40b02a:	ea4f 05de 	mov.w	r5, lr, lsr #3
  40b02e:	fb0c f505 	mul.w	r5, ip, r5
  40b032:	9e05      	ldr	r6, [sp, #20]
  40b034:	fb04 5506 	mla	r5, r4, r6, r5
  40b038:	3580      	adds	r5, #128	; 0x80
  40b03a:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  40b03e:	eb05 16c6 	add.w	r6, r5, r6, lsl #7
  40b042:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b046:	960d      	str	r6, [sp, #52]	; 0x34
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b048:	f00e 0507 	and.w	r5, lr, #7
  40b04c:	f810 7c03 	ldrb.w	r7, [r0, #-3]
  40b050:	ea4f 1857 	mov.w	r8, r7, lsr #5
  40b054:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
  40b058:	fb0c f808 	mul.w	r8, ip, r8
  40b05c:	9d07      	ldr	r5, [sp, #28]
  40b05e:	462e      	mov	r6, r5
  40b060:	9d06      	ldr	r5, [sp, #24]
  40b062:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  40b066:	fb04 8505 	mla	r5, r4, r5, r8
  40b06a:	3580      	adds	r5, #128	; 0x80
  40b06c:	eb05 2805 	add.w	r8, r5, r5, lsl #8
  40b070:	eb05 15c8 	add.w	r5, r5, r8, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b074:	f007 081f 	and.w	r8, r7, #31
  40b078:	fb0c fc08 	mul.w	ip, ip, r8
  40b07c:	9e08      	ldr	r6, [sp, #32]
  40b07e:	fb04 c406 	mla	r4, r4, r6, ip
  40b082:	3480      	adds	r4, #128	; 0x80
  40b084:	eb04 2c04 	add.w	ip, r4, r4, lsl #8
  40b088:	eb04 14cc 	add.w	r4, r4, ip, lsl #7
  40b08c:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b090:	ea4f 6c95 	mov.w	ip, r5, lsr #26
  40b094:	f36c 0e02 	bfi	lr, ip, #0, #3
  40b098:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40b09a:	f366 0ec7 	bfi	lr, r6, #3, #5
  40b09e:	f800 ec04 	strb.w	lr, [r0, #-4]
  40b0a2:	f364 0704 	bfi	r7, r4, #0, #5
  40b0a6:	0ded      	lsrs	r5, r5, #23
  40b0a8:	f365 1747 	bfi	r7, r5, #5, #3
  40b0ac:	f800 7c03 	strb.w	r7, [r0, #-3]
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40b0b0:	f812 4c02 	ldrb.w	r4, [r2, #-2]
  40b0b4:	2c00      	cmp	r4, #0
  40b0b6:	d049      	beq.n	40b14c <_lv_blend_fill+0x764>
  40b0b8:	2cff      	cmp	r4, #255	; 0xff
  40b0ba:	f000 8099 	beq.w	40b1f0 <_lv_blend_fill+0x808>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b0be:	f1c4 0cff 	rsb	ip, r4, #255	; 0xff
  40b0c2:	f810 ec02 	ldrb.w	lr, [r0, #-2]
  40b0c6:	ea4f 05de 	mov.w	r5, lr, lsr #3
  40b0ca:	fb0c f505 	mul.w	r5, ip, r5
  40b0ce:	9e05      	ldr	r6, [sp, #20]
  40b0d0:	fb04 5506 	mla	r5, r4, r6, r5
  40b0d4:	3580      	adds	r5, #128	; 0x80
  40b0d6:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  40b0da:	eb05 16c6 	add.w	r6, r5, r6, lsl #7
  40b0de:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b0e2:	960d      	str	r6, [sp, #52]	; 0x34
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b0e4:	f00e 0507 	and.w	r5, lr, #7
  40b0e8:	f810 7c01 	ldrb.w	r7, [r0, #-1]
  40b0ec:	ea4f 1857 	mov.w	r8, r7, lsr #5
  40b0f0:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
  40b0f4:	fb0c f808 	mul.w	r8, ip, r8
  40b0f8:	9d07      	ldr	r5, [sp, #28]
  40b0fa:	462e      	mov	r6, r5
  40b0fc:	9d06      	ldr	r5, [sp, #24]
  40b0fe:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  40b102:	fb04 8505 	mla	r5, r4, r5, r8
  40b106:	3580      	adds	r5, #128	; 0x80
  40b108:	eb05 2805 	add.w	r8, r5, r5, lsl #8
  40b10c:	eb05 15c8 	add.w	r5, r5, r8, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b110:	f007 081f 	and.w	r8, r7, #31
  40b114:	fb0c fc08 	mul.w	ip, ip, r8
  40b118:	9e08      	ldr	r6, [sp, #32]
  40b11a:	fb04 c406 	mla	r4, r4, r6, ip
  40b11e:	3480      	adds	r4, #128	; 0x80
  40b120:	eb04 2c04 	add.w	ip, r4, r4, lsl #8
  40b124:	eb04 14cc 	add.w	r4, r4, ip, lsl #7
  40b128:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b12c:	ea4f 6c95 	mov.w	ip, r5, lsr #26
  40b130:	f36c 0e02 	bfi	lr, ip, #0, #3
  40b134:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40b136:	f366 0ec7 	bfi	lr, r6, #3, #5
  40b13a:	f800 ec02 	strb.w	lr, [r0, #-2]
  40b13e:	f364 0704 	bfi	r7, r4, #0, #5
  40b142:	0ded      	lsrs	r5, r5, #23
  40b144:	f365 1747 	bfi	r7, r5, #5, #3
  40b148:	f800 7c01 	strb.w	r7, [r0, #-1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40b14c:	f812 4c01 	ldrb.w	r4, [r2, #-1]
  40b150:	2c00      	cmp	r4, #0
  40b152:	f43f af03 	beq.w	40af5c <_lv_blend_fill+0x574>
  40b156:	2cff      	cmp	r4, #255	; 0xff
  40b158:	d04d      	beq.n	40b1f6 <_lv_blend_fill+0x80e>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b15a:	f1c4 0cff 	rsb	ip, r4, #255	; 0xff
  40b15e:	f890 e000 	ldrb.w	lr, [r0]
  40b162:	ea4f 05de 	mov.w	r5, lr, lsr #3
  40b166:	fb0c f505 	mul.w	r5, ip, r5
  40b16a:	9e05      	ldr	r6, [sp, #20]
  40b16c:	fb04 5506 	mla	r5, r4, r6, r5
  40b170:	3580      	adds	r5, #128	; 0x80
  40b172:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  40b176:	eb05 16c6 	add.w	r6, r5, r6, lsl #7
  40b17a:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b17e:	960d      	str	r6, [sp, #52]	; 0x34
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b180:	9d07      	ldr	r5, [sp, #28]
  40b182:	9f06      	ldr	r7, [sp, #24]
  40b184:	eb05 05c7 	add.w	r5, r5, r7, lsl #3
  40b188:	f00e 0907 	and.w	r9, lr, #7
  40b18c:	7847      	ldrb	r7, [r0, #1]
  40b18e:	ea4f 1857 	mov.w	r8, r7, lsr #5
  40b192:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
  40b196:	fb0c f808 	mul.w	r8, ip, r8
  40b19a:	fb04 8505 	mla	r5, r4, r5, r8
  40b19e:	3580      	adds	r5, #128	; 0x80
  40b1a0:	eb05 2805 	add.w	r8, r5, r5, lsl #8
  40b1a4:	eb05 15c8 	add.w	r5, r5, r8, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b1a8:	f007 081f 	and.w	r8, r7, #31
  40b1ac:	fb0c fc08 	mul.w	ip, ip, r8
  40b1b0:	9e08      	ldr	r6, [sp, #32]
  40b1b2:	fb04 c406 	mla	r4, r4, r6, ip
  40b1b6:	3480      	adds	r4, #128	; 0x80
  40b1b8:	eb04 2c04 	add.w	ip, r4, r4, lsl #8
  40b1bc:	eb04 14cc 	add.w	r4, r4, ip, lsl #7
  40b1c0:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b1c4:	ea4f 6c95 	mov.w	ip, r5, lsr #26
  40b1c8:	f36c 0e02 	bfi	lr, ip, #0, #3
  40b1cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40b1ce:	f366 0ec7 	bfi	lr, r6, #3, #5
  40b1d2:	f880 e000 	strb.w	lr, [r0]
  40b1d6:	f364 0704 	bfi	r7, r4, #0, #5
  40b1da:	0ded      	lsrs	r5, r5, #23
  40b1dc:	f365 1747 	bfi	r7, r5, #5, #3
  40b1e0:	7047      	strb	r7, [r0, #1]
  40b1e2:	e6bb      	b.n	40af5c <_lv_blend_fill+0x574>
                            FILL_NORMAL_MASK_PX(x, color)
  40b1e4:	f820 bc06 	strh.w	fp, [r0, #-6]
  40b1e8:	e714      	b.n	40b014 <_lv_blend_fill+0x62c>
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40b1ea:	f820 bc04 	strh.w	fp, [r0, #-4]
  40b1ee:	e75f      	b.n	40b0b0 <_lv_blend_fill+0x6c8>
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40b1f0:	f820 bc02 	strh.w	fp, [r0, #-2]
  40b1f4:	e7aa      	b.n	40b14c <_lv_blend_fill+0x764>
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40b1f6:	f8a0 b000 	strh.w	fp, [r0]
  40b1fa:	e6af      	b.n	40af5c <_lv_blend_fill+0x574>
  40b1fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
                for(; x < draw_area_w ; x++) {
  40b1fe:	428d      	cmp	r5, r1
  40b200:	dd56      	ble.n	40b2b0 <_lv_blend_fill+0x8c8>
  40b202:	1e53      	subs	r3, r2, #1
  40b204:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b206:	eb02 0c41 	add.w	ip, r2, r1, lsl #1
  40b20a:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b20e:	e006      	b.n	40b21e <_lv_blend_fill+0x836>
                    FILL_NORMAL_MASK_PX(x, color)
  40b210:	f8ac b000 	strh.w	fp, [ip]
                for(; x < draw_area_w ; x++) {
  40b214:	3101      	adds	r1, #1
  40b216:	f10c 0c02 	add.w	ip, ip, #2
  40b21a:	428d      	cmp	r5, r1
  40b21c:	dd48      	ble.n	40b2b0 <_lv_blend_fill+0x8c8>
                    FILL_NORMAL_MASK_PX(x, color)
  40b21e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  40b222:	2a00      	cmp	r2, #0
  40b224:	d0f6      	beq.n	40b214 <_lv_blend_fill+0x82c>
  40b226:	2aff      	cmp	r2, #255	; 0xff
  40b228:	d0f2      	beq.n	40b210 <_lv_blend_fill+0x828>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b22a:	f1c2 0eff 	rsb	lr, r2, #255	; 0xff
  40b22e:	f89c 7000 	ldrb.w	r7, [ip]
  40b232:	08fc      	lsrs	r4, r7, #3
  40b234:	fb0e f404 	mul.w	r4, lr, r4
  40b238:	9805      	ldr	r0, [sp, #20]
  40b23a:	fb02 4400 	mla	r4, r2, r0, r4
  40b23e:	3480      	adds	r4, #128	; 0x80
  40b240:	eb04 2004 	add.w	r0, r4, r4, lsl #8
  40b244:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
  40b248:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b24c:	9807      	ldr	r0, [sp, #28]
  40b24e:	9e06      	ldr	r6, [sp, #24]
  40b250:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
  40b254:	f007 0907 	and.w	r9, r7, #7
  40b258:	f89c 6001 	ldrb.w	r6, [ip, #1]
  40b25c:	ea4f 1856 	mov.w	r8, r6, lsr #5
  40b260:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
  40b264:	fb0e f808 	mul.w	r8, lr, r8
  40b268:	fb02 8000 	mla	r0, r2, r0, r8
  40b26c:	3080      	adds	r0, #128	; 0x80
  40b26e:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b272:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b276:	f006 081f 	and.w	r8, r6, #31
  40b27a:	fb0e fe08 	mul.w	lr, lr, r8
  40b27e:	fb02 e20a 	mla	r2, r2, sl, lr
  40b282:	3280      	adds	r2, #128	; 0x80
  40b284:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  40b288:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  40b28c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b290:	ea4f 6e90 	mov.w	lr, r0, lsr #26
  40b294:	f36e 0702 	bfi	r7, lr, #0, #3
  40b298:	f364 07c7 	bfi	r7, r4, #3, #5
  40b29c:	f88c 7000 	strb.w	r7, [ip]
  40b2a0:	f362 0604 	bfi	r6, r2, #0, #5
  40b2a4:	0dc0      	lsrs	r0, r0, #23
  40b2a6:	f360 1647 	bfi	r6, r0, #5, #3
  40b2aa:	f88c 6001 	strb.w	r6, [ip, #1]
  40b2ae:	e7b1      	b.n	40b214 <_lv_blend_fill+0x82c>
                disp_buf_first += disp_w;
  40b2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b2b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40b2b4:	4413      	add	r3, r2
  40b2b6:	9309      	str	r3, [sp, #36]	; 0x24
  40b2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b2ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b2bc:	4413      	add	r3, r2
  40b2be:	930a      	str	r3, [sp, #40]	; 0x28
            for(y = 0; y < draw_area_h; y++) {
  40b2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b2c2:	3301      	adds	r3, #1
  40b2c4:	930c      	str	r3, [sp, #48]	; 0x30
  40b2c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40b2c8:	429a      	cmp	r2, r3
  40b2ca:	f43f ab9a 	beq.w	40aa02 <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40b2ce:	2d00      	cmp	r5, #0
  40b2d0:	f340 8167 	ble.w	40b5a2 <_lv_blend_fill+0xbba>
  40b2d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b2d6:	f017 0f03 	tst.w	r7, #3
  40b2da:	f000 8171 	beq.w	40b5c0 <_lv_blend_fill+0xbd8>
  40b2de:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b2e2:	2100      	movs	r1, #0
  40b2e4:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b2e8:	e5e3      	b.n	40aeb2 <_lv_blend_fill+0x4ca>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40b2ea:	2aff      	cmp	r2, #255	; 0xff
  40b2ec:	d002      	beq.n	40b2f4 <_lv_blend_fill+0x90c>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40b2ee:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40b2f2:	e018      	b.n	40b326 <_lv_blend_fill+0x93e>
  40b2f4:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40b2f8:	8822      	ldrh	r2, [r4, #0]
  40b2fa:	429a      	cmp	r2, r3
  40b2fc:	d113      	bne.n	40b326 <_lv_blend_fill+0x93e>
  40b2fe:	e001      	b.n	40b304 <_lv_blend_fill+0x91c>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40b300:	9908      	ldr	r1, [sp, #32]
                            last_dest_color.full = disp_buf_first[x].full;
  40b302:	8823      	ldrh	r3, [r4, #0]
                        disp_buf_first[x] = last_res_color;
  40b304:	8021      	strh	r1, [r4, #0]
  40b306:	4602      	mov	r2, r0
  40b308:	3402      	adds	r4, #2
                for(x = 0; x < draw_area_w; x++) {
  40b30a:	4544      	cmp	r4, r8
  40b30c:	d049      	beq.n	40b3a2 <_lv_blend_fill+0x9ba>
                    if(*mask_tmp_x) {
  40b30e:	f817 0f01 	ldrb.w	r0, [r7, #1]!
  40b312:	2800      	cmp	r0, #0
  40b314:	d0f8      	beq.n	40b308 <_lv_blend_fill+0x920>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40b316:	4290      	cmp	r0, r2
  40b318:	d0ee      	beq.n	40b2f8 <_lv_blend_fill+0x910>
  40b31a:	28ff      	cmp	r0, #255	; 0xff
  40b31c:	d0e5      	beq.n	40b2ea <_lv_blend_fill+0x902>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
  40b31e:	fb0b fc00 	mul.w	ip, fp, r0
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40b322:	f3cc 2c07 	ubfx	ip, ip, #8, #8
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40b326:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
  40b32a:	d0e9      	beq.n	40b300 <_lv_blend_fill+0x918>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b32c:	f1cc 05ff 	rsb	r5, ip, #255	; 0xff
  40b330:	7822      	ldrb	r2, [r4, #0]
  40b332:	08d1      	lsrs	r1, r2, #3
  40b334:	9b06      	ldr	r3, [sp, #24]
  40b336:	fb0c f603 	mul.w	r6, ip, r3
  40b33a:	fb05 6101 	mla	r1, r5, r1, r6
  40b33e:	3180      	adds	r1, #128	; 0x80
  40b340:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  40b344:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
  40b348:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b34c:	f002 0607 	and.w	r6, r2, #7
  40b350:	7863      	ldrb	r3, [r4, #1]
  40b352:	095a      	lsrs	r2, r3, #5
  40b354:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  40b358:	9e07      	ldr	r6, [sp, #28]
  40b35a:	fb06 f60c 	mul.w	r6, r6, ip
  40b35e:	fb05 6202 	mla	r2, r5, r2, r6
  40b362:	3280      	adds	r2, #128	; 0x80
  40b364:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40b368:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b36c:	f003 031f 	and.w	r3, r3, #31
  40b370:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40b372:	fb06 f60c 	mul.w	r6, r6, ip
  40b376:	fb05 6303 	mla	r3, r5, r3, r6
  40b37a:	3380      	adds	r3, #128	; 0x80
  40b37c:	eb03 2503 	add.w	r5, r3, r3, lsl #8
  40b380:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
  40b384:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b388:	0e95      	lsrs	r5, r2, #26
  40b38a:	f365 0a02 	bfi	sl, r5, #0, #3
  40b38e:	f361 0ac7 	bfi	sl, r1, #3, #5
  40b392:	f363 2a0c 	bfi	sl, r3, #8, #5
  40b396:	0dd2      	lsrs	r2, r2, #23
  40b398:	f362 3a4f 	bfi	sl, r2, #13, #3
  40b39c:	fa1f f18a 	uxth.w	r1, sl
  40b3a0:	e7af      	b.n	40b302 <_lv_blend_fill+0x91a>
                disp_buf_first += disp_w;
  40b3a2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b3a4:	4481      	add	r9, r0
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b3a6:	f10e 0e01 	add.w	lr, lr, #1
  40b3aa:	9805      	ldr	r0, [sp, #20]
  40b3ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40b3ae:	4420      	add	r0, r4
  40b3b0:	9005      	str	r0, [sp, #20]
  40b3b2:	f9bd 004e 	ldrsh.w	r0, [sp, #78]	; 0x4e
  40b3b6:	4586      	cmp	lr, r0
  40b3b8:	f73f ab23 	bgt.w	40aa02 <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w; x++) {
  40b3bc:	980e      	ldr	r0, [sp, #56]	; 0x38
  40b3be:	2800      	cmp	r0, #0
  40b3c0:	ddef      	ble.n	40b3a2 <_lv_blend_fill+0x9ba>
  40b3c2:	464c      	mov	r4, r9
  40b3c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40b3c6:	eb09 0800 	add.w	r8, r9, r0
  40b3ca:	9f05      	ldr	r7, [sp, #20]
  40b3cc:	e79f      	b.n	40b30e <_lv_blend_fill+0x926>
  40b3ce:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  40b3d2:	f8ad 3014 	strh.w	r3, [sp, #20]
    switch(mode) {
  40b3d6:	f1b9 0f01 	cmp.w	r9, #1
  40b3da:	d035      	beq.n	40b448 <_lv_blend_fill+0xa60>
  40b3dc:	f1b9 0f02 	cmp.w	r9, #2
  40b3e0:	f47f ab0f 	bne.w	40aa02 <_lv_blend_fill+0x1a>
            blend_fp = color_blend_true_color_subtractive;
  40b3e4:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 40b5d0 <_lv_blend_fill+0xbe8>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b3e8:	f8b7 a014 	ldrh.w	sl, [r7, #20]
  40b3ec:	f10a 0a01 	add.w	sl, sl, #1
  40b3f0:	8a3b      	ldrh	r3, [r7, #16]
  40b3f2:	ebaa 0a03 	sub.w	sl, sl, r3
  40b3f6:	fa0f fa8a 	sxth.w	sl, sl
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40b3fa:	4607      	mov	r7, r0
  40b3fc:	fb00 f30a 	mul.w	r3, r0, sl
  40b400:	9a06      	ldr	r2, [sp, #24]
  40b402:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  40b406:	920a      	str	r2, [sp, #40]	; 0x28
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b408:	2c01      	cmp	r4, #1
  40b40a:	d020      	beq.n	40b44e <_lv_blend_fill+0xa66>
  40b40c:	3101      	adds	r1, #1
  40b40e:	eba1 0c0c 	sub.w	ip, r1, ip
  40b412:	fa0f f28c 	sxth.w	r2, ip
  40b416:	9209      	str	r2, [sp, #36]	; 0x24
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40b418:	9a08      	ldr	r2, [sp, #32]
  40b41a:	eba2 0906 	sub.w	r9, r2, r6
        last_dest_color.full = disp_buf_tmp[0].full;
  40b41e:	9a06      	ldr	r2, [sp, #24]
  40b420:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b424:	42a8      	cmp	r0, r5
  40b426:	f73f aaec 	bgt.w	40aa02 <_lv_blend_fill+0x1a>
            disp_buf_tmp += disp_w;
  40b42a:	ea4f 034a 	mov.w	r3, sl, lsl #1
  40b42e:	9308      	str	r3, [sp, #32]
  40b430:	4610      	mov	r0, r2
  40b432:	2100      	movs	r1, #0
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40b434:	f8cd b018 	str.w	fp, [sp, #24]
  40b438:	463b      	mov	r3, r7
  40b43a:	4647      	mov	r7, r8
  40b43c:	f8cd b01c 	str.w	fp, [sp, #28]
  40b440:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40b444:	4698      	mov	r8, r3
  40b446:	e0a0      	b.n	40b58a <_lv_blend_fill+0xba2>
            blend_fp = color_blend_true_color_additive;
  40b448:	f8df 8188 	ldr.w	r8, [pc, #392]	; 40b5d4 <_lv_blend_fill+0xbec>
  40b44c:	e7cc      	b.n	40b3e8 <_lv_blend_fill+0xa00>
  40b44e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
  40b452:	f006 0407 	and.w	r4, r6, #7
  40b456:	f3c6 01c4 	ubfx	r1, r6, #3, #5
  40b45a:	f3c6 2204 	ubfx	r2, r6, #8, #5
  40b45e:	f3c6 3342 	ubfx	r3, r6, #13, #3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b462:	fb0b f101 	mul.w	r1, fp, r1
  40b466:	3180      	adds	r1, #128	; 0x80
  40b468:	eb01 2601 	add.w	r6, r1, r1, lsl #8
  40b46c:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
  40b470:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b474:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40b478:	fb0b f303 	mul.w	r3, fp, r3
  40b47c:	3380      	adds	r3, #128	; 0x80
  40b47e:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40b482:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40b486:	f3c3 6e82 	ubfx	lr, r3, #26, #3
  40b48a:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b48e:	fb0b f202 	mul.w	r2, fp, r2
  40b492:	3280      	adds	r2, #128	; 0x80
  40b494:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  40b498:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  40b49c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b4a0:	42a8      	cmp	r0, r5
  40b4a2:	f73f aaae 	bgt.w	40aa02 <_lv_blend_fill+0x1a>
            disp_buf_tmp += disp_w;
  40b4a6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
  40b4aa:	2600      	movs	r6, #0
  40b4ac:	4647      	mov	r7, r8
  40b4ae:	f8cd b018 	str.w	fp, [sp, #24]
  40b4b2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40b4b6:	4680      	mov	r8, r0
  40b4b8:	e02d      	b.n	40b516 <_lv_blend_fill+0xb2e>
                disp_buf_tmp[x] = last_res_color;
  40b4ba:	7820      	ldrb	r0, [r4, #0]
  40b4bc:	f36e 0002 	bfi	r0, lr, #0, #3
  40b4c0:	f361 00c7 	bfi	r0, r1, #3, #5
  40b4c4:	7020      	strb	r0, [r4, #0]
  40b4c6:	7860      	ldrb	r0, [r4, #1]
  40b4c8:	f362 0004 	bfi	r0, r2, #0, #5
  40b4cc:	f363 1047 	bfi	r0, r3, #5, #3
  40b4d0:	7060      	strb	r0, [r4, #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b4d2:	f109 0901 	add.w	r9, r9, #1
                if(last_dest_color.full != disp_buf_tmp[x].full) {
  40b4d6:	4630      	mov	r0, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b4d8:	f9bd 404c 	ldrsh.w	r4, [sp, #76]	; 0x4c
  40b4dc:	45a1      	cmp	r9, r4
  40b4de:	dc12      	bgt.n	40b506 <_lv_blend_fill+0xb1e>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
  40b4e0:	462c      	mov	r4, r5
  40b4e2:	f835 6b02 	ldrh.w	r6, [r5], #2
  40b4e6:	4286      	cmp	r6, r0
  40b4e8:	d0e7      	beq.n	40b4ba <_lv_blend_fill+0xad2>
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
  40b4ea:	9a06      	ldr	r2, [sp, #24]
  40b4ec:	8821      	ldrh	r1, [r4, #0]
  40b4ee:	f8bd 0014 	ldrh.w	r0, [sp, #20]
  40b4f2:	47b8      	blx	r7
  40b4f4:	f000 0e07 	and.w	lr, r0, #7
  40b4f8:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  40b4fc:	f3c0 2204 	ubfx	r2, r0, #8, #5
  40b500:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40b504:	e7d9      	b.n	40b4ba <_lv_blend_fill+0xad2>
            disp_buf_tmp += disp_w;
  40b506:	44d3      	add	fp, sl
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b508:	f108 0801 	add.w	r8, r8, #1
  40b50c:	f9bd 004e 	ldrsh.w	r0, [sp, #78]	; 0x4e
  40b510:	4580      	cmp	r8, r0
  40b512:	f73f aa76 	bgt.w	40aa02 <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b516:	f9bd 5048 	ldrsh.w	r5, [sp, #72]	; 0x48
  40b51a:	46a9      	mov	r9, r5
  40b51c:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
  40b520:	4285      	cmp	r5, r0
  40b522:	dcf0      	bgt.n	40b506 <_lv_blend_fill+0xb1e>
  40b524:	eb0b 0545 	add.w	r5, fp, r5, lsl #1
  40b528:	4630      	mov	r0, r6
  40b52a:	e7d9      	b.n	40b4e0 <_lv_blend_fill+0xaf8>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40b52c:	f8b4 e000 	ldrh.w	lr, [r4]
  40b530:	4596      	cmp	lr, r2
  40b532:	d117      	bne.n	40b564 <_lv_blend_fill+0xb7c>
  40b534:	e008      	b.n	40b548 <_lv_blend_fill+0xb60>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40b536:	9a06      	ldr	r2, [sp, #24]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
  40b538:	8821      	ldrh	r1, [r4, #0]
  40b53a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
  40b53e:	47b8      	blx	r7
  40b540:	b280      	uxth	r0, r0
                    last_mask = mask_tmp[x];
  40b542:	f89a 1000 	ldrb.w	r1, [sl]
                    last_dest_color.full = disp_buf_tmp[x].full;
  40b546:	8822      	ldrh	r2, [r4, #0]
                disp_buf_tmp[x] = last_res_color;
  40b548:	8020      	strh	r0, [r4, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b54a:	3601      	adds	r6, #1
  40b54c:	3501      	adds	r5, #1
  40b54e:	3402      	adds	r4, #2
  40b550:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40b554:	429e      	cmp	r6, r3
  40b556:	dc0d      	bgt.n	40b574 <_lv_blend_fill+0xb8c>
  40b558:	46aa      	mov	sl, r5
                if(mask_tmp[x] == 0) continue;
  40b55a:	782b      	ldrb	r3, [r5, #0]
  40b55c:	2b00      	cmp	r3, #0
  40b55e:	d0f4      	beq.n	40b54a <_lv_blend_fill+0xb62>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40b560:	428b      	cmp	r3, r1
  40b562:	d0e3      	beq.n	40b52c <_lv_blend_fill+0xb44>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40b564:	2bfc      	cmp	r3, #252	; 0xfc
  40b566:	d8e6      	bhi.n	40b536 <_lv_blend_fill+0xb4e>
  40b568:	9a07      	ldr	r2, [sp, #28]
  40b56a:	fb02 f303 	mul.w	r3, r2, r3
  40b56e:	f3c3 2207 	ubfx	r2, r3, #8, #8
  40b572:	e7e1      	b.n	40b538 <_lv_blend_fill+0xb50>
            disp_buf_tmp += disp_w;
  40b574:	9b08      	ldr	r3, [sp, #32]
  40b576:	449b      	add	fp, r3
  40b578:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b57a:	4499      	add	r9, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b57c:	f108 0801 	add.w	r8, r8, #1
  40b580:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  40b584:	4598      	cmp	r8, r3
  40b586:	f73f aa3c 	bgt.w	40aa02 <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b58a:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
  40b58e:	4626      	mov	r6, r4
  40b590:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40b594:	429c      	cmp	r4, r3
  40b596:	dced      	bgt.n	40b574 <_lv_blend_fill+0xb8c>
  40b598:	eb09 0504 	add.w	r5, r9, r4
  40b59c:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
  40b5a0:	e7da      	b.n	40b558 <_lv_blend_fill+0xb70>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40b5a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b5a4:	2100      	movs	r1, #0
                for(; x <= x_end4; x += 4) {
  40b5a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b5a8:	428a      	cmp	r2, r1
  40b5aa:	f6ff ae81 	blt.w	40b2b0 <_lv_blend_fill+0x8c8>
  40b5ae:	3304      	adds	r3, #4
  40b5b0:	1cc8      	adds	r0, r1, #3
  40b5b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b5b4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  40b5b8:	9510      	str	r5, [sp, #64]	; 0x40
  40b5ba:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
  40b5be:	e4d3      	b.n	40af68 <_lv_blend_fill+0x580>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40b5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b5c2:	2100      	movs	r1, #0
                for(; x <= x_end4; x += 4) {
  40b5c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b5c6:	428a      	cmp	r2, r1
  40b5c8:	daf1      	bge.n	40b5ae <_lv_blend_fill+0xbc6>
  40b5ca:	461a      	mov	r2, r3
  40b5cc:	e619      	b.n	40b202 <_lv_blend_fill+0x81a>
  40b5ce:	bf00      	nop
  40b5d0:	0040a90b 	.word	0x0040a90b
  40b5d4:	0040a829 	.word	0x0040a829

0040b5d8 <_lv_blend_map>:
{
  40b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b5dc:	b093      	sub	sp, #76	; 0x4c
  40b5de:	f89d 4070 	ldrb.w	r4, [sp, #112]	; 0x70
  40b5e2:	f89d b074 	ldrb.w	fp, [sp, #116]	; 0x74
  40b5e6:	f89d 7078 	ldrb.w	r7, [sp, #120]	; 0x78
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40b5ea:	b114      	cbz	r4, 40b5f2 <_lv_blend_map+0x1a>
  40b5ec:	f1bb 0f01 	cmp.w	fp, #1
  40b5f0:	d802      	bhi.n	40b5f8 <_lv_blend_map+0x20>
}
  40b5f2:	b013      	add	sp, #76	; 0x4c
  40b5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b5f8:	9306      	str	r3, [sp, #24]
  40b5fa:	9207      	str	r2, [sp, #28]
  40b5fc:	460e      	mov	r6, r1
  40b5fe:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
  40b600:	4632      	mov	r2, r6
  40b602:	a810      	add	r0, sp, #64	; 0x40
  40b604:	4bb8      	ldr	r3, [pc, #736]	; (40b8e8 <_lv_blend_map+0x310>)
  40b606:	4798      	blx	r3
    if(!is_common) return;
  40b608:	2800      	cmp	r0, #0
  40b60a:	d0f2      	beq.n	40b5f2 <_lv_blend_map+0x1a>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b60c:	4bb7      	ldr	r3, [pc, #732]	; (40b8ec <_lv_blend_map+0x314>)
  40b60e:	4798      	blx	r3
  40b610:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40b612:	4bb7      	ldr	r3, [pc, #732]	; (40b8f0 <_lv_blend_map+0x318>)
  40b614:	4798      	blx	r3
  40b616:	4605      	mov	r5, r0
    lv_color_t * disp_buf = vdb->buf_act;
  40b618:	6883      	ldr	r3, [r0, #8]
  40b61a:	9304      	str	r3, [sp, #16]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40b61c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  40b620:	b10b      	cbz	r3, 40b626 <_lv_blend_map+0x4e>
  40b622:	4640      	mov	r0, r8
  40b624:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
  40b626:	8a2a      	ldrh	r2, [r5, #16]
  40b628:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  40b62c:	1a9b      	subs	r3, r3, r2
  40b62e:	b29b      	uxth	r3, r3
  40b630:	9305      	str	r3, [sp, #20]
  40b632:	f9bd a014 	ldrsh.w	sl, [sp, #20]
  40b636:	f8ad a040 	strh.w	sl, [sp, #64]	; 0x40
    draw_area.y1 -= disp_area->y1;
  40b63a:	8a6b      	ldrh	r3, [r5, #18]
  40b63c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
  40b640:	1ac9      	subs	r1, r1, r3
  40b642:	b289      	uxth	r1, r1
  40b644:	9108      	str	r1, [sp, #32]
  40b646:	fa0f fe81 	sxth.w	lr, r1
  40b64a:	f8ad e042 	strh.w	lr, [sp, #66]	; 0x42
    draw_area.x2 -= disp_area->x1;
  40b64e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  40b652:	1a89      	subs	r1, r1, r2
  40b654:	b289      	uxth	r1, r1
  40b656:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
    draw_area.y2 -= disp_area->y1;
  40b65a:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
  40b65e:	1ac0      	subs	r0, r0, r3
  40b660:	b280      	uxth	r0, r0
  40b662:	fa0f fc80 	sxth.w	ip, r0
  40b666:	f8ad c046 	strh.w	ip, [sp, #70]	; 0x46
    if(mask && disp->driver.antialiasing == 0)
  40b66a:	9a06      	ldr	r2, [sp, #24]
  40b66c:	b1d2      	cbz	r2, 40b6a4 <_lv_blend_map+0xcc>
  40b66e:	f898 3008 	ldrb.w	r3, [r8, #8]
  40b672:	f013 0f01 	tst.w	r3, #1
  40b676:	d115      	bne.n	40b6a4 <_lv_blend_map+0xcc>
  40b678:	f101 0901 	add.w	r9, r1, #1
  40b67c:	9b05      	ldr	r3, [sp, #20]
  40b67e:	eba9 0903 	sub.w	r9, r9, r3
  40b682:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40b686:	f1b9 0f00 	cmp.w	r9, #0
  40b68a:	dd0b      	ble.n	40b6a4 <_lv_blend_map+0xcc>
  40b68c:	4613      	mov	r3, r2
  40b68e:	4491      	add	r9, r2
  40b690:	781a      	ldrb	r2, [r3, #0]
  40b692:	2a80      	cmp	r2, #128	; 0x80
  40b694:	f04f 32ff 	mov.w	r2, #4294967295
  40b698:	bf98      	it	ls
  40b69a:	2200      	movls	r2, #0
  40b69c:	f803 2b01 	strb.w	r2, [r3], #1
  40b6a0:	454b      	cmp	r3, r9
  40b6a2:	d1f5      	bne.n	40b690 <_lv_blend_map+0xb8>
    if(disp->driver.set_px_cb) {
  40b6a4:	f8d8 3014 	ldr.w	r3, [r8, #20]
  40b6a8:	2b00      	cmp	r3, #0
  40b6aa:	f000 80a6 	beq.w	40b7fa <_lv_blend_map+0x222>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b6ae:	4b8f      	ldr	r3, [pc, #572]	; (40b8ec <_lv_blend_map+0x314>)
  40b6b0:	4798      	blx	r3
  40b6b2:	4680      	mov	r8, r0
  40b6b4:	f9b5 0010 	ldrsh.w	r0, [r5, #16]
  40b6b8:	8aab      	ldrh	r3, [r5, #20]
  40b6ba:	3301      	adds	r3, #1
  40b6bc:	1a1b      	subs	r3, r3, r0
  40b6be:	b21b      	sxth	r3, r3
  40b6c0:	9305      	str	r3, [sp, #20]
  40b6c2:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
  40b6c6:	f9b6 2000 	ldrsh.w	r2, [r6]
  40b6ca:	88b3      	ldrh	r3, [r6, #4]
  40b6cc:	3301      	adds	r3, #1
  40b6ce:	1a9b      	subs	r3, r3, r2
  40b6d0:	b21f      	sxth	r7, r3
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40b6d2:	f9bd 9042 	ldrsh.w	r9, [sp, #66]	; 0x42
  40b6d6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  40b6da:	f9b5 5012 	ldrsh.w	r5, [r5, #18]
  40b6de:	1b5b      	subs	r3, r3, r5
  40b6e0:	eba9 0303 	sub.w	r3, r9, r3
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40b6e4:	1a12      	subs	r2, r2, r0
  40b6e6:	1a8a      	subs	r2, r1, r2
    map_buf_tmp -= draw_area->x1;
  40b6e8:	fb07 2303 	mla	r3, r7, r3, r2
  40b6ec:	ea4f 0a41 	mov.w	sl, r1, lsl #1
  40b6f0:	ebca 0a43 	rsb	sl, sl, r3, lsl #1
  40b6f4:	9b07      	ldr	r3, [sp, #28]
  40b6f6:	4453      	add	r3, sl
  40b6f8:	469a      	mov	sl, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b6fa:	2c01      	cmp	r4, #1
  40b6fc:	d011      	beq.n	40b722 <_lv_blend_map+0x14a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40b6fe:	9b06      	ldr	r3, [sp, #24]
  40b700:	1a5b      	subs	r3, r3, r1
  40b702:	9306      	str	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b704:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40b708:	4599      	cmp	r9, r3
  40b70a:	f73f af72 	bgt.w	40b5f2 <_lv_blend_map+0x1a>
  40b70e:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
            map_buf_tmp += map_w;
  40b712:	007a      	lsls	r2, r7, #1
  40b714:	9208      	str	r2, [sp, #32]
  40b716:	3301      	adds	r3, #1
  40b718:	1a59      	subs	r1, r3, r1
            mask_tmp += draw_area_w;
  40b71a:	b20b      	sxth	r3, r1
  40b71c:	9309      	str	r3, [sp, #36]	; 0x24
  40b71e:	4657      	mov	r7, sl
  40b720:	e05c      	b.n	40b7dc <_lv_blend_map+0x204>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b722:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40b726:	4599      	cmp	r9, r3
  40b728:	f73f af63 	bgt.w	40b5f2 <_lv_blend_map+0x1a>
            map_buf_tmp += map_w;
  40b72c:	007d      	lsls	r5, r7, #1
  40b72e:	9506      	str	r5, [sp, #24]
  40b730:	465e      	mov	r6, fp
  40b732:	f8dd b010 	ldr.w	fp, [sp, #16]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b736:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
  40b73a:	462c      	mov	r4, r5
  40b73c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  40b740:	429d      	cmp	r5, r3
  40b742:	dc18      	bgt.n	40b776 <_lv_blend_map+0x19e>
  40b744:	eb0a 0545 	add.w	r5, sl, r5, lsl #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
  40b748:	fa0f f789 	sxth.w	r7, r9
  40b74c:	9504      	str	r5, [sp, #16]
  40b74e:	9602      	str	r6, [sp, #8]
  40b750:	9a04      	ldr	r2, [sp, #16]
  40b752:	f832 3b02 	ldrh.w	r3, [r2], #2
  40b756:	9204      	str	r2, [sp, #16]
  40b758:	f8ad 3004 	strh.w	r3, [sp, #4]
  40b75c:	9700      	str	r7, [sp, #0]
  40b75e:	b223      	sxth	r3, r4
  40b760:	9a05      	ldr	r2, [sp, #20]
  40b762:	4659      	mov	r1, fp
  40b764:	4640      	mov	r0, r8
  40b766:	f8d8 5014 	ldr.w	r5, [r8, #20]
  40b76a:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b76c:	3401      	adds	r4, #1
  40b76e:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  40b772:	429c      	cmp	r4, r3
  40b774:	ddeb      	ble.n	40b74e <_lv_blend_map+0x176>
            map_buf_tmp += map_w;
  40b776:	9b06      	ldr	r3, [sp, #24]
  40b778:	449a      	add	sl, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b77a:	f109 0901 	add.w	r9, r9, #1
  40b77e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40b782:	4599      	cmp	r9, r3
  40b784:	ddd7      	ble.n	40b736 <_lv_blend_map+0x15e>
  40b786:	e734      	b.n	40b5f2 <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b788:	3401      	adds	r4, #1
  40b78a:	3502      	adds	r5, #2
  40b78c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  40b790:	429c      	cmp	r4, r3
  40b792:	dc15      	bgt.n	40b7c0 <_lv_blend_map+0x1e8>
                if(mask_tmp[x]) {
  40b794:	f816 3b01 	ldrb.w	r3, [r6], #1
  40b798:	2b00      	cmp	r3, #0
  40b79a:	d0f5      	beq.n	40b788 <_lv_blend_map+0x1b0>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40b79c:	fb03 f30b 	mul.w	r3, r3, fp
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40b7a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40b7a4:	9302      	str	r3, [sp, #8]
  40b7a6:	882b      	ldrh	r3, [r5, #0]
  40b7a8:	f8ad 3004 	strh.w	r3, [sp, #4]
  40b7ac:	f8cd a000 	str.w	sl, [sp]
  40b7b0:	b223      	sxth	r3, r4
  40b7b2:	9a05      	ldr	r2, [sp, #20]
  40b7b4:	9904      	ldr	r1, [sp, #16]
  40b7b6:	4640      	mov	r0, r8
  40b7b8:	f8d8 7014 	ldr.w	r7, [r8, #20]
  40b7bc:	47b8      	blx	r7
  40b7be:	e7e3      	b.n	40b788 <_lv_blend_map+0x1b0>
  40b7c0:	9f07      	ldr	r7, [sp, #28]
  40b7c2:	9b06      	ldr	r3, [sp, #24]
  40b7c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b7c6:	4413      	add	r3, r2
  40b7c8:	9306      	str	r3, [sp, #24]
            map_buf_tmp += map_w;
  40b7ca:	9b08      	ldr	r3, [sp, #32]
  40b7cc:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b7ce:	f109 0901 	add.w	r9, r9, #1
  40b7d2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40b7d6:	4599      	cmp	r9, r3
  40b7d8:	f73f af0b 	bgt.w	40b5f2 <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b7dc:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
  40b7e0:	462c      	mov	r4, r5
  40b7e2:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  40b7e6:	429d      	cmp	r5, r3
  40b7e8:	dceb      	bgt.n	40b7c2 <_lv_blend_map+0x1ea>
  40b7ea:	9b06      	ldr	r3, [sp, #24]
  40b7ec:	195e      	adds	r6, r3, r5
  40b7ee:	eb07 0545 	add.w	r5, r7, r5, lsl #1
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40b7f2:	fa0f fa89 	sxth.w	sl, r9
  40b7f6:	9707      	str	r7, [sp, #28]
  40b7f8:	e7cc      	b.n	40b794 <_lv_blend_map+0x1bc>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40b7fa:	2f00      	cmp	r7, #0
  40b7fc:	f040 83fe 	bne.w	40bffc <_lv_blend_map+0xa24>
  40b800:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  40b804:	8aaf      	ldrh	r7, [r5, #20]
  40b806:	3701      	adds	r7, #1
  40b808:	1aff      	subs	r7, r7, r3
  40b80a:	b23f      	sxth	r7, r7
  40b80c:	3101      	adds	r1, #1
  40b80e:	9a05      	ldr	r2, [sp, #20]
  40b810:	1a89      	subs	r1, r1, r2
  40b812:	b20a      	sxth	r2, r1
  40b814:	920b      	str	r2, [sp, #44]	; 0x2c
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40b816:	920a      	str	r2, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b818:	3001      	adds	r0, #1
  40b81a:	9a08      	ldr	r2, [sp, #32]
  40b81c:	1a82      	subs	r2, r0, r2
    int32_t draw_area_h = lv_area_get_height(draw_area);
  40b81e:	b212      	sxth	r2, r2
  40b820:	9208      	str	r2, [sp, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b822:	f9b6 1000 	ldrsh.w	r1, [r6]
  40b826:	f8b6 8004 	ldrh.w	r8, [r6, #4]
  40b82a:	f108 0801 	add.w	r8, r8, #1
  40b82e:	eba8 0801 	sub.w	r8, r8, r1
  40b832:	fa0f f888 	sxth.w	r8, r8
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40b836:	fb0e a207 	mla	r2, lr, r7, sl
  40b83a:	9804      	ldr	r0, [sp, #16]
  40b83c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  40b840:	9204      	str	r2, [sp, #16]
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40b842:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
  40b846:	f9b5 0012 	ldrsh.w	r0, [r5, #18]
  40b84a:	1a12      	subs	r2, r2, r0
  40b84c:	ebae 0e02 	sub.w	lr, lr, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40b850:	1acb      	subs	r3, r1, r3
  40b852:	ebaa 0a03 	sub.w	sl, sl, r3
  40b856:	fb08 a30e 	mla	r3, r8, lr, sl
  40b85a:	9a07      	ldr	r2, [sp, #28]
  40b85c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  40b860:	9305      	str	r3, [sp, #20]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b862:	4b22      	ldr	r3, [pc, #136]	; (40b8ec <_lv_blend_map+0x314>)
  40b864:	4798      	blx	r3
  40b866:	4605      	mov	r5, r0
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b868:	2c01      	cmp	r4, #1
  40b86a:	d017      	beq.n	40b89c <_lv_blend_map+0x2c4>
        if(opa > LV_OPA_MAX) {
  40b86c:	f1bb 0ffd 	cmp.w	fp, #253	; 0xfd
  40b870:	f200 80cd 	bhi.w	40ba0e <_lv_blend_map+0x436>
            for(y = 0; y < draw_area_h; y++) {
  40b874:	9b08      	ldr	r3, [sp, #32]
  40b876:	2b00      	cmp	r3, #0
  40b878:	f77f aebb 	ble.w	40b5f2 <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
  40b87c:	007b      	lsls	r3, r7, #1
  40b87e:	930c      	str	r3, [sp, #48]	; 0x30
                map_buf_first += map_w;
  40b880:	ea4f 0348 	mov.w	r3, r8, lsl #1
  40b884:	930d      	str	r3, [sp, #52]	; 0x34
  40b886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b888:	9a06      	ldr	r2, [sp, #24]
  40b88a:	3a01      	subs	r2, #1
  40b88c:	9206      	str	r2, [sp, #24]
  40b88e:	005b      	lsls	r3, r3, #1
  40b890:	930e      	str	r3, [sp, #56]	; 0x38
  40b892:	2300      	movs	r3, #0
  40b894:	9309      	str	r3, [sp, #36]	; 0x24
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40b896:	f8cd b01c 	str.w	fp, [sp, #28]
  40b89a:	e3a2      	b.n	40bfe2 <_lv_blend_map+0xa0a>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
  40b89c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40b89e:	b35b      	cbz	r3, 40b8f8 <_lv_blend_map+0x320>
  40b8a0:	a810      	add	r0, sp, #64	; 0x40
  40b8a2:	4b14      	ldr	r3, [pc, #80]	; (40b8f4 <_lv_blend_map+0x31c>)
  40b8a4:	4798      	blx	r3
  40b8a6:	28f0      	cmp	r0, #240	; 0xf0
  40b8a8:	d926      	bls.n	40b8f8 <_lv_blend_map+0x320>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b8aa:	f9bd 6042 	ldrsh.w	r6, [sp, #66]	; 0x42
  40b8ae:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40b8b2:	429e      	cmp	r6, r3
  40b8b4:	f73f ae9d 	bgt.w	40b5f2 <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
  40b8b8:	007f      	lsls	r7, r7, #1
                map_buf_first += map_w;
  40b8ba:	ea4f 0848 	mov.w	r8, r8, lsl #1
  40b8be:	46ba      	mov	sl, r7
  40b8c0:	9c04      	ldr	r4, [sp, #16]
  40b8c2:	f8dd 9014 	ldr.w	r9, [sp, #20]
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
  40b8c6:	f8cd b000 	str.w	fp, [sp]
  40b8ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b8cc:	464a      	mov	r2, r9
  40b8ce:	4621      	mov	r1, r4
  40b8d0:	4628      	mov	r0, r5
  40b8d2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
  40b8d4:	47b8      	blx	r7
                disp_buf_first += disp_w;
  40b8d6:	4454      	add	r4, sl
                map_buf_first += map_w;
  40b8d8:	44c1      	add	r9, r8
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b8da:	3601      	adds	r6, #1
  40b8dc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40b8e0:	429e      	cmp	r6, r3
  40b8e2:	ddf0      	ble.n	40b8c6 <_lv_blend_map+0x2ee>
  40b8e4:	e685      	b.n	40b5f2 <_lv_blend_map+0x1a>
  40b8e6:	bf00      	nop
  40b8e8:	00414957 	.word	0x00414957
  40b8ec:	00408f81 	.word	0x00408f81
  40b8f0:	00414199 	.word	0x00414199
  40b8f4:	0041493b 	.word	0x0041493b
        if(opa > LV_OPA_MAX) {
  40b8f8:	f1bb 0ffd 	cmp.w	fp, #253	; 0xfd
  40b8fc:	d810      	bhi.n	40b920 <_lv_blend_map+0x348>
            for(y = 0; y < draw_area_h; y++) {
  40b8fe:	9b08      	ldr	r3, [sp, #32]
  40b900:	2b00      	cmp	r3, #0
  40b902:	f77f ae76 	ble.w	40b5f2 <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
  40b906:	ea4f 0a47 	mov.w	sl, r7, lsl #1
                map_buf_first += map_w;
  40b90a:	ea4f 0348 	mov.w	r3, r8, lsl #1
  40b90e:	9306      	str	r3, [sp, #24]
  40b910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b912:	005b      	lsls	r3, r3, #1
  40b914:	9307      	str	r3, [sp, #28]
  40b916:	f04f 0900 	mov.w	r9, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b91a:	f1cb 0cff 	rsb	ip, fp, #255	; 0xff
  40b91e:	e026      	b.n	40b96e <_lv_blend_map+0x396>
            for(y = 0; y < draw_area_h; y++) {
  40b920:	9b08      	ldr	r3, [sp, #32]
  40b922:	2b00      	cmp	r3, #0
  40b924:	f77f ae65 	ble.w	40b5f2 <_lv_blend_map+0x1a>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
  40b928:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b92a:	0056      	lsls	r6, r2, #1
                disp_buf_first += disp_w;
  40b92c:	007f      	lsls	r7, r7, #1
                map_buf_first += map_w;
  40b92e:	ea4f 0848 	mov.w	r8, r8, lsl #1
  40b932:	2400      	movs	r4, #0
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
  40b934:	4d6e      	ldr	r5, [pc, #440]	; (40baf0 <_lv_blend_map+0x518>)
  40b936:	469b      	mov	fp, r3
  40b938:	f8dd 9010 	ldr.w	r9, [sp, #16]
  40b93c:	f8dd a014 	ldr.w	sl, [sp, #20]
  40b940:	4632      	mov	r2, r6
  40b942:	4651      	mov	r1, sl
  40b944:	4648      	mov	r0, r9
  40b946:	47a8      	blx	r5
                disp_buf_first += disp_w;
  40b948:	44b9      	add	r9, r7
                map_buf_first += map_w;
  40b94a:	44c2      	add	sl, r8
            for(y = 0; y < draw_area_h; y++) {
  40b94c:	3401      	adds	r4, #1
  40b94e:	45a3      	cmp	fp, r4
  40b950:	d1f6      	bne.n	40b940 <_lv_blend_map+0x368>
  40b952:	e64e      	b.n	40b5f2 <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
  40b954:	9b04      	ldr	r3, [sp, #16]
  40b956:	4453      	add	r3, sl
  40b958:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
  40b95a:	9b05      	ldr	r3, [sp, #20]
  40b95c:	9a06      	ldr	r2, [sp, #24]
  40b95e:	4413      	add	r3, r2
  40b960:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
  40b962:	f109 0901 	add.w	r9, r9, #1
  40b966:	9b08      	ldr	r3, [sp, #32]
  40b968:	454b      	cmp	r3, r9
  40b96a:	f43f ae42 	beq.w	40b5f2 <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w; x++) {
  40b96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b970:	2b00      	cmp	r3, #0
  40b972:	ddef      	ble.n	40b954 <_lv_blend_map+0x37c>
  40b974:	9b05      	ldr	r3, [sp, #20]
  40b976:	469e      	mov	lr, r3
  40b978:	9f04      	ldr	r7, [sp, #16]
  40b97a:	9a07      	ldr	r2, [sp, #28]
  40b97c:	eb03 0802 	add.w	r8, r3, r2
  40b980:	f89e 3000 	ldrb.w	r3, [lr]
  40b984:	08d9      	lsrs	r1, r3, #3
  40b986:	783c      	ldrb	r4, [r7, #0]
  40b988:	08e2      	lsrs	r2, r4, #3
  40b98a:	fb0c f202 	mul.w	r2, ip, r2
  40b98e:	fb0b 2101 	mla	r1, fp, r1, r2
  40b992:	3180      	adds	r1, #128	; 0x80
  40b994:	eb01 2201 	add.w	r2, r1, r1, lsl #8
  40b998:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
  40b99c:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b9a0:	f003 0307 	and.w	r3, r3, #7
  40b9a4:	f89e 2001 	ldrb.w	r2, [lr, #1]
  40b9a8:	0950      	lsrs	r0, r2, #5
  40b9aa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  40b9ae:	f004 0607 	and.w	r6, r4, #7
  40b9b2:	7878      	ldrb	r0, [r7, #1]
  40b9b4:	0945      	lsrs	r5, r0, #5
  40b9b6:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
  40b9ba:	fb0c f505 	mul.w	r5, ip, r5
  40b9be:	fb0b 5303 	mla	r3, fp, r3, r5
  40b9c2:	3380      	adds	r3, #128	; 0x80
  40b9c4:	eb03 2503 	add.w	r5, r3, r3, lsl #8
  40b9c8:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b9cc:	f002 021f 	and.w	r2, r2, #31
  40b9d0:	f000 051f 	and.w	r5, r0, #31
  40b9d4:	fb0c f505 	mul.w	r5, ip, r5
  40b9d8:	fb0b 5202 	mla	r2, fp, r2, r5
  40b9dc:	3280      	adds	r2, #128	; 0x80
  40b9de:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40b9e2:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40b9e6:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b9ea:	0e9d      	lsrs	r5, r3, #26
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
  40b9ec:	f365 0402 	bfi	r4, r5, #0, #3
  40b9f0:	f361 04c7 	bfi	r4, r1, #3, #5
  40b9f4:	703c      	strb	r4, [r7, #0]
  40b9f6:	f362 0004 	bfi	r0, r2, #0, #5
  40b9fa:	0ddb      	lsrs	r3, r3, #23
  40b9fc:	f363 1047 	bfi	r0, r3, #5, #3
  40ba00:	7078      	strb	r0, [r7, #1]
  40ba02:	f10e 0e02 	add.w	lr, lr, #2
  40ba06:	3702      	adds	r7, #2
                for(x = 0; x < draw_area_w; x++) {
  40ba08:	45f0      	cmp	r8, lr
  40ba0a:	d1b9      	bne.n	40b980 <_lv_blend_map+0x3a8>
  40ba0c:	e7a2      	b.n	40b954 <_lv_blend_map+0x37c>
            int32_t x_end4 = draw_area_w - 4;
  40ba0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ba10:	3b04      	subs	r3, #4
  40ba12:	930c      	str	r3, [sp, #48]	; 0x30
            for(y = 0; y < draw_area_h; y++) {
  40ba14:	9b08      	ldr	r3, [sp, #32]
  40ba16:	2b00      	cmp	r3, #0
  40ba18:	f77f adeb 	ble.w	40b5f2 <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
  40ba1c:	007b      	lsls	r3, r7, #1
  40ba1e:	930e      	str	r3, [sp, #56]	; 0x38
                map_buf_first += map_w;
  40ba20:	ea4f 0348 	mov.w	r3, r8, lsl #1
  40ba24:	930f      	str	r3, [sp, #60]	; 0x3c
  40ba26:	2300      	movs	r3, #0
  40ba28:	9307      	str	r3, [sp, #28]
  40ba2a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40ba2e:	e25c      	b.n	40beea <_lv_blend_map+0x912>
                    MAP_NORMAL_MASK_PX(x)
  40ba30:	f8b8 3000 	ldrh.w	r3, [r8]
  40ba34:	f8ac 3000 	strh.w	r3, [ip]
  40ba38:	4673      	mov	r3, lr
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40ba3a:	3201      	adds	r2, #1
  40ba3c:	4593      	cmp	fp, r2
  40ba3e:	f000 8391 	beq.w	40c164 <_lv_blend_map+0xb8c>
  40ba42:	f108 0802 	add.w	r8, r8, #2
  40ba46:	f10c 0c02 	add.w	ip, ip, #2
  40ba4a:	f01e 0f03 	tst.w	lr, #3
  40ba4e:	f000 839b 	beq.w	40c188 <_lv_blend_map+0xbb0>
                    MAP_NORMAL_MASK_PX(x)
  40ba52:	f81e 6b01 	ldrb.w	r6, [lr], #1
  40ba56:	2e00      	cmp	r6, #0
  40ba58:	d0ee      	beq.n	40ba38 <_lv_blend_map+0x460>
  40ba5a:	2eff      	cmp	r6, #255	; 0xff
  40ba5c:	d0e8      	beq.n	40ba30 <_lv_blend_map+0x458>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ba5e:	f1c6 07ff 	rsb	r7, r6, #255	; 0xff
  40ba62:	f898 3000 	ldrb.w	r3, [r8]
  40ba66:	08d8      	lsrs	r0, r3, #3
  40ba68:	f89c 5000 	ldrb.w	r5, [ip]
  40ba6c:	08e9      	lsrs	r1, r5, #3
  40ba6e:	fb07 f101 	mul.w	r1, r7, r1
  40ba72:	fb06 1000 	mla	r0, r6, r0, r1
  40ba76:	3080      	adds	r0, #128	; 0x80
  40ba78:	eb00 2100 	add.w	r1, r0, r0, lsl #8
  40ba7c:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
  40ba80:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ba84:	f003 0307 	and.w	r3, r3, #7
  40ba88:	f898 1001 	ldrb.w	r1, [r8, #1]
  40ba8c:	094c      	lsrs	r4, r1, #5
  40ba8e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40ba92:	f005 0a07 	and.w	sl, r5, #7
  40ba96:	f89c 4001 	ldrb.w	r4, [ip, #1]
  40ba9a:	ea4f 1954 	mov.w	r9, r4, lsr #5
  40ba9e:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40baa2:	fb07 f909 	mul.w	r9, r7, r9
  40baa6:	fb06 9303 	mla	r3, r6, r3, r9
  40baaa:	3380      	adds	r3, #128	; 0x80
  40baac:	eb03 2903 	add.w	r9, r3, r3, lsl #8
  40bab0:	eb03 13c9 	add.w	r3, r3, r9, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bab4:	f001 011f 	and.w	r1, r1, #31
  40bab8:	f004 091f 	and.w	r9, r4, #31
  40babc:	fb07 f709 	mul.w	r7, r7, r9
  40bac0:	fb06 7101 	mla	r1, r6, r1, r7
  40bac4:	3180      	adds	r1, #128	; 0x80
  40bac6:	eb01 2601 	add.w	r6, r1, r1, lsl #8
  40baca:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
  40bace:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bad2:	0e9e      	lsrs	r6, r3, #26
  40bad4:	f366 0502 	bfi	r5, r6, #0, #3
  40bad8:	f360 05c7 	bfi	r5, r0, #3, #5
  40badc:	f88c 5000 	strb.w	r5, [ip]
  40bae0:	f361 0404 	bfi	r4, r1, #0, #5
  40bae4:	0ddb      	lsrs	r3, r3, #23
  40bae6:	f363 1447 	bfi	r4, r3, #5, #3
  40baea:	f88c 4001 	strb.w	r4, [ip, #1]
  40baee:	e7a3      	b.n	40ba38 <_lv_blend_map+0x460>
  40baf0:	00415a1d 	.word	0x00415a1d
                            disp_buf_first[x] = map_buf_first[x];
  40baf4:	f830 4c06 	ldrh.w	r4, [r0, #-6]
  40baf8:	f821 4c06 	strh.w	r4, [r1, #-6]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
  40bafc:	f830 4c04 	ldrh.w	r4, [r0, #-4]
  40bb00:	f821 4c04 	strh.w	r4, [r1, #-4]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
  40bb04:	f830 4c02 	ldrh.w	r4, [r0, #-2]
  40bb08:	f821 4c02 	strh.w	r4, [r1, #-2]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
  40bb0c:	8804      	ldrh	r4, [r0, #0]
  40bb0e:	800c      	strh	r4, [r1, #0]
                for(; x < x_end4; x += 4) {
  40bb10:	3204      	adds	r2, #4
  40bb12:	3304      	adds	r3, #4
  40bb14:	3008      	adds	r0, #8
  40bb16:	3108      	adds	r1, #8
  40bb18:	4593      	cmp	fp, r2
  40bb1a:	f340 816b 	ble.w	40bdf4 <_lv_blend_map+0x81c>
  40bb1e:	469c      	mov	ip, r3
                    if(*mask32) {
  40bb20:	f853 4c04 	ldr.w	r4, [r3, #-4]
  40bb24:	2c00      	cmp	r4, #0
  40bb26:	d0f3      	beq.n	40bb10 <_lv_blend_map+0x538>
                        if((*mask32) == 0xFFFFFFFF) {
  40bb28:	f1b4 3fff 	cmp.w	r4, #4294967295
  40bb2c:	d0e2      	beq.n	40baf4 <_lv_blend_map+0x51c>
                            MAP_NORMAL_MASK_PX(x)
  40bb2e:	f813 6c04 	ldrb.w	r6, [r3, #-4]
  40bb32:	2e00      	cmp	r6, #0
  40bb34:	d050      	beq.n	40bbd8 <_lv_blend_map+0x600>
  40bb36:	2eff      	cmp	r6, #255	; 0xff
  40bb38:	f000 814a 	beq.w	40bdd0 <_lv_blend_map+0x7f8>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bb3c:	f1c6 08ff 	rsb	r8, r6, #255	; 0xff
  40bb40:	f810 4c06 	ldrb.w	r4, [r0, #-6]
  40bb44:	08e5      	lsrs	r5, r4, #3
  40bb46:	f811 ec06 	ldrb.w	lr, [r1, #-6]
  40bb4a:	ea4f 07de 	mov.w	r7, lr, lsr #3
  40bb4e:	fb08 f707 	mul.w	r7, r8, r7
  40bb52:	fb06 7505 	mla	r5, r6, r5, r7
  40bb56:	3580      	adds	r5, #128	; 0x80
  40bb58:	eb05 2705 	add.w	r7, r5, r5, lsl #8
  40bb5c:	eb05 15c7 	add.w	r5, r5, r7, lsl #7
  40bb60:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  40bb64:	9509      	str	r5, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bb66:	f004 0407 	and.w	r4, r4, #7
  40bb6a:	f810 5c05 	ldrb.w	r5, [r0, #-5]
  40bb6e:	096f      	lsrs	r7, r5, #5
  40bb70:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
  40bb74:	940a      	str	r4, [sp, #40]	; 0x28
  40bb76:	f00e 0707 	and.w	r7, lr, #7
  40bb7a:	463c      	mov	r4, r7
  40bb7c:	f811 7c05 	ldrb.w	r7, [r1, #-5]
  40bb80:	ea4f 1957 	mov.w	r9, r7, lsr #5
  40bb84:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
  40bb88:	fb08 f909 	mul.w	r9, r8, r9
  40bb8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40bb8e:	fb06 9404 	mla	r4, r6, r4, r9
  40bb92:	3480      	adds	r4, #128	; 0x80
  40bb94:	eb04 2904 	add.w	r9, r4, r4, lsl #8
  40bb98:	eb04 14c9 	add.w	r4, r4, r9, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bb9c:	f005 051f 	and.w	r5, r5, #31
  40bba0:	f007 091f 	and.w	r9, r7, #31
  40bba4:	fb08 f809 	mul.w	r8, r8, r9
  40bba8:	fb06 8505 	mla	r5, r6, r5, r8
  40bbac:	3580      	adds	r5, #128	; 0x80
  40bbae:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  40bbb2:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
  40bbb6:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bbba:	0ea6      	lsrs	r6, r4, #26
  40bbbc:	f366 0e02 	bfi	lr, r6, #0, #3
  40bbc0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40bbc2:	f366 0ec7 	bfi	lr, r6, #3, #5
  40bbc6:	f801 ec06 	strb.w	lr, [r1, #-6]
  40bbca:	f365 0704 	bfi	r7, r5, #0, #5
  40bbce:	0de4      	lsrs	r4, r4, #23
  40bbd0:	f364 1747 	bfi	r7, r4, #5, #3
  40bbd4:	f801 7c05 	strb.w	r7, [r1, #-5]
                            MAP_NORMAL_MASK_PX(x + 1)
  40bbd8:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
  40bbdc:	2e00      	cmp	r6, #0
  40bbde:	d050      	beq.n	40bc82 <_lv_blend_map+0x6aa>
  40bbe0:	2eff      	cmp	r6, #255	; 0xff
  40bbe2:	f000 80fa 	beq.w	40bdda <_lv_blend_map+0x802>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bbe6:	f1c6 08ff 	rsb	r8, r6, #255	; 0xff
  40bbea:	f810 4c04 	ldrb.w	r4, [r0, #-4]
  40bbee:	08e5      	lsrs	r5, r4, #3
  40bbf0:	f811 ec04 	ldrb.w	lr, [r1, #-4]
  40bbf4:	ea4f 07de 	mov.w	r7, lr, lsr #3
  40bbf8:	fb08 f707 	mul.w	r7, r8, r7
  40bbfc:	fb06 7505 	mla	r5, r6, r5, r7
  40bc00:	3580      	adds	r5, #128	; 0x80
  40bc02:	eb05 2705 	add.w	r7, r5, r5, lsl #8
  40bc06:	eb05 15c7 	add.w	r5, r5, r7, lsl #7
  40bc0a:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  40bc0e:	9509      	str	r5, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bc10:	f004 0407 	and.w	r4, r4, #7
  40bc14:	f810 5c03 	ldrb.w	r5, [r0, #-3]
  40bc18:	096f      	lsrs	r7, r5, #5
  40bc1a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
  40bc1e:	940a      	str	r4, [sp, #40]	; 0x28
  40bc20:	f00e 0707 	and.w	r7, lr, #7
  40bc24:	463c      	mov	r4, r7
  40bc26:	f811 7c03 	ldrb.w	r7, [r1, #-3]
  40bc2a:	ea4f 1957 	mov.w	r9, r7, lsr #5
  40bc2e:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
  40bc32:	fb08 f909 	mul.w	r9, r8, r9
  40bc36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40bc38:	fb06 9404 	mla	r4, r6, r4, r9
  40bc3c:	3480      	adds	r4, #128	; 0x80
  40bc3e:	eb04 2904 	add.w	r9, r4, r4, lsl #8
  40bc42:	eb04 14c9 	add.w	r4, r4, r9, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bc46:	f005 051f 	and.w	r5, r5, #31
  40bc4a:	f007 091f 	and.w	r9, r7, #31
  40bc4e:	fb08 f809 	mul.w	r8, r8, r9
  40bc52:	fb06 8505 	mla	r5, r6, r5, r8
  40bc56:	3580      	adds	r5, #128	; 0x80
  40bc58:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  40bc5c:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
  40bc60:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bc64:	0ea6      	lsrs	r6, r4, #26
  40bc66:	f366 0e02 	bfi	lr, r6, #0, #3
  40bc6a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40bc6c:	f366 0ec7 	bfi	lr, r6, #3, #5
  40bc70:	f801 ec04 	strb.w	lr, [r1, #-4]
  40bc74:	f365 0704 	bfi	r7, r5, #0, #5
  40bc78:	0de4      	lsrs	r4, r4, #23
  40bc7a:	f364 1747 	bfi	r7, r4, #5, #3
  40bc7e:	f801 7c03 	strb.w	r7, [r1, #-3]
                            MAP_NORMAL_MASK_PX(x + 2)
  40bc82:	f81c 6c02 	ldrb.w	r6, [ip, #-2]
  40bc86:	2e00      	cmp	r6, #0
  40bc88:	d050      	beq.n	40bd2c <_lv_blend_map+0x754>
  40bc8a:	2eff      	cmp	r6, #255	; 0xff
  40bc8c:	f000 80aa 	beq.w	40bde4 <_lv_blend_map+0x80c>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bc90:	f1c6 08ff 	rsb	r8, r6, #255	; 0xff
  40bc94:	f810 4c02 	ldrb.w	r4, [r0, #-2]
  40bc98:	08e5      	lsrs	r5, r4, #3
  40bc9a:	f811 ec02 	ldrb.w	lr, [r1, #-2]
  40bc9e:	ea4f 07de 	mov.w	r7, lr, lsr #3
  40bca2:	fb08 f707 	mul.w	r7, r8, r7
  40bca6:	fb06 7505 	mla	r5, r6, r5, r7
  40bcaa:	3580      	adds	r5, #128	; 0x80
  40bcac:	eb05 2705 	add.w	r7, r5, r5, lsl #8
  40bcb0:	eb05 15c7 	add.w	r5, r5, r7, lsl #7
  40bcb4:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  40bcb8:	9509      	str	r5, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bcba:	f004 0407 	and.w	r4, r4, #7
  40bcbe:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  40bcc2:	096f      	lsrs	r7, r5, #5
  40bcc4:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
  40bcc8:	940a      	str	r4, [sp, #40]	; 0x28
  40bcca:	f00e 0707 	and.w	r7, lr, #7
  40bcce:	463c      	mov	r4, r7
  40bcd0:	f811 7c01 	ldrb.w	r7, [r1, #-1]
  40bcd4:	ea4f 1957 	mov.w	r9, r7, lsr #5
  40bcd8:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
  40bcdc:	fb08 f909 	mul.w	r9, r8, r9
  40bce0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40bce2:	fb06 9404 	mla	r4, r6, r4, r9
  40bce6:	3480      	adds	r4, #128	; 0x80
  40bce8:	eb04 2904 	add.w	r9, r4, r4, lsl #8
  40bcec:	eb04 14c9 	add.w	r4, r4, r9, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bcf0:	f005 051f 	and.w	r5, r5, #31
  40bcf4:	f007 091f 	and.w	r9, r7, #31
  40bcf8:	fb08 f809 	mul.w	r8, r8, r9
  40bcfc:	fb06 8505 	mla	r5, r6, r5, r8
  40bd00:	3580      	adds	r5, #128	; 0x80
  40bd02:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  40bd06:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
  40bd0a:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bd0e:	0ea6      	lsrs	r6, r4, #26
  40bd10:	f366 0e02 	bfi	lr, r6, #0, #3
  40bd14:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40bd16:	f366 0ec7 	bfi	lr, r6, #3, #5
  40bd1a:	f801 ec02 	strb.w	lr, [r1, #-2]
  40bd1e:	f365 0704 	bfi	r7, r5, #0, #5
  40bd22:	0de4      	lsrs	r4, r4, #23
  40bd24:	f364 1747 	bfi	r7, r4, #5, #3
  40bd28:	f801 7c01 	strb.w	r7, [r1, #-1]
                            MAP_NORMAL_MASK_PX(x + 3)
  40bd2c:	f81c 6c01 	ldrb.w	r6, [ip, #-1]
  40bd30:	2e00      	cmp	r6, #0
  40bd32:	f43f aeed 	beq.w	40bb10 <_lv_blend_map+0x538>
  40bd36:	2eff      	cmp	r6, #255	; 0xff
  40bd38:	d059      	beq.n	40bdee <_lv_blend_map+0x816>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bd3a:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
  40bd3e:	7805      	ldrb	r5, [r0, #0]
  40bd40:	08ec      	lsrs	r4, r5, #3
  40bd42:	f891 8000 	ldrb.w	r8, [r1]
  40bd46:	ea4f 07d8 	mov.w	r7, r8, lsr #3
  40bd4a:	fb09 f707 	mul.w	r7, r9, r7
  40bd4e:	fb06 7404 	mla	r4, r6, r4, r7
  40bd52:	3480      	adds	r4, #128	; 0x80
  40bd54:	eb04 2704 	add.w	r7, r4, r4, lsl #8
  40bd58:	eb04 14c7 	add.w	r4, r4, r7, lsl #7
  40bd5c:	f3c4 57c4 	ubfx	r7, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bd60:	f005 0407 	and.w	r4, r5, #7
  40bd64:	7845      	ldrb	r5, [r0, #1]
  40bd66:	ea4f 1e55 	mov.w	lr, r5, lsr #5
  40bd6a:	eb0e 04c4 	add.w	r4, lr, r4, lsl #3
  40bd6e:	9409      	str	r4, [sp, #36]	; 0x24
  40bd70:	f008 0407 	and.w	r4, r8, #7
  40bd74:	f891 e001 	ldrb.w	lr, [r1, #1]
  40bd78:	ea4f 1a5e 	mov.w	sl, lr, lsr #5
  40bd7c:	eb0a 0ac4 	add.w	sl, sl, r4, lsl #3
  40bd80:	fb09 fa0a 	mul.w	sl, r9, sl
  40bd84:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40bd86:	fb06 a404 	mla	r4, r6, r4, sl
  40bd8a:	3480      	adds	r4, #128	; 0x80
  40bd8c:	eb04 2a04 	add.w	sl, r4, r4, lsl #8
  40bd90:	eb04 14ca 	add.w	r4, r4, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bd94:	f005 051f 	and.w	r5, r5, #31
  40bd98:	f00e 0a1f 	and.w	sl, lr, #31
  40bd9c:	fb09 f90a 	mul.w	r9, r9, sl
  40bda0:	fb06 9505 	mla	r5, r6, r5, r9
  40bda4:	3580      	adds	r5, #128	; 0x80
  40bda6:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  40bdaa:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
  40bdae:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bdb2:	0ea6      	lsrs	r6, r4, #26
  40bdb4:	f366 0802 	bfi	r8, r6, #0, #3
  40bdb8:	f367 08c7 	bfi	r8, r7, #3, #5
  40bdbc:	f881 8000 	strb.w	r8, [r1]
  40bdc0:	f365 0e04 	bfi	lr, r5, #0, #5
  40bdc4:	0de4      	lsrs	r4, r4, #23
  40bdc6:	f364 1e47 	bfi	lr, r4, #5, #3
  40bdca:	f881 e001 	strb.w	lr, [r1, #1]
  40bdce:	e69f      	b.n	40bb10 <_lv_blend_map+0x538>
                            MAP_NORMAL_MASK_PX(x)
  40bdd0:	f830 4c06 	ldrh.w	r4, [r0, #-6]
  40bdd4:	f821 4c06 	strh.w	r4, [r1, #-6]
  40bdd8:	e6fe      	b.n	40bbd8 <_lv_blend_map+0x600>
                            MAP_NORMAL_MASK_PX(x + 1)
  40bdda:	f830 4c04 	ldrh.w	r4, [r0, #-4]
  40bdde:	f821 4c04 	strh.w	r4, [r1, #-4]
  40bde2:	e74e      	b.n	40bc82 <_lv_blend_map+0x6aa>
                            MAP_NORMAL_MASK_PX(x + 2)
  40bde4:	f830 4c02 	ldrh.w	r4, [r0, #-2]
  40bde8:	f821 4c02 	strh.w	r4, [r1, #-2]
  40bdec:	e79e      	b.n	40bd2c <_lv_blend_map+0x754>
                            MAP_NORMAL_MASK_PX(x + 3)
  40bdee:	8804      	ldrh	r4, [r0, #0]
  40bdf0:	800c      	strh	r4, [r1, #0]
  40bdf2:	e68d      	b.n	40bb10 <_lv_blend_map+0x538>
  40bdf4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
                for(; x < draw_area_w ; x++) {
  40bdf8:	4593      	cmp	fp, r2
  40bdfa:	dd63      	ble.n	40bec4 <_lv_blend_map+0x8ec>
                    mask32++;
  40bdfc:	4663      	mov	r3, ip
  40bdfe:	3b01      	subs	r3, #1
  40be00:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40be04:	9905      	ldr	r1, [sp, #20]
  40be06:	eb01 080c 	add.w	r8, r1, ip
  40be0a:	9904      	ldr	r1, [sp, #16]
  40be0c:	448c      	add	ip, r1
  40be0e:	e00a      	b.n	40be26 <_lv_blend_map+0x84e>
                    MAP_NORMAL_MASK_PX(x)
  40be10:	f8b8 1000 	ldrh.w	r1, [r8]
  40be14:	f8ac 1000 	strh.w	r1, [ip]
                for(; x < draw_area_w ; x++) {
  40be18:	3201      	adds	r2, #1
  40be1a:	f108 0802 	add.w	r8, r8, #2
  40be1e:	f10c 0c02 	add.w	ip, ip, #2
  40be22:	4593      	cmp	fp, r2
  40be24:	dd4e      	ble.n	40bec4 <_lv_blend_map+0x8ec>
                    MAP_NORMAL_MASK_PX(x)
  40be26:	f813 7f01 	ldrb.w	r7, [r3, #1]!
  40be2a:	2f00      	cmp	r7, #0
  40be2c:	d0f4      	beq.n	40be18 <_lv_blend_map+0x840>
  40be2e:	2fff      	cmp	r7, #255	; 0xff
  40be30:	d0ee      	beq.n	40be10 <_lv_blend_map+0x838>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40be32:	f1c7 0eff 	rsb	lr, r7, #255	; 0xff
  40be36:	f898 1000 	ldrb.w	r1, [r8]
  40be3a:	08cc      	lsrs	r4, r1, #3
  40be3c:	f89c 6000 	ldrb.w	r6, [ip]
  40be40:	08f0      	lsrs	r0, r6, #3
  40be42:	fb0e f000 	mul.w	r0, lr, r0
  40be46:	fb07 0404 	mla	r4, r7, r4, r0
  40be4a:	3480      	adds	r4, #128	; 0x80
  40be4c:	eb04 2004 	add.w	r0, r4, r4, lsl #8
  40be50:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
  40be54:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40be58:	f001 0107 	and.w	r1, r1, #7
  40be5c:	f898 0001 	ldrb.w	r0, [r8, #1]
  40be60:	0945      	lsrs	r5, r0, #5
  40be62:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
  40be66:	f006 0a07 	and.w	sl, r6, #7
  40be6a:	f89c 5001 	ldrb.w	r5, [ip, #1]
  40be6e:	ea4f 1955 	mov.w	r9, r5, lsr #5
  40be72:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40be76:	fb0e f909 	mul.w	r9, lr, r9
  40be7a:	fb07 9101 	mla	r1, r7, r1, r9
  40be7e:	3180      	adds	r1, #128	; 0x80
  40be80:	eb01 2901 	add.w	r9, r1, r1, lsl #8
  40be84:	eb01 11c9 	add.w	r1, r1, r9, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40be88:	f000 001f 	and.w	r0, r0, #31
  40be8c:	f005 091f 	and.w	r9, r5, #31
  40be90:	fb0e fe09 	mul.w	lr, lr, r9
  40be94:	fb07 e000 	mla	r0, r7, r0, lr
  40be98:	3080      	adds	r0, #128	; 0x80
  40be9a:	eb00 2700 	add.w	r7, r0, r0, lsl #8
  40be9e:	eb00 10c7 	add.w	r0, r0, r7, lsl #7
  40bea2:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bea6:	0e8f      	lsrs	r7, r1, #26
  40bea8:	f367 0602 	bfi	r6, r7, #0, #3
  40beac:	f364 06c7 	bfi	r6, r4, #3, #5
  40beb0:	f88c 6000 	strb.w	r6, [ip]
  40beb4:	f360 0504 	bfi	r5, r0, #0, #5
  40beb8:	0dc9      	lsrs	r1, r1, #23
  40beba:	f361 1547 	bfi	r5, r1, #5, #3
  40bebe:	f88c 5001 	strb.w	r5, [ip, #1]
  40bec2:	e7a9      	b.n	40be18 <_lv_blend_map+0x840>
                disp_buf_first += disp_w;
  40bec4:	9b04      	ldr	r3, [sp, #16]
  40bec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40bec8:	4413      	add	r3, r2
  40beca:	9304      	str	r3, [sp, #16]
  40becc:	9b06      	ldr	r3, [sp, #24]
  40bece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40bed0:	4413      	add	r3, r2
  40bed2:	9306      	str	r3, [sp, #24]
                map_buf_first += map_w;
  40bed4:	9b05      	ldr	r3, [sp, #20]
  40bed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40bed8:	4413      	add	r3, r2
  40beda:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
  40bedc:	9b07      	ldr	r3, [sp, #28]
  40bede:	3301      	adds	r3, #1
  40bee0:	9307      	str	r3, [sp, #28]
  40bee2:	9a08      	ldr	r2, [sp, #32]
  40bee4:	429a      	cmp	r2, r3
  40bee6:	f43f ab84 	beq.w	40b5f2 <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40beea:	f1bb 0f00 	cmp.w	fp, #0
  40beee:	f340 8137 	ble.w	40c160 <_lv_blend_map+0xb88>
  40bef2:	9a06      	ldr	r2, [sp, #24]
  40bef4:	f012 0f03 	tst.w	r2, #3
  40bef8:	f000 8144 	beq.w	40c184 <_lv_blend_map+0xbac>
  40befc:	f8dd 8014 	ldr.w	r8, [sp, #20]
  40bf00:	f8dd c010 	ldr.w	ip, [sp, #16]
  40bf04:	4696      	mov	lr, r2
  40bf06:	2200      	movs	r2, #0
  40bf08:	e5a3      	b.n	40ba52 <_lv_blend_map+0x47a>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40bf0a:	9d07      	ldr	r5, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bf0c:	f1c5 06ff 	rsb	r6, r5, #255	; 0xff
  40bf10:	f898 3000 	ldrb.w	r3, [r8]
  40bf14:	08d9      	lsrs	r1, r3, #3
  40bf16:	f89c 4000 	ldrb.w	r4, [ip]
  40bf1a:	08e2      	lsrs	r2, r4, #3
  40bf1c:	fb06 f202 	mul.w	r2, r6, r2
  40bf20:	fb05 2101 	mla	r1, r5, r1, r2
  40bf24:	3180      	adds	r1, #128	; 0x80
  40bf26:	eb01 2201 	add.w	r2, r1, r1, lsl #8
  40bf2a:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
  40bf2e:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bf32:	f003 0307 	and.w	r3, r3, #7
  40bf36:	f898 2001 	ldrb.w	r2, [r8, #1]
  40bf3a:	0950      	lsrs	r0, r2, #5
  40bf3c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  40bf40:	f004 0e07 	and.w	lr, r4, #7
  40bf44:	f89c 0001 	ldrb.w	r0, [ip, #1]
  40bf48:	0947      	lsrs	r7, r0, #5
  40bf4a:	eb07 07ce 	add.w	r7, r7, lr, lsl #3
  40bf4e:	fb06 f707 	mul.w	r7, r6, r7
  40bf52:	fb05 7303 	mla	r3, r5, r3, r7
  40bf56:	3380      	adds	r3, #128	; 0x80
  40bf58:	eb03 2703 	add.w	r7, r3, r3, lsl #8
  40bf5c:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bf60:	f002 021f 	and.w	r2, r2, #31
  40bf64:	f000 071f 	and.w	r7, r0, #31
  40bf68:	fb06 f607 	mul.w	r6, r6, r7
  40bf6c:	fb05 6202 	mla	r2, r5, r2, r6
  40bf70:	3280      	adds	r2, #128	; 0x80
  40bf72:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40bf76:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40bf7a:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bf7e:	0e9d      	lsrs	r5, r3, #26
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
  40bf80:	f365 0402 	bfi	r4, r5, #0, #3
  40bf84:	f361 04c7 	bfi	r4, r1, #3, #5
  40bf88:	f88c 4000 	strb.w	r4, [ip]
  40bf8c:	f362 0004 	bfi	r0, r2, #0, #5
  40bf90:	0ddb      	lsrs	r3, r3, #23
  40bf92:	f363 1047 	bfi	r0, r3, #5, #3
  40bf96:	f88c 0001 	strb.w	r0, [ip, #1]
  40bf9a:	f108 0802 	add.w	r8, r8, #2
  40bf9e:	f10c 0c02 	add.w	ip, ip, #2
                for(x = 0; x < draw_area_w; x++) {
  40bfa2:	45c2      	cmp	sl, r8
  40bfa4:	d00a      	beq.n	40bfbc <_lv_blend_map+0x9e4>
                    if(mask[x]) {
  40bfa6:	f819 2f01 	ldrb.w	r2, [r9, #1]!
  40bfaa:	2a00      	cmp	r2, #0
  40bfac:	d0f5      	beq.n	40bf9a <_lv_blend_map+0x9c2>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40bfae:	2afc      	cmp	r2, #252	; 0xfc
  40bfb0:	d8ab      	bhi.n	40bf0a <_lv_blend_map+0x932>
  40bfb2:	fb02 f20b 	mul.w	r2, r2, fp
  40bfb6:	f3c2 2507 	ubfx	r5, r2, #8, #8
  40bfba:	e7a7      	b.n	40bf0c <_lv_blend_map+0x934>
                disp_buf_first += disp_w;
  40bfbc:	9b04      	ldr	r3, [sp, #16]
  40bfbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40bfc0:	4413      	add	r3, r2
  40bfc2:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
  40bfc4:	9b05      	ldr	r3, [sp, #20]
  40bfc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40bfc8:	4413      	add	r3, r2
  40bfca:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
  40bfcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bfce:	3301      	adds	r3, #1
  40bfd0:	9309      	str	r3, [sp, #36]	; 0x24
  40bfd2:	9a06      	ldr	r2, [sp, #24]
  40bfd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40bfd6:	440a      	add	r2, r1
  40bfd8:	9206      	str	r2, [sp, #24]
  40bfda:	9a08      	ldr	r2, [sp, #32]
  40bfdc:	429a      	cmp	r2, r3
  40bfde:	f43f ab08 	beq.w	40b5f2 <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w; x++) {
  40bfe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bfe4:	2b00      	cmp	r3, #0
  40bfe6:	dde9      	ble.n	40bfbc <_lv_blend_map+0x9e4>
  40bfe8:	9b05      	ldr	r3, [sp, #20]
  40bfea:	4698      	mov	r8, r3
  40bfec:	f8dd c010 	ldr.w	ip, [sp, #16]
  40bff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40bff2:	eb03 0a02 	add.w	sl, r3, r2
  40bff6:	f8dd 9018 	ldr.w	r9, [sp, #24]
  40bffa:	e7d4      	b.n	40bfa6 <_lv_blend_map+0x9ce>
    switch(mode) {
  40bffc:	2f01      	cmp	r7, #1
  40bffe:	d03f      	beq.n	40c080 <_lv_blend_map+0xaa8>
  40c000:	2f02      	cmp	r7, #2
  40c002:	f47f aaf6 	bne.w	40b5f2 <_lv_blend_map+0x1a>
            blend_fp = color_blend_true_color_subtractive;
  40c006:	f8df 8188 	ldr.w	r8, [pc, #392]	; 40c190 <_lv_blend_map+0xbb8>
  40c00a:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  40c00e:	9309      	str	r3, [sp, #36]	; 0x24
  40c010:	8aa8      	ldrh	r0, [r5, #20]
  40c012:	3001      	adds	r0, #1
  40c014:	1ac0      	subs	r0, r0, r3
  40c016:	b200      	sxth	r0, r0
  40c018:	f9b6 3000 	ldrsh.w	r3, [r6]
  40c01c:	9308      	str	r3, [sp, #32]
  40c01e:	88b3      	ldrh	r3, [r6, #4]
  40c020:	3301      	adds	r3, #1
  40c022:	9a08      	ldr	r2, [sp, #32]
  40c024:	1a9b      	subs	r3, r3, r2
  40c026:	b21b      	sxth	r3, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40c028:	46f1      	mov	r9, lr
  40c02a:	fb0e f200 	mul.w	r2, lr, r0
  40c02e:	9f04      	ldr	r7, [sp, #16]
  40c030:	eb07 0742 	add.w	r7, r7, r2, lsl #1
  40c034:	9704      	str	r7, [sp, #16]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40c036:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
  40c03a:	f9b5 5012 	ldrsh.w	r5, [r5, #18]
  40c03e:	1b77      	subs	r7, r6, r5
  40c040:	ebae 0707 	sub.w	r7, lr, r7
  40c044:	fb03 f707 	mul.w	r7, r3, r7
  40c048:	9d07      	ldr	r5, [sp, #28]
  40c04a:	eb05 0747 	add.w	r7, r5, r7, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40c04e:	2c01      	cmp	r4, #1
  40c050:	d019      	beq.n	40c086 <_lv_blend_map+0xaae>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40c052:	9a06      	ldr	r2, [sp, #24]
  40c054:	eba2 020a 	sub.w	r2, r2, sl
        map_buf_tmp -= draw_area->x1;
  40c058:	eba7 0a4a 	sub.w	sl, r7, sl, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c05c:	45e6      	cmp	lr, ip
  40c05e:	f73f aac8 	bgt.w	40b5f2 <_lv_blend_map+0x1a>
            disp_buf_tmp += disp_w;
  40c062:	0040      	lsls	r0, r0, #1
  40c064:	9007      	str	r0, [sp, #28]
            map_buf_tmp += map_w;
  40c066:	005b      	lsls	r3, r3, #1
  40c068:	9308      	str	r3, [sp, #32]
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40c06a:	f8cd b018 	str.w	fp, [sp, #24]
  40c06e:	1c4b      	adds	r3, r1, #1
  40c070:	9905      	ldr	r1, [sp, #20]
  40c072:	1a5b      	subs	r3, r3, r1
            mask_tmp += draw_area_w;
  40c074:	b21b      	sxth	r3, r3
  40c076:	9309      	str	r3, [sp, #36]	; 0x24
  40c078:	f8cd b014 	str.w	fp, [sp, #20]
  40c07c:	4693      	mov	fp, r2
  40c07e:	e060      	b.n	40c142 <_lv_blend_map+0xb6a>
            blend_fp = color_blend_true_color_additive;
  40c080:	f8df 8110 	ldr.w	r8, [pc, #272]	; 40c194 <_lv_blend_map+0xbbc>
  40c084:	e7c1      	b.n	40c00a <_lv_blend_map+0xa32>
        map_buf_tmp -= draw_area->x1;
  40c086:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c088:	9a08      	ldr	r2, [sp, #32]
  40c08a:	1a8a      	subs	r2, r1, r2
  40c08c:	eb07 0742 	add.w	r7, r7, r2, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c090:	45e6      	cmp	lr, ip
  40c092:	f73f aaae 	bgt.w	40b5f2 <_lv_blend_map+0x1a>
            disp_buf_tmp += disp_w;
  40c096:	ea4f 0a40 	mov.w	sl, r0, lsl #1
            map_buf_tmp += map_w;
  40c09a:	005b      	lsls	r3, r3, #1
  40c09c:	9305      	str	r3, [sp, #20]
  40c09e:	f8cd a018 	str.w	sl, [sp, #24]
  40c0a2:	463b      	mov	r3, r7
  40c0a4:	4647      	mov	r7, r8
  40c0a6:	f8dd a010 	ldr.w	sl, [sp, #16]
  40c0aa:	4698      	mov	r8, r3
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c0ac:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  40c0b0:	461c      	mov	r4, r3
  40c0b2:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
  40c0b6:	4293      	cmp	r3, r2
  40c0b8:	dc10      	bgt.n	40c0dc <_lv_blend_map+0xb04>
  40c0ba:	005b      	lsls	r3, r3, #1
  40c0bc:	eb0a 0503 	add.w	r5, sl, r3
  40c0c0:	eb08 0603 	add.w	r6, r8, r3
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
  40c0c4:	465a      	mov	r2, fp
  40c0c6:	8829      	ldrh	r1, [r5, #0]
  40c0c8:	f836 0b02 	ldrh.w	r0, [r6], #2
  40c0cc:	47b8      	blx	r7
  40c0ce:	f825 0b02 	strh.w	r0, [r5], #2
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c0d2:	3401      	adds	r4, #1
  40c0d4:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  40c0d8:	429c      	cmp	r4, r3
  40c0da:	ddf3      	ble.n	40c0c4 <_lv_blend_map+0xaec>
            disp_buf_tmp += disp_w;
  40c0dc:	9b06      	ldr	r3, [sp, #24]
  40c0de:	449a      	add	sl, r3
            map_buf_tmp += map_w;
  40c0e0:	9b05      	ldr	r3, [sp, #20]
  40c0e2:	4498      	add	r8, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c0e4:	f109 0901 	add.w	r9, r9, #1
  40c0e8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40c0ec:	4599      	cmp	r9, r3
  40c0ee:	dddd      	ble.n	40c0ac <_lv_blend_map+0xad4>
  40c0f0:	f7ff ba7f 	b.w	40b5f2 <_lv_blend_map+0x1a>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40c0f4:	9a06      	ldr	r2, [sp, #24]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
  40c0f6:	8831      	ldrh	r1, [r6, #0]
  40c0f8:	8820      	ldrh	r0, [r4, #0]
  40c0fa:	47c0      	blx	r8
  40c0fc:	8030      	strh	r0, [r6, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c0fe:	3501      	adds	r5, #1
  40c100:	3602      	adds	r6, #2
  40c102:	3402      	adds	r4, #2
  40c104:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  40c108:	429d      	cmp	r5, r3
  40c10a:	dc0b      	bgt.n	40c124 <_lv_blend_map+0xb4c>
                if(mask_tmp[x] == 0) continue;
  40c10c:	f817 3b01 	ldrb.w	r3, [r7], #1
  40c110:	2b00      	cmp	r3, #0
  40c112:	d0f4      	beq.n	40c0fe <_lv_blend_map+0xb26>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40c114:	2bfc      	cmp	r3, #252	; 0xfc
  40c116:	d8ed      	bhi.n	40c0f4 <_lv_blend_map+0xb1c>
  40c118:	9a05      	ldr	r2, [sp, #20]
  40c11a:	fb03 f302 	mul.w	r3, r3, r2
  40c11e:	f3c3 2207 	ubfx	r2, r3, #8, #8
  40c122:	e7e8      	b.n	40c0f6 <_lv_blend_map+0xb1e>
            disp_buf_tmp += disp_w;
  40c124:	9b04      	ldr	r3, [sp, #16]
  40c126:	9a07      	ldr	r2, [sp, #28]
  40c128:	4413      	add	r3, r2
  40c12a:	9304      	str	r3, [sp, #16]
  40c12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c12e:	449b      	add	fp, r3
            map_buf_tmp += map_w;
  40c130:	9b08      	ldr	r3, [sp, #32]
  40c132:	449a      	add	sl, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c134:	f109 0901 	add.w	r9, r9, #1
  40c138:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40c13c:	4599      	cmp	r9, r3
  40c13e:	f73f aa58 	bgt.w	40b5f2 <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c142:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  40c146:	461d      	mov	r5, r3
  40c148:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
  40c14c:	4293      	cmp	r3, r2
  40c14e:	dce9      	bgt.n	40c124 <_lv_blend_map+0xb4c>
  40c150:	eb0b 0703 	add.w	r7, fp, r3
  40c154:	005b      	lsls	r3, r3, #1
  40c156:	9a04      	ldr	r2, [sp, #16]
  40c158:	18d6      	adds	r6, r2, r3
  40c15a:	eb0a 0403 	add.w	r4, sl, r3
  40c15e:	e7d5      	b.n	40c10c <_lv_blend_map+0xb34>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40c160:	9b06      	ldr	r3, [sp, #24]
  40c162:	2200      	movs	r2, #0
                for(; x < x_end4; x += 4) {
  40c164:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c166:	4291      	cmp	r1, r2
  40c168:	f77f aeac 	ble.w	40bec4 <_lv_blend_map+0x8ec>
  40c16c:	3304      	adds	r3, #4
  40c16e:	1cd1      	adds	r1, r2, #3
  40c170:	0049      	lsls	r1, r1, #1
  40c172:	9805      	ldr	r0, [sp, #20]
  40c174:	4408      	add	r0, r1
  40c176:	9c04      	ldr	r4, [sp, #16]
  40c178:	4421      	add	r1, r4
  40c17a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40c17e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40c182:	e4cc      	b.n	40bb1e <_lv_blend_map+0x546>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40c184:	9b06      	ldr	r3, [sp, #24]
  40c186:	2200      	movs	r2, #0
                for(; x < x_end4; x += 4) {
  40c188:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c18a:	4291      	cmp	r1, r2
  40c18c:	dcee      	bgt.n	40c16c <_lv_blend_map+0xb94>
  40c18e:	e636      	b.n	40bdfe <_lv_blend_map+0x826>
  40c190:	0040a90b 	.word	0x0040a90b
  40c194:	0040a829 	.word	0x0040a829

0040c198 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
  40c198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c19c:	b0bf      	sub	sp, #252	; 0xfc
  40c19e:	901a      	str	r0, [sp, #104]	; 0x68
  40c1a0:	9122      	str	r1, [sp, #136]	; 0x88
  40c1a2:	4690      	mov	r8, r2
  40c1a4:	9308      	str	r3, [sp, #32]
  40c1a6:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
  40c1aa:	930a      	str	r3, [sp, #40]	; 0x28
  40c1ac:	f89d 3124 	ldrb.w	r3, [sp, #292]	; 0x124
  40c1b0:	9305      	str	r3, [sp, #20]
  40c1b2:	1e4b      	subs	r3, r1, #1
  40c1b4:	1dc8      	adds	r0, r1, #7
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  40c1b6:	aa3c      	add	r2, sp, #240	; 0xf0
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  40c1b8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40c1bc:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  40c1c0:	4298      	cmp	r0, r3
  40c1c2:	d1f9      	bne.n	40c1b8 <lv_draw_map+0x20>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40c1c4:	4ba5      	ldr	r3, [pc, #660]	; (40c45c <lv_draw_map+0x2c4>)
  40c1c6:	4798      	blx	r3
  40c1c8:	4604      	mov	r4, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c1ca:	4ba5      	ldr	r3, [pc, #660]	; (40c460 <lv_draw_map+0x2c8>)
  40c1cc:	4798      	blx	r3
  40c1ce:	9017      	str	r0, [sp, #92]	; 0x5c
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
  40c1d0:	8a01      	ldrh	r1, [r0, #16]
  40c1d2:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	; 0xf0
  40c1d6:	1a5b      	subs	r3, r3, r1
  40c1d8:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    draw_area.y1 -= disp_area->y1;
  40c1dc:	8a42      	ldrh	r2, [r0, #18]
  40c1de:	f8bd 30f2 	ldrh.w	r3, [sp, #242]	; 0xf2
  40c1e2:	1a9b      	subs	r3, r3, r2
  40c1e4:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    draw_area.x2 -= disp_area->x1;
  40c1e8:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
  40c1ec:	1a5b      	subs	r3, r3, r1
  40c1ee:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    draw_area.y2 -= disp_area->y1;
  40c1f2:	f8bd 30f6 	ldrh.w	r3, [sp, #246]	; 0xf6
  40c1f6:	1a9b      	subs	r3, r3, r2
  40c1f8:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40c1fc:	4b99      	ldr	r3, [pc, #612]	; (40c464 <lv_draw_map+0x2cc>)
  40c1fe:	4798      	blx	r3

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
  40c200:	9018      	str	r0, [sp, #96]	; 0x60
  40c202:	b938      	cbnz	r0, 40c214 <lv_draw_map+0x7c>
  40c204:	9a08      	ldr	r2, [sp, #32]
  40c206:	8853      	ldrh	r3, [r2, #2]
  40c208:	b923      	cbnz	r3, 40c214 <lv_draw_map+0x7c>
  40c20a:	8913      	ldrh	r3, [r2, #8]
  40c20c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c210:	f000 80a3 	beq.w	40c35a <lv_draw_map+0x1c2>
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40c214:	9b05      	ldr	r3, [sp, #20]
  40c216:	2b00      	cmp	r3, #0
  40c218:	bf14      	ite	ne
  40c21a:	f04f 0b03 	movne.w	fp, #3
  40c21e:	f04f 0b02 	moveq.w	fp, #2
  40c222:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c224:	460b      	mov	r3, r1
  40c226:	f9b1 2000 	ldrsh.w	r2, [r1]
  40c22a:	888e      	ldrh	r6, [r1, #4]
  40c22c:	3601      	adds	r6, #1
  40c22e:	1ab6      	subs	r6, r6, r2
  40c230:	b236      	sxth	r6, r6

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
  40c232:	f9bd 00f2 	ldrsh.w	r0, [sp, #242]	; 0xf2
  40c236:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  40c238:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
  40c23c:	f8cd b010 	str.w	fp, [sp, #16]
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
  40c240:	f9bd 50f0 	ldrsh.w	r5, [sp, #240]	; 0xf0
  40c244:	f9b7 7010 	ldrsh.w	r7, [r7, #16]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
  40c248:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40c24c:	1a5b      	subs	r3, r3, r1
  40c24e:	1ac3      	subs	r3, r0, r3
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
  40c250:	1bd2      	subs	r2, r2, r7
  40c252:	1aaa      	subs	r2, r5, r2
  40c254:	fb06 2303 	mla	r3, r6, r3, r2
  40c258:	fb03 820b 	mla	r2, r3, fp, r8
  40c25c:	9210      	str	r2, [sp, #64]	; 0x40
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
  40c25e:	b2ad      	uxth	r5, r5
  40c260:	19ea      	adds	r2, r5, r7
  40c262:	b292      	uxth	r2, r2
  40c264:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
  40c268:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
  40c26c:	3301      	adds	r3, #1
  40c26e:	1b5b      	subs	r3, r3, r5
  40c270:	b29b      	uxth	r3, r3
  40c272:	b21d      	sxth	r5, r3
  40c274:	9511      	str	r5, [sp, #68]	; 0x44
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
  40c276:	3b01      	subs	r3, #1
  40c278:	4413      	add	r3, r2
  40c27a:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
        blend_area.y1 = disp_area->y1 + draw_area.y1;
  40c27e:	b280      	uxth	r0, r0
  40c280:	1843      	adds	r3, r0, r1
  40c282:	b21b      	sxth	r3, r3
  40c284:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        blend_area.y2 = blend_area.y1;
  40c288:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c28c:	f8bd 70f6 	ldrh.w	r7, [sp, #246]	; 0xf6
  40c290:	3701      	adds	r7, #1
  40c292:	1a3f      	subs	r7, r7, r0
  40c294:	b23f      	sxth	r7, r7

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c296:	9908      	ldr	r1, [sp, #32]
  40c298:	884b      	ldrh	r3, [r1, #2]
  40c29a:	2b00      	cmp	r3, #0
  40c29c:	f040 836e 	bne.w	40c97c <lv_draw_map+0x7e4>
  40c2a0:	890b      	ldrh	r3, [r1, #8]
  40c2a2:	f5b3 7980 	subs.w	r9, r3, #256	; 0x100
  40c2a6:	bf18      	it	ne
  40c2a8:	f04f 0901 	movne.w	r9, #1
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40c2ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
  40c2ae:	2a00      	cmp	r2, #0
  40c2b0:	bf08      	it	eq
  40c2b2:	f5b3 7f80 	cmpeq.w	r3, #256	; 0x100
  40c2b6:	d106      	bne.n	40c2c6 <lv_draw_map+0x12e>
  40c2b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c2ba:	b922      	cbnz	r2, 40c2c6 <lv_draw_map+0x12e>
  40c2bc:	7a8b      	ldrb	r3, [r1, #10]
  40c2be:	b913      	cbnz	r3, 40c2c6 <lv_draw_map+0x12e>
  40c2c0:	9b05      	ldr	r3, [sp, #20]
  40c2c2:	2b00      	cmp	r3, #0
  40c2c4:	d162      	bne.n	40c38c <lv_draw_map+0x1f4>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40c2c6:	4620      	mov	r0, r4
  40c2c8:	4b67      	ldr	r3, [pc, #412]	; (40c468 <lv_draw_map+0x2d0>)
  40c2ca:	4798      	blx	r3
  40c2cc:	4604      	mov	r4, r0
  40c2ce:	901b      	str	r0, [sp, #108]	; 0x6c
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c2d0:	a83c      	add	r0, sp, #240	; 0xf0
  40c2d2:	4b66      	ldr	r3, [pc, #408]	; (40c46c <lv_draw_map+0x2d4>)
  40c2d4:	4798      	blx	r3
  40c2d6:	4284      	cmp	r4, r0
  40c2d8:	f080 80ee 	bcs.w	40c4b8 <lv_draw_map+0x320>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40c2dc:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  40c2de:	0068      	lsls	r0, r5, #1
  40c2e0:	4c63      	ldr	r4, [pc, #396]	; (40c470 <lv_draw_map+0x2d8>)
  40c2e2:	47a0      	blx	r4
  40c2e4:	9019      	str	r0, [sp, #100]	; 0x64
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40c2e6:	4628      	mov	r0, r5
  40c2e8:	47a0      	blx	r4
  40c2ea:	9016      	str	r0, [sp, #88]	; 0x58

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
  40c2ec:	214c      	movs	r1, #76	; 0x4c
  40c2ee:	a829      	add	r0, sp, #164	; 0xa4
  40c2f0:	4b60      	ldr	r3, [pc, #384]	; (40c474 <lv_draw_map+0x2dc>)
  40c2f2:	4798      	blx	r3
            if(transform) {
  40c2f4:	f1b9 0f00 	cmp.w	r9, #0
  40c2f8:	f040 8358 	bne.w	40c9ac <lv_draw_map+0x814>

                _lv_img_buf_transform_init(&trans_dsc);
            }
#endif
            uint16_t recolor_premult[3] = {0};
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
  40c2fc:	9808      	ldr	r0, [sp, #32]
  40c2fe:	7a83      	ldrb	r3, [r0, #10]
  40c300:	43da      	mvns	r2, r3
  40c302:	b2d2      	uxtb	r2, r2
  40c304:	9215      	str	r2, [sp, #84]	; 0x54
            if(draw_dsc->recolor_opa != 0) {
  40c306:	2b00      	cmp	r3, #0
  40c308:	f000 8102 	beq.w	40c510 <lv_draw_map+0x378>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40c30c:	b29b      	uxth	r3, r3
  40c30e:	7b02      	ldrb	r2, [r0, #12]
  40c310:	08d1      	lsrs	r1, r2, #3
  40c312:	fb01 f103 	mul.w	r1, r1, r3
  40c316:	9114      	str	r1, [sp, #80]	; 0x50
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40c318:	f002 0107 	and.w	r1, r2, #7
  40c31c:	7b42      	ldrb	r2, [r0, #13]
  40c31e:	0950      	lsrs	r0, r2, #5
  40c320:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  40c324:	fb01 f103 	mul.w	r1, r1, r3
  40c328:	9113      	str	r1, [sp, #76]	; 0x4c
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40c32a:	f002 021f 	and.w	r2, r2, #31
  40c32e:	fb02 f303 	mul.w	r3, r2, r3
  40c332:	9312      	str	r3, [sp, #72]	; 0x48
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c336:	9a05      	ldr	r2, [sp, #20]
  40c338:	4313      	orrs	r3, r2
  40c33a:	9325      	str	r3, [sp, #148]	; 0x94
  40c33c:	f040 80ed 	bne.w	40c51a <lv_draw_map+0x382>
  40c340:	9a08      	ldr	r2, [sp, #32]
  40c342:	8853      	ldrh	r3, [r2, #2]
  40c344:	2b00      	cmp	r3, #0
  40c346:	f040 8106 	bne.w	40c556 <lv_draw_map+0x3be>
  40c34a:	8913      	ldrh	r3, [r2, #8]
  40c34c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c350:	bf14      	ite	ne
  40c352:	2302      	movne	r3, #2
  40c354:	2301      	moveq	r3, #1
  40c356:	931c      	str	r3, [sp, #112]	; 0x70
  40c358:	e0e1      	b.n	40c51e <lv_draw_map+0x386>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
  40c35a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c35c:	2b00      	cmp	r3, #0
  40c35e:	f47f af59 	bne.w	40c214 <lv_draw_map+0x7c>
  40c362:	9b05      	ldr	r3, [sp, #20]
  40c364:	2b00      	cmp	r3, #0
  40c366:	f47f af55 	bne.w	40c214 <lv_draw_map+0x7c>
  40c36a:	7a93      	ldrb	r3, [r2, #10]
  40c36c:	2b00      	cmp	r3, #0
  40c36e:	f47f af51 	bne.w	40c214 <lv_draw_map+0x7c>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
  40c372:	7b93      	ldrb	r3, [r2, #14]
  40c374:	9302      	str	r3, [sp, #8]
  40c376:	7813      	ldrb	r3, [r2, #0]
  40c378:	9301      	str	r3, [sp, #4]
  40c37a:	2301      	movs	r3, #1
  40c37c:	9300      	str	r3, [sp, #0]
  40c37e:	2300      	movs	r3, #0
  40c380:	4642      	mov	r2, r8
  40c382:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c384:	9822      	ldr	r0, [sp, #136]	; 0x88
  40c386:	4c3c      	ldr	r4, [pc, #240]	; (40c478 <lv_draw_map+0x2e0>)
  40c388:	47a0      	blx	r4
  40c38a:	e2f4      	b.n	40c976 <lv_draw_map+0x7de>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40c38c:	4620      	mov	r0, r4
  40c38e:	4b36      	ldr	r3, [pc, #216]	; (40c468 <lv_draw_map+0x2d0>)
  40c390:	4798      	blx	r3
  40c392:	4604      	mov	r4, r0
  40c394:	4605      	mov	r5, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c396:	a83c      	add	r0, sp, #240	; 0xf0
  40c398:	4b34      	ldr	r3, [pc, #208]	; (40c46c <lv_draw_map+0x2d4>)
  40c39a:	4798      	blx	r3
  40c39c:	4284      	cmp	r4, r0
  40c39e:	d211      	bcs.n	40c3c4 <lv_draw_map+0x22c>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40c3a0:	0068      	lsls	r0, r5, #1
  40c3a2:	4c33      	ldr	r4, [pc, #204]	; (40c470 <lv_draw_map+0x2d8>)
  40c3a4:	47a0      	blx	r4
  40c3a6:	4680      	mov	r8, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40c3a8:	4628      	mov	r0, r5
  40c3aa:	47a0      	blx	r4
  40c3ac:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
  40c3ae:	46ba      	mov	sl, r7
  40c3b0:	2f00      	cmp	r7, #0
  40c3b2:	dd63      	ble.n	40c47c <lv_draw_map+0x2e4>
                map_buf_tmp += map_w * px_size_byte;
  40c3b4:	9b04      	ldr	r3, [sp, #16]
  40c3b6:	fb03 f906 	mul.w	r9, r3, r6
  40c3ba:	2600      	movs	r6, #0
  40c3bc:	46b4      	mov	ip, r6
  40c3be:	9504      	str	r5, [sp, #16]
  40c3c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40c3c2:	e027      	b.n	40c414 <lv_draw_map+0x27c>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c3c4:	a83c      	add	r0, sp, #240	; 0xf0
  40c3c6:	4b29      	ldr	r3, [pc, #164]	; (40c46c <lv_draw_map+0x2d4>)
  40c3c8:	4798      	blx	r3
  40c3ca:	4605      	mov	r5, r0
  40c3cc:	e7e8      	b.n	40c3a0 <lv_draw_map+0x208>
  40c3ce:	445b      	add	r3, fp
  40c3d0:	3702      	adds	r7, #2
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40c3d2:	4596      	cmp	lr, r2
  40c3d4:	d00a      	beq.n	40c3ec <lv_draw_map+0x254>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40c3d6:	7899      	ldrb	r1, [r3, #2]
                    mask_buf[px_i] = px_opa;
  40c3d8:	f802 1b01 	strb.w	r1, [r2], #1
                    if(px_opa) {
  40c3dc:	2900      	cmp	r1, #0
  40c3de:	d0f6      	beq.n	40c3ce <lv_draw_map+0x236>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
  40c3e0:	7858      	ldrb	r0, [r3, #1]
  40c3e2:	7819      	ldrb	r1, [r3, #0]
  40c3e4:	eb01 2100 	add.w	r1, r1, r0, lsl #8
  40c3e8:	8039      	strh	r1, [r7, #0]
  40c3ea:	e7f0      	b.n	40c3ce <lv_draw_map+0x236>
                map_buf_tmp += map_w * px_size_byte;
  40c3ec:	444d      	add	r5, r9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c3ee:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
  40c3f2:	3301      	adds	r3, #1
  40c3f4:	f8bd 20f0 	ldrh.w	r2, [sp, #240]	; 0xf0
  40c3f8:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40c3fa:	fa0c f383 	sxtah	r3, ip, r3
  40c3fe:	9a04      	ldr	r2, [sp, #16]
  40c400:	429a      	cmp	r2, r3
  40c402:	d913      	bls.n	40c42c <lv_draw_map+0x294>
                    blend_area.y2 ++;
  40c404:	f8bd 30a2 	ldrh.w	r3, [sp, #162]	; 0xa2
  40c408:	3301      	adds	r3, #1
  40c40a:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
            for(y = 0; y < draw_area_h; y++) {
  40c40e:	3601      	adds	r6, #1
  40c410:	4556      	cmp	r6, sl
  40c412:	d033      	beq.n	40c47c <lv_draw_map+0x2e4>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40c414:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c416:	2b00      	cmp	r3, #0
  40c418:	dde8      	ble.n	40c3ec <lv_draw_map+0x254>
  40c41a:	eb04 020c 	add.w	r2, r4, ip
  40c41e:	eb08 074c 	add.w	r7, r8, ip, lsl #1
  40c422:	449c      	add	ip, r3
  40c424:	eb04 0e0c 	add.w	lr, r4, ip
  40c428:	462b      	mov	r3, r5
  40c42a:	e7d4      	b.n	40c3d6 <lv_draw_map+0x23e>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40c42c:	9a08      	ldr	r2, [sp, #32]
  40c42e:	7b93      	ldrb	r3, [r2, #14]
  40c430:	9302      	str	r3, [sp, #8]
  40c432:	7813      	ldrb	r3, [r2, #0]
  40c434:	9301      	str	r3, [sp, #4]
  40c436:	2302      	movs	r3, #2
  40c438:	9300      	str	r3, [sp, #0]
  40c43a:	4623      	mov	r3, r4
  40c43c:	4642      	mov	r2, r8
  40c43e:	a927      	add	r1, sp, #156	; 0x9c
  40c440:	9822      	ldr	r0, [sp, #136]	; 0x88
  40c442:	4f0d      	ldr	r7, [pc, #52]	; (40c478 <lv_draw_map+0x2e0>)
  40c444:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
  40c446:	f8bd 30a2 	ldrh.w	r3, [sp, #162]	; 0xa2
  40c44a:	3301      	adds	r3, #1
  40c44c:	b21b      	sxth	r3, r3
  40c44e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                    blend_area.y2 = blend_area.y1;
  40c452:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                    px_i = 0;
  40c456:	f04f 0c00 	mov.w	ip, #0
  40c45a:	e7d8      	b.n	40c40e <lv_draw_map+0x276>
  40c45c:	00408f81 	.word	0x00408f81
  40c460:	00414199 	.word	0x00414199
  40c464:	0040f1c9 	.word	0x0040f1c9
  40c468:	004140ad 	.word	0x004140ad
  40c46c:	0041493b 	.word	0x0041493b
  40c470:	00415cd9 	.word	0x00415cd9
  40c474:	00415ead 	.word	0x00415ead
  40c478:	0040b5d9 	.word	0x0040b5d9
            if(blend_area.y1 != blend_area.y2) {
  40c47c:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
  40c480:	f9bd 209e 	ldrsh.w	r2, [sp, #158]	; 0x9e
  40c484:	429a      	cmp	r2, r3
  40c486:	d00f      	beq.n	40c4a8 <lv_draw_map+0x310>
                blend_area.y2--;
  40c488:	3b01      	subs	r3, #1
  40c48a:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40c48e:	9a08      	ldr	r2, [sp, #32]
  40c490:	7b93      	ldrb	r3, [r2, #14]
  40c492:	9302      	str	r3, [sp, #8]
  40c494:	7813      	ldrb	r3, [r2, #0]
  40c496:	9301      	str	r3, [sp, #4]
  40c498:	2302      	movs	r3, #2
  40c49a:	9300      	str	r3, [sp, #0]
  40c49c:	4623      	mov	r3, r4
  40c49e:	4642      	mov	r2, r8
  40c4a0:	a927      	add	r1, sp, #156	; 0x9c
  40c4a2:	9822      	ldr	r0, [sp, #136]	; 0x88
  40c4a4:	4db1      	ldr	r5, [pc, #708]	; (40c76c <lv_draw_map+0x5d4>)
  40c4a6:	47a8      	blx	r5
            _lv_mem_buf_release(mask_buf);
  40c4a8:	4620      	mov	r0, r4
  40c4aa:	4cb1      	ldr	r4, [pc, #708]	; (40c770 <lv_draw_map+0x5d8>)
  40c4ac:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40c4ae:	4640      	mov	r0, r8
  40c4b0:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40c4b2:	e260      	b.n	40c976 <lv_draw_map+0x7de>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c4b4:	f04f 0901 	mov.w	r9, #1
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c4b8:	a83c      	add	r0, sp, #240	; 0xf0
  40c4ba:	4bae      	ldr	r3, [pc, #696]	; (40c774 <lv_draw_map+0x5dc>)
  40c4bc:	4798      	blx	r3
  40c4be:	901b      	str	r0, [sp, #108]	; 0x6c
  40c4c0:	e70c      	b.n	40c2dc <lv_draw_map+0x144>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40c4c2:	2205      	movs	r2, #5
                trans_dsc.cfg.angle = draw_dsc->angle;
  40c4c4:	9808      	ldr	r0, [sp, #32]
  40c4c6:	8843      	ldrh	r3, [r0, #2]
  40c4c8:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
                trans_dsc.cfg.zoom = draw_dsc->zoom;
  40c4cc:	8903      	ldrh	r3, [r0, #8]
  40c4ce:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
                trans_dsc.cfg.src = map_p;
  40c4d2:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
                trans_dsc.cfg.src_w = map_w;
  40c4d6:	f8ad 60a8 	strh.w	r6, [sp, #168]	; 0xa8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c4da:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c4dc:	88cb      	ldrh	r3, [r1, #6]
  40c4de:	3301      	adds	r3, #1
  40c4e0:	8849      	ldrh	r1, [r1, #2]
  40c4e2:	1a5b      	subs	r3, r3, r1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
  40c4e4:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.cf = cf;
  40c4e8:	f88d 20b6 	strb.w	r2, [sp, #182]	; 0xb6
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
  40c4ec:	8883      	ldrh	r3, [r0, #4]
  40c4ee:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
  40c4f2:	88c3      	ldrh	r3, [r0, #6]
  40c4f4:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
                trans_dsc.cfg.color = draw_dsc->recolor;
  40c4f8:	8983      	ldrh	r3, [r0, #12]
  40c4fa:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
                trans_dsc.cfg.antialias = draw_dsc->antialias;
  40c4fe:	7bc3      	ldrb	r3, [r0, #15]
  40c500:	f3c3 0300 	ubfx	r3, r3, #0, #1
  40c504:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
                _lv_img_buf_transform_init(&trans_dsc);
  40c508:	a829      	add	r0, sp, #164	; 0xa4
  40c50a:	4b9b      	ldr	r3, [pc, #620]	; (40c778 <lv_draw_map+0x5e0>)
  40c50c:	4798      	blx	r3
  40c50e:	e6f5      	b.n	40c2fc <lv_draw_map+0x164>
            uint16_t recolor_premult[3] = {0};
  40c510:	2300      	movs	r3, #0
  40c512:	9312      	str	r3, [sp, #72]	; 0x48
  40c514:	9313      	str	r3, [sp, #76]	; 0x4c
  40c516:	9314      	str	r3, [sp, #80]	; 0x50
  40c518:	e70c      	b.n	40c334 <lv_draw_map+0x19c>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c51a:	2302      	movs	r3, #2
  40c51c:	931c      	str	r3, [sp, #112]	; 0x70
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;

            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
  40c51e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40c520:	b9e3      	cbnz	r3, 40c55c <lv_draw_map+0x3c4>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
  40c522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40c524:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  40c528:	f9bd 20f2 	ldrsh.w	r2, [sp, #242]	; 0xf2
  40c52c:	4413      	add	r3, r2
  40c52e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40c530:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  40c534:	1a9b      	subs	r3, r3, r2
  40c536:	931f      	str	r3, [sp, #124]	; 0x7c
#endif
            for(y = 0; y < draw_area_h; y++) {
  40c538:	971e      	str	r7, [sp, #120]	; 0x78
  40c53a:	2f00      	cmp	r7, #0
  40c53c:	f340 8200 	ble.w	40c940 <lv_draw_map+0x7a8>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
  40c540:	9b04      	ldr	r3, [sp, #16]
  40c542:	fb03 f306 	mul.w	r3, r3, r6
  40c546:	931d      	str	r3, [sp, #116]	; 0x74
  40c548:	2300      	movs	r3, #0
  40c54a:	930e      	str	r3, [sp, #56]	; 0x38
  40c54c:	930f      	str	r3, [sp, #60]	; 0x3c
        }
    }
    else {
        pxi = 0; /*unused*/
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
  40c54e:	f8cd 9010 	str.w	r9, [sp, #16]
  40c552:	46d1      	mov	r9, sl
  40c554:	e172      	b.n	40c83c <lv_draw_map+0x6a4>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c556:	2302      	movs	r3, #2
  40c558:	931c      	str	r3, [sp, #112]	; 0x70
  40c55a:	e7e0      	b.n	40c51e <lv_draw_map+0x386>
                _lv_memset_ff(mask_buf, mask_buf_size);
  40c55c:	991b      	ldr	r1, [sp, #108]	; 0x6c
  40c55e:	9816      	ldr	r0, [sp, #88]	; 0x58
  40c560:	4b86      	ldr	r3, [pc, #536]	; (40c77c <lv_draw_map+0x5e4>)
  40c562:	4798      	blx	r3
  40c564:	e7dd      	b.n	40c522 <lv_draw_map+0x38a>
    int32_t xt = x - dsc->cfg.pivot_x;
  40c566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c568:	18f3      	adds	r3, r6, r3
  40c56a:	b21b      	sxth	r3, r3
  40c56c:	f9bd 40ac 	ldrsh.w	r4, [sp, #172]	; 0xac
  40c570:	1b1b      	subs	r3, r3, r4
    int32_t yt = y - dsc->cfg.pivot_y;
  40c572:	f9bd 20ae 	ldrsh.w	r2, [sp, #174]	; 0xae
  40c576:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c578:	1a8a      	subs	r2, r1, r2
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
  40c57a:	f8bd 10b2 	ldrh.w	r1, [sp, #178]	; 0xb2
  40c57e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  40c582:	d070      	beq.n	40c666 <lv_draw_map+0x4ce>
    else if(dsc->cfg.angle == 0) {
  40c584:	f9bd 10b0 	ldrsh.w	r1, [sp, #176]	; 0xb0
  40c588:	2900      	cmp	r1, #0
  40c58a:	d17f      	bne.n	40c68c <lv_draw_map+0x4f4>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c58c:	9937      	ldr	r1, [sp, #220]	; 0xdc
  40c58e:	fb01 f303 	mul.w	r3, r1, r3
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c592:	fb01 f202 	mul.w	r2, r1, r2
        xs = xt + dsc->tmp.pivot_x_256;
  40c596:	9c32      	ldr	r4, [sp, #200]	; 0xc8
  40c598:	eb04 1363 	add.w	r3, r4, r3, asr #5
  40c59c:	9306      	str	r3, [sp, #24]
        ys = yt + dsc->tmp.pivot_y_256;
  40c59e:	9d33      	ldr	r5, [sp, #204]	; 0xcc
  40c5a0:	eb05 1362 	add.w	r3, r5, r2, asr #5
  40c5a4:	9309      	str	r3, [sp, #36]	; 0x24
    if(xs_int >= dsc->cfg.src_w) return false;
  40c5a6:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	; 0xa8
    else if(xs_int < 0) return false;
  40c5aa:	9a06      	ldr	r2, [sp, #24]
  40c5ac:	1215      	asrs	r5, r2, #8
  40c5ae:	f100 80ae 	bmi.w	40c70e <lv_draw_map+0x576>
  40c5b2:	429d      	cmp	r5, r3
  40c5b4:	f280 80ab 	bge.w	40c70e <lv_draw_map+0x576>
    int32_t ys_int = ys >> 8;
  40c5b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c5ba:	1212      	asrs	r2, r2, #8
  40c5bc:	4610      	mov	r0, r2
  40c5be:	920d      	str	r2, [sp, #52]	; 0x34
    if(ys_int >= dsc->cfg.src_h) return false;
  40c5c0:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
    else if(ys_int < 0) return false;
  40c5c4:	4290      	cmp	r0, r2
  40c5c6:	f280 80a2 	bge.w	40c70e <lv_draw_map+0x576>
  40c5ca:	2800      	cmp	r0, #0
  40c5cc:	f2c0 809f 	blt.w	40c70e <lv_draw_map+0x576>
    if(dsc->tmp.native_color) {
  40c5d0:	f89d 20d8 	ldrb.w	r2, [sp, #216]	; 0xd8
  40c5d4:	f012 0f04 	tst.w	r2, #4
  40c5d8:	f000 8083 	beq.w	40c6e2 <lv_draw_map+0x54a>
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
  40c5dc:	9929      	ldr	r1, [sp, #164]	; 0xa4
        if(dsc->tmp.has_alpha == 0) {
  40c5de:	f012 0f02 	tst.w	r2, #2
  40c5e2:	d16d      	bne.n	40c6c0 <lv_draw_map+0x528>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40c5e4:	fb03 5300 	mla	r3, r3, r0, r5
  40c5e8:	005a      	lsls	r2, r3, #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
  40c5ea:	1888      	adds	r0, r1, r2
        *d8 = *s8;
  40c5ec:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
  40c5f0:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
  40c5f4:	7843      	ldrb	r3, [r0, #1]
  40c5f6:	f88d 30b9 	strb.w	r3, [sp, #185]	; 0xb9
            px_size = LV_COLOR_SIZE >> 3;
  40c5fa:	2302      	movs	r3, #2
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
  40c5fc:	f89d 10d8 	ldrb.w	r1, [sp, #216]	; 0xd8
  40c600:	f011 0f01 	tst.w	r1, #1
  40c604:	d00f      	beq.n	40c626 <lv_draw_map+0x48e>
        lv_color_t ct = LV_COLOR_TRANSP;
  40c606:	9920      	ldr	r1, [sp, #128]	; 0x80
  40c608:	f041 0107 	orr.w	r1, r1, #7
  40c60c:	f36f 01c7 	bfc	r1, #3, #5
  40c610:	f36f 210c 	bfc	r1, #8, #5
  40c614:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
  40c618:	f8ad 1080 	strh.w	r1, [sp, #128]	; 0x80
        if(dsc->res.color.full == ct.full) return false;
  40c61c:	f8bd 00b8 	ldrh.w	r0, [sp, #184]	; 0xb8
  40c620:	b289      	uxth	r1, r1
  40c622:	4288      	cmp	r0, r1
  40c624:	d073      	beq.n	40c70e <lv_draw_map+0x576>
    }

    if(dsc->cfg.antialias == false) return true;
  40c626:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
  40c62a:	b1a9      	cbz	r1, 40c658 <lv_draw_map+0x4c0>

    dsc->tmp.xs = xs;
  40c62c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
  40c630:	f8ad 10e0 	strh.w	r1, [sp, #224]	; 0xe0
    dsc->tmp.ys = ys;
  40c634:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
  40c638:	f8ad 10e2 	strh.w	r1, [sp, #226]	; 0xe2
    dsc->tmp.xs_int = xs_int;
  40c63c:	f8ad 50e4 	strh.w	r5, [sp, #228]	; 0xe4
    dsc->tmp.ys_int = ys_int;
  40c640:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
  40c644:	f8ad 10e6 	strh.w	r1, [sp, #230]	; 0xe6
    dsc->tmp.pxi = pxi;
  40c648:	923a      	str	r2, [sp, #232]	; 0xe8
    dsc->tmp.px_size = px_size;
  40c64a:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
  40c64e:	a829      	add	r0, sp, #164	; 0xa4
  40c650:	4b4b      	ldr	r3, [pc, #300]	; (40c780 <lv_draw_map+0x5e8>)
  40c652:	4798      	blx	r3
                        if(ret == false) {
  40c654:	2800      	cmp	r0, #0
  40c656:	d05a      	beq.n	40c70e <lv_draw_map+0x576>
                            mask_buf[px_i] = trans_dsc.res.opa;
  40c658:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
  40c65c:	f888 3000 	strb.w	r3, [r8]
                            c.full = trans_dsc.res.color.full;
  40c660:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
  40c664:	e065      	b.n	40c732 <lv_draw_map+0x59a>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
  40c666:	9935      	ldr	r1, [sp, #212]	; 0xd4
  40c668:	9d34      	ldr	r5, [sp, #208]	; 0xd0
  40c66a:	fb01 f403 	mul.w	r4, r1, r3
  40c66e:	fb05 4012 	mls	r0, r5, r2, r4
  40c672:	9c32      	ldr	r4, [sp, #200]	; 0xc8
  40c674:	eb04 00a0 	add.w	r0, r4, r0, asr #2
  40c678:	9006      	str	r0, [sp, #24]
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
  40c67a:	fb01 f202 	mul.w	r2, r1, r2
  40c67e:	fb05 2503 	mla	r5, r5, r3, r2
  40c682:	9b33      	ldr	r3, [sp, #204]	; 0xcc
  40c684:	eb03 03a5 	add.w	r3, r3, r5, asr #2
  40c688:	9309      	str	r3, [sp, #36]	; 0x24
  40c68a:	e78c      	b.n	40c5a6 <lv_draw_map+0x40e>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c68c:	9937      	ldr	r1, [sp, #220]	; 0xdc
  40c68e:	fb01 f303 	mul.w	r3, r1, r3
  40c692:	115b      	asrs	r3, r3, #5
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c694:	fb01 f202 	mul.w	r2, r1, r2
  40c698:	1152      	asrs	r2, r2, #5
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
  40c69a:	9935      	ldr	r1, [sp, #212]	; 0xd4
  40c69c:	9d34      	ldr	r5, [sp, #208]	; 0xd0
  40c69e:	fb01 f403 	mul.w	r4, r1, r3
  40c6a2:	fb05 4012 	mls	r0, r5, r2, r4
  40c6a6:	9c32      	ldr	r4, [sp, #200]	; 0xc8
  40c6a8:	eb04 20a0 	add.w	r0, r4, r0, asr #10
  40c6ac:	9006      	str	r0, [sp, #24]
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
  40c6ae:	fb01 f202 	mul.w	r2, r1, r2
  40c6b2:	fb05 2303 	mla	r3, r5, r3, r2
  40c6b6:	9d33      	ldr	r5, [sp, #204]	; 0xcc
  40c6b8:	eb05 23a3 	add.w	r3, r5, r3, asr #10
  40c6bc:	9309      	str	r3, [sp, #36]	; 0x24
  40c6be:	e772      	b.n	40c5a6 <lv_draw_map+0x40e>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40c6c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40c6c2:	fb03 5302 	mla	r3, r3, r2, r5
  40c6c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
  40c6ca:	188b      	adds	r3, r1, r2
  40c6cc:	5c89      	ldrb	r1, [r1, r2]
  40c6ce:	f88d 10b8 	strb.w	r1, [sp, #184]	; 0xb8
  40c6d2:	7859      	ldrb	r1, [r3, #1]
  40c6d4:	f88d 10b9 	strb.w	r1, [sp, #185]	; 0xb9
            dsc->res.opa = src_u8[pxi + px_size - 1];
  40c6d8:	789b      	ldrb	r3, [r3, #2]
  40c6da:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
  40c6de:	2303      	movs	r3, #3
  40c6e0:	e78c      	b.n	40c5fc <lv_draw_map+0x464>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
  40c6e2:	b229      	sxth	r1, r5
  40c6e4:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
  40c6e8:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
  40c6ec:	9224      	str	r2, [sp, #144]	; 0x90
  40c6ee:	9123      	str	r1, [sp, #140]	; 0x8c
  40c6f0:	a82f      	add	r0, sp, #188	; 0xbc
  40c6f2:	4c24      	ldr	r4, [pc, #144]	; (40c784 <lv_draw_map+0x5ec>)
  40c6f4:	47a0      	blx	r4
  40c6f6:	f8ad 00b8 	strh.w	r0, [sp, #184]	; 0xb8
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
  40c6fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40c6fc:	9923      	ldr	r1, [sp, #140]	; 0x8c
  40c6fe:	a82f      	add	r0, sp, #188	; 0xbc
  40c700:	4b21      	ldr	r3, [pc, #132]	; (40c788 <lv_draw_map+0x5f0>)
  40c702:	4798      	blx	r3
  40c704:	f88d 00ba 	strb.w	r0, [sp, #186]	; 0xba
        pxi = 0; /*unused*/
  40c708:	2200      	movs	r2, #0
        px_size = 0;    /*unused*/
  40c70a:	4613      	mov	r3, r2
  40c70c:	e776      	b.n	40c5fc <lv_draw_map+0x464>
                            mask_buf[px_i] = LV_OPA_TRANSP;
  40c70e:	2300      	movs	r3, #0
  40c710:	f888 3000 	strb.w	r3, [r8]
                            continue;
  40c714:	e013      	b.n	40c73e <lv_draw_map+0x5a6>
                            mask_buf[px_i] = 0xFF;
  40c716:	23ff      	movs	r3, #255	; 0xff
  40c718:	f888 3000 	strb.w	r3, [r8]
                        c.full =  map_px[0] + (map_px[1] << 8);
  40c71c:	787a      	ldrb	r2, [r7, #1]
  40c71e:	783b      	ldrb	r3, [r7, #0]
  40c720:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40c724:	b29b      	uxth	r3, r3
                        if(chroma_key) {
  40c726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c728:	b11a      	cbz	r2, 40c732 <lv_draw_map+0x59a>
                            if(c.full == chroma_keyed_color.full) {
  40c72a:	f8bf 2060 	ldrh.w	r2, [pc, #96]	; 40c78c <lv_draw_map+0x5f4>
  40c72e:	429a      	cmp	r2, r3
  40c730:	d018      	beq.n	40c764 <lv_draw_map+0x5cc>
                    if(draw_dsc->recolor_opa != 0) {
  40c732:	9a08      	ldr	r2, [sp, #32]
  40c734:	7a92      	ldrb	r2, [r2, #10]
  40c736:	bb5a      	cbnz	r2, 40c790 <lv_draw_map+0x5f8>
                    map2[px_i].full = c.full;
  40c738:	9a07      	ldr	r2, [sp, #28]
  40c73a:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40c73e:	3601      	adds	r6, #1
  40c740:	445f      	add	r7, fp
  40c742:	f108 0801 	add.w	r8, r8, #1
  40c746:	4556      	cmp	r6, sl
  40c748:	d056      	beq.n	40c7f8 <lv_draw_map+0x660>
                    if(transform) {
  40c74a:	9b04      	ldr	r3, [sp, #16]
  40c74c:	2b00      	cmp	r3, #0
  40c74e:	f47f af0a 	bne.w	40c566 <lv_draw_map+0x3ce>
                        if(alpha_byte) {
  40c752:	9b05      	ldr	r3, [sp, #20]
  40c754:	2b00      	cmp	r3, #0
  40c756:	d0de      	beq.n	40c716 <lv_draw_map+0x57e>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40c758:	78bb      	ldrb	r3, [r7, #2]
                            mask_buf[px_i] = px_opa;
  40c75a:	f888 3000 	strb.w	r3, [r8]
                            if(px_opa == 0) {
  40c75e:	2b00      	cmp	r3, #0
  40c760:	d0ed      	beq.n	40c73e <lv_draw_map+0x5a6>
  40c762:	e7db      	b.n	40c71c <lv_draw_map+0x584>
                                mask_buf[px_i] = LV_OPA_TRANSP;
  40c764:	2300      	movs	r3, #0
  40c766:	f888 3000 	strb.w	r3, [r8]
                                continue;
  40c76a:	e7e8      	b.n	40c73e <lv_draw_map+0x5a6>
  40c76c:	0040b5d9 	.word	0x0040b5d9
  40c770:	0041595d 	.word	0x0041595d
  40c774:	0041493b 	.word	0x0041493b
  40c778:	00411c01 	.word	0x00411c01
  40c77c:	00415f51 	.word	0x00415f51
  40c780:	00411efd 	.word	0x00411efd
  40c784:	004119e9 	.word	0x004119e9
  40c788:	00411afd 	.word	0x00411afd
  40c78c:	0000e007 	.word	0x0000e007
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c790:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  40c794:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40c796:	9814      	ldr	r0, [sp, #80]	; 0x50
  40c798:	fb04 0101 	mla	r1, r4, r1, r0
  40c79c:	3180      	adds	r1, #128	; 0x80
  40c79e:	eb01 2201 	add.w	r2, r1, r1, lsl #8
  40c7a2:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
  40c7a6:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c7aa:	f003 0007 	and.w	r0, r3, #7
  40c7ae:	0b5a      	lsrs	r2, r3, #13
  40c7b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  40c7b4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  40c7b6:	fb04 5202 	mla	r2, r4, r2, r5
  40c7ba:	3280      	adds	r2, #128	; 0x80
  40c7bc:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40c7c0:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c7c4:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40c7c8:	4620      	mov	r0, r4
  40c7ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40c7cc:	fb00 4303 	mla	r3, r0, r3, r4
  40c7d0:	3380      	adds	r3, #128	; 0x80
  40c7d2:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  40c7d6:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  40c7da:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c7de:	0e90      	lsrs	r0, r2, #26
  40c7e0:	f360 0902 	bfi	r9, r0, #0, #3
  40c7e4:	f361 09c7 	bfi	r9, r1, #3, #5
  40c7e8:	f363 290c 	bfi	r9, r3, #8, #5
  40c7ec:	0dd2      	lsrs	r2, r2, #23
  40c7ee:	f362 394f 	bfi	r9, r2, #13, #3
  40c7f2:	fa1f f389 	uxth.w	r3, r9
  40c7f6:	e79f      	b.n	40c738 <lv_draw_map+0x5a0>
  40c7f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c7fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c7fc:	189c      	adds	r4, r3, r2
                if(other_mask_cnt) {
  40c7fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40c800:	2b00      	cmp	r3, #0
  40c802:	d13e      	bne.n	40c882 <lv_draw_map+0x6ea>
                map_buf_tmp += map_w * px_size_byte;
  40c804:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40c806:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40c808:	4413      	add	r3, r2
  40c80a:	9310      	str	r3, [sp, #64]	; 0x40
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c80c:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
  40c810:	3301      	adds	r3, #1
  40c812:	f8bd 20f0 	ldrh.w	r2, [sp, #240]	; 0xf0
  40c816:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40c818:	fa04 f383 	sxtah	r3, r4, r3
  40c81c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40c81e:	429a      	cmp	r2, r3
  40c820:	d95c      	bls.n	40c8dc <lv_draw_map+0x744>
                    blend_area.y2 ++;
  40c822:	f8bd 30a2 	ldrh.w	r3, [sp, #162]	; 0xa2
  40c826:	3301      	adds	r3, #1
  40c828:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
  40c82c:	940f      	str	r4, [sp, #60]	; 0x3c
            for(y = 0; y < draw_area_h; y++) {
  40c82e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c830:	3301      	adds	r3, #1
  40c832:	930e      	str	r3, [sp, #56]	; 0x38
  40c834:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40c836:	4293      	cmp	r3, r2
  40c838:	f000 8082 	beq.w	40c940 <lv_draw_map+0x7a8>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
  40c83c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40c83e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
  40c842:	f9bd 20f0 	ldrsh.w	r2, [sp, #240]	; 0xf0
  40c846:	4413      	add	r3, r2
  40c848:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40c84a:	f9b2 2000 	ldrsh.w	r2, [r2]
  40c84e:	1a9b      	subs	r3, r3, r2
  40c850:	930b      	str	r3, [sp, #44]	; 0x2c
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40c852:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c854:	469a      	mov	sl, r3
  40c856:	2b00      	cmp	r3, #0
  40c858:	dd11      	ble.n	40c87e <lv_draw_map+0x6e6>
  40c85a:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40c85c:	4619      	mov	r1, r3
  40c85e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c860:	eb01 0802 	add.w	r8, r1, r2
  40c864:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c866:	4619      	mov	r1, r3
  40c868:	eb01 0342 	add.w	r3, r1, r2, lsl #1
  40c86c:	9307      	str	r3, [sp, #28]
  40c86e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  40c870:	2600      	movs	r6, #0
    int32_t yt = y - dsc->cfg.pivot_y;
  40c872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c874:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40c876:	4413      	add	r3, r2
  40c878:	b21b      	sxth	r3, r3
  40c87a:	930c      	str	r3, [sp, #48]	; 0x30
  40c87c:	e765      	b.n	40c74a <lv_draw_map+0x5b2>
  40c87e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40c880:	e7bd      	b.n	40c7fe <lv_draw_map+0x666>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
  40c882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c884:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c886:	4413      	add	r3, r2
  40c888:	461e      	mov	r6, r3
  40c88a:	f8bd 10f0 	ldrh.w	r1, [sp, #240]	; 0xf0
  40c88e:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
  40c892:	3301      	adds	r3, #1
  40c894:	1a5b      	subs	r3, r3, r1
  40c896:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
  40c89a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40c89c:	8a68      	ldrh	r0, [r5, #18]
  40c89e:	4402      	add	r2, r0
  40c8a0:	980e      	ldr	r0, [sp, #56]	; 0x38
  40c8a2:	4402      	add	r2, r0
  40c8a4:	8a28      	ldrh	r0, [r5, #16]
  40c8a6:	4401      	add	r1, r0
  40c8a8:	b21b      	sxth	r3, r3
  40c8aa:	b212      	sxth	r2, r2
  40c8ac:	b209      	sxth	r1, r1
  40c8ae:	4630      	mov	r0, r6
  40c8b0:	4d43      	ldr	r5, [pc, #268]	; (40c9c0 <lv_draw_map+0x828>)
  40c8b2:	47a8      	blx	r5
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
  40c8b4:	b128      	cbz	r0, 40c8c2 <lv_draw_map+0x72a>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40c8b6:	2802      	cmp	r0, #2
  40c8b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  40c8ba:	bf08      	it	eq
  40c8bc:	4602      	moveq	r2, r0
  40c8be:	921c      	str	r2, [sp, #112]	; 0x70
  40c8c0:	e7a0      	b.n	40c804 <lv_draw_map+0x66c>
  40c8c2:	f8bd 10f4 	ldrh.w	r1, [sp, #244]	; 0xf4
  40c8c6:	3101      	adds	r1, #1
  40c8c8:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	; 0xf0
  40c8cc:	1ac9      	subs	r1, r1, r3
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
  40c8ce:	b209      	sxth	r1, r1
  40c8d0:	4630      	mov	r0, r6
  40c8d2:	4b3c      	ldr	r3, [pc, #240]	; (40c9c4 <lv_draw_map+0x82c>)
  40c8d4:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40c8d6:	2302      	movs	r3, #2
  40c8d8:	931c      	str	r3, [sp, #112]	; 0x70
  40c8da:	e793      	b.n	40c804 <lv_draw_map+0x66c>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40c8dc:	9d08      	ldr	r5, [sp, #32]
  40c8de:	7bab      	ldrb	r3, [r5, #14]
  40c8e0:	9302      	str	r3, [sp, #8]
  40c8e2:	782b      	ldrb	r3, [r5, #0]
  40c8e4:	9301      	str	r3, [sp, #4]
  40c8e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40c8e8:	9300      	str	r3, [sp, #0]
  40c8ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40c8ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40c8ee:	a927      	add	r1, sp, #156	; 0x9c
  40c8f0:	9822      	ldr	r0, [sp, #136]	; 0x88
  40c8f2:	4c35      	ldr	r4, [pc, #212]	; (40c9c8 <lv_draw_map+0x830>)
  40c8f4:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
  40c8f6:	f8bd 30a2 	ldrh.w	r3, [sp, #162]	; 0xa2
  40c8fa:	3301      	adds	r3, #1
  40c8fc:	b21b      	sxth	r3, r3
  40c8fe:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                    blend_area.y2 = blend_area.y1;
  40c902:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c906:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40c908:	b94b      	cbnz	r3, 40c91e <lv_draw_map+0x786>
  40c90a:	886b      	ldrh	r3, [r5, #2]
  40c90c:	b973      	cbnz	r3, 40c92c <lv_draw_map+0x794>
  40c90e:	892b      	ldrh	r3, [r5, #8]
  40c910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c914:	bf14      	ite	ne
  40c916:	2302      	movne	r3, #2
  40c918:	2301      	moveq	r3, #1
  40c91a:	931c      	str	r3, [sp, #112]	; 0x70
  40c91c:	e001      	b.n	40c922 <lv_draw_map+0x78a>
  40c91e:	2302      	movs	r3, #2
  40c920:	931c      	str	r3, [sp, #112]	; 0x70
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
  40c922:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40c924:	b92b      	cbnz	r3, 40c932 <lv_draw_map+0x79a>
                    px_i = 0;
  40c926:	2300      	movs	r3, #0
  40c928:	930f      	str	r3, [sp, #60]	; 0x3c
  40c92a:	e780      	b.n	40c82e <lv_draw_map+0x696>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c92c:	2302      	movs	r3, #2
  40c92e:	931c      	str	r3, [sp, #112]	; 0x70
  40c930:	e7f7      	b.n	40c922 <lv_draw_map+0x78a>
                        _lv_memset_ff(mask_buf, mask_buf_size);
  40c932:	991b      	ldr	r1, [sp, #108]	; 0x6c
  40c934:	9816      	ldr	r0, [sp, #88]	; 0x58
  40c936:	4b25      	ldr	r3, [pc, #148]	; (40c9cc <lv_draw_map+0x834>)
  40c938:	4798      	blx	r3
                    px_i = 0;
  40c93a:	2300      	movs	r3, #0
  40c93c:	930f      	str	r3, [sp, #60]	; 0x3c
  40c93e:	e776      	b.n	40c82e <lv_draw_map+0x696>
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
  40c940:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
  40c944:	f9bd 209e 	ldrsh.w	r2, [sp, #158]	; 0x9e
  40c948:	429a      	cmp	r2, r3
  40c94a:	d00f      	beq.n	40c96c <lv_draw_map+0x7d4>
                blend_area.y2--;
  40c94c:	3b01      	subs	r3, #1
  40c94e:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40c952:	9a08      	ldr	r2, [sp, #32]
  40c954:	7b93      	ldrb	r3, [r2, #14]
  40c956:	9302      	str	r3, [sp, #8]
  40c958:	7813      	ldrb	r3, [r2, #0]
  40c95a:	9301      	str	r3, [sp, #4]
  40c95c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40c95e:	9300      	str	r3, [sp, #0]
  40c960:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40c962:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40c964:	a927      	add	r1, sp, #156	; 0x9c
  40c966:	9822      	ldr	r0, [sp, #136]	; 0x88
  40c968:	4c17      	ldr	r4, [pc, #92]	; (40c9c8 <lv_draw_map+0x830>)
  40c96a:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
  40c96c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40c96e:	4c18      	ldr	r4, [pc, #96]	; (40c9d0 <lv_draw_map+0x838>)
  40c970:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40c972:	9819      	ldr	r0, [sp, #100]	; 0x64
  40c974:	47a0      	blx	r4
        }
    }
}
  40c976:	b03f      	add	sp, #252	; 0xfc
  40c978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40c97c:	4620      	mov	r0, r4
  40c97e:	4b15      	ldr	r3, [pc, #84]	; (40c9d4 <lv_draw_map+0x83c>)
  40c980:	4798      	blx	r3
  40c982:	4604      	mov	r4, r0
  40c984:	901b      	str	r0, [sp, #108]	; 0x6c
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c986:	a83c      	add	r0, sp, #240	; 0xf0
  40c988:	4b13      	ldr	r3, [pc, #76]	; (40c9d8 <lv_draw_map+0x840>)
  40c98a:	4798      	blx	r3
  40c98c:	42a0      	cmp	r0, r4
  40c98e:	f67f ad91 	bls.w	40c4b4 <lv_draw_map+0x31c>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40c992:	0060      	lsls	r0, r4, #1
  40c994:	4d11      	ldr	r5, [pc, #68]	; (40c9dc <lv_draw_map+0x844>)
  40c996:	47a8      	blx	r5
  40c998:	9019      	str	r0, [sp, #100]	; 0x64
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40c99a:	4620      	mov	r0, r4
  40c99c:	47a8      	blx	r5
  40c99e:	9016      	str	r0, [sp, #88]	; 0x58
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
  40c9a0:	214c      	movs	r1, #76	; 0x4c
  40c9a2:	a829      	add	r0, sp, #164	; 0xa4
  40c9a4:	4b07      	ldr	r3, [pc, #28]	; (40c9c4 <lv_draw_map+0x82c>)
  40c9a6:	4798      	blx	r3
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c9a8:	f04f 0901 	mov.w	r9, #1
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40c9ac:	9b05      	ldr	r3, [sp, #20]
  40c9ae:	2b00      	cmp	r3, #0
  40c9b0:	f47f ad87 	bne.w	40c4c2 <lv_draw_map+0x32a>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40c9b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c9b6:	2b00      	cmp	r3, #0
  40c9b8:	bf0c      	ite	eq
  40c9ba:	2204      	moveq	r2, #4
  40c9bc:	2206      	movne	r2, #6
  40c9be:	e581      	b.n	40c4c4 <lv_draw_map+0x32c>
  40c9c0:	0040f121 	.word	0x0040f121
  40c9c4:	00415ead 	.word	0x00415ead
  40c9c8:	0040b5d9 	.word	0x0040b5d9
  40c9cc:	00415f51 	.word	0x00415f51
  40c9d0:	0041595d 	.word	0x0041595d
  40c9d4:	004140ad 	.word	0x004140ad
  40c9d8:	0041493b 	.word	0x0041493b
  40c9dc:	00415cd9 	.word	0x00415cd9

0040c9e0 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
  40c9e0:	b570      	push	{r4, r5, r6, lr}
  40c9e2:	b0a0      	sub	sp, #128	; 0x80
  40c9e4:	4604      	mov	r4, r0
  40c9e6:	460d      	mov	r5, r1
  40c9e8:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
  40c9ea:	a80b      	add	r0, sp, #44	; 0x2c
  40c9ec:	4b0b      	ldr	r3, [pc, #44]	; (40ca1c <show_error+0x3c>)
  40c9ee:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
  40c9f0:	4b0b      	ldr	r3, [pc, #44]	; (40ca20 <show_error+0x40>)
  40c9f2:	881b      	ldrh	r3, [r3, #0]
  40c9f4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
  40c9f8:	aa0b      	add	r2, sp, #44	; 0x2c
  40c9fa:	4629      	mov	r1, r5
  40c9fc:	4620      	mov	r0, r4
  40c9fe:	4b09      	ldr	r3, [pc, #36]	; (40ca24 <show_error+0x44>)
  40ca00:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  40ca02:	a802      	add	r0, sp, #8
  40ca04:	4b08      	ldr	r3, [pc, #32]	; (40ca28 <show_error+0x48>)
  40ca06:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
  40ca08:	2300      	movs	r3, #0
  40ca0a:	9300      	str	r3, [sp, #0]
  40ca0c:	4633      	mov	r3, r6
  40ca0e:	aa02      	add	r2, sp, #8
  40ca10:	4629      	mov	r1, r5
  40ca12:	4620      	mov	r0, r4
  40ca14:	4c05      	ldr	r4, [pc, #20]	; (40ca2c <show_error+0x4c>)
  40ca16:	47a0      	blx	r4
}
  40ca18:	b020      	add	sp, #128	; 0x80
  40ca1a:	bd70      	pop	{r4, r5, r6, pc}
  40ca1c:	0040fa91 	.word	0x0040fa91
  40ca20:	00425a8c 	.word	0x00425a8c
  40ca24:	0040fadd 	.word	0x0040fadd
  40ca28:	0040cd3d 	.word	0x0040cd3d
  40ca2c:	0040cd85 	.word	0x0040cd85

0040ca30 <lv_draw_img_dsc_init>:
{
  40ca30:	b510      	push	{r4, lr}
  40ca32:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
  40ca34:	2110      	movs	r1, #16
  40ca36:	4b07      	ldr	r3, [pc, #28]	; (40ca54 <lv_draw_img_dsc_init+0x24>)
  40ca38:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
  40ca3a:	2300      	movs	r3, #0
  40ca3c:	81a3      	strh	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
  40ca3e:	23ff      	movs	r3, #255	; 0xff
  40ca40:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
  40ca42:	f44f 7380 	mov.w	r3, #256	; 0x100
  40ca46:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
  40ca48:	7be3      	ldrb	r3, [r4, #15]
  40ca4a:	f043 0301 	orr.w	r3, r3, #1
  40ca4e:	73e3      	strb	r3, [r4, #15]
  40ca50:	bd10      	pop	{r4, pc}
  40ca52:	bf00      	nop
  40ca54:	00415ead 	.word	0x00415ead

0040ca58 <lv_img_cf_get_px_size>:
    switch(cf) {
  40ca58:	3804      	subs	r0, #4
  40ca5a:	280a      	cmp	r0, #10
  40ca5c:	d813      	bhi.n	40ca86 <lv_img_cf_get_px_size+0x2e>
  40ca5e:	e8df f000 	tbb	[pc, r0]
  40ca62:	0806      	.short	0x0806
  40ca64:	0e0c0a06 	.word	0x0e0c0a06
  40ca68:	0e0c0a10 	.word	0x0e0c0a10
  40ca6c:	10          	.byte	0x10
  40ca6d:	00          	.byte	0x00
            px_size = LV_COLOR_SIZE;
  40ca6e:	2010      	movs	r0, #16
  40ca70:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
  40ca72:	2018      	movs	r0, #24
            break;
  40ca74:	4770      	bx	lr
            px_size = 1;
  40ca76:	2001      	movs	r0, #1
            break;
  40ca78:	4770      	bx	lr
            px_size = 2;
  40ca7a:	2002      	movs	r0, #2
            break;
  40ca7c:	4770      	bx	lr
            px_size = 4;
  40ca7e:	2004      	movs	r0, #4
            break;
  40ca80:	4770      	bx	lr
            px_size = 8;
  40ca82:	2008      	movs	r0, #8
            break;
  40ca84:	4770      	bx	lr
            px_size = 0;
  40ca86:	2000      	movs	r0, #0
}
  40ca88:	4770      	bx	lr

0040ca8a <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
  40ca8a:	2803      	cmp	r0, #3
  40ca8c:	d005      	beq.n	40ca9a <lv_img_cf_is_chroma_keyed+0x10>
  40ca8e:	d302      	bcc.n	40ca96 <lv_img_cf_is_chroma_keyed+0xc>
  40ca90:	3806      	subs	r0, #6
  40ca92:	2804      	cmp	r0, #4
  40ca94:	d901      	bls.n	40ca9a <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
  40ca96:	2000      	movs	r0, #0
  40ca98:	4770      	bx	lr
            is_chroma_keyed = true;
  40ca9a:	2001      	movs	r0, #1
}
  40ca9c:	4770      	bx	lr

0040ca9e <lv_img_cf_has_alpha>:
    switch(cf) {
  40ca9e:	3802      	subs	r0, #2
  40caa0:	280c      	cmp	r0, #12
  40caa2:	d808      	bhi.n	40cab6 <lv_img_cf_has_alpha+0x18>
  40caa4:	e8df f000 	tbb	[pc, r0]
  40caa8:	09070709 	.word	0x09070709
  40caac:	09090907 	.word	0x09090907
  40cab0:	09090909 	.word	0x09090909
  40cab4:	09          	.byte	0x09
  40cab5:	00          	.byte	0x00
            has_alpha = false;
  40cab6:	2000      	movs	r0, #0
  40cab8:	4770      	bx	lr
            has_alpha = true;
  40caba:	2001      	movs	r0, #1
}
  40cabc:	4770      	bx	lr
	...

0040cac0 <lv_draw_img>:
{
  40cac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cac4:	b091      	sub	sp, #68	; 0x44
  40cac6:	4605      	mov	r5, r0
  40cac8:	460e      	mov	r6, r1
    if(src == NULL) {
  40caca:	b13a      	cbz	r2, 40cadc <lv_draw_img+0x1c>
  40cacc:	461c      	mov	r4, r3
  40cace:	4610      	mov	r0, r2
    if(dsc->opa <= LV_OPA_MIN) return;
  40cad0:	781b      	ldrb	r3, [r3, #0]
  40cad2:	2b02      	cmp	r3, #2
  40cad4:	d806      	bhi.n	40cae4 <lv_draw_img+0x24>
}
  40cad6:	b011      	add	sp, #68	; 0x44
  40cad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        show_error(coords, mask, "No\ndata");
  40cadc:	4a71      	ldr	r2, [pc, #452]	; (40cca4 <lv_draw_img+0x1e4>)
  40cade:	4b72      	ldr	r3, [pc, #456]	; (40cca8 <lv_draw_img+0x1e8>)
  40cae0:	4798      	blx	r3
        return;
  40cae2:	e7f8      	b.n	40cad6 <lv_draw_img+0x16>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
  40cae4:	89a1      	ldrh	r1, [r4, #12]
  40cae6:	4b71      	ldr	r3, [pc, #452]	; (40ccac <lv_draw_img+0x1ec>)
  40cae8:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
  40caea:	4607      	mov	r7, r0
  40caec:	2800      	cmp	r0, #0
  40caee:	f000 80a3 	beq.w	40cc38 <lv_draw_img+0x178>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
  40caf2:	f890 900c 	ldrb.w	r9, [r0, #12]
  40caf6:	f009 091f 	and.w	r9, r9, #31
  40cafa:	4648      	mov	r0, r9
  40cafc:	4b6c      	ldr	r3, [pc, #432]	; (40ccb0 <lv_draw_img+0x1f0>)
  40cafe:	4798      	blx	r3
  40cb00:	4680      	mov	r8, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
  40cb02:	4648      	mov	r0, r9
  40cb04:	4b6b      	ldr	r3, [pc, #428]	; (40ccb4 <lv_draw_img+0x1f4>)
  40cb06:	4798      	blx	r3
  40cb08:	4681      	mov	r9, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
  40cb0a:	69ba      	ldr	r2, [r7, #24]
  40cb0c:	b122      	cbz	r2, 40cb18 <lv_draw_img+0x58>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
  40cb0e:	4631      	mov	r1, r6
  40cb10:	4628      	mov	r0, r5
  40cb12:	4b65      	ldr	r3, [pc, #404]	; (40cca8 <lv_draw_img+0x1e8>)
  40cb14:	4798      	blx	r3
  40cb16:	e7de      	b.n	40cad6 <lv_draw_img+0x16>
    else if(cdsc->dec_dsc.img_data) {
  40cb18:	693b      	ldr	r3, [r7, #16]
  40cb1a:	2b00      	cmp	r3, #0
  40cb1c:	d049      	beq.n	40cbb2 <lv_draw_img+0xf2>
  40cb1e:	1e6b      	subs	r3, r5, #1
  40cb20:	1de8      	adds	r0, r5, #7
  40cb22:	aa0c      	add	r2, sp, #48	; 0x30
  40cb24:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40cb28:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  40cb2c:	4298      	cmp	r0, r3
  40cb2e:	d1f9      	bne.n	40cb24 <lv_draw_img+0x64>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
  40cb30:	8863      	ldrh	r3, [r4, #2]
  40cb32:	b91b      	cbnz	r3, 40cb3c <lv_draw_img+0x7c>
  40cb34:	8922      	ldrh	r2, [r4, #8]
  40cb36:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  40cb3a:	d028      	beq.n	40cb8e <lv_draw_img+0xce>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40cb3c:	88ea      	ldrh	r2, [r5, #6]
  40cb3e:	3201      	adds	r2, #1
  40cb40:	8869      	ldrh	r1, [r5, #2]
  40cb42:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40cb44:	88a9      	ldrh	r1, [r5, #4]
  40cb46:	3101      	adds	r1, #1
  40cb48:	8828      	ldrh	r0, [r5, #0]
  40cb4a:	1a09      	subs	r1, r1, r0
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
  40cb4c:	1d20      	adds	r0, r4, #4
  40cb4e:	9001      	str	r0, [sp, #4]
  40cb50:	8920      	ldrh	r0, [r4, #8]
  40cb52:	9000      	str	r0, [sp, #0]
  40cb54:	b21b      	sxth	r3, r3
  40cb56:	b212      	sxth	r2, r2
  40cb58:	b209      	sxth	r1, r1
  40cb5a:	a80c      	add	r0, sp, #48	; 0x30
  40cb5c:	f8df a174 	ldr.w	sl, [pc, #372]	; 40ccd4 <lv_draw_img+0x214>
  40cb60:	47d0      	blx	sl
            map_area_rot.x1 += coords->x1;
  40cb62:	882a      	ldrh	r2, [r5, #0]
  40cb64:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
  40cb68:	4413      	add	r3, r2
  40cb6a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            map_area_rot.y1 += coords->y1;
  40cb6e:	886b      	ldrh	r3, [r5, #2]
  40cb70:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
  40cb74:	4419      	add	r1, r3
  40cb76:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
            map_area_rot.x2 += coords->x1;
  40cb7a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
  40cb7e:	440a      	add	r2, r1
  40cb80:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
            map_area_rot.y2 += coords->y1;
  40cb84:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
  40cb88:	4413      	add	r3, r2
  40cb8a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
  40cb8e:	aa0c      	add	r2, sp, #48	; 0x30
  40cb90:	4631      	mov	r1, r6
  40cb92:	a80e      	add	r0, sp, #56	; 0x38
  40cb94:	4b48      	ldr	r3, [pc, #288]	; (40ccb8 <lv_draw_img+0x1f8>)
  40cb96:	4798      	blx	r3
        if(union_ok == false) {
  40cb98:	2800      	cmp	r0, #0
  40cb9a:	d09c      	beq.n	40cad6 <lv_draw_img+0x16>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
  40cb9c:	693a      	ldr	r2, [r7, #16]
  40cb9e:	f8cd 9004 	str.w	r9, [sp, #4]
  40cba2:	f8cd 8000 	str.w	r8, [sp]
  40cba6:	4623      	mov	r3, r4
  40cba8:	a90e      	add	r1, sp, #56	; 0x38
  40cbaa:	4628      	mov	r0, r5
  40cbac:	4c43      	ldr	r4, [pc, #268]	; (40ccbc <lv_draw_img+0x1fc>)
  40cbae:	47a0      	blx	r4
  40cbb0:	e791      	b.n	40cad6 <lv_draw_img+0x16>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
  40cbb2:	462a      	mov	r2, r5
  40cbb4:	4631      	mov	r1, r6
  40cbb6:	a80a      	add	r0, sp, #40	; 0x28
  40cbb8:	4b3f      	ldr	r3, [pc, #252]	; (40ccb8 <lv_draw_img+0x1f8>)
  40cbba:	4798      	blx	r3
        if(union_ok == false) {
  40cbbc:	2800      	cmp	r0, #0
  40cbbe:	d08a      	beq.n	40cad6 <lv_draw_img+0x16>
  40cbc0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
  40cbc4:	3301      	adds	r3, #1
  40cbc6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  40cbca:	1a9b      	subs	r3, r3, r2
  40cbcc:	b21b      	sxth	r3, r3
  40cbce:	9303      	str	r3, [sp, #12]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
  40cbd0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  40cbd4:	4b3a      	ldr	r3, [pc, #232]	; (40ccc0 <lv_draw_img+0x200>)
  40cbd6:	4798      	blx	r3
  40cbd8:	9008      	str	r0, [sp, #32]
  40cbda:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    uint8_t * d8 = (uint8_t *)dst;
  40cbde:	ab0c      	add	r3, sp, #48	; 0x30
    while(len) {
  40cbe0:	a80e      	add	r0, sp, #56	; 0x38
        *d8 = *s8;
  40cbe2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40cbe6:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  40cbea:	4283      	cmp	r3, r0
  40cbec:	d1f9      	bne.n	40cbe2 <lv_draw_img+0x122>
        lv_area_set_height(&line, 1);
  40cbee:	2101      	movs	r1, #1
  40cbf0:	a80c      	add	r0, sp, #48	; 0x30
  40cbf2:	4b34      	ldr	r3, [pc, #208]	; (40ccc4 <lv_draw_img+0x204>)
  40cbf4:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
  40cbf6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
  40cbfa:	f9b5 2000 	ldrsh.w	r2, [r5]
        int32_t y = mask_com.y1 - coords->y1;
  40cbfe:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
  40cc02:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
  40cc06:	ebaa 0101 	sub.w	r1, sl, r1
  40cc0a:	4608      	mov	r0, r1
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40cc0c:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
  40cc10:	458a      	cmp	sl, r1
  40cc12:	dc43      	bgt.n	40cc9c <lv_draw_img+0x1dc>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
  40cc14:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 40ccb8 <lv_draw_img+0x1f8>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
  40cc18:	1a9b      	subs	r3, r3, r2
  40cc1a:	b21b      	sxth	r3, r3
  40cc1c:	9305      	str	r3, [sp, #20]
  40cc1e:	9706      	str	r7, [sp, #24]
  40cc20:	9f08      	ldr	r7, [sp, #32]
  40cc22:	9509      	str	r5, [sp, #36]	; 0x24
  40cc24:	9407      	str	r4, [sp, #28]
  40cc26:	4604      	mov	r4, r0
  40cc28:	e012      	b.n	40cc50 <lv_draw_img+0x190>
  40cc2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
                lv_img_decoder_close(&cdsc->dec_dsc);
  40cc2c:	9804      	ldr	r0, [sp, #16]
  40cc2e:	4b26      	ldr	r3, [pc, #152]	; (40ccc8 <lv_draw_img+0x208>)
  40cc30:	4798      	blx	r3
                _lv_mem_buf_release(buf);
  40cc32:	9808      	ldr	r0, [sp, #32]
  40cc34:	4b25      	ldr	r3, [pc, #148]	; (40cccc <lv_draw_img+0x20c>)
  40cc36:	4798      	blx	r3
        show_error(coords, mask, "No\ndata");
  40cc38:	4a1a      	ldr	r2, [pc, #104]	; (40cca4 <lv_draw_img+0x1e4>)
  40cc3a:	4631      	mov	r1, r6
  40cc3c:	4628      	mov	r0, r5
  40cc3e:	4b1a      	ldr	r3, [pc, #104]	; (40cca8 <lv_draw_img+0x1e8>)
  40cc40:	4798      	blx	r3
        return;
  40cc42:	e748      	b.n	40cad6 <lv_draw_img+0x16>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40cc44:	f10a 0a01 	add.w	sl, sl, #1
  40cc48:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  40cc4c:	459a      	cmp	sl, r3
  40cc4e:	dc25      	bgt.n	40cc9c <lv_draw_img+0x1dc>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
  40cc50:	aa0c      	add	r2, sp, #48	; 0x30
  40cc52:	4631      	mov	r1, r6
  40cc54:	a80e      	add	r0, sp, #56	; 0x38
  40cc56:	47d8      	blx	fp
            if(union_ok == false) continue;
  40cc58:	2800      	cmp	r0, #0
  40cc5a:	d0f3      	beq.n	40cc44 <lv_draw_img+0x184>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
  40cc5c:	9806      	ldr	r0, [sp, #24]
  40cc5e:	9004      	str	r0, [sp, #16]
  40cc60:	9700      	str	r7, [sp, #0]
  40cc62:	9b03      	ldr	r3, [sp, #12]
  40cc64:	b222      	sxth	r2, r4
  40cc66:	9905      	ldr	r1, [sp, #20]
  40cc68:	4d19      	ldr	r5, [pc, #100]	; (40ccd0 <lv_draw_img+0x210>)
  40cc6a:	47a8      	blx	r5
            if(read_res != LV_RES_OK) {
  40cc6c:	2801      	cmp	r0, #1
  40cc6e:	d1dc      	bne.n	40cc2a <lv_draw_img+0x16a>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
  40cc70:	f8cd 9004 	str.w	r9, [sp, #4]
  40cc74:	f8cd 8000 	str.w	r8, [sp]
  40cc78:	9b07      	ldr	r3, [sp, #28]
  40cc7a:	463a      	mov	r2, r7
  40cc7c:	a90e      	add	r1, sp, #56	; 0x38
  40cc7e:	a80c      	add	r0, sp, #48	; 0x30
  40cc80:	4d0e      	ldr	r5, [pc, #56]	; (40ccbc <lv_draw_img+0x1fc>)
  40cc82:	47a8      	blx	r5
            line.y1++;
  40cc84:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
  40cc88:	3301      	adds	r3, #1
  40cc8a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            line.y2++;
  40cc8e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
  40cc92:	3301      	adds	r3, #1
  40cc94:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            y++;
  40cc98:	3401      	adds	r4, #1
  40cc9a:	e7d3      	b.n	40cc44 <lv_draw_img+0x184>
        _lv_mem_buf_release(buf);
  40cc9c:	9808      	ldr	r0, [sp, #32]
  40cc9e:	4b0b      	ldr	r3, [pc, #44]	; (40cccc <lv_draw_img+0x20c>)
  40cca0:	4798      	blx	r3
  40cca2:	e718      	b.n	40cad6 <lv_draw_img+0x16>
  40cca4:	00425a90 	.word	0x00425a90
  40cca8:	0040c9e1 	.word	0x0040c9e1
  40ccac:	00412351 	.word	0x00412351
  40ccb0:	0040ca8b 	.word	0x0040ca8b
  40ccb4:	0040ca9f 	.word	0x0040ca9f
  40ccb8:	00414957 	.word	0x00414957
  40ccbc:	0040c199 	.word	0x0040c199
  40ccc0:	00415cd9 	.word	0x00415cd9
  40ccc4:	00414931 	.word	0x00414931
  40ccc8:	00412e9d 	.word	0x00412e9d
  40cccc:	0041595d 	.word	0x0041595d
  40ccd0:	00412e79 	.word	0x00412e79
  40ccd4:	00411d1d 	.word	0x00411d1d

0040ccd8 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
  40ccd8:	b158      	cbz	r0, 40ccf2 <lv_img_src_get_type+0x1a>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
  40ccda:	7802      	ldrb	r2, [r0, #0]
  40ccdc:	f1a2 0320 	sub.w	r3, r2, #32
  40cce0:	b2db      	uxtb	r3, r3
  40cce2:	2b5f      	cmp	r3, #95	; 0x5f
  40cce4:	d907      	bls.n	40ccf6 <lv_img_src_get_type+0x1e>
    else if(u8_p[0] >= 0x80) {
  40cce6:	b252      	sxtb	r2, r2
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
  40cce8:	2a00      	cmp	r2, #0
  40ccea:	bfb4      	ite	lt
  40ccec:	2002      	movlt	r0, #2
  40ccee:	2000      	movge	r0, #0
  40ccf0:	4770      	bx	lr
    if(src == NULL) return img_src_type;
  40ccf2:	2003      	movs	r0, #3
  40ccf4:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
  40ccf6:	2001      	movs	r0, #1
}
  40ccf8:	4770      	bx	lr

0040ccfa <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
  40ccfa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  40ccfe:	b2db      	uxtb	r3, r3
  40cd00:	2b09      	cmp	r3, #9
  40cd02:	d917      	bls.n	40cd34 <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
  40cd04:	2860      	cmp	r0, #96	; 0x60
  40cd06:	d901      	bls.n	40cd0c <hex_char_to_num+0x12>
  40cd08:	3820      	subs	r0, #32
  40cd0a:	b2c0      	uxtb	r0, r0

        switch(hex) {
  40cd0c:	3841      	subs	r0, #65	; 0x41
  40cd0e:	2805      	cmp	r0, #5
  40cd10:	d80e      	bhi.n	40cd30 <hex_char_to_num+0x36>
  40cd12:	e8df f000 	tbb	[pc, r0]
  40cd16:	0311      	.short	0x0311
  40cd18:	0b090705 	.word	0x0b090705
            case 'A':
                result = 10;
                break;
            case 'B':
                result = 11;
  40cd1c:	200b      	movs	r0, #11
  40cd1e:	4770      	bx	lr
                break;
            case 'C':
                result = 12;
  40cd20:	200c      	movs	r0, #12
                break;
  40cd22:	4770      	bx	lr
            case 'D':
                result = 13;
  40cd24:	200d      	movs	r0, #13
                break;
  40cd26:	4770      	bx	lr
            case 'E':
                result = 14;
  40cd28:	200e      	movs	r0, #14
                break;
  40cd2a:	4770      	bx	lr
            case 'F':
                result = 15;
  40cd2c:	200f      	movs	r0, #15
                break;
  40cd2e:	4770      	bx	lr
            default:
                result = 0;
  40cd30:	2000      	movs	r0, #0
                break;
  40cd32:	4770      	bx	lr
        result = hex - '0';
  40cd34:	4618      	mov	r0, r3
  40cd36:	4770      	bx	lr
                result = 10;
  40cd38:	200a      	movs	r0, #10
        }
    }

    return result;
}
  40cd3a:	4770      	bx	lr

0040cd3c <lv_draw_label_dsc_init>:
{
  40cd3c:	b510      	push	{r4, lr}
  40cd3e:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
  40cd40:	2124      	movs	r1, #36	; 0x24
  40cd42:	4b0e      	ldr	r3, [pc, #56]	; (40cd7c <lv_draw_label_dsc_init+0x40>)
  40cd44:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
  40cd46:	23ff      	movs	r3, #255	; 0xff
  40cd48:	7323      	strb	r3, [r4, #12]
    dsc->color = LV_COLOR_BLACK;
  40cd4a:	2300      	movs	r3, #0
  40cd4c:	8023      	strh	r3, [r4, #0]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
  40cd4e:	4a0c      	ldr	r2, [pc, #48]	; (40cd80 <lv_draw_label_dsc_init+0x44>)
  40cd50:	60a2      	str	r2, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
  40cd52:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40cd56:	6162      	str	r2, [r4, #20]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
  40cd58:	61a2      	str	r2, [r4, #24]
    dsc->sel_color = LV_COLOR_BLACK;
  40cd5a:	8063      	strh	r3, [r4, #2]
    dsc->sel_bg_color = LV_COLOR_BLUE;
  40cd5c:	7922      	ldrb	r2, [r4, #4]
  40cd5e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  40cd62:	f363 02c7 	bfi	r2, r3, #3, #5
  40cd66:	7122      	strb	r2, [r4, #4]
  40cd68:	7962      	ldrb	r2, [r4, #5]
  40cd6a:	f042 021f 	orr.w	r2, r2, #31
  40cd6e:	f363 1247 	bfi	r2, r3, #5, #3
  40cd72:	7162      	strb	r2, [r4, #5]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
  40cd74:	f884 3020 	strb.w	r3, [r4, #32]
  40cd78:	bd10      	pop	{r4, pc}
  40cd7a:	bf00      	nop
  40cd7c:	00415ead 	.word	0x00415ead
  40cd80:	2040002c 	.word	0x2040002c

0040cd84 <lv_draw_label>:
{
  40cd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cd88:	b0d9      	sub	sp, #356	; 0x164
    if(dsc->opa <= LV_OPA_MIN) return;
  40cd8a:	7b14      	ldrb	r4, [r2, #12]
  40cd8c:	2c02      	cmp	r4, #2
  40cd8e:	d901      	bls.n	40cd94 <lv_draw_label+0x10>
    if(txt[0] == '\0')  return;
  40cd90:	781c      	ldrb	r4, [r3, #0]
  40cd92:	b914      	cbnz	r4, 40cd9a <lv_draw_label+0x16>
}
  40cd94:	b059      	add	sp, #356	; 0x164
  40cd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cd9a:	930e      	str	r3, [sp, #56]	; 0x38
  40cd9c:	4616      	mov	r6, r2
  40cd9e:	460a      	mov	r2, r1
  40cda0:	910f      	str	r1, [sp, #60]	; 0x3c
  40cda2:	4604      	mov	r4, r0
  40cda4:	9014      	str	r0, [sp, #80]	; 0x50
    const lv_font_t * font = dsc->font;
  40cda6:	68b3      	ldr	r3, [r6, #8]
  40cda8:	9306      	str	r3, [sp, #24]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
  40cdaa:	4601      	mov	r1, r0
  40cdac:	a856      	add	r0, sp, #344	; 0x158
  40cdae:	4ba4      	ldr	r3, [pc, #656]	; (40d040 <lv_draw_label+0x2bc>)
  40cdb0:	4798      	blx	r3
    if(!clip_ok) return;
  40cdb2:	2800      	cmp	r0, #0
  40cdb4:	d0ee      	beq.n	40cd94 <lv_draw_label+0x10>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
  40cdb6:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40cdba:	f012 0f02 	tst.w	r2, #2
  40cdbe:	d13d      	bne.n	40ce3c <lv_draw_label+0xb8>
  40cdc0:	88a3      	ldrh	r3, [r4, #4]
  40cdc2:	3301      	adds	r3, #1
  40cdc4:	8822      	ldrh	r2, [r4, #0]
  40cdc6:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
  40cdc8:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
  40cdca:	9a06      	ldr	r2, [sp, #24]
  40cdcc:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
  40cdd0:	f9b6 500e 	ldrsh.w	r5, [r6, #14]
  40cdd4:	444d      	add	r5, r9
    pos.x = coords->x1;
  40cdd6:	9914      	ldr	r1, [sp, #80]	; 0x50
  40cdd8:	f9b1 2000 	ldrsh.w	r2, [r1]
  40cddc:	9219      	str	r2, [sp, #100]	; 0x64
    pos.y = coords->y1;
  40cdde:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    x_ofs = dsc->ofs_x;
  40cde2:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
  40cde6:	9217      	str	r2, [sp, #92]	; 0x5c
    y_ofs = dsc->ofs_y;
  40cde8:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
    pos.y += y_ofs;
  40cdec:	1842      	adds	r2, r0, r1
  40cdee:	b292      	uxth	r2, r2
  40cdf0:	b214      	sxth	r4, r2
    if(hint && y_ofs == 0 && coords->y1 < 0) {
  40cdf2:	9f62      	ldr	r7, [sp, #392]	; 0x188
  40cdf4:	f117 0800 	adds.w	r8, r7, #0
  40cdf8:	bf18      	it	ne
  40cdfa:	f04f 0801 	movne.w	r8, #1
  40cdfe:	ea18 77d0 	ands.w	r7, r8, r0, lsr #31
  40ce02:	d000      	beq.n	40ce06 <lv_draw_label+0x82>
  40ce04:	b359      	cbz	r1, 40ce5e <lv_draw_label+0xda>
    pos.y += y_ofs;
  40ce06:	9411      	str	r4, [sp, #68]	; 0x44
    uint32_t line_start     = 0;
  40ce08:	2200      	movs	r2, #0
  40ce0a:	9205      	str	r2, [sp, #20]
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40ce0c:	b21b      	sxth	r3, r3
  40ce0e:	4619      	mov	r1, r3
  40ce10:	9312      	str	r3, [sp, #72]	; 0x48
  40ce12:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40ce16:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40ce1a:	9300      	str	r3, [sp, #0]
  40ce1c:	460b      	mov	r3, r1
  40ce1e:	9906      	ldr	r1, [sp, #24]
  40ce20:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40ce22:	9f05      	ldr	r7, [sp, #20]
  40ce24:	19e0      	adds	r0, r4, r7
  40ce26:	4c87      	ldr	r4, [pc, #540]	; (40d044 <lv_draw_label+0x2c0>)
  40ce28:	47a0      	blx	r4
  40ce2a:	eb07 0b00 	add.w	fp, r7, r0
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40ce2e:	4627      	mov	r7, r4
  40ce30:	46aa      	mov	sl, r5
  40ce32:	f8cd 801c 	str.w	r8, [sp, #28]
  40ce36:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40ce38:	9d62      	ldr	r5, [sp, #392]	; 0x188
    while(pos.y + line_height_font < mask->y1) {
  40ce3a:	e03e      	b.n	40ceba <lv_draw_label+0x136>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
  40ce3c:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40ce40:	9202      	str	r2, [sp, #8]
  40ce42:	f647 4218 	movw	r2, #31768	; 0x7c18
  40ce46:	9201      	str	r2, [sp, #4]
  40ce48:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40ce4c:	9200      	str	r2, [sp, #0]
  40ce4e:	68b2      	ldr	r2, [r6, #8]
  40ce50:	990e      	ldr	r1, [sp, #56]	; 0x38
  40ce52:	a83a      	add	r0, sp, #232	; 0xe8
  40ce54:	4c7c      	ldr	r4, [pc, #496]	; (40d048 <lv_draw_label+0x2c4>)
  40ce56:	47a0      	blx	r4
        w = p.x;
  40ce58:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
  40ce5c:	e7b5      	b.n	40cdca <lv_draw_label+0x46>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
  40ce5e:	9962      	ldr	r1, [sp, #392]	; 0x188
  40ce60:	6889      	ldr	r1, [r1, #8]
  40ce62:	1a08      	subs	r0, r1, r0
  40ce64:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40ce68:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40ce6c:	f5c5 7000 	rsb	r0, r5, #512	; 0x200
  40ce70:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
  40ce74:	dd07      	ble.n	40ce86 <lv_draw_label+0x102>
            hint->line_start = -1;
  40ce76:	f04f 32ff 	mov.w	r2, #4294967295
  40ce7a:	9962      	ldr	r1, [sp, #392]	; 0x188
  40ce7c:	600a      	str	r2, [r1, #0]
    pos.y += y_ofs;
  40ce7e:	9411      	str	r4, [sp, #68]	; 0x44
    uint32_t line_start     = 0;
  40ce80:	2200      	movs	r2, #0
  40ce82:	9205      	str	r2, [sp, #20]
  40ce84:	e7c2      	b.n	40ce0c <lv_draw_label+0x88>
        last_line_start = hint->line_start;
  40ce86:	9962      	ldr	r1, [sp, #392]	; 0x188
  40ce88:	6809      	ldr	r1, [r1, #0]
    if(hint && last_line_start >= 0) {
  40ce8a:	2900      	cmp	r1, #0
  40ce8c:	db09      	blt.n	40cea2 <lv_draw_label+0x11e>
  40ce8e:	f1b8 0f00 	cmp.w	r8, #0
  40ce92:	d006      	beq.n	40cea2 <lv_draw_label+0x11e>
        line_start = last_line_start;
  40ce94:	9105      	str	r1, [sp, #20]
        pos.y += hint->y;
  40ce96:	9962      	ldr	r1, [sp, #392]	; 0x188
  40ce98:	6849      	ldr	r1, [r1, #4]
  40ce9a:	440a      	add	r2, r1
  40ce9c:	b212      	sxth	r2, r2
  40ce9e:	9211      	str	r2, [sp, #68]	; 0x44
  40cea0:	e7b4      	b.n	40ce0c <lv_draw_label+0x88>
    pos.y += y_ofs;
  40cea2:	9411      	str	r4, [sp, #68]	; 0x44
    uint32_t line_start     = 0;
  40cea4:	2200      	movs	r2, #0
  40cea6:	9205      	str	r2, [sp, #20]
  40cea8:	e7b0      	b.n	40ce0c <lv_draw_label+0x88>
  40ceaa:	f8cd b014 	str.w	fp, [sp, #20]
        if(txt[line_start] == '\0') return;
  40ceae:	f898 3000 	ldrb.w	r3, [r8]
  40ceb2:	2b00      	cmp	r3, #0
  40ceb4:	f43f af6e 	beq.w	40cd94 <lv_draw_label+0x10>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40ceb8:	4683      	mov	fp, r0
    while(pos.y + line_height_font < mask->y1) {
  40ceba:	eb04 0309 	add.w	r3, r4, r9
  40cebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cec0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  40cec4:	4293      	cmp	r3, r2
  40cec6:	da22      	bge.n	40cf0e <lv_draw_label+0x18a>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40cec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ceca:	eb03 080b 	add.w	r8, r3, fp
  40cece:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40ced2:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40ced6:	9300      	str	r3, [sp, #0]
  40ced8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ceda:	9906      	ldr	r1, [sp, #24]
  40cedc:	4640      	mov	r0, r8
  40cede:	47b8      	blx	r7
  40cee0:	4458      	add	r0, fp
  40cee2:	4454      	add	r4, sl
  40cee4:	b224      	sxth	r4, r4
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
  40cee6:	f514 6f80 	cmn.w	r4, #1024	; 0x400
  40ceea:	dbde      	blt.n	40ceaa <lv_draw_label+0x126>
  40ceec:	9b07      	ldr	r3, [sp, #28]
  40ceee:	2b00      	cmp	r3, #0
  40cef0:	d0db      	beq.n	40ceaa <lv_draw_label+0x126>
  40cef2:	682b      	ldr	r3, [r5, #0]
  40cef4:	2b00      	cmp	r3, #0
  40cef6:	dad8      	bge.n	40ceaa <lv_draw_label+0x126>
            hint->line_start = line_start;
  40cef8:	f8c5 b000 	str.w	fp, [r5]
            hint->y          = pos.y - coords->y1;
  40cefc:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40cefe:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  40cf02:	1ae3      	subs	r3, r4, r3
  40cf04:	606b      	str	r3, [r5, #4]
            hint->coord_y    = coords->y1;
  40cf06:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  40cf0a:	60ab      	str	r3, [r5, #8]
  40cf0c:	e7cd      	b.n	40ceaa <lv_draw_label+0x126>
  40cf0e:	4655      	mov	r5, sl
  40cf10:	9411      	str	r4, [sp, #68]	; 0x44
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40cf12:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40cf16:	f012 0f04 	tst.w	r2, #4
  40cf1a:	d12e      	bne.n	40cf7a <lv_draw_label+0x1f6>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40cf1c:	f012 0f08 	tst.w	r2, #8
  40cf20:	d145      	bne.n	40cfae <lv_draw_label+0x22a>
    lv_opa_t opa = dsc->opa;
  40cf22:	7b33      	ldrb	r3, [r6, #12]
  40cf24:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t sel_start = dsc->sel_start;
  40cf26:	6973      	ldr	r3, [r6, #20]
  40cf28:	9308      	str	r3, [sp, #32]
    uint32_t sel_end = dsc->sel_end;
  40cf2a:	69b2      	ldr	r2, [r6, #24]
  40cf2c:	4610      	mov	r0, r2
  40cf2e:	920a      	str	r2, [sp, #40]	; 0x28
    if(sel_start > sel_end) {
  40cf30:	4283      	cmp	r3, r0
  40cf32:	d901      	bls.n	40cf38 <lv_draw_label+0x1b4>
        sel_start = sel_end;
  40cf34:	9008      	str	r0, [sp, #32]
        sel_end = tmp;
  40cf36:	930a      	str	r3, [sp, #40]	; 0x28
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
  40cf38:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40cf3c:	f013 0f03 	tst.w	r3, #3
  40cf40:	d14c      	bne.n	40cfdc <lv_draw_label+0x258>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
  40cf42:	a83d      	add	r0, sp, #244	; 0xf4
  40cf44:	4b41      	ldr	r3, [pc, #260]	; (40d04c <lv_draw_label+0x2c8>)
  40cf46:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
  40cf48:	88b3      	ldrh	r3, [r6, #4]
  40cf4a:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
  40cf4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cf50:	2bfd      	cmp	r3, #253	; 0xfd
  40cf52:	bf88      	it	hi
  40cf54:	23ff      	movhi	r3, #255	; 0xff
  40cf56:	931b      	str	r3, [sp, #108]	; 0x6c
  40cf58:	b2ab      	uxth	r3, r5
  40cf5a:	9315      	str	r3, [sp, #84]	; 0x54
  40cf5c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  40cf60:	9313      	str	r3, [sp, #76]	; 0x4c
    while(txt[line_start] != '\0') {
  40cf62:	9d19      	ldr	r5, [sp, #100]	; 0x64
    uint32_t par_start = 0;
  40cf64:	2300      	movs	r3, #0
  40cf66:	9316      	str	r3, [sp, #88]	; 0x58
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
  40cf68:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 40d05c <lv_draw_label+0x2d8>
  40cf6c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  40cf70:	f8dd b014 	ldr.w	fp, [sp, #20]
  40cf74:	46b2      	mov	sl, r6
    while(txt[line_start] != '\0') {
  40cf76:	f000 bdc8 	b.w	40db0a <lv_draw_label+0xd86>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40cf7a:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40cf7e:	9200      	str	r2, [sp, #0]
  40cf80:	9a06      	ldr	r2, [sp, #24]
  40cf82:	9805      	ldr	r0, [sp, #20]
  40cf84:	ebab 0100 	sub.w	r1, fp, r0
  40cf88:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40cf8a:	1820      	adds	r0, r4, r0
  40cf8c:	4c30      	ldr	r4, [pc, #192]	; (40d050 <lv_draw_label+0x2cc>)
  40cf8e:	47a0      	blx	r4
  40cf90:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40cf92:	8893      	ldrh	r3, [r2, #4]
  40cf94:	3301      	adds	r3, #1
  40cf96:	8812      	ldrh	r2, [r2, #0]
  40cf98:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40cf9a:	b21b      	sxth	r3, r3
  40cf9c:	1a1b      	subs	r3, r3, r0
  40cf9e:	bf48      	it	mi
  40cfa0:	3301      	addmi	r3, #1
  40cfa2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40cfa4:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40cfa8:	b21b      	sxth	r3, r3
  40cfaa:	9319      	str	r3, [sp, #100]	; 0x64
  40cfac:	e7b9      	b.n	40cf22 <lv_draw_label+0x19e>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40cfae:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40cfb2:	9200      	str	r2, [sp, #0]
  40cfb4:	9a06      	ldr	r2, [sp, #24]
  40cfb6:	9805      	ldr	r0, [sp, #20]
  40cfb8:	ebab 0100 	sub.w	r1, fp, r0
  40cfbc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40cfbe:	1820      	adds	r0, r4, r0
  40cfc0:	4c23      	ldr	r4, [pc, #140]	; (40d050 <lv_draw_label+0x2cc>)
  40cfc2:	47a0      	blx	r4
  40cfc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40cfc6:	8893      	ldrh	r3, [r2, #4]
  40cfc8:	3301      	adds	r3, #1
  40cfca:	8812      	ldrh	r2, [r2, #0]
  40cfcc:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
  40cfce:	b21b      	sxth	r3, r3
  40cfd0:	1a1b      	subs	r3, r3, r0
  40cfd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40cfd4:	4413      	add	r3, r2
  40cfd6:	b21b      	sxth	r3, r3
  40cfd8:	9319      	str	r3, [sp, #100]	; 0x64
  40cfda:	e7a2      	b.n	40cf22 <lv_draw_label+0x19e>
        lv_draw_line_dsc_init(&line_dsc);
  40cfdc:	a853      	add	r0, sp, #332	; 0x14c
  40cfde:	4b1d      	ldr	r3, [pc, #116]	; (40d054 <lv_draw_label+0x2d0>)
  40cfe0:	4798      	blx	r3
        line_dsc.color = dsc->color;
  40cfe2:	8833      	ldrh	r3, [r6, #0]
  40cfe4:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40cfe8:	9b06      	ldr	r3, [sp, #24]
  40cfea:	f993 300e 	ldrsb.w	r3, [r3, #14]
  40cfee:	2b00      	cmp	r3, #0
  40cff0:	bf08      	it	eq
  40cff2:	2301      	moveq	r3, #1
  40cff4:	f8ad 314e 	strh.w	r3, [sp, #334]	; 0x14e
        line_dsc.opa = dsc->opa;
  40cff8:	7b33      	ldrb	r3, [r6, #12]
  40cffa:	f88d 3154 	strb.w	r3, [sp, #340]	; 0x154
        line_dsc.blend_mode = dsc->blend_mode;
  40cffe:	f89d 3155 	ldrb.w	r3, [sp, #341]	; 0x155
  40d002:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
  40d006:	f362 0301 	bfi	r3, r2, #0, #2
  40d00a:	f88d 3155 	strb.w	r3, [sp, #341]	; 0x155
  40d00e:	e798      	b.n	40cf42 <lv_draw_label+0x1be>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
  40d010:	4b11      	ldr	r3, [pc, #68]	; (40d058 <lv_draw_label+0x2d4>)
  40d012:	681b      	ldr	r3, [r3, #0]
  40d014:	4451      	add	r1, sl
  40d016:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d018:	4798      	blx	r3
  40d01a:	4607      	mov	r7, r0
  40d01c:	e2c6      	b.n	40d5ac <lv_draw_label+0x828>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
  40d01e:	9b07      	ldr	r3, [sp, #28]
  40d020:	b923      	cbnz	r3, 40d02c <lv_draw_label+0x2a8>
                        par_start = i;
  40d022:	9b52      	ldr	r3, [sp, #328]	; 0x148
  40d024:	9316      	str	r3, [sp, #88]	; 0x58
                        cmd_state = CMD_STATE_PAR;
  40d026:	2301      	movs	r3, #1
  40d028:	9307      	str	r3, [sp, #28]
                        continue;
  40d02a:	e2ab      	b.n	40d584 <lv_draw_label+0x800>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
  40d02c:	9b07      	ldr	r3, [sp, #28]
  40d02e:	2b01      	cmp	r3, #1
  40d030:	f000 85e5 	beq.w	40dbfe <lv_draw_label+0xe7a>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
  40d034:	2b02      	cmp	r3, #2
  40d036:	f000 8518 	beq.w	40da6a <lv_draw_label+0xce6>
            lv_color_t color = dsc->color;
  40d03a:	f8b8 6000 	ldrh.w	r6, [r8]
  40d03e:	e2d6      	b.n	40d5ee <lv_draw_label+0x86a>
  40d040:	00414957 	.word	0x00414957
  40d044:	00416f95 	.word	0x00416f95
  40d048:	0041725d 	.word	0x0041725d
  40d04c:	0040fa91 	.word	0x0040fa91
  40d050:	004171bd 	.word	0x004171bd
  40d054:	0040dc15 	.word	0x0040dc15
  40d058:	20400084 	.word	0x20400084
  40d05c:	20400088 	.word	0x20400088
                    if(letter == ' ') {
  40d060:	9b05      	ldr	r3, [sp, #20]
  40d062:	2b20      	cmp	r3, #32
  40d064:	f040 828e 	bne.w	40d584 <lv_draw_label+0x800>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
  40d068:	9b52      	ldr	r3, [sp, #328]	; 0x148
  40d06a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40d06c:	1a9b      	subs	r3, r3, r2
  40d06e:	2b07      	cmp	r3, #7
  40d070:	d005      	beq.n	40d07e <lv_draw_label+0x2fa>
                            recolor.full = dsc->color.full;
  40d072:	f8b8 3000 	ldrh.w	r3, [r8]
  40d076:	930d      	str	r3, [sp, #52]	; 0x34
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40d078:	2302      	movs	r3, #2
  40d07a:	9307      	str	r3, [sp, #28]
  40d07c:	e282      	b.n	40d584 <lv_draw_label+0x800>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
  40d07e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d080:	1898      	adds	r0, r3, r2
  40d082:	1e43      	subs	r3, r0, #1
  40d084:	3005      	adds	r0, #5
    uint8_t * d8 = (uint8_t *)dst;
  40d086:	aa3a      	add	r2, sp, #232	; 0xe8
        *d8 = *s8;
  40d088:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40d08c:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  40d090:	4283      	cmp	r3, r0
  40d092:	d1f9      	bne.n	40d088 <lv_draw_label+0x304>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
  40d094:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
  40d098:	4db6      	ldr	r5, [pc, #728]	; (40d374 <lv_draw_label+0x5f0>)
  40d09a:	47a8      	blx	r5
  40d09c:	4607      	mov	r7, r0
  40d09e:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
  40d0a2:	47a8      	blx	r5
  40d0a4:	eb00 1707 	add.w	r7, r0, r7, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
  40d0a8:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
  40d0ac:	47a8      	blx	r5
  40d0ae:	4604      	mov	r4, r0
  40d0b0:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
  40d0b4:	47a8      	blx	r5
  40d0b6:	eb00 1404 	add.w	r4, r0, r4, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
  40d0ba:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
  40d0be:	47a8      	blx	r5
  40d0c0:	4606      	mov	r6, r0
  40d0c2:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
  40d0c6:	47a8      	blx	r5
                            recolor = lv_color_make(r, g, b);
  40d0c8:	b2e4      	uxtb	r4, r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  40d0ca:	0963      	lsrs	r3, r4, #5
  40d0cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40d0ce:	f363 0202 	bfi	r2, r3, #0, #3
  40d0d2:	4613      	mov	r3, r2
  40d0d4:	f3c7 07c4 	ubfx	r7, r7, #3, #5
  40d0d8:	f367 03c7 	bfi	r3, r7, #3, #5
  40d0dc:	461a      	mov	r2, r3
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
  40d0de:	eb00 1306 	add.w	r3, r0, r6, lsl #4
  40d0e2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  40d0e6:	f363 220c 	bfi	r2, r3, #8, #5
  40d0ea:	4613      	mov	r3, r2
  40d0ec:	08a4      	lsrs	r4, r4, #2
  40d0ee:	f364 334f 	bfi	r3, r4, #13, #3
  40d0f2:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
  40d0f6:	b29b      	uxth	r3, r3
  40d0f8:	930d      	str	r3, [sp, #52]	; 0x34
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40d0fa:	2302      	movs	r3, #2
  40d0fc:	9307      	str	r3, [sp, #28]
  40d0fe:	e241      	b.n	40d584 <lv_draw_label+0x800>
                    sel_coords.x1 = pos.x;
  40d100:	f8ad b0e8 	strh.w	fp, [sp, #232]	; 0xe8
                    sel_coords.y1 = pos.y;
  40d104:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d106:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
  40d10a:	f8b8 3010 	ldrh.w	r3, [r8, #16]
  40d10e:	3b01      	subs	r3, #1
  40d110:	445b      	add	r3, fp
  40d112:	4403      	add	r3, r0
  40d114:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
                    sel_coords.y2 = pos.y + line_height - 1;
  40d118:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d11a:	3b01      	subs	r3, #1
  40d11c:	4413      	add	r3, r2
  40d11e:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
  40d122:	aa3d      	add	r2, sp, #244	; 0xf4
  40d124:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40d126:	a83a      	add	r0, sp, #232	; 0xe8
  40d128:	4b93      	ldr	r3, [pc, #588]	; (40d378 <lv_draw_label+0x5f4>)
  40d12a:	4798      	blx	r3
                    color = dsc->sel_color;
  40d12c:	f8b8 6002 	ldrh.w	r6, [r8, #2]
  40d130:	e26b      	b.n	40d60a <lv_draw_label+0x886>
            bitmask_init  = 0xC0;
  40d132:	23c0      	movs	r3, #192	; 0xc0
  40d134:	931f      	str	r3, [sp, #124]	; 0x7c
            bpp_opa_table = _lv_bpp2_opa_table;
  40d136:	4b91      	ldr	r3, [pc, #580]	; (40d37c <lv_draw_label+0x5f8>)
  40d138:	9321      	str	r3, [sp, #132]	; 0x84
    int32_t box_w = g->box_w;
  40d13a:	f8bd 60ea 	ldrh.w	r6, [sp, #234]	; 0xea
    int32_t box_h = g->box_h;
  40d13e:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40d142:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  40d144:	fb03 f206 	mul.w	r2, r3, r6
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40d148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d14a:	f9b3 3000 	ldrsh.w	r3, [r3]
  40d14e:	9c05      	ldr	r4, [sp, #20]
  40d150:	429c      	cmp	r4, r3
  40d152:	f280 80c8 	bge.w	40d2e6 <lv_draw_label+0x562>
  40d156:	1b1b      	subs	r3, r3, r4
  40d158:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40d15c:	932b      	str	r3, [sp, #172]	; 0xac
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40d15e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d160:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  40d164:	4886      	ldr	r0, [pc, #536]	; (40d380 <lv_draw_label+0x5fc>)
  40d166:	fb80 4006 	smull	r4, r0, r0, r6
  40d16a:	9c05      	ldr	r4, [sp, #20]
  40d16c:	4420      	add	r0, r4
  40d16e:	4298      	cmp	r0, r3
  40d170:	f340 80bc 	ble.w	40d2ec <lv_draw_label+0x568>
  40d174:	1b1b      	subs	r3, r3, r4
  40d176:	3301      	adds	r3, #1
  40d178:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40d17c:	931a      	str	r3, [sp, #104]	; 0x68
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d17e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d180:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40d184:	9c1c      	ldr	r4, [sp, #112]	; 0x70
  40d186:	429c      	cmp	r4, r3
  40d188:	bfb4      	ite	lt
  40d18a:	1b1b      	sublt	r3, r3, r4
  40d18c:	2300      	movge	r3, #0
  40d18e:	9328      	str	r3, [sp, #160]	; 0xa0
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d190:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d192:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  40d196:	9c1c      	ldr	r4, [sp, #112]	; 0x70
  40d198:	1908      	adds	r0, r1, r4
  40d19a:	4298      	cmp	r0, r3
  40d19c:	f340 80a8 	ble.w	40d2f0 <lv_draw_label+0x56c>
  40d1a0:	1b1b      	subs	r3, r3, r4
  40d1a2:	3301      	adds	r3, #1
  40d1a4:	932c      	str	r3, [sp, #176]	; 0xb0
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40d1a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  40d1a8:	4618      	mov	r0, r3
  40d1aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  40d1ac:	fb00 f303 	mul.w	r3, r0, r3
  40d1b0:	9828      	ldr	r0, [sp, #160]	; 0xa0
  40d1b2:	fb00 3202 	mla	r2, r0, r2, r3
    map_p += bit_ofs >> 3;
  40d1b6:	eb0c 04e2 	add.w	r4, ip, r2, asr #3
  40d1ba:	9420      	str	r4, [sp, #128]	; 0x80
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40d1bc:	f002 0407 	and.w	r4, r2, #7
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
  40d1c0:	fb01 f106 	mul.w	r1, r1, r6
  40d1c4:	29f0      	cmp	r1, #240	; 0xf0
  40d1c6:	bfa8      	it	ge
  40d1c8:	21f0      	movge	r1, #240	; 0xf0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40d1ca:	912d      	str	r1, [sp, #180]	; 0xb4
  40d1cc:	4608      	mov	r0, r1
  40d1ce:	4a6d      	ldr	r2, [pc, #436]	; (40d384 <lv_draw_label+0x600>)
  40d1d0:	4790      	blx	r2
  40d1d2:	9022      	str	r0, [sp, #136]	; 0x88
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40d1d4:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40d1d6:	0048      	lsls	r0, r1, #1
  40d1d8:	496a      	ldr	r1, [pc, #424]	; (40d384 <lv_draw_label+0x600>)
  40d1da:	4788      	blx	r1
  40d1dc:	901e      	str	r0, [sp, #120]	; 0x78
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40d1de:	4b6a      	ldr	r3, [pc, #424]	; (40d388 <lv_draw_label+0x604>)
  40d1e0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40d1e2:	4b6a      	ldr	r3, [pc, #424]	; (40d38c <lv_draw_label+0x608>)
  40d1e4:	4798      	blx	r3
  40d1e6:	f9b0 e010 	ldrsh.w	lr, [r0, #16]
  40d1ea:	8a83      	ldrh	r3, [r0, #20]
  40d1ec:	3301      	adds	r3, #1
  40d1ee:	eba3 030e 	sub.w	r3, r3, lr
    int32_t vdb_width     = lv_area_get_width(&vdb->area);
  40d1f2:	b219      	sxth	r1, r3
  40d1f4:	911d      	str	r1, [sp, #116]	; 0x74
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
  40d1f6:	6881      	ldr	r1, [r0, #8]
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
  40d1f8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  40d1fa:	4a61      	ldr	r2, [pc, #388]	; (40d380 <lv_draw_label+0x5fc>)
  40d1fc:	fb82 c203 	smull	ip, r2, r2, r3
  40d200:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
  40d204:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  40d208:	981c      	ldr	r0, [sp, #112]	; 0x70
  40d20a:	1ac3      	subs	r3, r0, r3
  40d20c:	981d      	ldr	r0, [sp, #116]	; 0x74
  40d20e:	4684      	mov	ip, r0
  40d210:	9805      	ldr	r0, [sp, #20]
  40d212:	fb0c 0303 	mla	r3, ip, r3, r0
  40d216:	eba3 030e 	sub.w	r3, r3, lr
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
  40d21a:	9828      	ldr	r0, [sp, #160]	; 0xa0
  40d21c:	4686      	mov	lr, r0
  40d21e:	fb0c 200e 	mla	r0, ip, lr, r2
  40d222:	4403      	add	r3, r0
  40d224:	eb01 0e43 	add.w	lr, r1, r3, lsl #1
  40d228:	f8cd e070 	str.w	lr, [sp, #112]	; 0x70
    map_area.x1 = col_start / 3 + pos_x;
  40d22c:	b2bf      	uxth	r7, r7
  40d22e:	443a      	add	r2, r7
  40d230:	f8ad 20e0 	strh.w	r2, [sp, #224]	; 0xe0
    map_area.x2 = col_end / 3  + pos_x - 1;
  40d234:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40d236:	4696      	mov	lr, r2
  40d238:	4951      	ldr	r1, [pc, #324]	; (40d380 <lv_draw_label+0x5fc>)
  40d23a:	fb81 e30e 	smull	lr, r3, r1, lr
  40d23e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  40d242:	3f01      	subs	r7, #1
  40d244:	443b      	add	r3, r7
  40d246:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
    map_area.y1 = row_start + pos_y;
  40d24a:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40d24c:	46be      	mov	lr, r7
  40d24e:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  40d250:	44be      	add	lr, r7
  40d252:	fa0f f38e 	sxth.w	r3, lr
  40d256:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    map_area.y2 = map_area.y1;
  40d25a:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40d25e:	4b4c      	ldr	r3, [pc, #304]	; (40d390 <lv_draw_label+0x60c>)
  40d260:	4798      	blx	r3
  40d262:	902e      	str	r0, [sp, #184]	; 0xb8
    uint8_t txt_rgb[3] = {color.ch.red, (color.ch.green_h << 3) + color.ch.green_l, color.ch.blue};
  40d264:	9823      	ldr	r0, [sp, #140]	; 0x8c
  40d266:	9a29      	ldr	r2, [sp, #164]	; 0xa4
  40d268:	eb00 0ec2 	add.w	lr, r0, r2, lsl #3
  40d26c:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    for(row = row_start ; row < row_end; row++) {
  40d270:	4638      	mov	r0, r7
  40d272:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
  40d274:	42b8      	cmp	r0, r7
  40d276:	f280 8163 	bge.w	40d540 <lv_draw_label+0x7bc>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40d27a:	991a      	ldr	r1, [sp, #104]	; 0x68
  40d27c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  40d27e:	1a8b      	subs	r3, r1, r2
  40d280:	461f      	mov	r7, r3
  40d282:	932f      	str	r3, [sp, #188]	; 0xbc
        col_bit += ((box_w - col_end) + col_start) * bpp;
  40d284:	1a73      	subs	r3, r6, r1
  40d286:	4413      	add	r3, r2
  40d288:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  40d28a:	fb02 f303 	mul.w	r3, r2, r3
  40d28e:	9330      	str	r3, [sp, #192]	; 0xc0
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
  40d290:	4e3b      	ldr	r6, [pc, #236]	; (40d380 <lv_draw_label+0x5fc>)
  40d292:	fb86 6307 	smull	r6, r3, r6, r7
  40d296:	ebc3 73e7 	rsb	r3, r3, r7, asr #31
  40d29a:	981d      	ldr	r0, [sp, #116]	; 0x74
  40d29c:	4403      	add	r3, r0
  40d29e:	005b      	lsls	r3, r3, #1
  40d2a0:	9331      	str	r3, [sp, #196]	; 0xc4
  40d2a2:	2300      	movs	r3, #0
  40d2a4:	9329      	str	r3, [sp, #164]	; 0xa4
                col_bit = 0;
  40d2a6:	931d      	str	r3, [sp, #116]	; 0x74
  40d2a8:	f8cd a0c8 	str.w	sl, [sp, #200]	; 0xc8
  40d2ac:	9533      	str	r5, [sp, #204]	; 0xcc
  40d2ae:	f8cd b0d0 	str.w	fp, [sp, #208]	; 0xd0
  40d2b2:	f8dd b080 	ldr.w	fp, [sp, #128]	; 0x80
  40d2b6:	f8cd 80d4 	str.w	r8, [sp, #212]	; 0xd4
  40d2ba:	e0f6      	b.n	40d4aa <lv_draw_label+0x726>
    if(bpp == 3) bpp = 4;
  40d2bc:	2304      	movs	r3, #4
  40d2be:	932a      	str	r3, [sp, #168]	; 0xa8
            bitmask_init  = 0xF0;
  40d2c0:	23f0      	movs	r3, #240	; 0xf0
  40d2c2:	931f      	str	r3, [sp, #124]	; 0x7c
            bpp_opa_table = _lv_bpp4_opa_table;
  40d2c4:	4b33      	ldr	r3, [pc, #204]	; (40d394 <lv_draw_label+0x610>)
  40d2c6:	9321      	str	r3, [sp, #132]	; 0x84
  40d2c8:	e737      	b.n	40d13a <lv_draw_label+0x3b6>
    uint32_t bpp = g->bpp;
  40d2ca:	2308      	movs	r3, #8
  40d2cc:	932a      	str	r3, [sp, #168]	; 0xa8
            bitmask_init  = 0xFF;
  40d2ce:	23ff      	movs	r3, #255	; 0xff
  40d2d0:	931f      	str	r3, [sp, #124]	; 0x7c
            bpp_opa_table = _lv_bpp8_opa_table;
  40d2d2:	4b31      	ldr	r3, [pc, #196]	; (40d398 <lv_draw_label+0x614>)
  40d2d4:	9321      	str	r3, [sp, #132]	; 0x84
  40d2d6:	e730      	b.n	40d13a <lv_draw_label+0x3b6>
    uint32_t bpp = g->bpp;
  40d2d8:	2301      	movs	r3, #1
  40d2da:	932a      	str	r3, [sp, #168]	; 0xa8
            bitmask_init  = 0x80;
  40d2dc:	2380      	movs	r3, #128	; 0x80
  40d2de:	931f      	str	r3, [sp, #124]	; 0x7c
            bpp_opa_table = _lv_bpp1_opa_table;
  40d2e0:	4b2e      	ldr	r3, [pc, #184]	; (40d39c <lv_draw_label+0x618>)
  40d2e2:	9321      	str	r3, [sp, #132]	; 0x84
  40d2e4:	e729      	b.n	40d13a <lv_draw_label+0x3b6>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40d2e6:	2300      	movs	r3, #0
  40d2e8:	932b      	str	r3, [sp, #172]	; 0xac
  40d2ea:	e738      	b.n	40d15e <lv_draw_label+0x3da>
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40d2ec:	961a      	str	r6, [sp, #104]	; 0x68
  40d2ee:	e746      	b.n	40d17e <lv_draw_label+0x3fa>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d2f0:	912c      	str	r1, [sp, #176]	; 0xb0
  40d2f2:	e758      	b.n	40d1a6 <lv_draw_label+0x422>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
  40d2f4:	f1bc 0f08 	cmp.w	ip, #8
  40d2f8:	d00b      	beq.n	40d312 <lv_draw_label+0x58e>
  40d2fa:	b2db      	uxtb	r3, r3
  40d2fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
  40d2fe:	5cd2      	ldrb	r2, [r2, r3]
  40d300:	e007      	b.n	40d312 <lv_draw_label+0x58e>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d302:	b2da      	uxtb	r2, r3
  40d304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40d306:	fb03 f202 	mul.w	r2, r3, r2
  40d30a:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d30e:	e000      	b.n	40d312 <lv_draw_label+0x58e>
                px_opa = 0;
  40d310:	9a1d      	ldr	r2, [sp, #116]	; 0x74
            font_rgb[subpx_cnt] = px_opa;
  40d312:	ab58      	add	r3, sp, #352	; 0x160
  40d314:	4403      	add	r3, r0
  40d316:	f803 2c84 	strb.w	r2, [r3, #-132]
            subpx_cnt ++;
  40d31a:	3001      	adds	r0, #1
            if(subpx_cnt == 3) {
  40d31c:	2803      	cmp	r0, #3
  40d31e:	d03f      	beq.n	40d3a0 <lv_draw_label+0x61c>
            if(col_bit < (int32_t)(8 - bpp)) {
  40d320:	42a7      	cmp	r7, r4
  40d322:	f340 809d 	ble.w	40d460 <lv_draw_label+0x6dc>
                col_bit += bpp;
  40d326:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d328:	4463      	add	r3, ip
  40d32a:	461c      	mov	r4, r3
                bitmask = bitmask >> bpp;
  40d32c:	fa26 f60c 	lsr.w	r6, r6, ip
        for(col = col_start; col < col_end; col++) {
  40d330:	9a05      	ldr	r2, [sp, #20]
  40d332:	3201      	adds	r2, #1
  40d334:	9205      	str	r2, [sp, #20]
  40d336:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40d338:	4293      	cmp	r3, r2
  40d33a:	f000 8098 	beq.w	40d46e <lv_draw_label+0x6ea>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
  40d33e:	9418      	str	r4, [sp, #96]	; 0x60
  40d340:	f89b 3000 	ldrb.w	r3, [fp]
  40d344:	ea03 0206 	and.w	r2, r3, r6
  40d348:	1b3b      	subs	r3, r7, r4
  40d34a:	fa22 f303 	lsr.w	r3, r2, r3
            if(letter_px != 0) {
  40d34e:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
  40d352:	d0dd      	beq.n	40d310 <lv_draw_label+0x58c>
                if(opa == LV_OPA_COVER) {
  40d354:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  40d356:	2dff      	cmp	r5, #255	; 0xff
  40d358:	d0cc      	beq.n	40d2f4 <lv_draw_label+0x570>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d35a:	f1bc 0f08 	cmp.w	ip, #8
  40d35e:	d0d0      	beq.n	40d302 <lv_draw_label+0x57e>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
  40d360:	b2db      	uxtb	r3, r3
  40d362:	9a21      	ldr	r2, [sp, #132]	; 0x84
  40d364:	5cd2      	ldrb	r2, [r2, r3]
  40d366:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40d368:	fb03 f202 	mul.w	r2, r3, r2
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d36c:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d370:	e7cf      	b.n	40d312 <lv_draw_label+0x58e>
  40d372:	bf00      	nop
  40d374:	0040ccfb 	.word	0x0040ccfb
  40d378:	0040fadd 	.word	0x0040fadd
  40d37c:	00425a9c 	.word	0x00425a9c
  40d380:	55555556 	.word	0x55555556
  40d384:	00415cd9 	.word	0x00415cd9
  40d388:	00408f81 	.word	0x00408f81
  40d38c:	00414199 	.word	0x00414199
  40d390:	0040f1c9 	.word	0x0040f1c9
  40d394:	00425aa0 	.word	0x00425aa0
  40d398:	00425ab0 	.word	0x00425ab0
  40d39c:	00425a98 	.word	0x00425a98
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
  40d3a0:	f89d 00dc 	ldrb.w	r0, [sp, #220]	; 0xdc
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red,
  40d3a4:	991c      	ldr	r1, [sp, #112]	; 0x70
  40d3a6:	780a      	ldrb	r2, [r1, #0]
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
  40d3a8:	08d3      	lsrs	r3, r2, #3
  40d3aa:	f1c0 0eff 	rsb	lr, r0, #255	; 0xff
  40d3ae:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40d3b0:	fb00 f505 	mul.w	r5, r0, r5
  40d3b4:	fb0e 5303 	mla	r3, lr, r3, r5
  40d3b8:	f3c3 2504 	ubfx	r5, r3, #8, #5
  40d3bc:	9520      	str	r5, [sp, #128]	; 0x80
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
  40d3be:	f89d e0de 	ldrb.w	lr, [sp, #222]	; 0xde
                                     vdb_buf_tmp->ch.blue
  40d3c2:	784b      	ldrb	r3, [r1, #1]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
  40d3c4:	f003 051f 	and.w	r5, r3, #31
  40d3c8:	f1ce 08ff 	rsb	r8, lr, #255	; 0xff
  40d3cc:	9924      	ldr	r1, [sp, #144]	; 0x90
  40d3ce:	fb0e f101 	mul.w	r1, lr, r1
  40d3d2:	fb08 1805 	mla	r8, r8, r5, r1
  40d3d6:	f3c8 2804 	ubfx	r8, r8, #8, #5
                uint8_t green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
  40d3da:	f89d 50dd 	ldrb.w	r5, [sp, #221]	; 0xdd
                                     (vdb_buf_tmp->ch.green_h << 3) + vdb_buf_tmp->ch.green_l,
  40d3de:	f3c2 0202 	ubfx	r2, r2, #0, #3
  40d3e2:	f3c3 1342 	ubfx	r3, r3, #5, #3
  40d3e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
                uint8_t green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
  40d3ea:	b2db      	uxtb	r3, r3
  40d3ec:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  40d3f0:	4611      	mov	r1, r2
  40d3f2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40d3f4:	fb05 f202 	mul.w	r2, r5, r2
  40d3f8:	fb01 2303 	mla	r3, r1, r3, r2
  40d3fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
                res_color.ch.green_h = green >> 3;
  40d400:	f3c3 02c2 	ubfx	r2, r3, #3, #3
                res_color.ch.green_l = green & 0x7;
  40d404:	f003 0307 	and.w	r3, r3, #7
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
  40d408:	2d00      	cmp	r5, #0
  40d40a:	bf08      	it	eq
  40d40c:	2800      	cmpeq	r0, #0
  40d40e:	d108      	bne.n	40d422 <lv_draw_label+0x69e>
  40d410:	f1be 0f00 	cmp.w	lr, #0
  40d414:	d105      	bne.n	40d422 <lv_draw_label+0x69e>
  40d416:	9922      	ldr	r1, [sp, #136]	; 0x88
  40d418:	f04f 0000 	mov.w	r0, #0
  40d41c:	f801 000a 	strb.w	r0, [r1, sl]
  40d420:	e004      	b.n	40d42c <lv_draw_label+0x6a8>
                else mask_buf[mask_p] = LV_OPA_COVER;
  40d422:	9922      	ldr	r1, [sp, #136]	; 0x88
  40d424:	f04f 30ff 	mov.w	r0, #4294967295
  40d428:	f801 000a 	strb.w	r0, [r1, sl]
                color_buf[mask_p] = res_color;
  40d42c:	991e      	ldr	r1, [sp, #120]	; 0x78
  40d42e:	eb01 054a 	add.w	r5, r1, sl, lsl #1
  40d432:	f811 001a 	ldrb.w	r0, [r1, sl, lsl #1]
  40d436:	f362 0002 	bfi	r0, r2, #0, #3
  40d43a:	9920      	ldr	r1, [sp, #128]	; 0x80
  40d43c:	f361 00c7 	bfi	r0, r1, #3, #5
  40d440:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40d442:	f802 001a 	strb.w	r0, [r2, sl, lsl #1]
  40d446:	786a      	ldrb	r2, [r5, #1]
  40d448:	f368 0204 	bfi	r2, r8, #0, #5
  40d44c:	f363 1247 	bfi	r2, r3, #5, #3
  40d450:	706a      	strb	r2, [r5, #1]
                mask_p++;
  40d452:	f10a 0a01 	add.w	sl, sl, #1
                vdb_buf_tmp++;
  40d456:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40d458:	3302      	adds	r3, #2
  40d45a:	931c      	str	r3, [sp, #112]	; 0x70
                subpx_cnt = 0;
  40d45c:	2000      	movs	r0, #0
  40d45e:	e75f      	b.n	40d320 <lv_draw_label+0x59c>
                map_p++;
  40d460:	f10b 0b01 	add.w	fp, fp, #1
                bitmask = bitmask_init;
  40d464:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
                col_bit = 0;
  40d466:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40d468:	e762      	b.n	40d330 <lv_draw_label+0x5ac>
        for(col = col_start; col < col_end; col++) {
  40d46a:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
        if(other_mask_cnt) {
  40d46e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  40d470:	bb5b      	cbnz	r3, 40d4ca <lv_draw_label+0x746>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40d472:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40d474:	4453      	add	r3, sl
  40d476:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40d478:	429a      	cmp	r2, r3
  40d47a:	dd43      	ble.n	40d504 <lv_draw_label+0x780>
            map_area.y2 ++;
  40d47c:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
  40d480:	3301      	adds	r3, #1
  40d482:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
  40d486:	f8cd a0a4 	str.w	sl, [sp, #164]	; 0xa4
        col_bit += ((box_w - col_end) + col_start) * bpp;
  40d48a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
  40d48c:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
  40d48e:	eb0b 0be4 	add.w	fp, fp, r4, asr #3
        col_bit = col_bit & 0x7;
  40d492:	f004 0407 	and.w	r4, r4, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
  40d496:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40d498:	9a31      	ldr	r2, [sp, #196]	; 0xc4
  40d49a:	4413      	add	r3, r2
  40d49c:	931c      	str	r3, [sp, #112]	; 0x70
    for(row = row_start ; row < row_end; row++) {
  40d49e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40d4a0:	3301      	adds	r3, #1
  40d4a2:	9328      	str	r3, [sp, #160]	; 0xa0
  40d4a4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40d4a6:	4293      	cmp	r3, r2
  40d4a8:	da43      	bge.n	40d532 <lv_draw_label+0x7ae>
        bitmask = bitmask_init >> col_bit;
  40d4aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40d4ac:	fa23 f604 	lsr.w	r6, r3, r4
        for(col = col_start; col < col_end; col++) {
  40d4b0:	992b      	ldr	r1, [sp, #172]	; 0xac
  40d4b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40d4b4:	4291      	cmp	r1, r2
  40d4b6:	dad8      	bge.n	40d46a <lv_draw_label+0x6e6>
  40d4b8:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
  40d4bc:	2000      	movs	r0, #0
  40d4be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  40d4c0:	f1c2 0708 	rsb	r7, r2, #8
                else mask_buf[mask_p] = LV_OPA_COVER;
  40d4c4:	4694      	mov	ip, r2
  40d4c6:	9105      	str	r1, [sp, #20]
  40d4c8:	e739      	b.n	40d33e <lv_draw_label+0x5ba>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
  40d4ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40d4cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d4ce:	4413      	add	r3, r2
  40d4d0:	461d      	mov	r5, r3
  40d4d2:	f9bd 10e0 	ldrsh.w	r1, [sp, #224]	; 0xe0
  40d4d6:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
  40d4da:	3301      	adds	r3, #1
  40d4dc:	1a5b      	subs	r3, r3, r1
  40d4de:	b21b      	sxth	r3, r3
  40d4e0:	f9bd 20e6 	ldrsh.w	r2, [sp, #230]	; 0xe6
  40d4e4:	4628      	mov	r0, r5
  40d4e6:	4eb2      	ldr	r6, [pc, #712]	; (40d7b0 <lv_draw_label+0xa2c>)
  40d4e8:	47b0      	blx	r6
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40d4ea:	2800      	cmp	r0, #0
  40d4ec:	d1c1      	bne.n	40d472 <lv_draw_label+0x6ee>
  40d4ee:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
  40d4f2:	3101      	adds	r1, #1
  40d4f4:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
  40d4f8:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
  40d4fa:	b209      	sxth	r1, r1
  40d4fc:	4628      	mov	r0, r5
  40d4fe:	4bad      	ldr	r3, [pc, #692]	; (40d7b4 <lv_draw_label+0xa30>)
  40d500:	4798      	blx	r3
  40d502:	e7b6      	b.n	40d472 <lv_draw_label+0x6ee>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40d504:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d506:	9302      	str	r3, [sp, #8]
  40d508:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40d50a:	9301      	str	r3, [sp, #4]
  40d50c:	2302      	movs	r3, #2
  40d50e:	9300      	str	r3, [sp, #0]
  40d510:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d512:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40d514:	a938      	add	r1, sp, #224	; 0xe0
  40d516:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40d518:	4da7      	ldr	r5, [pc, #668]	; (40d7b8 <lv_draw_label+0xa34>)
  40d51a:	47a8      	blx	r5
            map_area.y1 = map_area.y2 + 1;
  40d51c:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
  40d520:	3301      	adds	r3, #1
  40d522:	b21b      	sxth	r3, r3
  40d524:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            map_area.y2 = map_area.y1;
  40d528:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
            mask_p = 0;
  40d52c:	2300      	movs	r3, #0
  40d52e:	9329      	str	r3, [sp, #164]	; 0xa4
  40d530:	e7ab      	b.n	40d48a <lv_draw_label+0x706>
  40d532:	f8dd a0c8 	ldr.w	sl, [sp, #200]	; 0xc8
  40d536:	9d33      	ldr	r5, [sp, #204]	; 0xcc
  40d538:	f8dd b0d0 	ldr.w	fp, [sp, #208]	; 0xd0
  40d53c:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
    if(map_area.y1 != map_area.y2) {
  40d540:	f9bd 30e6 	ldrsh.w	r3, [sp, #230]	; 0xe6
  40d544:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
  40d548:	429a      	cmp	r2, r3
  40d54a:	d00e      	beq.n	40d56a <lv_draw_label+0x7e6>
        map_area.y2--;
  40d54c:	3b01      	subs	r3, #1
  40d54e:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40d552:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d554:	9302      	str	r3, [sp, #8]
  40d556:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40d558:	9301      	str	r3, [sp, #4]
  40d55a:	2302      	movs	r3, #2
  40d55c:	9300      	str	r3, [sp, #0]
  40d55e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d560:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40d562:	a938      	add	r1, sp, #224	; 0xe0
  40d564:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40d566:	4c94      	ldr	r4, [pc, #592]	; (40d7b8 <lv_draw_label+0xa34>)
  40d568:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40d56a:	9822      	ldr	r0, [sp, #136]	; 0x88
  40d56c:	4c93      	ldr	r4, [pc, #588]	; (40d7bc <lv_draw_label+0xa38>)
  40d56e:	47a0      	blx	r4
    _lv_mem_buf_release(color_buf);
  40d570:	981e      	ldr	r0, [sp, #120]	; 0x78
  40d572:	47a0      	blx	r4
            if(letter_w > 0) {
  40d574:	2d00      	cmp	r5, #0
  40d576:	dd05      	ble.n	40d584 <lv_draw_label+0x800>
                pos.x += letter_w + dsc->letter_space;
  40d578:	f8b8 3010 	ldrh.w	r3, [r8, #16]
  40d57c:	445b      	add	r3, fp
  40d57e:	442b      	add	r3, r5
  40d580:	fa0f fb83 	sxth.w	fp, r3
        while(i < line_end - line_start) {
  40d584:	9952      	ldr	r1, [sp, #328]	; 0x148
  40d586:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d588:	eba3 030a 	sub.w	r3, r3, sl
  40d58c:	428b      	cmp	r3, r1
  40d58e:	f240 8285 	bls.w	40da9c <lv_draw_label+0xd18>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40d592:	f64f 74ff 	movw	r4, #65535	; 0xffff
  40d596:	9b08      	ldr	r3, [sp, #32]
  40d598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d59a:	42a3      	cmp	r3, r4
  40d59c:	bf18      	it	ne
  40d59e:	42a2      	cmpne	r2, r4
  40d5a0:	bf14      	ite	ne
  40d5a2:	2401      	movne	r4, #1
  40d5a4:	2400      	moveq	r4, #0
  40d5a6:	f47f ad33 	bne.w	40d010 <lv_draw_label+0x28c>
            uint32_t logical_char_pos = 0;
  40d5aa:	2700      	movs	r7, #0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
  40d5ac:	f8d9 3000 	ldr.w	r3, [r9]
  40d5b0:	a952      	add	r1, sp, #328	; 0x148
  40d5b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40d5b4:	4628      	mov	r0, r5
  40d5b6:	4798      	blx	r3
  40d5b8:	4606      	mov	r6, r0
  40d5ba:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  40d5bc:	f8d9 3000 	ldr.w	r3, [r9]
  40d5c0:	2100      	movs	r1, #0
  40d5c2:	9852      	ldr	r0, [sp, #328]	; 0x148
  40d5c4:	4428      	add	r0, r5
  40d5c6:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
  40d5c8:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
  40d5cc:	f013 0f01 	tst.w	r3, #1
  40d5d0:	d006      	beq.n	40d5e0 <lv_draw_label+0x85c>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  40d5d2:	2e23      	cmp	r6, #35	; 0x23
  40d5d4:	f43f ad23 	beq.w	40d01e <lv_draw_label+0x29a>
                if(cmd_state == CMD_STATE_PAR) {
  40d5d8:	9b07      	ldr	r3, [sp, #28]
  40d5da:	2b01      	cmp	r3, #1
  40d5dc:	f43f ad40 	beq.w	40d060 <lv_draw_label+0x2dc>
            lv_color_t color = dsc->color;
  40d5e0:	f8b8 6000 	ldrh.w	r6, [r8]
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40d5e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d5e6:	9a07      	ldr	r2, [sp, #28]
  40d5e8:	2a02      	cmp	r2, #2
  40d5ea:	bf08      	it	eq
  40d5ec:	461e      	moveq	r6, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  40d5ee:	4602      	mov	r2, r0
  40d5f0:	9905      	ldr	r1, [sp, #20]
  40d5f2:	9806      	ldr	r0, [sp, #24]
  40d5f4:	4b72      	ldr	r3, [pc, #456]	; (40d7c0 <lv_draw_label+0xa3c>)
  40d5f6:	4798      	blx	r3
  40d5f8:	4605      	mov	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40d5fa:	b134      	cbz	r4, 40d60a <lv_draw_label+0x886>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
  40d5fc:	9b08      	ldr	r3, [sp, #32]
  40d5fe:	42bb      	cmp	r3, r7
  40d600:	d803      	bhi.n	40d60a <lv_draw_label+0x886>
  40d602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d604:	42bb      	cmp	r3, r7
  40d606:	f63f ad7b 	bhi.w	40d100 <lv_draw_label+0x37c>
    if(opa < LV_OPA_MIN) return;
  40d60a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d60c:	2b01      	cmp	r3, #1
  40d60e:	d9b1      	bls.n	40d574 <lv_draw_label+0x7f0>
    if(font_p == NULL) {
  40d610:	9806      	ldr	r0, [sp, #24]
  40d612:	2800      	cmp	r0, #0
  40d614:	d0ae      	beq.n	40d574 <lv_draw_label+0x7f0>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
  40d616:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
  40d61a:	9310      	str	r3, [sp, #64]	; 0x40
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
  40d61c:	2300      	movs	r3, #0
  40d61e:	9a05      	ldr	r2, [sp, #20]
  40d620:	a93a      	add	r1, sp, #232	; 0xe8
  40d622:	4c68      	ldr	r4, [pc, #416]	; (40d7c4 <lv_draw_label+0xa40>)
  40d624:	47a0      	blx	r4
    if(g_ret == false)  {
  40d626:	2800      	cmp	r0, #0
  40d628:	d0a4      	beq.n	40d574 <lv_draw_label+0x7f0>
    if((g.box_h == 0) || (g.box_w == 0)) return;
  40d62a:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40d62e:	2b00      	cmp	r3, #0
  40d630:	d0a0      	beq.n	40d574 <lv_draw_label+0x7f0>
  40d632:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40d636:	2a00      	cmp	r2, #0
  40d638:	d09c      	beq.n	40d574 <lv_draw_label+0x7f0>
    int32_t pos_x = pos_p->x + g.ofs_x;
  40d63a:	f9bd 70ee 	ldrsh.w	r7, [sp, #238]	; 0xee
  40d63e:	445f      	add	r7, fp
    if(pos_x + g.box_w < clip_area->x1 ||
  40d640:	443a      	add	r2, r7
  40d642:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40d644:	f9b4 1000 	ldrsh.w	r1, [r4]
  40d648:	428a      	cmp	r2, r1
  40d64a:	db93      	blt.n	40d574 <lv_draw_label+0x7f0>
       pos_x > clip_area->x2 ||
  40d64c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
  40d650:	4297      	cmp	r7, r2
  40d652:	dc8f      	bgt.n	40d574 <lv_draw_label+0x7f0>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
  40d654:	9806      	ldr	r0, [sp, #24]
  40d656:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
  40d65a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  40d65e:	1a8a      	subs	r2, r1, r2
  40d660:	9911      	ldr	r1, [sp, #68]	; 0x44
  40d662:	440a      	add	r2, r1
  40d664:	1ad1      	subs	r1, r2, r3
  40d666:	f9bd 20f0 	ldrsh.w	r2, [sp, #240]	; 0xf0
  40d66a:	1a8a      	subs	r2, r1, r2
       pos_y + g.box_h < clip_area->y1 ||
  40d66c:	9218      	str	r2, [sp, #96]	; 0x60
  40d66e:	4611      	mov	r1, r2
  40d670:	4413      	add	r3, r2
  40d672:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
       pos_x > clip_area->x2 ||
  40d676:	4293      	cmp	r3, r2
  40d678:	f6ff af7c 	blt.w	40d574 <lv_draw_label+0x7f0>
       pos_y > clip_area->y2)  {
  40d67c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
       pos_y + g.box_h < clip_area->y1 ||
  40d680:	4299      	cmp	r1, r3
  40d682:	f73f af77 	bgt.w	40d574 <lv_draw_label+0x7f0>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
  40d686:	9905      	ldr	r1, [sp, #20]
  40d688:	9c06      	ldr	r4, [sp, #24]
  40d68a:	4620      	mov	r0, r4
  40d68c:	4b4e      	ldr	r3, [pc, #312]	; (40d7c8 <lv_draw_label+0xa44>)
  40d68e:	4798      	blx	r3
    if(map_p == NULL) {
  40d690:	4684      	mov	ip, r0
  40d692:	2800      	cmp	r0, #0
  40d694:	f43f af6e 	beq.w	40d574 <lv_draw_label+0x7f0>
    if(font_p->subpx) {
  40d698:	7b23      	ldrb	r3, [r4, #12]
  40d69a:	f013 0f03 	tst.w	r3, #3
  40d69e:	d02d      	beq.n	40d6fc <lv_draw_label+0x978>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40d6a0:	b23b      	sxth	r3, r7
  40d6a2:	9305      	str	r3, [sp, #20]
  40d6a4:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  40d6a8:	931c      	str	r3, [sp, #112]	; 0x70
  40d6aa:	f006 0307 	and.w	r3, r6, #7
  40d6ae:	9329      	str	r3, [sp, #164]	; 0xa4
  40d6b0:	f3c6 03c4 	ubfx	r3, r6, #3, #5
  40d6b4:	9325      	str	r3, [sp, #148]	; 0x94
  40d6b6:	f3c6 2304 	ubfx	r3, r6, #8, #5
  40d6ba:	9324      	str	r3, [sp, #144]	; 0x90
  40d6bc:	f3c6 3342 	ubfx	r3, r6, #13, #3
  40d6c0:	9323      	str	r3, [sp, #140]	; 0x8c
    uint32_t bpp = g->bpp;
  40d6c2:	f89d 30f2 	ldrb.w	r3, [sp, #242]	; 0xf2
  40d6c6:	932a      	str	r3, [sp, #168]	; 0xa8
    if(bpp == 3) bpp = 4;
  40d6c8:	2b03      	cmp	r3, #3
  40d6ca:	f43f adf7 	beq.w	40d2bc <lv_draw_label+0x538>
    switch(bpp) {
  40d6ce:	3b01      	subs	r3, #1
  40d6d0:	2b07      	cmp	r3, #7
  40d6d2:	f63f af4f 	bhi.w	40d574 <lv_draw_label+0x7f0>
  40d6d6:	a201      	add	r2, pc, #4	; (adr r2, 40d6dc <lv_draw_label+0x958>)
  40d6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40d6dc:	0040d2d9 	.word	0x0040d2d9
  40d6e0:	0040d133 	.word	0x0040d133
  40d6e4:	0040d575 	.word	0x0040d575
  40d6e8:	0040d2c1 	.word	0x0040d2c1
  40d6ec:	0040d575 	.word	0x0040d575
  40d6f0:	0040d575 	.word	0x0040d575
  40d6f4:	0040d575 	.word	0x0040d575
  40d6f8:	0040d2cb 	.word	0x0040d2cb
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40d6fc:	fa0f fe87 	sxth.w	lr, r7
  40d700:	f9bd 4060 	ldrsh.w	r4, [sp, #96]	; 0x60
  40d704:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
    uint32_t bpp = g->bpp;
  40d708:	f89d 30f2 	ldrb.w	r3, [sp, #242]	; 0xf2
  40d70c:	931e      	str	r3, [sp, #120]	; 0x78
    if(bpp == 3) bpp = 4;
  40d70e:	2b03      	cmp	r3, #3
  40d710:	d02f      	beq.n	40d772 <lv_draw_label+0x9ee>
    switch(bpp) {
  40d712:	3b01      	subs	r3, #1
  40d714:	2b07      	cmp	r3, #7
  40d716:	f63f af2d 	bhi.w	40d574 <lv_draw_label+0x7f0>
  40d71a:	a201      	add	r2, pc, #4	; (adr r2, 40d720 <lv_draw_label+0x99c>)
  40d71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40d720:	0040d795 	.word	0x0040d795
  40d724:	0040d741 	.word	0x0040d741
  40d728:	0040d575 	.word	0x0040d575
  40d72c:	0040d777 	.word	0x0040d777
  40d730:	0040d575 	.word	0x0040d575
  40d734:	0040d575 	.word	0x0040d575
  40d738:	0040d575 	.word	0x0040d575
  40d73c:	0040d783 	.word	0x0040d783
            shades = 4;
  40d740:	2304      	movs	r3, #4
            bitmask_init  = 0xC0;
  40d742:	22c0      	movs	r2, #192	; 0xc0
  40d744:	9205      	str	r2, [sp, #20]
            bpp_opa_table_p = _lv_bpp2_opa_table;
  40d746:	4a21      	ldr	r2, [pc, #132]	; (40d7cc <lv_draw_label+0xa48>)
  40d748:	9220      	str	r2, [sp, #128]	; 0x80
    if(opa < LV_OPA_MAX) {
  40d74a:	991b      	ldr	r1, [sp, #108]	; 0x6c
  40d74c:	29fc      	cmp	r1, #252	; 0xfc
  40d74e:	d864      	bhi.n	40d81a <lv_draw_label+0xa96>
        if(prev_opa != opa || prev_bpp != bpp) {
  40d750:	4a1f      	ldr	r2, [pc, #124]	; (40d7d0 <lv_draw_label+0xa4c>)
  40d752:	7812      	ldrb	r2, [r2, #0]
  40d754:	428a      	cmp	r2, r1
  40d756:	d025      	beq.n	40d7a4 <lv_draw_label+0xa20>
            for(i = 0; i < shades; i++) {
  40d758:	2b00      	cmp	r3, #0
  40d75a:	d055      	beq.n	40d808 <lv_draw_label+0xa84>
  40d75c:	9820      	ldr	r0, [sp, #128]	; 0x80
  40d75e:	1e42      	subs	r2, r0, #1
  40d760:	491c      	ldr	r1, [pc, #112]	; (40d7d4 <lv_draw_label+0xa50>)
  40d762:	3b01      	subs	r3, #1
  40d764:	4418      	add	r0, r3
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40d766:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40d768:	461e      	mov	r6, r3
  40d76a:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  40d76e:	469a      	mov	sl, r3
  40d770:	e03f      	b.n	40d7f2 <lv_draw_label+0xa6e>
    if(bpp == 3) bpp = 4;
  40d772:	2304      	movs	r3, #4
  40d774:	931e      	str	r3, [sp, #120]	; 0x78
            shades = 16;
  40d776:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
  40d778:	22f0      	movs	r2, #240	; 0xf0
  40d77a:	9205      	str	r2, [sp, #20]
            bpp_opa_table_p = _lv_bpp4_opa_table;
  40d77c:	4a16      	ldr	r2, [pc, #88]	; (40d7d8 <lv_draw_label+0xa54>)
  40d77e:	9220      	str	r2, [sp, #128]	; 0x80
  40d780:	e7e3      	b.n	40d74a <lv_draw_label+0x9c6>
    uint32_t bpp = g->bpp;
  40d782:	2308      	movs	r3, #8
  40d784:	931e      	str	r3, [sp, #120]	; 0x78
            shades = 256;
  40d786:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
  40d78a:	22ff      	movs	r2, #255	; 0xff
  40d78c:	9205      	str	r2, [sp, #20]
            bpp_opa_table_p = _lv_bpp8_opa_table;
  40d78e:	4a13      	ldr	r2, [pc, #76]	; (40d7dc <lv_draw_label+0xa58>)
  40d790:	9220      	str	r2, [sp, #128]	; 0x80
  40d792:	e7da      	b.n	40d74a <lv_draw_label+0x9c6>
    uint32_t bpp = g->bpp;
  40d794:	2301      	movs	r3, #1
  40d796:	931e      	str	r3, [sp, #120]	; 0x78
            shades = 2;
  40d798:	2302      	movs	r3, #2
            bitmask_init  = 0x80;
  40d79a:	2280      	movs	r2, #128	; 0x80
  40d79c:	9205      	str	r2, [sp, #20]
            bpp_opa_table_p = _lv_bpp1_opa_table;
  40d79e:	4a10      	ldr	r2, [pc, #64]	; (40d7e0 <lv_draw_label+0xa5c>)
  40d7a0:	9220      	str	r2, [sp, #128]	; 0x80
  40d7a2:	e7d2      	b.n	40d74a <lv_draw_label+0x9c6>
        if(prev_opa != opa || prev_bpp != bpp) {
  40d7a4:	4a0f      	ldr	r2, [pc, #60]	; (40d7e4 <lv_draw_label+0xa60>)
  40d7a6:	6812      	ldr	r2, [r2, #0]
  40d7a8:	991e      	ldr	r1, [sp, #120]	; 0x78
  40d7aa:	428a      	cmp	r2, r1
  40d7ac:	d1d4      	bne.n	40d758 <lv_draw_label+0x9d4>
  40d7ae:	e02b      	b.n	40d808 <lv_draw_label+0xa84>
  40d7b0:	0040f121 	.word	0x0040f121
  40d7b4:	00415ead 	.word	0x00415ead
  40d7b8:	0040b5d9 	.word	0x0040b5d9
  40d7bc:	0041595d 	.word	0x0041595d
  40d7c0:	00412f7d 	.word	0x00412f7d
  40d7c4:	00412f75 	.word	0x00412f75
  40d7c8:	00412f6d 	.word	0x00412f6d
  40d7cc:	00425a9c 	.word	0x00425a9c
  40d7d0:	2040c6dc 	.word	0x2040c6dc
  40d7d4:	2040c5d7 	.word	0x2040c5d7
  40d7d8:	00425aa0 	.word	0x00425aa0
  40d7dc:	00425ab0 	.word	0x00425ab0
  40d7e0:	00425a98 	.word	0x00425a98
  40d7e4:	2040c6d8 	.word	0x2040c6d8
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40d7e8:	4633      	mov	r3, r6
  40d7ea:	f801 3f01 	strb.w	r3, [r1, #1]!
            for(i = 0; i < shades; i++) {
  40d7ee:	4290      	cmp	r0, r2
  40d7f0:	d008      	beq.n	40d804 <lv_draw_label+0xa80>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40d7f2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40d7f6:	2bff      	cmp	r3, #255	; 0xff
  40d7f8:	d0f6      	beq.n	40d7e8 <lv_draw_label+0xa64>
  40d7fa:	fb0a f303 	mul.w	r3, sl, r3
  40d7fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40d802:	e7f2      	b.n	40d7ea <lv_draw_label+0xa66>
  40d804:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
        prev_opa = opa;
  40d808:	4b99      	ldr	r3, [pc, #612]	; (40da70 <lv_draw_label+0xcec>)
  40d80a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
  40d80e:	701a      	strb	r2, [r3, #0]
        prev_bpp = bpp;
  40d810:	4b98      	ldr	r3, [pc, #608]	; (40da74 <lv_draw_label+0xcf0>)
  40d812:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40d814:	601a      	str	r2, [r3, #0]
        bpp_opa_table_p = opa_table;
  40d816:	4b98      	ldr	r3, [pc, #608]	; (40da78 <lv_draw_label+0xcf4>)
  40d818:	9320      	str	r3, [sp, #128]	; 0x80
    int32_t box_w = g->box_w;
  40d81a:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40d81e:	9324      	str	r3, [sp, #144]	; 0x90
    int32_t box_h = g->box_h;
  40d820:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40d824:	921c      	str	r2, [sp, #112]	; 0x70
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40d826:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40d828:	fb02 f303 	mul.w	r3, r2, r3
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40d82c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d82e:	f9b2 2000 	ldrsh.w	r2, [r2]
  40d832:	4596      	cmp	lr, r2
  40d834:	bfb4      	ite	lt
  40d836:	eba2 020e 	sublt.w	r2, r2, lr
  40d83a:	2200      	movge	r2, #0
  40d83c:	921a      	str	r2, [sp, #104]	; 0x68
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40d83e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d840:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
  40d844:	9924      	ldr	r1, [sp, #144]	; 0x90
  40d846:	4471      	add	r1, lr
  40d848:	4291      	cmp	r1, r2
  40d84a:	dd66      	ble.n	40d91a <lv_draw_label+0xb96>
  40d84c:	eba2 020e 	sub.w	r2, r2, lr
  40d850:	3201      	adds	r2, #1
  40d852:	921d      	str	r2, [sp, #116]	; 0x74
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d854:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d856:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  40d85a:	4294      	cmp	r4, r2
  40d85c:	bfb4      	ite	lt
  40d85e:	1b12      	sublt	r2, r2, r4
  40d860:	2200      	movge	r2, #0
  40d862:	9225      	str	r2, [sp, #148]	; 0x94
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d864:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d866:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  40d86a:	991c      	ldr	r1, [sp, #112]	; 0x70
  40d86c:	4421      	add	r1, r4
  40d86e:	4291      	cmp	r1, r2
  40d870:	dd56      	ble.n	40d920 <lv_draw_label+0xb9c>
  40d872:	1b12      	subs	r2, r2, r4
  40d874:	3201      	adds	r2, #1
  40d876:	921f      	str	r2, [sp, #124]	; 0x7c
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40d878:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40d87a:	9221      	str	r2, [sp, #132]	; 0x84
  40d87c:	991e      	ldr	r1, [sp, #120]	; 0x78
  40d87e:	fb01 f402 	mul.w	r4, r1, r2
  40d882:	9825      	ldr	r0, [sp, #148]	; 0x94
  40d884:	fb00 4403 	mla	r4, r0, r3, r4
    map_p += bit_ofs >> 3;
  40d888:	eb0c 06d4 	add.w	r6, ip, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40d88c:	f004 0407 	and.w	r4, r4, #7
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
  40d890:	4b7a      	ldr	r3, [pc, #488]	; (40da7c <lv_draw_label+0xcf8>)
  40d892:	4798      	blx	r3
  40d894:	4b7a      	ldr	r3, [pc, #488]	; (40da80 <lv_draw_label+0xcfc>)
  40d896:	4798      	blx	r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
  40d898:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40d89a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40d89c:	fb03 f301 	mul.w	r3, r3, r1
  40d8a0:	469e      	mov	lr, r3
  40d8a2:	4283      	cmp	r3, r0
  40d8a4:	bfa8      	it	ge
  40d8a6:	4686      	movge	lr, r0
  40d8a8:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40d8ac:	4670      	mov	r0, lr
  40d8ae:	4b75      	ldr	r3, [pc, #468]	; (40da84 <lv_draw_label+0xd00>)
  40d8b0:	4798      	blx	r3
  40d8b2:	901c      	str	r0, [sp, #112]	; 0x70
    fill_area.x1 = col_start + pos_x;
  40d8b4:	b2bf      	uxth	r7, r7
  40d8b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40d8b8:	18bb      	adds	r3, r7, r2
  40d8ba:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    fill_area.x2 = col_end  + pos_x - 1;
  40d8be:	3f01      	subs	r7, #1
  40d8c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40d8c2:	18fb      	adds	r3, r7, r3
  40d8c4:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
    fill_area.y1 = row_start + pos_y;
  40d8c8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40d8ca:	9825      	ldr	r0, [sp, #148]	; 0x94
  40d8cc:	4407      	add	r7, r0
  40d8ce:	b23b      	sxth	r3, r7
  40d8d0:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    fill_area.y2 = fill_area.y1;
  40d8d4:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40d8d8:	4b6b      	ldr	r3, [pc, #428]	; (40da88 <lv_draw_label+0xd04>)
  40d8da:	4798      	blx	r3
  40d8dc:	9023      	str	r0, [sp, #140]	; 0x8c
    uint32_t col_bit_max = 8 - bpp;
  40d8de:	991e      	ldr	r1, [sp, #120]	; 0x78
  40d8e0:	f1c1 0708 	rsb	r7, r1, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
  40d8e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d8e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40d8e8:	4413      	add	r3, r2
  40d8ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40d8ec:	1a9b      	subs	r3, r3, r2
  40d8ee:	fb01 f203 	mul.w	r2, r1, r3
  40d8f2:	921e      	str	r2, [sp, #120]	; 0x78
    for(row = row_start ; row < row_end; row++) {
  40d8f4:	9825      	ldr	r0, [sp, #148]	; 0x94
  40d8f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40d8f8:	4290      	cmp	r0, r2
  40d8fa:	f280 809c 	bge.w	40da36 <lv_draw_label+0xcb2>
  40d8fe:	f04f 0e00 	mov.w	lr, #0
                mask_buf[mask_p] = 0;
  40d902:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
  40d906:	9525      	str	r5, [sp, #148]	; 0x94
  40d908:	9118      	str	r1, [sp, #96]	; 0x60
  40d90a:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
  40d90e:	4682      	mov	sl, r0
  40d910:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8
  40d914:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
  40d918:	e03a      	b.n	40d990 <lv_draw_label+0xc0c>
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40d91a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40d91c:	921d      	str	r2, [sp, #116]	; 0x74
  40d91e:	e799      	b.n	40d854 <lv_draw_label+0xad0>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d920:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  40d922:	921f      	str	r2, [sp, #124]	; 0x7c
  40d924:	e7a8      	b.n	40d878 <lv_draw_label+0xaf4>
                mask_buf[mask_p] = 0;
  40d926:	f04f 0300 	mov.w	r3, #0
  40d92a:	700b      	strb	r3, [r1, #0]
  40d92c:	e010      	b.n	40d950 <lv_draw_label+0xbcc>
                map_p++;
  40d92e:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40d930:	9805      	ldr	r0, [sp, #20]
                col_bit = 0;
  40d932:	2400      	movs	r4, #0
  40d934:	3101      	adds	r1, #1
        for(col = col_start; col < col_end; col++) {
  40d936:	458c      	cmp	ip, r1
  40d938:	d00f      	beq.n	40d95a <lv_draw_label+0xbd6>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
  40d93a:	7833      	ldrb	r3, [r6, #0]
  40d93c:	4003      	ands	r3, r0
  40d93e:	1b3a      	subs	r2, r7, r4
  40d940:	40d3      	lsrs	r3, r2
            if(letter_px) {
  40d942:	f013 0fff 	tst.w	r3, #255	; 0xff
  40d946:	d0ee      	beq.n	40d926 <lv_draw_label+0xba2>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
  40d948:	b2db      	uxtb	r3, r3
  40d94a:	f818 3003 	ldrb.w	r3, [r8, r3]
  40d94e:	700b      	strb	r3, [r1, #0]
            if(col_bit < col_bit_max) {
  40d950:	42a7      	cmp	r7, r4
  40d952:	d9ec      	bls.n	40d92e <lv_draw_label+0xbaa>
                col_bit += bpp;
  40d954:	442c      	add	r4, r5
                bitmask = bitmask >> bpp;
  40d956:	40e8      	lsrs	r0, r5
  40d958:	e7ec      	b.n	40d934 <lv_draw_label+0xbb0>
  40d95a:	9518      	str	r5, [sp, #96]	; 0x60
        if(other_mask_cnt) {
  40d95c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40d95e:	bb73      	cbnz	r3, 40d9be <lv_draw_label+0xc3a>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40d960:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40d962:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40d964:	1a9b      	subs	r3, r3, r2
  40d966:	445b      	add	r3, fp
  40d968:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d96a:	429a      	cmp	r2, r3
  40d96c:	d943      	bls.n	40d9f6 <lv_draw_label+0xc72>
            fill_area.y2 ++;
  40d96e:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
  40d972:	3301      	adds	r3, #1
  40d974:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
  40d978:	46de      	mov	lr, fp
        col_bit += col_bit_row_ofs;
  40d97a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40d97c:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
  40d97e:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
        col_bit = col_bit & 0x7;
  40d982:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
  40d986:	f10a 0a01 	add.w	sl, sl, #1
  40d98a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40d98c:	459a      	cmp	sl, r3
  40d98e:	da4b      	bge.n	40da28 <lv_draw_label+0xca4>
        bitmask = bitmask_init >> col_bit;
  40d990:	9b05      	ldr	r3, [sp, #20]
  40d992:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
  40d996:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40d998:	4619      	mov	r1, r3
  40d99a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40d99c:	4291      	cmp	r1, r2
  40d99e:	da0c      	bge.n	40d9ba <lv_draw_label+0xc36>
  40d9a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40d9a2:	eb03 010e 	add.w	r1, r3, lr
  40d9a6:	4613      	mov	r3, r2
  40d9a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
  40d9aa:	eba3 0b02 	sub.w	fp, r3, r2
  40d9ae:	44f3      	add	fp, lr
  40d9b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40d9b2:	eb03 0c0b 	add.w	ip, r3, fp
  40d9b6:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40d9b8:	e7bf      	b.n	40d93a <lv_draw_label+0xbb6>
  40d9ba:	46f3      	mov	fp, lr
  40d9bc:	e7ce      	b.n	40d95c <lv_draw_label+0xbd8>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
  40d9be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40d9c0:	4473      	add	r3, lr
  40d9c2:	4618      	mov	r0, r3
  40d9c4:	9320      	str	r3, [sp, #128]	; 0x80
  40d9c6:	f9bd 10e0 	ldrsh.w	r1, [sp, #224]	; 0xe0
  40d9ca:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
  40d9ce:	3301      	adds	r3, #1
  40d9d0:	1a5b      	subs	r3, r3, r1
  40d9d2:	b21b      	sxth	r3, r3
  40d9d4:	f9bd 20e6 	ldrsh.w	r2, [sp, #230]	; 0xe6
  40d9d8:	4d2c      	ldr	r5, [pc, #176]	; (40da8c <lv_draw_label+0xd08>)
  40d9da:	47a8      	blx	r5
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40d9dc:	2800      	cmp	r0, #0
  40d9de:	d1bf      	bne.n	40d960 <lv_draw_label+0xbdc>
  40d9e0:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
  40d9e4:	3101      	adds	r1, #1
  40d9e6:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
  40d9ea:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
  40d9ec:	b209      	sxth	r1, r1
  40d9ee:	9820      	ldr	r0, [sp, #128]	; 0x80
  40d9f0:	4b27      	ldr	r3, [pc, #156]	; (40da90 <lv_draw_label+0xd0c>)
  40d9f2:	4798      	blx	r3
  40d9f4:	e7b4      	b.n	40d960 <lv_draw_label+0xbdc>
            _lv_blend_fill(clip_area, &fill_area,
  40d9f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d9f8:	9302      	str	r3, [sp, #8]
  40d9fa:	23ff      	movs	r3, #255	; 0xff
  40d9fc:	9301      	str	r3, [sp, #4]
  40d9fe:	2302      	movs	r3, #2
  40da00:	9300      	str	r3, [sp, #0]
  40da02:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40da04:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
  40da08:	a938      	add	r1, sp, #224	; 0xe0
  40da0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40da0c:	f8df b084 	ldr.w	fp, [pc, #132]	; 40da94 <lv_draw_label+0xd10>
  40da10:	47d8      	blx	fp
            fill_area.y1 = fill_area.y2 + 1;
  40da12:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
  40da16:	3301      	adds	r3, #1
  40da18:	b21b      	sxth	r3, r3
  40da1a:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            fill_area.y2 = fill_area.y1;
  40da1e:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
            mask_p = 0;
  40da22:	f04f 0e00 	mov.w	lr, #0
  40da26:	e7a8      	b.n	40d97a <lv_draw_label+0xbf6>
  40da28:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
  40da2c:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40da2e:	f8dd b0a4 	ldr.w	fp, [sp, #164]	; 0xa4
  40da32:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
    if(fill_area.y1 != fill_area.y2) {
  40da36:	f9bd 30e6 	ldrsh.w	r3, [sp, #230]	; 0xe6
  40da3a:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
  40da3e:	429a      	cmp	r2, r3
  40da40:	d00f      	beq.n	40da62 <lv_draw_label+0xcde>
        fill_area.y2--;
  40da42:	3b01      	subs	r3, #1
  40da44:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
        _lv_blend_fill(clip_area, &fill_area,
  40da48:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40da4a:	9302      	str	r3, [sp, #8]
  40da4c:	23ff      	movs	r3, #255	; 0xff
  40da4e:	9301      	str	r3, [sp, #4]
  40da50:	2302      	movs	r3, #2
  40da52:	9300      	str	r3, [sp, #0]
  40da54:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40da56:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
  40da5a:	a938      	add	r1, sp, #224	; 0xe0
  40da5c:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40da5e:	4c0d      	ldr	r4, [pc, #52]	; (40da94 <lv_draw_label+0xd10>)
  40da60:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40da62:	981c      	ldr	r0, [sp, #112]	; 0x70
  40da64:	4b0c      	ldr	r3, [pc, #48]	; (40da98 <lv_draw_label+0xd14>)
  40da66:	4798      	blx	r3
  40da68:	e584      	b.n	40d574 <lv_draw_label+0x7f0>
                        cmd_state = CMD_STATE_WAIT;
  40da6a:	2300      	movs	r3, #0
  40da6c:	9307      	str	r3, [sp, #28]
  40da6e:	e589      	b.n	40d584 <lv_draw_label+0x800>
  40da70:	2040c6dc 	.word	0x2040c6dc
  40da74:	2040c6d8 	.word	0x2040c6d8
  40da78:	2040c5d8 	.word	0x2040c5d8
  40da7c:	00408f81 	.word	0x00408f81
  40da80:	004140ad 	.word	0x004140ad
  40da84:	00415cd9 	.word	0x00415cd9
  40da88:	0040f1c9 	.word	0x0040f1c9
  40da8c:	0040f121 	.word	0x0040f121
  40da90:	00415ead 	.word	0x00415ead
  40da94:	0040a9e9 	.word	0x0040a9e9
  40da98:	0041595d 	.word	0x0041595d
  40da9c:	465f      	mov	r7, fp
  40da9e:	46c2      	mov	sl, r8
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
  40daa0:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
  40daa4:	f013 0f02 	tst.w	r3, #2
  40daa8:	d142      	bne.n	40db30 <lv_draw_label+0xdac>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
  40daaa:	f89a 3022 	ldrb.w	r3, [sl, #34]	; 0x22
  40daae:	f013 0f01 	tst.w	r3, #1
  40dab2:	d160      	bne.n	40db76 <lv_draw_label+0xdf2>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40dab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40dab6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40dab8:	1956      	adds	r6, r2, r5
  40daba:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
  40dabe:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
  40dac2:	9300      	str	r3, [sp, #0]
  40dac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40dac6:	9906      	ldr	r1, [sp, #24]
  40dac8:	4630      	mov	r0, r6
  40daca:	4c4f      	ldr	r4, [pc, #316]	; (40dc08 <lv_draw_label+0xe84>)
  40dacc:	47a0      	blx	r4
  40dace:	182c      	adds	r4, r5, r0
        pos.x = coords->x1;
  40dad0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40dad2:	f9b3 5000 	ldrsh.w	r5, [r3]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40dad6:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
  40dada:	f012 0f04 	tst.w	r2, #4
  40dade:	d167      	bne.n	40dbb0 <lv_draw_label+0xe2c>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40dae0:	f012 0f08 	tst.w	r2, #8
  40dae4:	d179      	bne.n	40dbda <lv_draw_label+0xe56>
  40dae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40dae8:	9915      	ldr	r1, [sp, #84]	; 0x54
  40daea:	440b      	add	r3, r1
  40daec:	b21b      	sxth	r3, r3
  40daee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40daf0:	440a      	add	r2, r1
  40daf2:	b292      	uxth	r2, r2
  40daf4:	9213      	str	r2, [sp, #76]	; 0x4c
        line_start = line_end;
  40daf6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
        pos.y += line_height;
  40dafa:	9311      	str	r3, [sp, #68]	; 0x44
        if(pos.y > mask->y2) return;
  40dafc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40dafe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  40db02:	429a      	cmp	r2, r3
  40db04:	f6ff a946 	blt.w	40cd94 <lv_draw_label+0x10>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40db08:	9409      	str	r4, [sp, #36]	; 0x24
    while(txt[line_start] != '\0') {
  40db0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40db0c:	4613      	mov	r3, r2
  40db0e:	445b      	add	r3, fp
  40db10:	930b      	str	r3, [sp, #44]	; 0x2c
  40db12:	f812 300b 	ldrb.w	r3, [r2, fp]
  40db16:	2b00      	cmp	r3, #0
  40db18:	f43f a93c 	beq.w	40cd94 <lv_draw_label+0x10>
        pos.x += x_ofs;
  40db1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40db1e:	441d      	add	r5, r3
  40db20:	b22f      	sxth	r7, r5
        i         = 0;
  40db22:	2300      	movs	r3, #0
  40db24:	9352      	str	r3, [sp, #328]	; 0x148
        cmd_state = CMD_STATE_WAIT;
  40db26:	9307      	str	r3, [sp, #28]
  40db28:	46d0      	mov	r8, sl
  40db2a:	46da      	mov	sl, fp
  40db2c:	46bb      	mov	fp, r7
        while(i < line_end - line_start) {
  40db2e:	e529      	b.n	40d584 <lv_draw_label+0x800>
            p1.x = pos_x_start;
  40db30:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  40db34:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40db38:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40db3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  40db40:	2b00      	cmp	r3, #0
  40db42:	bfb8      	it	lt
  40db44:	3301      	addlt	r3, #1
  40db46:	105b      	asrs	r3, r3, #1
  40db48:	f9bd 214e 	ldrsh.w	r2, [sp, #334]	; 0x14e
  40db4c:	2a00      	cmp	r2, #0
  40db4e:	bfb8      	it	lt
  40db50:	3201      	addlt	r2, #1
  40db52:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40db56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40db58:	4413      	add	r3, r2
  40db5a:	b21b      	sxth	r3, r3
  40db5c:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            p2.x = pos.x;
  40db60:	f8ad b0e8 	strh.w	fp, [sp, #232]	; 0xe8
            p2.y = p1.y;
  40db64:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40db68:	ab53      	add	r3, sp, #332	; 0x14c
  40db6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40db6c:	a93a      	add	r1, sp, #232	; 0xe8
  40db6e:	a838      	add	r0, sp, #224	; 0xe0
  40db70:	4c26      	ldr	r4, [pc, #152]	; (40dc0c <lv_draw_label+0xe88>)
  40db72:	47a0      	blx	r4
  40db74:	e799      	b.n	40daaa <lv_draw_label+0xd26>
            p1.x = pos_x_start;
  40db76:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  40db7a:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
  40db7e:	f8da 1008 	ldr.w	r1, [sl, #8]
  40db82:	9b06      	ldr	r3, [sp, #24]
  40db84:	f993 300d 	ldrsb.w	r3, [r3, #13]
  40db88:	894a      	ldrh	r2, [r1, #10]
  40db8a:	441a      	add	r2, r3
  40db8c:	890b      	ldrh	r3, [r1, #8]
  40db8e:	1a9b      	subs	r3, r3, r2
  40db90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40db92:	4413      	add	r3, r2
  40db94:	b21b      	sxth	r3, r3
  40db96:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            p2.x = pos.x;
  40db9a:	f8ad 70e8 	strh.w	r7, [sp, #232]	; 0xe8
            p2.y = p1.y;
  40db9e:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40dba2:	ab53      	add	r3, sp, #332	; 0x14c
  40dba4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40dba6:	a93a      	add	r1, sp, #232	; 0xe8
  40dba8:	a838      	add	r0, sp, #224	; 0xe0
  40dbaa:	4c18      	ldr	r4, [pc, #96]	; (40dc0c <lv_draw_label+0xe88>)
  40dbac:	47a0      	blx	r4
  40dbae:	e781      	b.n	40dab4 <lv_draw_label+0xd30>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40dbb0:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
  40dbb4:	9200      	str	r2, [sp, #0]
  40dbb6:	9a06      	ldr	r2, [sp, #24]
  40dbb8:	4601      	mov	r1, r0
  40dbba:	4630      	mov	r0, r6
  40dbbc:	4e14      	ldr	r6, [pc, #80]	; (40dc10 <lv_draw_label+0xe8c>)
  40dbbe:	47b0      	blx	r6
  40dbc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40dbc2:	8893      	ldrh	r3, [r2, #4]
  40dbc4:	3301      	adds	r3, #1
  40dbc6:	8812      	ldrh	r2, [r2, #0]
  40dbc8:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40dbca:	b21b      	sxth	r3, r3
  40dbcc:	1a18      	subs	r0, r3, r0
  40dbce:	bf48      	it	mi
  40dbd0:	3001      	addmi	r0, #1
  40dbd2:	eb05 0560 	add.w	r5, r5, r0, asr #1
  40dbd6:	b22d      	sxth	r5, r5
  40dbd8:	e785      	b.n	40dae6 <lv_draw_label+0xd62>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40dbda:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
  40dbde:	9200      	str	r2, [sp, #0]
  40dbe0:	9a06      	ldr	r2, [sp, #24]
  40dbe2:	4601      	mov	r1, r0
  40dbe4:	4630      	mov	r0, r6
  40dbe6:	4e0a      	ldr	r6, [pc, #40]	; (40dc10 <lv_draw_label+0xe8c>)
  40dbe8:	47b0      	blx	r6
  40dbea:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40dbec:	8893      	ldrh	r3, [r2, #4]
  40dbee:	3301      	adds	r3, #1
  40dbf0:	8812      	ldrh	r2, [r2, #0]
  40dbf2:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
  40dbf4:	b21b      	sxth	r3, r3
  40dbf6:	1a18      	subs	r0, r3, r0
  40dbf8:	4405      	add	r5, r0
  40dbfa:	b22d      	sxth	r5, r5
  40dbfc:	e773      	b.n	40dae6 <lv_draw_label+0xd62>
                        cmd_state = CMD_STATE_WAIT;
  40dbfe:	2300      	movs	r3, #0
  40dc00:	9307      	str	r3, [sp, #28]
  40dc02:	f7ff ba1a 	b.w	40d03a <lv_draw_label+0x2b6>
  40dc06:	bf00      	nop
  40dc08:	00416f95 	.word	0x00416f95
  40dc0c:	0040dc31 	.word	0x0040dc31
  40dc10:	004171bd 	.word	0x004171bd

0040dc14 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
  40dc14:	b510      	push	{r4, lr}
  40dc16:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
  40dc18:	210a      	movs	r1, #10
  40dc1a:	4b04      	ldr	r3, [pc, #16]	; (40dc2c <lv_draw_line_dsc_init+0x18>)
  40dc1c:	4798      	blx	r3
    dsc->width = 1;
  40dc1e:	2301      	movs	r3, #1
  40dc20:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
  40dc22:	23ff      	movs	r3, #255	; 0xff
  40dc24:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
  40dc26:	2300      	movs	r3, #0
  40dc28:	8023      	strh	r3, [r4, #0]
  40dc2a:	bd10      	pop	{r4, pc}
  40dc2c:	00415ead 	.word	0x00415ead

0040dc30 <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
  40dc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dc34:	b0cb      	sub	sp, #300	; 0x12c
    if(dsc->width == 0) return;
  40dc36:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
  40dc3a:	2c00      	cmp	r4, #0
  40dc3c:	f000 841c 	beq.w	40e478 <lv_draw_line+0x848>
    if(dsc->opa <= LV_OPA_MIN) return;
  40dc40:	7a1d      	ldrb	r5, [r3, #8]
  40dc42:	2d02      	cmp	r5, #2
  40dc44:	f240 8418 	bls.w	40e478 <lv_draw_line+0x848>

    if(point1->x == point2->x && point1->y == point2->y) return;
  40dc48:	f9b0 6000 	ldrsh.w	r6, [r0]
  40dc4c:	f9b1 7000 	ldrsh.w	r7, [r1]
  40dc50:	42be      	cmp	r6, r7
  40dc52:	f000 8131 	beq.w	40deb8 <lv_draw_line+0x288>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40dc56:	4625      	mov	r5, r4
  40dc58:	2c00      	cmp	r4, #0
  40dc5a:	bfb8      	it	lt
  40dc5c:	1c65      	addlt	r5, r4, #1
  40dc5e:	461c      	mov	r4, r3
  40dc60:	4696      	mov	lr, r2
  40dc62:	9208      	str	r2, [sp, #32]
  40dc64:	9107      	str	r1, [sp, #28]
  40dc66:	9006      	str	r0, [sp, #24]
  40dc68:	f3c5 034f 	ubfx	r3, r5, #1, #16
  40dc6c:	42be      	cmp	r6, r7
  40dc6e:	bfd4      	ite	le
  40dc70:	ebc3 0206 	rsble	r2, r3, r6
  40dc74:	ebc3 0207 	rsbgt	r2, r3, r7
  40dc78:	f8ad 2120 	strh.w	r2, [sp, #288]	; 0x120
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
  40dc7c:	42be      	cmp	r6, r7
  40dc7e:	bfac      	ite	ge
  40dc80:	199a      	addge	r2, r3, r6
  40dc82:	19da      	addlt	r2, r3, r7
  40dc84:	f8ad 2124 	strh.w	r2, [sp, #292]	; 0x124
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40dc88:	460d      	mov	r5, r1
  40dc8a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  40dc8e:	4606      	mov	r6, r0
  40dc90:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  40dc94:	4291      	cmp	r1, r2
  40dc96:	bfd4      	ite	le
  40dc98:	ebc3 0001 	rsble	r0, r3, r1
  40dc9c:	ebc3 0002 	rsbgt	r0, r3, r2
  40dca0:	f8ad 0122 	strh.w	r0, [sp, #290]	; 0x122
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40dca4:	4291      	cmp	r1, r2
  40dca6:	bfac      	ite	ge
  40dca8:	185b      	addge	r3, r3, r1
  40dcaa:	189b      	addlt	r3, r3, r2
  40dcac:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
  40dcb0:	4672      	mov	r2, lr
  40dcb2:	a948      	add	r1, sp, #288	; 0x120
  40dcb4:	4608      	mov	r0, r1
  40dcb6:	4baa      	ldr	r3, [pc, #680]	; (40df60 <lv_draw_line+0x330>)
  40dcb8:	4798      	blx	r3
    if(!is_common) return;
  40dcba:	2800      	cmp	r0, #0
  40dcbc:	f000 83dc 	beq.w	40e478 <lv_draw_line+0x848>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40dcc0:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
  40dcc4:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
  40dcc8:	42ae      	cmp	r6, r5
  40dcca:	f000 80fd 	beq.w	40dec8 <lv_draw_line+0x298>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40dcce:	9b06      	ldr	r3, [sp, #24]
  40dcd0:	f9b3 3000 	ldrsh.w	r3, [r3]
  40dcd4:	461a      	mov	r2, r3
  40dcd6:	9305      	str	r3, [sp, #20]
  40dcd8:	9b07      	ldr	r3, [sp, #28]
  40dcda:	f9b3 a000 	ldrsh.w	sl, [r3]
  40dcde:	4552      	cmp	r2, sl
  40dce0:	f000 8203 	beq.w	40e0ea <lv_draw_line+0x4ba>
                                                 const lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
  40dce4:	42ae      	cmp	r6, r5
  40dce6:	db06      	blt.n	40dcf6 <lv_draw_line+0xc6>
  40dce8:	4633      	mov	r3, r6
        p2.y = point2->y;
        p1.x = point1->x;
        p2.x = point2->x;
    }
    else {
        p1.y = point2->y;
  40dcea:	462e      	mov	r6, r5
        p2.y = point1->y;
  40dcec:	461d      	mov	r5, r3
    if(point1->y < point2->y) {
  40dcee:	9b05      	ldr	r3, [sp, #20]
        p1.x = point2->x;
  40dcf0:	f8cd a014 	str.w	sl, [sp, #20]
        p2.x = point1->x;
  40dcf4:	469a      	mov	sl, r3
    }

    int32_t xdiff = p2.x - p1.x;
  40dcf6:	9b05      	ldr	r3, [sp, #20]
  40dcf8:	ebaa 0303 	sub.w	r3, sl, r3
  40dcfc:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
  40dcfe:	1baa      	subs	r2, r5, r6
  40dd00:	920a      	str	r2, [sp, #40]	; 0x28
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
  40dd02:	2b00      	cmp	r3, #0
  40dd04:	bfb8      	it	lt
  40dd06:	425b      	neglt	r3, r3
  40dd08:	469b      	mov	fp, r3
  40dd0a:	2a00      	cmp	r2, #0
  40dd0c:	bfb8      	it	lt
  40dd0e:	4252      	neglt	r2, r2
  40dd10:	4690      	mov	r8, r2
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
  40dd12:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
  40dd16:	4293      	cmp	r3, r2
  40dd18:	f340 82cf 	ble.w	40e2ba <lv_draw_line+0x68a>
  40dd1c:	0153      	lsls	r3, r2, #5
  40dd1e:	fb93 f3fb 	sdiv	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
  40dd22:	4a90      	ldr	r2, [pc, #576]	; (40df64 <lv_draw_line+0x334>)
  40dd24:	5cd3      	ldrb	r3, [r2, r3]
  40dd26:	fb09 f903 	mul.w	r9, r9, r3
  40dd2a:	f109 093f 	add.w	r9, r9, #63	; 0x3f
  40dd2e:	ea4f 13e9 	mov.w	r3, r9, asr #7
  40dd32:	461f      	mov	r7, r3
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
  40dd34:	b29b      	uxth	r3, r3
  40dd36:	9805      	ldr	r0, [sp, #20]
  40dd38:	4582      	cmp	sl, r0
  40dd3a:	bfd4      	ite	le
  40dd3c:	ebc3 020a 	rsble	r2, r3, sl
  40dd40:	ebc3 0200 	rsbgt	r2, r3, r0
  40dd44:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
  40dd48:	4582      	cmp	sl, r0
  40dd4a:	bfac      	ite	ge
  40dd4c:	eb03 020a 	addge.w	r2, r3, sl
  40dd50:	181a      	addlt	r2, r3, r0
  40dd52:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
  40dd56:	42b5      	cmp	r5, r6
  40dd58:	bfd4      	ite	le
  40dd5a:	ebc3 0205 	rsble	r2, r3, r5
  40dd5e:	ebc3 0206 	rsbgt	r2, r3, r6
  40dd62:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
  40dd66:	42b5      	cmp	r5, r6
  40dd68:	bfac      	ite	ge
  40dd6a:	195b      	addge	r3, r3, r5
  40dd6c:	199b      	addlt	r3, r3, r6
  40dd6e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
  40dd72:	aa48      	add	r2, sp, #288	; 0x120
  40dd74:	a90e      	add	r1, sp, #56	; 0x38
  40dd76:	4608      	mov	r0, r1
  40dd78:	4b79      	ldr	r3, [pc, #484]	; (40df60 <lv_draw_line+0x330>)
  40dd7a:	4798      	blx	r3
    if(is_common == false) return;
  40dd7c:	2800      	cmp	r0, #0
  40dd7e:	f000 8377 	beq.w	40e470 <lv_draw_line+0x840>
    int32_t w_half0 = w >> 1;
  40dd82:	ea4f 2929 	mov.w	r9, r9, asr #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40dd86:	f007 0301 	and.w	r3, r7, #1
  40dd8a:	444b      	add	r3, r9
  40dd8c:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
  40dd8e:	45c3      	cmp	fp, r8
  40dd90:	f340 82bb 	ble.w	40e30a <lv_draw_line+0x6da>
        if(xdiff > 0) {
  40dd94:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dd96:	2a00      	cmp	r2, #0
  40dd98:	f340 8293 	ble.w	40e2c2 <lv_draw_line+0x692>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40dd9c:	fa1f fb86 	uxth.w	fp, r6
  40dda0:	fa1f f389 	uxth.w	r3, r9
  40dda4:	fa1f f985 	uxth.w	r9, r5
  40dda8:	ebab 0203 	sub.w	r2, fp, r3
  40ddac:	2100      	movs	r1, #0
  40ddae:	9101      	str	r1, [sp, #4]
  40ddb0:	eba9 0303 	sub.w	r3, r9, r3
  40ddb4:	b21b      	sxth	r3, r3
  40ddb6:	9300      	str	r3, [sp, #0]
  40ddb8:	4653      	mov	r3, sl
  40ddba:	b212      	sxth	r2, r2
  40ddbc:	9905      	ldr	r1, [sp, #20]
  40ddbe:	a812      	add	r0, sp, #72	; 0x48
  40ddc0:	4f69      	ldr	r7, [pc, #420]	; (40df68 <lv_draw_line+0x338>)
  40ddc2:	47b8      	blx	r7
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40ddc4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  40ddc8:	eb0b 0208 	add.w	r2, fp, r8
  40ddcc:	2301      	movs	r3, #1
  40ddce:	9301      	str	r3, [sp, #4]
  40ddd0:	44c1      	add	r9, r8
  40ddd2:	fa0f f389 	sxth.w	r3, r9
  40ddd6:	9300      	str	r3, [sp, #0]
  40ddd8:	4653      	mov	r3, sl
  40ddda:	b212      	sxth	r2, r2
  40dddc:	9905      	ldr	r1, [sp, #20]
  40ddde:	a81d      	add	r0, sp, #116	; 0x74
  40dde0:	47b8      	blx	r7
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
  40dde2:	2100      	movs	r1, #0
  40dde4:	a812      	add	r0, sp, #72	; 0x48
  40dde6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 40df8c <lv_draw_line+0x35c>
  40ddea:	47c0      	blx	r8
  40ddec:	900b      	str	r0, [sp, #44]	; 0x2c
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
  40ddee:	2100      	movs	r1, #0
  40ddf0:	a81d      	add	r0, sp, #116	; 0x74
  40ddf2:	47c0      	blx	r8
  40ddf4:	900c      	str	r0, [sp, #48]	; 0x30
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
  40ddf6:	7a63      	ldrb	r3, [r4, #9]
  40ddf8:	f013 0f10 	tst.w	r3, #16
  40ddfc:	f000 82a9 	beq.w	40e352 <lv_draw_line+0x722>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
  40de00:	f04f 33ff 	mov.w	r3, #4294967295
  40de04:	930d      	str	r3, [sp, #52]	; 0x34
    int16_t mask_top_id = LV_MASK_ID_INV;
  40de06:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40de08:	4b58      	ldr	r3, [pc, #352]	; (40df6c <lv_draw_line+0x33c>)
  40de0a:	4798      	blx	r3
  40de0c:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40de0e:	4b58      	ldr	r3, [pc, #352]	; (40df70 <lv_draw_line+0x340>)
  40de10:	4798      	blx	r3
  40de12:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
  40de14:	8a07      	ldrh	r7, [r0, #16]
  40de16:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
  40de1a:	1bed      	subs	r5, r5, r7
  40de1c:	b2aa      	uxth	r2, r5
  40de1e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
  40de22:	8a40      	ldrh	r0, [r0, #18]
  40de24:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
  40de28:	1a09      	subs	r1, r1, r0
  40de2a:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
  40de2e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  40de32:	1bdb      	subs	r3, r3, r7
  40de34:	b29b      	uxth	r3, r3
  40de36:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
  40de3a:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  40de3e:	1a09      	subs	r1, r1, r0
  40de40:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
  40de44:	1c5d      	adds	r5, r3, #1
  40de46:	1aad      	subs	r5, r5, r2
  40de48:	b22d      	sxth	r5, r5
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
  40de4a:	4630      	mov	r0, r6
  40de4c:	4b49      	ldr	r3, [pc, #292]	; (40df74 <lv_draw_line+0x344>)
  40de4e:	4798      	blx	r3
  40de50:	4683      	mov	fp, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40de52:	a80e      	add	r0, sp, #56	; 0x38
  40de54:	4b48      	ldr	r3, [pc, #288]	; (40df78 <lv_draw_line+0x348>)
  40de56:	4798      	blx	r3
  40de58:	4583      	cmp	fp, r0
  40de5a:	f200 82a3 	bhi.w	40e3a4 <lv_draw_line+0x774>
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40de5e:	4658      	mov	r0, fp
  40de60:	4b46      	ldr	r3, [pc, #280]	; (40df7c <lv_draw_line+0x34c>)
  40de62:	4798      	blx	r3
  40de64:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
  40de66:	f8ba 3010 	ldrh.w	r3, [sl, #16]
  40de6a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  40de6e:	441a      	add	r2, r3
  40de70:	b212      	sxth	r2, r2
  40de72:	9205      	str	r2, [sp, #20]
  40de74:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = draw_area.x2 + disp_area->x1;
  40de78:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  40de7c:	4413      	add	r3, r2
  40de7e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = draw_area.y1 + disp_area->y1;
  40de82:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  40de86:	f8ba 2012 	ldrh.w	r2, [sl, #18]
  40de8a:	4413      	add	r3, r2
  40de8c:	b21b      	sxth	r3, r3
  40de8e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
  40de92:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
  40de96:	4659      	mov	r1, fp
  40de98:	4b39      	ldr	r3, [pc, #228]	; (40df80 <lv_draw_line+0x350>)
  40de9a:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40de9c:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
  40dea0:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
  40dea4:	4416      	add	r6, r2
  40dea6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  40deaa:	4413      	add	r3, r2
  40deac:	429e      	cmp	r6, r3
  40deae:	f300 82bc 	bgt.w	40e42a <lv_draw_line+0x7fa>
  40deb2:	2700      	movs	r7, #0
        mask_p += draw_area_w;
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
  40deb4:	9409      	str	r4, [sp, #36]	; 0x24
  40deb6:	e2a3      	b.n	40e400 <lv_draw_line+0x7d0>
    if(point1->x == point2->x && point1->y == point2->y) return;
  40deb8:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
  40debc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  40dec0:	45ae      	cmp	lr, r5
  40dec2:	f47f aec8 	bne.w	40dc56 <lv_draw_line+0x26>
  40dec6:	e2d7      	b.n	40e478 <lv_draw_line+0x848>
    lv_opa_t opa = dsc->opa;
  40dec8:	f894 9008 	ldrb.w	r9, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40decc:	4b27      	ldr	r3, [pc, #156]	; (40df6c <lv_draw_line+0x33c>)
  40dece:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40ded0:	4b27      	ldr	r3, [pc, #156]	; (40df70 <lv_draw_line+0x340>)
  40ded2:	4798      	blx	r3
  40ded4:	4607      	mov	r7, r0
    int32_t w = dsc->width - 1;
  40ded6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  40deda:	3b01      	subs	r3, #1
    int32_t w_half0 = w >> 1;
  40dedc:	105e      	asrs	r6, r3, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40dede:	f003 0301 	and.w	r3, r3, #1
  40dee2:	199d      	adds	r5, r3, r6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40dee4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40dee8:	2b00      	cmp	r3, #0
  40deea:	d035      	beq.n	40df58 <lv_draw_line+0x328>
  40deec:	f9b4 8004 	ldrsh.w	r8, [r4, #4]
  40def0:	f118 0800 	adds.w	r8, r8, #0
  40def4:	bf18      	it	ne
  40def6:	f04f 0801 	movne.w	r8, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40defa:	4b22      	ldr	r3, [pc, #136]	; (40df84 <lv_draw_line+0x354>)
  40defc:	4798      	blx	r3
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
  40defe:	9b07      	ldr	r3, [sp, #28]
  40df00:	f9b3 3000 	ldrsh.w	r3, [r3]
  40df04:	9a06      	ldr	r2, [sp, #24]
  40df06:	f9b2 2000 	ldrsh.w	r2, [r2]
  40df0a:	4619      	mov	r1, r3
  40df0c:	4293      	cmp	r3, r2
  40df0e:	bfa8      	it	ge
  40df10:	4611      	movge	r1, r2
  40df12:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
  40df16:	4293      	cmp	r3, r2
  40df18:	bfb8      	it	lt
  40df1a:	4613      	movlt	r3, r2
  40df1c:	3b01      	subs	r3, #1
  40df1e:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
  40df22:	9a06      	ldr	r2, [sp, #24]
  40df24:	8853      	ldrh	r3, [r2, #2]
  40df26:	1b5d      	subs	r5, r3, r5
  40df28:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
    draw_area.y2 = point1->y + w_half0;
  40df2c:	4433      	add	r3, r6
  40df2e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
  40df32:	bb68      	cbnz	r0, 40df90 <lv_draw_line+0x360>
  40df34:	f1b8 0f00 	cmp.w	r8, #0
  40df38:	d12a      	bne.n	40df90 <lv_draw_line+0x360>
                       dsc->blend_mode);
  40df3a:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
  40df3c:	f003 0303 	and.w	r3, r3, #3
  40df40:	9302      	str	r3, [sp, #8]
  40df42:	f8cd 9004 	str.w	r9, [sp, #4]
  40df46:	2301      	movs	r3, #1
  40df48:	9300      	str	r3, [sp, #0]
  40df4a:	2300      	movs	r3, #0
  40df4c:	8822      	ldrh	r2, [r4, #0]
  40df4e:	a928      	add	r1, sp, #160	; 0xa0
  40df50:	a848      	add	r0, sp, #288	; 0x120
  40df52:	4d0d      	ldr	r5, [pc, #52]	; (40df88 <lv_draw_line+0x358>)
  40df54:	47a8      	blx	r5
  40df56:	e28b      	b.n	40e470 <lv_draw_line+0x840>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40df58:	f04f 0800 	mov.w	r8, #0
  40df5c:	e7cd      	b.n	40defa <lv_draw_line+0x2ca>
  40df5e:	bf00      	nop
  40df60:	00414957 	.word	0x00414957
  40df64:	00425bb0 	.word	0x00425bb0
  40df68:	0040f1ed 	.word	0x0040f1ed
  40df6c:	00408f81 	.word	0x00408f81
  40df70:	00414199 	.word	0x00414199
  40df74:	004140ad 	.word	0x004140ad
  40df78:	0041493b 	.word	0x0041493b
  40df7c:	00415cd9 	.word	0x00415cd9
  40df80:	00415f51 	.word	0x00415f51
  40df84:	0040f1c9 	.word	0x0040f1c9
  40df88:	0040a9e9 	.word	0x0040a9e9
  40df8c:	0040f0e5 	.word	0x0040f0e5
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40df90:	aa28      	add	r2, sp, #160	; 0xa0
  40df92:	a948      	add	r1, sp, #288	; 0x120
  40df94:	4610      	mov	r0, r2
  40df96:	4ba0      	ldr	r3, [pc, #640]	; (40e218 <lv_draw_line+0x5e8>)
  40df98:	4798      	blx	r3
        if(!is_common) return;
  40df9a:	2800      	cmp	r0, #0
  40df9c:	f000 8268 	beq.w	40e470 <lv_draw_line+0x840>
        draw_area.x1 -= disp_area->x1;
  40dfa0:	f9bd e0a0 	ldrsh.w	lr, [sp, #160]	; 0xa0
  40dfa4:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
  40dfa8:	b28b      	uxth	r3, r1
  40dfaa:	ebae 0203 	sub.w	r2, lr, r3
  40dfae:	b292      	uxth	r2, r2
  40dfb0:	fa0f fc82 	sxth.w	ip, r2
  40dfb4:	f8ad c0a0 	strh.w	ip, [sp, #160]	; 0xa0
        draw_area.y1 -= disp_area->y1;
  40dfb8:	f9bd 00a2 	ldrsh.w	r0, [sp, #162]	; 0xa2
  40dfbc:	f8b7 9012 	ldrh.w	r9, [r7, #18]
  40dfc0:	eba0 0509 	sub.w	r5, r0, r9
  40dfc4:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
        draw_area.x2 -= disp_area->x1;
  40dfc8:	f9bd 60a4 	ldrsh.w	r6, [sp, #164]	; 0xa4
  40dfcc:	1af3      	subs	r3, r6, r3
  40dfce:	b29b      	uxth	r3, r3
  40dfd0:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= disp_area->y1;
  40dfd4:	f8bd 50a6 	ldrh.w	r5, [sp, #166]	; 0xa6
  40dfd8:	eba5 0509 	sub.w	r5, r5, r9
  40dfdc:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
  40dfe0:	3301      	adds	r3, #1
  40dfe2:	1a9a      	subs	r2, r3, r2
  40dfe4:	b215      	sxth	r5, r2
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40dfe6:	f8ad e0cc 	strh.w	lr, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40dfea:	f8ad 60d0 	strh.w	r6, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40dfee:	f8ad 00ce 	strh.w	r0, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
  40dff2:	f8ad 00d2 	strh.w	r0, [sp, #210]	; 0xd2
        if(dashed) {
  40dff6:	f1b8 0f00 	cmp.w	r8, #0
  40dffa:	d01c      	beq.n	40e036 <lv_draw_line+0x406>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
  40dffc:	4461      	add	r1, ip
  40dffe:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
  40e002:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40e006:	441a      	add	r2, r3
  40e008:	fb91 f3f2 	sdiv	r3, r1, r2
  40e00c:	fb02 1113 	mls	r1, r2, r3, r1
  40e010:	b20b      	sxth	r3, r1
  40e012:	930a      	str	r3, [sp, #40]	; 0x28
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40e014:	9509      	str	r5, [sp, #36]	; 0x24
  40e016:	4628      	mov	r0, r5
  40e018:	4b80      	ldr	r3, [pc, #512]	; (40e21c <lv_draw_line+0x5ec>)
  40e01a:	4798      	blx	r3
  40e01c:	4682      	mov	sl, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e01e:	f9bd 60a2 	ldrsh.w	r6, [sp, #162]	; 0xa2
  40e022:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
  40e026:	429e      	cmp	r6, r3
  40e028:	dc5b      	bgt.n	40e0e2 <lv_draw_line+0x4b2>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e02a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 40e238 <lv_draw_line+0x608>
            _lv_blend_fill(clip, &fill_area,
  40e02e:	f8df b204 	ldr.w	fp, [pc, #516]	; 40e234 <lv_draw_line+0x604>
  40e032:	9505      	str	r5, [sp, #20]
  40e034:	e036      	b.n	40e0a4 <lv_draw_line+0x474>
        if(dashed) {
  40e036:	2100      	movs	r1, #0
  40e038:	e7ea      	b.n	40e010 <lv_draw_line+0x3e0>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40e03a:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
  40e03e:	4473      	add	r3, lr
  40e040:	429a      	cmp	r2, r3
  40e042:	da03      	bge.n	40e04c <lv_draw_line+0x41c>
                            mask_buf[i] = 0x00;
  40e044:	f80a 1000 	strb.w	r1, [sl, r0]
  40e048:	4613      	mov	r3, r2
  40e04a:	e000      	b.n	40e04e <lv_draw_line+0x41e>
                            dash_cnt = 0;
  40e04c:	460b      	mov	r3, r1
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
  40e04e:	3001      	adds	r0, #1
  40e050:	b200      	sxth	r0, r0
  40e052:	3301      	adds	r3, #1
  40e054:	b21a      	sxth	r2, r3
  40e056:	4285      	cmp	r5, r0
  40e058:	dd07      	ble.n	40e06a <lv_draw_line+0x43a>
                        if(dash_cnt <= dsc->dash_width) {
  40e05a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40e05e:	4293      	cmp	r3, r2
  40e060:	dbeb      	blt.n	40e03a <lv_draw_line+0x40a>
                            i += diff;
  40e062:	4418      	add	r0, r3
  40e064:	1a80      	subs	r0, r0, r2
  40e066:	b200      	sxth	r0, r0
  40e068:	e7f1      	b.n	40e04e <lv_draw_line+0x41e>
  40e06a:	9505      	str	r5, [sp, #20]
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  40e06c:	2202      	movs	r2, #2
                           dsc->blend_mode);
  40e06e:	7a63      	ldrb	r3, [r4, #9]
            _lv_blend_fill(clip, &fill_area,
  40e070:	f003 0303 	and.w	r3, r3, #3
  40e074:	9302      	str	r3, [sp, #8]
  40e076:	7a23      	ldrb	r3, [r4, #8]
  40e078:	9301      	str	r3, [sp, #4]
  40e07a:	9200      	str	r2, [sp, #0]
  40e07c:	4653      	mov	r3, sl
  40e07e:	8822      	ldrh	r2, [r4, #0]
  40e080:	a933      	add	r1, sp, #204	; 0xcc
  40e082:	a848      	add	r0, sp, #288	; 0x120
  40e084:	47d8      	blx	fp
            fill_area.y1++;
  40e086:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e08a:	3301      	adds	r3, #1
  40e08c:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
  40e090:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
  40e094:	3301      	adds	r3, #1
  40e096:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e09a:	3601      	adds	r6, #1
  40e09c:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
  40e0a0:	429e      	cmp	r6, r3
  40e0a2:	dc1e      	bgt.n	40e0e2 <lv_draw_line+0x4b2>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e0a4:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e0a6:	4650      	mov	r0, sl
  40e0a8:	47c8      	blx	r9
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40e0aa:	8a7a      	ldrh	r2, [r7, #18]
  40e0ac:	4432      	add	r2, r6
  40e0ae:	8a39      	ldrh	r1, [r7, #16]
  40e0b0:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
  40e0b4:	4419      	add	r1, r3
  40e0b6:	9b05      	ldr	r3, [sp, #20]
  40e0b8:	b212      	sxth	r2, r2
  40e0ba:	b209      	sxth	r1, r1
  40e0bc:	4650      	mov	r0, sl
  40e0be:	4d58      	ldr	r5, [pc, #352]	; (40e220 <lv_draw_line+0x5f0>)
  40e0c0:	47a8      	blx	r5
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40e0c2:	4602      	mov	r2, r0
  40e0c4:	2800      	cmp	r0, #0
  40e0c6:	d0d2      	beq.n	40e06e <lv_draw_line+0x43e>
  40e0c8:	f1b8 0f00 	cmp.w	r8, #0
  40e0cc:	d0cf      	beq.n	40e06e <lv_draw_line+0x43e>
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
  40e0ce:	9b05      	ldr	r3, [sp, #20]
  40e0d0:	2b00      	cmp	r3, #0
  40e0d2:	dd04      	ble.n	40e0de <lv_draw_line+0x4ae>
  40e0d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40e0d6:	2000      	movs	r0, #0
                            dash_cnt = 0;
  40e0d8:	4601      	mov	r1, r0
  40e0da:	461d      	mov	r5, r3
  40e0dc:	e7bd      	b.n	40e05a <lv_draw_line+0x42a>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  40e0de:	2202      	movs	r2, #2
  40e0e0:	e7c5      	b.n	40e06e <lv_draw_line+0x43e>
        _lv_mem_buf_release(mask_buf);
  40e0e2:	4650      	mov	r0, sl
  40e0e4:	4b4f      	ldr	r3, [pc, #316]	; (40e224 <lv_draw_line+0x5f4>)
  40e0e6:	4798      	blx	r3
  40e0e8:	e1c2      	b.n	40e470 <lv_draw_line+0x840>
    lv_opa_t opa = dsc->opa;
  40e0ea:	f894 9008 	ldrb.w	r9, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40e0ee:	4b4e      	ldr	r3, [pc, #312]	; (40e228 <lv_draw_line+0x5f8>)
  40e0f0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40e0f2:	4b4e      	ldr	r3, [pc, #312]	; (40e22c <lv_draw_line+0x5fc>)
  40e0f4:	4798      	blx	r3
  40e0f6:	4680      	mov	r8, r0
    int32_t w = dsc->width - 1;
  40e0f8:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
  40e0fc:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
  40e0fe:	106f      	asrs	r7, r5, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40e100:	f005 0501 	and.w	r5, r5, #1
  40e104:	443d      	add	r5, r7
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e106:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40e10a:	b12b      	cbz	r3, 40e118 <lv_draw_line+0x4e8>
  40e10c:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
  40e110:	3600      	adds	r6, #0
  40e112:	bf18      	it	ne
  40e114:	2601      	movne	r6, #1
  40e116:	e000      	b.n	40e11a <lv_draw_line+0x4ea>
  40e118:	2600      	movs	r6, #0
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e11a:	4b45      	ldr	r3, [pc, #276]	; (40e230 <lv_draw_line+0x600>)
  40e11c:	4798      	blx	r3
    draw_area.x1 = point1->x - w_half1;
  40e11e:	9a06      	ldr	r2, [sp, #24]
  40e120:	8813      	ldrh	r3, [r2, #0]
  40e122:	1b5d      	subs	r5, r3, r5
  40e124:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    draw_area.x2 = point1->x + w_half0;
  40e128:	441f      	add	r7, r3
  40e12a:	f8ad 70a4 	strh.w	r7, [sp, #164]	; 0xa4
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
  40e12e:	9b07      	ldr	r3, [sp, #28]
  40e130:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40e134:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  40e138:	4619      	mov	r1, r3
  40e13a:	4293      	cmp	r3, r2
  40e13c:	bfa8      	it	ge
  40e13e:	4611      	movge	r1, r2
  40e140:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
  40e144:	4293      	cmp	r3, r2
  40e146:	bfb8      	it	lt
  40e148:	4613      	movlt	r3, r2
  40e14a:	3b01      	subs	r3, #1
  40e14c:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
  40e150:	b978      	cbnz	r0, 40e172 <lv_draw_line+0x542>
  40e152:	b976      	cbnz	r6, 40e172 <lv_draw_line+0x542>
                       dsc->blend_mode);
  40e154:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
  40e156:	f003 0303 	and.w	r3, r3, #3
  40e15a:	9302      	str	r3, [sp, #8]
  40e15c:	f8cd 9004 	str.w	r9, [sp, #4]
  40e160:	2301      	movs	r3, #1
  40e162:	9300      	str	r3, [sp, #0]
  40e164:	2300      	movs	r3, #0
  40e166:	8822      	ldrh	r2, [r4, #0]
  40e168:	a928      	add	r1, sp, #160	; 0xa0
  40e16a:	a848      	add	r0, sp, #288	; 0x120
  40e16c:	4d31      	ldr	r5, [pc, #196]	; (40e234 <lv_draw_line+0x604>)
  40e16e:	47a8      	blx	r5
  40e170:	e17e      	b.n	40e470 <lv_draw_line+0x840>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40e172:	aa28      	add	r2, sp, #160	; 0xa0
  40e174:	a948      	add	r1, sp, #288	; 0x120
  40e176:	4610      	mov	r0, r2
  40e178:	4b27      	ldr	r3, [pc, #156]	; (40e218 <lv_draw_line+0x5e8>)
  40e17a:	4798      	blx	r3
        if(!is_common) return;
  40e17c:	2800      	cmp	r0, #0
  40e17e:	f000 8177 	beq.w	40e470 <lv_draw_line+0x840>
        draw_area.x1 -= vdb->area.x1;
  40e182:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
  40e186:	f8b8 3010 	ldrh.w	r3, [r8, #16]
  40e18a:	1ac5      	subs	r5, r0, r3
  40e18c:	b2ad      	uxth	r5, r5
  40e18e:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
  40e192:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
  40e196:	f8b8 7012 	ldrh.w	r7, [r8, #18]
  40e19a:	1bd1      	subs	r1, r2, r7
  40e19c:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= vdb->area.x1;
  40e1a0:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
  40e1a4:	1acb      	subs	r3, r1, r3
  40e1a6:	b29b      	uxth	r3, r3
  40e1a8:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= vdb->area.y1;
  40e1ac:	f8bd e0a6 	ldrh.w	lr, [sp, #166]	; 0xa6
  40e1b0:	ebae 0707 	sub.w	r7, lr, r7
  40e1b4:	f8ad 70a6 	strh.w	r7, [sp, #166]	; 0xa6
  40e1b8:	3301      	adds	r3, #1
  40e1ba:	1b5b      	subs	r3, r3, r5
  40e1bc:	b21b      	sxth	r3, r3
  40e1be:	9309      	str	r3, [sp, #36]	; 0x24
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e1c0:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e1c4:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e1c8:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
  40e1cc:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40e1d0:	930a      	str	r3, [sp, #40]	; 0x28
  40e1d2:	4618      	mov	r0, r3
  40e1d4:	4b11      	ldr	r3, [pc, #68]	; (40e21c <lv_draw_line+0x5ec>)
  40e1d6:	4798      	blx	r3
  40e1d8:	9005      	str	r0, [sp, #20]
        if(dashed) {
  40e1da:	b176      	cbz	r6, 40e1fa <lv_draw_line+0x5ca>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
  40e1dc:	f9b8 2012 	ldrsh.w	r2, [r8, #18]
  40e1e0:	f9bd 70a2 	ldrsh.w	r7, [sp, #162]	; 0xa2
  40e1e4:	443a      	add	r2, r7
  40e1e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40e1ea:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
  40e1ee:	443b      	add	r3, r7
  40e1f0:	fb92 f7f3 	sdiv	r7, r2, r3
  40e1f4:	fb03 2717 	mls	r7, r3, r7, r2
  40e1f8:	e000      	b.n	40e1fc <lv_draw_line+0x5cc>
        if(dashed) {
  40e1fa:	2700      	movs	r7, #0
  40e1fc:	b23f      	sxth	r7, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e1fe:	f9bd 50a2 	ldrsh.w	r5, [sp, #162]	; 0xa2
  40e202:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
  40e206:	429d      	cmp	r5, r3
  40e208:	dc53      	bgt.n	40e2b2 <lv_draw_line+0x682>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e20a:	f8df 902c 	ldr.w	r9, [pc, #44]	; 40e238 <lv_draw_line+0x608>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40e20e:	f8df a010 	ldr.w	sl, [pc, #16]	; 40e220 <lv_draw_line+0x5f0>
            _lv_blend_fill(clip, &fill_area,
  40e212:	f8df b020 	ldr.w	fp, [pc, #32]	; 40e234 <lv_draw_line+0x604>
  40e216:	e02c      	b.n	40e272 <lv_draw_line+0x642>
  40e218:	00414957 	.word	0x00414957
  40e21c:	00415cd9 	.word	0x00415cd9
  40e220:	0040f121 	.word	0x0040f121
  40e224:	0041595d 	.word	0x0041595d
  40e228:	00408f81 	.word	0x00408f81
  40e22c:	00414199 	.word	0x00414199
  40e230:	0040f1c9 	.word	0x0040f1c9
  40e234:	0040a9e9 	.word	0x0040a9e9
  40e238:	00415f51 	.word	0x00415f51
                dash_cnt ++;
  40e23c:	3701      	adds	r7, #1
  40e23e:	b23f      	sxth	r7, r7
            _lv_blend_fill(clip, &fill_area,
  40e240:	2300      	movs	r3, #0
  40e242:	9302      	str	r3, [sp, #8]
  40e244:	7a23      	ldrb	r3, [r4, #8]
  40e246:	9301      	str	r3, [sp, #4]
  40e248:	9000      	str	r0, [sp, #0]
  40e24a:	9b05      	ldr	r3, [sp, #20]
  40e24c:	8822      	ldrh	r2, [r4, #0]
  40e24e:	a933      	add	r1, sp, #204	; 0xcc
  40e250:	a848      	add	r0, sp, #288	; 0x120
  40e252:	47d8      	blx	fp
            fill_area.y1++;
  40e254:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e258:	3301      	adds	r3, #1
  40e25a:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
  40e25e:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
  40e262:	3301      	adds	r3, #1
  40e264:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e268:	3501      	adds	r5, #1
  40e26a:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
  40e26e:	429d      	cmp	r5, r3
  40e270:	dc1f      	bgt.n	40e2b2 <lv_draw_line+0x682>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e272:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e274:	9805      	ldr	r0, [sp, #20]
  40e276:	47c8      	blx	r9
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40e278:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  40e27c:	442a      	add	r2, r5
  40e27e:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  40e282:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
  40e286:	4419      	add	r1, r3
  40e288:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e28a:	b212      	sxth	r2, r2
  40e28c:	b209      	sxth	r1, r1
  40e28e:	9805      	ldr	r0, [sp, #20]
  40e290:	47d0      	blx	sl
            if(dashed) {
  40e292:	2e00      	cmp	r6, #0
  40e294:	d0d4      	beq.n	40e240 <lv_draw_line+0x610>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40e296:	2800      	cmp	r0, #0
  40e298:	d0d0      	beq.n	40e23c <lv_draw_line+0x60c>
                    if(dash_cnt > dsc->dash_width) {
  40e29a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
  40e29e:	42ba      	cmp	r2, r7
  40e2a0:	bfb8      	it	lt
  40e2a2:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40e2a4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40e2a8:	4413      	add	r3, r2
                        dash_cnt = 0;
  40e2aa:	429f      	cmp	r7, r3
  40e2ac:	bfa8      	it	ge
  40e2ae:	2700      	movge	r7, #0
  40e2b0:	e7c4      	b.n	40e23c <lv_draw_line+0x60c>
        _lv_mem_buf_release(mask_buf);
  40e2b2:	9805      	ldr	r0, [sp, #20]
  40e2b4:	4b99      	ldr	r3, [pc, #612]	; (40e51c <lv_draw_line+0x8ec>)
  40e2b6:	4798      	blx	r3
  40e2b8:	e0da      	b.n	40e470 <lv_draw_line+0x840>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
  40e2ba:	015b      	lsls	r3, r3, #5
  40e2bc:	fb93 f3f2 	sdiv	r3, r3, r2
  40e2c0:	e52f      	b.n	40dd22 <lv_draw_line+0xf2>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40e2c2:	fa1f fb86 	uxth.w	fp, r6
  40e2c6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  40e2ca:	b2a9      	uxth	r1, r5
  40e2cc:	eb0b 0208 	add.w	r2, fp, r8
  40e2d0:	2300      	movs	r3, #0
  40e2d2:	9301      	str	r3, [sp, #4]
  40e2d4:	460f      	mov	r7, r1
  40e2d6:	4488      	add	r8, r1
  40e2d8:	fa0f f388 	sxth.w	r3, r8
  40e2dc:	9300      	str	r3, [sp, #0]
  40e2de:	4653      	mov	r3, sl
  40e2e0:	b212      	sxth	r2, r2
  40e2e2:	9905      	ldr	r1, [sp, #20]
  40e2e4:	a812      	add	r0, sp, #72	; 0x48
  40e2e6:	f8df 8238 	ldr.w	r8, [pc, #568]	; 40e520 <lv_draw_line+0x8f0>
  40e2ea:	47c0      	blx	r8
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40e2ec:	fa1f f389 	uxth.w	r3, r9
  40e2f0:	ebab 0203 	sub.w	r2, fp, r3
  40e2f4:	2101      	movs	r1, #1
  40e2f6:	9101      	str	r1, [sp, #4]
  40e2f8:	1afb      	subs	r3, r7, r3
  40e2fa:	b21b      	sxth	r3, r3
  40e2fc:	9300      	str	r3, [sp, #0]
  40e2fe:	4653      	mov	r3, sl
  40e300:	b212      	sxth	r2, r2
  40e302:	9905      	ldr	r1, [sp, #20]
  40e304:	a81d      	add	r0, sp, #116	; 0x74
  40e306:	47c0      	blx	r8
  40e308:	e56b      	b.n	40dde2 <lv_draw_line+0x1b2>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
  40e30a:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40e30e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  40e312:	fa1f f38a 	uxth.w	r3, sl
  40e316:	461f      	mov	r7, r3
  40e318:	4443      	add	r3, r8
  40e31a:	44d8      	add	r8, fp
  40e31c:	2200      	movs	r2, #0
  40e31e:	9201      	str	r2, [sp, #4]
  40e320:	9500      	str	r5, [sp, #0]
  40e322:	b21b      	sxth	r3, r3
  40e324:	4632      	mov	r2, r6
  40e326:	fa0f f188 	sxth.w	r1, r8
  40e32a:	a812      	add	r0, sp, #72	; 0x48
  40e32c:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 40e520 <lv_draw_line+0x8f0>
  40e330:	47c0      	blx	r8
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
  40e332:	fa1f f989 	uxth.w	r9, r9
  40e336:	eba7 0309 	sub.w	r3, r7, r9
  40e33a:	ebab 0909 	sub.w	r9, fp, r9
  40e33e:	2201      	movs	r2, #1
  40e340:	9201      	str	r2, [sp, #4]
  40e342:	9500      	str	r5, [sp, #0]
  40e344:	b21b      	sxth	r3, r3
  40e346:	4632      	mov	r2, r6
  40e348:	fa0f f189 	sxth.w	r1, r9
  40e34c:	a81d      	add	r0, sp, #116	; 0x74
  40e34e:	47c0      	blx	r8
  40e350:	e547      	b.n	40dde2 <lv_draw_line+0x1b2>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
  40e352:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  40e356:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  40e35a:	9905      	ldr	r1, [sp, #20]
  40e35c:	eba1 0308 	sub.w	r3, r1, r8
  40e360:	2203      	movs	r2, #3
  40e362:	9201      	str	r2, [sp, #4]
  40e364:	eb09 0206 	add.w	r2, r9, r6
  40e368:	b212      	sxth	r2, r2
  40e36a:	9200      	str	r2, [sp, #0]
  40e36c:	b21b      	sxth	r3, r3
  40e36e:	4632      	mov	r2, r6
  40e370:	a828      	add	r0, sp, #160	; 0xa0
  40e372:	4e6b      	ldr	r6, [pc, #428]	; (40e520 <lv_draw_line+0x8f0>)
  40e374:	47b0      	blx	r6
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
  40e376:	ebaa 0308 	sub.w	r3, sl, r8
  40e37a:	2202      	movs	r2, #2
  40e37c:	9201      	str	r2, [sp, #4]
  40e37e:	eb09 0205 	add.w	r2, r9, r5
  40e382:	b212      	sxth	r2, r2
  40e384:	9200      	str	r2, [sp, #0]
  40e386:	b21b      	sxth	r3, r3
  40e388:	462a      	mov	r2, r5
  40e38a:	4651      	mov	r1, sl
  40e38c:	a833      	add	r0, sp, #204	; 0xcc
  40e38e:	47b0      	blx	r6
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
  40e390:	2100      	movs	r1, #0
  40e392:	a828      	add	r0, sp, #160	; 0xa0
  40e394:	4d63      	ldr	r5, [pc, #396]	; (40e524 <lv_draw_line+0x8f4>)
  40e396:	47a8      	blx	r5
  40e398:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
  40e39a:	2100      	movs	r1, #0
  40e39c:	a833      	add	r0, sp, #204	; 0xcc
  40e39e:	47a8      	blx	r5
  40e3a0:	900d      	str	r0, [sp, #52]	; 0x34
  40e3a2:	e531      	b.n	40de08 <lv_draw_line+0x1d8>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40e3a4:	a80e      	add	r0, sp, #56	; 0x38
  40e3a6:	4b60      	ldr	r3, [pc, #384]	; (40e528 <lv_draw_line+0x8f8>)
  40e3a8:	4798      	blx	r3
  40e3aa:	4683      	mov	fp, r0
  40e3ac:	e557      	b.n	40de5e <lv_draw_line+0x22e>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
  40e3ae:	4629      	mov	r1, r5
  40e3b0:	4640      	mov	r0, r8
  40e3b2:	4b5e      	ldr	r3, [pc, #376]	; (40e52c <lv_draw_line+0x8fc>)
  40e3b4:	4798      	blx	r3
  40e3b6:	e02d      	b.n	40e414 <lv_draw_line+0x7e4>
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
  40e3b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e3ba:	7a53      	ldrb	r3, [r2, #9]
            _lv_blend_fill(&fill_area, clip,
  40e3bc:	f003 0303 	and.w	r3, r3, #3
  40e3c0:	9302      	str	r3, [sp, #8]
  40e3c2:	7a13      	ldrb	r3, [r2, #8]
  40e3c4:	9301      	str	r3, [sp, #4]
  40e3c6:	2302      	movs	r3, #2
  40e3c8:	9300      	str	r3, [sp, #0]
  40e3ca:	464b      	mov	r3, r9
  40e3cc:	8812      	ldrh	r2, [r2, #0]
  40e3ce:	a948      	add	r1, sp, #288	; 0x120
  40e3d0:	a810      	add	r0, sp, #64	; 0x40
  40e3d2:	4c57      	ldr	r4, [pc, #348]	; (40e530 <lv_draw_line+0x900>)
  40e3d4:	47a0      	blx	r4

            fill_area.y1 = fill_area.y2 + 1;
  40e3d6:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  40e3da:	3301      	adds	r3, #1
  40e3dc:	b21b      	sxth	r3, r3
  40e3de:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
  40e3e2:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
  40e3e6:	4659      	mov	r1, fp
  40e3e8:	4648      	mov	r0, r9
  40e3ea:	4b52      	ldr	r3, [pc, #328]	; (40e534 <lv_draw_line+0x904>)
  40e3ec:	4798      	blx	r3
            mask_p = 0;
  40e3ee:	2700      	movs	r7, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40e3f0:	3601      	adds	r6, #1
  40e3f2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  40e3f6:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
  40e3fa:	4413      	add	r3, r2
  40e3fc:	429e      	cmp	r6, r3
  40e3fe:	dc13      	bgt.n	40e428 <lv_draw_line+0x7f8>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
  40e400:	eb09 0807 	add.w	r8, r9, r7
  40e404:	462b      	mov	r3, r5
  40e406:	b232      	sxth	r2, r6
  40e408:	9905      	ldr	r1, [sp, #20]
  40e40a:	4640      	mov	r0, r8
  40e40c:	4c4a      	ldr	r4, [pc, #296]	; (40e538 <lv_draw_line+0x908>)
  40e40e:	47a0      	blx	r4
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40e410:	2800      	cmp	r0, #0
  40e412:	d0cc      	beq.n	40e3ae <lv_draw_line+0x77e>
        mask_p += draw_area_w;
  40e414:	442f      	add	r7, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
  40e416:	19eb      	adds	r3, r5, r7
  40e418:	459b      	cmp	fp, r3
  40e41a:	d9cd      	bls.n	40e3b8 <lv_draw_line+0x788>
            fill_area.y2 ++;
  40e41c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  40e420:	3301      	adds	r3, #1
  40e422:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
  40e426:	e7e3      	b.n	40e3f0 <lv_draw_line+0x7c0>
  40e428:	9c09      	ldr	r4, [sp, #36]	; 0x24
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
  40e42a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40e42e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  40e432:	429a      	cmp	r2, r3
  40e434:	d010      	beq.n	40e458 <lv_draw_line+0x828>
        fill_area.y2--;
  40e436:	3b01      	subs	r3, #1
  40e438:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
  40e43c:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(&fill_area, clip,
  40e43e:	f003 0303 	and.w	r3, r3, #3
  40e442:	9302      	str	r3, [sp, #8]
  40e444:	7a23      	ldrb	r3, [r4, #8]
  40e446:	9301      	str	r3, [sp, #4]
  40e448:	2302      	movs	r3, #2
  40e44a:	9300      	str	r3, [sp, #0]
  40e44c:	464b      	mov	r3, r9
  40e44e:	8822      	ldrh	r2, [r4, #0]
  40e450:	a948      	add	r1, sp, #288	; 0x120
  40e452:	a810      	add	r0, sp, #64	; 0x40
  40e454:	4d36      	ldr	r5, [pc, #216]	; (40e530 <lv_draw_line+0x900>)
  40e456:	47a8      	blx	r5

    }

    _lv_mem_buf_release(mask_buf);
  40e458:	4648      	mov	r0, r9
  40e45a:	4b30      	ldr	r3, [pc, #192]	; (40e51c <lv_draw_line+0x8ec>)
  40e45c:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
  40e45e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e460:	4d36      	ldr	r5, [pc, #216]	; (40e53c <lv_draw_line+0x90c>)
  40e462:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_right_id);
  40e464:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e466:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_top_id);
  40e468:	980a      	ldr	r0, [sp, #40]	; 0x28
  40e46a:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_bottom_id);
  40e46c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e46e:	47a8      	blx	r5
    if(dsc->round_end || dsc->round_start) {
  40e470:	7a63      	ldrb	r3, [r4, #9]
  40e472:	f013 0f0c 	tst.w	r3, #12
  40e476:	d102      	bne.n	40e47e <lv_draw_line+0x84e>
}
  40e478:	b04b      	add	sp, #300	; 0x12c
  40e47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_draw_rect_dsc_init(&cir_dsc);
  40e47e:	a833      	add	r0, sp, #204	; 0xcc
  40e480:	4b2f      	ldr	r3, [pc, #188]	; (40e540 <lv_draw_line+0x910>)
  40e482:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
  40e484:	8823      	ldrh	r3, [r4, #0]
  40e486:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        cir_dsc.radius = LV_RADIUS_CIRCLE;
  40e48a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  40e48e:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        cir_dsc.bg_opa = dsc->opa;
  40e492:	7a23      	ldrb	r3, [r4, #8]
  40e494:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        int32_t r = (dsc->width >> 1);
  40e498:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  40e49c:	105e      	asrs	r6, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
  40e49e:	f083 0301 	eor.w	r3, r3, #1
  40e4a2:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
  40e4a6:	7a63      	ldrb	r3, [r4, #9]
  40e4a8:	f013 0f04 	tst.w	r3, #4
  40e4ac:	d11c      	bne.n	40e4e8 <lv_draw_line+0x8b8>
        if(dsc->round_end) {
  40e4ae:	7a63      	ldrb	r3, [r4, #9]
  40e4b0:	f013 0f08 	tst.w	r3, #8
  40e4b4:	d0e0      	beq.n	40e478 <lv_draw_line+0x848>
            cir_area.x1 = point2->x - r;
  40e4b6:	9907      	ldr	r1, [sp, #28]
  40e4b8:	880a      	ldrh	r2, [r1, #0]
  40e4ba:	b2b6      	uxth	r6, r6
  40e4bc:	1b93      	subs	r3, r2, r6
  40e4be:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
            cir_area.y1 = point2->y - r;
  40e4c2:	8849      	ldrh	r1, [r1, #2]
  40e4c4:	1b8b      	subs	r3, r1, r6
  40e4c6:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
            cir_area.x2 = point2->x + r - r_corr;
  40e4ca:	b2ab      	uxth	r3, r5
  40e4cc:	4432      	add	r2, r6
  40e4ce:	1ad2      	subs	r2, r2, r3
  40e4d0:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point2->y + r - r_corr ;
  40e4d4:	440e      	add	r6, r1
  40e4d6:	1af3      	subs	r3, r6, r3
  40e4d8:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40e4dc:	aa33      	add	r2, sp, #204	; 0xcc
  40e4de:	9908      	ldr	r1, [sp, #32]
  40e4e0:	a828      	add	r0, sp, #160	; 0xa0
  40e4e2:	4b18      	ldr	r3, [pc, #96]	; (40e544 <lv_draw_line+0x914>)
  40e4e4:	4798      	blx	r3
  40e4e6:	e7c7      	b.n	40e478 <lv_draw_line+0x848>
            cir_area.x1 = point1->x - r;
  40e4e8:	9806      	ldr	r0, [sp, #24]
  40e4ea:	8802      	ldrh	r2, [r0, #0]
  40e4ec:	b2b3      	uxth	r3, r6
  40e4ee:	1ad1      	subs	r1, r2, r3
  40e4f0:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
            cir_area.y1 = point1->y - r;
  40e4f4:	8840      	ldrh	r0, [r0, #2]
  40e4f6:	1ac1      	subs	r1, r0, r3
  40e4f8:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
            cir_area.x2 = point1->x + r - r_corr;
  40e4fc:	b2a9      	uxth	r1, r5
  40e4fe:	441a      	add	r2, r3
  40e500:	1a52      	subs	r2, r2, r1
  40e502:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point1->y + r - r_corr ;
  40e506:	4403      	add	r3, r0
  40e508:	1a5b      	subs	r3, r3, r1
  40e50a:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40e50e:	aa33      	add	r2, sp, #204	; 0xcc
  40e510:	9908      	ldr	r1, [sp, #32]
  40e512:	a828      	add	r0, sp, #160	; 0xa0
  40e514:	4b0b      	ldr	r3, [pc, #44]	; (40e544 <lv_draw_line+0x914>)
  40e516:	4798      	blx	r3
  40e518:	e7c9      	b.n	40e4ae <lv_draw_line+0x87e>
  40e51a:	bf00      	nop
  40e51c:	0041595d 	.word	0x0041595d
  40e520:	0040f1ed 	.word	0x0040f1ed
  40e524:	0040f0e5 	.word	0x0040f0e5
  40e528:	0041493b 	.word	0x0041493b
  40e52c:	00415ead 	.word	0x00415ead
  40e530:	0040a9e9 	.word	0x0040a9e9
  40e534:	00415f51 	.word	0x00415f51
  40e538:	0040f121 	.word	0x0040f121
  40e53c:	0040f171 	.word	0x0040f171
  40e540:	0040fa91 	.word	0x0040fa91
  40e544:	0040fadd 	.word	0x0040fadd

0040e548 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
  40e548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40e54c:	9c08      	ldr	r4, [sp, #32]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
  40e54e:	8aa5      	ldrh	r5, [r4, #20]
  40e550:	1b52      	subs	r2, r2, r5
  40e552:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
  40e554:	8a65      	ldrh	r5, [r4, #18]
  40e556:	1b4d      	subs	r5, r1, r5
  40e558:	b22d      	sxth	r5, r5

    /*Handle special cases*/
    if(p->steep == 0) {
  40e55a:	6a21      	ldr	r1, [r4, #32]
  40e55c:	2900      	cmp	r1, #0
  40e55e:	d14b      	bne.n	40e5f8 <lv_draw_mask_line+0xb0>
        /*Horizontal*/
        if(p->flat) {
  40e560:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
  40e564:	f011 0f01 	tst.w	r1, #1
  40e568:	d016      	beq.n	40e598 <lv_draw_mask_line+0x50>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
  40e56a:	7c20      	ldrb	r0, [r4, #16]
  40e56c:	f000 0003 	and.w	r0, r0, #3
  40e570:	2801      	cmp	r0, #1
  40e572:	f240 822f 	bls.w	40e9d4 <lv_draw_mask_line+0x48c>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e576:	2802      	cmp	r0, #2
  40e578:	d008      	beq.n	40e58c <lv_draw_mask_line+0x44>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40e57a:	2803      	cmp	r0, #3
  40e57c:	bf14      	ite	ne
  40e57e:	2000      	movne	r0, #0
  40e580:	2001      	moveq	r0, #1
  40e582:	2a00      	cmp	r2, #0
  40e584:	bfd8      	it	le
  40e586:	2000      	movle	r0, #0
  40e588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e58c:	f112 0f01 	cmn.w	r2, #1
  40e590:	d5f3      	bpl.n	40e57a <lv_draw_mask_line+0x32>
  40e592:	2001      	movs	r0, #1
  40e594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
  40e598:	7c22      	ldrb	r2, [r4, #16]
  40e59a:	f002 0203 	and.w	r2, r2, #3
  40e59e:	1e91      	subs	r1, r2, #2
  40e5a0:	b2c9      	uxtb	r1, r1
  40e5a2:	2901      	cmp	r1, #1
  40e5a4:	f240 8219 	bls.w	40e9da <lv_draw_mask_line+0x492>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e5a8:	2a01      	cmp	r2, #1
  40e5aa:	d104      	bne.n	40e5b6 <lv_draw_mask_line+0x6e>
  40e5ac:	2d00      	cmp	r5, #0
  40e5ae:	dd02      	ble.n	40e5b6 <lv_draw_mask_line+0x6e>
  40e5b0:	2001      	movs	r0, #1
  40e5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
  40e5b6:	b98a      	cbnz	r2, 40e5dc <lv_draw_mask_line+0x94>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e5b8:	18e9      	adds	r1, r5, r3
  40e5ba:	f100 8211 	bmi.w	40e9e0 <lv_draw_mask_line+0x498>
                else {
                    int32_t k = - abs_x;
  40e5be:	426d      	negs	r5, r5
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40e5c0:	2d00      	cmp	r5, #0
  40e5c2:	f2c0 8210 	blt.w	40e9e6 <lv_draw_mask_line+0x49e>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40e5c6:	42ab      	cmp	r3, r5
  40e5c8:	dc02      	bgt.n	40e5d0 <lv_draw_mask_line+0x88>
                    return LV_DRAW_MASK_RES_CHANGED;
  40e5ca:	2002      	movs	r0, #2
  40e5cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40e5d0:	4428      	add	r0, r5
  40e5d2:	4bc3      	ldr	r3, [pc, #780]	; (40e8e0 <lv_draw_mask_line+0x398>)
  40e5d4:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40e5d6:	2002      	movs	r0, #2
  40e5d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40e5dc:	42dd      	cmn	r5, r3
  40e5de:	f100 8205 	bmi.w	40e9ec <lv_draw_mask_line+0x4a4>
                else {
                    int32_t k = - abs_x;
  40e5e2:	4269      	negs	r1, r5
  40e5e4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                    if(k < 0) k = 0;
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40e5e8:	428b      	cmp	r3, r1
  40e5ea:	f340 8202 	ble.w	40e9f2 <lv_draw_mask_line+0x4aa>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
  40e5ee:	4bbc      	ldr	r3, [pc, #752]	; (40e8e0 <lv_draw_mask_line+0x398>)
  40e5f0:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40e5f2:	2002      	movs	r0, #2
  40e5f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
  40e5f8:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
  40e5fc:	f016 0f01 	tst.w	r6, #1
  40e600:	d10f      	bne.n	40e622 <lv_draw_mask_line+0xda>
{
    int32_t k;
    int32_t x_at_y;
    /* At the beginning of the mask if the limit line is greater then the mask's y.
     * Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40e602:	69a7      	ldr	r7, [r4, #24]
  40e604:	fb02 f107 	mul.w	r1, r2, r7
  40e608:	1289      	asrs	r1, r1, #10
    if(p->xy_steep > 0) x_at_y++;
  40e60a:	2f00      	cmp	r7, #0
  40e60c:	bfcc      	ite	gt
  40e60e:	f101 0e01 	addgt.w	lr, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40e612:	468e      	movle	lr, r1
    if(x_at_y < abs_x) {
  40e614:	4575      	cmp	r5, lr
  40e616:	f340 8099 	ble.w	40e74c <lv_draw_mask_line+0x204>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40e61a:	f3c6 0040 	ubfx	r0, r6, #1, #1
  40e61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
  40e622:	69e1      	ldr	r1, [r4, #28]
  40e624:	fb05 f701 	mul.w	r7, r5, r1
  40e628:	12bf      	asrs	r7, r7, #10
    if(p->yx_steep > 0) {
  40e62a:	2900      	cmp	r1, #0
  40e62c:	dd06      	ble.n	40e63c <lv_draw_mask_line+0xf4>
        if(y_at_x > abs_y) {
  40e62e:	4297      	cmp	r7, r2
  40e630:	f340 821b 	ble.w	40ea6a <lv_draw_mask_line+0x522>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40e634:	f3c6 0040 	ubfx	r0, r6, #1, #1
  40e638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(y_at_x < abs_y) {
  40e63c:	4297      	cmp	r7, r2
  40e63e:	f280 8205 	bge.w	40ea4c <lv_draw_mask_line+0x504>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40e642:	f3c6 0040 	ubfx	r0, r6, #1, #1
  40e646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(p->inv) {
  40e64a:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40e64e:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40e652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(p->inv) {
  40e656:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40e65a:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40e65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
    if(mask_new <= LV_OPA_MIN) return 0;
  40e662:	2500      	movs	r5, #0
  40e664:	e238      	b.n	40ead8 <lv_draw_mask_line+0x590>
  40e666:	46f4      	mov	ip, lr
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e668:	f888 c000 	strb.w	ip, [r8]
        px_h -= p->spx;
  40e66c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40e66e:	1ad2      	subs	r2, r2, r3
        k++;
  40e670:	3501      	adds	r5, #1
  40e672:	3601      	adds	r6, #1
        if(k >= len) break;
  40e674:	42bd      	cmp	r5, r7
  40e676:	da4a      	bge.n	40e70e <lv_draw_mask_line+0x1c6>
    while(px_h > p->spx) {
  40e678:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40e67a:	429a      	cmp	r2, r3
  40e67c:	dd1d      	ble.n	40e6ba <lv_draw_mask_line+0x172>
        if(k >= 0 && k < len) {
  40e67e:	2d00      	cmp	r5, #0
  40e680:	dbf4      	blt.n	40e66c <lv_draw_mask_line+0x124>
  40e682:	42bd      	cmp	r5, r7
  40e684:	daf2      	bge.n	40e66c <lv_draw_mask_line+0x124>
            m = px_h - (p->spx >> 1);
  40e686:	eba2 0363 	sub.w	r3, r2, r3, asr #1
  40e68a:	b2db      	uxtb	r3, r3
            if(p->inv) m = 255 - m;
  40e68c:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
  40e690:	f01c 0f02 	tst.w	ip, #2
  40e694:	d001      	beq.n	40e69a <lv_draw_mask_line+0x152>
  40e696:	43db      	mvns	r3, r3
  40e698:	b2db      	uxtb	r3, r3
  40e69a:	46b0      	mov	r8, r6
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e69c:	f896 c000 	ldrb.w	ip, [r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e6a0:	2bfc      	cmp	r3, #252	; 0xfc
  40e6a2:	d8e1      	bhi.n	40e668 <lv_draw_mask_line+0x120>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e6a4:	2b02      	cmp	r3, #2
  40e6a6:	d9de      	bls.n	40e666 <lv_draw_mask_line+0x11e>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e6a8:	fb03 f30c 	mul.w	r3, r3, ip
  40e6ac:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  40e6b0:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  40e6b4:	f3c3 5cc7 	ubfx	ip, r3, #23, #8
  40e6b8:	e7d6      	b.n	40e668 <lv_draw_mask_line+0x120>
    if(k < len && k >= 0) {
  40e6ba:	2d00      	cmp	r5, #0
  40e6bc:	db27      	blt.n	40e70e <lv_draw_mask_line+0x1c6>
  40e6be:	42bd      	cmp	r5, r7
  40e6c0:	da25      	bge.n	40e70e <lv_draw_mask_line+0x1c6>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
  40e6c2:	69a3      	ldr	r3, [r4, #24]
  40e6c4:	fb03 f302 	mul.w	r3, r3, r2
  40e6c8:	129b      	asrs	r3, r3, #10
        m = (x_inters * px_h) >> 9;
  40e6ca:	fb02 f203 	mul.w	r2, r2, r3
  40e6ce:	f3c2 2247 	ubfx	r2, r2, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
  40e6d2:	69e3      	ldr	r3, [r4, #28]
  40e6d4:	2b00      	cmp	r3, #0
  40e6d6:	db15      	blt.n	40e704 <lv_draw_mask_line+0x1bc>
        if(p->inv) m = 255 - m;
  40e6d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40e6dc:	f013 0f02 	tst.w	r3, #2
  40e6e0:	d001      	beq.n	40e6e6 <lv_draw_mask_line+0x19e>
  40e6e2:	43d2      	mvns	r2, r2
  40e6e4:	b2d2      	uxtb	r2, r2
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40e6e6:	1946      	adds	r6, r0, r5
  40e6e8:	5d43      	ldrb	r3, [r0, r5]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e6ea:	2afc      	cmp	r2, #252	; 0xfc
  40e6ec:	d80e      	bhi.n	40e70c <lv_draw_mask_line+0x1c4>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e6ee:	2a02      	cmp	r2, #2
  40e6f0:	d90b      	bls.n	40e70a <lv_draw_mask_line+0x1c2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e6f2:	fb02 f203 	mul.w	r2, r2, r3
  40e6f6:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40e6fa:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40e6fe:	f3c2 53c7 	ubfx	r3, r2, #23, #8
  40e702:	e003      	b.n	40e70c <lv_draw_mask_line+0x1c4>
        if(p->yx_steep < 0) m = 255 - m;
  40e704:	43d2      	mvns	r2, r2
  40e706:	b2d2      	uxtb	r2, r2
  40e708:	e7e6      	b.n	40e6d8 <lv_draw_mask_line+0x190>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e70a:	2300      	movs	r3, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40e70c:	7033      	strb	r3, [r6, #0]
    if(p->inv) {
  40e70e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40e712:	f013 0f02 	tst.w	r3, #2
  40e716:	d00a      	beq.n	40e72e <lv_draw_mask_line+0x1e6>
        if(k > len) {
  40e718:	428f      	cmp	r7, r1
  40e71a:	f2c0 816d 	blt.w	40e9f8 <lv_draw_mask_line+0x4b0>
        if(k >= 0) {
  40e71e:	2900      	cmp	r1, #0
  40e720:	f2c0 816d 	blt.w	40e9fe <lv_draw_mask_line+0x4b6>
            _lv_memset_00(&mask_buf[0], k);
  40e724:	4b6e      	ldr	r3, [pc, #440]	; (40e8e0 <lv_draw_mask_line+0x398>)
  40e726:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e728:	2002      	movs	r0, #2
  40e72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(k < 0) {
  40e72e:	3501      	adds	r5, #1
  40e730:	f100 8168 	bmi.w	40ea04 <lv_draw_mask_line+0x4bc>
        if(k <= len) {
  40e734:	42bd      	cmp	r5, r7
  40e736:	dd02      	ble.n	40e73e <lv_draw_mask_line+0x1f6>
    return LV_DRAW_MASK_RES_CHANGED;
  40e738:	2002      	movs	r0, #2
  40e73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            _lv_memset_00(&mask_buf[k], len - k);
  40e73e:	1b79      	subs	r1, r7, r5
  40e740:	4428      	add	r0, r5
  40e742:	4b67      	ldr	r3, [pc, #412]	; (40e8e0 <lv_draw_mask_line+0x398>)
  40e744:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e746:	2002      	movs	r0, #2
  40e748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(x_at_y > abs_x + len) {
  40e74c:	eb05 0e03 	add.w	lr, r5, r3
  40e750:	4571      	cmp	r1, lr
  40e752:	dd05      	ble.n	40e760 <lv_draw_mask_line+0x218>
        if(p->inv) {
  40e754:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40e758:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40e75c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
  40e760:	ea4f 2e02 	mov.w	lr, r2, lsl #8
  40e764:	fb07 fe0e 	mul.w	lr, r7, lr
    int32_t xsi = xs >> 8;
  40e768:	ea4f 48ae 	mov.w	r8, lr, asr #18
    int32_t xsf = xs & 0xFF;
  40e76c:	f3ce 2e87 	ubfx	lr, lr, #10, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40e770:	3201      	adds	r2, #1
  40e772:	0212      	lsls	r2, r2, #8
  40e774:	fb07 f202 	mul.w	r2, r7, r2
    int32_t xei = xe >> 8;
  40e778:	ea4f 4ca2 	mov.w	ip, r2, asr #18
    k = xsi - abs_x;
  40e77c:	eba8 0105 	sub.w	r1, r8, r5
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40e780:	fabe f98e 	clz	r9, lr
  40e784:	ea4f 1959 	mov.w	r9, r9, lsr #5
  40e788:	45e0      	cmp	r8, ip
  40e78a:	bf08      	it	eq
  40e78c:	f04f 0900 	moveq.w	r9, #0
  40e790:	f1b9 0f00 	cmp.w	r9, #0
  40e794:	d021      	beq.n	40e7da <lv_draw_mask_line+0x292>
  40e796:	2f00      	cmp	r7, #0
  40e798:	da1f      	bge.n	40e7da <lv_draw_mask_line+0x292>
        k--;
  40e79a:	3901      	subs	r1, #1
        xsf = 0xFF;
  40e79c:	f04f 0eff 	mov.w	lr, #255	; 0xff
        if(k >= 0 && k < len) {
  40e7a0:	428b      	cmp	r3, r1
  40e7a2:	dd7a      	ble.n	40e89a <lv_draw_mask_line+0x352>
  40e7a4:	2900      	cmp	r1, #0
  40e7a6:	db78      	blt.n	40e89a <lv_draw_mask_line+0x352>
    int32_t xef = xe & 0xFF;
  40e7a8:	f3c2 2287 	ubfx	r2, r2, #10, #8
            m = (xsf + xef) >> 1;
  40e7ac:	4472      	add	r2, lr
  40e7ae:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
  40e7b2:	f016 0f02 	tst.w	r6, #2
  40e7b6:	d001      	beq.n	40e7bc <lv_draw_mask_line+0x274>
  40e7b8:	43d2      	mvns	r2, r2
  40e7ba:	b2d2      	uxtb	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e7bc:	1847      	adds	r7, r0, r1
  40e7be:	5c46      	ldrb	r6, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e7c0:	2afc      	cmp	r2, #252	; 0xfc
  40e7c2:	d869      	bhi.n	40e898 <lv_draw_mask_line+0x350>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e7c4:	2a02      	cmp	r2, #2
  40e7c6:	d966      	bls.n	40e896 <lv_draw_mask_line+0x34e>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e7c8:	fb02 f206 	mul.w	r2, r2, r6
  40e7cc:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40e7d0:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40e7d4:	f3c2 56c7 	ubfx	r6, r2, #23, #8
  40e7d8:	e05e      	b.n	40e898 <lv_draw_mask_line+0x350>
    if(xsi == xei) {
  40e7da:	45e0      	cmp	r8, ip
  40e7dc:	d0e0      	beq.n	40e7a0 <lv_draw_mask_line+0x258>
        if(p->xy_steep < 0) {
  40e7de:	2f00      	cmp	r7, #0
  40e7e0:	f2c0 8080 	blt.w	40e8e4 <lv_draw_mask_line+0x39c>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
  40e7e4:	f1ce 0eff 	rsb	lr, lr, #255	; 0xff
  40e7e8:	69e2      	ldr	r2, [r4, #28]
  40e7ea:	fb02 f20e 	mul.w	r2, r2, lr
  40e7ee:	1295      	asrs	r5, r2, #10
            if(k >= 0 && k < len) {
  40e7f0:	428b      	cmp	r3, r1
  40e7f2:	dd1a      	ble.n	40e82a <lv_draw_mask_line+0x2e2>
  40e7f4:	2900      	cmp	r1, #0
  40e7f6:	db18      	blt.n	40e82a <lv_draw_mask_line+0x2e2>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40e7f8:	fb05 fe0e 	mul.w	lr, r5, lr
  40e7fc:	f3ce 2247 	ubfx	r2, lr, #9, #8
                if(p->inv) m = 255 - m;
  40e800:	f016 0f02 	tst.w	r6, #2
  40e804:	d101      	bne.n	40e80a <lv_draw_mask_line+0x2c2>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40e806:	43d2      	mvns	r2, r2
  40e808:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e80a:	1847      	adds	r7, r0, r1
  40e80c:	5c46      	ldrb	r6, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e80e:	2afc      	cmp	r2, #252	; 0xfc
  40e810:	d80a      	bhi.n	40e828 <lv_draw_mask_line+0x2e0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e812:	2a02      	cmp	r2, #2
  40e814:	f240 80cb 	bls.w	40e9ae <lv_draw_mask_line+0x466>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e818:	fb02 f206 	mul.w	r2, r2, r6
  40e81c:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40e820:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40e824:	f3c2 56c7 	ubfx	r6, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e828:	703e      	strb	r6, [r7, #0]
            k++;
  40e82a:	1c4e      	adds	r6, r1, #1
            if(k >= 0 && k < len) {
  40e82c:	42b3      	cmp	r3, r6
  40e82e:	dd21      	ble.n	40e874 <lv_draw_mask_line+0x32c>
  40e830:	2e00      	cmp	r6, #0
  40e832:	db1f      	blt.n	40e874 <lv_draw_mask_line+0x32c>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
  40e834:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  40e838:	69a5      	ldr	r5, [r4, #24]
  40e83a:	fb05 f502 	mul.w	r5, r5, r2
  40e83e:	12ad      	asrs	r5, r5, #10
                m = ((255 - y_inters) * x_inters) >> 9;
  40e840:	fb02 f205 	mul.w	r2, r2, r5
  40e844:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  40e848:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40e84c:	f015 0f02 	tst.w	r5, #2
  40e850:	d001      	beq.n	40e856 <lv_draw_mask_line+0x30e>
  40e852:	43d2      	mvns	r2, r2
  40e854:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e856:	5d85      	ldrb	r5, [r0, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e858:	2afc      	cmp	r2, #252	; 0xfc
  40e85a:	d80a      	bhi.n	40e872 <lv_draw_mask_line+0x32a>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e85c:	2a02      	cmp	r2, #2
  40e85e:	f240 80a8 	bls.w	40e9b2 <lv_draw_mask_line+0x46a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e862:	fb02 f205 	mul.w	r2, r2, r5
  40e866:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40e86a:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40e86e:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e872:	5585      	strb	r5, [r0, r6]
            if(p->inv) {
  40e874:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
  40e878:	f012 0f02 	tst.w	r2, #2
  40e87c:	f000 809b 	beq.w	40e9b6 <lv_draw_mask_line+0x46e>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40e880:	428b      	cmp	r3, r1
  40e882:	f2c0 80d7 	blt.w	40ea34 <lv_draw_mask_line+0x4ec>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
  40e886:	2900      	cmp	r1, #0
  40e888:	f2c0 80d7 	blt.w	40ea3a <lv_draw_mask_line+0x4f2>
  40e88c:	4b14      	ldr	r3, [pc, #80]	; (40e8e0 <lv_draw_mask_line+0x398>)
  40e88e:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e890:	2002      	movs	r0, #2
  40e892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40e896:	2600      	movs	r6, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e898:	703e      	strb	r6, [r7, #0]
        if(p->inv) {
  40e89a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
  40e89e:	f012 0f02 	tst.w	r2, #2
  40e8a2:	d00c      	beq.n	40e8be <lv_draw_mask_line+0x376>
            k = xsi - abs_x;
  40e8a4:	ebac 0105 	sub.w	r1, ip, r5
            if(k >= len) {
  40e8a8:	428b      	cmp	r3, r1
  40e8aa:	f340 80ae 	ble.w	40ea0a <lv_draw_mask_line+0x4c2>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
  40e8ae:	2900      	cmp	r1, #0
  40e8b0:	f2c0 80ae 	blt.w	40ea10 <lv_draw_mask_line+0x4c8>
  40e8b4:	4b0a      	ldr	r3, [pc, #40]	; (40e8e0 <lv_draw_mask_line+0x398>)
  40e8b6:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e8b8:	2002      	movs	r0, #2
  40e8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        k++;
  40e8be:	1c4a      	adds	r2, r1, #1
  40e8c0:	429a      	cmp	r2, r3
  40e8c2:	bfa8      	it	ge
  40e8c4:	461a      	movge	r2, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40e8c6:	2a00      	cmp	r2, #0
  40e8c8:	f000 80a5 	beq.w	40ea16 <lv_draw_mask_line+0x4ce>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40e8cc:	2a00      	cmp	r2, #0
  40e8ce:	f340 80a5 	ble.w	40ea1c <lv_draw_mask_line+0x4d4>
  40e8d2:	1a99      	subs	r1, r3, r2
  40e8d4:	4410      	add	r0, r2
  40e8d6:	4b02      	ldr	r3, [pc, #8]	; (40e8e0 <lv_draw_mask_line+0x398>)
  40e8d8:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e8da:	2002      	movs	r0, #2
  40e8dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40e8e0:	00415ead 	.word	0x00415ead
            y_inters = (xsf * (-p->yx_steep)) >> 10;
  40e8e4:	69e2      	ldr	r2, [r4, #28]
  40e8e6:	4252      	negs	r2, r2
  40e8e8:	fb0e f202 	mul.w	r2, lr, r2
  40e8ec:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40e8ee:	428b      	cmp	r3, r1
  40e8f0:	dd19      	ble.n	40e926 <lv_draw_mask_line+0x3de>
  40e8f2:	2900      	cmp	r1, #0
  40e8f4:	db17      	blt.n	40e926 <lv_draw_mask_line+0x3de>
                m = (y_inters * xsf) >> 9;
  40e8f6:	fb02 f50e 	mul.w	r5, r2, lr
  40e8fa:	f3c5 2547 	ubfx	r5, r5, #9, #8
                if(p->inv) m = 255 - m;
  40e8fe:	f016 0f02 	tst.w	r6, #2
  40e902:	d001      	beq.n	40e908 <lv_draw_mask_line+0x3c0>
  40e904:	43ed      	mvns	r5, r5
  40e906:	b2ed      	uxtb	r5, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e908:	1847      	adds	r7, r0, r1
  40e90a:	5c46      	ldrb	r6, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e90c:	2dfc      	cmp	r5, #252	; 0xfc
  40e90e:	d809      	bhi.n	40e924 <lv_draw_mask_line+0x3dc>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e910:	2d02      	cmp	r5, #2
  40e912:	d93c      	bls.n	40e98e <lv_draw_mask_line+0x446>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e914:	fb05 f506 	mul.w	r5, r5, r6
  40e918:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  40e91c:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
  40e920:	f3c5 56c7 	ubfx	r6, r5, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e924:	703e      	strb	r6, [r7, #0]
            k--;
  40e926:	1e4d      	subs	r5, r1, #1
            if(k >= 0 && k < len) {
  40e928:	42ab      	cmp	r3, r5
  40e92a:	dd21      	ble.n	40e970 <lv_draw_mask_line+0x428>
  40e92c:	2d00      	cmp	r5, #0
  40e92e:	db1f      	blt.n	40e970 <lv_draw_mask_line+0x428>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
  40e930:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  40e934:	69a6      	ldr	r6, [r4, #24]
  40e936:	4276      	negs	r6, r6
  40e938:	fb02 f606 	mul.w	r6, r2, r6
  40e93c:	12b6      	asrs	r6, r6, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40e93e:	fb02 f206 	mul.w	r2, r2, r6
  40e942:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  40e946:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
  40e94a:	f016 0f02 	tst.w	r6, #2
  40e94e:	d101      	bne.n	40e954 <lv_draw_mask_line+0x40c>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40e950:	43d2      	mvns	r2, r2
  40e952:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e954:	5d46      	ldrb	r6, [r0, r5]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e956:	2afc      	cmp	r2, #252	; 0xfc
  40e958:	d809      	bhi.n	40e96e <lv_draw_mask_line+0x426>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e95a:	2a02      	cmp	r2, #2
  40e95c:	d919      	bls.n	40e992 <lv_draw_mask_line+0x44a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e95e:	fb02 f206 	mul.w	r2, r2, r6
  40e962:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40e966:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40e96a:	f3c2 56c7 	ubfx	r6, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40e96e:	5546      	strb	r6, [r0, r5]
            if(p->inv) {
  40e970:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
  40e974:	f012 0f02 	tst.w	r2, #2
  40e978:	d00d      	beq.n	40e996 <lv_draw_mask_line+0x44e>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
  40e97a:	2d00      	cmp	r5, #0
  40e97c:	dd51      	ble.n	40ea22 <lv_draw_mask_line+0x4da>
  40e97e:	42ab      	cmp	r3, r5
  40e980:	db4f      	blt.n	40ea22 <lv_draw_mask_line+0x4da>
  40e982:	4629      	mov	r1, r5
  40e984:	4b59      	ldr	r3, [pc, #356]	; (40eaec <lv_draw_mask_line+0x5a4>)
  40e986:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e988:	2002      	movs	r0, #2
  40e98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40e98e:	2600      	movs	r6, #0
  40e990:	e7c8      	b.n	40e924 <lv_draw_mask_line+0x3dc>
  40e992:	2600      	movs	r6, #0
  40e994:	e7eb      	b.n	40e96e <lv_draw_mask_line+0x426>
            k += 2;
  40e996:	1c4a      	adds	r2, r1, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40e998:	4293      	cmp	r3, r2
  40e99a:	db45      	blt.n	40ea28 <lv_draw_mask_line+0x4e0>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
  40e99c:	2a00      	cmp	r2, #0
  40e99e:	db46      	blt.n	40ea2e <lv_draw_mask_line+0x4e6>
  40e9a0:	1a99      	subs	r1, r3, r2
  40e9a2:	4410      	add	r0, r2
  40e9a4:	4b51      	ldr	r3, [pc, #324]	; (40eaec <lv_draw_mask_line+0x5a4>)
  40e9a6:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e9a8:	2002      	movs	r0, #2
  40e9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40e9ae:	2600      	movs	r6, #0
  40e9b0:	e73a      	b.n	40e828 <lv_draw_mask_line+0x2e0>
  40e9b2:	2500      	movs	r5, #0
  40e9b4:	e75d      	b.n	40e872 <lv_draw_mask_line+0x32a>
            k++;
  40e9b6:	1c8a      	adds	r2, r1, #2
  40e9b8:	429a      	cmp	r2, r3
  40e9ba:	bfa8      	it	ge
  40e9bc:	461a      	movge	r2, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40e9be:	2a00      	cmp	r2, #0
  40e9c0:	d03e      	beq.n	40ea40 <lv_draw_mask_line+0x4f8>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40e9c2:	2a00      	cmp	r2, #0
  40e9c4:	dd3f      	ble.n	40ea46 <lv_draw_mask_line+0x4fe>
  40e9c6:	1a99      	subs	r1, r3, r2
  40e9c8:	4410      	add	r0, r2
  40e9ca:	4b48      	ldr	r3, [pc, #288]	; (40eaec <lv_draw_mask_line+0x5a4>)
  40e9cc:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e9ce:	2002      	movs	r0, #2
  40e9d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40e9d4:	2001      	movs	r0, #1
  40e9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
  40e9da:	2001      	movs	r0, #1
  40e9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40e9e0:	2001      	movs	r0, #1
  40e9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40e9e6:	2000      	movs	r0, #0
  40e9e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40e9ec:	2000      	movs	r0, #0
  40e9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40e9f2:	2000      	movs	r0, #0
  40e9f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40e9f8:	2000      	movs	r0, #0
  40e9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40e9fe:	2002      	movs	r0, #2
  40ea00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40ea04:	2000      	movs	r0, #0
  40ea06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40ea0a:	2000      	movs	r0, #0
  40ea0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ea10:	2002      	movs	r0, #2
  40ea12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40ea16:	2000      	movs	r0, #0
  40ea18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ea1c:	2002      	movs	r0, #2
  40ea1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ea22:	2002      	movs	r0, #2
  40ea24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40ea28:	2001      	movs	r0, #1
  40ea2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ea2e:	2002      	movs	r0, #2
  40ea30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40ea34:	2000      	movs	r0, #0
  40ea36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ea3a:	2002      	movs	r0, #2
  40ea3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40ea40:	2000      	movs	r0, #0
  40ea42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ea46:	2002      	movs	r0, #2
  40ea48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
  40ea4c:	461f      	mov	r7, r3
  40ea4e:	442b      	add	r3, r5
  40ea50:	fb01 f103 	mul.w	r1, r1, r3
        if(y_at_x > abs_y) {
  40ea54:	ebb2 2fa1 	cmp.w	r2, r1, asr #10
  40ea58:	f6ff adfd 	blt.w	40e656 <lv_draw_mask_line+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40ea5c:	3201      	adds	r2, #1
  40ea5e:	0212      	lsls	r2, r2, #8
  40ea60:	69a3      	ldr	r3, [r4, #24]
  40ea62:	fb03 f302 	mul.w	r3, r3, r2
  40ea66:	129b      	asrs	r3, r3, #10
  40ea68:	e00c      	b.n	40ea84 <lv_draw_mask_line+0x53c>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
  40ea6a:	461f      	mov	r7, r3
  40ea6c:	442b      	add	r3, r5
  40ea6e:	fb01 f303 	mul.w	r3, r1, r3
        if(y_at_x < abs_y) {
  40ea72:	ebb2 2fa3 	cmp.w	r2, r3, asr #10
  40ea76:	f73f ade8 	bgt.w	40e64a <lv_draw_mask_line+0x102>
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
  40ea7a:	0212      	lsls	r2, r2, #8
  40ea7c:	69a3      	ldr	r3, [r4, #24]
  40ea7e:	fb03 f302 	mul.w	r3, r3, r2
  40ea82:	129b      	asrs	r3, r3, #10
    int32_t xei = xe >> 8;
  40ea84:	1219      	asrs	r1, r3, #8
    if(xef == 0) px_h = 255;
  40ea86:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  40ea8a:	d02b      	beq.n	40eae4 <lv_draw_mask_line+0x59c>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
  40ea8c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  40ea90:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40ea92:	fb02 f203 	mul.w	r2, r2, r3
  40ea96:	ea4f 2e22 	mov.w	lr, r2, asr #8
  40ea9a:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
    int32_t k = xei - abs_x;
  40ea9e:	1b49      	subs	r1, r1, r5
        if(k >= 0 && k < len) {
  40eaa0:	42b9      	cmp	r1, r7
  40eaa2:	da1a      	bge.n	40eada <lv_draw_mask_line+0x592>
  40eaa4:	2900      	cmp	r1, #0
  40eaa6:	db18      	blt.n	40eada <lv_draw_mask_line+0x592>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40eaa8:	fb0e f303 	mul.w	r3, lr, r3
  40eaac:	f3c3 2347 	ubfx	r3, r3, #9, #8
            if(p->inv) m = 255 - m;
  40eab0:	f016 0f02 	tst.w	r6, #2
  40eab4:	d101      	bne.n	40eaba <lv_draw_mask_line+0x572>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40eab6:	43db      	mvns	r3, r3
  40eab8:	b2db      	uxtb	r3, r3
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40eaba:	1846      	adds	r6, r0, r1
  40eabc:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40eabe:	2bfc      	cmp	r3, #252	; 0xfc
  40eac0:	d80a      	bhi.n	40ead8 <lv_draw_mask_line+0x590>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eac2:	2b02      	cmp	r3, #2
  40eac4:	f67f adcd 	bls.w	40e662 <lv_draw_mask_line+0x11a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40eac8:	fb03 f305 	mul.w	r3, r3, r5
  40eacc:	eb03 2503 	add.w	r5, r3, r3, lsl #8
  40ead0:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
  40ead4:	f3c3 55c7 	ubfx	r5, r3, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40ead8:	7035      	strb	r5, [r6, #0]
        k++;
  40eada:	1c4d      	adds	r5, r1, #1
  40eadc:	1946      	adds	r6, r0, r5
    if(mask_new <= LV_OPA_MIN) return 0;
  40eade:	f04f 0e00 	mov.w	lr, #0
  40eae2:	e5c9      	b.n	40e678 <lv_draw_mask_line+0x130>
    int32_t k = xei - abs_x;
  40eae4:	1b4d      	subs	r5, r1, r5
  40eae6:	4629      	mov	r1, r5
    if(xef == 0) px_h = 255;
  40eae8:	22ff      	movs	r2, #255	; 0xff
  40eaea:	e7f7      	b.n	40eadc <lv_draw_mask_line+0x594>
  40eaec:	00415ead 	.word	0x00415ead

0040eaf0 <lv_draw_mask_radius>:
{
  40eaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40eaf4:	b08d      	sub	sp, #52	; 0x34
  40eaf6:	9d16      	ldr	r5, [sp, #88]	; 0x58
    bool outer = p->cfg.outer;
  40eaf8:	7cae      	ldrb	r6, [r5, #18]
  40eafa:	f006 0601 	and.w	r6, r6, #1
    int32_t radius = p->cfg.radius;
  40eafe:	f9b5 8010 	ldrsh.w	r8, [r5, #16]
  40eb02:	1dec      	adds	r4, r5, #7
  40eb04:	f105 090f 	add.w	r9, r5, #15
    uint8_t * d8 = (uint8_t *)dst;
  40eb08:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
        *d8 = *s8;
  40eb0c:	f814 7f01 	ldrb.w	r7, [r4, #1]!
  40eb10:	f80e 7b01 	strb.w	r7, [lr], #1
    while(len) {
  40eb14:	454c      	cmp	r4, r9
  40eb16:	d1f9      	bne.n	40eb0c <lv_draw_mask_radius+0x1c>
    if(outer == false) {
  40eb18:	2e00      	cmp	r6, #0
  40eb1a:	d141      	bne.n	40eba0 <lv_draw_mask_radius+0xb0>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40eb1c:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
  40eb20:	4294      	cmp	r4, r2
  40eb22:	f300 8229 	bgt.w	40ef78 <lv_draw_mask_radius+0x488>
  40eb26:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
  40eb2a:	4294      	cmp	r4, r2
  40eb2c:	f2c0 8228 	blt.w	40ef80 <lv_draw_mask_radius+0x490>
  40eb30:	469b      	mov	fp, r3
  40eb32:	460f      	mov	r7, r1
  40eb34:	9002      	str	r0, [sp, #8]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40eb36:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  40eb3a:	eb08 0309 	add.w	r3, r8, r9
  40eb3e:	4299      	cmp	r1, r3
  40eb40:	db06      	blt.n	40eb50 <lv_draw_mask_radius+0x60>
  40eb42:	4459      	add	r1, fp
  40eb44:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
  40eb48:	eba3 0308 	sub.w	r3, r3, r8
  40eb4c:	4299      	cmp	r1, r3
  40eb4e:	dd0b      	ble.n	40eb68 <lv_draw_mask_radius+0x78>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40eb50:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  40eb54:	eb03 0108 	add.w	r1, r3, r8
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40eb58:	428a      	cmp	r2, r1
  40eb5a:	db51      	blt.n	40ec00 <lv_draw_mask_radius+0x110>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40eb5c:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
  40eb60:	eba1 0108 	sub.w	r1, r1, r8
  40eb64:	428a      	cmp	r2, r1
  40eb66:	dc4b      	bgt.n	40ec00 <lv_draw_mask_radius+0x110>
        if(outer == false) {
  40eb68:	bb76      	cbnz	r6, 40ebc8 <lv_draw_mask_radius+0xd8>
            int32_t last =  rect.x1 - abs_x;
  40eb6a:	eba9 0407 	sub.w	r4, r9, r7
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40eb6e:	455c      	cmp	r4, fp
  40eb70:	f300 820a 	bgt.w	40ef88 <lv_draw_mask_radius+0x498>
            if(last >= 0) {
  40eb74:	2c00      	cmp	r4, #0
  40eb76:	db03      	blt.n	40eb80 <lv_draw_mask_radius+0x90>
                _lv_memset_00(&mask_buf[0], last);
  40eb78:	4621      	mov	r1, r4
  40eb7a:	9802      	ldr	r0, [sp, #8]
  40eb7c:	4b9e      	ldr	r3, [pc, #632]	; (40edf8 <lv_draw_mask_radius+0x308>)
  40eb7e:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
  40eb80:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
  40eb84:	1bc0      	subs	r0, r0, r7
  40eb86:	3001      	adds	r0, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40eb88:	2800      	cmp	r0, #0
  40eb8a:	f340 81ff 	ble.w	40ef8c <lv_draw_mask_radius+0x49c>
            else if(first < len) {
  40eb8e:	4583      	cmp	fp, r0
  40eb90:	dc11      	bgt.n	40ebb6 <lv_draw_mask_radius+0xc6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40eb92:	4583      	cmp	fp, r0
  40eb94:	d102      	bne.n	40eb9c <lv_draw_mask_radius+0xac>
  40eb96:	2c00      	cmp	r4, #0
  40eb98:	f000 81fa 	beq.w	40ef90 <lv_draw_mask_radius+0x4a0>
            else return LV_DRAW_MASK_RES_CHANGED;
  40eb9c:	2002      	movs	r0, #2
  40eb9e:	e1ec      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40eba0:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
  40eba4:	4294      	cmp	r4, r2
  40eba6:	f300 81ed 	bgt.w	40ef84 <lv_draw_mask_radius+0x494>
  40ebaa:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
  40ebae:	4294      	cmp	r4, r2
  40ebb0:	dabe      	bge.n	40eb30 <lv_draw_mask_radius+0x40>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40ebb2:	2001      	movs	r0, #1
  40ebb4:	e1e1      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
                _lv_memset_00(&mask_buf[first], len - first);
  40ebb6:	ebab 0100 	sub.w	r1, fp, r0
  40ebba:	9b02      	ldr	r3, [sp, #8]
  40ebbc:	4403      	add	r3, r0
  40ebbe:	4618      	mov	r0, r3
  40ebc0:	4b8d      	ldr	r3, [pc, #564]	; (40edf8 <lv_draw_mask_radius+0x308>)
  40ebc2:	4798      	blx	r3
            else return LV_DRAW_MASK_RES_CHANGED;
  40ebc4:	2002      	movs	r0, #2
  40ebc6:	e1d8      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
            int32_t first = rect.x1 - abs_x;
  40ebc8:	eba9 0007 	sub.w	r0, r9, r7
  40ebcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
            if(first <= len) {
  40ebd0:	4558      	cmp	r0, fp
  40ebd2:	dd01      	ble.n	40ebd8 <lv_draw_mask_radius+0xe8>
        return LV_DRAW_MASK_RES_CHANGED;
  40ebd4:	2002      	movs	r0, #2
  40ebd6:	e1d0      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
                int32_t last =  rect.x2 - abs_x - first + 1;
  40ebd8:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
  40ebdc:	1bc9      	subs	r1, r1, r7
  40ebde:	1a09      	subs	r1, r1, r0
  40ebe0:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
  40ebe2:	1843      	adds	r3, r0, r1
  40ebe4:	459b      	cmp	fp, r3
  40ebe6:	bfb8      	it	lt
  40ebe8:	ebab 0100 	sublt.w	r1, fp, r0
                if(last >= 0) {
  40ebec:	2900      	cmp	r1, #0
  40ebee:	f2c0 81d1 	blt.w	40ef94 <lv_draw_mask_radius+0x4a4>
                    _lv_memset_00(&mask_buf[first], last);
  40ebf2:	9b02      	ldr	r3, [sp, #8]
  40ebf4:	4403      	add	r3, r0
  40ebf6:	4618      	mov	r0, r3
  40ebf8:	4b7f      	ldr	r3, [pc, #508]	; (40edf8 <lv_draw_mask_radius+0x308>)
  40ebfa:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
  40ebfc:	2002      	movs	r0, #2
  40ebfe:	e1bc      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
  40ec00:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40ec04:	b29b      	uxth	r3, r3
  40ec06:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
  40ec0a:	3101      	adds	r1, #1
  40ec0c:	1ac9      	subs	r1, r1, r3
    int32_t h = lv_area_get_height(&rect);
  40ec0e:	b209      	sxth	r1, r1
    abs_y -= rect.y1;
  40ec10:	1ad2      	subs	r2, r2, r3
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
  40ec12:	fb08 f308 	mul.w	r3, r8, r8
  40ec16:	9301      	str	r3, [sp, #4]
    if(abs_y < radius || abs_y > h - radius - 1) {
  40ec18:	b212      	sxth	r2, r2
  40ec1a:	4590      	cmp	r8, r2
  40ec1c:	f300 81d3 	bgt.w	40efc6 <lv_draw_mask_radius+0x4d6>
  40ec20:	eba1 0308 	sub.w	r3, r1, r8
  40ec24:	3b01      	subs	r3, #1
  40ec26:	429a      	cmp	r2, r3
  40ec28:	f300 81b6 	bgt.w	40ef98 <lv_draw_mask_radius+0x4a8>
    return LV_DRAW_MASK_RES_CHANGED;
  40ec2c:	2002      	movs	r0, #2
  40ec2e:	e1a4      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
                x0.f = p->y_prev_x.f;
  40ec30:	8b6b      	ldrh	r3, [r5, #26]
  40ec32:	f8ad 301a 	strh.w	r3, [sp, #26]
                x0.i = p->y_prev_x.i;
  40ec36:	8b2b      	ldrh	r3, [r5, #24]
  40ec38:	f8ad 3018 	strh.w	r3, [sp, #24]
  40ec3c:	e1d8      	b.n	40eff0 <lv_draw_mask_radius+0x500>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40ec3e:	9a04      	ldr	r2, [sp, #16]
  40ec40:	a907      	add	r1, sp, #28
  40ec42:	9b01      	ldr	r3, [sp, #4]
  40ec44:	fb00 3010 	mls	r0, r0, r0, r3
  40ec48:	4b6c      	ldr	r3, [pc, #432]	; (40edfc <lv_draw_mask_radius+0x30c>)
  40ec4a:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40ec4c:	9a04      	ldr	r2, [sp, #16]
  40ec4e:	a906      	add	r1, sp, #24
  40ec50:	9b01      	ldr	r3, [sp, #4]
  40ec52:	fb04 3014 	mls	r0, r4, r4, r3
  40ec56:	4b69      	ldr	r3, [pc, #420]	; (40edfc <lv_draw_mask_radius+0x30c>)
  40ec58:	4798      	blx	r3
            p->y_prev = y;
  40ec5a:	616c      	str	r4, [r5, #20]
            p->y_prev_x.f = x0.f;
  40ec5c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  40ec60:	836b      	strh	r3, [r5, #26]
            p->y_prev_x.i = x0.i;
  40ec62:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40ec66:	832b      	strh	r3, [r5, #24]
  40ec68:	e1d3      	b.n	40f012 <lv_draw_mask_radius+0x522>
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40ec6a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
  40ec6e:	2900      	cmp	r1, #0
  40ec70:	f040 81d7 	bne.w	40f022 <lv_draw_mask_radius+0x532>
            x1.i--;
  40ec74:	3a01      	subs	r2, #1
  40ec76:	f8ad 201c 	strh.w	r2, [sp, #28]
            x1.f = 0xFF;
  40ec7a:	22ff      	movs	r2, #255	; 0xff
  40ec7c:	f8ad 201e 	strh.w	r2, [sp, #30]
  40ec80:	e1cf      	b.n	40f022 <lv_draw_mask_radius+0x532>
            lv_opa_t m = (x0.f + x1.f) >> 1;
  40ec82:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40ec86:	f8bd 101e 	ldrh.w	r1, [sp, #30]
  40ec8a:	440a      	add	r2, r1
  40ec8c:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
  40ec90:	b10e      	cbz	r6, 40ec96 <lv_draw_mask_radius+0x1a6>
  40ec92:	43d2      	mvns	r2, r2
  40ec94:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
  40ec96:	eba8 0303 	sub.w	r3, r8, r3
  40ec9a:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
  40ec9c:	18f9      	adds	r1, r7, r3
  40ec9e:	d411      	bmi.n	40ecc4 <lv_draw_mask_radius+0x1d4>
  40eca0:	4559      	cmp	r1, fp
  40eca2:	da0f      	bge.n	40ecc4 <lv_draw_mask_radius+0x1d4>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40eca4:	9802      	ldr	r0, [sp, #8]
  40eca6:	5c40      	ldrb	r0, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40eca8:	2afc      	cmp	r2, #252	; 0xfc
  40ecaa:	d809      	bhi.n	40ecc0 <lv_draw_mask_radius+0x1d0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ecac:	2a02      	cmp	r2, #2
  40ecae:	d935      	bls.n	40ed1c <lv_draw_mask_radius+0x22c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ecb0:	fb02 f000 	mul.w	r0, r2, r0
  40ecb4:	eb00 2400 	add.w	r4, r0, r0, lsl #8
  40ecb8:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
  40ecbc:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40ecc0:	9c02      	ldr	r4, [sp, #8]
  40ecc2:	5460      	strb	r0, [r4, r1]
            int32_t kr = k + (w - ofs - 1);
  40ecc4:	eba9 0303 	sub.w	r3, r9, r3
  40ecc8:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
  40ecca:	19df      	adds	r7, r3, r7
  40eccc:	d411      	bmi.n	40ecf2 <lv_draw_mask_radius+0x202>
  40ecce:	455f      	cmp	r7, fp
  40ecd0:	da0f      	bge.n	40ecf2 <lv_draw_mask_radius+0x202>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40ecd2:	9b02      	ldr	r3, [sp, #8]
  40ecd4:	5ddb      	ldrb	r3, [r3, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ecd6:	2afc      	cmp	r2, #252	; 0xfc
  40ecd8:	d809      	bhi.n	40ecee <lv_draw_mask_radius+0x1fe>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ecda:	2a02      	cmp	r2, #2
  40ecdc:	d920      	bls.n	40ed20 <lv_draw_mask_radius+0x230>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ecde:	fb02 f203 	mul.w	r2, r2, r3
  40ece2:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40ece6:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40ecea:	f3c2 53c7 	ubfx	r3, r2, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40ecee:	9a02      	ldr	r2, [sp, #8]
  40ecf0:	55d3      	strb	r3, [r2, r7]
            if(outer == false) {
  40ecf2:	b1be      	cbz	r6, 40ed24 <lv_draw_mask_radius+0x234>
                kl++;
  40ecf4:	1c48      	adds	r0, r1, #1
  40ecf6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
  40ecfa:	455f      	cmp	r7, fp
                int32_t len_tmp = kr - first;
  40ecfc:	bfd4      	ite	le
  40ecfe:	1a39      	suble	r1, r7, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40ed00:	ebab 0100 	subgt.w	r1, fp, r0
                if(first < len && len_tmp >= 0) {
  40ed04:	2900      	cmp	r1, #0
  40ed06:	f2c0 8119 	blt.w	40ef3c <lv_draw_mask_radius+0x44c>
  40ed0a:	4558      	cmp	r0, fp
  40ed0c:	f280 8116 	bge.w	40ef3c <lv_draw_mask_radius+0x44c>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40ed10:	9b02      	ldr	r3, [sp, #8]
  40ed12:	4403      	add	r3, r0
  40ed14:	4618      	mov	r0, r3
  40ed16:	4b38      	ldr	r3, [pc, #224]	; (40edf8 <lv_draw_mask_radius+0x308>)
  40ed18:	4798      	blx	r3
  40ed1a:	e10f      	b.n	40ef3c <lv_draw_mask_radius+0x44c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ed1c:	2000      	movs	r0, #0
  40ed1e:	e7cf      	b.n	40ecc0 <lv_draw_mask_radius+0x1d0>
  40ed20:	2300      	movs	r3, #0
  40ed22:	e7e4      	b.n	40ecee <lv_draw_mask_radius+0x1fe>
                if(kl > len)  {
  40ed24:	4559      	cmp	r1, fp
  40ed26:	f300 8125 	bgt.w	40ef74 <lv_draw_mask_radius+0x484>
                if(kl >= 0) {
  40ed2a:	2900      	cmp	r1, #0
  40ed2c:	db02      	blt.n	40ed34 <lv_draw_mask_radius+0x244>
                    _lv_memset_00(&mask_buf[0], kl);
  40ed2e:	9802      	ldr	r0, [sp, #8]
  40ed30:	4b31      	ldr	r3, [pc, #196]	; (40edf8 <lv_draw_mask_radius+0x308>)
  40ed32:	4798      	blx	r3
                if(kr < 0) {
  40ed34:	3701      	adds	r7, #1
  40ed36:	f100 811d 	bmi.w	40ef74 <lv_draw_mask_radius+0x484>
                if(kr <= len) {
  40ed3a:	455f      	cmp	r7, fp
  40ed3c:	f300 80fe 	bgt.w	40ef3c <lv_draw_mask_radius+0x44c>
                    _lv_memset_00(&mask_buf[kr], len - kr);
  40ed40:	ebab 0107 	sub.w	r1, fp, r7
  40ed44:	9b02      	ldr	r3, [sp, #8]
  40ed46:	443b      	add	r3, r7
  40ed48:	4618      	mov	r0, r3
  40ed4a:	4b2b      	ldr	r3, [pc, #172]	; (40edf8 <lv_draw_mask_radius+0x308>)
  40ed4c:	4798      	blx	r3
  40ed4e:	e0f5      	b.n	40ef3c <lv_draw_mask_radius+0x44c>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
  40ed50:	9a04      	ldr	r2, [sp, #16]
  40ed52:	a909      	add	r1, sp, #36	; 0x24
  40ed54:	9b01      	ldr	r3, [sp, #4]
  40ed56:	fb08 3018 	mls	r0, r8, r8, r3
  40ed5a:	4b28      	ldr	r3, [pc, #160]	; (40edfc <lv_draw_mask_radius+0x30c>)
  40ed5c:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40ed5e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40ed62:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  40ed66:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
  40ed6a:	f1c1 03ff 	rsb	r3, r1, #255	; 0xff
  40ed6e:	fb03 f302 	mul.w	r3, r3, r2
  40ed72:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
  40ed76:	b90e      	cbnz	r6, 40ed7c <lv_draw_mask_radius+0x28c>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40ed78:	43db      	mvns	r3, r3
  40ed7a:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40ed7c:	9803      	ldr	r0, [sp, #12]
  40ed7e:	4602      	mov	r2, r0
  40ed80:	2800      	cmp	r0, #0
  40ed82:	db11      	blt.n	40eda8 <lv_draw_mask_radius+0x2b8>
  40ed84:	4558      	cmp	r0, fp
  40ed86:	da0f      	bge.n	40eda8 <lv_draw_mask_radius+0x2b8>
  40ed88:	9c02      	ldr	r4, [sp, #8]
  40ed8a:	1820      	adds	r0, r4, r0
  40ed8c:	5ca2      	ldrb	r2, [r4, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ed8e:	2bfc      	cmp	r3, #252	; 0xfc
  40ed90:	d809      	bhi.n	40eda6 <lv_draw_mask_radius+0x2b6>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ed92:	2b02      	cmp	r3, #2
  40ed94:	d929      	bls.n	40edea <lv_draw_mask_radius+0x2fa>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ed96:	fb03 f202 	mul.w	r2, r3, r2
  40ed9a:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  40ed9e:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  40eda2:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40eda6:	7002      	strb	r2, [r0, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40eda8:	f1ba 0f00 	cmp.w	sl, #0
  40edac:	db13      	blt.n	40edd6 <lv_draw_mask_radius+0x2e6>
  40edae:	45da      	cmp	sl, fp
  40edb0:	da11      	bge.n	40edd6 <lv_draw_mask_radius+0x2e6>
  40edb2:	9c02      	ldr	r4, [sp, #8]
  40edb4:	eb04 000a 	add.w	r0, r4, sl
  40edb8:	f814 200a 	ldrb.w	r2, [r4, sl]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40edbc:	2bfc      	cmp	r3, #252	; 0xfc
  40edbe:	d809      	bhi.n	40edd4 <lv_draw_mask_radius+0x2e4>
    if(mask_new <= LV_OPA_MIN) return 0;
  40edc0:	2b02      	cmp	r3, #2
  40edc2:	d914      	bls.n	40edee <lv_draw_mask_radius+0x2fe>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40edc4:	fb03 f302 	mul.w	r3, r3, r2
  40edc8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40edcc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40edd0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40edd4:	7002      	strb	r2, [r0, #0]
                kl--;
  40edd6:	9b03      	ldr	r3, [sp, #12]
  40edd8:	3b01      	subs	r3, #1
  40edda:	9303      	str	r3, [sp, #12]
                kr++;
  40eddc:	f10a 0a01 	add.w	sl, sl, #1
                y_prev.f = y_next.f;
  40ede0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
                i++;
  40ede4:	f108 0801 	add.w	r8, r8, #1
  40ede8:	e160      	b.n	40f0ac <lv_draw_mask_radius+0x5bc>
    if(mask_new <= LV_OPA_MIN) return 0;
  40edea:	2200      	movs	r2, #0
  40edec:	e7db      	b.n	40eda6 <lv_draw_mask_radius+0x2b6>
  40edee:	2200      	movs	r2, #0
  40edf0:	e7f0      	b.n	40edd4 <lv_draw_mask_radius+0x2e4>
  40edf2:	2700      	movs	r7, #0
  40edf4:	e039      	b.n	40ee6a <lv_draw_mask_radius+0x37a>
  40edf6:	bf00      	nop
  40edf8:	00415ead 	.word	0x00415ead
  40edfc:	00415715 	.word	0x00415715
  40ee00:	2700      	movs	r7, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40ee02:	f80e 7008 	strb.w	r7, [lr, r8]
                kl--;
  40ee06:	3801      	subs	r0, #1
                kr++;
  40ee08:	3401      	adds	r4, #1
            for(; i <= x1.i; i++) {
  40ee0a:	3101      	adds	r1, #1
                y_prev.f = y_next.f;
  40ee0c:	461a      	mov	r2, r3
            for(; i <= x1.i; i++) {
  40ee0e:	9d01      	ldr	r5, [sp, #4]
  40ee10:	42a9      	cmp	r1, r5
  40ee12:	d840      	bhi.n	40ee96 <lv_draw_mask_radius+0x3a6>
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
  40ee14:	eb09 1712 	add.w	r7, r9, r2, lsr #4
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
  40ee18:	fb01 a311 	mls	r3, r1, r1, sl
    uint32_t raw2 = raw * raw;
  40ee1c:	fb07 fc07 	mul.w	ip, r7, r7

    int32_t d = x - raw2;
  40ee20:	ebcc 2303 	rsb	r3, ip, r3, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
  40ee24:	ea4f 0c47 	mov.w	ip, r7, lsl #1
  40ee28:	fb93 f3fc 	sdiv	r3, r3, ip
  40ee2c:	441f      	add	r7, r3

    q->i = d >> 4;
  40ee2e:	f3c7 1c0f 	ubfx	ip, r7, #4, #16
    q->f = (d & 0xF) << 4;
  40ee32:	013f      	lsls	r7, r7, #4
  40ee34:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
                m = (y_prev.f + y_next.f) >> 1;
  40ee38:	441a      	add	r2, r3
  40ee3a:	f3c2 0247 	ubfx	r2, r2, #1, #8
                if(outer) m = 255 - m;
  40ee3e:	b10e      	cbz	r6, 40ee44 <lv_draw_mask_radius+0x354>
  40ee40:	43d2      	mvns	r2, r2
  40ee42:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40ee44:	2800      	cmp	r0, #0
  40ee46:	db12      	blt.n	40ee6e <lv_draw_mask_radius+0x37e>
  40ee48:	4583      	cmp	fp, r0
  40ee4a:	dd10      	ble.n	40ee6e <lv_draw_mask_radius+0x37e>
  40ee4c:	4680      	mov	r8, r0
  40ee4e:	f81e 7000 	ldrb.w	r7, [lr, r0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ee52:	2afc      	cmp	r2, #252	; 0xfc
  40ee54:	d809      	bhi.n	40ee6a <lv_draw_mask_radius+0x37a>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ee56:	2a02      	cmp	r2, #2
  40ee58:	d9cb      	bls.n	40edf2 <lv_draw_mask_radius+0x302>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ee5a:	fb02 f507 	mul.w	r5, r2, r7
  40ee5e:	eb05 2705 	add.w	r7, r5, r5, lsl #8
  40ee62:	eb05 17c7 	add.w	r7, r5, r7, lsl #7
  40ee66:	f3c7 57c7 	ubfx	r7, r7, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40ee6a:	f80e 7008 	strb.w	r7, [lr, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40ee6e:	2c00      	cmp	r4, #0
  40ee70:	dbc9      	blt.n	40ee06 <lv_draw_mask_radius+0x316>
  40ee72:	45a3      	cmp	fp, r4
  40ee74:	ddc7      	ble.n	40ee06 <lv_draw_mask_radius+0x316>
  40ee76:	46a0      	mov	r8, r4
  40ee78:	f81e 7004 	ldrb.w	r7, [lr, r4]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ee7c:	2afc      	cmp	r2, #252	; 0xfc
  40ee7e:	d8c0      	bhi.n	40ee02 <lv_draw_mask_radius+0x312>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ee80:	2a02      	cmp	r2, #2
  40ee82:	d9bd      	bls.n	40ee00 <lv_draw_mask_radius+0x310>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ee84:	fb02 f207 	mul.w	r2, r2, r7
  40ee88:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40ee8c:	eb02 17c7 	add.w	r7, r2, r7, lsl #7
  40ee90:	f3c7 57c7 	ubfx	r7, r7, #23, #8
  40ee94:	e7b5      	b.n	40ee02 <lv_draw_mask_radius+0x312>
  40ee96:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40ee9a:	f8dd a014 	ldr.w	sl, [sp, #20]
  40ee9e:	43ea      	mvns	r2, r5
  40eea0:	4442      	add	r2, r8
  40eea2:	9903      	ldr	r1, [sp, #12]
  40eea4:	4411      	add	r1, r2
  40eea6:	9103      	str	r1, [sp, #12]
  40eea8:	3501      	adds	r5, #1
  40eeaa:	44aa      	add	sl, r5
  40eeac:	ebaa 0a08 	sub.w	sl, sl, r8
  40eeb0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  40eeb4:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
  40eeb8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            if(y_prev.f) {
  40eebc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
  40eec0:	2b00      	cmp	r3, #0
  40eec2:	d03a      	beq.n	40ef3a <lv_draw_mask_radius+0x44a>
                m = (y_prev.f * x1.f) >> 9;
  40eec4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
  40eec8:	fb03 f302 	mul.w	r3, r3, r2
  40eecc:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
  40eed0:	b10e      	cbz	r6, 40eed6 <lv_draw_mask_radius+0x3e6>
  40eed2:	43db      	mvns	r3, r3
  40eed4:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40eed6:	9a03      	ldr	r2, [sp, #12]
  40eed8:	2a00      	cmp	r2, #0
  40eeda:	db12      	blt.n	40ef02 <lv_draw_mask_radius+0x412>
  40eedc:	4593      	cmp	fp, r2
  40eede:	dd10      	ble.n	40ef02 <lv_draw_mask_radius+0x412>
  40eee0:	9802      	ldr	r0, [sp, #8]
  40eee2:	4601      	mov	r1, r0
  40eee4:	4411      	add	r1, r2
  40eee6:	5c82      	ldrb	r2, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40eee8:	2bfc      	cmp	r3, #252	; 0xfc
  40eeea:	d809      	bhi.n	40ef00 <lv_draw_mask_radius+0x410>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eeec:	2b02      	cmp	r3, #2
  40eeee:	d927      	bls.n	40ef40 <lv_draw_mask_radius+0x450>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40eef0:	fb03 f202 	mul.w	r2, r3, r2
  40eef4:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40eef8:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40eefc:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40ef00:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40ef02:	f1ba 0f00 	cmp.w	sl, #0
  40ef06:	db13      	blt.n	40ef30 <lv_draw_mask_radius+0x440>
  40ef08:	45d3      	cmp	fp, sl
  40ef0a:	dd11      	ble.n	40ef30 <lv_draw_mask_radius+0x440>
  40ef0c:	9802      	ldr	r0, [sp, #8]
  40ef0e:	eb00 010a 	add.w	r1, r0, sl
  40ef12:	f810 200a 	ldrb.w	r2, [r0, sl]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ef16:	2bfc      	cmp	r3, #252	; 0xfc
  40ef18:	d809      	bhi.n	40ef2e <lv_draw_mask_radius+0x43e>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ef1a:	2b02      	cmp	r3, #2
  40ef1c:	d912      	bls.n	40ef44 <lv_draw_mask_radius+0x454>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ef1e:	fb03 f302 	mul.w	r3, r3, r2
  40ef22:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40ef26:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40ef2a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40ef2e:	700a      	strb	r2, [r1, #0]
                kl--;
  40ef30:	9b03      	ldr	r3, [sp, #12]
  40ef32:	3b01      	subs	r3, #1
  40ef34:	9303      	str	r3, [sp, #12]
                kr++;
  40ef36:	f10a 0a01 	add.w	sl, sl, #1
            if(outer == 0) {
  40ef3a:	b12e      	cbz	r6, 40ef48 <lv_draw_mask_radius+0x458>
    return LV_DRAW_MASK_RES_CHANGED;
  40ef3c:	2002      	movs	r0, #2
  40ef3e:	e01c      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ef40:	2200      	movs	r2, #0
  40ef42:	e7dd      	b.n	40ef00 <lv_draw_mask_radius+0x410>
  40ef44:	2200      	movs	r2, #0
  40ef46:	e7f2      	b.n	40ef2e <lv_draw_mask_radius+0x43e>
                kl++;
  40ef48:	9903      	ldr	r1, [sp, #12]
  40ef4a:	3101      	adds	r1, #1
                if(kl > len) {
  40ef4c:	4559      	cmp	r1, fp
  40ef4e:	dc11      	bgt.n	40ef74 <lv_draw_mask_radius+0x484>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
  40ef50:	2900      	cmp	r1, #0
  40ef52:	db02      	blt.n	40ef5a <lv_draw_mask_radius+0x46a>
  40ef54:	9802      	ldr	r0, [sp, #8]
  40ef56:	4b61      	ldr	r3, [pc, #388]	; (40f0dc <lv_draw_mask_radius+0x5ec>)
  40ef58:	4798      	blx	r3
                if(kr < 0) {
  40ef5a:	f1ba 0f00 	cmp.w	sl, #0
  40ef5e:	db09      	blt.n	40ef74 <lv_draw_mask_radius+0x484>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
  40ef60:	45da      	cmp	sl, fp
  40ef62:	daeb      	bge.n	40ef3c <lv_draw_mask_radius+0x44c>
  40ef64:	ebab 010a 	sub.w	r1, fp, sl
  40ef68:	9b02      	ldr	r3, [sp, #8]
  40ef6a:	4453      	add	r3, sl
  40ef6c:	4618      	mov	r0, r3
  40ef6e:	4b5b      	ldr	r3, [pc, #364]	; (40f0dc <lv_draw_mask_radius+0x5ec>)
  40ef70:	4798      	blx	r3
  40ef72:	e7e3      	b.n	40ef3c <lv_draw_mask_radius+0x44c>
                    return LV_DRAW_MASK_RES_TRANSP;
  40ef74:	2000      	movs	r0, #0
  40ef76:	e000      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
            return LV_DRAW_MASK_RES_TRANSP;
  40ef78:	2000      	movs	r0, #0
}
  40ef7a:	b00d      	add	sp, #52	; 0x34
  40ef7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40ef80:	2000      	movs	r0, #0
  40ef82:	e7fa      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40ef84:	2001      	movs	r0, #1
  40ef86:	e7f8      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40ef88:	2000      	movs	r0, #0
  40ef8a:	e7f6      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40ef8c:	2000      	movs	r0, #0
  40ef8e:	e7f4      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40ef90:	2001      	movs	r0, #1
  40ef92:	e7f2      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
        return LV_DRAW_MASK_RES_CHANGED;
  40ef94:	2002      	movs	r0, #2
  40ef96:	e7f0      	b.n	40ef7a <lv_draw_mask_radius+0x48a>
        if(radius <= 256) sqrt_mask = 0x800;
  40ef98:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
  40ef9c:	bfd4      	ite	le
  40ef9e:	f44f 6300 	movle.w	r3, #2048	; 0x800
  40efa2:	f44f 4300 	movgt.w	r3, #32768	; 0x8000
  40efa6:	9304      	str	r3, [sp, #16]
            y = radius - (h - abs_y) + 1;
  40efa8:	1a89      	subs	r1, r1, r2
  40efaa:	eba8 0001 	sub.w	r0, r8, r1
  40efae:	1c44      	adds	r4, r0, #1
            if((y - 1) == p->y_prev) {
  40efb0:	696b      	ldr	r3, [r5, #20]
  40efb2:	4298      	cmp	r0, r3
  40efb4:	f47f ae43 	bne.w	40ec3e <lv_draw_mask_radius+0x14e>
                x1.f = p->y_prev_x.f;
  40efb8:	8b6b      	ldrh	r3, [r5, #26]
  40efba:	f8ad 301e 	strh.w	r3, [sp, #30]
                x1.i = p->y_prev_x.i;
  40efbe:	8b2b      	ldrh	r3, [r5, #24]
  40efc0:	f8ad 301c 	strh.w	r3, [sp, #28]
  40efc4:	e642      	b.n	40ec4c <lv_draw_mask_radius+0x15c>
        if(radius <= 256) sqrt_mask = 0x800;
  40efc6:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
  40efca:	bfd4      	ite	le
  40efcc:	f44f 6300 	movle.w	r3, #2048	; 0x800
  40efd0:	f44f 4300 	movgt.w	r3, #32768	; 0x8000
  40efd4:	9304      	str	r3, [sp, #16]
            y = radius - abs_y;
  40efd6:	eba8 0402 	sub.w	r4, r8, r2
            if(y == p->y_prev) {
  40efda:	696b      	ldr	r3, [r5, #20]
  40efdc:	429c      	cmp	r4, r3
  40efde:	f43f ae27 	beq.w	40ec30 <lv_draw_mask_radius+0x140>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40efe2:	9a04      	ldr	r2, [sp, #16]
  40efe4:	a906      	add	r1, sp, #24
  40efe6:	9b01      	ldr	r3, [sp, #4]
  40efe8:	fb04 3014 	mls	r0, r4, r4, r3
  40efec:	4b3c      	ldr	r3, [pc, #240]	; (40f0e0 <lv_draw_mask_radius+0x5f0>)
  40efee:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40eff0:	1e63      	subs	r3, r4, #1
  40eff2:	9a04      	ldr	r2, [sp, #16]
  40eff4:	a907      	add	r1, sp, #28
  40eff6:	9303      	str	r3, [sp, #12]
  40eff8:	9801      	ldr	r0, [sp, #4]
  40effa:	fb03 0013 	mls	r0, r3, r3, r0
  40effe:	4b38      	ldr	r3, [pc, #224]	; (40f0e0 <lv_draw_mask_radius+0x5f0>)
  40f000:	4798      	blx	r3
            p->y_prev = y - 1;
  40f002:	9b03      	ldr	r3, [sp, #12]
  40f004:	616b      	str	r3, [r5, #20]
            p->y_prev_x.f = x1.f;
  40f006:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f00a:	836b      	strh	r3, [r5, #26]
            p->y_prev_x.i = x1.i;
  40f00c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  40f010:	832b      	strh	r3, [r5, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40f012:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40f016:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  40f01a:	1e51      	subs	r1, r2, #1
  40f01c:	428b      	cmp	r3, r1
  40f01e:	f43f ae24 	beq.w	40ec6a <lv_draw_mask_radius+0x17a>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
  40f022:	eba9 0707 	sub.w	r7, r9, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f026:	f10a 0a01 	add.w	sl, sl, #1
  40f02a:	ebaa 0909 	sub.w	r9, sl, r9
    int32_t w = lv_area_get_width(&rect);
  40f02e:	fa0f f989 	sxth.w	r9, r9
        if(x0.i == x1.i) {
  40f032:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  40f036:	429a      	cmp	r2, r3
  40f038:	f43f ae23 	beq.w	40ec82 <lv_draw_mask_radius+0x192>
            int32_t ofs = radius - (x0.i + 1);
  40f03c:	3301      	adds	r3, #1
  40f03e:	eba8 0803 	sub.w	r8, r8, r3
            int32_t kl = k + ofs;
  40f042:	eb07 0308 	add.w	r3, r7, r8
  40f046:	9303      	str	r3, [sp, #12]
            int32_t kr = k + (w - ofs - 1);
  40f048:	eba9 0808 	sub.w	r8, r9, r8
  40f04c:	f108 3aff 	add.w	sl, r8, #4294967295
  40f050:	44ba      	add	sl, r7
            if(outer) {
  40f052:	b186      	cbz	r6, 40f076 <lv_draw_mask_radius+0x586>
                int32_t first = kl + 1;
  40f054:	1c58      	adds	r0, r3, #1
  40f056:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
  40f05a:	45da      	cmp	sl, fp
                int32_t len_tmp = kr - first;
  40f05c:	bfd4      	ite	le
  40f05e:	ebaa 0100 	suble.w	r1, sl, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40f062:	ebab 0100 	subgt.w	r1, fp, r0
                if(first < len && len_tmp >= 0) {
  40f066:	2900      	cmp	r1, #0
  40f068:	db05      	blt.n	40f076 <lv_draw_mask_radius+0x586>
  40f06a:	4558      	cmp	r0, fp
  40f06c:	da03      	bge.n	40f076 <lv_draw_mask_radius+0x586>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40f06e:	9b02      	ldr	r3, [sp, #8]
  40f070:	4418      	add	r0, r3
  40f072:	4b1a      	ldr	r3, [pc, #104]	; (40f0dc <lv_draw_mask_radius+0x5ec>)
  40f074:	4798      	blx	r3
            uint32_t i = x0.i + 1;
  40f076:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  40f07a:	f100 0801 	add.w	r8, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
  40f07e:	9a04      	ldr	r2, [sp, #16]
  40f080:	a908      	add	r1, sp, #32
  40f082:	9b01      	ldr	r3, [sp, #4]
  40f084:	fb00 3010 	mls	r0, r0, r0, r3
  40f088:	4b15      	ldr	r3, [pc, #84]	; (40f0e0 <lv_draw_mask_radius+0x5f0>)
  40f08a:	4798      	blx	r3
            if(y_prev.f == 0) {
  40f08c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
  40f090:	b93b      	cbnz	r3, 40f0a2 <lv_draw_mask_radius+0x5b2>
                y_prev.i--;
  40f092:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40f096:	3b01      	subs	r3, #1
  40f098:	f8ad 3020 	strh.w	r3, [sp, #32]
                y_prev.f = 0xFF;
  40f09c:	23ff      	movs	r3, #255	; 0xff
  40f09e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
  40f0a2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40f0a6:	429c      	cmp	r4, r3
  40f0a8:	f77f ae52 	ble.w	40ed50 <lv_draw_mask_radius+0x260>
            for(; i <= x1.i; i++) {
  40f0ac:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  40f0b0:	45a8      	cmp	r8, r5
  40f0b2:	f63f af03 	bhi.w	40eebc <lv_draw_mask_radius+0x3cc>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
  40f0b6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
  40f0ba:	ea4f 1909 	mov.w	r9, r9, lsl #4
  40f0be:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
  40f0c2:	4641      	mov	r1, r8
  40f0c4:	4654      	mov	r4, sl
  40f0c6:	9803      	ldr	r0, [sp, #12]
    if(mask_new <= LV_OPA_MIN) return 0;
  40f0c8:	f8cd 8010 	str.w	r8, [sp, #16]
  40f0cc:	f8cd a014 	str.w	sl, [sp, #20]
  40f0d0:	f8dd a004 	ldr.w	sl, [sp, #4]
  40f0d4:	9501      	str	r5, [sp, #4]
  40f0d6:	f8dd e008 	ldr.w	lr, [sp, #8]
  40f0da:	e69b      	b.n	40ee14 <lv_draw_mask_radius+0x324>
  40f0dc:	00415ead 	.word	0x00415ead
  40f0e0:	00415715 	.word	0x00415715

0040f0e4 <lv_draw_mask_add>:
{
  40f0e4:	b410      	push	{r4}
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
  40f0e6:	4b0d      	ldr	r3, [pc, #52]	; (40f11c <lv_draw_mask_add+0x38>)
  40f0e8:	681b      	ldr	r3, [r3, #0]
  40f0ea:	b15b      	cbz	r3, 40f104 <lv_draw_mask_add+0x20>
  40f0ec:	4a0b      	ldr	r2, [pc, #44]	; (40f11c <lv_draw_mask_add+0x38>)
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f0ee:	2301      	movs	r3, #1
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
  40f0f0:	6894      	ldr	r4, [r2, #8]
  40f0f2:	b144      	cbz	r4, 40f106 <lv_draw_mask_add+0x22>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f0f4:	3301      	adds	r3, #1
  40f0f6:	b2db      	uxtb	r3, r3
  40f0f8:	3208      	adds	r2, #8
  40f0fa:	2b10      	cmp	r3, #16
  40f0fc:	d1f8      	bne.n	40f0f0 <lv_draw_mask_add+0xc>
        return LV_MASK_ID_INV;
  40f0fe:	f04f 30ff 	mov.w	r0, #4294967295
  40f102:	e007      	b.n	40f114 <lv_draw_mask_add+0x30>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f104:	2300      	movs	r3, #0
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
  40f106:	4a05      	ldr	r2, [pc, #20]	; (40f11c <lv_draw_mask_add+0x38>)
  40f108:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
  40f10c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f110:	6051      	str	r1, [r2, #4]
    return i;
  40f112:	b218      	sxth	r0, r3
}
  40f114:	f85d 4b04 	ldr.w	r4, [sp], #4
  40f118:	4770      	bx	lr
  40f11a:	bf00      	nop
  40f11c:	2043a234 	.word	0x2043a234

0040f120 <lv_draw_mask_apply>:
{
  40f120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f124:	b082      	sub	sp, #8
    while(m->param) {
  40f126:	4c11      	ldr	r4, [pc, #68]	; (40f16c <lv_draw_mask_apply+0x4c>)
  40f128:	6824      	ldr	r4, [r4, #0]
  40f12a:	b1ec      	cbz	r4, 40f168 <lv_draw_mask_apply+0x48>
  40f12c:	469a      	mov	sl, r3
  40f12e:	4691      	mov	r9, r2
  40f130:	4688      	mov	r8, r1
  40f132:	4607      	mov	r7, r0
  40f134:	4e0d      	ldr	r6, [pc, #52]	; (40f16c <lv_draw_mask_apply+0x4c>)
  40f136:	2500      	movs	r5, #0
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
  40f138:	9400      	str	r4, [sp, #0]
  40f13a:	6824      	ldr	r4, [r4, #0]
  40f13c:	4653      	mov	r3, sl
  40f13e:	464a      	mov	r2, r9
  40f140:	4641      	mov	r1, r8
  40f142:	4638      	mov	r0, r7
  40f144:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
  40f146:	4604      	mov	r4, r0
  40f148:	b150      	cbz	r0, 40f160 <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
  40f14a:	2802      	cmp	r0, #2
  40f14c:	bf08      	it	eq
  40f14e:	2501      	moveq	r5, #1
    while(m->param) {
  40f150:	f856 4f08 	ldr.w	r4, [r6, #8]!
  40f154:	2c00      	cmp	r4, #0
  40f156:	d1ef      	bne.n	40f138 <lv_draw_mask_apply+0x18>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40f158:	2d00      	cmp	r5, #0
  40f15a:	bf14      	ite	ne
  40f15c:	2402      	movne	r4, #2
  40f15e:	2401      	moveq	r4, #1
}
  40f160:	4620      	mov	r0, r4
  40f162:	b002      	add	sp, #8
  40f164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40f168:	2401      	movs	r4, #1
  40f16a:	e7f9      	b.n	40f160 <lv_draw_mask_apply+0x40>
  40f16c:	2043a234 	.word	0x2043a234

0040f170 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
  40f170:	f1b0 3fff 	cmp.w	r0, #4294967295
  40f174:	d00a      	beq.n	40f18c <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
  40f176:	4b06      	ldr	r3, [pc, #24]	; (40f190 <lv_draw_mask_remove_id+0x20>)
  40f178:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
  40f17c:	2200      	movs	r2, #0
  40f17e:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
  40f182:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  40f186:	605a      	str	r2, [r3, #4]
}
  40f188:	4608      	mov	r0, r1
  40f18a:	4770      	bx	lr
    void * p = NULL;
  40f18c:	2100      	movs	r1, #0
    return p;
  40f18e:	e7fb      	b.n	40f188 <lv_draw_mask_remove_id+0x18>
  40f190:	2043a234 	.word	0x2043a234

0040f194 <lv_draw_mask_remove_custom>:
{
  40f194:	b470      	push	{r4, r5, r6}
  40f196:	4b0b      	ldr	r3, [pc, #44]	; (40f1c4 <lv_draw_mask_remove_custom+0x30>)
  40f198:	1d1a      	adds	r2, r3, #4
  40f19a:	f103 0480 	add.w	r4, r3, #128	; 0x80
    void * p = NULL;
  40f19e:	2600      	movs	r6, #0
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
  40f1a0:	4635      	mov	r5, r6
  40f1a2:	e003      	b.n	40f1ac <lv_draw_mask_remove_custom+0x18>
  40f1a4:	3308      	adds	r3, #8
  40f1a6:	3208      	adds	r2, #8
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f1a8:	42a3      	cmp	r3, r4
  40f1aa:	d008      	beq.n	40f1be <lv_draw_mask_remove_custom+0x2a>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40f1ac:	6859      	ldr	r1, [r3, #4]
  40f1ae:	4281      	cmp	r1, r0
  40f1b0:	d1f8      	bne.n	40f1a4 <lv_draw_mask_remove_custom+0x10>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
  40f1b2:	f852 6c04 	ldr.w	r6, [r2, #-4]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
  40f1b6:	f842 5c04 	str.w	r5, [r2, #-4]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
  40f1ba:	605d      	str	r5, [r3, #4]
  40f1bc:	e7f2      	b.n	40f1a4 <lv_draw_mask_remove_custom+0x10>
}
  40f1be:	4630      	mov	r0, r6
  40f1c0:	bc70      	pop	{r4, r5, r6}
  40f1c2:	4770      	bx	lr
  40f1c4:	2043a234 	.word	0x2043a234

0040f1c8 <lv_draw_mask_get_cnt>:
{
  40f1c8:	2300      	movs	r3, #0
    uint8_t cnt = 0;
  40f1ca:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
  40f1cc:	4906      	ldr	r1, [pc, #24]	; (40f1e8 <lv_draw_mask_get_cnt+0x20>)
  40f1ce:	e002      	b.n	40f1d6 <lv_draw_mask_get_cnt+0xe>
  40f1d0:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f1d2:	2b10      	cmp	r3, #16
  40f1d4:	d006      	beq.n	40f1e4 <lv_draw_mask_get_cnt+0x1c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
  40f1d6:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
  40f1da:	2a00      	cmp	r2, #0
  40f1dc:	d0f8      	beq.n	40f1d0 <lv_draw_mask_get_cnt+0x8>
  40f1de:	3001      	adds	r0, #1
  40f1e0:	b2c0      	uxtb	r0, r0
  40f1e2:	e7f5      	b.n	40f1d0 <lv_draw_mask_get_cnt+0x8>
}
  40f1e4:	4770      	bx	lr
  40f1e6:	bf00      	nop
  40f1e8:	2043a234 	.word	0x2043a234

0040f1ec <lv_draw_mask_line_points_init>:
{
  40f1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f1f0:	4604      	mov	r4, r0
  40f1f2:	460f      	mov	r7, r1
  40f1f4:	4615      	mov	r5, r2
  40f1f6:	4698      	mov	r8, r3
  40f1f8:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
  40f1fc:	212c      	movs	r1, #44	; 0x2c
  40f1fe:	4b4a      	ldr	r3, [pc, #296]	; (40f328 <lv_draw_mask_line_points_init+0x13c>)
  40f200:	4798      	blx	r3
    if(p1y > p2y) {
  40f202:	42b5      	cmp	r5, r6
  40f204:	dd05      	ble.n	40f212 <lv_draw_mask_line_points_init+0x26>
  40f206:	462b      	mov	r3, r5
        p1y = t;
  40f208:	4635      	mov	r5, r6
        p2y = p1y;
  40f20a:	461e      	mov	r6, r3
    if(p1y > p2y) {
  40f20c:	463b      	mov	r3, r7
        p1x = t;
  40f20e:	4647      	mov	r7, r8
        p2x = p1x;
  40f210:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
  40f212:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
  40f214:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
  40f216:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
  40f21a:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
  40f21c:	7c23      	ldrb	r3, [r4, #16]
  40f21e:	f89d 201c 	ldrb.w	r2, [sp, #28]
  40f222:	f362 0301 	bfi	r3, r2, #0, #2
  40f226:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
  40f228:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
  40f22a:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
  40f22c:	eba8 0707 	sub.w	r7, r8, r7
  40f230:	1b75      	subs	r5, r6, r5
  40f232:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
  40f236:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
  40f23a:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
  40f23e:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
  40f242:	4299      	cmp	r1, r3
  40f244:	bfd4      	ite	le
  40f246:	2100      	movle	r1, #0
  40f248:	2101      	movgt	r1, #1
  40f24a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
  40f24e:	f361 0200 	bfi	r2, r1, #0, #1
  40f252:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    param->yx_steep = 0;
  40f256:	2100      	movs	r1, #0
  40f258:	61e1      	str	r1, [r4, #28]
    param->xy_steep = 0;
  40f25a:	61a1      	str	r1, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
  40f25c:	4b33      	ldr	r3, [pc, #204]	; (40f32c <lv_draw_mask_line_points_init+0x140>)
  40f25e:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
  40f260:	7121      	strb	r1, [r4, #4]
    if(param->flat) {
  40f262:	f012 0f01 	tst.w	r2, #1
  40f266:	d025      	beq.n	40f2b4 <lv_draw_mask_line_points_init+0xc8>
        if(dx) {
  40f268:	b13f      	cbz	r7, 40f27a <lv_draw_mask_line_points_init+0x8e>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
  40f26a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40f26e:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
  40f272:	fb05 f303 	mul.w	r3, r5, r3
  40f276:	129b      	asrs	r3, r3, #10
  40f278:	61e3      	str	r3, [r4, #28]
        if(dy) {
  40f27a:	b13d      	cbz	r5, 40f28c <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f27c:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
  40f280:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
  40f284:	fb07 f705 	mul.w	r7, r7, r5
  40f288:	12bf      	asrs	r7, r7, #10
  40f28a:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
  40f28c:	69e3      	ldr	r3, [r4, #28]
  40f28e:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
  40f290:	7c23      	ldrb	r3, [r4, #16]
  40f292:	f013 0303 	ands.w	r3, r3, #3
  40f296:	d122      	bne.n	40f2de <lv_draw_mask_line_points_init+0xf2>
  40f298:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f29c:	f36f 0341 	bfc	r3, #1, #1
  40f2a0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
  40f2a4:	6a23      	ldr	r3, [r4, #32]
  40f2a6:	109a      	asrs	r2, r3, #2
    if(param->steep < 0) param->spx = -param->spx;
  40f2a8:	2b00      	cmp	r3, #0
  40f2aa:	bfb8      	it	lt
  40f2ac:	4252      	neglt	r2, r2
  40f2ae:	6262      	str	r2, [r4, #36]	; 0x24
  40f2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
  40f2b4:	b13d      	cbz	r5, 40f2c6 <lv_draw_mask_line_points_init+0xda>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f2b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40f2ba:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
  40f2be:	fb07 f303 	mul.w	r3, r7, r3
  40f2c2:	129b      	asrs	r3, r3, #10
  40f2c4:	61a3      	str	r3, [r4, #24]
        if(dx) {
  40f2c6:	b13f      	cbz	r7, 40f2d8 <lv_draw_mask_line_points_init+0xec>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f2c8:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
  40f2cc:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
  40f2d0:	fb05 f507 	mul.w	r5, r5, r7
  40f2d4:	12ad      	asrs	r5, r5, #10
  40f2d6:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
  40f2d8:	69a3      	ldr	r3, [r4, #24]
  40f2da:	6223      	str	r3, [r4, #32]
  40f2dc:	e7d8      	b.n	40f290 <lv_draw_mask_line_points_init+0xa4>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40f2de:	2b01      	cmp	r3, #1
  40f2e0:	d00f      	beq.n	40f302 <lv_draw_mask_line_points_init+0x116>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
  40f2e2:	2b02      	cmp	r3, #2
  40f2e4:	d014      	beq.n	40f310 <lv_draw_mask_line_points_init+0x124>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
  40f2e6:	2b03      	cmp	r3, #3
  40f2e8:	d1dc      	bne.n	40f2a4 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 0;
  40f2ea:	6a23      	ldr	r3, [r4, #32]
  40f2ec:	2b00      	cmp	r3, #0
  40f2ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f2f2:	bfcc      	ite	gt
  40f2f4:	f36f 0341 	bfcgt	r3, #1, #1
        else param->inv = 1;
  40f2f8:	f043 0302 	orrle.w	r3, r3, #2
  40f2fc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f300:	e7d0      	b.n	40f2a4 <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40f302:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f306:	f043 0302 	orr.w	r3, r3, #2
  40f30a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f30e:	e7c9      	b.n	40f2a4 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 1;
  40f310:	6a23      	ldr	r3, [r4, #32]
  40f312:	2b00      	cmp	r3, #0
  40f314:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f318:	bfcc      	ite	gt
  40f31a:	f043 0302 	orrgt.w	r3, r3, #2
        else param->inv = 0;
  40f31e:	f36f 0341 	bfcle	r3, #1, #1
  40f322:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f326:	e7bd      	b.n	40f2a4 <lv_draw_mask_line_points_init+0xb8>
  40f328:	00415ead 	.word	0x00415ead
  40f32c:	0040e549 	.word	0x0040e549

0040f330 <lv_draw_mask_radius_init>:
{
  40f330:	b470      	push	{r4, r5, r6}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f332:	88cc      	ldrh	r4, [r1, #6]
  40f334:	3401      	adds	r4, #1
  40f336:	884d      	ldrh	r5, [r1, #2]
  40f338:	1b64      	subs	r4, r4, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f33a:	888d      	ldrh	r5, [r1, #4]
  40f33c:	3501      	adds	r5, #1
  40f33e:	880e      	ldrh	r6, [r1, #0]
  40f340:	1bad      	subs	r5, r5, r6
    int32_t short_side = LV_MATH_MIN(w, h);
  40f342:	b224      	sxth	r4, r4
  40f344:	b22d      	sxth	r5, r5
  40f346:	42ac      	cmp	r4, r5
  40f348:	bfa8      	it	ge
  40f34a:	462c      	movge	r4, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
  40f34c:	1064      	asrs	r4, r4, #1
  40f34e:	42a2      	cmp	r2, r4
  40f350:	bfc8      	it	gt
  40f352:	b222      	sxthgt	r2, r4
  40f354:	3901      	subs	r1, #1
  40f356:	f100 0610 	add.w	r6, r0, #16
    uint8_t * d8 = (uint8_t *)dst;
  40f35a:	f100 0408 	add.w	r4, r0, #8
        *d8 = *s8;
  40f35e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  40f362:	f804 5b01 	strb.w	r5, [r4], #1
    while(len) {
  40f366:	42b4      	cmp	r4, r6
  40f368:	d1f9      	bne.n	40f35e <lv_draw_mask_radius_init+0x2e>
    param->cfg.radius = radius;
  40f36a:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
  40f36c:	7c82      	ldrb	r2, [r0, #18]
  40f36e:	f363 0200 	bfi	r2, r3, #0, #1
  40f372:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
  40f374:	4b05      	ldr	r3, [pc, #20]	; (40f38c <lv_draw_mask_radius_init+0x5c>)
  40f376:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
  40f378:	2302      	movs	r3, #2
  40f37a:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
  40f37c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  40f380:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
  40f382:	2300      	movs	r3, #0
  40f384:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
  40f386:	8303      	strh	r3, [r0, #24]
}
  40f388:	bc70      	pop	{r4, r5, r6}
  40f38a:	4770      	bx	lr
  40f38c:	0040eaf1 	.word	0x0040eaf1

0040f390 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
  40f390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f394:	b08b      	sub	sp, #44	; 0x2c
  40f396:	9006      	str	r0, [sp, #24]
  40f398:	4689      	mov	r9, r1
  40f39a:	9207      	str	r2, [sp, #28]
    int32_t s_left = sw >> 1;
  40f39c:	ea4f 0b61 	mov.w	fp, r1, asr #1
  40f3a0:	f8cd b008 	str.w	fp, [sp, #8]
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
  40f3a4:	f011 0f01 	tst.w	r1, #1
  40f3a8:	d15b      	bne.n	40f462 <shadow_blur_corner+0xd2>
  40f3aa:	f10b 33ff 	add.w	r3, fp, #4294967295
  40f3ae:	9308      	str	r3, [sp, #32]

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
  40f3b0:	9c06      	ldr	r4, [sp, #24]
  40f3b2:	0067      	lsls	r7, r4, #1
  40f3b4:	4638      	mov	r0, r7
  40f3b6:	4b6c      	ldr	r3, [pc, #432]	; (40f568 <shadow_blur_corner+0x1d8>)
  40f3b8:	4798      	blx	r3
  40f3ba:	9005      	str	r0, [sp, #20]
    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
  40f3bc:	2c00      	cmp	r4, #0
  40f3be:	f340 80c3 	ble.w	40f548 <shadow_blur_corner+0x1b8>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
  40f3c2:	1eba      	subs	r2, r7, #2
  40f3c4:	19c1      	adds	r1, r0, r7
  40f3c6:	9103      	str	r1, [sp, #12]
  40f3c8:	9d07      	ldr	r5, [sp, #28]
  40f3ca:	f04f 0800 	mov.w	r8, #0
        for(x = size - 1; x >= 0; x--) {
  40f3ce:	f104 3aff 	add.w	sl, r4, #4294967295
  40f3d2:	9908      	ldr	r1, [sp, #32]
  40f3d4:	ebaa 0101 	sub.w	r1, sl, r1
  40f3d8:	9104      	str	r1, [sp, #16]
  40f3da:	4606      	mov	r6, r0
  40f3dc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  40f3e0:	4693      	mov	fp, r2
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
  40f3e2:	f8cd 9004 	str.w	r9, [sp, #4]
  40f3e6:	f835 300b 	ldrh.w	r3, [r5, fp]
  40f3ea:	fb09 f303 	mul.w	r3, r9, r3
        for(x = size - 1; x >= 0; x--) {
  40f3ee:	f1ba 0f00 	cmp.w	sl, #0
  40f3f2:	db1b      	blt.n	40f42c <shadow_blur_corner+0x9c>
  40f3f4:	9a02      	ldr	r2, [sp, #8]
  40f3f6:	eb02 010a 	add.w	r1, r2, sl
  40f3fa:	9a04      	ldr	r2, [sp, #16]
  40f3fc:	3a01      	subs	r2, #1
  40f3fe:	9803      	ldr	r0, [sp, #12]
  40f400:	f04f 0e00 	mov.w	lr, #0
            sh_ups_blur_buf[x] = v;
  40f404:	f820 3d02 	strh.w	r3, [r0, #-2]!

            /*Forget the right pixel*/
            uint32_t right_val = 0;
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
  40f408:	428c      	cmp	r4, r1
  40f40a:	bfcc      	ite	gt
  40f40c:	f835 c011 	ldrhgt.w	ip, [r5, r1, lsl #1]
  40f410:	46f4      	movle	ip, lr
            v -= right_val;
  40f412:	eba3 030c 	sub.w	r3, r3, ip

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40f416:	2a00      	cmp	r2, #0
  40f418:	bfb4      	ite	lt
  40f41a:	f8b5 c000 	ldrhlt.w	ip, [r5]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
  40f41e:	f835 c012 	ldrhge.w	ip, [r5, r2, lsl #1]
            v += left_val;
  40f422:	4463      	add	r3, ip
  40f424:	3901      	subs	r1, #1
  40f426:	3a01      	subs	r2, #1
        for(x = size - 1; x >= 0; x--) {
  40f428:	42b0      	cmp	r0, r6
  40f42a:	d1eb      	bne.n	40f404 <shadow_blur_corner+0x74>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
  40f42c:	463a      	mov	r2, r7
  40f42e:	4631      	mov	r1, r6
  40f430:	4628      	mov	r0, r5
  40f432:	4b4e      	ldr	r3, [pc, #312]	; (40f56c <shadow_blur_corner+0x1dc>)
  40f434:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40f436:	443d      	add	r5, r7
    for(y = 0; y < size; y++) {
  40f438:	f108 0801 	add.w	r8, r8, #1
  40f43c:	45a0      	cmp	r8, r4
  40f43e:	d1d0      	bne.n	40f3e2 <shadow_blur_corner+0x52>
  40f440:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
  40f444:	9a07      	ldr	r2, [sp, #28]
  40f446:	8813      	ldrh	r3, [r2, #0]
  40f448:	9901      	ldr	r1, [sp, #4]
  40f44a:	fb93 f3f1 	sdiv	r3, r3, r1
  40f44e:	8013      	strh	r3, [r2, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
  40f450:	9b06      	ldr	r3, [sp, #24]
  40f452:	fb03 f503 	mul.w	r5, r3, r3
  40f456:	2d01      	cmp	r5, #1
  40f458:	d916      	bls.n	40f488 <shadow_blur_corner+0xf8>
  40f45a:	9a07      	ldr	r2, [sp, #28]
  40f45c:	2101      	movs	r1, #1
  40f45e:	9e01      	ldr	r6, [sp, #4]
  40f460:	e005      	b.n	40f46e <shadow_blur_corner+0xde>
    int32_t s_left = sw >> 1;
  40f462:	f8cd b020 	str.w	fp, [sp, #32]
  40f466:	e7a3      	b.n	40f3b0 <shadow_blur_corner+0x20>
    for(i = 1; i < (uint32_t)size * size; i++) {
  40f468:	3101      	adds	r1, #1
  40f46a:	42a9      	cmp	r1, r5
  40f46c:	d209      	bcs.n	40f482 <shadow_blur_corner+0xf2>
  40f46e:	4610      	mov	r0, r2
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  40f470:	f832 3f02 	ldrh.w	r3, [r2, #2]!
  40f474:	8800      	ldrh	r0, [r0, #0]
  40f476:	4298      	cmp	r0, r3
  40f478:	d0f6      	beq.n	40f468 <shadow_blur_corner+0xd8>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
  40f47a:	fb93 f3f6 	sdiv	r3, r3, r6
  40f47e:	8013      	strh	r3, [r2, #0]
  40f480:	e7f2      	b.n	40f468 <shadow_blur_corner+0xd8>
    }

    for(x = 0; x < size; x++) {
  40f482:	9b06      	ldr	r3, [sp, #24]
  40f484:	2b00      	cmp	r3, #0
  40f486:	dd59      	ble.n	40f53c <shadow_blur_corner+0x1ac>
  40f488:	9e07      	ldr	r6, [sp, #28]
  40f48a:	9602      	str	r6, [sp, #8]
  40f48c:	9908      	ldr	r1, [sp, #32]
  40f48e:	fb01 7207 	mla	r2, r1, r7, r7
  40f492:	ea6f 030b 	mvn.w	r3, fp
  40f496:	1a5b      	subs	r3, r3, r1
  40f498:	9d06      	ldr	r5, [sp, #24]
  40f49a:	fb05 f303 	mul.w	r3, r5, r3
  40f49e:	9306      	str	r3, [sp, #24]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
  40f4a0:	1e6b      	subs	r3, r5, #1
  40f4a2:	fb05 f303 	mul.w	r3, r5, r3
  40f4a6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
  40f4aa:	9307      	str	r3, [sp, #28]
  40f4ac:	f04f 0a00 	mov.w	sl, #0
  40f4b0:	1e93      	subs	r3, r2, #2
  40f4b2:	9308      	str	r3, [sp, #32]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
  40f4b4:	f101 0901 	add.w	r9, r1, #1
        sh_ups_tmp_buf = &sh_ups_buf[x];
  40f4b8:	9b02      	ldr	r3, [sp, #8]
  40f4ba:	461e      	mov	r6, r3
  40f4bc:	3302      	adds	r3, #2
  40f4be:	461a      	mov	r2, r3
  40f4c0:	9302      	str	r3, [sp, #8]
        int32_t v = sh_ups_tmp_buf[0] * sw;
  40f4c2:	8833      	ldrh	r3, [r6, #0]
  40f4c4:	9901      	ldr	r1, [sp, #4]
  40f4c6:	fb01 f303 	mul.w	r3, r1, r3
  40f4ca:	9908      	ldr	r1, [sp, #32]
  40f4cc:	188d      	adds	r5, r1, r2
  40f4ce:	9a05      	ldr	r2, [sp, #20]
  40f4d0:	f1a2 0c02 	sub.w	ip, r2, #2
  40f4d4:	46e0      	mov	r8, ip
  40f4d6:	46b6      	mov	lr, r6
  40f4d8:	2200      	movs	r2, #0
  40f4da:	f8cd c00c 	str.w	ip, [sp, #12]
  40f4de:	9604      	str	r6, [sp, #16]
  40f4e0:	9e06      	ldr	r6, [sp, #24]
  40f4e2:	f8dd c01c 	ldr.w	ip, [sp, #28]
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  40f4e6:	2b00      	cmp	r3, #0
  40f4e8:	bfac      	ite	ge
  40f4ea:	1199      	asrge	r1, r3, #6
  40f4ec:	2100      	movlt	r1, #0
  40f4ee:	f828 1f02 	strh.w	r1, [r8, #2]!
  40f4f2:	4611      	mov	r1, r2
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  40f4f4:	eba2 000b 	sub.w	r0, r2, fp
  40f4f8:	2800      	cmp	r0, #0
  40f4fa:	bfd4      	ite	le
  40f4fc:	f8be 0000 	ldrhle.w	r0, [lr]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
  40f500:	f835 0016 	ldrhgt.w	r0, [r5, r6, lsl #1]
            v -= top_val;
  40f504:	1a1b      	subs	r3, r3, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
  40f506:	4449      	add	r1, r9
  40f508:	428c      	cmp	r4, r1
  40f50a:	bfcc      	ite	gt
  40f50c:	8829      	ldrhgt	r1, [r5, #0]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
  40f50e:	f83c 101a 	ldrhle.w	r1, [ip, sl, lsl #1]
            v += bottom_val;
  40f512:	440b      	add	r3, r1
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  40f514:	3201      	adds	r2, #1
  40f516:	44be      	add	lr, r7
  40f518:	443d      	add	r5, r7
  40f51a:	42a2      	cmp	r2, r4
  40f51c:	dbe3      	blt.n	40f4e6 <shadow_blur_corner+0x156>
  40f51e:	f8dd c00c 	ldr.w	ip, [sp, #12]
  40f522:	9e04      	ldr	r6, [sp, #16]
  40f524:	2300      	movs	r3, #0
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
  40f526:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
  40f52a:	8032      	strh	r2, [r6, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
  40f52c:	3301      	adds	r3, #1
  40f52e:	443e      	add	r6, r7
  40f530:	42a3      	cmp	r3, r4
  40f532:	dbf8      	blt.n	40f526 <shadow_blur_corner+0x196>
    for(x = 0; x < size; x++) {
  40f534:	f10a 0a01 	add.w	sl, sl, #1
  40f538:	45a2      	cmp	sl, r4
  40f53a:	dbbd      	blt.n	40f4b8 <shadow_blur_corner+0x128>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
  40f53c:	9805      	ldr	r0, [sp, #20]
  40f53e:	4b0c      	ldr	r3, [pc, #48]	; (40f570 <shadow_blur_corner+0x1e0>)
  40f540:	4798      	blx	r3
}
  40f542:	b00b      	add	sp, #44	; 0x2c
  40f544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
  40f548:	f8cd 9004 	str.w	r9, [sp, #4]
  40f54c:	9a07      	ldr	r2, [sp, #28]
  40f54e:	8813      	ldrh	r3, [r2, #0]
  40f550:	fb93 f9f9 	sdiv	r9, r3, r9
  40f554:	f8a2 9000 	strh.w	r9, [r2]
    for(i = 1; i < (uint32_t)size * size; i++) {
  40f558:	9b06      	ldr	r3, [sp, #24]
  40f55a:	fb03 f503 	mul.w	r5, r3, r3
  40f55e:	2d01      	cmp	r5, #1
  40f560:	f63f af7b 	bhi.w	40f45a <shadow_blur_corner+0xca>
  40f564:	e7ea      	b.n	40f53c <shadow_blur_corner+0x1ac>
  40f566:	bf00      	nop
  40f568:	00415cd9 	.word	0x00415cd9
  40f56c:	00415a1d 	.word	0x00415a1d
  40f570:	0041595d 	.word	0x0041595d

0040f574 <draw_full_border>:
}
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
  40f574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f578:	b0a5      	sub	sp, #148	; 0x94
  40f57a:	4605      	mov	r5, r0
  40f57c:	460c      	mov	r4, r1
  40f57e:	9204      	str	r2, [sp, #16]
  40f580:	461f      	mov	r7, r3
  40f582:	f89d 80b8 	ldrb.w	r8, [sp, #184]	; 0xb8
  40f586:	f89d 90c0 	ldrb.w	r9, [sp, #192]	; 0xc0
  40f58a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
  40f58e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40f590:	4bad      	ldr	r3, [pc, #692]	; (40f848 <draw_full_border+0x2d4>)
  40f592:	4798      	blx	r3
  40f594:	9005      	str	r0, [sp, #20]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f596:	88ab      	ldrh	r3, [r5, #4]
  40f598:	f9b5 b000 	ldrsh.w	fp, [r5]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f59c:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
  40f5a0:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
  40f5a4:	88a1      	ldrh	r1, [r4, #4]
  40f5a6:	1aca      	subs	r2, r1, r3
  40f5a8:	b292      	uxth	r2, r2
  40f5aa:	920c      	str	r2, [sp, #48]	; 0x30
  40f5ac:	b216      	sxth	r6, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f5ae:	f9b4 c000 	ldrsh.w	ip, [r4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f5b2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
  40f5b6:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
  40f5ba:	f1b8 0f00 	cmp.w	r8, #0
  40f5be:	d021      	beq.n	40f604 <draw_full_border+0x90>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f5c0:	3301      	adds	r3, #1
  40f5c2:	eba3 0b0b 	sub.w	fp, r3, fp
    int32_t inner_w = lv_area_get_width(area_inner);
  40f5c6:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f5ca:	3001      	adds	r0, #1
  40f5cc:	eba0 0a0a 	sub.w	sl, r0, sl
    int32_t inner_h = lv_area_get_height(area_inner);
  40f5d0:	fa0f fa8a 	sxth.w	sl, sl
        rin = radius;
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
  40f5d4:	45da      	cmp	sl, fp
  40f5d6:	bfa8      	it	ge
  40f5d8:	46da      	movge	sl, fp
        if(rin > short_side >> 1) rin = short_side >> 1;
  40f5da:	ea4f 0a6a 	mov.w	sl, sl, asr #1
  40f5de:	4557      	cmp	r7, sl
  40f5e0:	bfa8      	it	ge
  40f5e2:	4657      	movge	r7, sl

        /*Get the outer area*/
        rout = rin + border_width;
  40f5e4:	eb06 0b07 	add.w	fp, r6, r7
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40f5e8:	4b98      	ldr	r3, [pc, #608]	; (40f84c <draw_full_border+0x2d8>)
  40f5ea:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40f5ec:	4b98      	ldr	r3, [pc, #608]	; (40f850 <draw_full_border+0x2dc>)
  40f5ee:	4798      	blx	r3
  40f5f0:	4680      	mov	r8, r0

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
  40f5f2:	9a04      	ldr	r2, [sp, #16]
  40f5f4:	4621      	mov	r1, r4
  40f5f6:	a822      	add	r0, sp, #136	; 0x88
  40f5f8:	4b96      	ldr	r3, [pc, #600]	; (40f854 <draw_full_border+0x2e0>)
  40f5fa:	4798      	blx	r3
    if(is_common == false) return;
  40f5fc:	b9d0      	cbnz	r0, 40f634 <draw_full_border+0xc0>
        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
    lv_draw_mask_remove_id(mask_rout_id);
    _lv_mem_buf_release(mask_buf);
}
  40f5fe:	b025      	add	sp, #148	; 0x94
  40f600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f604:	f101 0b01 	add.w	fp, r1, #1
  40f608:	ebab 0b0c 	sub.w	fp, fp, ip
    int32_t coords_out_w = lv_area_get_width(area_outer);
  40f60c:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f610:	3201      	adds	r2, #1
  40f612:	eba2 0e0e 	sub.w	lr, r2, lr
    int32_t coords_out_h = lv_area_get_height(area_outer);
  40f616:	fa0f fe8e 	sxth.w	lr, lr
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
  40f61a:	45f3      	cmp	fp, lr
  40f61c:	bfa8      	it	ge
  40f61e:	46f3      	movge	fp, lr
        if(rout > short_side >> 1) rout = short_side >> 1;
  40f620:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  40f624:	45bb      	cmp	fp, r7
  40f626:	bfa8      	it	ge
  40f628:	46bb      	movge	fp, r7
        rin = rout - border_width;
  40f62a:	ebab 0706 	sub.w	r7, fp, r6
  40f62e:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
  40f632:	e7d9      	b.n	40f5e8 <draw_full_border+0x74>
    draw_area.x1 -= disp_area->x1;
  40f634:	f8b8 e010 	ldrh.w	lr, [r8, #16]
  40f638:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  40f63c:	eba3 030e 	sub.w	r3, r3, lr
  40f640:	b29a      	uxth	r2, r3
  40f642:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
    draw_area.y1 -= disp_area->y1;
  40f646:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  40f64a:	f8bd 108a 	ldrh.w	r1, [sp, #138]	; 0x8a
  40f64e:	1a09      	subs	r1, r1, r0
  40f650:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    draw_area.x2 -= disp_area->x1;
  40f654:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  40f658:	eba3 030e 	sub.w	r3, r3, lr
  40f65c:	b29b      	uxth	r3, r3
  40f65e:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    draw_area.y2 -= disp_area->y1;
  40f662:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  40f666:	1a09      	subs	r1, r1, r0
  40f668:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f66c:	3301      	adds	r3, #1
  40f66e:	1a9b      	subs	r3, r3, r2
  40f670:	b21b      	sxth	r3, r3
  40f672:	9306      	str	r3, [sp, #24]
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
  40f674:	2301      	movs	r3, #1
  40f676:	b23a      	sxth	r2, r7
  40f678:	4629      	mov	r1, r5
  40f67a:	a81b      	add	r0, sp, #108	; 0x6c
  40f67c:	4f76      	ldr	r7, [pc, #472]	; (40f858 <draw_full_border+0x2e4>)
  40f67e:	47b8      	blx	r7
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  40f680:	2100      	movs	r1, #0
  40f682:	a81b      	add	r0, sp, #108	; 0x6c
  40f684:	4d75      	ldr	r5, [pc, #468]	; (40f85c <draw_full_border+0x2e8>)
  40f686:	47a8      	blx	r5
  40f688:	900d      	str	r0, [sp, #52]	; 0x34
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
  40f68a:	2300      	movs	r3, #0
  40f68c:	fa0f f28b 	sxth.w	r2, fp
  40f690:	4621      	mov	r1, r4
  40f692:	a814      	add	r0, sp, #80	; 0x50
  40f694:	47b8      	blx	r7
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  40f696:	2100      	movs	r1, #0
  40f698:	a814      	add	r0, sp, #80	; 0x50
  40f69a:	47a8      	blx	r5
  40f69c:	900e      	str	r0, [sp, #56]	; 0x38
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40f69e:	9b06      	ldr	r3, [sp, #24]
  40f6a0:	9307      	str	r3, [sp, #28]
  40f6a2:	4618      	mov	r0, r3
  40f6a4:	4b6e      	ldr	r3, [pc, #440]	; (40f860 <draw_full_border+0x2ec>)
  40f6a6:	4798      	blx	r3
  40f6a8:	4682      	mov	sl, r0
    if(simple_mode) {
  40f6aa:	9b05      	ldr	r3, [sp, #20]
  40f6ac:	2b00      	cmp	r3, #0
  40f6ae:	f040 81a0 	bne.w	40f9f2 <draw_full_border+0x47e>
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
  40f6b2:	9609      	str	r6, [sp, #36]	; 0x24
  40f6b4:	3e01      	subs	r6, #1
  40f6b6:	4633      	mov	r3, r6
  40f6b8:	455e      	cmp	r6, fp
  40f6ba:	bfb8      	it	lt
  40f6bc:	465b      	movlt	r3, fp
  40f6be:	4619      	mov	r1, r3
  40f6c0:	930f      	str	r3, [sp, #60]	; 0x3c
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
  40f6c2:	f9b8 3012 	ldrsh.w	r3, [r8, #18]
  40f6c6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  40f6ca:	1ad2      	subs	r2, r2, r3
  40f6cc:	440a      	add	r2, r1
  40f6ce:	4611      	mov	r1, r2
  40f6d0:	920a      	str	r2, [sp, #40]	; 0x28
        fill_area.x1 = area_outer->x1;
  40f6d2:	8822      	ldrh	r2, [r4, #0]
  40f6d4:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  40f6d8:	88a2      	ldrh	r2, [r4, #4]
  40f6da:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  40f6de:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
  40f6e2:	4413      	add	r3, r2
  40f6e4:	b21b      	sxth	r3, r3
  40f6e6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  40f6ea:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  40f6ee:	4616      	mov	r6, r2
  40f6f0:	4291      	cmp	r1, r2
  40f6f2:	f2c0 8089 	blt.w	40f808 <draw_full_border+0x294>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  40f6f6:	4f5b      	ldr	r7, [pc, #364]	; (40f864 <draw_full_border+0x2f0>)
  40f6f8:	f8cd b020 	str.w	fp, [sp, #32]
  40f6fc:	9005      	str	r0, [sp, #20]
  40f6fe:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40f702:	e02e      	b.n	40f762 <draw_full_border+0x1ee>
            fill_area2.x1 = area_outer->x2 - rout + 1;
  40f704:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40f708:	1c5a      	adds	r2, r3, #1
  40f70a:	1b55      	subs	r5, r2, r5
  40f70c:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  40f710:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  40f714:	9a08      	ldr	r2, [sp, #32]
  40f716:	1a9b      	subs	r3, r3, r2
  40f718:	3301      	adds	r3, #1
  40f71a:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
  40f71e:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  40f722:	440a      	add	r2, r1
  40f724:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  40f726:	f8cd b008 	str.w	fp, [sp, #8]
  40f72a:	f8cd 9004 	str.w	r9, [sp, #4]
  40f72e:	f8cd a000 	str.w	sl, [sp]
  40f732:	9a05      	ldr	r2, [sp, #20]
  40f734:	2b00      	cmp	r3, #0
  40f736:	bfa8      	it	ge
  40f738:	18d2      	addge	r2, r2, r3
  40f73a:	4613      	mov	r3, r2
  40f73c:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  40f740:	a910      	add	r1, sp, #64	; 0x40
  40f742:	9804      	ldr	r0, [sp, #16]
  40f744:	47b8      	blx	r7
            fill_area.y1++;
  40f746:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
  40f74a:	3301      	adds	r3, #1
  40f74c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  40f750:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  40f754:	3301      	adds	r3, #1
  40f756:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  40f75a:	3601      	adds	r6, #1
  40f75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f75e:	42b3      	cmp	r3, r6
  40f760:	db4e      	blt.n	40f800 <draw_full_border+0x28c>
            _lv_memset_ff(mask_buf, draw_area_w);
  40f762:	9907      	ldr	r1, [sp, #28]
  40f764:	9d05      	ldr	r5, [sp, #20]
  40f766:	4628      	mov	r0, r5
  40f768:	4b3f      	ldr	r3, [pc, #252]	; (40f868 <draw_full_border+0x2f4>)
  40f76a:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40f76c:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  40f770:	4432      	add	r2, r6
  40f772:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  40f776:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  40f77a:	4419      	add	r1, r3
  40f77c:	9b06      	ldr	r3, [sp, #24]
  40f77e:	b212      	sxth	r2, r2
  40f780:	b209      	sxth	r1, r1
  40f782:	9505      	str	r5, [sp, #20]
  40f784:	4628      	mov	r0, r5
  40f786:	4d39      	ldr	r5, [pc, #228]	; (40f86c <draw_full_border+0x2f8>)
  40f788:	47a8      	blx	r5
  40f78a:	4682      	mov	sl, r0
            fill_area2.y1 = fill_area.y1;
  40f78c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
  40f790:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  40f794:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  40f798:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fill_area2.x1 = area_outer->x1;
  40f79c:	f9b4 3000 	ldrsh.w	r3, [r4]
  40f7a0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  40f7a4:	f8bd 5020 	ldrh.w	r5, [sp, #32]
  40f7a8:	3b01      	subs	r3, #1
  40f7aa:	442b      	add	r3, r5
  40f7ac:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  40f7b0:	f8cd b008 	str.w	fp, [sp, #8]
  40f7b4:	f8cd 9004 	str.w	r9, [sp, #4]
  40f7b8:	9000      	str	r0, [sp, #0]
  40f7ba:	9b05      	ldr	r3, [sp, #20]
  40f7bc:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  40f7c0:	a910      	add	r1, sp, #64	; 0x40
  40f7c2:	9804      	ldr	r0, [sp, #16]
  40f7c4:	47b8      	blx	r7
            if(fill_area2.y2 < area_outer->y1 + border_width) {
  40f7c6:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40f7ca:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  40f7ce:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f7d0:	440b      	add	r3, r1
  40f7d2:	429a      	cmp	r2, r3
  40f7d4:	da96      	bge.n	40f704 <draw_full_border+0x190>
                fill_area2.x1 = area_outer->x1 + rout;
  40f7d6:	8823      	ldrh	r3, [r4, #0]
  40f7d8:	442b      	add	r3, r5
  40f7da:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  40f7de:	88a3      	ldrh	r3, [r4, #4]
  40f7e0:	1b5b      	subs	r3, r3, r5
  40f7e2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  40f7e6:	f8cd b008 	str.w	fp, [sp, #8]
  40f7ea:	f8cd 9004 	str.w	r9, [sp, #4]
  40f7ee:	2301      	movs	r3, #1
  40f7f0:	9300      	str	r3, [sp, #0]
  40f7f2:	2300      	movs	r3, #0
  40f7f4:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  40f7f8:	a910      	add	r1, sp, #64	; 0x40
  40f7fa:	9804      	ldr	r0, [sp, #16]
  40f7fc:	47b8      	blx	r7
  40f7fe:	e781      	b.n	40f704 <draw_full_border+0x190>
  40f800:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f804:	f8dd a014 	ldr.w	sl, [sp, #20]
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
  40f808:	f9b8 3012 	ldrsh.w	r3, [r8, #18]
  40f80c:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
  40f810:	1af6      	subs	r6, r6, r3
  40f812:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40f814:	1ab6      	subs	r6, r6, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
  40f816:	990a      	ldr	r1, [sp, #40]	; 0x28
  40f818:	42b1      	cmp	r1, r6
  40f81a:	db01      	blt.n	40f820 <draw_full_border+0x2ac>
  40f81c:	460e      	mov	r6, r1
  40f81e:	3601      	adds	r6, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
  40f820:	4433      	add	r3, r6
  40f822:	b21b      	sxth	r3, r3
  40f824:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  40f828:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  40f82c:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  40f830:	42b3      	cmp	r3, r6
  40f832:	f2c0 809e 	blt.w	40f972 <draw_full_border+0x3fe>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  40f836:	4f0b      	ldr	r7, [pc, #44]	; (40f864 <draw_full_border+0x2f0>)
  40f838:	f8cd b020 	str.w	fp, [sp, #32]
  40f83c:	f8cd a014 	str.w	sl, [sp, #20]
  40f840:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40f844:	e044      	b.n	40f8d0 <draw_full_border+0x35c>
  40f846:	bf00      	nop
  40f848:	0040f1c9 	.word	0x0040f1c9
  40f84c:	00408f81 	.word	0x00408f81
  40f850:	00414199 	.word	0x00414199
  40f854:	00414957 	.word	0x00414957
  40f858:	0040f331 	.word	0x0040f331
  40f85c:	0040f0e5 	.word	0x0040f0e5
  40f860:	00415cd9 	.word	0x00415cd9
  40f864:	0040a9e9 	.word	0x0040a9e9
  40f868:	00415f51 	.word	0x00415f51
  40f86c:	0040f121 	.word	0x0040f121
            fill_area2.x1 = area_outer->x2 - rout + 1;
  40f870:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40f874:	1c5a      	adds	r2, r3, #1
  40f876:	1b55      	subs	r5, r2, r5
  40f878:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  40f87c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  40f880:	9a08      	ldr	r2, [sp, #32]
  40f882:	1a9b      	subs	r3, r3, r2
  40f884:	3301      	adds	r3, #1
  40f886:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
  40f88a:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  40f88e:	440a      	add	r2, r1
  40f890:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  40f892:	f8cd b008 	str.w	fp, [sp, #8]
  40f896:	f8cd 9004 	str.w	r9, [sp, #4]
  40f89a:	f8cd a000 	str.w	sl, [sp]
  40f89e:	9a05      	ldr	r2, [sp, #20]
  40f8a0:	2b00      	cmp	r3, #0
  40f8a2:	bfa8      	it	ge
  40f8a4:	18d2      	addge	r2, r2, r3
  40f8a6:	4613      	mov	r3, r2
  40f8a8:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  40f8ac:	a910      	add	r1, sp, #64	; 0x40
  40f8ae:	9804      	ldr	r0, [sp, #16]
  40f8b0:	47b8      	blx	r7
            fill_area.y1++;
  40f8b2:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
  40f8b6:	3301      	adds	r3, #1
  40f8b8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  40f8bc:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  40f8c0:	3301      	adds	r3, #1
  40f8c2:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  40f8c6:	3601      	adds	r6, #1
  40f8c8:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  40f8cc:	42b3      	cmp	r3, r6
  40f8ce:	db4e      	blt.n	40f96e <draw_full_border+0x3fa>
            _lv_memset_ff(mask_buf, draw_area_w);
  40f8d0:	9907      	ldr	r1, [sp, #28]
  40f8d2:	9d05      	ldr	r5, [sp, #20]
  40f8d4:	4628      	mov	r0, r5
  40f8d6:	4b69      	ldr	r3, [pc, #420]	; (40fa7c <draw_full_border+0x508>)
  40f8d8:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40f8da:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  40f8de:	4432      	add	r2, r6
  40f8e0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  40f8e4:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  40f8e8:	4419      	add	r1, r3
  40f8ea:	9b06      	ldr	r3, [sp, #24]
  40f8ec:	b212      	sxth	r2, r2
  40f8ee:	b209      	sxth	r1, r1
  40f8f0:	9505      	str	r5, [sp, #20]
  40f8f2:	4628      	mov	r0, r5
  40f8f4:	4d62      	ldr	r5, [pc, #392]	; (40fa80 <draw_full_border+0x50c>)
  40f8f6:	47a8      	blx	r5
  40f8f8:	4682      	mov	sl, r0
            fill_area2.x1 = area_outer->x1;
  40f8fa:	f9b4 3000 	ldrsh.w	r3, [r4]
  40f8fe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  40f902:	f8bd 5020 	ldrh.w	r5, [sp, #32]
  40f906:	3b01      	subs	r3, #1
  40f908:	442b      	add	r3, r5
  40f90a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            fill_area2.y1 = fill_area.y1;
  40f90e:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
  40f912:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  40f916:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  40f91a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  40f91e:	f8cd b008 	str.w	fp, [sp, #8]
  40f922:	f8cd 9004 	str.w	r9, [sp, #4]
  40f926:	9000      	str	r0, [sp, #0]
  40f928:	9b05      	ldr	r3, [sp, #20]
  40f92a:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  40f92e:	a910      	add	r1, sp, #64	; 0x40
  40f930:	9804      	ldr	r0, [sp, #16]
  40f932:	47b8      	blx	r7
            if(fill_area2.y2 > area_outer->y2 - border_width) {
  40f934:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40f938:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40f93c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f93e:	1a5b      	subs	r3, r3, r1
  40f940:	429a      	cmp	r2, r3
  40f942:	dd95      	ble.n	40f870 <draw_full_border+0x2fc>
                fill_area2.x1 = area_outer->x1 + rout;
  40f944:	8823      	ldrh	r3, [r4, #0]
  40f946:	442b      	add	r3, r5
  40f948:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  40f94c:	88a3      	ldrh	r3, [r4, #4]
  40f94e:	1b5b      	subs	r3, r3, r5
  40f950:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  40f954:	f8cd b008 	str.w	fp, [sp, #8]
  40f958:	f8cd 9004 	str.w	r9, [sp, #4]
  40f95c:	2301      	movs	r3, #1
  40f95e:	9300      	str	r3, [sp, #0]
  40f960:	2300      	movs	r3, #0
  40f962:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  40f966:	a910      	add	r1, sp, #64	; 0x40
  40f968:	9804      	ldr	r0, [sp, #16]
  40f96a:	47b8      	blx	r7
  40f96c:	e780      	b.n	40f870 <draw_full_border+0x2fc>
  40f96e:	f8dd a014 	ldr.w	sl, [sp, #20]
        fill_area.y1 = area_outer->y1 + corner_size + 1;
  40f972:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
  40f976:	8863      	ldrh	r3, [r4, #2]
  40f978:	3301      	adds	r3, #1
  40f97a:	4433      	add	r3, r6
  40f97c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = area_outer->y2 - corner_size - 1;
  40f980:	88e3      	ldrh	r3, [r4, #6]
  40f982:	3b01      	subs	r3, #1
  40f984:	1b9e      	subs	r6, r3, r6
  40f986:	f8ad 604e 	strh.w	r6, [sp, #78]	; 0x4e
        fill_area.x1 = area_outer->x1;
  40f98a:	f9b4 3000 	ldrsh.w	r3, [r4]
  40f98e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x1 + border_width - 1;
  40f992:	3b01      	subs	r3, #1
  40f994:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40f996:	443b      	add	r3, r7
  40f998:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  40f99c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f99e:	9302      	str	r3, [sp, #8]
  40f9a0:	f8cd 9004 	str.w	r9, [sp, #4]
  40f9a4:	2601      	movs	r6, #1
  40f9a6:	9600      	str	r6, [sp, #0]
  40f9a8:	2300      	movs	r3, #0
  40f9aa:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  40f9ae:	a912      	add	r1, sp, #72	; 0x48
  40f9b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40f9b4:	4640      	mov	r0, r8
  40f9b6:	4d33      	ldr	r5, [pc, #204]	; (40fa84 <draw_full_border+0x510>)
  40f9b8:	47a8      	blx	r5
        fill_area.x1 = area_outer->x2 - border_width + 1;
  40f9ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  40f9be:	1993      	adds	r3, r2, r6
  40f9c0:	1bdb      	subs	r3, r3, r7
  40f9c2:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  40f9c6:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  40f9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f9cc:	9302      	str	r3, [sp, #8]
  40f9ce:	f8cd 9004 	str.w	r9, [sp, #4]
  40f9d2:	9600      	str	r6, [sp, #0]
  40f9d4:	2300      	movs	r3, #0
  40f9d6:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  40f9da:	a912      	add	r1, sp, #72	; 0x48
  40f9dc:	4640      	mov	r0, r8
  40f9de:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
  40f9e0:	980d      	ldr	r0, [sp, #52]	; 0x34
  40f9e2:	4c29      	ldr	r4, [pc, #164]	; (40fa88 <draw_full_border+0x514>)
  40f9e4:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
  40f9e6:	980e      	ldr	r0, [sp, #56]	; 0x38
  40f9e8:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40f9ea:	4650      	mov	r0, sl
  40f9ec:	4b27      	ldr	r3, [pc, #156]	; (40fa8c <draw_full_border+0x518>)
  40f9ee:	4798      	blx	r3
  40f9f0:	e605      	b.n	40f5fe <draw_full_border+0x8a>
        fill_area.x1 = area_outer->x1;
  40f9f2:	8823      	ldrh	r3, [r4, #0]
  40f9f4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  40f9f8:	88a3      	ldrh	r3, [r4, #4]
  40f9fa:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  40f9fe:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
  40fa02:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  40fa06:	4413      	add	r3, r2
  40fa08:	b21b      	sxth	r3, r3
  40fa0a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  40fa0e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40fa12:	4614      	mov	r4, r2
  40fa14:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  40fa18:	429a      	cmp	r2, r3
  40fa1a:	dce1      	bgt.n	40f9e0 <draw_full_border+0x46c>
            _lv_memset_ff(mask_buf, draw_area_w);
  40fa1c:	4f17      	ldr	r7, [pc, #92]	; (40fa7c <draw_full_border+0x508>)
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40fa1e:	4e18      	ldr	r6, [pc, #96]	; (40fa80 <draw_full_border+0x50c>)
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
  40fa20:	4d18      	ldr	r5, [pc, #96]	; (40fa84 <draw_full_border+0x510>)
  40fa22:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
            _lv_memset_ff(mask_buf, draw_area_w);
  40fa26:	9907      	ldr	r1, [sp, #28]
  40fa28:	4650      	mov	r0, sl
  40fa2a:	47b8      	blx	r7
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40fa2c:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  40fa30:	4422      	add	r2, r4
  40fa32:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  40fa36:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  40fa3a:	4419      	add	r1, r3
  40fa3c:	9b06      	ldr	r3, [sp, #24]
  40fa3e:	b212      	sxth	r2, r2
  40fa40:	b209      	sxth	r1, r1
  40fa42:	4650      	mov	r0, sl
  40fa44:	47b0      	blx	r6
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
  40fa46:	f8cd b008 	str.w	fp, [sp, #8]
  40fa4a:	f8cd 9004 	str.w	r9, [sp, #4]
  40fa4e:	9000      	str	r0, [sp, #0]
  40fa50:	4653      	mov	r3, sl
  40fa52:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  40fa56:	a912      	add	r1, sp, #72	; 0x48
  40fa58:	9804      	ldr	r0, [sp, #16]
  40fa5a:	47a8      	blx	r5
            fill_area.y1++;
  40fa5c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
  40fa60:	3301      	adds	r3, #1
  40fa62:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  40fa66:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  40fa6a:	3301      	adds	r3, #1
  40fa6c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40fa70:	3401      	adds	r4, #1
  40fa72:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  40fa76:	42a3      	cmp	r3, r4
  40fa78:	dad5      	bge.n	40fa26 <draw_full_border+0x4b2>
  40fa7a:	e7b1      	b.n	40f9e0 <draw_full_border+0x46c>
  40fa7c:	00415f51 	.word	0x00415f51
  40fa80:	0040f121 	.word	0x0040f121
  40fa84:	0040a9e9 	.word	0x0040a9e9
  40fa88:	0040f171 	.word	0x0040f171
  40fa8c:	0041595d 	.word	0x0041595d

0040fa90 <lv_draw_rect_dsc_init>:
{
  40fa90:	b510      	push	{r4, lr}
  40fa92:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
  40fa94:	2154      	movs	r1, #84	; 0x54
  40fa96:	4b0e      	ldr	r3, [pc, #56]	; (40fad0 <lv_draw_rect_dsc_init+0x40>)
  40fa98:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
  40fa9a:	4b0e      	ldr	r3, [pc, #56]	; (40fad4 <lv_draw_rect_dsc_init+0x44>)
  40fa9c:	881b      	ldrh	r3, [r3, #0]
  40fa9e:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
  40faa0:	2300      	movs	r3, #0
  40faa2:	80a3      	strh	r3, [r4, #4]
    dsc->border_color = LV_COLOR_BLACK;
  40faa4:	81e3      	strh	r3, [r4, #14]
    dsc->pattern_recolor = LV_COLOR_BLACK;
  40faa6:	86a3      	strh	r3, [r4, #52]	; 0x34
    dsc->value_color = LV_COLOR_BLACK;
  40faa8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dsc->shadow_color = LV_COLOR_BLACK;
  40faac:	8423      	strh	r3, [r4, #32]
    dsc->bg_grad_color_stop = 0xFF;
  40faae:	23ff      	movs	r3, #255	; 0xff
  40fab0:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
  40fab2:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
  40fab4:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
  40fab6:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
  40fab8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
  40fabc:	4a06      	ldr	r2, [pc, #24]	; (40fad8 <lv_draw_rect_dsc_init+0x48>)
  40fabe:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
  40fac0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
  40fac4:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
  40fac6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
  40faca:	230f      	movs	r3, #15
  40facc:	8263      	strh	r3, [r4, #18]
  40face:	bd10      	pop	{r4, pc}
  40fad0:	00415ead 	.word	0x00415ead
  40fad4:	00425bd4 	.word	0x00425bd4
  40fad8:	2040002c 	.word	0x2040002c

0040fadc <lv_draw_rect>:
{
  40fadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fae0:	b0b5      	sub	sp, #212	; 0xd4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fae2:	88c5      	ldrh	r5, [r0, #6]
  40fae4:	8846      	ldrh	r6, [r0, #2]
  40fae6:	1c6b      	adds	r3, r5, #1
  40fae8:	1b9b      	subs	r3, r3, r6
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
  40faea:	b21b      	sxth	r3, r3
  40faec:	2b00      	cmp	r3, #0
  40faee:	f340 862f 	ble.w	410750 <lv_draw_rect+0xc74>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40faf2:	8887      	ldrh	r7, [r0, #4]
  40faf4:	f8b0 9000 	ldrh.w	r9, [r0]
  40faf8:	1c7b      	adds	r3, r7, #1
  40fafa:	eba3 0309 	sub.w	r3, r3, r9
  40fafe:	b21b      	sxth	r3, r3
  40fb00:	2b00      	cmp	r3, #0
  40fb02:	f340 8625 	ble.w	410750 <lv_draw_rect+0xc74>
  40fb06:	4614      	mov	r4, r2
  40fb08:	9104      	str	r1, [sp, #16]
  40fb0a:	9006      	str	r0, [sp, #24]
    if(dsc->shadow_width == 0) return;
  40fb0c:	f9b2 8022 	ldrsh.w	r8, [r2, #34]	; 0x22
  40fb10:	f1b8 0f00 	cmp.w	r8, #0
  40fb14:	f000 84f3 	beq.w	4104fe <lv_draw_rect+0xa22>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
  40fb18:	f892 b02a 	ldrb.w	fp, [r2, #42]	; 0x2a
  40fb1c:	f1bb 0f02 	cmp.w	fp, #2
  40fb20:	f240 84ed 	bls.w	4104fe <lv_draw_rect+0xa22>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  40fb24:	f1b8 0f01 	cmp.w	r8, #1
  40fb28:	f000 8102 	beq.w	40fd30 <lv_draw_rect+0x254>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
  40fb2c:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
  40fb2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  40fb30:	1ad1      	subs	r1, r2, r3
  40fb32:	4489      	add	r9, r1
  40fb34:	fa1f f989 	uxth.w	r9, r9
  40fb38:	f8ad 9058 	strh.w	r9, [sp, #88]	; 0x58
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
  40fb3c:	441a      	add	r2, r3
  40fb3e:	4417      	add	r7, r2
  40fb40:	b2bf      	uxth	r7, r7
  40fb42:	f8ad 705c 	strh.w	r7, [sp, #92]	; 0x5c
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
  40fb46:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
  40fb48:	1ad1      	subs	r1, r2, r3
  40fb4a:	440e      	add	r6, r1
  40fb4c:	b2b6      	uxth	r6, r6
  40fb4e:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
  40fb52:	4413      	add	r3, r2
  40fb54:	441d      	add	r5, r3
  40fb56:	b2ad      	uxth	r5, r5
  40fb58:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  40fb5c:	4642      	mov	r2, r8
  40fb5e:	f1b8 0f00 	cmp.w	r8, #0
  40fb62:	bfb8      	it	lt
  40fb64:	f108 0201 	addlt.w	r2, r8, #1
  40fb68:	ea6f 0262 	mvn.w	r2, r2, asr #1
  40fb6c:	b292      	uxth	r2, r2
  40fb6e:	eb09 0302 	add.w	r3, r9, r2
  40fb72:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  40fb76:	4643      	mov	r3, r8
  40fb78:	f1b8 0f00 	cmp.w	r8, #0
  40fb7c:	bfb8      	it	lt
  40fb7e:	f108 0301 	addlt.w	r3, r8, #1
  40fb82:	105b      	asrs	r3, r3, #1
  40fb84:	3301      	adds	r3, #1
  40fb86:	b29b      	uxth	r3, r3
  40fb88:	18f9      	adds	r1, r7, r3
  40fb8a:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
  40fb8e:	4432      	add	r2, r6
  40fb90:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
  40fb94:	442b      	add	r3, r5
  40fb96:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40fb9a:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  40fb9e:	bf28      	it	cs
  40fba0:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40fba4:	4bbf      	ldr	r3, [pc, #764]	; (40fea4 <lv_draw_rect+0x3c8>)
  40fba6:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40fba8:	4bbf      	ldr	r3, [pc, #764]	; (40fea8 <lv_draw_rect+0x3cc>)
  40fbaa:	4798      	blx	r3
  40fbac:	4682      	mov	sl, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
  40fbae:	9a04      	ldr	r2, [sp, #16]
  40fbb0:	a918      	add	r1, sp, #96	; 0x60
  40fbb2:	a81a      	add	r0, sp, #104	; 0x68
  40fbb4:	4bbd      	ldr	r3, [pc, #756]	; (40feac <lv_draw_rect+0x3d0>)
  40fbb6:	4798      	blx	r3
    if(is_common == false) return;
  40fbb8:	2800      	cmp	r0, #0
  40fbba:	f000 84a0 	beq.w	4104fe <lv_draw_rect+0xa22>
    draw_area.x1 -= disp_area->x1;
  40fbbe:	f8ba 1010 	ldrh.w	r1, [sl, #16]
  40fbc2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
  40fbc6:	1a5b      	subs	r3, r3, r1
  40fbc8:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    draw_area.y1 -= disp_area->y1;
  40fbcc:	f8ba 2012 	ldrh.w	r2, [sl, #18]
  40fbd0:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
  40fbd4:	1a9b      	subs	r3, r3, r2
  40fbd6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    draw_area.x2 -= disp_area->x1;
  40fbda:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
  40fbde:	1a5b      	subs	r3, r3, r1
  40fbe0:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    draw_area.y2 -= disp_area->y1;
  40fbe4:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
  40fbe8:	1a9b      	subs	r3, r3, r2
  40fbea:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
  40fbee:	9a06      	ldr	r2, [sp, #24]
  40fbf0:	1e53      	subs	r3, r2, #1
  40fbf2:	1dd0      	adds	r0, r2, #7
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  40fbf4:	aa1c      	add	r2, sp, #112	; 0x70
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  40fbf6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40fbfa:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  40fbfe:	4283      	cmp	r3, r0
  40fc00:	d1f9      	bne.n	40fbf6 <lv_draw_rect+0x11a>
    bg_coords.x1 += 1;
  40fc02:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
  40fc06:	3301      	adds	r3, #1
  40fc08:	fa1f fe83 	uxth.w	lr, r3
  40fc0c:	f8ad e070 	strh.w	lr, [sp, #112]	; 0x70
    bg_coords.y1 += 1;
  40fc10:	f8bd 1072 	ldrh.w	r1, [sp, #114]	; 0x72
  40fc14:	3101      	adds	r1, #1
  40fc16:	b288      	uxth	r0, r1
  40fc18:	f8ad 0072 	strh.w	r0, [sp, #114]	; 0x72
    bg_coords.x2 -= 1;
  40fc1c:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
  40fc20:	1e5a      	subs	r2, r3, #1
  40fc22:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
    bg_coords.y2 -= 1;
  40fc26:	f8bd 1076 	ldrh.w	r1, [sp, #118]	; 0x76
  40fc2a:	1e4a      	subs	r2, r1, #1
  40fc2c:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    int32_t r_bg = dsc->radius;
  40fc30:	f9b4 2000 	ldrsh.w	r2, [r4]
  40fc34:	eba3 030e 	sub.w	r3, r3, lr
  40fc38:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fc3a:	1a09      	subs	r1, r1, r0
  40fc3c:	b209      	sxth	r1, r1
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
  40fc3e:	428b      	cmp	r3, r1
  40fc40:	bfa8      	it	ge
  40fc42:	460b      	movge	r3, r1
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
  40fc44:	105b      	asrs	r3, r3, #1
  40fc46:	4293      	cmp	r3, r2
  40fc48:	bfa8      	it	ge
  40fc4a:	4613      	movge	r3, r2
  40fc4c:	930b      	str	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fc4e:	3701      	adds	r7, #1
  40fc50:	eba7 0709 	sub.w	r7, r7, r9
  40fc54:	b2bf      	uxth	r7, r7
  40fc56:	b23b      	sxth	r3, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fc58:	3501      	adds	r5, #1
  40fc5a:	1bad      	subs	r5, r5, r6
  40fc5c:	b2ad      	uxth	r5, r5
  40fc5e:	b22e      	sxth	r6, r5
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
  40fc60:	429e      	cmp	r6, r3
  40fc62:	bfa8      	it	ge
  40fc64:	461e      	movge	r6, r3
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
  40fc66:	1076      	asrs	r6, r6, #1
  40fc68:	4296      	cmp	r6, r2
  40fc6a:	bfa8      	it	ge
  40fc6c:	4616      	movge	r6, r2
    int32_t corner_size = sw  + r_sh;
  40fc6e:	eb08 0a06 	add.w	sl, r8, r6
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
  40fc72:	fb0a f00a 	mul.w	r0, sl, sl
  40fc76:	0040      	lsls	r0, r0, #1
  40fc78:	4b8d      	ldr	r3, [pc, #564]	; (40feb0 <lv_draw_rect+0x3d4>)
  40fc7a:	4798      	blx	r3
  40fc7c:	9008      	str	r0, [sp, #32]
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
  40fc7e:	f9b4 9022 	ldrsh.w	r9, [r4, #34]	; 0x22
  40fc82:	b232      	sxth	r2, r6
    int32_t size = sw_ori  + r;
  40fc84:	eb02 0809 	add.w	r8, r2, r9
  40fc88:	f10d 0157 	add.w	r1, sp, #87	; 0x57
    uint8_t * d8 = (uint8_t *)dst;
  40fc8c:	ab24      	add	r3, sp, #144	; 0x90
    while(len) {
  40fc8e:	f10d 0e98 	add.w	lr, sp, #152	; 0x98
        *d8 = *s8;
  40fc92:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40fc96:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
  40fc9a:	4573      	cmp	r3, lr
  40fc9c:	d1f9      	bne.n	40fc92 <lv_draw_rect+0x1b6>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  40fc9e:	4649      	mov	r1, r9
  40fca0:	f1b9 0f00 	cmp.w	r9, #0
  40fca4:	bfb8      	it	lt
  40fca6:	f109 0101 	addlt.w	r1, r9, #1
  40fcaa:	f3c1 014f 	ubfx	r1, r1, #1, #16
  40fcae:	1e4b      	subs	r3, r1, #1
  40fcb0:	f019 0001 	ands.w	r0, r9, #1
  40fcb4:	900f      	str	r0, [sp, #60]	; 0x3c
  40fcb6:	bf0c      	ite	eq
  40fcb8:	2001      	moveq	r0, #1
  40fcba:	2000      	movne	r0, #0
  40fcbc:	1a1b      	subs	r3, r3, r0
  40fcbe:	4433      	add	r3, r6
  40fcc0:	b29b      	uxth	r3, r3
  40fcc2:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
    sh_area.y1 = sw / 2 + 1;
  40fcc6:	3101      	adds	r1, #1
  40fcc8:	b289      	uxth	r1, r1
  40fcca:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
  40fcce:	1bdb      	subs	r3, r3, r7
  40fcd0:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
  40fcd4:	4429      	add	r1, r5
  40fcd6:	f8ad 1096 	strh.w	r1, [sp, #150]	; 0x96
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
  40fcda:	2300      	movs	r3, #0
  40fcdc:	a924      	add	r1, sp, #144	; 0x90
  40fcde:	a82b      	add	r0, sp, #172	; 0xac
  40fce0:	4d74      	ldr	r5, [pc, #464]	; (40feb4 <lv_draw_rect+0x3d8>)
  40fce2:	47a8      	blx	r5
    if(sw_ori == 1) sw = 1;
  40fce4:	f1b9 0f01 	cmp.w	r9, #1
  40fce8:	f001 861d 	beq.w	411926 <lv_draw_rect+0x1e4a>
  40fcec:	ea4f 0369 	mov.w	r3, r9, asr #1
  40fcf0:	9309      	str	r3, [sp, #36]	; 0x24
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
  40fcf2:	f8cd 8014 	str.w	r8, [sp, #20]
  40fcf6:	4640      	mov	r0, r8
  40fcf8:	4b6d      	ldr	r3, [pc, #436]	; (40feb0 <lv_draw_rect+0x3d4>)
  40fcfa:	4798      	blx	r3
  40fcfc:	900a      	str	r0, [sp, #40]	; 0x28
    for(y = 0; y < size; y++) {
  40fcfe:	f1b8 0f00 	cmp.w	r8, #0
  40fd02:	dd59      	ble.n	40fdb8 <lv_draw_rect+0x2dc>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
  40fd04:	9b05      	ldr	r3, [sp, #20]
  40fd06:	ea4f 0943 	mov.w	r9, r3, lsl #1
  40fd0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40fd0e:	4443      	add	r3, r8
  40fd10:	005b      	lsls	r3, r3, #1
  40fd12:	9d08      	ldr	r5, [sp, #32]
  40fd14:	2600      	movs	r6, #0
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
  40fd16:	fa0f f288 	sxth.w	r2, r8
  40fd1a:	9207      	str	r2, [sp, #28]
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
  40fd1c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40fd20:	469b      	mov	fp, r3
  40fd22:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40fd26:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  40fd2a:	940e      	str	r4, [sp, #56]	; 0x38
  40fd2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40fd2e:	e011      	b.n	40fd54 <lv_draw_rect+0x278>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  40fd30:	6a53      	ldr	r3, [r2, #36]	; 0x24
  40fd32:	2b00      	cmp	r3, #0
  40fd34:	f47f aefa 	bne.w	40fb2c <lv_draw_rect+0x50>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
  40fd38:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
  40fd3c:	2b00      	cmp	r3, #0
  40fd3e:	f73f aef5 	bgt.w	40fb2c <lv_draw_rect+0x50>
  40fd42:	e3dc      	b.n	4104fe <lv_draw_rect+0xa22>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
  40fd44:	4649      	mov	r1, r9
  40fd46:	4628      	mov	r0, r5
  40fd48:	4b5b      	ldr	r3, [pc, #364]	; (40feb8 <lv_draw_rect+0x3dc>)
  40fd4a:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40fd4c:	444d      	add	r5, r9
    for(y = 0; y < size; y++) {
  40fd4e:	3601      	adds	r6, #1
  40fd50:	45b0      	cmp	r8, r6
  40fd52:	dd2c      	ble.n	40fdae <lv_draw_rect+0x2d2>
        _lv_memset_ff(mask_line, size);
  40fd54:	9905      	ldr	r1, [sp, #20]
  40fd56:	4620      	mov	r0, r4
  40fd58:	4b58      	ldr	r3, [pc, #352]	; (40febc <lv_draw_rect+0x3e0>)
  40fd5a:	4798      	blx	r3
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
  40fd5c:	ab2b      	add	r3, sp, #172	; 0xac
  40fd5e:	9300      	str	r3, [sp, #0]
  40fd60:	9b07      	ldr	r3, [sp, #28]
  40fd62:	b232      	sxth	r2, r6
  40fd64:	2100      	movs	r1, #0
  40fd66:	4620      	mov	r0, r4
  40fd68:	9f2b      	ldr	r7, [sp, #172]	; 0xac
  40fd6a:	47b8      	blx	r7
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40fd6c:	2800      	cmp	r0, #0
  40fd6e:	d0e9      	beq.n	40fd44 <lv_draw_rect+0x268>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
  40fd70:	4657      	mov	r7, sl
  40fd72:	7823      	ldrb	r3, [r4, #0]
  40fd74:	019b      	lsls	r3, r3, #6
  40fd76:	fb93 f3fa 	sdiv	r3, r3, sl
  40fd7a:	802b      	strh	r3, [r5, #0]
            for(i = 1; i < size; i++) {
  40fd7c:	f1b8 0f01 	cmp.w	r8, #1
  40fd80:	dde4      	ble.n	40fd4c <lv_draw_rect+0x270>
  40fd82:	4621      	mov	r1, r4
  40fd84:	462a      	mov	r2, r5
  40fd86:	eb05 000b 	add.w	r0, r5, fp
  40fd8a:	e004      	b.n	40fd96 <lv_draw_rect+0x2ba>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  40fd8c:	8813      	ldrh	r3, [r2, #0]
  40fd8e:	8053      	strh	r3, [r2, #2]
  40fd90:	3202      	adds	r2, #2
            for(i = 1; i < size; i++) {
  40fd92:	4282      	cmp	r2, r0
  40fd94:	d0da      	beq.n	40fd4c <lv_draw_rect+0x270>
  40fd96:	468e      	mov	lr, r1
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  40fd98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40fd9c:	f89e e000 	ldrb.w	lr, [lr]
  40fda0:	459e      	cmp	lr, r3
  40fda2:	d0f3      	beq.n	40fd8c <lv_draw_rect+0x2b0>
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
  40fda4:	019b      	lsls	r3, r3, #6
  40fda6:	fb93 f3f7 	sdiv	r3, r3, r7
  40fdaa:	8053      	strh	r3, [r2, #2]
  40fdac:	e7f0      	b.n	40fd90 <lv_draw_rect+0x2b4>
  40fdae:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40fdb2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  40fdb6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    _lv_mem_buf_release(mask_line);
  40fdb8:	980a      	ldr	r0, [sp, #40]	; 0x28
  40fdba:	4b41      	ldr	r3, [pc, #260]	; (40fec0 <lv_draw_rect+0x3e4>)
  40fdbc:	4798      	blx	r3
    if(sw == 1) {
  40fdbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40fdc0:	2b01      	cmp	r3, #1
  40fdc2:	f001 859c 	beq.w	4118fe <lv_draw_rect+0x1e22>
    shadow_blur_corner(size, sw, sh_buf);
  40fdc6:	fa0f f588 	sxth.w	r5, r8
  40fdca:	9f08      	ldr	r7, [sp, #32]
  40fdcc:	463a      	mov	r2, r7
  40fdce:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40fdd0:	4631      	mov	r1, r6
  40fdd2:	4628      	mov	r0, r5
  40fdd4:	4b3b      	ldr	r3, [pc, #236]	; (40fec4 <lv_draw_rect+0x3e8>)
  40fdd6:	4798      	blx	r3
    sw += sw_ori & 1;
  40fdd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40fdda:	4432      	add	r2, r6
  40fddc:	b211      	sxth	r1, r2
    if(sw > 1) {
  40fdde:	2901      	cmp	r1, #1
  40fde0:	dd22      	ble.n	40fe28 <lv_draw_rect+0x34c>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
  40fde2:	460e      	mov	r6, r1
  40fde4:	883b      	ldrh	r3, [r7, #0]
  40fde6:	019b      	lsls	r3, r3, #6
  40fde8:	fb93 f3f1 	sdiv	r3, r3, r1
  40fdec:	463a      	mov	r2, r7
  40fdee:	803b      	strh	r3, [r7, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
  40fdf0:	9b05      	ldr	r3, [sp, #20]
  40fdf2:	fb03 f303 	mul.w	r3, r3, r3
  40fdf6:	2b01      	cmp	r3, #1
  40fdf8:	d912      	bls.n	40fe20 <lv_draw_rect+0x344>
  40fdfa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  40fdfe:	4418      	add	r0, r3
  40fe00:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  40fe04:	e001      	b.n	40fe0a <lv_draw_rect+0x32e>
  40fe06:	4282      	cmp	r2, r0
  40fe08:	d00a      	beq.n	40fe20 <lv_draw_rect+0x344>
  40fe0a:	4617      	mov	r7, r2
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  40fe0c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
  40fe10:	883f      	ldrh	r7, [r7, #0]
  40fe12:	429f      	cmp	r7, r3
  40fe14:	d0f7      	beq.n	40fe06 <lv_draw_rect+0x32a>
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
  40fe16:	019b      	lsls	r3, r3, #6
  40fe18:	fb93 f3f6 	sdiv	r3, r3, r6
  40fe1c:	8013      	strh	r3, [r2, #0]
  40fe1e:	e7f2      	b.n	40fe06 <lv_draw_rect+0x32a>
        shadow_blur_corner(size, sw, sh_buf);
  40fe20:	9a08      	ldr	r2, [sp, #32]
  40fe22:	4628      	mov	r0, r5
  40fe24:	4b27      	ldr	r3, [pc, #156]	; (40fec4 <lv_draw_rect+0x3e8>)
  40fe26:	4798      	blx	r3
    for(x = 0; x < size * size; x++) {
  40fe28:	fb08 f808 	mul.w	r8, r8, r8
  40fe2c:	f1b8 0f00 	cmp.w	r8, #0
  40fe30:	dd0a      	ble.n	40fe48 <lv_draw_rect+0x36c>
  40fe32:	9908      	ldr	r1, [sp, #32]
  40fe34:	460b      	mov	r3, r1
  40fe36:	1e4a      	subs	r2, r1, #1
  40fe38:	eb01 0048 	add.w	r0, r1, r8, lsl #1
        res_buf[x] = sh_buf[x];
  40fe3c:	f833 1b02 	ldrh.w	r1, [r3], #2
  40fe40:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(x = 0; x < size * size; x++) {
  40fe44:	4298      	cmp	r0, r3
  40fe46:	d1f9      	bne.n	40fe3c <lv_draw_rect+0x360>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  40fe48:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
  40fe4c:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  40fe50:	3301      	adds	r3, #1
  40fe52:	1a9b      	subs	r3, r3, r2
  40fe54:	b21b      	sxth	r3, r3
  40fe56:	2b00      	cmp	r3, #0
  40fe58:	bfb8      	it	lt
  40fe5a:	3301      	addlt	r3, #1
  40fe5c:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40fe60:	b29b      	uxth	r3, r3
  40fe62:	930f      	str	r3, [sp, #60]	; 0x3c
  40fe64:	b21b      	sxth	r3, r3
  40fe66:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  40fe68:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fe6c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  40fe70:	3301      	adds	r3, #1
  40fe72:	1a9b      	subs	r3, r3, r2
  40fe74:	b21b      	sxth	r3, r3
  40fe76:	2b00      	cmp	r3, #0
  40fe78:	bfb8      	it	lt
  40fe7a:	3301      	addlt	r3, #1
  40fe7c:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40fe80:	b29b      	uxth	r3, r3
  40fe82:	9310      	str	r3, [sp, #64]	; 0x40
  40fe84:	b21b      	sxth	r3, r3
  40fe86:	930d      	str	r3, [sp, #52]	; 0x34
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  40fe88:	4b0f      	ldr	r3, [pc, #60]	; (40fec8 <lv_draw_rect+0x3ec>)
  40fe8a:	4798      	blx	r3
  40fe8c:	b9f0      	cbnz	r0, 40fecc <lv_draw_rect+0x3f0>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  40fe8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40fe90:	2b00      	cmp	r3, #0
  40fe92:	f040 808e 	bne.w	40ffb2 <lv_draw_rect+0x4d6>
    else if(dsc->shadow_spread != 0) simple_mode = false;
  40fe96:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
  40fe9a:	fab3 f383 	clz	r3, r3
  40fe9e:	095b      	lsrs	r3, r3, #5
  40fea0:	9307      	str	r3, [sp, #28]
  40fea2:	e015      	b.n	40fed0 <lv_draw_rect+0x3f4>
  40fea4:	00408f81 	.word	0x00408f81
  40fea8:	00414199 	.word	0x00414199
  40feac:	00414957 	.word	0x00414957
  40feb0:	00415cd9 	.word	0x00415cd9
  40feb4:	0040f331 	.word	0x0040f331
  40feb8:	00415ead 	.word	0x00415ead
  40febc:	00415f51 	.word	0x00415f51
  40fec0:	0041595d 	.word	0x0041595d
  40fec4:	0040f391 	.word	0x0040f391
  40fec8:	0040f1c9 	.word	0x0040f1c9
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  40fecc:	2300      	movs	r3, #0
  40fece:	9307      	str	r3, [sp, #28]
  40fed0:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
  40fed4:	3001      	adds	r0, #1
  40fed6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  40feda:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
  40fedc:	b200      	sxth	r0, r0
  40fede:	4bb6      	ldr	r3, [pc, #728]	; (4101b8 <lv_draw_rect+0x6dc>)
  40fee0:	4798      	blx	r3
  40fee2:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
  40fee4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
  40fee8:	461a      	mov	r2, r3
  40feea:	9309      	str	r3, [sp, #36]	; 0x24
  40feec:	2301      	movs	r3, #1
  40feee:	a91c      	add	r1, sp, #112	; 0x70
  40fef0:	a82b      	add	r0, sp, #172	; 0xac
  40fef2:	4db2      	ldr	r5, [pc, #712]	; (4101bc <lv_draw_rect+0x6e0>)
  40fef4:	47a8      	blx	r5
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  40fef6:	2100      	movs	r1, #0
  40fef8:	a82b      	add	r0, sp, #172	; 0xac
  40fefa:	4bb1      	ldr	r3, [pc, #708]	; (4101c0 <lv_draw_rect+0x6e4>)
  40fefc:	4798      	blx	r3
  40fefe:	900b      	str	r0, [sp, #44]	; 0x2c
    a.x2 = sh_area.x2;
  40ff00:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
  40ff04:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    a.x1 = a.x2 - corner_size + 1;
  40ff08:	fa1f f58a 	uxth.w	r5, sl
  40ff0c:	3301      	adds	r3, #1
  40ff0e:	1b5b      	subs	r3, r3, r5
  40ff10:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    a.y1 = sh_area.y1;
  40ff14:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
  40ff18:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    a.y2 = a.y1 + corner_size - 1;
  40ff1c:	3b01      	subs	r3, #1
  40ff1e:	442b      	add	r3, r5
  40ff20:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    bool has_com = _lv_area_intersect(&ca, &a, clip);
  40ff24:	9a04      	ldr	r2, [sp, #16]
  40ff26:	a91e      	add	r1, sp, #120	; 0x78
  40ff28:	a820      	add	r0, sp, #128	; 0x80
  40ff2a:	4ba6      	ldr	r3, [pc, #664]	; (4101c4 <lv_draw_rect+0x6e8>)
  40ff2c:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40ff2e:	2800      	cmp	r0, #0
  40ff30:	d142      	bne.n	40ffb8 <lv_draw_rect+0x4dc>
    a.x2 = sh_area.x2;
  40ff32:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
  40ff36:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    a.x1 = a.x2 - corner_size + 1;
  40ff3a:	3301      	adds	r3, #1
  40ff3c:	1b5b      	subs	r3, r3, r5
  40ff3e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    a.y1 = sh_area.y2 - corner_size + 1;
  40ff42:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
  40ff46:	1c53      	adds	r3, r2, #1
  40ff48:	1b5b      	subs	r3, r3, r5
  40ff4a:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    a.y2 = sh_area.y2;
  40ff4e:	f8ad 207e 	strh.w	r2, [sp, #126]	; 0x7e
    has_com = _lv_area_intersect(&ca, &a, clip);
  40ff52:	9a04      	ldr	r2, [sp, #16]
  40ff54:	a91e      	add	r1, sp, #120	; 0x78
  40ff56:	a820      	add	r0, sp, #128	; 0x80
  40ff58:	4b9a      	ldr	r3, [pc, #616]	; (4101c4 <lv_draw_rect+0x6e8>)
  40ff5a:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40ff5c:	2800      	cmp	r0, #0
  40ff5e:	f040 80a9 	bne.w	4100b4 <lv_draw_rect+0x5d8>
    a.x2 = sh_area.x2;
  40ff62:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
  40ff66:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    a.x1 = a.x2 - corner_size + 1;
  40ff6a:	3301      	adds	r3, #1
  40ff6c:	1b5b      	subs	r3, r3, r5
  40ff6e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    a.y1 = sh_area.y1 + corner_size;
  40ff72:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
  40ff76:	442b      	add	r3, r5
  40ff78:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    a.y2 = sh_area.y2 - corner_size;
  40ff7c:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  40ff80:	1b5b      	subs	r3, r3, r5
  40ff82:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    has_com = _lv_area_intersect(&ca, &a, clip);
  40ff86:	9a04      	ldr	r2, [sp, #16]
  40ff88:	a91e      	add	r1, sp, #120	; 0x78
  40ff8a:	a820      	add	r0, sp, #128	; 0x80
  40ff8c:	4b8d      	ldr	r3, [pc, #564]	; (4101c4 <lv_draw_rect+0x6e8>)
  40ff8e:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40ff90:	2800      	cmp	r0, #0
  40ff92:	f040 8121 	bne.w	4101d8 <lv_draw_rect+0x6fc>
    for(y = 0; y < corner_size; y++) {
  40ff96:	f1ba 0f00 	cmp.w	sl, #0
  40ff9a:	f340 81b7 	ble.w	41030c <lv_draw_rect+0x830>
        for(x = 0; x < corner_size / 2; x++) {
  40ff9e:	46d4      	mov	ip, sl
  40ffa0:	bfb8      	it	lt
  40ffa2:	f10a 0c01 	addlt.w	ip, sl, #1
  40ffa6:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  40ffaa:	9f08      	ldr	r7, [sp, #32]
  40ffac:	f04f 0e00 	mov.w	lr, #0
  40ffb0:	e19b      	b.n	4102ea <lv_draw_rect+0x80e>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  40ffb2:	2300      	movs	r3, #0
  40ffb4:	9307      	str	r3, [sp, #28]
  40ffb6:	e78b      	b.n	40fed0 <lv_draw_rect+0x3f4>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40ffb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ffba:	a91c      	add	r1, sp, #112	; 0x70
  40ffbc:	a81e      	add	r0, sp, #120	; 0x78
  40ffbe:	4b82      	ldr	r3, [pc, #520]	; (4101c8 <lv_draw_rect+0x6ec>)
  40ffc0:	4798      	blx	r3
  40ffc2:	2800      	cmp	r0, #0
  40ffc4:	d1b5      	bne.n	40ff32 <lv_draw_rect+0x456>
        if(ca.y2 > h_half) ca.y2 = h_half;
  40ffc6:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40ffca:	990c      	ldr	r1, [sp, #48]	; 0x30
  40ffcc:	428b      	cmp	r3, r1
  40ffce:	dd01      	ble.n	40ffd4 <lv_draw_rect+0x4f8>
  40ffd0:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  40ffd4:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
  40ffd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40ffda:	4293      	cmp	r3, r2
  40ffdc:	dc03      	bgt.n	40ffe6 <lv_draw_rect+0x50a>
  40ffde:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ffe0:	3301      	adds	r3, #1
  40ffe2:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
  40ffe6:	f9bd 2080 	ldrsh.w	r2, [sp, #128]	; 0x80
  40ffea:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40ffee:	3301      	adds	r3, #1
  40fff0:	1a9b      	subs	r3, r3, r2
  40fff2:	b21b      	sxth	r3, r3
  40fff4:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  40fff6:	2b00      	cmp	r3, #0
  40fff8:	dd9b      	ble.n	40ff32 <lv_draw_rect+0x456>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fffa:	f9bd 9086 	ldrsh.w	r9, [sp, #134]	; 0x86
  40fffe:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  410002:	f9bd 707a 	ldrsh.w	r7, [sp, #122]	; 0x7a
  410006:	1bf7      	subs	r7, r6, r7
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  410008:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
  41000c:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  41000e:	fb0a 2707 	mla	r7, sl, r7, r2
  410012:	9b08      	ldr	r3, [sp, #32]
  410014:	441f      	add	r7, r3
  410016:	f10d 027f 	add.w	r2, sp, #127	; 0x7f
    uint8_t * d8 = (uint8_t *)dst;
  41001a:	ab24      	add	r3, sp, #144	; 0x90
    while(len) {
  41001c:	a826      	add	r0, sp, #152	; 0x98
        *d8 = *s8;
  41001e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  410022:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  410026:	4283      	cmp	r3, r0
  410028:	d1f9      	bne.n	41001e <lv_draw_rect+0x542>
            fa.y2 = fa.y1;
  41002a:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  41002e:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
  410032:	f109 0901 	add.w	r9, r9, #1
  410036:	eba9 0906 	sub.w	r9, r9, r6
            for(y = 0; y < h; y++) {
  41003a:	fa0f f989 	sxth.w	r9, r9
  41003e:	f1b9 0f00 	cmp.w	r9, #0
  410042:	f77f af76 	ble.w	40ff32 <lv_draw_rect+0x456>
  410046:	f04f 0800 	mov.w	r8, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  41004a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  41004e:	46ab      	mov	fp, r5
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410052:	4639      	mov	r1, r7
  410054:	9d05      	ldr	r5, [sp, #20]
  410056:	4628      	mov	r0, r5
  410058:	4e5c      	ldr	r6, [pc, #368]	; (4101cc <lv_draw_rect+0x6f0>)
  41005a:	47b0      	blx	r6
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  41005c:	ae34      	add	r6, sp, #208	; 0xd0
  41005e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410060:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
  410064:	f936 1d40 	ldrsh.w	r1, [r6, #-64]!
  410068:	9505      	str	r5, [sp, #20]
  41006a:	4628      	mov	r0, r5
  41006c:	4d58      	ldr	r5, [pc, #352]	; (4101d0 <lv_draw_rect+0x6f4>)
  41006e:	47a8      	blx	r5
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410070:	2801      	cmp	r0, #1
  410072:	bf08      	it	eq
  410074:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410076:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  41007a:	9302      	str	r3, [sp, #8]
  41007c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41007e:	9201      	str	r2, [sp, #4]
  410080:	9000      	str	r0, [sp, #0]
  410082:	9b05      	ldr	r3, [sp, #20]
  410084:	8c22      	ldrh	r2, [r4, #32]
  410086:	4631      	mov	r1, r6
  410088:	9804      	ldr	r0, [sp, #16]
  41008a:	4d52      	ldr	r5, [pc, #328]	; (4101d4 <lv_draw_rect+0x6f8>)
  41008c:	47a8      	blx	r5
                fa.y1++;
  41008e:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  410092:	3301      	adds	r3, #1
  410094:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
                fa.y2++;
  410098:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  41009c:	3301      	adds	r3, #1
  41009e:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
  4100a2:	4457      	add	r7, sl
            for(y = 0; y < h; y++) {
  4100a4:	f108 0801 	add.w	r8, r8, #1
  4100a8:	45c8      	cmp	r8, r9
  4100aa:	d1d1      	bne.n	410050 <lv_draw_rect+0x574>
  4100ac:	465d      	mov	r5, fp
  4100ae:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  4100b2:	e73e      	b.n	40ff32 <lv_draw_rect+0x456>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4100b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4100b6:	a91c      	add	r1, sp, #112	; 0x70
  4100b8:	a81e      	add	r0, sp, #120	; 0x78
  4100ba:	4b43      	ldr	r3, [pc, #268]	; (4101c8 <lv_draw_rect+0x6ec>)
  4100bc:	4798      	blx	r3
  4100be:	2800      	cmp	r0, #0
  4100c0:	f47f af4f 	bne.w	40ff62 <lv_draw_rect+0x486>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  4100c4:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  4100c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4100ca:	4293      	cmp	r3, r2
  4100cc:	dc03      	bgt.n	4100d6 <lv_draw_rect+0x5fa>
  4100ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4100d0:	3301      	adds	r3, #1
  4100d2:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  4100d6:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
  4100da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4100dc:	4293      	cmp	r3, r2
  4100de:	dc03      	bgt.n	4100e8 <lv_draw_rect+0x60c>
  4100e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4100e2:	3301      	adds	r3, #1
  4100e4:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4100e8:	f9bd 2080 	ldrsh.w	r2, [sp, #128]	; 0x80
  4100ec:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  4100f0:	3301      	adds	r3, #1
  4100f2:	1a9b      	subs	r3, r3, r2
  4100f4:	b21b      	sxth	r3, r3
  4100f6:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  4100f8:	2b00      	cmp	r3, #0
  4100fa:	f77f af32 	ble.w	40ff62 <lv_draw_rect+0x486>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4100fe:	f9bd 6086 	ldrsh.w	r6, [sp, #134]	; 0x86
  410102:	f9bd e082 	ldrsh.w	lr, [sp, #130]	; 0x82
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  410106:	f9bd 707e 	ldrsh.w	r7, [sp, #126]	; 0x7e
  41010a:	1bbf      	subs	r7, r7, r6
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  41010c:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
  410110:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  410112:	fb0a 2707 	mla	r7, sl, r7, r2
  410116:	9b08      	ldr	r3, [sp, #32]
  410118:	441f      	add	r7, r3
  41011a:	f10d 027f 	add.w	r2, sp, #127	; 0x7f
    uint8_t * d8 = (uint8_t *)dst;
  41011e:	ab24      	add	r3, sp, #144	; 0x90
    while(len) {
  410120:	a826      	add	r0, sp, #152	; 0x98
        *d8 = *s8;
  410122:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  410126:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  41012a:	4283      	cmp	r3, r0
  41012c:	d1f9      	bne.n	410122 <lv_draw_rect+0x646>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  41012e:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  410132:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
  410136:	f106 0901 	add.w	r9, r6, #1
  41013a:	eba9 090e 	sub.w	r9, r9, lr
            for(y = 0; y < h; y++) {
  41013e:	fa0f f989 	sxth.w	r9, r9
  410142:	f1b9 0f00 	cmp.w	r9, #0
  410146:	f77f af0c 	ble.w	40ff62 <lv_draw_rect+0x486>
  41014a:	f04f 0800 	mov.w	r8, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  41014e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  410152:	46ab      	mov	fp, r5
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410156:	4639      	mov	r1, r7
  410158:	9d05      	ldr	r5, [sp, #20]
  41015a:	4628      	mov	r0, r5
  41015c:	4e1b      	ldr	r6, [pc, #108]	; (4101cc <lv_draw_rect+0x6f0>)
  41015e:	47b0      	blx	r6
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410160:	ae34      	add	r6, sp, #208	; 0xd0
  410162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410164:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
  410168:	f936 1d40 	ldrsh.w	r1, [r6, #-64]!
  41016c:	9505      	str	r5, [sp, #20]
  41016e:	4628      	mov	r0, r5
  410170:	4d17      	ldr	r5, [pc, #92]	; (4101d0 <lv_draw_rect+0x6f4>)
  410172:	47a8      	blx	r5
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410174:	2801      	cmp	r0, #1
  410176:	bf08      	it	eq
  410178:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  41017a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  41017e:	9302      	str	r3, [sp, #8]
  410180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  410182:	9201      	str	r2, [sp, #4]
  410184:	9000      	str	r0, [sp, #0]
  410186:	9b05      	ldr	r3, [sp, #20]
  410188:	8c22      	ldrh	r2, [r4, #32]
  41018a:	4631      	mov	r1, r6
  41018c:	9804      	ldr	r0, [sp, #16]
  41018e:	4d11      	ldr	r5, [pc, #68]	; (4101d4 <lv_draw_rect+0x6f8>)
  410190:	47a8      	blx	r5
                fa.y1--;
  410192:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  410196:	3b01      	subs	r3, #1
  410198:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
                fa.y2--;
  41019c:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  4101a0:	3b01      	subs	r3, #1
  4101a2:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
  4101a6:	4457      	add	r7, sl
            for(y = 0; y < h; y++) {
  4101a8:	f108 0801 	add.w	r8, r8, #1
  4101ac:	45c8      	cmp	r8, r9
  4101ae:	d1d1      	bne.n	410154 <lv_draw_rect+0x678>
  4101b0:	465d      	mov	r5, fp
  4101b2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  4101b6:	e6d4      	b.n	40ff62 <lv_draw_rect+0x486>
  4101b8:	00415cd9 	.word	0x00415cd9
  4101bc:	0040f331 	.word	0x0040f331
  4101c0:	0040f0e5 	.word	0x0040f0e5
  4101c4:	00414957 	.word	0x00414957
  4101c8:	00414ba5 	.word	0x00414ba5
  4101cc:	00415a1d 	.word	0x00415a1d
  4101d0:	0040f121 	.word	0x0040f121
  4101d4:	0040a9e9 	.word	0x0040a9e9
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4101d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4101da:	a91c      	add	r1, sp, #112	; 0x70
  4101dc:	a81e      	add	r0, sp, #120	; 0x78
  4101de:	4b47      	ldr	r3, [pc, #284]	; (4102fc <lv_draw_rect+0x820>)
  4101e0:	4798      	blx	r3
  4101e2:	2800      	cmp	r0, #0
  4101e4:	f47f aed7 	bne.w	40ff96 <lv_draw_rect+0x4ba>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
  4101e8:	9b07      	ldr	r3, [sp, #28]
  4101ea:	b14b      	cbz	r3, 410200 <lv_draw_rect+0x724>
  4101ec:	9b06      	ldr	r3, [sp, #24]
  4101ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  4101f2:	f9bd 2080 	ldrsh.w	r2, [sp, #128]	; 0x80
  4101f6:	4293      	cmp	r3, r2
  4101f8:	bfb8      	it	lt
  4101fa:	4613      	movlt	r3, r2
  4101fc:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410200:	f9bd 2080 	ldrsh.w	r2, [sp, #128]	; 0x80
  410204:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  410208:	3301      	adds	r3, #1
  41020a:	1a9b      	subs	r3, r3, r2
  41020c:	b21b      	sxth	r3, r3
  41020e:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  410210:	2b00      	cmp	r3, #0
  410212:	f77f aec0 	ble.w	40ff96 <lv_draw_rect+0x4ba>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410216:	f8bd 0086 	ldrh.w	r0, [sp, #134]	; 0x86
  41021a:	3001      	adds	r0, #1
  41021c:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  410220:	1ac0      	subs	r0, r0, r3
  410222:	b200      	sxth	r0, r0
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  410224:	f10a 33ff 	add.w	r3, sl, #4294967295
            sh_buf_tmp += ca.x1 - a.x1;
  410228:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
  41022c:	1a52      	subs	r2, r2, r1
  41022e:	fb0a 2303 	mla	r3, sl, r3, r2
  410232:	9a08      	ldr	r2, [sp, #32]
  410234:	18d3      	adds	r3, r2, r3
  410236:	930e      	str	r3, [sp, #56]	; 0x38
  410238:	f10d 027f 	add.w	r2, sp, #127	; 0x7f
    uint8_t * d8 = (uint8_t *)dst;
  41023c:	ab24      	add	r3, sp, #144	; 0x90
    while(len) {
  41023e:	ae26      	add	r6, sp, #152	; 0x98
        *d8 = *s8;
  410240:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  410244:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  410248:	42b3      	cmp	r3, r6
  41024a:	d1f9      	bne.n	410240 <lv_draw_rect+0x764>
            fa.y2 = fa.y1;
  41024c:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  410250:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            for(y = 0; y < h; y++) {
  410254:	4681      	mov	r9, r0
  410256:	2800      	cmp	r0, #0
  410258:	f77f ae9d 	ble.w	40ff96 <lv_draw_rect+0x4ba>
  41025c:	2600      	movs	r6, #0
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  41025e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 410308 <lv_draw_rect+0x82c>
                _lv_blend_fill(clip, &fa,
  410262:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  410266:	46ab      	mov	fp, r5
  410268:	9d07      	ldr	r5, [sp, #28]
  41026a:	e024      	b.n	4102b6 <lv_draw_rect+0x7da>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  41026c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41026e:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
  410272:	f9bd 1090 	ldrsh.w	r1, [sp, #144]	; 0x90
  410276:	9805      	ldr	r0, [sp, #20]
  410278:	4f21      	ldr	r7, [pc, #132]	; (410300 <lv_draw_rect+0x824>)
  41027a:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  41027c:	2801      	cmp	r0, #1
  41027e:	bf08      	it	eq
  410280:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa,
  410282:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  410286:	9302      	str	r3, [sp, #8]
  410288:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  41028c:	9301      	str	r3, [sp, #4]
  41028e:	9000      	str	r0, [sp, #0]
  410290:	9b05      	ldr	r3, [sp, #20]
  410292:	8c22      	ldrh	r2, [r4, #32]
  410294:	a924      	add	r1, sp, #144	; 0x90
  410296:	9804      	ldr	r0, [sp, #16]
  410298:	4f1a      	ldr	r7, [pc, #104]	; (410304 <lv_draw_rect+0x828>)
  41029a:	47b8      	blx	r7
                fa.y1++;
  41029c:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  4102a0:	3301      	adds	r3, #1
  4102a2:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
                fa.y2++;
  4102a6:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  4102aa:	3301      	adds	r3, #1
  4102ac:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            for(y = 0; y < h; y++) {
  4102b0:	3601      	adds	r6, #1
  4102b2:	454e      	cmp	r6, r9
  4102b4:	d007      	beq.n	4102c6 <lv_draw_rect+0x7ea>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4102b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4102b8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4102ba:	9805      	ldr	r0, [sp, #20]
  4102bc:	47c0      	blx	r8
                if(simple_mode) {
  4102be:	2d00      	cmp	r5, #0
  4102c0:	d0d4      	beq.n	41026c <lv_draw_rect+0x790>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  4102c2:	2002      	movs	r0, #2
  4102c4:	e7dd      	b.n	410282 <lv_draw_rect+0x7a6>
  4102c6:	465d      	mov	r5, fp
  4102c8:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
  4102cc:	e663      	b.n	40ff96 <lv_draw_rect+0x4ba>
            lv_opa_t tmp = sh_buf_tmp[x];
  4102ce:	7819      	ldrb	r1, [r3, #0]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
  4102d0:	f812 0c01 	ldrb.w	r0, [r2, #-1]
  4102d4:	f803 0b01 	strb.w	r0, [r3], #1
            sh_buf_tmp[corner_size - x - 1] = tmp;
  4102d8:	f802 1d01 	strb.w	r1, [r2, #-1]!
        for(x = 0; x < corner_size / 2; x++) {
  4102dc:	42b3      	cmp	r3, r6
  4102de:	d1f6      	bne.n	4102ce <lv_draw_rect+0x7f2>
  4102e0:	4457      	add	r7, sl
    for(y = 0; y < corner_size; y++) {
  4102e2:	f10e 0e01 	add.w	lr, lr, #1
  4102e6:	45f2      	cmp	sl, lr
  4102e8:	d010      	beq.n	41030c <lv_draw_rect+0x830>
        for(x = 0; x < corner_size / 2; x++) {
  4102ea:	f1bc 0f00 	cmp.w	ip, #0
  4102ee:	ddf7      	ble.n	4102e0 <lv_draw_rect+0x804>
  4102f0:	463b      	mov	r3, r7
  4102f2:	eb07 020a 	add.w	r2, r7, sl
  4102f6:	eb07 060c 	add.w	r6, r7, ip
  4102fa:	e7e8      	b.n	4102ce <lv_draw_rect+0x7f2>
  4102fc:	00414ba5 	.word	0x00414ba5
  410300:	0040f121 	.word	0x0040f121
  410304:	0040a9e9 	.word	0x0040a9e9
  410308:	00415a1d 	.word	0x00415a1d
    a.x1 = sh_area.x1;
  41030c:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  410310:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    a.x2 = a.x1 + corner_size - 1;
  410314:	3b01      	subs	r3, #1
  410316:	442b      	add	r3, r5
  410318:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    a.y1 = sh_area.y1;
  41031c:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
  410320:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    a.y2 = a.y1 + corner_size - 1;
  410324:	3b01      	subs	r3, #1
  410326:	442b      	add	r3, r5
  410328:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    has_com = _lv_area_intersect(&ca, &a, clip);
  41032c:	9a04      	ldr	r2, [sp, #16]
  41032e:	a91e      	add	r1, sp, #120	; 0x78
  410330:	a820      	add	r0, sp, #128	; 0x80
  410332:	4b99      	ldr	r3, [pc, #612]	; (410598 <lv_draw_rect+0xabc>)
  410334:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410336:	2800      	cmp	r0, #0
  410338:	f040 820d 	bne.w	410756 <lv_draw_rect+0xc7a>
    a.x1 = sh_area.x1;
  41033c:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  410340:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    a.x2 = a.x1 + corner_size - 1;
  410344:	3b01      	subs	r3, #1
  410346:	442b      	add	r3, r5
  410348:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    a.y1 = sh_area.y2 - corner_size + 1;
  41034c:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
  410350:	1c53      	adds	r3, r2, #1
  410352:	1b5b      	subs	r3, r3, r5
  410354:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    a.y2 = sh_area.y2;
  410358:	f8ad 207e 	strh.w	r2, [sp, #126]	; 0x7e
    has_com = _lv_area_intersect(&ca, &a, clip);
  41035c:	9a04      	ldr	r2, [sp, #16]
  41035e:	a91e      	add	r1, sp, #120	; 0x78
  410360:	a820      	add	r0, sp, #128	; 0x80
  410362:	4b8d      	ldr	r3, [pc, #564]	; (410598 <lv_draw_rect+0xabc>)
  410364:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410366:	2800      	cmp	r0, #0
  410368:	f040 8273 	bne.w	410852 <lv_draw_rect+0xd76>
    a.x1 = sh_area.x1;
  41036c:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  410370:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    a.x2 = a.x1 + corner_size - 1;
  410374:	3b01      	subs	r3, #1
  410376:	442b      	add	r3, r5
  410378:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    a.y1 = sh_area.y1 + corner_size;
  41037c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
  410380:	442b      	add	r3, r5
  410382:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    a.y2 = sh_area.y2 - corner_size;
  410386:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  41038a:	1b5b      	subs	r3, r3, r5
  41038c:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    has_com = _lv_area_intersect(&ca, &a, clip);
  410390:	9a04      	ldr	r2, [sp, #16]
  410392:	a91e      	add	r1, sp, #120	; 0x78
  410394:	a820      	add	r0, sp, #128	; 0x80
  410396:	4b80      	ldr	r3, [pc, #512]	; (410598 <lv_draw_rect+0xabc>)
  410398:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41039a:	2800      	cmp	r0, #0
  41039c:	f040 82ea 	bne.w	410974 <lv_draw_rect+0xe98>
    a.x1 = sh_area.x1 + corner_size;
  4103a0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  4103a4:	442b      	add	r3, r5
  4103a6:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    a.x2 = sh_area.x2 - corner_size;
  4103aa:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  4103ae:	1b5b      	subs	r3, r3, r5
  4103b0:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    a.y1 = sh_area.y1;
  4103b4:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
  4103b8:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    a.y2 = sh_area.y1 + corner_size - 1;
  4103bc:	3b01      	subs	r3, #1
  4103be:	442b      	add	r3, r5
  4103c0:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    has_com = _lv_area_intersect(&ca, &a, clip);
  4103c4:	9a04      	ldr	r2, [sp, #16]
  4103c6:	a91e      	add	r1, sp, #120	; 0x78
  4103c8:	a820      	add	r0, sp, #128	; 0x80
  4103ca:	4b73      	ldr	r3, [pc, #460]	; (410598 <lv_draw_rect+0xabc>)
  4103cc:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4103ce:	2800      	cmp	r0, #0
  4103d0:	f040 834b 	bne.w	410a6a <lv_draw_rect+0xf8e>
    a.x1 = sh_area.x1 + corner_size;
  4103d4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  4103d8:	442b      	add	r3, r5
  4103da:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    a.x2 = sh_area.x2 - corner_size;
  4103de:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  4103e2:	1b5b      	subs	r3, r3, r5
  4103e4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    a.y1 = sh_area.y2 - corner_size + 1;
  4103e8:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
  4103ec:	1c53      	adds	r3, r2, #1
  4103ee:	1b5b      	subs	r3, r3, r5
  4103f0:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    a.y2 = sh_area.y2;
  4103f4:	f8ad 207e 	strh.w	r2, [sp, #126]	; 0x7e
    has_com = _lv_area_intersect(&ca, &a, clip);
  4103f8:	9a04      	ldr	r2, [sp, #16]
  4103fa:	a91e      	add	r1, sp, #120	; 0x78
  4103fc:	a820      	add	r0, sp, #128	; 0x80
  4103fe:	4b66      	ldr	r3, [pc, #408]	; (410598 <lv_draw_rect+0xabc>)
  410400:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410402:	2800      	cmp	r0, #0
  410404:	f040 83b7 	bne.w	410b76 <lv_draw_rect+0x109a>
    a.x1 = sh_area.x1 + corner_size;
  410408:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  41040c:	442b      	add	r3, r5
  41040e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    a.x2 = sh_area.x2 - corner_size;
  410412:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  410416:	1b5b      	subs	r3, r3, r5
  410418:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    a.y1 = sh_area.y1 + corner_size;
  41041c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
  410420:	442b      	add	r3, r5
  410422:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    a.y2 = sh_area.y2 - corner_size;
  410426:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  41042a:	1b5d      	subs	r5, r3, r5
  41042c:	f8ad 507e 	strh.w	r5, [sp, #126]	; 0x7e
    has_com = _lv_area_intersect(&ca, &a, clip);
  410430:	9a04      	ldr	r2, [sp, #16]
  410432:	a91e      	add	r1, sp, #120	; 0x78
  410434:	a820      	add	r0, sp, #128	; 0x80
  410436:	4b58      	ldr	r3, [pc, #352]	; (410598 <lv_draw_rect+0xabc>)
  410438:	4798      	blx	r3
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41043a:	9b07      	ldr	r3, [sp, #28]
  41043c:	2b00      	cmp	r3, #0
  41043e:	d156      	bne.n	4104ee <lv_draw_rect+0xa12>
  410440:	2800      	cmp	r0, #0
  410442:	d054      	beq.n	4104ee <lv_draw_rect+0xa12>
  410444:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410446:	a91c      	add	r1, sp, #112	; 0x70
  410448:	a81e      	add	r0, sp, #120	; 0x78
  41044a:	4b54      	ldr	r3, [pc, #336]	; (41059c <lv_draw_rect+0xac0>)
  41044c:	4798      	blx	r3
  41044e:	2800      	cmp	r0, #0
  410450:	d14d      	bne.n	4104ee <lv_draw_rect+0xa12>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410452:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
  410456:	3701      	adds	r7, #1
  410458:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  41045c:	1aff      	subs	r7, r7, r3
  41045e:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410460:	f8bd 5086 	ldrh.w	r5, [sp, #134]	; 0x86
  410464:	3501      	adds	r5, #1
  410466:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  41046a:	1aed      	subs	r5, r5, r3
  41046c:	b22d      	sxth	r5, r5
  41046e:	f10d 027f 	add.w	r2, sp, #127	; 0x7f
    uint8_t * d8 = (uint8_t *)dst;
  410472:	ab24      	add	r3, sp, #144	; 0x90
    while(len) {
  410474:	a826      	add	r0, sp, #152	; 0x98
        *d8 = *s8;
  410476:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  41047a:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  41047e:	4283      	cmp	r3, r0
  410480:	d1f9      	bne.n	410476 <lv_draw_rect+0x99a>
        fa.y2 = fa.y1;
  410482:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  410486:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        for(y = 0; y < h; y++) {
  41048a:	46a8      	mov	r8, r5
  41048c:	2d00      	cmp	r5, #0
  41048e:	dd2e      	ble.n	4104ee <lv_draw_rect+0xa12>
  410490:	2600      	movs	r6, #0
            _lv_memset(mask_buf, dsc->shadow_opa, w);
  410492:	f8df b11c 	ldr.w	fp, [pc, #284]	; 4105b0 <lv_draw_rect+0xad4>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410496:	f8df a11c 	ldr.w	sl, [pc, #284]	; 4105b4 <lv_draw_rect+0xad8>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  41049a:	f8df 911c 	ldr.w	r9, [pc, #284]	; 4105b8 <lv_draw_rect+0xadc>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
  41049e:	463a      	mov	r2, r7
  4104a0:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
  4104a4:	9805      	ldr	r0, [sp, #20]
  4104a6:	47d8      	blx	fp
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4104a8:	ad34      	add	r5, sp, #208	; 0xd0
  4104aa:	463b      	mov	r3, r7
  4104ac:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
  4104b0:	f935 1d40 	ldrsh.w	r1, [r5, #-64]!
  4104b4:	9805      	ldr	r0, [sp, #20]
  4104b6:	47d0      	blx	sl
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  4104b8:	2801      	cmp	r0, #1
  4104ba:	bf08      	it	eq
  4104bc:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4104be:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  4104c2:	9302      	str	r3, [sp, #8]
  4104c4:	23ff      	movs	r3, #255	; 0xff
  4104c6:	9301      	str	r3, [sp, #4]
  4104c8:	9000      	str	r0, [sp, #0]
  4104ca:	9b05      	ldr	r3, [sp, #20]
  4104cc:	8c22      	ldrh	r2, [r4, #32]
  4104ce:	4629      	mov	r1, r5
  4104d0:	9804      	ldr	r0, [sp, #16]
  4104d2:	47c8      	blx	r9
            fa.y1++;
  4104d4:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  4104d8:	3301      	adds	r3, #1
  4104da:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            fa.y2++;
  4104de:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  4104e2:	3301      	adds	r3, #1
  4104e4:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        for(y = 0; y < h; y++) {
  4104e8:	3601      	adds	r6, #1
  4104ea:	4546      	cmp	r6, r8
  4104ec:	d1d7      	bne.n	41049e <lv_draw_rect+0x9c2>
    lv_draw_mask_remove_id(mask_rout_id);
  4104ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4104f0:	4b2b      	ldr	r3, [pc, #172]	; (4105a0 <lv_draw_rect+0xac4>)
  4104f2:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  4104f4:	9805      	ldr	r0, [sp, #20]
  4104f6:	4d2b      	ldr	r5, [pc, #172]	; (4105a4 <lv_draw_rect+0xac8>)
  4104f8:	47a8      	blx	r5
    _lv_mem_buf_release(sh_buf);
  4104fa:	9808      	ldr	r0, [sp, #32]
  4104fc:	47a8      	blx	r5
    if(dsc->bg_opa <= LV_OPA_MIN) return;
  4104fe:	7b27      	ldrb	r7, [r4, #12]
  410500:	2f02      	cmp	r7, #2
  410502:	d940      	bls.n	410586 <lv_draw_rect+0xaaa>
  410504:	9a06      	ldr	r2, [sp, #24]
  410506:	1e53      	subs	r3, r2, #1
  410508:	1dd0      	adds	r0, r2, #7
  41050a:	aa1c      	add	r2, sp, #112	; 0x70
        *d8 = *s8;
  41050c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  410510:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  410514:	4283      	cmp	r3, r0
  410516:	d1f9      	bne.n	41050c <lv_draw_rect+0xa30>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
  410518:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  41051c:	2b01      	cmp	r3, #1
  41051e:	dd22      	ble.n	410566 <lv_draw_rect+0xa8a>
  410520:	7d23      	ldrb	r3, [r4, #20]
  410522:	2bfc      	cmp	r3, #252	; 0xfc
  410524:	d91f      	bls.n	410566 <lv_draw_rect+0xa8a>
  410526:	f9b4 3000 	ldrsh.w	r3, [r4]
  41052a:	b1e3      	cbz	r3, 410566 <lv_draw_rect+0xa8a>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
  41052c:	8a63      	ldrh	r3, [r4, #18]
  41052e:	f3c3 0280 	ubfx	r2, r3, #2, #1
  410532:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
  410536:	440a      	add	r2, r1
  410538:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
  41053c:	f3c3 0240 	ubfx	r2, r3, #1, #1
  410540:	f8bd 1072 	ldrh.w	r1, [sp, #114]	; 0x72
  410544:	440a      	add	r2, r1
  410546:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
  41054a:	f3c3 01c0 	ubfx	r1, r3, #3, #1
  41054e:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  410552:	1a52      	subs	r2, r2, r1
  410554:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
  410558:	f003 0301 	and.w	r3, r3, #1
  41055c:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
  410560:	1ad3      	subs	r3, r2, r3
  410562:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  410566:	2ffe      	cmp	r7, #254	; 0xfe
  410568:	bf28      	it	cs
  41056a:	27ff      	movcs	r7, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  41056c:	4b0e      	ldr	r3, [pc, #56]	; (4105a8 <lv_draw_rect+0xacc>)
  41056e:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  410570:	4b0e      	ldr	r3, [pc, #56]	; (4105ac <lv_draw_rect+0xad0>)
  410572:	4798      	blx	r3
  410574:	4683      	mov	fp, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
  410576:	9a04      	ldr	r2, [sp, #16]
  410578:	a91c      	add	r1, sp, #112	; 0x70
  41057a:	a81e      	add	r0, sp, #120	; 0x78
  41057c:	4b06      	ldr	r3, [pc, #24]	; (410598 <lv_draw_rect+0xabc>)
  41057e:	4798      	blx	r3
    if(is_common == false) return;
  410580:	2800      	cmp	r0, #0
  410582:	f040 8384 	bne.w	410c8e <lv_draw_rect+0x11b2>
    if(dsc->pattern_image == NULL) return;
  410586:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  410588:	b1c0      	cbz	r0, 4105bc <lv_draw_rect+0xae0>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
  41058a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  41058e:	2b02      	cmp	r3, #2
  410590:	f200 86b3 	bhi.w	4112fa <lv_draw_rect+0x181e>
  410594:	e012      	b.n	4105bc <lv_draw_rect+0xae0>
  410596:	bf00      	nop
  410598:	00414957 	.word	0x00414957
  41059c:	00414ba5 	.word	0x00414ba5
  4105a0:	0040f171 	.word	0x0040f171
  4105a4:	0041595d 	.word	0x0041595d
  4105a8:	00408f81 	.word	0x00408f81
  4105ac:	00414199 	.word	0x00414199
  4105b0:	00415e01 	.word	0x00415e01
  4105b4:	0040f121 	.word	0x0040f121
  4105b8:	0040a9e9 	.word	0x0040a9e9
    if(dsc->border_opa <= LV_OPA_MIN) return;
  4105bc:	7d25      	ldrb	r5, [r4, #20]
  4105be:	2d02      	cmp	r5, #2
  4105c0:	d96b      	bls.n	41069a <lv_draw_rect+0xbbe>
    if(dsc->border_width == 0) return;
  4105c2:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
  4105c6:	2f00      	cmp	r7, #0
  4105c8:	d067      	beq.n	41069a <lv_draw_rect+0xbbe>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
  4105ca:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  4105ce:	2b00      	cmp	r3, #0
  4105d0:	d063      	beq.n	41069a <lv_draw_rect+0xbbe>
    if(dsc->border_post) return;
  4105d2:	7da2      	ldrb	r2, [r4, #22]
  4105d4:	f012 0f01 	tst.w	r2, #1
  4105d8:	d15f      	bne.n	41069a <lv_draw_rect+0xbbe>
    int32_t rout = dsc->radius;
  4105da:	f9b4 e000 	ldrsh.w	lr, [r4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4105de:	9806      	ldr	r0, [sp, #24]
  4105e0:	8886      	ldrh	r6, [r0, #4]
  4105e2:	3601      	adds	r6, #1
  4105e4:	8802      	ldrh	r2, [r0, #0]
  4105e6:	1ab6      	subs	r6, r6, r2
    int32_t coords_w = lv_area_get_width(coords);
  4105e8:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4105ea:	f8b0 9006 	ldrh.w	r9, [r0, #6]
  4105ee:	f109 0901 	add.w	r9, r9, #1
  4105f2:	8842      	ldrh	r2, [r0, #2]
  4105f4:	eba9 0902 	sub.w	r9, r9, r2
    int32_t coords_h = lv_area_get_height(coords);
  4105f8:	fa0f f989 	sxth.w	r9, r9
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  4105fc:	454e      	cmp	r6, r9
  4105fe:	bfa8      	it	ge
  410600:	464e      	movge	r6, r9
    if(rout > short_side >> 1) rout = short_side >> 1;
  410602:	ea4f 0966 	mov.w	r9, r6, asr #1
  410606:	464e      	mov	r6, r9
  410608:	45f1      	cmp	r9, lr
  41060a:	bfa8      	it	ge
  41060c:	4676      	movge	r6, lr
  41060e:	1e42      	subs	r2, r0, #1
  410610:	f100 0c07 	add.w	ip, r0, #7
    uint8_t * d8 = (uint8_t *)dst;
  410614:	a91c      	add	r1, sp, #112	; 0x70
        *d8 = *s8;
  410616:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  41061a:	f801 0b01 	strb.w	r0, [r1], #1
    while(len) {
  41061e:	4562      	cmp	r2, ip
  410620:	d1f9      	bne.n	410616 <lv_draw_rect+0xb3a>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  410622:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
  410626:	b29a      	uxth	r2, r3
  410628:	f012 0f04 	tst.w	r2, #4
  41062c:	f000 87c3 	beq.w	4115b6 <lv_draw_rect+0x1ada>
  410630:	b2b8      	uxth	r0, r7
  410632:	4401      	add	r1, r0
  410634:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  410638:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
  41063c:	f012 0f08 	tst.w	r2, #8
  410640:	f000 87be 	beq.w	4115c0 <lv_draw_rect+0x1ae4>
  410644:	b2b8      	uxth	r0, r7
  410646:	1a09      	subs	r1, r1, r0
  410648:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  41064c:	f8bd 1072 	ldrh.w	r1, [sp, #114]	; 0x72
  410650:	f012 0f02 	tst.w	r2, #2
  410654:	f000 87b9 	beq.w	4115ca <lv_draw_rect+0x1aee>
  410658:	b2b8      	uxth	r0, r7
  41065a:	4401      	add	r1, r0
  41065c:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  410660:	f8bd 1076 	ldrh.w	r1, [sp, #118]	; 0x76
  410664:	f012 0f01 	tst.w	r2, #1
  410668:	f000 87b4 	beq.w	4115d4 <lv_draw_rect+0x1af8>
  41066c:	b2ba      	uxth	r2, r7
  41066e:	1a8a      	subs	r2, r1, r2
  410670:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
  410674:	2b0f      	cmp	r3, #15
  410676:	f000 87b2 	beq.w	4115de <lv_draw_rect+0x1b02>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  41067a:	2dfe      	cmp	r5, #254	; 0xfe
  41067c:	bf28      	it	cs
  41067e:	25ff      	movcs	r5, #255	; 0xff
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  410680:	4bb4      	ldr	r3, [pc, #720]	; (410954 <lv_draw_rect+0xe78>)
  410682:	4798      	blx	r3
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  410684:	4bb4      	ldr	r3, [pc, #720]	; (410958 <lv_draw_rect+0xe7c>)
  410686:	4798      	blx	r3
  410688:	4680      	mov	r8, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
  41068a:	9a04      	ldr	r2, [sp, #16]
  41068c:	9906      	ldr	r1, [sp, #24]
  41068e:	a81e      	add	r0, sp, #120	; 0x78
  410690:	4bb2      	ldr	r3, [pc, #712]	; (41095c <lv_draw_rect+0xe80>)
  410692:	4798      	blx	r3
        if(is_common == false) return;
  410694:	2800      	cmp	r0, #0
  410696:	f040 87b2 	bne.w	4115fe <lv_draw_rect+0x1b22>
    if(dsc->value_str == NULL) return;
  41069a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  41069c:	b125      	cbz	r5, 4106a8 <lv_draw_rect+0xbcc>
    if(dsc->value_opa <= LV_OPA_MIN) return;
  41069e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4106a2:	2b02      	cmp	r3, #2
  4106a4:	f201 80c6 	bhi.w	411834 <lv_draw_rect+0x1d58>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
  4106a8:	7fa5      	ldrb	r5, [r4, #30]
  4106aa:	2d02      	cmp	r5, #2
  4106ac:	d950      	bls.n	410750 <lv_draw_rect+0xc74>
    if(dsc->outline_width == 0) return;
  4106ae:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
  4106b2:	2800      	cmp	r0, #0
  4106b4:	d04c      	beq.n	410750 <lv_draw_rect+0xc74>
  4106b6:	9a06      	ldr	r2, [sp, #24]
  4106b8:	1e53      	subs	r3, r2, #1
  4106ba:	1dd6      	adds	r6, r2, #7
  4106bc:	aa24      	add	r2, sp, #144	; 0x90
        *d8 = *s8;
  4106be:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4106c2:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  4106c6:	42b3      	cmp	r3, r6
  4106c8:	d1f9      	bne.n	4106be <lv_draw_rect+0xbe2>
    area_inner.x1 -= dsc->outline_pad;
  4106ca:	8ba3      	ldrh	r3, [r4, #28]
  4106cc:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
  4106d0:	1ad2      	subs	r2, r2, r3
  4106d2:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
    area_inner.y1 -= dsc->outline_pad;
  4106d6:	f8bd 2092 	ldrh.w	r2, [sp, #146]	; 0x92
  4106da:	1ad2      	subs	r2, r2, r3
  4106dc:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
    area_inner.x2 += dsc->outline_pad;
  4106e0:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
  4106e4:	441a      	add	r2, r3
  4106e6:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
    area_inner.y2 += dsc->outline_pad;
  4106ea:	f8bd 2096 	ldrh.w	r2, [sp, #150]	; 0x96
  4106ee:	4413      	add	r3, r2
  4106f0:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
  4106f4:	f10d 028f 	add.w	r2, sp, #143	; 0x8f
    uint8_t * d8 = (uint8_t *)dst;
  4106f8:	ab2b      	add	r3, sp, #172	; 0xac
    while(len) {
  4106fa:	ae2d      	add	r6, sp, #180	; 0xb4
        *d8 = *s8;
  4106fc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  410700:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  410704:	42b3      	cmp	r3, r6
  410706:	d1f9      	bne.n	4106fc <lv_draw_rect+0xc20>
    area_outer.x1 -= dsc->outline_width;
  410708:	b280      	uxth	r0, r0
  41070a:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
  41070e:	1a1b      	subs	r3, r3, r0
  410710:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
    area_outer.x2 += dsc->outline_width;
  410714:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
  410718:	4403      	add	r3, r0
  41071a:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
    area_outer.y1 -= dsc->outline_width;
  41071e:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
  410722:	1a1b      	subs	r3, r3, r0
  410724:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    area_outer.y2 += dsc->outline_width;
  410728:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
  41072c:	4418      	add	r0, r3
  41072e:	f8ad 00b2 	strh.w	r0, [sp, #178]	; 0xb2
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
  410732:	f9b4 3000 	ldrsh.w	r3, [r4]
  410736:	7fe2      	ldrb	r2, [r4, #31]
  410738:	9203      	str	r2, [sp, #12]
  41073a:	9502      	str	r5, [sp, #8]
  41073c:	8b22      	ldrh	r2, [r4, #24]
  41073e:	f8ad 2004 	strh.w	r2, [sp, #4]
  410742:	2201      	movs	r2, #1
  410744:	9200      	str	r2, [sp, #0]
  410746:	9a04      	ldr	r2, [sp, #16]
  410748:	a92b      	add	r1, sp, #172	; 0xac
  41074a:	a824      	add	r0, sp, #144	; 0x90
  41074c:	4c84      	ldr	r4, [pc, #528]	; (410960 <lv_draw_rect+0xe84>)
  41074e:	47a0      	blx	r4
}
  410750:	b035      	add	sp, #212	; 0xd4
  410752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410756:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410758:	a91c      	add	r1, sp, #112	; 0x70
  41075a:	a81e      	add	r0, sp, #120	; 0x78
  41075c:	4b81      	ldr	r3, [pc, #516]	; (410964 <lv_draw_rect+0xe88>)
  41075e:	4798      	blx	r3
  410760:	2800      	cmp	r0, #0
  410762:	f47f adeb 	bne.w	41033c <lv_draw_rect+0x860>
        if(ca.y2 > h_half) ca.y2 = h_half;
  410766:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  41076a:	990c      	ldr	r1, [sp, #48]	; 0x30
  41076c:	428b      	cmp	r3, r1
  41076e:	dd01      	ble.n	410774 <lv_draw_rect+0xc98>
  410770:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
        if(ca.x2 > w_half) ca.x2 = w_half;
  410774:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
  410778:	990d      	ldr	r1, [sp, #52]	; 0x34
  41077a:	428b      	cmp	r3, r1
  41077c:	dd01      	ble.n	410782 <lv_draw_rect+0xca6>
  41077e:	f8ad 1084 	strh.w	r1, [sp, #132]	; 0x84
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410782:	f9bd 2080 	ldrsh.w	r2, [sp, #128]	; 0x80
  410786:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  41078a:	3301      	adds	r3, #1
  41078c:	1a9b      	subs	r3, r3, r2
  41078e:	b21b      	sxth	r3, r3
  410790:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  410792:	2b00      	cmp	r3, #0
  410794:	f77f add2 	ble.w	41033c <lv_draw_rect+0x860>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410798:	f9bd 9086 	ldrsh.w	r9, [sp, #134]	; 0x86
  41079c:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  4107a0:	f9bd 707a 	ldrsh.w	r7, [sp, #122]	; 0x7a
  4107a4:	1bf7      	subs	r7, r6, r7
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  4107a6:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
  4107aa:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  4107ac:	fb0a 2707 	mla	r7, sl, r7, r2
  4107b0:	9b08      	ldr	r3, [sp, #32]
  4107b2:	441f      	add	r7, r3
  4107b4:	f10d 027f 	add.w	r2, sp, #127	; 0x7f
    uint8_t * d8 = (uint8_t *)dst;
  4107b8:	ab24      	add	r3, sp, #144	; 0x90
    while(len) {
  4107ba:	a826      	add	r0, sp, #152	; 0x98
        *d8 = *s8;
  4107bc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4107c0:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  4107c4:	4283      	cmp	r3, r0
  4107c6:	d1f9      	bne.n	4107bc <lv_draw_rect+0xce0>
            fa.y2 = fa.y1;
  4107c8:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  4107cc:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
  4107d0:	f109 0901 	add.w	r9, r9, #1
  4107d4:	eba9 0906 	sub.w	r9, r9, r6
            for(y = 0; y < h; y++) {
  4107d8:	fa0f f989 	sxth.w	r9, r9
  4107dc:	f1b9 0f00 	cmp.w	r9, #0
  4107e0:	f77f adac 	ble.w	41033c <lv_draw_rect+0x860>
  4107e4:	f04f 0800 	mov.w	r8, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4107e8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  4107ec:	46ab      	mov	fp, r5
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4107ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4107f0:	4639      	mov	r1, r7
  4107f2:	9d05      	ldr	r5, [sp, #20]
  4107f4:	4628      	mov	r0, r5
  4107f6:	4e5c      	ldr	r6, [pc, #368]	; (410968 <lv_draw_rect+0xe8c>)
  4107f8:	47b0      	blx	r6
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4107fa:	ae34      	add	r6, sp, #208	; 0xd0
  4107fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4107fe:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
  410802:	f936 1d40 	ldrsh.w	r1, [r6, #-64]!
  410806:	9505      	str	r5, [sp, #20]
  410808:	4628      	mov	r0, r5
  41080a:	4d58      	ldr	r5, [pc, #352]	; (41096c <lv_draw_rect+0xe90>)
  41080c:	47a8      	blx	r5
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  41080e:	2801      	cmp	r0, #1
  410810:	bf08      	it	eq
  410812:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410814:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  410818:	9302      	str	r3, [sp, #8]
  41081a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41081c:	9201      	str	r2, [sp, #4]
  41081e:	9000      	str	r0, [sp, #0]
  410820:	9b05      	ldr	r3, [sp, #20]
  410822:	8c22      	ldrh	r2, [r4, #32]
  410824:	4631      	mov	r1, r6
  410826:	9804      	ldr	r0, [sp, #16]
  410828:	4d51      	ldr	r5, [pc, #324]	; (410970 <lv_draw_rect+0xe94>)
  41082a:	47a8      	blx	r5
                fa.y1++;
  41082c:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  410830:	3301      	adds	r3, #1
  410832:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
                fa.y2++;
  410836:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  41083a:	3301      	adds	r3, #1
  41083c:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
  410840:	4457      	add	r7, sl
            for(y = 0; y < h; y++) {
  410842:	f108 0801 	add.w	r8, r8, #1
  410846:	45c8      	cmp	r8, r9
  410848:	d1d1      	bne.n	4107ee <lv_draw_rect+0xd12>
  41084a:	465d      	mov	r5, fp
  41084c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  410850:	e574      	b.n	41033c <lv_draw_rect+0x860>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410852:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410854:	a91c      	add	r1, sp, #112	; 0x70
  410856:	a81e      	add	r0, sp, #120	; 0x78
  410858:	4b42      	ldr	r3, [pc, #264]	; (410964 <lv_draw_rect+0xe88>)
  41085a:	4798      	blx	r3
  41085c:	2800      	cmp	r0, #0
  41085e:	f47f ad85 	bne.w	41036c <lv_draw_rect+0x890>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  410862:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  410866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410868:	4293      	cmp	r3, r2
  41086a:	dc03      	bgt.n	410874 <lv_draw_rect+0xd98>
  41086c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41086e:	3301      	adds	r3, #1
  410870:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        if(ca.x2 > w_half) ca.x2 = w_half;
  410874:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
  410878:	990d      	ldr	r1, [sp, #52]	; 0x34
  41087a:	428b      	cmp	r3, r1
  41087c:	dd01      	ble.n	410882 <lv_draw_rect+0xda6>
  41087e:	f8ad 1084 	strh.w	r1, [sp, #132]	; 0x84
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410882:	f9bd 2080 	ldrsh.w	r2, [sp, #128]	; 0x80
  410886:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  41088a:	3301      	adds	r3, #1
  41088c:	1a9b      	subs	r3, r3, r2
  41088e:	b21b      	sxth	r3, r3
  410890:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  410892:	2b00      	cmp	r3, #0
  410894:	f77f ad6a 	ble.w	41036c <lv_draw_rect+0x890>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410898:	f9bd 6086 	ldrsh.w	r6, [sp, #134]	; 0x86
  41089c:	f9bd e082 	ldrsh.w	lr, [sp, #130]	; 0x82
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  4108a0:	f9bd 707e 	ldrsh.w	r7, [sp, #126]	; 0x7e
  4108a4:	1bbf      	subs	r7, r7, r6
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  4108a6:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
  4108aa:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  4108ac:	fb0a 2707 	mla	r7, sl, r7, r2
  4108b0:	9b08      	ldr	r3, [sp, #32]
  4108b2:	441f      	add	r7, r3
  4108b4:	f10d 027f 	add.w	r2, sp, #127	; 0x7f
    uint8_t * d8 = (uint8_t *)dst;
  4108b8:	ab24      	add	r3, sp, #144	; 0x90
    while(len) {
  4108ba:	a826      	add	r0, sp, #152	; 0x98
        *d8 = *s8;
  4108bc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4108c0:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  4108c4:	4283      	cmp	r3, r0
  4108c6:	d1f9      	bne.n	4108bc <lv_draw_rect+0xde0>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  4108c8:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  4108cc:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
  4108d0:	f106 0901 	add.w	r9, r6, #1
  4108d4:	eba9 090e 	sub.w	r9, r9, lr
            for(y = 0; y < h; y++) {
  4108d8:	fa0f f989 	sxth.w	r9, r9
  4108dc:	f1b9 0f00 	cmp.w	r9, #0
  4108e0:	f77f ad44 	ble.w	41036c <lv_draw_rect+0x890>
  4108e4:	f04f 0800 	mov.w	r8, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4108e8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  4108ec:	46ab      	mov	fp, r5
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4108ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4108f0:	4639      	mov	r1, r7
  4108f2:	9d05      	ldr	r5, [sp, #20]
  4108f4:	4628      	mov	r0, r5
  4108f6:	4e1c      	ldr	r6, [pc, #112]	; (410968 <lv_draw_rect+0xe8c>)
  4108f8:	47b0      	blx	r6
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4108fa:	ae34      	add	r6, sp, #208	; 0xd0
  4108fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4108fe:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
  410902:	f936 1d40 	ldrsh.w	r1, [r6, #-64]!
  410906:	9505      	str	r5, [sp, #20]
  410908:	4628      	mov	r0, r5
  41090a:	4d18      	ldr	r5, [pc, #96]	; (41096c <lv_draw_rect+0xe90>)
  41090c:	47a8      	blx	r5
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  41090e:	2801      	cmp	r0, #1
  410910:	bf08      	it	eq
  410912:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410914:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  410918:	9302      	str	r3, [sp, #8]
  41091a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41091c:	9201      	str	r2, [sp, #4]
  41091e:	9000      	str	r0, [sp, #0]
  410920:	9b05      	ldr	r3, [sp, #20]
  410922:	8c22      	ldrh	r2, [r4, #32]
  410924:	4631      	mov	r1, r6
  410926:	9804      	ldr	r0, [sp, #16]
  410928:	4d11      	ldr	r5, [pc, #68]	; (410970 <lv_draw_rect+0xe94>)
  41092a:	47a8      	blx	r5
                fa.y1--;
  41092c:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  410930:	3b01      	subs	r3, #1
  410932:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
                fa.y2--;
  410936:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  41093a:	3b01      	subs	r3, #1
  41093c:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
  410940:	4457      	add	r7, sl
            for(y = 0; y < h; y++) {
  410942:	f108 0801 	add.w	r8, r8, #1
  410946:	45c8      	cmp	r8, r9
  410948:	d1d1      	bne.n	4108ee <lv_draw_rect+0xe12>
  41094a:	465d      	mov	r5, fp
  41094c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  410950:	e50c      	b.n	41036c <lv_draw_rect+0x890>
  410952:	bf00      	nop
  410954:	00408f81 	.word	0x00408f81
  410958:	00414199 	.word	0x00414199
  41095c:	00414957 	.word	0x00414957
  410960:	0040f575 	.word	0x0040f575
  410964:	00414ba5 	.word	0x00414ba5
  410968:	00415a1d 	.word	0x00415a1d
  41096c:	0040f121 	.word	0x0040f121
  410970:	0040a9e9 	.word	0x0040a9e9
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410974:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410976:	a91c      	add	r1, sp, #112	; 0x70
  410978:	a81e      	add	r0, sp, #120	; 0x78
  41097a:	4bb8      	ldr	r3, [pc, #736]	; (410c5c <lv_draw_rect+0x1180>)
  41097c:	4798      	blx	r3
  41097e:	2800      	cmp	r0, #0
  410980:	f47f ad0e 	bne.w	4103a0 <lv_draw_rect+0x8c4>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
  410984:	9b07      	ldr	r3, [sp, #28]
  410986:	b14b      	cbz	r3, 41099c <lv_draw_rect+0xec0>
  410988:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
  41098c:	9a06      	ldr	r2, [sp, #24]
  41098e:	f9b2 2000 	ldrsh.w	r2, [r2]
  410992:	4293      	cmp	r3, r2
  410994:	bfa8      	it	ge
  410996:	4613      	movge	r3, r2
  410998:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41099c:	f9bd 2080 	ldrsh.w	r2, [sp, #128]	; 0x80
  4109a0:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  4109a4:	3301      	adds	r3, #1
  4109a6:	1a9b      	subs	r3, r3, r2
  4109a8:	b21b      	sxth	r3, r3
  4109aa:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  4109ac:	2b00      	cmp	r3, #0
  4109ae:	f77f acf7 	ble.w	4103a0 <lv_draw_rect+0x8c4>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4109b2:	f8bd 0086 	ldrh.w	r0, [sp, #134]	; 0x86
  4109b6:	3001      	adds	r0, #1
  4109b8:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  4109bc:	1ac0      	subs	r0, r0, r3
  4109be:	b200      	sxth	r0, r0
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  4109c0:	f10a 33ff 	add.w	r3, sl, #4294967295
            sh_buf_tmp += ca.x1 - a.x1;
  4109c4:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
  4109c8:	1a52      	subs	r2, r2, r1
  4109ca:	fb0a 2303 	mla	r3, sl, r3, r2
  4109ce:	9a08      	ldr	r2, [sp, #32]
  4109d0:	18d3      	adds	r3, r2, r3
  4109d2:	930c      	str	r3, [sp, #48]	; 0x30
  4109d4:	f10d 027f 	add.w	r2, sp, #127	; 0x7f
    uint8_t * d8 = (uint8_t *)dst;
  4109d8:	ab24      	add	r3, sp, #144	; 0x90
    while(len) {
  4109da:	ae26      	add	r6, sp, #152	; 0x98
        *d8 = *s8;
  4109dc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4109e0:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  4109e4:	42b3      	cmp	r3, r6
  4109e6:	d1f9      	bne.n	4109dc <lv_draw_rect+0xf00>
            fa.y2 = fa.y1;
  4109e8:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  4109ec:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            for(y = 0; y < h; y++) {
  4109f0:	4681      	mov	r9, r0
  4109f2:	2800      	cmp	r0, #0
  4109f4:	f77f acd4 	ble.w	4103a0 <lv_draw_rect+0x8c4>
  4109f8:	2600      	movs	r6, #0
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4109fa:	f8df 826c 	ldr.w	r8, [pc, #620]	; 410c68 <lv_draw_rect+0x118c>
                _lv_blend_fill(clip, &fa,
  4109fe:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  410a02:	46ab      	mov	fp, r5
  410a04:	9d07      	ldr	r5, [sp, #28]
  410a06:	e024      	b.n	410a52 <lv_draw_rect+0xf76>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410a0a:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
  410a0e:	f9bd 1090 	ldrsh.w	r1, [sp, #144]	; 0x90
  410a12:	9805      	ldr	r0, [sp, #20]
  410a14:	4f92      	ldr	r7, [pc, #584]	; (410c60 <lv_draw_rect+0x1184>)
  410a16:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410a18:	2801      	cmp	r0, #1
  410a1a:	bf08      	it	eq
  410a1c:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa,
  410a1e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  410a22:	9302      	str	r3, [sp, #8]
  410a24:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  410a28:	9301      	str	r3, [sp, #4]
  410a2a:	9000      	str	r0, [sp, #0]
  410a2c:	9b05      	ldr	r3, [sp, #20]
  410a2e:	8c22      	ldrh	r2, [r4, #32]
  410a30:	a924      	add	r1, sp, #144	; 0x90
  410a32:	9804      	ldr	r0, [sp, #16]
  410a34:	4f8b      	ldr	r7, [pc, #556]	; (410c64 <lv_draw_rect+0x1188>)
  410a36:	47b8      	blx	r7
                fa.y1++;
  410a38:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  410a3c:	3301      	adds	r3, #1
  410a3e:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
                fa.y2++;
  410a42:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  410a46:	3301      	adds	r3, #1
  410a48:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            for(y = 0; y < h; y++) {
  410a4c:	3601      	adds	r6, #1
  410a4e:	454e      	cmp	r6, r9
  410a50:	d007      	beq.n	410a62 <lv_draw_rect+0xf86>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410a54:	990c      	ldr	r1, [sp, #48]	; 0x30
  410a56:	9805      	ldr	r0, [sp, #20]
  410a58:	47c0      	blx	r8
                if(simple_mode) {
  410a5a:	2d00      	cmp	r5, #0
  410a5c:	d0d4      	beq.n	410a08 <lv_draw_rect+0xf2c>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  410a5e:	2002      	movs	r0, #2
  410a60:	e7dd      	b.n	410a1e <lv_draw_rect+0xf42>
  410a62:	465d      	mov	r5, fp
  410a64:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  410a68:	e49a      	b.n	4103a0 <lv_draw_rect+0x8c4>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410a6c:	a91c      	add	r1, sp, #112	; 0x70
  410a6e:	a81e      	add	r0, sp, #120	; 0x78
  410a70:	4b7a      	ldr	r3, [pc, #488]	; (410c5c <lv_draw_rect+0x1180>)
  410a72:	4798      	blx	r3
  410a74:	2800      	cmp	r0, #0
  410a76:	f47f acad 	bne.w	4103d4 <lv_draw_rect+0x8f8>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
  410a7a:	9b07      	ldr	r3, [sp, #28]
  410a7c:	b14b      	cbz	r3, 410a92 <lv_draw_rect+0xfb6>
  410a7e:	9b06      	ldr	r3, [sp, #24]
  410a80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  410a84:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
  410a88:	4293      	cmp	r3, r2
  410a8a:	bfa8      	it	ge
  410a8c:	4613      	movge	r3, r2
  410a8e:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410a92:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  410a96:	3301      	adds	r3, #1
  410a98:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
  410a9c:	1a9b      	subs	r3, r3, r2
  410a9e:	b21b      	sxth	r3, r3
  410aa0:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410aa2:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  410aa6:	f8bd 7086 	ldrh.w	r7, [sp, #134]	; 0x86
  410aaa:	3701      	adds	r7, #1
  410aac:	1aff      	subs	r7, r7, r3
  410aae:	b23f      	sxth	r7, r7
        sh_buf_tmp = sh_buf + corner_size - 1;
  410ab0:	46d6      	mov	lr, sl
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  410ab2:	f9bd 607a 	ldrsh.w	r6, [sp, #122]	; 0x7a
  410ab6:	1b9e      	subs	r6, r3, r6
        sh_buf_tmp = sh_buf + corner_size - 1;
  410ab8:	f10a 33ff 	add.w	r3, sl, #4294967295
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  410abc:	fb0a 3606 	mla	r6, sl, r6, r3
  410ac0:	9b08      	ldr	r3, [sp, #32]
  410ac2:	441e      	add	r6, r3
  410ac4:	f10d 027f 	add.w	r2, sp, #127	; 0x7f
    uint8_t * d8 = (uint8_t *)dst;
  410ac8:	ab24      	add	r3, sp, #144	; 0x90
    while(len) {
  410aca:	a826      	add	r0, sp, #152	; 0x98
        *d8 = *s8;
  410acc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  410ad0:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  410ad4:	4283      	cmp	r3, r0
  410ad6:	d1f9      	bne.n	410acc <lv_draw_rect+0xff0>
        fa.y2 = fa.y1;
  410ad8:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  410adc:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        for(y = 0; y < h; y++) {
  410ae0:	463b      	mov	r3, r7
  410ae2:	2f00      	cmp	r7, #0
  410ae4:	f77f ac76 	ble.w	4103d4 <lv_draw_rect+0x8f8>
  410ae8:	2700      	movs	r7, #0
            _lv_memset(mask_buf, opa_tmp, w);
  410aea:	f8df 8180 	ldr.w	r8, [pc, #384]	; 410c6c <lv_draw_rect+0x1190>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410aee:	f8df 9174 	ldr.w	r9, [pc, #372]	; 410c64 <lv_draw_rect+0x1188>
  410af2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  410af6:	950e      	str	r5, [sp, #56]	; 0x38
  410af8:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
  410afc:	469a      	mov	sl, r3
  410afe:	e023      	b.n	410b48 <lv_draw_rect+0x106c>
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410b00:	fb01 f10b 	mul.w	r1, r1, fp
  410b04:	f3c1 2107 	ubfx	r1, r1, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
  410b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410b0a:	9805      	ldr	r0, [sp, #20]
  410b0c:	47c0      	blx	r8
            if(simple_mode) {
  410b0e:	9b07      	ldr	r3, [sp, #28]
  410b10:	b30b      	cbz	r3, 410b56 <lv_draw_rect+0x107a>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  410b12:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410b14:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  410b18:	9302      	str	r3, [sp, #8]
  410b1a:	23ff      	movs	r3, #255	; 0xff
  410b1c:	9301      	str	r3, [sp, #4]
  410b1e:	9000      	str	r0, [sp, #0]
  410b20:	9b05      	ldr	r3, [sp, #20]
  410b22:	8c22      	ldrh	r2, [r4, #32]
  410b24:	a924      	add	r1, sp, #144	; 0x90
  410b26:	9804      	ldr	r0, [sp, #16]
  410b28:	47c8      	blx	r9
            fa.y1++;
  410b2a:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  410b2e:	3301      	adds	r3, #1
  410b30:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            fa.y2++;
  410b34:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  410b38:	3301      	adds	r3, #1
  410b3a:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            sh_buf_tmp += corner_size;
  410b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  410b40:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
  410b42:	3701      	adds	r7, #1
  410b44:	4557      	cmp	r7, sl
  410b46:	d012      	beq.n	410b6e <lv_draw_rect+0x1092>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  410b48:	7831      	ldrb	r1, [r6, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410b4a:	29ff      	cmp	r1, #255	; 0xff
  410b4c:	d1d8      	bne.n	410b00 <lv_draw_rect+0x1024>
  410b4e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
  410b52:	d0d9      	beq.n	410b08 <lv_draw_rect+0x102c>
  410b54:	e7d4      	b.n	410b00 <lv_draw_rect+0x1024>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410b58:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
  410b5c:	f9bd 1090 	ldrsh.w	r1, [sp, #144]	; 0x90
  410b60:	9805      	ldr	r0, [sp, #20]
  410b62:	4d3f      	ldr	r5, [pc, #252]	; (410c60 <lv_draw_rect+0x1184>)
  410b64:	47a8      	blx	r5
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410b66:	2801      	cmp	r0, #1
  410b68:	bf08      	it	eq
  410b6a:	2002      	moveq	r0, #2
  410b6c:	e7d2      	b.n	410b14 <lv_draw_rect+0x1038>
  410b6e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  410b72:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  410b74:	e42e      	b.n	4103d4 <lv_draw_rect+0x8f8>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410b78:	a91c      	add	r1, sp, #112	; 0x70
  410b7a:	a81e      	add	r0, sp, #120	; 0x78
  410b7c:	4b37      	ldr	r3, [pc, #220]	; (410c5c <lv_draw_rect+0x1180>)
  410b7e:	4798      	blx	r3
  410b80:	2800      	cmp	r0, #0
  410b82:	f47f ac41 	bne.w	410408 <lv_draw_rect+0x92c>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
  410b86:	9b07      	ldr	r3, [sp, #28]
  410b88:	b14b      	cbz	r3, 410b9e <lv_draw_rect+0x10c2>
  410b8a:	9b06      	ldr	r3, [sp, #24]
  410b8c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  410b90:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
  410b94:	4293      	cmp	r3, r2
  410b96:	bfb8      	it	lt
  410b98:	4613      	movlt	r3, r2
  410b9a:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410b9e:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  410ba2:	3301      	adds	r3, #1
  410ba4:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
  410ba8:	1a9b      	subs	r3, r3, r2
  410baa:	b21b      	sxth	r3, r3
  410bac:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410bae:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  410bb2:	1c5f      	adds	r7, r3, #1
  410bb4:	f8bd 2082 	ldrh.w	r2, [sp, #130]	; 0x82
  410bb8:	1abf      	subs	r7, r7, r2
  410bba:	b23f      	sxth	r7, r7
        sh_buf_tmp = sh_buf + corner_size - 1;
  410bbc:	46d6      	mov	lr, sl
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  410bbe:	f9bd 607e 	ldrsh.w	r6, [sp, #126]	; 0x7e
  410bc2:	1af6      	subs	r6, r6, r3
        sh_buf_tmp = sh_buf + corner_size - 1;
  410bc4:	f10a 33ff 	add.w	r3, sl, #4294967295
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  410bc8:	fb0a 3606 	mla	r6, sl, r6, r3
  410bcc:	9b08      	ldr	r3, [sp, #32]
  410bce:	441e      	add	r6, r3
  410bd0:	f10d 027f 	add.w	r2, sp, #127	; 0x7f
    uint8_t * d8 = (uint8_t *)dst;
  410bd4:	ab24      	add	r3, sp, #144	; 0x90
    while(len) {
  410bd6:	a826      	add	r0, sp, #152	; 0x98
        *d8 = *s8;
  410bd8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  410bdc:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  410be0:	4283      	cmp	r3, r0
  410be2:	d1f9      	bne.n	410bd8 <lv_draw_rect+0x10fc>
        fa.y1 = fa.y2;
  410be4:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  410be8:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        for(y = 0; y < h; y++) {
  410bec:	46ba      	mov	sl, r7
  410bee:	2f00      	cmp	r7, #0
  410bf0:	f77f ac0a 	ble.w	410408 <lv_draw_rect+0x92c>
  410bf4:	2700      	movs	r7, #0
            _lv_memset(mask_buf, opa_tmp, w);
  410bf6:	f8df 9074 	ldr.w	r9, [pc, #116]	; 410c6c <lv_draw_rect+0x1190>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410bfa:	f8df 8068 	ldr.w	r8, [pc, #104]	; 410c64 <lv_draw_rect+0x1188>
  410bfe:	950d      	str	r5, [sp, #52]	; 0x34
  410c00:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
  410c04:	e023      	b.n	410c4e <lv_draw_rect+0x1172>
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410c06:	fb01 f10b 	mul.w	r1, r1, fp
  410c0a:	f3c1 2107 	ubfx	r1, r1, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
  410c0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410c10:	9805      	ldr	r0, [sp, #20]
  410c12:	47c8      	blx	r9
            if(simple_mode) {
  410c14:	9b07      	ldr	r3, [sp, #28]
  410c16:	b35b      	cbz	r3, 410c70 <lv_draw_rect+0x1194>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  410c18:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410c1a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  410c1e:	9302      	str	r3, [sp, #8]
  410c20:	23ff      	movs	r3, #255	; 0xff
  410c22:	9301      	str	r3, [sp, #4]
  410c24:	9000      	str	r0, [sp, #0]
  410c26:	9b05      	ldr	r3, [sp, #20]
  410c28:	8c22      	ldrh	r2, [r4, #32]
  410c2a:	a924      	add	r1, sp, #144	; 0x90
  410c2c:	9804      	ldr	r0, [sp, #16]
  410c2e:	47c0      	blx	r8
            fa.y1--;
  410c30:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
  410c34:	3b01      	subs	r3, #1
  410c36:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            fa.y2--;
  410c3a:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  410c3e:	3b01      	subs	r3, #1
  410c40:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            sh_buf_tmp += corner_size;
  410c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  410c46:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
  410c48:	3701      	adds	r7, #1
  410c4a:	4557      	cmp	r7, sl
  410c4c:	d01c      	beq.n	410c88 <lv_draw_rect+0x11ac>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  410c4e:	7831      	ldrb	r1, [r6, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410c50:	29ff      	cmp	r1, #255	; 0xff
  410c52:	d1d8      	bne.n	410c06 <lv_draw_rect+0x112a>
  410c54:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
  410c58:	d0d9      	beq.n	410c0e <lv_draw_rect+0x1132>
  410c5a:	e7d4      	b.n	410c06 <lv_draw_rect+0x112a>
  410c5c:	00414ba5 	.word	0x00414ba5
  410c60:	0040f121 	.word	0x0040f121
  410c64:	0040a9e9 	.word	0x0040a9e9
  410c68:	00415a1d 	.word	0x00415a1d
  410c6c:	00415e01 	.word	0x00415e01
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410c72:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
  410c76:	f9bd 1090 	ldrsh.w	r1, [sp, #144]	; 0x90
  410c7a:	9805      	ldr	r0, [sp, #20]
  410c7c:	4db2      	ldr	r5, [pc, #712]	; (410f48 <lv_draw_rect+0x146c>)
  410c7e:	47a8      	blx	r5
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410c80:	2801      	cmp	r0, #1
  410c82:	bf08      	it	eq
  410c84:	2002      	moveq	r0, #2
  410c86:	e7c8      	b.n	410c1a <lv_draw_rect+0x113e>
  410c88:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  410c8a:	f7ff bbbd 	b.w	410408 <lv_draw_rect+0x92c>
    draw_area.x1 -= disp_area->x1;
  410c8e:	f8bb 1010 	ldrh.w	r1, [fp, #16]
  410c92:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
  410c96:	1a5b      	subs	r3, r3, r1
  410c98:	b29a      	uxth	r2, r3
  410c9a:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    draw_area.y1 -= disp_area->y1;
  410c9e:	f8bb 0012 	ldrh.w	r0, [fp, #18]
  410ca2:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
  410ca6:	1a1b      	subs	r3, r3, r0
  410ca8:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    draw_area.x2 -= disp_area->x1;
  410cac:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
  410cb0:	1a5b      	subs	r3, r3, r1
  410cb2:	b29b      	uxth	r3, r3
  410cb4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    draw_area.y2 -= disp_area->y1;
  410cb8:	f8bd 107e 	ldrh.w	r1, [sp, #126]	; 0x7e
  410cbc:	1a09      	subs	r1, r1, r0
  410cbe:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410cc2:	3301      	adds	r3, #1
  410cc4:	1a9b      	subs	r3, r3, r2
  410cc6:	b21b      	sxth	r3, r3
  410cc8:	930c      	str	r3, [sp, #48]	; 0x30
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  410cca:	930d      	str	r3, [sp, #52]	; 0x34
  410ccc:	4618      	mov	r0, r3
  410cce:	4b9f      	ldr	r3, [pc, #636]	; (410f4c <lv_draw_rect+0x1470>)
  410cd0:	4798      	blx	r3
  410cd2:	9008      	str	r0, [sp, #32]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
  410cd4:	f894 9006 	ldrb.w	r9, [r4, #6]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  410cd8:	8862      	ldrh	r2, [r4, #2]
  410cda:	88a3      	ldrh	r3, [r4, #4]
  410cdc:	429a      	cmp	r2, r3
  410cde:	bf08      	it	eq
  410ce0:	f04f 0900 	moveq.w	r9, #0
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
  410ce4:	4b9a      	ldr	r3, [pc, #616]	; (410f50 <lv_draw_rect+0x1474>)
  410ce6:	4798      	blx	r3
  410ce8:	b283      	uxth	r3, r0
  410cea:	9311      	str	r3, [sp, #68]	; 0x44
    if(other_mask_cnt) simple_mode = false;
  410cec:	3300      	adds	r3, #0
  410cee:	bf18      	it	ne
  410cf0:	2301      	movne	r3, #1
  410cf2:	930f      	str	r3, [sp, #60]	; 0x3c
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  410cf4:	f1b9 0f02 	cmp.w	r9, #2
  410cf8:	bf08      	it	eq
  410cfa:	f043 0301 	orreq.w	r3, r3, #1
  410cfe:	f083 0301 	eor.w	r3, r3, #1
  410d02:	4618      	mov	r0, r3
  410d04:	930a      	str	r3, [sp, #40]	; 0x28
  410d06:	f8bd 5074 	ldrh.w	r5, [sp, #116]	; 0x74
  410d0a:	3501      	adds	r5, #1
  410d0c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
  410d10:	1aed      	subs	r5, r5, r3
  410d12:	b22d      	sxth	r5, r5
    int32_t coords_w = lv_area_get_width(&coords_bg);
  410d14:	9505      	str	r5, [sp, #20]
    int32_t rout = dsc->radius;
  410d16:	f9b4 2000 	ldrsh.w	r2, [r4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410d1a:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
  410d1e:	3301      	adds	r3, #1
  410d20:	f8bd 1072 	ldrh.w	r1, [sp, #114]	; 0x72
  410d24:	1a5b      	subs	r3, r3, r1
    int32_t coords_h = lv_area_get_height(&coords_bg);
  410d26:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  410d28:	42ab      	cmp	r3, r5
  410d2a:	bfa8      	it	ge
  410d2c:	462b      	movge	r3, r5
    if(rout > short_side >> 1) rout = short_side >> 1;
  410d2e:	105b      	asrs	r3, r3, #1
  410d30:	4293      	cmp	r3, r2
  410d32:	bfa8      	it	ge
  410d34:	4613      	movge	r3, r2
  410d36:	469a      	mov	sl, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
  410d38:	fab9 f389 	clz	r3, r9
  410d3c:	095b      	lsrs	r3, r3, #5
  410d3e:	9313      	str	r3, [sp, #76]	; 0x4c
  410d40:	f1ba 0f00 	cmp.w	sl, #0
  410d44:	bf08      	it	eq
  410d46:	f1b9 0f00 	cmpeq.w	r9, #0
  410d4a:	d101      	bne.n	410d50 <lv_draw_rect+0x1274>
  410d4c:	2800      	cmp	r0, #0
  410d4e:	d13b      	bne.n	410dc8 <lv_draw_rect+0x12ec>
        if(rout > 0) {
  410d50:	f1ba 0f00 	cmp.w	sl, #0
  410d54:	dd47      	ble.n	410de6 <lv_draw_rect+0x130a>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
  410d56:	2300      	movs	r3, #0
  410d58:	4652      	mov	r2, sl
  410d5a:	a91c      	add	r1, sp, #112	; 0x70
  410d5c:	a82b      	add	r0, sp, #172	; 0xac
  410d5e:	4e7d      	ldr	r6, [pc, #500]	; (410f54 <lv_draw_rect+0x1478>)
  410d60:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  410d62:	2100      	movs	r1, #0
  410d64:	a82b      	add	r0, sp, #172	; 0xac
  410d66:	4b7c      	ldr	r3, [pc, #496]	; (410f58 <lv_draw_rect+0x147c>)
  410d68:	4798      	blx	r3
  410d6a:	9012      	str	r0, [sp, #72]	; 0x48
        lv_color_t grad_color = dsc->bg_color;
  410d6c:	f8b4 8002 	ldrh.w	r8, [r4, #2]
        if(grad_dir == LV_GRAD_DIR_HOR) {
  410d70:	f1b9 0f02 	cmp.w	r9, #2
  410d74:	d03b      	beq.n	410dee <lv_draw_rect+0x1312>
        lv_color_t * grad_map = NULL;
  410d76:	2300      	movs	r3, #0
  410d78:	9310      	str	r3, [sp, #64]	; 0x40
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410d7a:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
  410d7e:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
  410d82:	1c53      	adds	r3, r2, #1
  410d84:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
  410d86:	b21b      	sxth	r3, r3
  410d88:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
  410d8c:	930e      	str	r3, [sp, #56]	; 0x38
  410d8e:	2b32      	cmp	r3, #50	; 0x32
  410d90:	bfd4      	ite	le
  410d92:	2300      	movle	r3, #0
  410d94:	2301      	movgt	r3, #1
  410d96:	930b      	str	r3, [sp, #44]	; 0x2c
        fill_area.x1 = coords_bg.x1;
  410d98:	f8ad 1080 	strh.w	r1, [sp, #128]	; 0x80
        fill_area.x2 = coords_bg.x2;
  410d9c:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  410da0:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
  410da4:	f8bb 3012 	ldrh.w	r3, [fp, #18]
  410da8:	4413      	add	r3, r2
  410daa:	b21b      	sxth	r3, r3
  410dac:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        fill_area.y2 = fill_area.y1;
  410db0:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  410db4:	4616      	mov	r6, r2
  410db6:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  410dba:	4293      	cmp	r3, r2
  410dbc:	f2c0 8222 	blt.w	411204 <lv_draw_rect+0x1728>
                    _lv_blend_fill(clip, &fill_area,
  410dc0:	9705      	str	r7, [sp, #20]
  410dc2:	9409      	str	r4, [sp, #36]	; 0x24
  410dc4:	f000 bdd8 	b.w	411978 <lv_draw_rect+0x1e9c>
        _lv_blend_fill(clip, &coords_bg,
  410dc8:	7b63      	ldrb	r3, [r4, #13]
  410dca:	9302      	str	r3, [sp, #8]
  410dcc:	9701      	str	r7, [sp, #4]
  410dce:	2301      	movs	r3, #1
  410dd0:	9300      	str	r3, [sp, #0]
  410dd2:	2300      	movs	r3, #0
  410dd4:	8862      	ldrh	r2, [r4, #2]
  410dd6:	a91c      	add	r1, sp, #112	; 0x70
  410dd8:	9804      	ldr	r0, [sp, #16]
  410dda:	4d60      	ldr	r5, [pc, #384]	; (410f5c <lv_draw_rect+0x1480>)
  410ddc:	47a8      	blx	r5
    int16_t mask_rout_id = LV_MASK_ID_INV;
  410dde:	f04f 33ff 	mov.w	r3, #4294967295
  410de2:	9312      	str	r3, [sp, #72]	; 0x48
  410de4:	e219      	b.n	41121a <lv_draw_rect+0x173e>
  410de6:	f04f 33ff 	mov.w	r3, #4294967295
  410dea:	9312      	str	r3, [sp, #72]	; 0x48
  410dec:	e7be      	b.n	410d6c <lv_draw_rect+0x1290>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
  410dee:	0068      	lsls	r0, r5, #1
  410df0:	4b56      	ldr	r3, [pc, #344]	; (410f4c <lv_draw_rect+0x1470>)
  410df2:	4798      	blx	r3
  410df4:	9010      	str	r0, [sp, #64]	; 0x40
            for(i = 0; i < coords_w; i++) {
  410df6:	2d00      	cmp	r5, #0
  410df8:	ddbf      	ble.n	410d7a <lv_draw_rect+0x129e>
  410dfa:	2200      	movs	r2, #0
  410dfc:	9707      	str	r7, [sp, #28]
  410dfe:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  410e02:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  410e06:	f8dd e014 	ldr.w	lr, [sp, #20]
  410e0a:	4616      	mov	r6, r2
  410e0c:	f8cd a014 	str.w	sl, [sp, #20]
  410e10:	4607      	mov	r7, r0
  410e12:	e017      	b.n	410e44 <lv_draw_rect+0x1368>
    if(i <= min) return dsc->bg_color;
  410e14:	78a1      	ldrb	r1, [r4, #2]
  410e16:	f001 0907 	and.w	r9, r1, #7
  410e1a:	08c9      	lsrs	r1, r1, #3
  410e1c:	78e2      	ldrb	r2, [r4, #3]
  410e1e:	f002 001f 	and.w	r0, r2, #31
  410e22:	0952      	lsrs	r2, r2, #5
                grad_map[i] = grad_get(dsc, coords_w, i);
  410e24:	782b      	ldrb	r3, [r5, #0]
  410e26:	f369 0302 	bfi	r3, r9, #0, #3
  410e2a:	f361 03c7 	bfi	r3, r1, #3, #5
  410e2e:	702b      	strb	r3, [r5, #0]
  410e30:	786b      	ldrb	r3, [r5, #1]
  410e32:	f360 0304 	bfi	r3, r0, #0, #5
  410e36:	f362 1347 	bfi	r3, r2, #5, #3
  410e3a:	706b      	strb	r3, [r5, #1]
            for(i = 0; i < coords_w; i++) {
  410e3c:	3601      	adds	r6, #1
  410e3e:	3702      	adds	r7, #2
  410e40:	45b6      	cmp	lr, r6
  410e42:	d062      	beq.n	410f0a <lv_draw_rect+0x142e>
                grad_map[i] = grad_get(dsc, coords_w, i);
  410e44:	463d      	mov	r5, r7
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  410e46:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
  410e4a:	fb00 f30e 	mul.w	r3, r0, lr
  410e4e:	121b      	asrs	r3, r3, #8
    if(i <= min) return dsc->bg_color;
  410e50:	b231      	sxth	r1, r6
  410e52:	428b      	cmp	r3, r1
  410e54:	dade      	bge.n	410e14 <lv_draw_rect+0x1338>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  410e56:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
  410e5a:	fb02 fc0e 	mul.w	ip, r2, lr
    if(i >= max) return dsc->bg_grad_color;
  410e5e:	ebb1 2f2c 	cmp.w	r1, ip, asr #8
  410e62:	db08      	blt.n	410e76 <lv_draw_rect+0x139a>
  410e64:	7921      	ldrb	r1, [r4, #4]
  410e66:	f001 0907 	and.w	r9, r1, #7
  410e6a:	08c9      	lsrs	r1, r1, #3
  410e6c:	7962      	ldrb	r2, [r4, #5]
  410e6e:	f002 001f 	and.w	r0, r2, #31
  410e72:	0952      	lsrs	r2, r2, #5
  410e74:	e7d6      	b.n	410e24 <lv_draw_rect+0x1348>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  410e76:	1a12      	subs	r2, r2, r0
    d = (s * d) >> 8;
  410e78:	fb0e f202 	mul.w	r2, lr, r2
    i -= min;
  410e7c:	1af3      	subs	r3, r6, r3
    lv_opa_t mix = (i * 255) / d;
  410e7e:	b21b      	sxth	r3, r3
  410e80:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    d = (s * d) >> 8;
  410e84:	1212      	asrs	r2, r2, #8
    lv_opa_t mix = (i * 255) / d;
  410e86:	fb93 f3f2 	sdiv	r3, r3, r2
  410e8a:	b2db      	uxtb	r3, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  410e8c:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  410e90:	7922      	ldrb	r2, [r4, #4]
  410e92:	08d1      	lsrs	r1, r2, #3
  410e94:	f894 b002 	ldrb.w	fp, [r4, #2]
  410e98:	ea4f 00db 	mov.w	r0, fp, lsr #3
  410e9c:	fb0c f000 	mul.w	r0, ip, r0
  410ea0:	fb03 0101 	mla	r1, r3, r1, r0
  410ea4:	3180      	adds	r1, #128	; 0x80
  410ea6:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  410eaa:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  410eae:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  410eb2:	f002 0207 	and.w	r2, r2, #7
  410eb6:	7960      	ldrb	r0, [r4, #5]
  410eb8:	ea4f 1950 	mov.w	r9, r0, lsr #5
  410ebc:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
  410ec0:	f00b 0b07 	and.w	fp, fp, #7
  410ec4:	f894 a003 	ldrb.w	sl, [r4, #3]
  410ec8:	ea4f 195a 	mov.w	r9, sl, lsr #5
  410ecc:	eb09 09cb 	add.w	r9, r9, fp, lsl #3
  410ed0:	fb0c f909 	mul.w	r9, ip, r9
  410ed4:	fb03 9202 	mla	r2, r3, r2, r9
  410ed8:	3280      	adds	r2, #128	; 0x80
  410eda:	eb02 2902 	add.w	r9, r2, r2, lsl #8
  410ede:	eb02 12c9 	add.w	r2, r2, r9, lsl #7
  410ee2:	f3c2 6982 	ubfx	r9, r2, #26, #3
  410ee6:	f3c2 52c2 	ubfx	r2, r2, #23, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  410eea:	f000 001f 	and.w	r0, r0, #31
  410eee:	f00a 0a1f 	and.w	sl, sl, #31
  410ef2:	fb0c fa0a 	mul.w	sl, ip, sl
  410ef6:	fb03 a300 	mla	r3, r3, r0, sl
  410efa:	3380      	adds	r3, #128	; 0x80
  410efc:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  410f00:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  410f04:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  410f08:	e78c      	b.n	410e24 <lv_draw_rect+0x1348>
  410f0a:	9f07      	ldr	r7, [sp, #28]
  410f0c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  410f10:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  410f14:	f8dd a014 	ldr.w	sl, [sp, #20]
  410f18:	e72f      	b.n	410d7a <lv_draw_rect+0x129e>
                    _lv_memset(mask_buf, opa, draw_area_w);
  410f1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  410f1c:	9905      	ldr	r1, [sp, #20]
  410f1e:	9d08      	ldr	r5, [sp, #32]
  410f20:	4628      	mov	r0, r5
  410f22:	4b0f      	ldr	r3, [pc, #60]	; (410f60 <lv_draw_rect+0x1484>)
  410f24:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410f26:	f8bb 2012 	ldrh.w	r2, [fp, #18]
  410f2a:	4432      	add	r2, r6
  410f2c:	f8bb 1010 	ldrh.w	r1, [fp, #16]
  410f30:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
  410f34:	4419      	add	r1, r3
  410f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  410f38:	b212      	sxth	r2, r2
  410f3a:	b209      	sxth	r1, r1
  410f3c:	4628      	mov	r0, r5
  410f3e:	4d02      	ldr	r5, [pc, #8]	; (410f48 <lv_draw_rect+0x146c>)
  410f40:	47a8      	blx	r5
  410f42:	4605      	mov	r5, r0
  410f44:	e023      	b.n	410f8e <lv_draw_rect+0x14b2>
  410f46:	bf00      	nop
  410f48:	0040f121 	.word	0x0040f121
  410f4c:	00415cd9 	.word	0x00415cd9
  410f50:	0040f1c9 	.word	0x0040f1c9
  410f54:	0040f331 	.word	0x0040f331
  410f58:	0040f0e5 	.word	0x0040f0e5
  410f5c:	0040a9e9 	.word	0x0040a9e9
  410f60:	00415e01 	.word	0x00415e01
                _lv_memset(mask_buf, opa, draw_area_w);
  410f64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  410f66:	9905      	ldr	r1, [sp, #20]
  410f68:	9d08      	ldr	r5, [sp, #32]
  410f6a:	4628      	mov	r0, r5
  410f6c:	4baf      	ldr	r3, [pc, #700]	; (41122c <lv_draw_rect+0x1750>)
  410f6e:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410f70:	f8bb 2012 	ldrh.w	r2, [fp, #18]
  410f74:	4432      	add	r2, r6
  410f76:	f8bb 1010 	ldrh.w	r1, [fp, #16]
  410f7a:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
  410f7e:	4419      	add	r1, r3
  410f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  410f82:	b212      	sxth	r2, r2
  410f84:	b209      	sxth	r1, r1
  410f86:	4628      	mov	r0, r5
  410f88:	4da9      	ldr	r5, [pc, #676]	; (411230 <lv_draw_rect+0x1754>)
  410f8a:	47a8      	blx	r5
  410f8c:	4605      	mov	r5, r0
                opa2 = LV_OPA_COVER;
  410f8e:	2d02      	cmp	r5, #2
  410f90:	9b05      	ldr	r3, [sp, #20]
  410f92:	bf08      	it	eq
  410f94:	23ff      	moveq	r3, #255	; 0xff
  410f96:	9307      	str	r3, [sp, #28]
            if(grad_dir == LV_GRAD_DIR_VER) {
  410f98:	f1b9 0f01 	cmp.w	r9, #1
  410f9c:	d05a      	beq.n	411054 <lv_draw_rect+0x1578>
            if(simple_mode && split &&
  410f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  410fa0:	2b00      	cmp	r3, #0
  410fa2:	f000 84cd 	beq.w	411940 <lv_draw_rect+0x1e64>
  410fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410fa8:	2b00      	cmp	r3, #0
  410faa:	f000 84c9 	beq.w	411940 <lv_draw_rect+0x1e64>
               (y < coords_bg.y1 + rout + 1 ||
  410fae:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
  410fb2:	4453      	add	r3, sl
  410fb4:	3301      	adds	r3, #1
            if(simple_mode && split &&
  410fb6:	429c      	cmp	r4, r3
  410fb8:	db07      	blt.n	410fca <lv_draw_rect+0x14ee>
                y > coords_bg.y2 - rout - 1)) {
  410fba:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
  410fbe:	eba3 030a 	sub.w	r3, r3, sl
  410fc2:	3b01      	subs	r3, #1
               (y < coords_bg.y1 + rout + 1 ||
  410fc4:	429c      	cmp	r4, r3
  410fc6:	f340 80f9 	ble.w	4111bc <lv_draw_rect+0x16e0>
                fill_area2.x1 = coords_bg.x1;
  410fca:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
  410fce:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
                fill_area2.x2 = coords_bg.x1 + rout - 1;
  410fd2:	fa1f f48a 	uxth.w	r4, sl
  410fd6:	3b01      	subs	r3, #1
  410fd8:	4423      	add	r3, r4
  410fda:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
                fill_area2.y1 = fill_area.y1;
  410fde:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  410fe2:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
                fill_area2.y2 = fill_area.y2;
  410fe6:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
  410fea:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                _lv_blend_fill(clip, &fill_area2,
  410fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410ff0:	7b5b      	ldrb	r3, [r3, #13]
  410ff2:	9302      	str	r3, [sp, #8]
  410ff4:	9b07      	ldr	r3, [sp, #28]
  410ff6:	9301      	str	r3, [sp, #4]
  410ff8:	9500      	str	r5, [sp, #0]
  410ffa:	9b08      	ldr	r3, [sp, #32]
  410ffc:	4642      	mov	r2, r8
  410ffe:	a924      	add	r1, sp, #144	; 0x90
  411000:	9804      	ldr	r0, [sp, #16]
  411002:	4f8c      	ldr	r7, [pc, #560]	; (411234 <lv_draw_rect+0x1758>)
  411004:	47b8      	blx	r7
                if(grad_dir == LV_GRAD_DIR_VER) {
  411006:	f1b9 0f01 	cmp.w	r9, #1
  41100a:	f000 80c0 	beq.w	41118e <lv_draw_rect+0x16b2>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
  41100e:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
  411012:	1c5a      	adds	r2, r3, #1
  411014:	1b14      	subs	r4, r2, r4
  411016:	f8ad 4090 	strh.w	r4, [sp, #144]	; 0x90
                fill_area2.x2 = coords_bg.x2;
  41101a:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  41101e:	eba3 030a 	sub.w	r3, r3, sl
  411022:	3301      	adds	r3, #1
  411024:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
  411028:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
  41102c:	440a      	add	r2, r1
  41102e:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
  411030:	9a09      	ldr	r2, [sp, #36]	; 0x24
  411032:	7b52      	ldrb	r2, [r2, #13]
  411034:	9202      	str	r2, [sp, #8]
  411036:	9a07      	ldr	r2, [sp, #28]
  411038:	9201      	str	r2, [sp, #4]
  41103a:	9500      	str	r5, [sp, #0]
  41103c:	9a08      	ldr	r2, [sp, #32]
  41103e:	2b00      	cmp	r3, #0
  411040:	bfa8      	it	ge
  411042:	18d2      	addge	r2, r2, r3
  411044:	4613      	mov	r3, r2
  411046:	4642      	mov	r2, r8
  411048:	a924      	add	r1, sp, #144	; 0x90
  41104a:	9804      	ldr	r0, [sp, #16]
  41104c:	4c79      	ldr	r4, [pc, #484]	; (411234 <lv_draw_rect+0x1758>)
  41104e:	47a0      	blx	r4
  411050:	f000 bc82 	b.w	411958 <lv_draw_rect+0x1e7c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411054:	f8bd 1072 	ldrh.w	r1, [sp, #114]	; 0x72
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
  411058:	1a62      	subs	r2, r4, r1
  41105a:	b292      	uxth	r2, r2
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  41105c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41105e:	f9b3 e008 	ldrsh.w	lr, [r3, #8]
  411062:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
  411066:	3301      	adds	r3, #1
  411068:	1a5b      	subs	r3, r3, r1
  41106a:	b21b      	sxth	r3, r3
  41106c:	fb03 f10e 	mul.w	r1, r3, lr
  411070:	1209      	asrs	r1, r1, #8
    if(i <= min) return dsc->bg_color;
  411072:	b210      	sxth	r0, r2
  411074:	4281      	cmp	r1, r0
  411076:	da11      	bge.n	41109c <lv_draw_rect+0x15c0>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  411078:	9f09      	ldr	r7, [sp, #36]	; 0x24
  41107a:	f9b7 c00a 	ldrsh.w	ip, [r7, #10]
  41107e:	fb0c f703 	mul.w	r7, ip, r3
    if(i >= max) return dsc->bg_grad_color;
  411082:	ebb0 2f27 	cmp.w	r0, r7, asr #8
  411086:	db2e      	blt.n	4110e6 <lv_draw_rect+0x160a>
  411088:	9f09      	ldr	r7, [sp, #36]	; 0x24
  41108a:	793a      	ldrb	r2, [r7, #4]
  41108c:	f002 0007 	and.w	r0, r2, #7
  411090:	08d2      	lsrs	r2, r2, #3
  411092:	797b      	ldrb	r3, [r7, #5]
  411094:	f003 011f 	and.w	r1, r3, #31
  411098:	095b      	lsrs	r3, r3, #5
  41109a:	e008      	b.n	4110ae <lv_draw_rect+0x15d2>
    if(i <= min) return dsc->bg_color;
  41109c:	9909      	ldr	r1, [sp, #36]	; 0x24
  41109e:	788a      	ldrb	r2, [r1, #2]
  4110a0:	f002 0007 	and.w	r0, r2, #7
  4110a4:	08d2      	lsrs	r2, r2, #3
  4110a6:	78cb      	ldrb	r3, [r1, #3]
  4110a8:	f003 011f 	and.w	r1, r3, #31
  4110ac:	095b      	lsrs	r3, r3, #5
  4110ae:	f360 0802 	bfi	r8, r0, #0, #3
  4110b2:	f362 08c7 	bfi	r8, r2, #3, #5
  4110b6:	f361 280c 	bfi	r8, r1, #8, #5
  4110ba:	f363 384f 	bfi	r8, r3, #13, #3
            if(simple_mode && split &&
  4110be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4110c0:	b11b      	cbz	r3, 4110ca <lv_draw_rect+0x15ee>
  4110c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4110c4:	2b00      	cmp	r3, #0
  4110c6:	f47f af72 	bne.w	410fae <lv_draw_rect+0x14d2>
                    _lv_blend_fill(clip, &fill_area,
  4110ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4110cc:	7b5b      	ldrb	r3, [r3, #13]
  4110ce:	9302      	str	r3, [sp, #8]
  4110d0:	9b07      	ldr	r3, [sp, #28]
  4110d2:	9301      	str	r3, [sp, #4]
  4110d4:	9500      	str	r5, [sp, #0]
  4110d6:	9b08      	ldr	r3, [sp, #32]
  4110d8:	4642      	mov	r2, r8
  4110da:	a920      	add	r1, sp, #128	; 0x80
  4110dc:	9804      	ldr	r0, [sp, #16]
  4110de:	4c55      	ldr	r4, [pc, #340]	; (411234 <lv_draw_rect+0x1758>)
  4110e0:	47a0      	blx	r4
  4110e2:	f000 bc39 	b.w	411958 <lv_draw_rect+0x1e7c>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  4110e6:	ebac 000e 	sub.w	r0, ip, lr
    d = (s * d) >> 8;
  4110ea:	fb03 f300 	mul.w	r3, r3, r0
    i -= min;
  4110ee:	1a52      	subs	r2, r2, r1
    lv_opa_t mix = (i * 255) / d;
  4110f0:	b212      	sxth	r2, r2
  4110f2:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
  4110f6:	121b      	asrs	r3, r3, #8
    lv_opa_t mix = (i * 255) / d;
  4110f8:	fb92 f3f3 	sdiv	r3, r2, r3
  4110fc:	b2db      	uxtb	r3, r3
  4110fe:	461f      	mov	r7, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  411100:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  411104:	4618      	mov	r0, r3
  411106:	9909      	ldr	r1, [sp, #36]	; 0x24
  411108:	790b      	ldrb	r3, [r1, #4]
  41110a:	08da      	lsrs	r2, r3, #3
  41110c:	f891 c002 	ldrb.w	ip, [r1, #2]
  411110:	ea4f 01dc 	mov.w	r1, ip, lsr #3
  411114:	9015      	str	r0, [sp, #84]	; 0x54
  411116:	fb00 f101 	mul.w	r1, r0, r1
  41111a:	9714      	str	r7, [sp, #80]	; 0x50
  41111c:	fb07 1202 	mla	r2, r7, r2, r1
  411120:	3280      	adds	r2, #128	; 0x80
  411122:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  411126:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41112a:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41112e:	f003 0307 	and.w	r3, r3, #7
  411132:	9f09      	ldr	r7, [sp, #36]	; 0x24
  411134:	7979      	ldrb	r1, [r7, #5]
  411136:	0948      	lsrs	r0, r1, #5
  411138:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  41113c:	f00c 0c07 	and.w	ip, ip, #7
  411140:	f897 e003 	ldrb.w	lr, [r7, #3]
  411144:	ea4f 105e 	mov.w	r0, lr, lsr #5
  411148:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  41114c:	9f15      	ldr	r7, [sp, #84]	; 0x54
  41114e:	fb07 f000 	mul.w	r0, r7, r0
  411152:	9f14      	ldr	r7, [sp, #80]	; 0x50
  411154:	fb07 0303 	mla	r3, r7, r3, r0
  411158:	3380      	adds	r3, #128	; 0x80
  41115a:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  41115e:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  411162:	f3c3 6082 	ubfx	r0, r3, #26, #3
  411166:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41116a:	f001 011f 	and.w	r1, r1, #31
  41116e:	f00e 0e1f 	and.w	lr, lr, #31
  411172:	9f15      	ldr	r7, [sp, #84]	; 0x54
  411174:	fb07 fe0e 	mul.w	lr, r7, lr
  411178:	9f14      	ldr	r7, [sp, #80]	; 0x50
  41117a:	fb07 e101 	mla	r1, r7, r1, lr
  41117e:	3180      	adds	r1, #128	; 0x80
  411180:	eb01 2e01 	add.w	lr, r1, r1, lsl #8
  411184:	eb01 11ce 	add.w	r1, r1, lr, lsl #7
  411188:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  41118c:	e78f      	b.n	4110ae <lv_draw_rect+0x15d2>
                    fill_area2.x1 = coords_bg.x1 + rout;
  41118e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
  411192:	4423      	add	r3, r4
  411194:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
                    fill_area2.x2 = coords_bg.x2 - rout;
  411198:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
  41119c:	1b1b      	subs	r3, r3, r4
  41119e:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
                    _lv_blend_fill(clip, &fill_area2,
  4111a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4111a4:	7b5b      	ldrb	r3, [r3, #13]
  4111a6:	9302      	str	r3, [sp, #8]
  4111a8:	9b05      	ldr	r3, [sp, #20]
  4111aa:	9301      	str	r3, [sp, #4]
  4111ac:	2301      	movs	r3, #1
  4111ae:	9300      	str	r3, [sp, #0]
  4111b0:	2300      	movs	r3, #0
  4111b2:	4642      	mov	r2, r8
  4111b4:	a924      	add	r1, sp, #144	; 0x90
  4111b6:	9804      	ldr	r0, [sp, #16]
  4111b8:	47b8      	blx	r7
  4111ba:	e728      	b.n	41100e <lv_draw_rect+0x1532>
                if(grad_dir == LV_GRAD_DIR_HOR) {
  4111bc:	f1b9 0f02 	cmp.w	r9, #2
  4111c0:	d004      	beq.n	4111cc <lv_draw_rect+0x16f0>
                else if(grad_dir == LV_GRAD_DIR_VER) {
  4111c2:	f1b9 0f01 	cmp.w	r9, #1
  4111c6:	f040 83bf 	bne.w	411948 <lv_draw_rect+0x1e6c>
  4111ca:	e77e      	b.n	4110ca <lv_draw_rect+0x15ee>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
  4111cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4111ce:	7b5b      	ldrb	r3, [r3, #13]
  4111d0:	9302      	str	r3, [sp, #8]
  4111d2:	9b07      	ldr	r3, [sp, #28]
  4111d4:	9301      	str	r3, [sp, #4]
  4111d6:	9500      	str	r5, [sp, #0]
  4111d8:	9b08      	ldr	r3, [sp, #32]
  4111da:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4111dc:	a920      	add	r1, sp, #128	; 0x80
  4111de:	9804      	ldr	r0, [sp, #16]
  4111e0:	4c15      	ldr	r4, [pc, #84]	; (411238 <lv_draw_rect+0x175c>)
  4111e2:	47a0      	blx	r4
  4111e4:	e3b8      	b.n	411958 <lv_draw_rect+0x1e7c>
                    _lv_blend_fill(clip, &fill_area,
  4111e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4111e8:	7b5b      	ldrb	r3, [r3, #13]
  4111ea:	9302      	str	r3, [sp, #8]
  4111ec:	9b07      	ldr	r3, [sp, #28]
  4111ee:	9301      	str	r3, [sp, #4]
  4111f0:	9500      	str	r5, [sp, #0]
  4111f2:	9b08      	ldr	r3, [sp, #32]
  4111f4:	4642      	mov	r2, r8
  4111f6:	a920      	add	r1, sp, #128	; 0x80
  4111f8:	9804      	ldr	r0, [sp, #16]
  4111fa:	4c0e      	ldr	r4, [pc, #56]	; (411234 <lv_draw_rect+0x1758>)
  4111fc:	47a0      	blx	r4
  4111fe:	e3ab      	b.n	411958 <lv_draw_rect+0x1e7c>
  411200:	9f05      	ldr	r7, [sp, #20]
  411202:	9c09      	ldr	r4, [sp, #36]	; 0x24
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
  411204:	9b11      	ldr	r3, [sp, #68]	; 0x44
  411206:	b91b      	cbnz	r3, 411210 <lv_draw_rect+0x1734>
  411208:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  41120a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  41120c:	4213      	tst	r3, r2
  41120e:	d119      	bne.n	411244 <lv_draw_rect+0x1768>
        if(grad_map) _lv_mem_buf_release(grad_map);
  411210:	9b10      	ldr	r3, [sp, #64]	; 0x40
  411212:	b113      	cbz	r3, 41121a <lv_draw_rect+0x173e>
  411214:	4618      	mov	r0, r3
  411216:	4b09      	ldr	r3, [pc, #36]	; (41123c <lv_draw_rect+0x1760>)
  411218:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
  41121a:	9812      	ldr	r0, [sp, #72]	; 0x48
  41121c:	4b08      	ldr	r3, [pc, #32]	; (411240 <lv_draw_rect+0x1764>)
  41121e:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  411220:	9808      	ldr	r0, [sp, #32]
  411222:	4b06      	ldr	r3, [pc, #24]	; (41123c <lv_draw_rect+0x1760>)
  411224:	4798      	blx	r3
  411226:	f7ff b9ae 	b.w	410586 <lv_draw_rect+0xaaa>
  41122a:	bf00      	nop
  41122c:	00415e01 	.word	0x00415e01
  411230:	0040f121 	.word	0x0040f121
  411234:	0040a9e9 	.word	0x0040a9e9
  411238:	0040b5d9 	.word	0x0040b5d9
  41123c:	0041595d 	.word	0x0041595d
  411240:	0040f171 	.word	0x0040f171
            fill_area.x1 = coords_bg.x1 + rout;
  411244:	fa1f f58a 	uxth.w	r5, sl
  411248:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
  41124c:	442b      	add	r3, r5
  41124e:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
            fill_area.x2 = coords_bg.x2 - rout;
  411252:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
  411256:	1b5b      	subs	r3, r3, r5
  411258:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
            fill_area.y1 = coords_bg.y1;
  41125c:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
  411260:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            fill_area.y2 = coords_bg.y1 + rout;
  411264:	442b      	add	r3, r5
  411266:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            _lv_blend_fill(clip, &fill_area,
  41126a:	7b63      	ldrb	r3, [r4, #13]
  41126c:	9302      	str	r3, [sp, #8]
  41126e:	9701      	str	r7, [sp, #4]
  411270:	2301      	movs	r3, #1
  411272:	9300      	str	r3, [sp, #0]
  411274:	2300      	movs	r3, #0
  411276:	8862      	ldrh	r2, [r4, #2]
  411278:	a920      	add	r1, sp, #128	; 0x80
  41127a:	9804      	ldr	r0, [sp, #16]
  41127c:	4eae      	ldr	r6, [pc, #696]	; (411538 <lv_draw_rect+0x1a5c>)
  41127e:	47b0      	blx	r6
            fill_area.y1 = coords_bg.y2 - rout;
  411280:	f9bd 1076 	ldrsh.w	r1, [sp, #118]	; 0x76
  411284:	1b4a      	subs	r2, r1, r5
  411286:	b212      	sxth	r2, r2
  411288:	f8ad 2082 	strh.w	r2, [sp, #130]	; 0x82
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
  41128c:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  411290:	429a      	cmp	r2, r3
  411292:	dc02      	bgt.n	41129a <lv_draw_rect+0x17be>
  411294:	3301      	adds	r3, #1
  411296:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            fill_area.y2 = coords_bg.y2;
  41129a:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
            _lv_blend_fill(clip, &fill_area,
  41129e:	7b63      	ldrb	r3, [r4, #13]
  4112a0:	9302      	str	r3, [sp, #8]
  4112a2:	9701      	str	r7, [sp, #4]
  4112a4:	f04f 0801 	mov.w	r8, #1
  4112a8:	f8cd 8000 	str.w	r8, [sp]
  4112ac:	2300      	movs	r3, #0
  4112ae:	8862      	ldrh	r2, [r4, #2]
  4112b0:	a920      	add	r1, sp, #128	; 0x80
  4112b2:	f8dd 9010 	ldr.w	r9, [sp, #16]
  4112b6:	4648      	mov	r0, r9
  4112b8:	4e9f      	ldr	r6, [pc, #636]	; (411538 <lv_draw_rect+0x1a5c>)
  4112ba:	47b0      	blx	r6
            fill_area.x1 = coords_bg.x1;
  4112bc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
  4112c0:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
            fill_area.x2 = coords_bg.x2;
  4112c4:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
  4112c8:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
            fill_area.y1 = coords_bg.y1 + rout + 1;
  4112cc:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
  4112d0:	4443      	add	r3, r8
  4112d2:	442b      	add	r3, r5
  4112d4:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            fill_area.y2 = coords_bg.y2 - rout - 1;
  4112d8:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
  4112dc:	3b01      	subs	r3, #1
  4112de:	1b5d      	subs	r5, r3, r5
  4112e0:	f8ad 5086 	strh.w	r5, [sp, #134]	; 0x86
            _lv_blend_fill(clip, &fill_area,
  4112e4:	7b63      	ldrb	r3, [r4, #13]
  4112e6:	9302      	str	r3, [sp, #8]
  4112e8:	9701      	str	r7, [sp, #4]
  4112ea:	f8cd 8000 	str.w	r8, [sp]
  4112ee:	2300      	movs	r3, #0
  4112f0:	8862      	ldrh	r2, [r4, #2]
  4112f2:	a920      	add	r1, sp, #128	; 0x80
  4112f4:	4648      	mov	r0, r9
  4112f6:	47b0      	blx	r6
  4112f8:	e78a      	b.n	411210 <lv_draw_rect+0x1734>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
  4112fa:	4b90      	ldr	r3, [pc, #576]	; (41153c <lv_draw_rect+0x1a60>)
  4112fc:	4798      	blx	r3
  4112fe:	4606      	mov	r6, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
  411300:	2801      	cmp	r0, #1
  411302:	d909      	bls.n	411318 <lv_draw_rect+0x183c>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  411304:	2802      	cmp	r0, #2
  411306:	d024      	beq.n	411352 <lv_draw_rect+0x1876>
        lv_draw_img(coords, clip, NULL, NULL);
  411308:	2300      	movs	r3, #0
  41130a:	461a      	mov	r2, r3
  41130c:	9904      	ldr	r1, [sp, #16]
  41130e:	9806      	ldr	r0, [sp, #24]
  411310:	4d8b      	ldr	r5, [pc, #556]	; (411540 <lv_draw_rect+0x1a64>)
  411312:	47a8      	blx	r5
  411314:	f7ff b952 	b.w	4105bc <lv_draw_rect+0xae0>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
  411318:	a92b      	add	r1, sp, #172	; 0xac
  41131a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  41131c:	4b89      	ldr	r3, [pc, #548]	; (411544 <lv_draw_rect+0x1a68>)
  41131e:	4798      	blx	r3
        if(res != LV_RES_OK) {
  411320:	2801      	cmp	r0, #1
  411322:	f47f a94b 	bne.w	4105bc <lv_draw_rect+0xae0>
        img_w = header.w;
  411326:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  411328:	f3c3 298a 	ubfx	r9, r3, #10, #11
        img_h = header.h;
  41132c:	f8bd 50ae 	ldrh.w	r5, [sp, #174]	; 0xae
  411330:	f3c5 154a 	ubfx	r5, r5, #5, #11
        lv_draw_img_dsc_init(&img_dsc);
  411334:	a820      	add	r0, sp, #128	; 0x80
  411336:	4b84      	ldr	r3, [pc, #528]	; (411548 <lv_draw_rect+0x1a6c>)
  411338:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
  41133a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  41133e:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
  411342:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  411346:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
        img_dsc.recolor = dsc->pattern_recolor;
  41134a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  41134c:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
  411350:	e01d      	b.n	41138e <lv_draw_rect+0x18b2>
        lv_draw_label_dsc_init(&label_dsc);
  411352:	a82b      	add	r0, sp, #172	; 0xac
  411354:	4b7d      	ldr	r3, [pc, #500]	; (41154c <lv_draw_rect+0x1a70>)
  411356:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
  411358:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  41135a:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
        label_dsc.font = dsc->pattern_font;
  41135e:	6b22      	ldr	r2, [r4, #48]	; 0x30
  411360:	922d      	str	r2, [sp, #180]	; 0xb4
        label_dsc.opa = dsc->pattern_opa;
  411362:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  411366:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
  41136a:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
  41136e:	2100      	movs	r1, #0
  411370:	9102      	str	r1, [sp, #8]
  411372:	f647 4118 	movw	r1, #31768	; 0x7c18
  411376:	9101      	str	r1, [sp, #4]
  411378:	f9bd 10ba 	ldrsh.w	r1, [sp, #186]	; 0xba
  41137c:	9100      	str	r1, [sp, #0]
  41137e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  411380:	a824      	add	r0, sp, #144	; 0x90
  411382:	4d73      	ldr	r5, [pc, #460]	; (411550 <lv_draw_rect+0x1a74>)
  411384:	47a8      	blx	r5
        img_w = s.x;
  411386:	f9bd 9090 	ldrsh.w	r9, [sp, #144]	; 0x90
        img_h = s.y;
  41138a:	f9bd 5092 	ldrsh.w	r5, [sp, #146]	; 0x92
    if(img_w == 0 || img_h == 0) return;
  41138e:	f1b9 0f00 	cmp.w	r9, #0
  411392:	f43f a913 	beq.w	4105bc <lv_draw_rect+0xae0>
  411396:	2d00      	cmp	r5, #0
  411398:	f43f a910 	beq.w	4105bc <lv_draw_rect+0xae0>
    if(dsc->pattern_repeat) {
  41139c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  4113a0:	f013 0f01 	tst.w	r3, #1
  4113a4:	d140      	bne.n	411428 <lv_draw_rect+0x194c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4113a6:	9a06      	ldr	r2, [sp, #24]
  4113a8:	8810      	ldrh	r0, [r2, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4113aa:	8851      	ldrh	r1, [r2, #2]
  4113ac:	88d3      	ldrh	r3, [r2, #6]
  4113ae:	3301      	adds	r3, #1
  4113b0:	1a5b      	subs	r3, r3, r1
        int32_t obj_h = lv_area_get_height(coords);
  4113b2:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4113b4:	8892      	ldrh	r2, [r2, #4]
  4113b6:	3201      	adds	r2, #1
  4113b8:	1a12      	subs	r2, r2, r0
        int32_t obj_w = lv_area_get_width(coords);
  4113ba:	b212      	sxth	r2, r2
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  4113bc:	ebb2 0209 	subs.w	r2, r2, r9
  4113c0:	bf48      	it	mi
  4113c2:	3201      	addmi	r2, #1
  4113c4:	eb00 0062 	add.w	r0, r0, r2, asr #1
  4113c8:	b280      	uxth	r0, r0
  4113ca:	f8ad 0078 	strh.w	r0, [sp, #120]	; 0x78
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  4113ce:	1b5f      	subs	r7, r3, r5
  4113d0:	463a      	mov	r2, r7
  4113d2:	2f00      	cmp	r7, #0
  4113d4:	bfb8      	it	lt
  4113d6:	1c7a      	addlt	r2, r7, #1
  4113d8:	eb01 0262 	add.w	r2, r1, r2, asr #1
  4113dc:	b292      	uxth	r2, r2
  4113de:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  4113e2:	f109 39ff 	add.w	r9, r9, #4294967295
  4113e6:	4481      	add	r9, r0
  4113e8:	f8ad 907c 	strh.w	r9, [sp, #124]	; 0x7c
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  4113ec:	1e6b      	subs	r3, r5, #1
  4113ee:	4413      	add	r3, r2
  4113f0:	b29b      	uxth	r3, r3
  4113f2:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        if(src_type == LV_IMG_SRC_SYMBOL) {
  4113f6:	2e02      	cmp	r6, #2
  4113f8:	f000 80b6 	beq.w	411568 <lv_draw_rect+0x1a8c>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
  4113fc:	f9b4 2000 	ldrsh.w	r2, [r4]
  411400:	9906      	ldr	r1, [sp, #24]
  411402:	a81e      	add	r0, sp, #120	; 0x78
  411404:	4b53      	ldr	r3, [pc, #332]	; (411554 <lv_draw_rect+0x1a78>)
  411406:	4798      	blx	r3
  411408:	2800      	cmp	r0, #0
  41140a:	f000 82d0 	beq.w	4119ae <lv_draw_rect+0x1ed2>
        int16_t radius_mask_id = LV_MASK_ID_INV;
  41140e:	f04f 35ff 	mov.w	r5, #4294967295
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  411412:	ab20      	add	r3, sp, #128	; 0x80
  411414:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  411416:	9904      	ldr	r1, [sp, #16]
  411418:	a81e      	add	r0, sp, #120	; 0x78
  41141a:	4e49      	ldr	r6, [pc, #292]	; (411540 <lv_draw_rect+0x1a64>)
  41141c:	47b0      	blx	r6
        lv_draw_mask_remove_id(radius_mask_id);
  41141e:	4628      	mov	r0, r5
  411420:	4b4d      	ldr	r3, [pc, #308]	; (411558 <lv_draw_rect+0x1a7c>)
  411422:	4798      	blx	r3
  411424:	f7ff b8ca 	b.w	4105bc <lv_draw_rect+0xae0>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  411428:	2300      	movs	r3, #0
  41142a:	f9b4 2000 	ldrsh.w	r2, [r4]
  41142e:	f8dd 8018 	ldr.w	r8, [sp, #24]
  411432:	4641      	mov	r1, r8
  411434:	a824      	add	r0, sp, #144	; 0x90
  411436:	4f49      	ldr	r7, [pc, #292]	; (41155c <lv_draw_rect+0x1a80>)
  411438:	47b8      	blx	r7
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  41143a:	2100      	movs	r1, #0
  41143c:	a824      	add	r0, sp, #144	; 0x90
  41143e:	4b48      	ldr	r3, [pc, #288]	; (411560 <lv_draw_rect+0x1a84>)
  411440:	4798      	blx	r3
  411442:	9007      	str	r0, [sp, #28]
  411444:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  411448:	3301      	adds	r3, #1
  41144a:	f8b8 2000 	ldrh.w	r2, [r8]
  41144e:	1a9b      	subs	r3, r3, r2
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  411450:	b21b      	sxth	r3, r3
  411452:	fb93 fbf9 	sdiv	fp, r3, r9
  411456:	fb09 331b 	mls	r3, r9, fp, r3
  41145a:	2b00      	cmp	r3, #0
  41145c:	bfb8      	it	lt
  41145e:	3301      	addlt	r3, #1
  411460:	ea4f 0b63 	mov.w	fp, r3, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411464:	9a06      	ldr	r2, [sp, #24]
  411466:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
  41146a:	8853      	ldrh	r3, [r2, #2]
  41146c:	1c4a      	adds	r2, r1, #1
  41146e:	1ad2      	subs	r2, r2, r3
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  411470:	b210      	sxth	r0, r2
  411472:	fb90 f2f5 	sdiv	r2, r0, r5
  411476:	fb05 0212 	mls	r2, r5, r2, r0
  41147a:	2a00      	cmp	r2, #0
  41147c:	bfb8      	it	lt
  41147e:	3201      	addlt	r2, #1
        coords_tmp.y1 = coords->y1 - ofs_y;
  411480:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  411484:	b29b      	uxth	r3, r3
  411486:	b21a      	sxth	r2, r3
  411488:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  41148c:	fa1f f885 	uxth.w	r8, r5
  411490:	f108 30ff 	add.w	r0, r8, #4294967295
  411494:	4403      	add	r3, r0
  411496:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  41149a:	4291      	cmp	r1, r2
  41149c:	db47      	blt.n	41152e <lv_draw_rect+0x1a52>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  41149e:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 411564 <lv_draw_rect+0x1a88>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  4114a2:	4f27      	ldr	r7, [pc, #156]	; (411540 <lv_draw_rect+0x1a64>)
  4114a4:	f8cd 9014 	str.w	r9, [sp, #20]
  4114a8:	f8dd 9018 	ldr.w	r9, [sp, #24]
  4114ac:	e02c      	b.n	411508 <lv_draw_rect+0x1a2c>
  4114ae:	ab20      	add	r3, sp, #128	; 0x80
  4114b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4114b2:	9904      	ldr	r1, [sp, #16]
  4114b4:	a81e      	add	r0, sp, #120	; 0x78
  4114b6:	47b8      	blx	r7
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  4114b8:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
  4114bc:	442b      	add	r3, r5
  4114be:	b21b      	sxth	r3, r3
  4114c0:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
  4114c4:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
  4114c8:	442a      	add	r2, r5
  4114ca:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
  4114ce:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
  4114d2:	429a      	cmp	r2, r3
  4114d4:	db09      	blt.n	4114ea <lv_draw_rect+0x1a0e>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  4114d6:	2e02      	cmp	r6, #2
  4114d8:	d1e9      	bne.n	4114ae <lv_draw_rect+0x19d2>
  4114da:	2300      	movs	r3, #0
  4114dc:	9300      	str	r3, [sp, #0]
  4114de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4114e0:	aa2b      	add	r2, sp, #172	; 0xac
  4114e2:	9904      	ldr	r1, [sp, #16]
  4114e4:	a81e      	add	r0, sp, #120	; 0x78
  4114e6:	47d0      	blx	sl
  4114e8:	e7e6      	b.n	4114b8 <lv_draw_rect+0x19dc>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  4114ea:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
  4114ee:	4443      	add	r3, r8
  4114f0:	b21b      	sxth	r3, r3
  4114f2:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
  4114f6:	f8bd 207e 	ldrh.w	r2, [sp, #126]	; 0x7e
  4114fa:	4442      	add	r2, r8
  4114fc:	f8ad 207e 	strh.w	r2, [sp, #126]	; 0x7e
  411500:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
  411504:	429a      	cmp	r2, r3
  411506:	db12      	blt.n	41152e <lv_draw_rect+0x1a52>
            coords_tmp.x1 = coords->x1 - ofs_x;
  411508:	f8b9 3000 	ldrh.w	r3, [r9]
  41150c:	eba3 030b 	sub.w	r3, r3, fp
  411510:	b29b      	uxth	r3, r3
  411512:	b21a      	sxth	r2, r3
  411514:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  411518:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  41151c:	1e69      	subs	r1, r5, #1
  41151e:	440b      	add	r3, r1
  411520:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  411524:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
  411528:	4293      	cmp	r3, r2
  41152a:	dad4      	bge.n	4114d6 <lv_draw_rect+0x19fa>
  41152c:	e7dd      	b.n	4114ea <lv_draw_rect+0x1a0e>
        lv_draw_mask_remove_id(radius_mask_id);
  41152e:	9807      	ldr	r0, [sp, #28]
  411530:	4b09      	ldr	r3, [pc, #36]	; (411558 <lv_draw_rect+0x1a7c>)
  411532:	4798      	blx	r3
  411534:	f7ff b842 	b.w	4105bc <lv_draw_rect+0xae0>
  411538:	0040a9e9 	.word	0x0040a9e9
  41153c:	0040ccd9 	.word	0x0040ccd9
  411540:	0040cac1 	.word	0x0040cac1
  411544:	00412d4d 	.word	0x00412d4d
  411548:	0040ca31 	.word	0x0040ca31
  41154c:	0040cd3d 	.word	0x0040cd3d
  411550:	0041725d 	.word	0x0041725d
  411554:	00414ba5 	.word	0x00414ba5
  411558:	0040f171 	.word	0x0040f171
  41155c:	0040f331 	.word	0x0040f331
  411560:	0040f0e5 	.word	0x0040f0e5
  411564:	0040cd85 	.word	0x0040cd85
            coords_tmp.y1 += y_corr;
  411568:	f007 0701 	and.w	r7, r7, #1
  41156c:	443a      	add	r2, r7
  41156e:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
            coords_tmp.y2 += y_corr;
  411572:	443b      	add	r3, r7
  411574:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
  411578:	f9b4 2000 	ldrsh.w	r2, [r4]
  41157c:	9906      	ldr	r1, [sp, #24]
  41157e:	a81e      	add	r0, sp, #120	; 0x78
  411580:	4ba1      	ldr	r3, [pc, #644]	; (411808 <lv_draw_rect+0x1d2c>)
  411582:	4798      	blx	r3
  411584:	b9a0      	cbnz	r0, 4115b0 <lv_draw_rect+0x1ad4>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  411586:	2300      	movs	r3, #0
  411588:	f9b4 2000 	ldrsh.w	r2, [r4]
  41158c:	9906      	ldr	r1, [sp, #24]
  41158e:	a824      	add	r0, sp, #144	; 0x90
  411590:	4d9e      	ldr	r5, [pc, #632]	; (41180c <lv_draw_rect+0x1d30>)
  411592:	47a8      	blx	r5
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  411594:	2100      	movs	r1, #0
  411596:	a824      	add	r0, sp, #144	; 0x90
  411598:	4b9d      	ldr	r3, [pc, #628]	; (411810 <lv_draw_rect+0x1d34>)
  41159a:	4798      	blx	r3
  41159c:	4605      	mov	r5, r0
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  41159e:	2300      	movs	r3, #0
  4115a0:	9300      	str	r3, [sp, #0]
  4115a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4115a4:	aa2b      	add	r2, sp, #172	; 0xac
  4115a6:	9904      	ldr	r1, [sp, #16]
  4115a8:	a81e      	add	r0, sp, #120	; 0x78
  4115aa:	4e9a      	ldr	r6, [pc, #616]	; (411814 <lv_draw_rect+0x1d38>)
  4115ac:	47b0      	blx	r6
  4115ae:	e736      	b.n	41141e <lv_draw_rect+0x1942>
        int16_t radius_mask_id = LV_MASK_ID_INV;
  4115b0:	f04f 35ff 	mov.w	r5, #4294967295
  4115b4:	e7f3      	b.n	41159e <lv_draw_rect+0x1ac2>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  4115b6:	19b8      	adds	r0, r7, r6
  4115b8:	4240      	negs	r0, r0
  4115ba:	b280      	uxth	r0, r0
  4115bc:	f7ff b839 	b.w	410632 <lv_draw_rect+0xb56>
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  4115c0:	19b8      	adds	r0, r7, r6
  4115c2:	4240      	negs	r0, r0
  4115c4:	b280      	uxth	r0, r0
  4115c6:	f7ff b83e 	b.w	410646 <lv_draw_rect+0xb6a>
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  4115ca:	19b8      	adds	r0, r7, r6
  4115cc:	4240      	negs	r0, r0
  4115ce:	b280      	uxth	r0, r0
  4115d0:	f7ff b843 	b.w	41065a <lv_draw_rect+0xb7e>
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  4115d4:	19ba      	adds	r2, r7, r6
  4115d6:	4252      	negs	r2, r2
  4115d8:	b292      	uxth	r2, r2
  4115da:	f7ff b848 	b.w	41066e <lv_draw_rect+0xb92>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
  4115de:	7d63      	ldrb	r3, [r4, #21]
  4115e0:	9303      	str	r3, [sp, #12]
  4115e2:	9502      	str	r5, [sp, #8]
  4115e4:	89e3      	ldrh	r3, [r4, #14]
  4115e6:	f8ad 3004 	strh.w	r3, [sp, #4]
  4115ea:	2300      	movs	r3, #0
  4115ec:	9300      	str	r3, [sp, #0]
  4115ee:	4673      	mov	r3, lr
  4115f0:	9a04      	ldr	r2, [sp, #16]
  4115f2:	9906      	ldr	r1, [sp, #24]
  4115f4:	a81c      	add	r0, sp, #112	; 0x70
  4115f6:	4d88      	ldr	r5, [pc, #544]	; (411818 <lv_draw_rect+0x1d3c>)
  4115f8:	47a8      	blx	r5
  4115fa:	f7ff b84e 	b.w	41069a <lv_draw_rect+0xbbe>
        draw_area.x1 -= disp_area->x1;
  4115fe:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  411602:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
  411606:	1a5b      	subs	r3, r3, r1
  411608:	b29a      	uxth	r2, r3
  41160a:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        draw_area.y1 -= disp_area->y1;
  41160e:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  411612:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
  411616:	1a1b      	subs	r3, r3, r0
  411618:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        draw_area.x2 -= disp_area->x1;
  41161c:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
  411620:	1a5b      	subs	r3, r3, r1
  411622:	b29b      	uxth	r3, r3
  411624:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        draw_area.y2 -= disp_area->y1;
  411628:	f8bd 107e 	ldrh.w	r1, [sp, #126]	; 0x7e
  41162c:	1a09      	subs	r1, r1, r0
  41162e:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411632:	3301      	adds	r3, #1
  411634:	1a9b      	subs	r3, r3, r2
  411636:	b21b      	sxth	r3, r3
  411638:	9305      	str	r3, [sp, #20]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  41163a:	9307      	str	r3, [sp, #28]
  41163c:	4618      	mov	r0, r3
  41163e:	4b77      	ldr	r3, [pc, #476]	; (41181c <lv_draw_rect+0x1d40>)
  411640:	4798      	blx	r3
  411642:	4607      	mov	r7, r0
        if(rout > 0) {
  411644:	2e00      	cmp	r6, #0
  411646:	dd48      	ble.n	4116da <lv_draw_rect+0x1bfe>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
  411648:	2300      	movs	r3, #0
  41164a:	4632      	mov	r2, r6
  41164c:	9906      	ldr	r1, [sp, #24]
  41164e:	a824      	add	r0, sp, #144	; 0x90
  411650:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 41180c <lv_draw_rect+0x1d30>
  411654:	47c8      	blx	r9
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  411656:	2100      	movs	r1, #0
  411658:	a824      	add	r0, sp, #144	; 0x90
  41165a:	4b6d      	ldr	r3, [pc, #436]	; (411810 <lv_draw_rect+0x1d34>)
  41165c:	4798      	blx	r3
  41165e:	900a      	str	r0, [sp, #40]	; 0x28
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
  411660:	8a22      	ldrh	r2, [r4, #16]
  411662:	1ab2      	subs	r2, r6, r2
  411664:	2301      	movs	r3, #1
  411666:	b212      	sxth	r2, r2
  411668:	a91c      	add	r1, sp, #112	; 0x70
  41166a:	a82b      	add	r0, sp, #172	; 0xac
  41166c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 41180c <lv_draw_rect+0x1d30>
  411670:	47c8      	blx	r9
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  411672:	2100      	movs	r1, #0
  411674:	a82b      	add	r0, sp, #172	; 0xac
  411676:	4b66      	ldr	r3, [pc, #408]	; (411810 <lv_draw_rect+0x1d34>)
  411678:	4798      	blx	r3
  41167a:	900b      	str	r0, [sp, #44]	; 0x2c
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
  41167c:	f9b4 9010 	ldrsh.w	r9, [r4, #16]
  411680:	f109 39ff 	add.w	r9, r9, #4294967295
  411684:	45b1      	cmp	r9, r6
  411686:	bfb8      	it	lt
  411688:	46b1      	movlt	r9, r6
        lv_color_t color = dsc->border_color;
  41168a:	89e3      	ldrh	r3, [r4, #14]
  41168c:	f8ad 3020 	strh.w	r3, [sp, #32]
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
  411690:	7d63      	ldrb	r3, [r4, #21]
  411692:	469e      	mov	lr, r3
        fill_area.x1 = coords->x1;
  411694:	9a06      	ldr	r2, [sp, #24]
  411696:	f9b2 0000 	ldrsh.w	r0, [r2]
  41169a:	f8ad 0080 	strh.w	r0, [sp, #128]	; 0x80
        fill_area.x2 = coords->x2;
  41169e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  4116a2:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  4116a6:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
  4116aa:	f8b8 1012 	ldrh.w	r1, [r8, #18]
  4116ae:	4411      	add	r1, r2
  4116b0:	b209      	sxth	r1, r1
  4116b2:	f8ad 1082 	strh.w	r1, [sp, #130]	; 0x82
        fill_area.y2 = fill_area.y1;
  4116b6:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  4116ba:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  4116be:	2904      	cmp	r1, #4
  4116c0:	d00f      	beq.n	4116e2 <lv_draw_rect+0x1c06>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
  4116c2:	2908      	cmp	r1, #8
  4116c4:	d021      	beq.n	41170a <lv_draw_rect+0x1c2e>
        volatile bool top_only = false;
  4116c6:	2300      	movs	r3, #0
  4116c8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
        volatile bool bottom_only = false;
  4116cc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  4116d0:	2902      	cmp	r1, #2
  4116d2:	d023      	beq.n	41171c <lv_draw_rect+0x1c40>
        uint32_t buf_ofs = 0;
  4116d4:	f04f 0a00 	mov.w	sl, #0
  4116d8:	e00d      	b.n	4116f6 <lv_draw_rect+0x1c1a>
        int16_t mask_rout_id = LV_MASK_ID_INV;
  4116da:	f04f 33ff 	mov.w	r3, #4294967295
  4116de:	930a      	str	r3, [sp, #40]	; 0x28
  4116e0:	e7be      	b.n	411660 <lv_draw_rect+0x1b84>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  4116e2:	4448      	add	r0, r9
  4116e4:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
        uint32_t buf_ofs = 0;
  4116e8:	f04f 0a00 	mov.w	sl, #0
        volatile bool top_only = false;
  4116ec:	2300      	movs	r3, #0
  4116ee:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
        volatile bool bottom_only = false;
  4116f2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  4116f6:	2901      	cmp	r1, #1
  4116f8:	d02b      	beq.n	411752 <lv_draw_rect+0x1c76>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
  4116fa:	2903      	cmp	r1, #3
  4116fc:	d113      	bne.n	411726 <lv_draw_rect+0x1c4a>
            top_only = true;
  4116fe:	2301      	movs	r3, #1
  411700:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
            bottom_only = true;
  411704:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  411708:	e00d      	b.n	411726 <lv_draw_rect+0x1c4a>
            fill_area.x1 = coords->x2 - corner_size;
  41170a:	eba3 0a09 	sub.w	sl, r3, r9
  41170e:	fa0f fa8a 	sxth.w	sl, sl
  411712:	f8ad a080 	strh.w	sl, [sp, #128]	; 0x80
            buf_ofs = fill_area.x1 - coords->x1;
  411716:	ebaa 0a00 	sub.w	sl, sl, r0
  41171a:	e7e7      	b.n	4116ec <lv_draw_rect+0x1c10>
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  41171c:	2301      	movs	r3, #1
  41171e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
        uint32_t buf_ofs = 0;
  411722:	f04f 0a00 	mov.w	sl, #0
        volatile bool normal = !top_only && !bottom_only ? true : false;
  411726:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  41172a:	b9b3      	cbnz	r3, 41175a <lv_draw_rect+0x1c7e>
  41172c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
  411730:	f083 0301 	eor.w	r3, r3, #1
  411734:	f003 0301 	and.w	r3, r3, #1
  411738:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  41173c:	4616      	mov	r6, r2
  41173e:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  411742:	429a      	cmp	r2, r3
  411744:	dc55      	bgt.n	4117f2 <lv_draw_rect+0x1d16>
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
  411746:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 411830 <lv_draw_rect+0x1d54>
  41174a:	940c      	str	r4, [sp, #48]	; 0x30
  41174c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
  411750:	e031      	b.n	4117b6 <lv_draw_rect+0x1cda>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  411752:	2301      	movs	r3, #1
  411754:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  411758:	e7e5      	b.n	411726 <lv_draw_rect+0x1c4a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  41175a:	2300      	movs	r3, #0
  41175c:	e7ea      	b.n	411734 <lv_draw_rect+0x1c58>
                _lv_memset_ff(mask_buf, draw_area_w);
  41175e:	9907      	ldr	r1, [sp, #28]
  411760:	4638      	mov	r0, r7
  411762:	4b2f      	ldr	r3, [pc, #188]	; (411820 <lv_draw_rect+0x1d44>)
  411764:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  411766:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  41176a:	4432      	add	r2, r6
  41176c:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  411770:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
  411774:	4419      	add	r1, r3
  411776:	9b05      	ldr	r3, [sp, #20]
  411778:	b212      	sxth	r2, r2
  41177a:	b209      	sxth	r1, r1
  41177c:	4638      	mov	r0, r7
  41177e:	4c29      	ldr	r4, [pc, #164]	; (411824 <lv_draw_rect+0x1d48>)
  411780:	47a0      	blx	r4
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
  411782:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411784:	9302      	str	r3, [sp, #8]
  411786:	9501      	str	r5, [sp, #4]
  411788:	9000      	str	r0, [sp, #0]
  41178a:	eb07 030a 	add.w	r3, r7, sl
  41178e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  411792:	a920      	add	r1, sp, #128	; 0x80
  411794:	9804      	ldr	r0, [sp, #16]
  411796:	47d8      	blx	fp
            fill_area.y1++;
  411798:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  41179c:	3301      	adds	r3, #1
  41179e:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            fill_area.y2++;
  4117a2:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
  4117a6:	3301      	adds	r3, #1
  4117a8:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4117ac:	3601      	adds	r6, #1
  4117ae:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  4117b2:	429e      	cmp	r6, r3
  4117b4:	dc1c      	bgt.n	4117f0 <lv_draw_rect+0x1d14>
            if(normal ||
  4117b6:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
  4117ba:	2b00      	cmp	r3, #0
  4117bc:	d1cf      	bne.n	41175e <lv_draw_rect+0x1c82>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  4117be:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
            if(normal ||
  4117c2:	b13b      	cbz	r3, 4117d4 <lv_draw_rect+0x1cf8>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  4117c4:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
  4117c8:	9b06      	ldr	r3, [sp, #24]
  4117ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  4117ce:	444b      	add	r3, r9
  4117d0:	429a      	cmp	r2, r3
  4117d2:	ddc4      	ble.n	41175e <lv_draw_rect+0x1c82>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  4117d4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  4117d8:	2b00      	cmp	r3, #0
  4117da:	d0dd      	beq.n	411798 <lv_draw_rect+0x1cbc>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  4117dc:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
  4117e0:	9b06      	ldr	r3, [sp, #24]
  4117e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  4117e6:	eba3 0309 	sub.w	r3, r3, r9
  4117ea:	429a      	cmp	r2, r3
  4117ec:	dbd4      	blt.n	411798 <lv_draw_rect+0x1cbc>
  4117ee:	e7b6      	b.n	41175e <lv_draw_rect+0x1c82>
  4117f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
        lv_draw_mask_remove_id(mask_rin_id);
  4117f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4117f4:	4d0c      	ldr	r5, [pc, #48]	; (411828 <lv_draw_rect+0x1d4c>)
  4117f6:	47a8      	blx	r5
        lv_draw_mask_remove_id(mask_rout_id);
  4117f8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4117fa:	47a8      	blx	r5
        _lv_mem_buf_release(mask_buf);
  4117fc:	4638      	mov	r0, r7
  4117fe:	4b0b      	ldr	r3, [pc, #44]	; (41182c <lv_draw_rect+0x1d50>)
  411800:	4798      	blx	r3
  411802:	f7fe bf4a 	b.w	41069a <lv_draw_rect+0xbbe>
  411806:	bf00      	nop
  411808:	00414ba5 	.word	0x00414ba5
  41180c:	0040f331 	.word	0x0040f331
  411810:	0040f0e5 	.word	0x0040f0e5
  411814:	0040cd85 	.word	0x0040cd85
  411818:	0040f575 	.word	0x0040f575
  41181c:	00415cd9 	.word	0x00415cd9
  411820:	00415f51 	.word	0x00415f51
  411824:	0040f121 	.word	0x0040f121
  411828:	0040f171 	.word	0x0040f171
  41182c:	0041595d 	.word	0x0041595d
  411830:	0040a9e9 	.word	0x0040a9e9
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
  411834:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
  411838:	2600      	movs	r6, #0
  41183a:	9602      	str	r6, [sp, #8]
  41183c:	f647 4218 	movw	r2, #31768	; 0x7c18
  411840:	9201      	str	r2, [sp, #4]
  411842:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
  411846:	9200      	str	r2, [sp, #0]
  411848:	6c22      	ldr	r2, [r4, #64]	; 0x40
  41184a:	4629      	mov	r1, r5
  41184c:	a81e      	add	r0, sp, #120	; 0x78
  41184e:	4f5e      	ldr	r7, [pc, #376]	; (4119c8 <lv_draw_rect+0x1eec>)
  411850:	47b8      	blx	r7
    value_area.x1 = 0;
  411852:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
    value_area.y1 = 0;
  411856:	f8ad 6092 	strh.w	r6, [sp, #146]	; 0x92
    value_area.x2 = s.x - 1;
  41185a:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
  41185e:	3b01      	subs	r3, #1
  411860:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
    value_area.y2 = s.y - 1;
  411864:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
  411868:	3b01      	subs	r3, #1
  41186a:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
  41186e:	ab20      	add	r3, sp, #128	; 0x80
  411870:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  411874:	a924      	add	r1, sp, #144	; 0x90
  411876:	9806      	ldr	r0, [sp, #24]
  411878:	4f54      	ldr	r7, [pc, #336]	; (4119cc <lv_draw_rect+0x1ef0>)
  41187a:	47b8      	blx	r7
    value_area.x1 += p_align.x + dsc->value_ofs_x;
  41187c:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
  411880:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  411884:	441a      	add	r2, r3
  411886:	b292      	uxth	r2, r2
  411888:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
  41188c:	4413      	add	r3, r2
  41188e:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
    value_area.y1 += p_align.y + dsc->value_ofs_y;
  411892:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  411896:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
  41189a:	440b      	add	r3, r1
  41189c:	b29b      	uxth	r3, r3
  41189e:	f8bd 1092 	ldrh.w	r1, [sp, #146]	; 0x92
  4118a2:	4419      	add	r1, r3
  4118a4:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
    value_area.x2 += p_align.x + dsc->value_ofs_x;
  4118a8:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
  4118ac:	440a      	add	r2, r1
  4118ae:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
    value_area.y2 += p_align.y + dsc->value_ofs_y;
  4118b2:	f8bd 2096 	ldrh.w	r2, [sp, #150]	; 0x96
  4118b6:	4413      	add	r3, r2
  4118b8:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
    lv_draw_label_dsc_init(&label_dsc);
  4118bc:	a82b      	add	r0, sp, #172	; 0xac
  4118be:	4b44      	ldr	r3, [pc, #272]	; (4119d0 <lv_draw_rect+0x1ef4>)
  4118c0:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
  4118c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4118c4:	932d      	str	r3, [sp, #180]	; 0xb4
    label_dsc.letter_space = dsc->value_letter_space;
  4118c6:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  4118ca:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
    label_dsc.line_space = dsc->value_line_space;
  4118ce:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
  4118d2:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
    label_dsc.color = dsc->value_color;
  4118d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4118da:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
    label_dsc.opa = dsc->value_opa;
  4118de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4118e2:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
  4118e6:	9600      	str	r6, [sp, #0]
  4118e8:	462b      	mov	r3, r5
  4118ea:	aa2b      	add	r2, sp, #172	; 0xac
  4118ec:	9904      	ldr	r1, [sp, #16]
  4118ee:	a824      	add	r0, sp, #144	; 0x90
  4118f0:	4d38      	ldr	r5, [pc, #224]	; (4119d4 <lv_draw_rect+0x1ef8>)
  4118f2:	47a8      	blx	r5
  4118f4:	f7fe bed8 	b.w	4106a8 <lv_draw_rect+0xbcc>
    _lv_mem_buf_release(mask_line);
  4118f8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4118fa:	4b37      	ldr	r3, [pc, #220]	; (4119d8 <lv_draw_rect+0x1efc>)
  4118fc:	4798      	blx	r3
        for(i = 0; i < size * size; i++) {
  4118fe:	fb08 f808 	mul.w	r8, r8, r8
  411902:	f1b8 0f00 	cmp.w	r8, #0
  411906:	f77e aa9f 	ble.w	40fe48 <lv_draw_rect+0x36c>
  41190a:	9808      	ldr	r0, [sp, #32]
  41190c:	4602      	mov	r2, r0
  41190e:	1e41      	subs	r1, r0, #1
  411910:	eb00 0048 	add.w	r0, r0, r8, lsl #1
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
  411914:	f832 3b02 	ldrh.w	r3, [r2], #2
  411918:	099b      	lsrs	r3, r3, #6
  41191a:	f801 3f01 	strb.w	r3, [r1, #1]!
        for(i = 0; i < size * size; i++) {
  41191e:	4282      	cmp	r2, r0
  411920:	d1f8      	bne.n	411914 <lv_draw_rect+0x1e38>
  411922:	f7fe ba91 	b.w	40fe48 <lv_draw_rect+0x36c>
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
  411926:	f8cd 8014 	str.w	r8, [sp, #20]
  41192a:	4640      	mov	r0, r8
  41192c:	4b2b      	ldr	r3, [pc, #172]	; (4119dc <lv_draw_rect+0x1f00>)
  41192e:	4798      	blx	r3
  411930:	900a      	str	r0, [sp, #40]	; 0x28
    for(y = 0; y < size; y++) {
  411932:	f1b8 0f00 	cmp.w	r8, #0
  411936:	dddf      	ble.n	4118f8 <lv_draw_rect+0x1e1c>
  411938:	2301      	movs	r3, #1
  41193a:	9309      	str	r3, [sp, #36]	; 0x24
  41193c:	f7fe b9e2 	b.w	40fd04 <lv_draw_rect+0x228>
                if(grad_dir == LV_GRAD_DIR_HOR) {
  411940:	f1b9 0f02 	cmp.w	r9, #2
  411944:	f43f ac42 	beq.w	4111cc <lv_draw_rect+0x16f0>
                else if(other_mask_cnt != 0 || !split) {
  411948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41194a:	2b32      	cmp	r3, #50	; 0x32
  41194c:	f77f ac4b 	ble.w	4111e6 <lv_draw_rect+0x170a>
  411950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  411952:	2b00      	cmp	r3, #0
  411954:	f47f ac47 	bne.w	4111e6 <lv_draw_rect+0x170a>
            fill_area.y1++;
  411958:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  41195c:	3301      	adds	r3, #1
  41195e:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            fill_area.y2++;
  411962:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
  411966:	3301      	adds	r3, #1
  411968:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  41196c:	3601      	adds	r6, #1
  41196e:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  411972:	429e      	cmp	r6, r3
  411974:	f73f ac44 	bgt.w	411200 <lv_draw_rect+0x1724>
            int32_t y = h + vdb->area.y1;
  411978:	f9bb 4012 	ldrsh.w	r4, [fp, #18]
  41197c:	4434      	add	r4, r6
            if(y > coords_bg.y1 + rout + 1 &&
  41197e:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
  411982:	4453      	add	r3, sl
  411984:	3301      	adds	r3, #1
  411986:	429c      	cmp	r4, r3
  411988:	f77f aaec 	ble.w	410f64 <lv_draw_rect+0x1488>
               y < coords_bg.y2 - rout - 1) {
  41198c:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
  411990:	eba3 030a 	sub.w	r3, r3, sl
  411994:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
  411996:	429c      	cmp	r4, r3
  411998:	f6bf aae4 	bge.w	410f64 <lv_draw_rect+0x1488>
                if(simple_mode == false) {
  41199c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41199e:	2b00      	cmp	r3, #0
  4119a0:	f43f aabb 	beq.w	410f1a <lv_draw_rect+0x143e>
            opa2 = opa;
  4119a4:	9b05      	ldr	r3, [sp, #20]
  4119a6:	9307      	str	r3, [sp, #28]
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
  4119a8:	2501      	movs	r5, #1
  4119aa:	f7ff baf5 	b.w	410f98 <lv_draw_rect+0x14bc>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  4119ae:	2300      	movs	r3, #0
  4119b0:	f9b4 2000 	ldrsh.w	r2, [r4]
  4119b4:	9906      	ldr	r1, [sp, #24]
  4119b6:	a824      	add	r0, sp, #144	; 0x90
  4119b8:	4d09      	ldr	r5, [pc, #36]	; (4119e0 <lv_draw_rect+0x1f04>)
  4119ba:	47a8      	blx	r5
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  4119bc:	2100      	movs	r1, #0
  4119be:	a824      	add	r0, sp, #144	; 0x90
  4119c0:	4b08      	ldr	r3, [pc, #32]	; (4119e4 <lv_draw_rect+0x1f08>)
  4119c2:	4798      	blx	r3
  4119c4:	4605      	mov	r5, r0
  4119c6:	e524      	b.n	411412 <lv_draw_rect+0x1936>
  4119c8:	0041725d 	.word	0x0041725d
  4119cc:	00414c4d 	.word	0x00414c4d
  4119d0:	0040cd3d 	.word	0x0040cd3d
  4119d4:	0040cd85 	.word	0x0040cd85
  4119d8:	0041595d 	.word	0x0041595d
  4119dc:	00415cd9 	.word	0x00415cd9
  4119e0:	0040f331 	.word	0x0040f331
  4119e4:	0040f0e5 	.word	0x0040f0e5

004119e8 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
  4119e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4119ea:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
  4119ec:	2400      	movs	r4, #0
  4119ee:	f8ad 4004 	strh.w	r4, [sp, #4]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  4119f2:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
  4119f4:	7804      	ldrb	r4, [r0, #0]
  4119f6:	f004 041f 	and.w	r4, r4, #31
  4119fa:	1f25      	subs	r5, r4, #4
  4119fc:	b2ed      	uxtb	r5, r5
  4119fe:	2d02      	cmp	r5, #2
  411a00:	d90e      	bls.n	411a20 <lv_img_buf_get_px_color+0x38>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
  411a02:	2c07      	cmp	r4, #7
  411a04:	d028      	beq.n	411a58 <lv_img_buf_get_px_color+0x70>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
  411a06:	2c08      	cmp	r4, #8
  411a08:	d03b      	beq.n	411a82 <lv_img_buf_get_px_color+0x9a>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
  411a0a:	2c09      	cmp	r4, #9
  411a0c:	d050      	beq.n	411ab0 <lv_img_buf_get_px_color+0xc8>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  411a0e:	2c0a      	cmp	r4, #10
  411a10:	d066      	beq.n	411ae0 <lv_img_buf_get_px_color+0xf8>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  411a12:	3c0b      	subs	r4, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  411a14:	b2e4      	uxtb	r4, r4
  411a16:	2c03      	cmp	r4, #3
        p_color = color;
  411a18:	bf98      	it	ls
  411a1a:	f8ad 3004 	strhls.w	r3, [sp, #4]
  411a1e:	e017      	b.n	411a50 <lv_img_buf_get_px_color+0x68>
  411a20:	4617      	mov	r7, r2
  411a22:	460d      	mov	r5, r1
  411a24:	4604      	mov	r4, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
  411a26:	7800      	ldrb	r0, [r0, #0]
  411a28:	f000 001f 	and.w	r0, r0, #31
  411a2c:	4b32      	ldr	r3, [pc, #200]	; (411af8 <lv_img_buf_get_px_color+0x110>)
  411a2e:	4798      	blx	r3
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
  411a30:	6823      	ldr	r3, [r4, #0]
  411a32:	f3c3 238a 	ubfx	r3, r3, #10, #11
  411a36:	fb07 5203 	mla	r2, r7, r3, r5
  411a3a:	f3c0 00c7 	ubfx	r0, r0, #3, #8
  411a3e:	fb00 f202 	mul.w	r2, r0, r2
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
  411a42:	18b3      	adds	r3, r6, r2
        *d8 = *s8;
  411a44:	5cb2      	ldrb	r2, [r6, r2]
  411a46:	f88d 2004 	strb.w	r2, [sp, #4]
  411a4a:	785b      	ldrb	r3, [r3, #1]
  411a4c:	f88d 3005 	strb.w	r3, [sp, #5]
    }
    return p_color;
}
  411a50:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  411a54:	b003      	add	sp, #12
  411a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  411a58:	f001 0307 	and.w	r3, r1, #7
  411a5c:	f1c3 0407 	rsb	r4, r3, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
  411a60:	6803      	ldr	r3, [r0, #0]
  411a62:	f3c3 238a 	ubfx	r3, r3, #10, #11
  411a66:	3307      	adds	r3, #7
  411a68:	10db      	asrs	r3, r3, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  411a6a:	fb02 6603 	mla	r6, r2, r3, r6
  411a6e:	eb06 01e1 	add.w	r1, r6, r1, asr #3
  411a72:	7a0b      	ldrb	r3, [r1, #8]
  411a74:	2201      	movs	r2, #1
  411a76:	40a2      	lsls	r2, r4
  411a78:	4013      	ands	r3, r2
  411a7a:	4123      	asrs	r3, r4
  411a7c:	f8ad 3004 	strh.w	r3, [sp, #4]
  411a80:	e7e6      	b.n	411a50 <lv_img_buf_get_px_color+0x68>
        uint8_t bit = (x & 0x3) * 2;
  411a82:	f001 0403 	and.w	r4, r1, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  411a86:	0064      	lsls	r4, r4, #1
  411a88:	f1c4 0406 	rsb	r4, r4, #6
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
  411a8c:	6803      	ldr	r3, [r0, #0]
  411a8e:	f3c3 238a 	ubfx	r3, r3, #10, #11
  411a92:	3303      	adds	r3, #3
  411a94:	109b      	asrs	r3, r3, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  411a96:	fb02 6603 	mla	r6, r2, r3, r6
  411a9a:	eb06 01a1 	add.w	r1, r6, r1, asr #2
  411a9e:	7c0b      	ldrb	r3, [r1, #16]
  411aa0:	2203      	movs	r2, #3
  411aa2:	40a2      	lsls	r2, r4
  411aa4:	4013      	ands	r3, r2
  411aa6:	fa43 f404 	asr.w	r4, r3, r4
  411aaa:	f8ad 4004 	strh.w	r4, [sp, #4]
  411aae:	e7cf      	b.n	411a50 <lv_img_buf_get_px_color+0x68>
        uint8_t bit = (x & 0x1) * 4;
  411ab0:	f001 0401 	and.w	r4, r1, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  411ab4:	00a4      	lsls	r4, r4, #2
  411ab6:	f1c4 0404 	rsb	r4, r4, #4
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
  411aba:	6803      	ldr	r3, [r0, #0]
  411abc:	f3c3 238a 	ubfx	r3, r3, #10, #11
  411ac0:	3301      	adds	r3, #1
  411ac2:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  411ac4:	fb02 6603 	mla	r6, r2, r3, r6
  411ac8:	eb06 0161 	add.w	r1, r6, r1, asr #1
  411acc:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
  411ad0:	220f      	movs	r2, #15
  411ad2:	40a2      	lsls	r2, r4
  411ad4:	4013      	ands	r3, r2
  411ad6:	fa43 f404 	asr.w	r4, r3, r4
  411ada:	f8ad 4004 	strh.w	r4, [sp, #4]
  411ade:	e7b7      	b.n	411a50 <lv_img_buf_get_px_color+0x68>
        uint32_t px  = dsc->header.w * y + x;
  411ae0:	6803      	ldr	r3, [r0, #0]
  411ae2:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = buf_u8[px];
  411ae6:	4431      	add	r1, r6
  411ae8:	fb02 1603 	mla	r6, r2, r3, r1
  411aec:	f896 3400 	ldrb.w	r3, [r6, #1024]	; 0x400
  411af0:	f8ad 3004 	strh.w	r3, [sp, #4]
  411af4:	e7ac      	b.n	411a50 <lv_img_buf_get_px_color+0x68>
  411af6:	bf00      	nop
  411af8:	0040ca59 	.word	0x0040ca59

00411afc <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
  411afc:	b5f0      	push	{r4, r5, r6, r7, lr}
  411afe:	b085      	sub	sp, #20
  411b00:	4604      	mov	r4, r0
  411b02:	460d      	mov	r5, r1
  411b04:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  411b06:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
  411b08:	7803      	ldrb	r3, [r0, #0]
  411b0a:	f003 031f 	and.w	r3, r3, #31
  411b0e:	2b05      	cmp	r3, #5
  411b10:	d00a      	beq.n	411b28 <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
  411b12:	2b0b      	cmp	r3, #11
  411b14:	d012      	beq.n	411b3c <lv_img_buf_get_px_alpha+0x40>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
  411b16:	2b0c      	cmp	r3, #12
  411b18:	d027      	beq.n	411b6a <lv_img_buf_get_px_alpha+0x6e>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
  411b1a:	2b0d      	cmp	r3, #13
  411b1c:	d049      	beq.n	411bb2 <lv_img_buf_get_px_alpha+0xb6>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  411b1e:	2b0e      	cmp	r3, #14
  411b20:	d064      	beq.n	411bec <lv_img_buf_get_px_alpha+0xf0>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
  411b22:	20ff      	movs	r0, #255	; 0xff
}
  411b24:	b005      	add	sp, #20
  411b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
  411b28:	6802      	ldr	r2, [r0, #0]
  411b2a:	f3c2 228a 	ubfx	r2, r2, #10, #11
  411b2e:	fb07 1502 	mla	r5, r7, r2, r1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  411b32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  411b36:	4435      	add	r5, r6
  411b38:	78a8      	ldrb	r0, [r5, #2]
  411b3a:	e7f3      	b.n	411b24 <lv_img_buf_get_px_alpha+0x28>
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  411b3c:	f001 0307 	and.w	r3, r1, #7
  411b40:	f1c3 0107 	rsb	r1, r3, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
  411b44:	6802      	ldr	r2, [r0, #0]
  411b46:	f3c2 228a 	ubfx	r2, r2, #10, #11
  411b4a:	3207      	adds	r2, #7
  411b4c:	10d2      	asrs	r2, r2, #3
  411b4e:	10ed      	asrs	r5, r5, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  411b50:	fb07 6202 	mla	r2, r7, r2, r6
  411b54:	5d53      	ldrb	r3, [r2, r5]
  411b56:	2201      	movs	r2, #1
  411b58:	408a      	lsls	r2, r1
  411b5a:	4013      	ands	r3, r2
  411b5c:	410b      	asrs	r3, r1
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
  411b5e:	f013 0fff 	tst.w	r3, #255	; 0xff
  411b62:	bf0c      	ite	eq
  411b64:	20ff      	moveq	r0, #255	; 0xff
  411b66:	2000      	movne	r0, #0
  411b68:	e7dc      	b.n	411b24 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  411b6a:	2300      	movs	r3, #0
  411b6c:	f88d 3000 	strb.w	r3, [sp]
  411b70:	2355      	movs	r3, #85	; 0x55
  411b72:	f88d 3001 	strb.w	r3, [sp, #1]
  411b76:	23aa      	movs	r3, #170	; 0xaa
  411b78:	f88d 3002 	strb.w	r3, [sp, #2]
  411b7c:	23ff      	movs	r3, #255	; 0xff
  411b7e:	f88d 3003 	strb.w	r3, [sp, #3]
        uint8_t bit = (x & 0x3) * 2;
  411b82:	f001 0303 	and.w	r3, r1, #3
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  411b86:	005b      	lsls	r3, r3, #1
  411b88:	f1c3 0106 	rsb	r1, r3, #6
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
  411b8c:	6802      	ldr	r2, [r0, #0]
  411b8e:	f3c2 228a 	ubfx	r2, r2, #10, #11
  411b92:	3203      	adds	r2, #3
  411b94:	1092      	asrs	r2, r2, #2
  411b96:	10ad      	asrs	r5, r5, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  411b98:	fb07 6202 	mla	r2, r7, r2, r6
  411b9c:	5d53      	ldrb	r3, [r2, r5]
  411b9e:	2203      	movs	r2, #3
  411ba0:	408a      	lsls	r2, r1
  411ba2:	4013      	ands	r3, r2
  411ba4:	410b      	asrs	r3, r1
        return opa_table[px_opa];
  411ba6:	aa04      	add	r2, sp, #16
  411ba8:	fa52 f383 	uxtab	r3, r2, r3
  411bac:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  411bb0:	e7b8      	b.n	411b24 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
  411bb2:	4b12      	ldr	r3, [pc, #72]	; (411bfc <lv_img_buf_get_px_alpha+0x100>)
  411bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  411bb6:	f10d 0e10 	add.w	lr, sp, #16
  411bba:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
  411bbe:	f005 0301 	and.w	r3, r5, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  411bc2:	009b      	lsls	r3, r3, #2
  411bc4:	f1c3 0104 	rsb	r1, r3, #4
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
  411bc8:	6822      	ldr	r2, [r4, #0]
  411bca:	f3c2 228a 	ubfx	r2, r2, #10, #11
  411bce:	3201      	adds	r2, #1
  411bd0:	1052      	asrs	r2, r2, #1
  411bd2:	106d      	asrs	r5, r5, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  411bd4:	fb07 6202 	mla	r2, r7, r2, r6
  411bd8:	5d53      	ldrb	r3, [r2, r5]
  411bda:	220f      	movs	r2, #15
  411bdc:	408a      	lsls	r2, r1
  411bde:	4013      	ands	r3, r2
  411be0:	410b      	asrs	r3, r1
        return opa_table[px_opa];
  411be2:	fa5e f383 	uxtab	r3, lr, r3
  411be6:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  411bea:	e79b      	b.n	411b24 <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
  411bec:	6802      	ldr	r2, [r0, #0]
  411bee:	f3c2 228a 	ubfx	r2, r2, #10, #11
        return buf_u8[px];
  411bf2:	fb07 6202 	mla	r2, r7, r2, r6
  411bf6:	5c50      	ldrb	r0, [r2, r1]
  411bf8:	e794      	b.n	411b24 <lv_img_buf_get_px_alpha+0x28>
  411bfa:	bf00      	nop
  411bfc:	00425bd8 	.word	0x00425bd8

00411c00 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
  411c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411c04:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
  411c06:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  411c0a:	021b      	lsls	r3, r3, #8
  411c0c:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
  411c0e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  411c12:	021b      	lsls	r3, r3, #8
  411c14:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
  411c16:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  411c1a:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 411d14 <_lv_img_buf_transform_init+0x114>
  411c1e:	fb88 2300 	smull	r2, r3, r8, r0
  411c22:	17c5      	asrs	r5, r0, #31
  411c24:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
  411c28:	b22d      	sxth	r5, r5
    int32_t angle_high = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
  411c2a:	f06f 0909 	mvn.w	r9, #9
  411c2e:	fb09 0905 	mla	r9, r9, r5, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
  411c32:	b2ae      	uxth	r6, r5
  411c34:	4270      	negs	r0, r6
  411c36:	b200      	sxth	r0, r0
  411c38:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 411d18 <_lv_img_buf_transform_init+0x118>
  411c3c:	47d0      	blx	sl
  411c3e:	4607      	mov	r7, r0
    int32_t angle_high = angle_low + 1;
  411c40:	3501      	adds	r5, #1
    int32_t s2 = _lv_trigo_sin(-angle_high);
  411c42:	b2ad      	uxth	r5, r5
  411c44:	4268      	negs	r0, r5
  411c46:	b200      	sxth	r0, r0
  411c48:	47d0      	blx	sl
  411c4a:	4683      	mov	fp, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
  411c4c:	f1c6 005a 	rsb	r0, r6, #90	; 0x5a
  411c50:	b200      	sxth	r0, r0
  411c52:	47d0      	blx	sl
  411c54:	4606      	mov	r6, r0
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
  411c56:	f1c5 005a 	rsb	r0, r5, #90	; 0x5a
  411c5a:	b200      	sxth	r0, r0
  411c5c:	47d0      	blx	sl

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  411c5e:	f1c9 020a 	rsb	r2, r9, #10
  411c62:	fb09 f30b 	mul.w	r3, r9, fp
  411c66:	fb02 3307 	mla	r3, r2, r7, r3
  411c6a:	fb88 5103 	smull	r5, r1, r8, r3
  411c6e:	17db      	asrs	r3, r3, #31
  411c70:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  411c74:	115b      	asrs	r3, r3, #5
  411c76:	62e3      	str	r3, [r4, #44]	; 0x2c
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  411c78:	fb09 f000 	mul.w	r0, r9, r0
  411c7c:	fb02 0006 	mla	r0, r2, r6, r0
  411c80:	fb88 3800 	smull	r3, r8, r8, r0
  411c84:	17c0      	asrs	r0, r0, #31
  411c86:	ebc0 00a8 	rsb	r0, r0, r8, asr #2
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  411c8a:	1140      	asrs	r0, r0, #5
  411c8c:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
  411c8e:	7ca0      	ldrb	r0, [r4, #18]
  411c90:	4b1e      	ldr	r3, [pc, #120]	; (411d0c <_lv_img_buf_transform_init+0x10c>)
  411c92:	4798      	blx	r3
  411c94:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411c98:	f360 0300 	bfi	r3, r0, #0, #1
  411c9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
  411ca0:	7ca0      	ldrb	r0, [r4, #18]
  411ca2:	4b1b      	ldr	r3, [pc, #108]	; (411d10 <_lv_img_buf_transform_init+0x110>)
  411ca4:	4798      	blx	r3
  411ca6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411caa:	f360 0341 	bfi	r3, r0, #1, #1
  411cae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  411cb2:	7ca2      	ldrb	r2, [r4, #18]
  411cb4:	1f13      	subs	r3, r2, #4
  411cb6:	b2db      	uxtb	r3, r3
  411cb8:	2b02      	cmp	r3, #2
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
  411cba:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411cbe:	bf94      	ite	ls
  411cc0:	f043 0304 	orrls.w	r3, r3, #4
    }
    else {
        dsc->tmp.native_color = 0;
  411cc4:	f36f 0382 	bfchi	r3, #2, #1
  411cc8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
  411ccc:	6823      	ldr	r3, [r4, #0]
  411cce:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
  411cd0:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
  411cd2:	f003 031f 	and.w	r3, r3, #31
  411cd6:	f362 0304 	bfi	r3, r2, #0, #5
  411cda:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
  411cdc:	69a3      	ldr	r3, [r4, #24]
  411cde:	88a2      	ldrh	r2, [r4, #4]
  411ce0:	f362 2394 	bfi	r3, r2, #10, #11
  411ce4:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
  411ce6:	0c1b      	lsrs	r3, r3, #16
  411ce8:	88e2      	ldrh	r2, [r4, #6]
  411cea:	f362 134f 	bfi	r3, r2, #5, #11
  411cee:	8363      	strh	r3, [r4, #26]

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
  411cf0:	89e2      	ldrh	r2, [r4, #14]
  411cf2:	0853      	lsrs	r3, r2, #1
  411cf4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  411cf8:	fb93 f3f2 	sdiv	r3, r3, r2
  411cfc:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
  411cfe:	23ff      	movs	r3, #255	; 0xff
  411d00:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
  411d02:	8a23      	ldrh	r3, [r4, #16]
  411d04:	82a3      	strh	r3, [r4, #20]
  411d06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411d0a:	bf00      	nop
  411d0c:	0040ca8b 	.word	0x0040ca8b
  411d10:	0040ca9f 	.word	0x0040ca9f
  411d14:	66666667 	.word	0x66666667
  411d18:	00415699 	.word	0x00415699

00411d1c <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
  411d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411d20:	b083      	sub	sp, #12
  411d22:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  411d26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
  411d28:	461f      	mov	r7, r3
  411d2a:	b95b      	cbnz	r3, 411d44 <_lv_img_buf_get_transformed_area+0x28>
  411d2c:	f5be 7f80 	cmp.w	lr, #256	; 0x100
  411d30:	d108      	bne.n	411d44 <_lv_img_buf_get_transformed_area+0x28>
        res->x1 = 0;
  411d32:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
  411d34:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
  411d36:	3901      	subs	r1, #1
  411d38:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
  411d3a:	3a01      	subs	r2, #1
  411d3c:	80c2      	strh	r2, [r0, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
  411d3e:	b003      	add	sp, #12
  411d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
  411d44:	f9b5 6000 	ldrsh.w	r6, [r5]
  411d48:	4276      	negs	r6, r6
  411d4a:	fb0e f606 	mul.w	r6, lr, r6
  411d4e:	1236      	asrs	r6, r6, #8
  411d50:	3e01      	subs	r6, #1
  411d52:	b2b6      	uxth	r6, r6
  411d54:	8006      	strh	r6, [r0, #0]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
  411d56:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  411d5a:	4264      	negs	r4, r4
  411d5c:	fb0e f404 	mul.w	r4, lr, r4
  411d60:	1224      	asrs	r4, r4, #8
  411d62:	3c01      	subs	r4, #1
  411d64:	b2a4      	uxth	r4, r4
  411d66:	8044      	strh	r4, [r0, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
  411d68:	f9b5 3000 	ldrsh.w	r3, [r5]
  411d6c:	1ac9      	subs	r1, r1, r3
  411d6e:	fb0e f101 	mul.w	r1, lr, r1
  411d72:	1209      	asrs	r1, r1, #8
  411d74:	3102      	adds	r1, #2
  411d76:	b289      	uxth	r1, r1
  411d78:	8081      	strh	r1, [r0, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
  411d7a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  411d7e:	1ad3      	subs	r3, r2, r3
  411d80:	fb0e f303 	mul.w	r3, lr, r3
  411d84:	121b      	asrs	r3, r3, #8
  411d86:	3302      	adds	r3, #2
  411d88:	b29b      	uxth	r3, r3
  411d8a:	80c3      	strh	r3, [r0, #6]
    if(angle == 0) {
  411d8c:	b967      	cbnz	r7, 411da8 <_lv_img_buf_get_transformed_area+0x8c>
        res->x1 += pivot->x;
  411d8e:	882a      	ldrh	r2, [r5, #0]
  411d90:	4416      	add	r6, r2
  411d92:	8006      	strh	r6, [r0, #0]
        res->y1 += pivot->y;
  411d94:	886a      	ldrh	r2, [r5, #2]
  411d96:	4414      	add	r4, r2
  411d98:	8044      	strh	r4, [r0, #2]
        res->x2 += pivot->x;
  411d9a:	882a      	ldrh	r2, [r5, #0]
  411d9c:	4411      	add	r1, r2
  411d9e:	8081      	strh	r1, [r0, #4]
        res->y2 += pivot->y;
  411da0:	886a      	ldrh	r2, [r5, #2]
  411da2:	4413      	add	r3, r2
  411da4:	80c3      	strh	r3, [r0, #6]
        return;
  411da6:	e7ca      	b.n	411d3e <_lv_img_buf_get_transformed_area+0x22>
  411da8:	4604      	mov	r4, r0
    int32_t angle_low = angle / 10;
  411daa:	f8df 8148 	ldr.w	r8, [pc, #328]	; 411ef4 <_lv_img_buf_get_transformed_area+0x1d8>
  411dae:	fb88 3007 	smull	r3, r0, r8, r7
  411db2:	17fe      	asrs	r6, r7, #31
  411db4:	ebc6 06a0 	rsb	r6, r6, r0, asr #2
  411db8:	b236      	sxth	r6, r6
    int32_t angle_high = angle_low + 1;
  411dba:	f106 0a01 	add.w	sl, r6, #1
    int32_t angle_rem = angle  - (angle_low * 10);
  411dbe:	f06f 0009 	mvn.w	r0, #9
  411dc2:	fb00 7706 	mla	r7, r0, r6, r7
    int32_t s1 = _lv_trigo_sin(angle_low);
  411dc6:	4630      	mov	r0, r6
  411dc8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 411ef8 <_lv_img_buf_get_transformed_area+0x1dc>
  411dcc:	47c8      	blx	r9
  411dce:	9001      	str	r0, [sp, #4]
    int32_t s2 = _lv_trigo_sin(angle_high);
  411dd0:	fa0f f08a 	sxth.w	r0, sl
  411dd4:	47c8      	blx	r9
  411dd6:	4683      	mov	fp, r0
    int32_t c1 = _lv_trigo_sin(angle_low + 90);
  411dd8:	f106 005a 	add.w	r0, r6, #90	; 0x5a
  411ddc:	b200      	sxth	r0, r0
  411dde:	47c8      	blx	r9
  411de0:	4606      	mov	r6, r0
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
  411de2:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
  411de6:	b200      	sxth	r0, r0
  411de8:	47c8      	blx	r9
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  411dea:	f1c7 020a 	rsb	r2, r7, #10
  411dee:	fb07 fb0b 	mul.w	fp, r7, fp
  411df2:	9b01      	ldr	r3, [sp, #4]
  411df4:	fb02 bb03 	mla	fp, r2, r3, fp
  411df8:	fb88 310b 	smull	r3, r1, r8, fp
  411dfc:	ea4f 73eb 	mov.w	r3, fp, asr #31
  411e00:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  411e04:	fb07 f000 	mul.w	r0, r7, r0
  411e08:	fb02 0606 	mla	r6, r2, r6, r0
  411e0c:	fb88 2806 	smull	r2, r8, r8, r6
  411e10:	17f6      	asrs	r6, r6, #31
  411e12:	ebc6 08a8 	rsb	r8, r6, r8, asr #2
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  411e16:	115b      	asrs	r3, r3, #5
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  411e18:	ea4f 1868 	mov.w	r8, r8, asr #5
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  411e1c:	f9b4 1000 	ldrsh.w	r1, [r4]
  411e20:	fb01 fe08 	mul.w	lr, r1, r8
  411e24:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  411e28:	fb00 fc03 	mul.w	ip, r0, r3
  411e2c:	882f      	ldrh	r7, [r5, #0]
  411e2e:	ebae 060c 	sub.w	r6, lr, ip
  411e32:	eb07 26a6 	add.w	r6, r7, r6, asr #10
  411e36:	b236      	sxth	r6, r6
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  411e38:	fb01 f103 	mul.w	r1, r1, r3
  411e3c:	fb00 f008 	mul.w	r0, r0, r8
  411e40:	886d      	ldrh	r5, [r5, #2]
  411e42:	180a      	adds	r2, r1, r0
  411e44:	eb05 22a2 	add.w	r2, r5, r2, asr #10
  411e48:	b212      	sxth	r2, r2
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  411e4a:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
  411e4e:	fb09 fb08 	mul.w	fp, r9, r8
  411e52:	ebab 0c0c 	sub.w	ip, fp, ip
  411e56:	eb07 2cac 	add.w	ip, r7, ip, asr #10
  411e5a:	fa0f fc8c 	sxth.w	ip, ip
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  411e5e:	fb09 f903 	mul.w	r9, r9, r3
  411e62:	4448      	add	r0, r9
  411e64:	eb05 20a0 	add.w	r0, r5, r0, asr #10
  411e68:	b200      	sxth	r0, r0
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  411e6a:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
  411e6e:	fb0a f303 	mul.w	r3, sl, r3
  411e72:	ebae 0e03 	sub.w	lr, lr, r3
  411e76:	eb07 2eae 	add.w	lr, r7, lr, asr #10
  411e7a:	fa0f fe8e 	sxth.w	lr, lr
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  411e7e:	fb0a f808 	mul.w	r8, sl, r8
  411e82:	4441      	add	r1, r8
  411e84:	eb05 21a1 	add.w	r1, r5, r1, asr #10
  411e88:	b209      	sxth	r1, r1
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  411e8a:	ebab 0303 	sub.w	r3, fp, r3
  411e8e:	eb07 27a3 	add.w	r7, r7, r3, asr #10
  411e92:	b23f      	sxth	r7, r7
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  411e94:	44c8      	add	r8, r9
  411e96:	eb05 25a8 	add.w	r5, r5, r8, asr #10
  411e9a:	b22d      	sxth	r5, r5
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
  411e9c:	4633      	mov	r3, r6
  411e9e:	4566      	cmp	r6, ip
  411ea0:	bfa8      	it	ge
  411ea2:	4663      	movge	r3, ip
  411ea4:	4573      	cmp	r3, lr
  411ea6:	bfa8      	it	ge
  411ea8:	4673      	movge	r3, lr
  411eaa:	42bb      	cmp	r3, r7
  411eac:	bfa8      	it	ge
  411eae:	463b      	movge	r3, r7
  411eb0:	8023      	strh	r3, [r4, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
  411eb2:	4566      	cmp	r6, ip
  411eb4:	bfb8      	it	lt
  411eb6:	4666      	movlt	r6, ip
  411eb8:	45b6      	cmp	lr, r6
  411eba:	bfb8      	it	lt
  411ebc:	46b6      	movlt	lr, r6
  411ebe:	4577      	cmp	r7, lr
  411ec0:	bfb8      	it	lt
  411ec2:	4677      	movlt	r7, lr
  411ec4:	80a7      	strh	r7, [r4, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
  411ec6:	4613      	mov	r3, r2
  411ec8:	4282      	cmp	r2, r0
  411eca:	bfa8      	it	ge
  411ecc:	4603      	movge	r3, r0
  411ece:	428b      	cmp	r3, r1
  411ed0:	bfa8      	it	ge
  411ed2:	460b      	movge	r3, r1
  411ed4:	42ab      	cmp	r3, r5
  411ed6:	bfa8      	it	ge
  411ed8:	462b      	movge	r3, r5
  411eda:	8063      	strh	r3, [r4, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
  411edc:	4282      	cmp	r2, r0
  411ede:	bfb8      	it	lt
  411ee0:	4602      	movlt	r2, r0
  411ee2:	4291      	cmp	r1, r2
  411ee4:	bfb8      	it	lt
  411ee6:	4611      	movlt	r1, r2
  411ee8:	428d      	cmp	r5, r1
  411eea:	bfb8      	it	lt
  411eec:	460d      	movlt	r5, r1
  411eee:	80e5      	strh	r5, [r4, #6]
  411ef0:	e725      	b.n	411d3e <_lv_img_buf_get_transformed_area+0x22>
  411ef2:	bf00      	nop
  411ef4:	66666667 	.word	0x66666667
  411ef8:	00415699 	.word	0x00415699

00411efc <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
  411efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411f00:	b087      	sub	sp, #28
  411f02:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;
  411f04:	6800      	ldr	r0, [r0, #0]

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
  411f06:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
  411f0a:	b2eb      	uxtb	r3, r5
    int ys_fract = dsc->tmp.ys & 0xff;
  411f0c:	f9b4 603e 	ldrsh.w	r6, [r4, #62]	; 0x3e
  411f10:	b2f2      	uxtb	r2, r6
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
  411f12:	2b6f      	cmp	r3, #111	; 0x6f
  411f14:	dc6b      	bgt.n	411fee <_lv_img_buf_transform_anti_alias+0xf2>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  411f16:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
  411f1a:	425b      	negs	r3, r3
  411f1c:	17db      	asrs	r3, r3, #31
        xr = xs_fract + 0x80;
  411f1e:	3d80      	subs	r5, #128	; 0x80
  411f20:	b2ed      	uxtb	r5, r5
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
  411f22:	2a6f      	cmp	r2, #111	; 0x6f
  411f24:	dc75      	bgt.n	412012 <_lv_img_buf_transform_anti_alias+0x116>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  411f26:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
  411f2a:	427f      	negs	r7, r7
  411f2c:	17ff      	asrs	r7, r7, #31

        yr = ys_fract + 0x80;
  411f2e:	3e80      	subs	r6, #128	; 0x80
  411f30:	b2f6      	uxtb	r6, r6
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
  411f32:	f8b4 8014 	ldrh.w	r8, [r4, #20]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
  411f36:	f894 9016 	ldrb.w	r9, [r4, #22]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
  411f3a:	f894 e034 	ldrb.w	lr, [r4, #52]	; 0x34
  411f3e:	f01e 0f04 	tst.w	lr, #4
  411f42:	d078      	beq.n	412036 <_lv_img_buf_transform_anti_alias+0x13a>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
  411f44:	6c62      	ldr	r2, [r4, #68]	; 0x44
  411f46:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
  411f4a:	fb01 2303 	mla	r3, r1, r3, r2
  411f4e:	eb00 0c03 	add.w	ip, r0, r3
  411f52:	f810 a003 	ldrb.w	sl, [r0, r3]
  411f56:	f88d a014 	strb.w	sl, [sp, #20]
  411f5a:	f89c c001 	ldrb.w	ip, [ip, #1]
  411f5e:	f88d c015 	strb.w	ip, [sp, #21]
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
  411f62:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
  411f66:	fb01 fc0c 	mul.w	ip, r1, ip
  411f6a:	fb07 f70c 	mul.w	r7, r7, ip
  411f6e:	443a      	add	r2, r7
  411f70:	eb00 0c02 	add.w	ip, r0, r2
  411f74:	f810 a002 	ldrb.w	sl, [r0, r2]
  411f78:	f88d a010 	strb.w	sl, [sp, #16]
  411f7c:	f89c c001 	ldrb.w	ip, [ip, #1]
  411f80:	f88d c011 	strb.w	ip, [sp, #17]
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
  411f84:	441f      	add	r7, r3
  411f86:	eb00 0c07 	add.w	ip, r0, r7
  411f8a:	f810 a007 	ldrb.w	sl, [r0, r7]
  411f8e:	f88d a00c 	strb.w	sl, [sp, #12]
  411f92:	f89c c001 	ldrb.w	ip, [ip, #1]
  411f96:	f88d c00d 	strb.w	ip, [sp, #13]
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
  411f9a:	f01e 0f02 	tst.w	lr, #2
  411f9e:	d07c      	beq.n	41209a <_lv_img_buf_transform_anti_alias+0x19e>
  411fa0:	3901      	subs	r1, #1
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  411fa2:	4403      	add	r3, r0
  411fa4:	f813 b001 	ldrb.w	fp, [r3, r1]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
  411fa8:	4402      	add	r2, r0
  411faa:	f812 a001 	ldrb.w	sl, [r2, r1]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  411fae:	4407      	add	r7, r0
  411fb0:	5c78      	ldrb	r0, [r7, r1]
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
  411fb2:	f1c5 03ff 	rsb	r3, r5, #255	; 0xff
  411fb6:	fb03 f10b 	mul.w	r1, r3, fp
  411fba:	fb05 1109 	mla	r1, r5, r9, r1
  411fbe:	f3c1 2107 	ubfx	r1, r1, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
  411fc2:	fb03 f300 	mul.w	r3, r3, r0
  411fc6:	fb05 330a 	mla	r3, r5, sl, r3
  411fca:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
  411fce:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
  411fd2:	fb06 f701 	mul.w	r7, r6, r1
  411fd6:	fb02 7203 	mla	r2, r2, r3, r7
  411fda:	1212      	asrs	r2, r2, #8
  411fdc:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  411fde:	2902      	cmp	r1, #2
  411fe0:	f200 80df 	bhi.w	4121a2 <_lv_img_buf_transform_anti_alias+0x2a6>
  411fe4:	2b02      	cmp	r3, #2
  411fe6:	f200 80dc 	bhi.w	4121a2 <_lv_img_buf_transform_anti_alias+0x2a6>
  411fea:	2000      	movs	r0, #0
  411fec:	e19b      	b.n	412326 <_lv_img_buf_transform_anti_alias+0x42a>
    else if(xs_fract > 0x90) {
  411fee:	2b90      	cmp	r3, #144	; 0x90
  411ff0:	dd0c      	ble.n	41200c <_lv_img_buf_transform_anti_alias+0x110>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  411ff2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
  411ff6:	3301      	adds	r3, #1
  411ff8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
  411ffc:	428b      	cmp	r3, r1
  411ffe:	bfac      	ite	ge
  412000:	2300      	movge	r3, #0
  412002:	2301      	movlt	r3, #1
        xr = (0xFF - xs_fract) + 0x80;
  412004:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
  412008:	b2ed      	uxtb	r5, r5
  41200a:	e78a      	b.n	411f22 <_lv_img_buf_transform_anti_alias+0x26>
        xr = 0xFF;
  41200c:	25ff      	movs	r5, #255	; 0xff
        xn = 0;
  41200e:	2300      	movs	r3, #0
  412010:	e787      	b.n	411f22 <_lv_img_buf_transform_anti_alias+0x26>
    else if(ys_fract > 0x90) {
  412012:	2a90      	cmp	r2, #144	; 0x90
  412014:	dd0c      	ble.n	412030 <_lv_img_buf_transform_anti_alias+0x134>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  412016:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
  41201a:	3701      	adds	r7, #1
  41201c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
  412020:	4297      	cmp	r7, r2
  412022:	bfac      	ite	ge
  412024:	2700      	movge	r7, #0
  412026:	2701      	movlt	r7, #1
        yr = (0xFF - ys_fract) + 0x80;
  412028:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
  41202c:	b2f6      	uxtb	r6, r6
  41202e:	e780      	b.n	411f32 <_lv_img_buf_transform_anti_alias+0x36>
        yr = 0xFF;
  412030:	26ff      	movs	r6, #255	; 0xff
        yn = 0;
  412032:	2700      	movs	r7, #0
  412034:	e77d      	b.n	411f32 <_lv_img_buf_transform_anti_alias+0x36>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
  412036:	f104 0218 	add.w	r2, r4, #24
  41203a:	4610      	mov	r0, r2
  41203c:	9201      	str	r2, [sp, #4]
  41203e:	b29b      	uxth	r3, r3
  412040:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  412044:	9300      	str	r3, [sp, #0]
  412046:	4419      	add	r1, r3
  412048:	8a23      	ldrh	r3, [r4, #16]
  41204a:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  41204e:	b209      	sxth	r1, r1
  412050:	4683      	mov	fp, r0
  412052:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 41234c <_lv_img_buf_transform_anti_alias+0x450>
  412056:	47d0      	blx	sl
  412058:	f8ad 0014 	strh.w	r0, [sp, #20]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
  41205c:	b2bf      	uxth	r7, r7
  41205e:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  412062:	443a      	add	r2, r7
  412064:	8a23      	ldrh	r3, [r4, #16]
  412066:	b212      	sxth	r2, r2
  412068:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  41206c:	4658      	mov	r0, fp
  41206e:	47d0      	blx	sl
  412070:	f8ad 0010 	strh.w	r0, [sp, #16]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
  412074:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  412078:	443a      	add	r2, r7
  41207a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  41207e:	9b00      	ldr	r3, [sp, #0]
  412080:	4419      	add	r1, r3
  412082:	8a23      	ldrh	r3, [r4, #16]
  412084:	b212      	sxth	r2, r2
  412086:	b209      	sxth	r1, r1
  412088:	4658      	mov	r0, fp
  41208a:	47d0      	blx	sl
  41208c:	f8ad 000c 	strh.w	r0, [sp, #12]
        if(dsc->tmp.has_alpha) {
  412090:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412094:	f013 0f02 	tst.w	r3, #2
  412098:	d157      	bne.n	41214a <_lv_img_buf_transform_anti_alias+0x24e>
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
  41209a:	23ff      	movs	r3, #255	; 0xff
  41209c:	75a3      	strb	r3, [r4, #22]
        xr1 = xr;
  41209e:	4628      	mov	r0, r5
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
  4120a0:	2d00      	cmp	r5, #0
  4120a2:	f040 809a 	bne.w	4121da <_lv_img_buf_transform_anti_alias+0x2de>
  4120a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
  4120aa:	f003 0707 	and.w	r7, r3, #7
  4120ae:	08d9      	lsrs	r1, r3, #3
  4120b0:	f89d 3015 	ldrb.w	r3, [sp, #21]
  4120b4:	f003 051f 	and.w	r5, r3, #31
  4120b8:	095b      	lsrs	r3, r3, #5
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
  4120ba:	2800      	cmp	r0, #0
  4120bc:	f040 80d5 	bne.w	41226a <_lv_img_buf_transform_anti_alias+0x36e>
  4120c0:	f89d c00c 	ldrb.w	ip, [sp, #12]
  4120c4:	f00c 0807 	and.w	r8, ip, #7
  4120c8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
  4120cc:	f89d 200d 	ldrb.w	r2, [sp, #13]
  4120d0:	f002 001f 	and.w	r0, r2, #31
  4120d4:	0952      	lsrs	r2, r2, #5
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  4120d6:	2e00      	cmp	r6, #0
  4120d8:	f000 8118 	beq.w	41230c <_lv_img_buf_transform_anti_alias+0x410>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  4120dc:	2eff      	cmp	r6, #255	; 0xff
  4120de:	f000 8125 	beq.w	41232c <_lv_img_buf_transform_anti_alias+0x430>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4120e2:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4120e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  4120ea:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
  4120ee:	fb0e f202 	mul.w	r2, lr, r2
  4120f2:	fb06 2203 	mla	r2, r6, r3, r2
  4120f6:	3280      	adds	r2, #128	; 0x80
  4120f8:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  4120fc:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  412100:	0e93      	lsrs	r3, r2, #26
    else dsc->res.color = lv_color_mix(c0, c1, yr);
  412102:	7d27      	ldrb	r7, [r4, #20]
  412104:	f363 0702 	bfi	r7, r3, #0, #3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412108:	fb0e f30c 	mul.w	r3, lr, ip
  41210c:	fb06 3301 	mla	r3, r6, r1, r3
  412110:	3380      	adds	r3, #128	; 0x80
  412112:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  412116:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41211a:	0ddb      	lsrs	r3, r3, #23
  41211c:	4639      	mov	r1, r7
  41211e:	f363 01c7 	bfi	r1, r3, #3, #5
  412122:	7521      	strb	r1, [r4, #20]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412124:	fb0e f000 	mul.w	r0, lr, r0
  412128:	fb06 0605 	mla	r6, r6, r5, r0
  41212c:	3680      	adds	r6, #128	; 0x80
  41212e:	eb06 2306 	add.w	r3, r6, r6, lsl #8
  412132:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
  412136:	0df6      	lsrs	r6, r6, #23
  412138:	7d63      	ldrb	r3, [r4, #21]
  41213a:	f366 0304 	bfi	r3, r6, #0, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41213e:	0dd2      	lsrs	r2, r2, #23
  412140:	f362 1347 	bfi	r3, r2, #5, #3
  412144:	7563      	strb	r3, [r4, #21]

    return true;
  412146:	2001      	movs	r0, #1
  412148:	e0ed      	b.n	412326 <_lv_img_buf_transform_anti_alias+0x42a>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
  41214a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  41214e:	9b00      	ldr	r3, [sp, #0]
  412150:	4419      	add	r1, r3
  412152:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  412156:	b209      	sxth	r1, r1
  412158:	f8dd a004 	ldr.w	sl, [sp, #4]
  41215c:	4650      	mov	r0, sl
  41215e:	4b7a      	ldr	r3, [pc, #488]	; (412348 <_lv_img_buf_transform_anti_alias+0x44c>)
  412160:	4798      	blx	r3
  412162:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
  412164:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  412168:	443a      	add	r2, r7
  41216a:	b212      	sxth	r2, r2
  41216c:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  412170:	f8cd a004 	str.w	sl, [sp, #4]
  412174:	4650      	mov	r0, sl
  412176:	4b74      	ldr	r3, [pc, #464]	; (412348 <_lv_img_buf_transform_anti_alias+0x44c>)
  412178:	4798      	blx	r3
  41217a:	4682      	mov	sl, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
  41217c:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  412180:	443a      	add	r2, r7
  412182:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  412186:	9b00      	ldr	r3, [sp, #0]
  412188:	4419      	add	r1, r3
  41218a:	b212      	sxth	r2, r2
  41218c:	b209      	sxth	r1, r1
  41218e:	9801      	ldr	r0, [sp, #4]
  412190:	4b6d      	ldr	r3, [pc, #436]	; (412348 <_lv_img_buf_transform_anti_alias+0x44c>)
  412192:	4798      	blx	r3
    if(dsc->tmp.has_alpha) {
  412194:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412198:	f013 0f02 	tst.w	r3, #2
  41219c:	f47f af09 	bne.w	411fb2 <_lv_img_buf_transform_anti_alias+0xb6>
  4121a0:	e77b      	b.n	41209a <_lv_img_buf_transform_anti_alias+0x19e>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
  4121a2:	2902      	cmp	r1, #2
  4121a4:	d914      	bls.n	4121d0 <_lv_img_buf_transform_anti_alias+0x2d4>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
  4121a6:	2b02      	cmp	r3, #2
  4121a8:	bf98      	it	ls
  4121aa:	26ff      	movls	r6, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  4121ac:	f1b9 0f02 	cmp.w	r9, #2
  4121b0:	bf8c      	ite	hi
  4121b2:	462b      	movhi	r3, r5
  4121b4:	2300      	movls	r3, #0
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
  4121b6:	f1bb 0f02 	cmp.w	fp, #2
  4121ba:	bf98      	it	ls
  4121bc:	23ff      	movls	r3, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
  4121be:	f1ba 0f02 	cmp.w	sl, #2
  4121c2:	bf98      	it	ls
  4121c4:	2500      	movls	r5, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  4121c6:	2802      	cmp	r0, #2
  4121c8:	d804      	bhi.n	4121d4 <_lv_img_buf_transform_anti_alias+0x2d8>
  4121ca:	461d      	mov	r5, r3
  4121cc:	20ff      	movs	r0, #255	; 0xff
  4121ce:	e767      	b.n	4120a0 <_lv_img_buf_transform_anti_alias+0x1a4>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
  4121d0:	2600      	movs	r6, #0
  4121d2:	e7eb      	b.n	4121ac <_lv_img_buf_transform_anti_alias+0x2b0>
  4121d4:	4628      	mov	r0, r5
  4121d6:	461d      	mov	r5, r3
  4121d8:	e762      	b.n	4120a0 <_lv_img_buf_transform_anti_alias+0x1a4>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
  4121da:	2dff      	cmp	r5, #255	; 0xff
  4121dc:	d03c      	beq.n	412258 <_lv_img_buf_transform_anti_alias+0x35c>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4121de:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  4121e2:	f3c8 03c4 	ubfx	r3, r8, #3, #5
  4121e6:	f89d 7014 	ldrb.w	r7, [sp, #20]
  4121ea:	08f9      	lsrs	r1, r7, #3
  4121ec:	fb02 f101 	mul.w	r1, r2, r1
  4121f0:	fb05 1303 	mla	r3, r5, r3, r1
  4121f4:	3380      	adds	r3, #128	; 0x80
  4121f6:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  4121fa:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  4121fe:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412202:	f008 0e07 	and.w	lr, r8, #7
  412206:	f3c8 3342 	ubfx	r3, r8, #13, #3
  41220a:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
  41220e:	f007 0c07 	and.w	ip, r7, #7
  412212:	f89d e015 	ldrb.w	lr, [sp, #21]
  412216:	ea4f 175e 	mov.w	r7, lr, lsr #5
  41221a:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
  41221e:	fb02 f707 	mul.w	r7, r2, r7
  412222:	fb05 7303 	mla	r3, r5, r3, r7
  412226:	3380      	adds	r3, #128	; 0x80
  412228:	eb03 2703 	add.w	r7, r3, r3, lsl #8
  41222c:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
  412230:	f3c3 6782 	ubfx	r7, r3, #26, #3
  412234:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412238:	f3c8 2804 	ubfx	r8, r8, #8, #5
  41223c:	f00e 0e1f 	and.w	lr, lr, #31
  412240:	fb02 f20e 	mul.w	r2, r2, lr
  412244:	fb05 2508 	mla	r5, r5, r8, r2
  412248:	3580      	adds	r5, #128	; 0x80
  41224a:	eb05 2205 	add.w	r2, r5, r5, lsl #8
  41224e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  412252:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  412256:	e730      	b.n	4120ba <_lv_img_buf_transform_anti_alias+0x1be>
  412258:	f008 0707 	and.w	r7, r8, #7
  41225c:	f3c8 01c4 	ubfx	r1, r8, #3, #5
  412260:	f3c8 2504 	ubfx	r5, r8, #8, #5
  412264:	f3c8 3342 	ubfx	r3, r8, #13, #3
  412268:	e727      	b.n	4120ba <_lv_img_buf_transform_anti_alias+0x1be>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
  41226a:	28ff      	cmp	r0, #255	; 0xff
  41226c:	d042      	beq.n	4122f4 <_lv_img_buf_transform_anti_alias+0x3f8>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41226e:	f1c0 09ff 	rsb	r9, r0, #255	; 0xff
  412272:	f89d 2010 	ldrb.w	r2, [sp, #16]
  412276:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
  41227a:	f89d 800c 	ldrb.w	r8, [sp, #12]
  41227e:	ea4f 0ed8 	mov.w	lr, r8, lsr #3
  412282:	fb09 fe0e 	mul.w	lr, r9, lr
  412286:	fb00 ec0c 	mla	ip, r0, ip, lr
  41228a:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
  41228e:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
  412292:	eb0c 1cce 	add.w	ip, ip, lr, lsl #7
  412296:	f3cc 5cc4 	ubfx	ip, ip, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41229a:	f002 0207 	and.w	r2, r2, #7
  41229e:	f89d e011 	ldrb.w	lr, [sp, #17]
  4122a2:	ea4f 1a5e 	mov.w	sl, lr, lsr #5
  4122a6:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
  4122aa:	f008 0b07 	and.w	fp, r8, #7
  4122ae:	f89d a00d 	ldrb.w	sl, [sp, #13]
  4122b2:	ea4f 185a 	mov.w	r8, sl, lsr #5
  4122b6:	eb08 08cb 	add.w	r8, r8, fp, lsl #3
  4122ba:	fb09 f808 	mul.w	r8, r9, r8
  4122be:	fb00 8202 	mla	r2, r0, r2, r8
  4122c2:	3280      	adds	r2, #128	; 0x80
  4122c4:	eb02 2802 	add.w	r8, r2, r2, lsl #8
  4122c8:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
  4122cc:	f3c2 6882 	ubfx	r8, r2, #26, #3
  4122d0:	f3c2 52c2 	ubfx	r2, r2, #23, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4122d4:	f00e 0e1f 	and.w	lr, lr, #31
  4122d8:	f00a 0a1f 	and.w	sl, sl, #31
  4122dc:	fb09 f90a 	mul.w	r9, r9, sl
  4122e0:	fb00 900e 	mla	r0, r0, lr, r9
  4122e4:	3080      	adds	r0, #128	; 0x80
  4122e6:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
  4122ea:	eb00 10ce 	add.w	r0, r0, lr, lsl #7
  4122ee:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  4122f2:	e6f0      	b.n	4120d6 <_lv_img_buf_transform_anti_alias+0x1da>
  4122f4:	f89d c010 	ldrb.w	ip, [sp, #16]
  4122f8:	f00c 0807 	and.w	r8, ip, #7
  4122fc:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
  412300:	f89d 2011 	ldrb.w	r2, [sp, #17]
  412304:	f002 001f 	and.w	r0, r2, #31
  412308:	0952      	lsrs	r2, r2, #5
  41230a:	e6e4      	b.n	4120d6 <_lv_img_buf_transform_anti_alias+0x1da>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  41230c:	7d23      	ldrb	r3, [r4, #20]
  41230e:	f368 0302 	bfi	r3, r8, #0, #3
  412312:	f36c 03c7 	bfi	r3, ip, #3, #5
  412316:	7523      	strb	r3, [r4, #20]
  412318:	7d63      	ldrb	r3, [r4, #21]
  41231a:	f360 0304 	bfi	r3, r0, #0, #5
  41231e:	f362 1347 	bfi	r3, r2, #5, #3
  412322:	7563      	strb	r3, [r4, #21]
    return true;
  412324:	2001      	movs	r0, #1
}
  412326:	b007      	add	sp, #28
  412328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  41232c:	7d22      	ldrb	r2, [r4, #20]
  41232e:	f367 0202 	bfi	r2, r7, #0, #3
  412332:	f361 02c7 	bfi	r2, r1, #3, #5
  412336:	7522      	strb	r2, [r4, #20]
  412338:	7d62      	ldrb	r2, [r4, #21]
  41233a:	f365 0204 	bfi	r2, r5, #0, #5
  41233e:	f363 1247 	bfi	r2, r3, #5, #3
  412342:	7562      	strb	r2, [r4, #21]
    return true;
  412344:	2001      	movs	r0, #1
  412346:	e7ee      	b.n	412326 <_lv_img_buf_transform_anti_alias+0x42a>
  412348:	00411afd 	.word	0x00411afd
  41234c:	004119e9 	.word	0x004119e9

00412350 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
  412350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
  412354:	4b4d      	ldr	r3, [pc, #308]	; (41248c <_lv_img_cache_open+0x13c>)
  412356:	881d      	ldrh	r5, [r3, #0]
  412358:	2d00      	cmp	r5, #0
  41235a:	f000 8095 	beq.w	412488 <_lv_img_cache_open+0x138>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  41235e:	4b4c      	ldr	r3, [pc, #304]	; (412490 <_lv_img_cache_open+0x140>)
  412360:	681e      	ldr	r6, [r3, #0]
  412362:	4633      	mov	r3, r6
  412364:	3d01      	subs	r5, #1
  412366:	b2ad      	uxth	r5, r5
  412368:	3501      	adds	r5, #1
  41236a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
  41236e:	eb06 0585 	add.w	r5, r6, r5, lsl #2

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
  412372:	4a48      	ldr	r2, [pc, #288]	; (412494 <_lv_img_cache_open+0x144>)
  412374:	e002      	b.n	41237c <_lv_img_cache_open+0x2c>
  412376:	3324      	adds	r3, #36	; 0x24
    for(i = 0; i < entry_cnt; i++) {
  412378:	42ab      	cmp	r3, r5
  41237a:	d005      	beq.n	412388 <_lv_img_cache_open+0x38>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
  41237c:	6a1c      	ldr	r4, [r3, #32]
  41237e:	4294      	cmp	r4, r2
  412380:	dbf9      	blt.n	412376 <_lv_img_cache_open+0x26>
            cache[i].life -= LV_IMG_CACHE_AGING;
  412382:	3c01      	subs	r4, #1
  412384:	621c      	str	r4, [r3, #32]
  412386:	e7f6      	b.n	412376 <_lv_img_cache_open+0x26>
  412388:	468a      	mov	sl, r1
  41238a:	4681      	mov	r9, r0
  41238c:	2400      	movs	r4, #0
        }
    }

    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
  41238e:	4f42      	ldr	r7, [pc, #264]	; (412498 <_lv_img_cache_open+0x148>)
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
        }
        else if(src_type == LV_IMG_SRC_FILE) {
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  412390:	f8df b11c 	ldr.w	fp, [pc, #284]	; 4124b0 <_lv_img_cache_open+0x160>
    for(i = 0; i < entry_cnt; i++) {
  412394:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 41248c <_lv_img_cache_open+0x13c>
  412398:	e007      	b.n	4123aa <_lv_img_cache_open+0x5a>
        else if(src_type == LV_IMG_SRC_FILE) {
  41239a:	2801      	cmp	r0, #1
  41239c:	d026      	beq.n	4123ec <_lv_img_cache_open+0x9c>
    for(i = 0; i < entry_cnt; i++) {
  41239e:	3401      	adds	r4, #1
  4123a0:	b2a4      	uxth	r4, r4
  4123a2:	f8b8 3000 	ldrh.w	r3, [r8]
  4123a6:	42a3      	cmp	r3, r4
  4123a8:	d929      	bls.n	4123fe <_lv_img_cache_open+0xae>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
  4123aa:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
  4123ae:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  4123b2:	6868      	ldr	r0, [r5, #4]
  4123b4:	47b8      	blx	r7
        if(src_type == LV_IMG_SRC_VARIABLE) {
  4123b6:	2800      	cmp	r0, #0
  4123b8:	d1ef      	bne.n	41239a <_lv_img_cache_open+0x4a>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  4123ba:	686b      	ldr	r3, [r5, #4]
  4123bc:	454b      	cmp	r3, r9
  4123be:	d1ee      	bne.n	41239e <_lv_img_cache_open+0x4e>
  4123c0:	8928      	ldrh	r0, [r5, #8]
  4123c2:	fa1f f38a 	uxth.w	r3, sl
  4123c6:	4298      	cmp	r0, r3
  4123c8:	bf14      	ite	ne
  4123ca:	2000      	movne	r0, #0
  4123cc:	2001      	moveq	r0, #1
        }

        if(match) {
  4123ce:	2800      	cmp	r0, #0
  4123d0:	d0e5      	beq.n	41239e <_lv_img_cache_open+0x4e>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
  4123d2:	6a2b      	ldr	r3, [r5, #32]
  4123d4:	696a      	ldr	r2, [r5, #20]
  4123d6:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
  4123d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4123dc:	dd0d      	ble.n	4123fa <_lv_img_cache_open+0xaa>
  4123de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4123e2:	622b      	str	r3, [r5, #32]
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src) return cached_src;
  4123e4:	b15d      	cbz	r5, 4123fe <_lv_img_cache_open+0xae>
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
  4123e6:	4628      	mov	r0, r5
  4123e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  4123ec:	4649      	mov	r1, r9
  4123ee:	6868      	ldr	r0, [r5, #4]
  4123f0:	47d8      	blx	fp
  4123f2:	fab0 f080 	clz	r0, r0
  4123f6:	0940      	lsrs	r0, r0, #5
  4123f8:	e7e9      	b.n	4123ce <_lv_img_cache_open+0x7e>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
  4123fa:	622b      	str	r3, [r5, #32]
  4123fc:	e7f2      	b.n	4123e4 <_lv_img_cache_open+0x94>
    for(i = 1; i < entry_cnt; i++) {
  4123fe:	4b23      	ldr	r3, [pc, #140]	; (41248c <_lv_img_cache_open+0x13c>)
  412400:	881a      	ldrh	r2, [r3, #0]
  412402:	2a01      	cmp	r2, #1
  412404:	d92f      	bls.n	412466 <_lv_img_cache_open+0x116>
  412406:	f106 0324 	add.w	r3, r6, #36	; 0x24
  41240a:	3a02      	subs	r2, #2
  41240c:	b292      	uxth	r2, r2
  41240e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  412412:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  412416:	3248      	adds	r2, #72	; 0x48
  412418:	4635      	mov	r5, r6
        if(cache[i].life < cached_src->life) {
  41241a:	6a18      	ldr	r0, [r3, #32]
  41241c:	6a29      	ldr	r1, [r5, #32]
            cached_src = &cache[i];
  41241e:	4288      	cmp	r0, r1
  412420:	bfb8      	it	lt
  412422:	461d      	movlt	r5, r3
  412424:	3324      	adds	r3, #36	; 0x24
    for(i = 1; i < entry_cnt; i++) {
  412426:	4293      	cmp	r3, r2
  412428:	d1f7      	bne.n	41241a <_lv_img_cache_open+0xca>
    if(cached_src->dec_dsc.src) {
  41242a:	686b      	ldr	r3, [r5, #4]
  41242c:	b113      	cbz	r3, 412434 <_lv_img_cache_open+0xe4>
        lv_img_decoder_close(&cached_src->dec_dsc);
  41242e:	4628      	mov	r0, r5
  412430:	4b1a      	ldr	r3, [pc, #104]	; (41249c <_lv_img_cache_open+0x14c>)
  412432:	4798      	blx	r3
    t_start                          = lv_tick_get();
  412434:	4b1a      	ldr	r3, [pc, #104]	; (4124a0 <_lv_img_cache_open+0x150>)
  412436:	4798      	blx	r3
  412438:	4604      	mov	r4, r0
    cached_src->dec_dsc.time_to_open = 0;
  41243a:	2300      	movs	r3, #0
  41243c:	616b      	str	r3, [r5, #20]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
  41243e:	4652      	mov	r2, sl
  412440:	4649      	mov	r1, r9
  412442:	4628      	mov	r0, r5
  412444:	4b17      	ldr	r3, [pc, #92]	; (4124a4 <_lv_img_cache_open+0x154>)
  412446:	4798      	blx	r3
    if(open_res == LV_RES_INV) {
  412448:	b178      	cbz	r0, 41246a <_lv_img_cache_open+0x11a>
    cached_src->life = 0;
  41244a:	2300      	movs	r3, #0
  41244c:	622b      	str	r3, [r5, #32]
    if(cached_src->dec_dsc.time_to_open == 0) {
  41244e:	696b      	ldr	r3, [r5, #20]
  412450:	2b00      	cmp	r3, #0
  412452:	d1c8      	bne.n	4123e6 <_lv_img_cache_open+0x96>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
  412454:	4620      	mov	r0, r4
  412456:	4b14      	ldr	r3, [pc, #80]	; (4124a8 <_lv_img_cache_open+0x158>)
  412458:	4798      	blx	r3
  41245a:	6168      	str	r0, [r5, #20]
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
  41245c:	2800      	cmp	r0, #0
  41245e:	d1c2      	bne.n	4123e6 <_lv_img_cache_open+0x96>
  412460:	2301      	movs	r3, #1
  412462:	616b      	str	r3, [r5, #20]
  412464:	e7bf      	b.n	4123e6 <_lv_img_cache_open+0x96>
    for(i = 1; i < entry_cnt; i++) {
  412466:	4635      	mov	r5, r6
  412468:	e7df      	b.n	41242a <_lv_img_cache_open+0xda>
        lv_img_decoder_close(&cached_src->dec_dsc);
  41246a:	4628      	mov	r0, r5
  41246c:	4b0b      	ldr	r3, [pc, #44]	; (41249c <_lv_img_cache_open+0x14c>)
  41246e:	4798      	blx	r3
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412470:	2120      	movs	r1, #32
  412472:	4628      	mov	r0, r5
  412474:	4c0d      	ldr	r4, [pc, #52]	; (4124ac <_lv_img_cache_open+0x15c>)
  412476:	47a0      	blx	r4
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
  412478:	2124      	movs	r1, #36	; 0x24
  41247a:	4628      	mov	r0, r5
  41247c:	47a0      	blx	r4
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
  41247e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  412482:	622b      	str	r3, [r5, #32]
        return NULL;
  412484:	2500      	movs	r5, #0
  412486:	e7ae      	b.n	4123e6 <_lv_img_cache_open+0x96>
        return NULL;
  412488:	2500      	movs	r5, #0
  41248a:	e7ac      	b.n	4123e6 <_lv_img_cache_open+0x96>
  41248c:	2040c6de 	.word	0x2040c6de
  412490:	2043a220 	.word	0x2043a220
  412494:	80000002 	.word	0x80000002
  412498:	0040ccd9 	.word	0x0040ccd9
  41249c:	00412e9d 	.word	0x00412e9d
  4124a0:	00414495 	.word	0x00414495
  4124a4:	00412dc1 	.word	0x00412dc1
  4124a8:	004144b1 	.word	0x004144b1
  4124ac:	00415ead 	.word	0x00415ead
  4124b0:	004233c9 	.word	0x004233c9

004124b4 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
  4124b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  4124b8:	4b14      	ldr	r3, [pc, #80]	; (41250c <lv_img_cache_invalidate_src+0x58>)
  4124ba:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  4124bc:	4b14      	ldr	r3, [pc, #80]	; (412510 <lv_img_cache_invalidate_src+0x5c>)
  4124be:	881b      	ldrh	r3, [r3, #0]
  4124c0:	b30b      	cbz	r3, 412506 <lv_img_cache_invalidate_src+0x52>
  4124c2:	4606      	mov	r6, r0
  4124c4:	2400      	movs	r4, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
                lv_img_decoder_close(&cache[i].dec_dsc);
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  4124c6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 412514 <lv_img_cache_invalidate_src+0x60>
                lv_img_decoder_close(&cache[i].dec_dsc);
  4124ca:	f8df a04c 	ldr.w	sl, [pc, #76]	; 412518 <lv_img_cache_invalidate_src+0x64>
    for(i = 0; i < entry_cnt; i++) {
  4124ce:	f8df 8040 	ldr.w	r8, [pc, #64]	; 412510 <lv_img_cache_invalidate_src+0x5c>
  4124d2:	e00e      	b.n	4124f2 <lv_img_cache_invalidate_src+0x3e>
            if(cache[i].dec_dsc.src != NULL) {
  4124d4:	b10b      	cbz	r3, 4124da <lv_img_cache_invalidate_src+0x26>
                lv_img_decoder_close(&cache[i].dec_dsc);
  4124d6:	4628      	mov	r0, r5
  4124d8:	47d0      	blx	sl
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  4124da:	2120      	movs	r1, #32
  4124dc:	4628      	mov	r0, r5
  4124de:	47c8      	blx	r9
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
  4124e0:	2124      	movs	r1, #36	; 0x24
  4124e2:	4628      	mov	r0, r5
  4124e4:	47c8      	blx	r9
    for(i = 0; i < entry_cnt; i++) {
  4124e6:	3401      	adds	r4, #1
  4124e8:	b2a4      	uxth	r4, r4
  4124ea:	f8b8 3000 	ldrh.w	r3, [r8]
  4124ee:	42a3      	cmp	r3, r4
  4124f0:	d909      	bls.n	412506 <lv_img_cache_invalidate_src+0x52>
        if(cache[i].dec_dsc.src == src || src == NULL) {
  4124f2:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
  4124f6:	eb07 0585 	add.w	r5, r7, r5, lsl #2
  4124fa:	686b      	ldr	r3, [r5, #4]
  4124fc:	2e00      	cmp	r6, #0
  4124fe:	d0e9      	beq.n	4124d4 <lv_img_cache_invalidate_src+0x20>
  412500:	42b3      	cmp	r3, r6
  412502:	d1f0      	bne.n	4124e6 <lv_img_cache_invalidate_src+0x32>
  412504:	e7e6      	b.n	4124d4 <lv_img_cache_invalidate_src+0x20>
  412506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41250a:	bf00      	nop
  41250c:	2043a220 	.word	0x2043a220
  412510:	2040c6de 	.word	0x2040c6de
  412514:	00415ead 	.word	0x00415ead
  412518:	00412e9d 	.word	0x00412e9d

0041251c <lv_img_cache_set_size>:
{
  41251c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412520:	4604      	mov	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
  412522:	4b1e      	ldr	r3, [pc, #120]	; (41259c <lv_img_cache_set_size+0x80>)
  412524:	681b      	ldr	r3, [r3, #0]
  412526:	b133      	cbz	r3, 412536 <lv_img_cache_set_size+0x1a>
        lv_img_cache_invalidate_src(NULL);
  412528:	2000      	movs	r0, #0
  41252a:	4b1d      	ldr	r3, [pc, #116]	; (4125a0 <lv_img_cache_set_size+0x84>)
  41252c:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
  41252e:	4b1b      	ldr	r3, [pc, #108]	; (41259c <lv_img_cache_set_size+0x80>)
  412530:	6818      	ldr	r0, [r3, #0]
  412532:	4b1c      	ldr	r3, [pc, #112]	; (4125a4 <lv_img_cache_set_size+0x88>)
  412534:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
  412536:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  41253a:	0080      	lsls	r0, r0, #2
  41253c:	4b1a      	ldr	r3, [pc, #104]	; (4125a8 <lv_img_cache_set_size+0x8c>)
  41253e:	4798      	blx	r3
  412540:	4b16      	ldr	r3, [pc, #88]	; (41259c <lv_img_cache_set_size+0x80>)
  412542:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  412544:	4b19      	ldr	r3, [pc, #100]	; (4125ac <lv_img_cache_set_size+0x90>)
  412546:	4798      	blx	r3
  412548:	b1e0      	cbz	r0, 412584 <lv_img_cache_set_size+0x68>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
  41254a:	4b14      	ldr	r3, [pc, #80]	; (41259c <lv_img_cache_set_size+0x80>)
  41254c:	681b      	ldr	r3, [r3, #0]
  41254e:	b303      	cbz	r3, 412592 <lv_img_cache_set_size+0x76>
    entry_cnt = new_entry_cnt;
  412550:	4b17      	ldr	r3, [pc, #92]	; (4125b0 <lv_img_cache_set_size+0x94>)
  412552:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
  412554:	b1a4      	cbz	r4, 412580 <lv_img_cache_set_size+0x64>
  412556:	2400      	movs	r4, #0
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412558:	4f10      	ldr	r7, [pc, #64]	; (41259c <lv_img_cache_set_size+0x80>)
  41255a:	4e16      	ldr	r6, [pc, #88]	; (4125b4 <lv_img_cache_set_size+0x98>)
    for(i = 0; i < entry_cnt; i++) {
  41255c:	4698      	mov	r8, r3
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  41255e:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
  412562:	00ad      	lsls	r5, r5, #2
  412564:	6838      	ldr	r0, [r7, #0]
  412566:	2120      	movs	r1, #32
  412568:	4428      	add	r0, r5
  41256a:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
  41256c:	6838      	ldr	r0, [r7, #0]
  41256e:	2124      	movs	r1, #36	; 0x24
  412570:	4428      	add	r0, r5
  412572:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
  412574:	3401      	adds	r4, #1
  412576:	b2a4      	uxth	r4, r4
  412578:	f8b8 3000 	ldrh.w	r3, [r8]
  41257c:	42a3      	cmp	r3, r4
  41257e:	d8ee      	bhi.n	41255e <lv_img_cache_set_size+0x42>
  412580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  412584:	4b05      	ldr	r3, [pc, #20]	; (41259c <lv_img_cache_set_size+0x80>)
  412586:	681a      	ldr	r2, [r3, #0]
  412588:	2300      	movs	r3, #0
  41258a:	480b      	ldr	r0, [pc, #44]	; (4125b8 <lv_img_cache_set_size+0x9c>)
  41258c:	490b      	ldr	r1, [pc, #44]	; (4125bc <lv_img_cache_set_size+0xa0>)
  41258e:	4788      	blx	r1
  412590:	e7fe      	b.n	412590 <lv_img_cache_set_size+0x74>
        entry_cnt = 0;
  412592:	2200      	movs	r2, #0
  412594:	4b06      	ldr	r3, [pc, #24]	; (4125b0 <lv_img_cache_set_size+0x94>)
  412596:	801a      	strh	r2, [r3, #0]
        return;
  412598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41259c:	2043a220 	.word	0x2043a220
  4125a0:	004124b5 	.word	0x004124b5
  4125a4:	004158b9 	.word	0x004158b9
  4125a8:	004157c9 	.word	0x004157c9
  4125ac:	004150ef 	.word	0x004150ef
  4125b0:	2040c6de 	.word	0x2040c6de
  4125b4:	00415ead 	.word	0x00415ead
  4125b8:	00425a60 	.word	0x00425a60
  4125bc:	004150f9 	.word	0x004150f9

004125c0 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
  4125c0:	b530      	push	{r4, r5, lr}
  4125c2:	b085      	sub	sp, #20
  4125c4:	460c      	mov	r4, r1
  4125c6:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
  4125c8:	4608      	mov	r0, r1
  4125ca:	4b2a      	ldr	r3, [pc, #168]	; (412674 <lv_img_decoder_built_in_info+0xb4>)
  4125cc:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  4125ce:	b9d8      	cbnz	r0, 412608 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
  4125d0:	7823      	ldrb	r3, [r4, #0]
  4125d2:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  4125d6:	3b04      	subs	r3, #4
  4125d8:	b2db      	uxtb	r3, r3
  4125da:	2b0a      	cmp	r3, #10
  4125dc:	d847      	bhi.n	41266e <lv_img_decoder_built_in_info+0xae>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
  4125de:	6823      	ldr	r3, [r4, #0]
  4125e0:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4125e4:	682a      	ldr	r2, [r5, #0]
  4125e6:	f363 2294 	bfi	r2, r3, #10, #11
  4125ea:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
  4125ec:	8863      	ldrh	r3, [r4, #2]
  4125ee:	f3c3 134a 	ubfx	r3, r3, #5, #11
  4125f2:	886a      	ldrh	r2, [r5, #2]
  4125f4:	f363 124f 	bfi	r2, r3, #5, #11
  4125f8:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
  4125fa:	7822      	ldrb	r2, [r4, #0]
  4125fc:	782b      	ldrb	r3, [r5, #0]
  4125fe:	f362 0304 	bfi	r3, r2, #0, #5
  412602:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
  412604:	2001      	movs	r0, #1
  412606:	e004      	b.n	412612 <lv_img_decoder_built_in_info+0x52>
    else if(src_type == LV_IMG_SRC_FILE) {
  412608:	2801      	cmp	r0, #1
  41260a:	d004      	beq.n	412616 <lv_img_decoder_built_in_info+0x56>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  41260c:	2802      	cmp	r0, #2
  41260e:	d020      	beq.n	412652 <lv_img_decoder_built_in_info+0x92>
        return LV_RES_INV;
  412610:	2000      	movs	r0, #0
}
  412612:	b005      	add	sp, #20
  412614:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
  412616:	2202      	movs	r2, #2
  412618:	4621      	mov	r1, r4
  41261a:	a802      	add	r0, sp, #8
  41261c:	4b16      	ldr	r3, [pc, #88]	; (412678 <lv_img_decoder_built_in_info+0xb8>)
  41261e:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
  412620:	b138      	cbz	r0, 412632 <lv_img_decoder_built_in_info+0x72>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  412622:	782b      	ldrb	r3, [r5, #0]
  412624:	331c      	adds	r3, #28
  412626:	f003 031f 	and.w	r3, r3, #31
  41262a:	2b0a      	cmp	r3, #10
  41262c:	d80f      	bhi.n	41264e <lv_img_decoder_built_in_info+0x8e>
    return LV_RES_OK;
  41262e:	2001      	movs	r0, #1
  412630:	e7ef      	b.n	412612 <lv_img_decoder_built_in_info+0x52>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
  412632:	ab01      	add	r3, sp, #4
  412634:	2204      	movs	r2, #4
  412636:	4629      	mov	r1, r5
  412638:	a802      	add	r0, sp, #8
  41263a:	4c10      	ldr	r4, [pc, #64]	; (41267c <lv_img_decoder_built_in_info+0xbc>)
  41263c:	47a0      	blx	r4
  41263e:	4604      	mov	r4, r0
            lv_fs_close(&file);
  412640:	a802      	add	r0, sp, #8
  412642:	4b0f      	ldr	r3, [pc, #60]	; (412680 <lv_img_decoder_built_in_info+0xc0>)
  412644:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
  412646:	b914      	cbnz	r4, 41264e <lv_img_decoder_built_in_info+0x8e>
  412648:	9b01      	ldr	r3, [sp, #4]
  41264a:	2b04      	cmp	r3, #4
  41264c:	d0e9      	beq.n	412622 <lv_img_decoder_built_in_info+0x62>
                return LV_RES_INV;
  41264e:	2000      	movs	r0, #0
  412650:	e7df      	b.n	412612 <lv_img_decoder_built_in_info+0x52>
        header->w = 1;
  412652:	682b      	ldr	r3, [r5, #0]
  412654:	2001      	movs	r0, #1
  412656:	f360 2394 	bfi	r3, r0, #10, #11
  41265a:	602b      	str	r3, [r5, #0]
        header->h = 1;
  41265c:	0c1a      	lsrs	r2, r3, #16
  41265e:	f360 124f 	bfi	r2, r0, #5, #11
  412662:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
  412664:	220b      	movs	r2, #11
  412666:	f362 0304 	bfi	r3, r2, #0, #5
  41266a:	702b      	strb	r3, [r5, #0]
  41266c:	e7d1      	b.n	412612 <lv_img_decoder_built_in_info+0x52>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  41266e:	2000      	movs	r0, #0
  412670:	e7cf      	b.n	412612 <lv_img_decoder_built_in_info+0x52>
  412672:	bf00      	nop
  412674:	0040ccd9 	.word	0x0040ccd9
  412678:	0041521d 	.word	0x0041521d
  41267c:	0041518d 	.word	0x0041518d
  412680:	0041515d 	.word	0x0041515d

00412684 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
  412684:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412686:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
  412688:	b1a4      	cbz	r4, 4126b4 <lv_img_decoder_built_in_close+0x30>
  41268a:	460d      	mov	r5, r1
#if LV_USE_FILESYSTEM
        if(user_data->f) {
  41268c:	6820      	ldr	r0, [r4, #0]
  41268e:	b120      	cbz	r0, 41269a <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
  412690:	4b09      	ldr	r3, [pc, #36]	; (4126b8 <lv_img_decoder_built_in_close+0x34>)
  412692:	4798      	blx	r3
            lv_mem_free(user_data->f);
  412694:	6820      	ldr	r0, [r4, #0]
  412696:	4b09      	ldr	r3, [pc, #36]	; (4126bc <lv_img_decoder_built_in_close+0x38>)
  412698:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
  41269a:	6860      	ldr	r0, [r4, #4]
  41269c:	b108      	cbz	r0, 4126a2 <lv_img_decoder_built_in_close+0x1e>
  41269e:	4b07      	ldr	r3, [pc, #28]	; (4126bc <lv_img_decoder_built_in_close+0x38>)
  4126a0:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
  4126a2:	68a0      	ldr	r0, [r4, #8]
  4126a4:	b108      	cbz	r0, 4126aa <lv_img_decoder_built_in_close+0x26>
  4126a6:	4b05      	ldr	r3, [pc, #20]	; (4126bc <lv_img_decoder_built_in_close+0x38>)
  4126a8:	4798      	blx	r3

        lv_mem_free(user_data);
  4126aa:	4620      	mov	r0, r4
  4126ac:	4b03      	ldr	r3, [pc, #12]	; (4126bc <lv_img_decoder_built_in_close+0x38>)
  4126ae:	4798      	blx	r3

        dsc->user_data = NULL;
  4126b0:	2300      	movs	r3, #0
  4126b2:	61eb      	str	r3, [r5, #28]
  4126b4:	bd38      	pop	{r3, r4, r5, pc}
  4126b6:	bf00      	nop
  4126b8:	0041515d 	.word	0x0041515d
  4126bc:	004158b9 	.word	0x004158b9

004126c0 <lv_img_decoder_built_in_open>:
{
  4126c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4126c4:	b082      	sub	sp, #8
  4126c6:	4605      	mov	r5, r0
  4126c8:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  4126ca:	7a8b      	ldrb	r3, [r1, #10]
  4126cc:	2b01      	cmp	r3, #1
  4126ce:	d015      	beq.n	4126fc <lv_img_decoder_built_in_open+0x3c>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  4126d0:	2b00      	cmp	r3, #0
  4126d2:	f040 8126 	bne.w	412922 <lv_img_decoder_built_in_open+0x262>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
  4126d6:	684b      	ldr	r3, [r1, #4]
  4126d8:	689b      	ldr	r3, [r3, #8]
  4126da:	2b00      	cmp	r3, #0
  4126dc:	f000 811f 	beq.w	41291e <lv_img_decoder_built_in_open+0x25e>
    lv_img_cf_t cf = dsc->header.cf;
  4126e0:	7b08      	ldrb	r0, [r1, #12]
  4126e2:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  4126e6:	1f03      	subs	r3, r0, #4
  4126e8:	b2db      	uxtb	r3, r3
  4126ea:	2b02      	cmp	r3, #2
  4126ec:	d854      	bhi.n	412798 <lv_img_decoder_built_in_open+0xd8>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
  4126ee:	6863      	ldr	r3, [r4, #4]
  4126f0:	689b      	ldr	r3, [r3, #8]
  4126f2:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  4126f4:	2001      	movs	r0, #1
}
  4126f6:	b002      	add	sp, #8
  4126f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  4126fc:	6848      	ldr	r0, [r1, #4]
  4126fe:	4b8f      	ldr	r3, [pc, #572]	; (41293c <lv_img_decoder_built_in_open+0x27c>)
  412700:	4798      	blx	r3
  412702:	498f      	ldr	r1, [pc, #572]	; (412940 <lv_img_decoder_built_in_open+0x280>)
  412704:	4b8f      	ldr	r3, [pc, #572]	; (412944 <lv_img_decoder_built_in_open+0x284>)
  412706:	4798      	blx	r3
  412708:	b9a8      	cbnz	r0, 412736 <lv_img_decoder_built_in_open+0x76>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
  41270a:	2202      	movs	r2, #2
  41270c:	6861      	ldr	r1, [r4, #4]
  41270e:	4668      	mov	r0, sp
  412710:	4b8d      	ldr	r3, [pc, #564]	; (412948 <lv_img_decoder_built_in_open+0x288>)
  412712:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
  412714:	b978      	cbnz	r0, 412736 <lv_img_decoder_built_in_open+0x76>
        if(dsc->user_data == NULL) {
  412716:	69e3      	ldr	r3, [r4, #28]
  412718:	b17b      	cbz	r3, 41273a <lv_img_decoder_built_in_open+0x7a>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  41271a:	69e6      	ldr	r6, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
  41271c:	2008      	movs	r0, #8
  41271e:	4b8b      	ldr	r3, [pc, #556]	; (41294c <lv_img_decoder_built_in_open+0x28c>)
  412720:	4798      	blx	r3
  412722:	6030      	str	r0, [r6, #0]
        LV_ASSERT_MEM(user_data->f);
  412724:	4b8a      	ldr	r3, [pc, #552]	; (412950 <lv_img_decoder_built_in_open+0x290>)
  412726:	4798      	blx	r3
  412728:	b1d8      	cbz	r0, 412762 <lv_img_decoder_built_in_open+0xa2>
        if(user_data->f == NULL) {
  41272a:	6833      	ldr	r3, [r6, #0]
  41272c:	b9fb      	cbnz	r3, 41276e <lv_img_decoder_built_in_open+0xae>
            lv_img_decoder_built_in_close(decoder, dsc);
  41272e:	4621      	mov	r1, r4
  412730:	4628      	mov	r0, r5
  412732:	4b88      	ldr	r3, [pc, #544]	; (412954 <lv_img_decoder_built_in_open+0x294>)
  412734:	4798      	blx	r3
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  412736:	2000      	movs	r0, #0
  412738:	e7dd      	b.n	4126f6 <lv_img_decoder_built_in_open+0x36>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  41273a:	200c      	movs	r0, #12
  41273c:	4b83      	ldr	r3, [pc, #524]	; (41294c <lv_img_decoder_built_in_open+0x28c>)
  41273e:	4798      	blx	r3
  412740:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  412742:	4b83      	ldr	r3, [pc, #524]	; (412950 <lv_img_decoder_built_in_open+0x290>)
  412744:	4798      	blx	r3
  412746:	b928      	cbnz	r0, 412754 <lv_img_decoder_built_in_open+0x94>
  412748:	69e2      	ldr	r2, [r4, #28]
  41274a:	2300      	movs	r3, #0
  41274c:	4882      	ldr	r0, [pc, #520]	; (412958 <lv_img_decoder_built_in_open+0x298>)
  41274e:	4983      	ldr	r1, [pc, #524]	; (41295c <lv_img_decoder_built_in_open+0x29c>)
  412750:	4788      	blx	r1
  412752:	e7fe      	b.n	412752 <lv_img_decoder_built_in_open+0x92>
            if(dsc->user_data == NULL) {
  412754:	69e0      	ldr	r0, [r4, #28]
  412756:	2800      	cmp	r0, #0
  412758:	d0ed      	beq.n	412736 <lv_img_decoder_built_in_open+0x76>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  41275a:	210c      	movs	r1, #12
  41275c:	4b80      	ldr	r3, [pc, #512]	; (412960 <lv_img_decoder_built_in_open+0x2a0>)
  41275e:	4798      	blx	r3
  412760:	e7db      	b.n	41271a <lv_img_decoder_built_in_open+0x5a>
        LV_ASSERT_MEM(user_data->f);
  412762:	6832      	ldr	r2, [r6, #0]
  412764:	2300      	movs	r3, #0
  412766:	487c      	ldr	r0, [pc, #496]	; (412958 <lv_img_decoder_built_in_open+0x298>)
  412768:	497c      	ldr	r1, [pc, #496]	; (41295c <lv_img_decoder_built_in_open+0x29c>)
  41276a:	4788      	blx	r1
  41276c:	e7fe      	b.n	41276c <lv_img_decoder_built_in_open+0xac>
  41276e:	f10d 32ff 	add.w	r2, sp, #4294967295
  412772:	f103 0108 	add.w	r1, r3, #8
  412776:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  41277a:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
  41277e:	428b      	cmp	r3, r1
  412780:	d1f9      	bne.n	412776 <lv_img_decoder_built_in_open+0xb6>
    lv_img_cf_t cf = dsc->header.cf;
  412782:	7b20      	ldrb	r0, [r4, #12]
  412784:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  412788:	1f03      	subs	r3, r0, #4
  41278a:	b2db      	uxtb	r3, r3
  41278c:	2b02      	cmp	r3, #2
  41278e:	d803      	bhi.n	412798 <lv_img_decoder_built_in_open+0xd8>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  412790:	7aa3      	ldrb	r3, [r4, #10]
  412792:	2b00      	cmp	r3, #0
  412794:	d0ab      	beq.n	4126ee <lv_img_decoder_built_in_open+0x2e>
  412796:	e0cc      	b.n	412932 <lv_img_decoder_built_in_open+0x272>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
  412798:	1fc3      	subs	r3, r0, #7
  41279a:	b2db      	uxtb	r3, r3
  41279c:	2b03      	cmp	r3, #3
  41279e:	d909      	bls.n	4127b4 <lv_img_decoder_built_in_open+0xf4>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
  4127a0:	f1a0 030b 	sub.w	r3, r0, #11
  4127a4:	b2db      	uxtb	r3, r3
  4127a6:	2b03      	cmp	r3, #3
  4127a8:	f200 80b3 	bhi.w	412912 <lv_img_decoder_built_in_open+0x252>
        dsc->img_data = NULL;
  4127ac:	2300      	movs	r3, #0
  4127ae:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
  4127b0:	2001      	movs	r0, #1
  4127b2:	e7a0      	b.n	4126f6 <lv_img_decoder_built_in_open+0x36>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
  4127b4:	4b6b      	ldr	r3, [pc, #428]	; (412964 <lv_img_decoder_built_in_open+0x2a4>)
  4127b6:	4798      	blx	r3
  4127b8:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
  4127ba:	69e3      	ldr	r3, [r4, #28]
  4127bc:	b173      	cbz	r3, 4127dc <lv_img_decoder_built_in_open+0x11c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4127be:	69e6      	ldr	r6, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
  4127c0:	2002      	movs	r0, #2
  4127c2:	40b8      	lsls	r0, r7
  4127c4:	4b61      	ldr	r3, [pc, #388]	; (41294c <lv_img_decoder_built_in_open+0x28c>)
  4127c6:	4798      	blx	r3
  4127c8:	6070      	str	r0, [r6, #4]
        LV_ASSERT_MEM(user_data->palette);
  4127ca:	4b61      	ldr	r3, [pc, #388]	; (412950 <lv_img_decoder_built_in_open+0x290>)
  4127cc:	4798      	blx	r3
  4127ce:	b9f0      	cbnz	r0, 41280e <lv_img_decoder_built_in_open+0x14e>
  4127d0:	6872      	ldr	r2, [r6, #4]
  4127d2:	2300      	movs	r3, #0
  4127d4:	4860      	ldr	r0, [pc, #384]	; (412958 <lv_img_decoder_built_in_open+0x298>)
  4127d6:	4961      	ldr	r1, [pc, #388]	; (41295c <lv_img_decoder_built_in_open+0x29c>)
  4127d8:	4788      	blx	r1
  4127da:	e7fe      	b.n	4127da <lv_img_decoder_built_in_open+0x11a>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  4127dc:	200c      	movs	r0, #12
  4127de:	4b5b      	ldr	r3, [pc, #364]	; (41294c <lv_img_decoder_built_in_open+0x28c>)
  4127e0:	4798      	blx	r3
  4127e2:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  4127e4:	4b5a      	ldr	r3, [pc, #360]	; (412950 <lv_img_decoder_built_in_open+0x290>)
  4127e6:	4798      	blx	r3
  4127e8:	b928      	cbnz	r0, 4127f6 <lv_img_decoder_built_in_open+0x136>
  4127ea:	69e2      	ldr	r2, [r4, #28]
  4127ec:	2300      	movs	r3, #0
  4127ee:	485a      	ldr	r0, [pc, #360]	; (412958 <lv_img_decoder_built_in_open+0x298>)
  4127f0:	495a      	ldr	r1, [pc, #360]	; (41295c <lv_img_decoder_built_in_open+0x29c>)
  4127f2:	4788      	blx	r1
  4127f4:	e7fe      	b.n	4127f4 <lv_img_decoder_built_in_open+0x134>
            if(dsc->user_data == NULL) {
  4127f6:	69e0      	ldr	r0, [r4, #28]
  4127f8:	b928      	cbnz	r0, 412806 <lv_img_decoder_built_in_open+0x146>
                lv_img_decoder_built_in_close(decoder, dsc);
  4127fa:	4621      	mov	r1, r4
  4127fc:	4628      	mov	r0, r5
  4127fe:	4b55      	ldr	r3, [pc, #340]	; (412954 <lv_img_decoder_built_in_open+0x294>)
  412800:	4798      	blx	r3
                return LV_RES_INV;
  412802:	2000      	movs	r0, #0
  412804:	e777      	b.n	4126f6 <lv_img_decoder_built_in_open+0x36>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  412806:	210c      	movs	r1, #12
  412808:	4b55      	ldr	r3, [pc, #340]	; (412960 <lv_img_decoder_built_in_open+0x2a0>)
  41280a:	4798      	blx	r3
  41280c:	e7d7      	b.n	4127be <lv_img_decoder_built_in_open+0xfe>
        uint32_t palette_size = 1 << px_size;
  41280e:	2301      	movs	r3, #1
  412810:	fa03 f707 	lsl.w	r7, r3, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
  412814:	4638      	mov	r0, r7
  412816:	4b4d      	ldr	r3, [pc, #308]	; (41294c <lv_img_decoder_built_in_open+0x28c>)
  412818:	4798      	blx	r3
  41281a:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MEM(user_data->opa);
  41281c:	4b4c      	ldr	r3, [pc, #304]	; (412950 <lv_img_decoder_built_in_open+0x290>)
  41281e:	4798      	blx	r3
  412820:	2800      	cmp	r0, #0
  412822:	d033      	beq.n	41288c <lv_img_decoder_built_in_open+0x1cc>
        if(user_data->palette == NULL || user_data->opa == NULL) {
  412824:	6873      	ldr	r3, [r6, #4]
  412826:	2b00      	cmp	r3, #0
  412828:	d036      	beq.n	412898 <lv_img_decoder_built_in_open+0x1d8>
  41282a:	68b3      	ldr	r3, [r6, #8]
  41282c:	2b00      	cmp	r3, #0
  41282e:	d033      	beq.n	412898 <lv_img_decoder_built_in_open+0x1d8>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  412830:	7aa3      	ldrb	r3, [r4, #10]
  412832:	2b01      	cmp	r3, #1
  412834:	d036      	beq.n	4128a4 <lv_img_decoder_built_in_open+0x1e4>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
  412836:	6863      	ldr	r3, [r4, #4]
  412838:	689b      	ldr	r3, [r3, #8]
            for(i = 0; i < palette_size; i++) {
  41283a:	2f00      	cmp	r7, #0
  41283c:	d065      	beq.n	41290a <lv_img_decoder_built_in_open+0x24a>
  41283e:	2200      	movs	r2, #0
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
  412840:	f8d6 c004 	ldr.w	ip, [r6, #4]
  412844:	eb0c 0e42 	add.w	lr, ip, r2, lsl #1
  412848:	7858      	ldrb	r0, [r3, #1]
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  41284a:	f893 8002 	ldrb.w	r8, [r3, #2]
  41284e:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  412852:	781d      	ldrb	r5, [r3, #0]
  412854:	08ed      	lsrs	r5, r5, #3
  412856:	ea4f 1950 	mov.w	r9, r0, lsr #5
  41285a:	f81c 1012 	ldrb.w	r1, [ip, r2, lsl #1]
  41285e:	f369 0102 	bfi	r1, r9, #0, #3
  412862:	f368 01c7 	bfi	r1, r8, #3, #5
  412866:	f80c 1012 	strb.w	r1, [ip, r2, lsl #1]
  41286a:	f89e 1001 	ldrb.w	r1, [lr, #1]
  41286e:	f365 0104 	bfi	r1, r5, #0, #5
  412872:	0880      	lsrs	r0, r0, #2
  412874:	f360 1147 	bfi	r1, r0, #5, #3
  412878:	f88e 1001 	strb.w	r1, [lr, #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
  41287c:	78d8      	ldrb	r0, [r3, #3]
  41287e:	68b1      	ldr	r1, [r6, #8]
  412880:	5488      	strb	r0, [r1, r2]
            for(i = 0; i < palette_size; i++) {
  412882:	3201      	adds	r2, #1
  412884:	3304      	adds	r3, #4
  412886:	4297      	cmp	r7, r2
  412888:	d1da      	bne.n	412840 <lv_img_decoder_built_in_open+0x180>
  41288a:	e03e      	b.n	41290a <lv_img_decoder_built_in_open+0x24a>
        LV_ASSERT_MEM(user_data->opa);
  41288c:	68b2      	ldr	r2, [r6, #8]
  41288e:	2300      	movs	r3, #0
  412890:	4831      	ldr	r0, [pc, #196]	; (412958 <lv_img_decoder_built_in_open+0x298>)
  412892:	4932      	ldr	r1, [pc, #200]	; (41295c <lv_img_decoder_built_in_open+0x29c>)
  412894:	4788      	blx	r1
  412896:	e7fe      	b.n	412896 <lv_img_decoder_built_in_open+0x1d6>
            lv_img_decoder_built_in_close(decoder, dsc);
  412898:	4621      	mov	r1, r4
  41289a:	4628      	mov	r0, r5
  41289c:	4b2d      	ldr	r3, [pc, #180]	; (412954 <lv_img_decoder_built_in_open+0x294>)
  41289e:	4798      	blx	r3
            return LV_RES_INV;
  4128a0:	2000      	movs	r0, #0
  4128a2:	e728      	b.n	4126f6 <lv_img_decoder_built_in_open+0x36>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
  4128a4:	2104      	movs	r1, #4
  4128a6:	6830      	ldr	r0, [r6, #0]
  4128a8:	4b2f      	ldr	r3, [pc, #188]	; (412968 <lv_img_decoder_built_in_open+0x2a8>)
  4128aa:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
  4128ac:	b36f      	cbz	r7, 41290a <lv_img_decoder_built_in_open+0x24a>
  4128ae:	2500      	movs	r5, #0
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
  4128b0:	46a9      	mov	r9, r5
  4128b2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 41296c <lv_img_decoder_built_in_open+0x2ac>
  4128b6:	464b      	mov	r3, r9
  4128b8:	2204      	movs	r2, #4
  4128ba:	4669      	mov	r1, sp
  4128bc:	6830      	ldr	r0, [r6, #0]
  4128be:	47c0      	blx	r8
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
  4128c0:	f8d6 e004 	ldr.w	lr, [r6, #4]
  4128c4:	eb0e 0045 	add.w	r0, lr, r5, lsl #1
  4128c8:	f89d 2001 	ldrb.w	r2, [sp, #1]
  4128cc:	f89d c002 	ldrb.w	ip, [sp, #2]
  4128d0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
  4128d4:	f89d 1000 	ldrb.w	r1, [sp]
  4128d8:	08c9      	lsrs	r1, r1, #3
  4128da:	ea4f 1a52 	mov.w	sl, r2, lsr #5
  4128de:	f81e 3015 	ldrb.w	r3, [lr, r5, lsl #1]
  4128e2:	f36a 0302 	bfi	r3, sl, #0, #3
  4128e6:	f36c 03c7 	bfi	r3, ip, #3, #5
  4128ea:	f80e 3015 	strb.w	r3, [lr, r5, lsl #1]
  4128ee:	7843      	ldrb	r3, [r0, #1]
  4128f0:	f361 0304 	bfi	r3, r1, #0, #5
  4128f4:	0892      	lsrs	r2, r2, #2
  4128f6:	f362 1347 	bfi	r3, r2, #5, #3
  4128fa:	7043      	strb	r3, [r0, #1]
                user_data->opa[i]     = cur_color.ch.alpha;
  4128fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
  412900:	68b3      	ldr	r3, [r6, #8]
  412902:	555a      	strb	r2, [r3, r5]
            for(i = 0; i < palette_size; i++) {
  412904:	3501      	adds	r5, #1
  412906:	42af      	cmp	r7, r5
  412908:	d1d5      	bne.n	4128b6 <lv_img_decoder_built_in_open+0x1f6>
        dsc->img_data = NULL;
  41290a:	2300      	movs	r3, #0
  41290c:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
  41290e:	2001      	movs	r0, #1
  412910:	e6f1      	b.n	4126f6 <lv_img_decoder_built_in_open+0x36>
        lv_img_decoder_built_in_close(decoder, dsc);
  412912:	4621      	mov	r1, r4
  412914:	4628      	mov	r0, r5
  412916:	4b0f      	ldr	r3, [pc, #60]	; (412954 <lv_img_decoder_built_in_open+0x294>)
  412918:	4798      	blx	r3
        return LV_RES_INV;
  41291a:	2000      	movs	r0, #0
  41291c:	e6eb      	b.n	4126f6 <lv_img_decoder_built_in_open+0x36>
            return LV_RES_INV;
  41291e:	2000      	movs	r0, #0
  412920:	e6e9      	b.n	4126f6 <lv_img_decoder_built_in_open+0x36>
    lv_img_cf_t cf = dsc->header.cf;
  412922:	7b08      	ldrb	r0, [r1, #12]
  412924:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  412928:	1f03      	subs	r3, r0, #4
  41292a:	b2db      	uxtb	r3, r3
  41292c:	2b02      	cmp	r3, #2
  41292e:	f63f af33 	bhi.w	412798 <lv_img_decoder_built_in_open+0xd8>
            dsc->img_data = NULL;
  412932:	2300      	movs	r3, #0
  412934:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  412936:	2001      	movs	r0, #1
  412938:	e6dd      	b.n	4126f6 <lv_img_decoder_built_in_open+0x36>
  41293a:	bf00      	nop
  41293c:	004152dd 	.word	0x004152dd
  412940:	00425bf8 	.word	0x00425bf8
  412944:	004233c9 	.word	0x004233c9
  412948:	0041521d 	.word	0x0041521d
  41294c:	004157c9 	.word	0x004157c9
  412950:	004150ef 	.word	0x004150ef
  412954:	00412685 	.word	0x00412685
  412958:	00425a60 	.word	0x00425a60
  41295c:	004150f9 	.word	0x004150f9
  412960:	00415ead 	.word	0x00415ead
  412964:	0040ca59 	.word	0x0040ca59
  412968:	004151c9 	.word	0x004151c9
  41296c:	0041518d 	.word	0x0041518d

00412970 <lv_img_decoder_built_in_read_line>:
{
  412970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412974:	b089      	sub	sp, #36	; 0x24
  412976:	460d      	mov	r5, r1
  412978:	4614      	mov	r4, r2
  41297a:	469a      	mov	sl, r3
  41297c:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  412980:	7b0b      	ldrb	r3, [r1, #12]
  412982:	f003 031f 	and.w	r3, r3, #31
  412986:	1f1a      	subs	r2, r3, #4
  412988:	b2d2      	uxtb	r2, r2
  41298a:	2a02      	cmp	r2, #2
  41298c:	d835      	bhi.n	4129fa <lv_img_decoder_built_in_read_line+0x8a>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  41298e:	7a8b      	ldrb	r3, [r1, #10]
  412990:	2b01      	cmp	r3, #1
  412992:	d003      	beq.n	41299c <lv_img_decoder_built_in_read_line+0x2c>
    lv_res_t res = LV_RES_INV;
  412994:	2000      	movs	r0, #0
}
  412996:	b009      	add	sp, #36	; 0x24
  412998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  41299c:	f8d1 801c 	ldr.w	r8, [r1, #28]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  4129a0:	7b08      	ldrb	r0, [r1, #12]
  4129a2:	f000 001f 	and.w	r0, r0, #31
  4129a6:	4bb3      	ldr	r3, [pc, #716]	; (412c74 <lv_img_decoder_built_in_read_line+0x304>)
  4129a8:	4798      	blx	r3
  4129aa:	4607      	mov	r7, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
  4129ac:	68e9      	ldr	r1, [r5, #12]
  4129ae:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4129b2:	fb0a 4101 	mla	r1, sl, r1, r4
  4129b6:	fb00 f101 	mul.w	r1, r0, r1
  4129ba:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
  4129bc:	3104      	adds	r1, #4
  4129be:	f8d8 0000 	ldr.w	r0, [r8]
  4129c2:	4bad      	ldr	r3, [pc, #692]	; (412c78 <lv_img_decoder_built_in_read_line+0x308>)
  4129c4:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
  4129c6:	b108      	cbz	r0, 4129cc <lv_img_decoder_built_in_read_line+0x5c>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
  4129c8:	2000      	movs	r0, #0
  4129ca:	e7e4      	b.n	412996 <lv_img_decoder_built_in_read_line+0x26>
    }
    uint32_t btr = len * (px_size >> 3);
  4129cc:	f3c7 00c7 	ubfx	r0, r7, #3, #8
  4129d0:	fb06 f600 	mul.w	r6, r6, r0
    uint32_t br  = 0;
  4129d4:	ab08      	add	r3, sp, #32
  4129d6:	2200      	movs	r2, #0
  4129d8:	f843 2d10 	str.w	r2, [r3, #-16]!
    res = lv_fs_read(user_data->f, buf, btr, &br);
  4129dc:	4632      	mov	r2, r6
  4129de:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4129e0:	f8d8 0000 	ldr.w	r0, [r8]
  4129e4:	4ca5      	ldr	r4, [pc, #660]	; (412c7c <lv_img_decoder_built_in_read_line+0x30c>)
  4129e6:	47a0      	blx	r4
    if(res != LV_FS_RES_OK || btr != br) {
  4129e8:	b928      	cbnz	r0, 4129f6 <lv_img_decoder_built_in_read_line+0x86>
        return LV_RES_INV;
  4129ea:	9804      	ldr	r0, [sp, #16]
  4129ec:	42b0      	cmp	r0, r6
  4129ee:	bf14      	ite	ne
  4129f0:	2000      	movne	r0, #0
  4129f2:	2001      	moveq	r0, #1
  4129f4:	e7cf      	b.n	412996 <lv_img_decoder_built_in_read_line+0x26>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
  4129f6:	2000      	movs	r0, #0
  4129f8:	e7cd      	b.n	412996 <lv_img_decoder_built_in_read_line+0x26>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  4129fa:	f1a3 020b 	sub.w	r2, r3, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  4129fe:	b2d2      	uxtb	r2, r2
  412a00:	2a03      	cmp	r2, #3
  412a02:	d906      	bls.n	412a12 <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  412a04:	3b07      	subs	r3, #7
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
  412a06:	b2db      	uxtb	r3, r3
  412a08:	2b03      	cmp	r3, #3
  412a0a:	f240 80d7 	bls.w	412bbc <lv_img_decoder_built_in_read_line+0x24c>
        return LV_RES_INV;
  412a0e:	2000      	movs	r0, #0
  412a10:	e7c1      	b.n	412996 <lv_img_decoder_built_in_read_line+0x26>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
  412a12:	2200      	movs	r2, #0
  412a14:	f88d 2008 	strb.w	r2, [sp, #8]
  412a18:	23ff      	movs	r3, #255	; 0xff
  412a1a:	f88d 3009 	strb.w	r3, [sp, #9]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  412a1e:	f88d 200c 	strb.w	r2, [sp, #12]
  412a22:	2255      	movs	r2, #85	; 0x55
  412a24:	f88d 200d 	strb.w	r2, [sp, #13]
  412a28:	22aa      	movs	r2, #170	; 0xaa
  412a2a:	f88d 200e 	strb.w	r2, [sp, #14]
  412a2e:	f88d 300f 	strb.w	r3, [sp, #15]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
  412a32:	4b93      	ldr	r3, [pc, #588]	; (412c80 <lv_img_decoder_built_in_read_line+0x310>)
  412a34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  412a36:	af08      	add	r7, sp, #32
  412a38:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
  412a3c:	8929      	ldrh	r1, [r5, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
  412a3e:	2e00      	cmp	r6, #0
  412a40:	dd0c      	ble.n	412a5c <lv_img_decoder_built_in_read_line+0xec>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
  412a42:	0a08      	lsrs	r0, r1, #8
  412a44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  412a46:	1e72      	subs	r2, r6, #1
  412a48:	b292      	uxth	r2, r2
  412a4a:	3201      	adds	r2, #1
  412a4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  412a50:	441a      	add	r2, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
  412a52:	7019      	strb	r1, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
  412a54:	7058      	strb	r0, [r3, #1]
  412a56:	3303      	adds	r3, #3
    for(i = 0; i < len; i++) {
  412a58:	429a      	cmp	r2, r3
  412a5a:	d1fa      	bne.n	412a52 <lv_img_decoder_built_in_read_line+0xe2>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
  412a5c:	7b28      	ldrb	r0, [r5, #12]
  412a5e:	f000 001f 	and.w	r0, r0, #31
  412a62:	4b84      	ldr	r3, [pc, #528]	; (412c74 <lv_img_decoder_built_in_read_line+0x304>)
  412a64:	4798      	blx	r3
  412a66:	4680      	mov	r8, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  412a68:	2701      	movs	r7, #1
  412a6a:	4087      	lsls	r7, r0
  412a6c:	3f01      	subs	r7, #1
  412a6e:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
  412a70:	7b2b      	ldrb	r3, [r5, #12]
  412a72:	f003 031f 	and.w	r3, r3, #31
  412a76:	3b0b      	subs	r3, #11
  412a78:	2b03      	cmp	r3, #3
  412a7a:	d864      	bhi.n	412b46 <lv_img_decoder_built_in_read_line+0x1d6>
  412a7c:	e8df f003 	tbb	[pc, r3]
  412a80:	58432e02 	.word	0x58432e02
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  412a84:	68eb      	ldr	r3, [r5, #12]
  412a86:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412a8a:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
  412a8c:	f013 0f07 	tst.w	r3, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  412a90:	bf0c      	ite	eq
  412a92:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x7) w++;
  412a96:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
  412a9a:	10e3      	asrs	r3, r4, #3
  412a9c:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 7 - (x & 0x7);
  412aa0:	43e4      	mvns	r4, r4
  412aa2:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
  412aa6:	f10d 0908 	add.w	r9, sp, #8
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412aaa:	69eb      	ldr	r3, [r5, #28]
  412aac:	9301      	str	r3, [sp, #4]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  412aae:	4658      	mov	r0, fp
  412ab0:	4b74      	ldr	r3, [pc, #464]	; (412c84 <lv_img_decoder_built_in_read_line+0x314>)
  412ab2:	4798      	blx	r3
  412ab4:	9000      	str	r0, [sp, #0]
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  412ab6:	7aab      	ldrb	r3, [r5, #10]
  412ab8:	2b00      	cmp	r3, #0
  412aba:	d14d      	bne.n	412b58 <lv_img_decoder_built_in_read_line+0x1e8>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
  412abc:	686b      	ldr	r3, [r5, #4]
  412abe:	689b      	ldr	r3, [r3, #8]
  412ac0:	449a      	add	sl, r3
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    for(i = 0; i < len; i++) {
  412ac2:	2e00      	cmp	r6, #0
  412ac4:	dd75      	ble.n	412bb2 <lv_img_decoder_built_in_read_line+0x242>
  412ac6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  412ac8:	1e71      	subs	r1, r6, #1
  412aca:	b289      	uxth	r1, r1
  412acc:	3101      	adds	r1, #1
  412ace:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  412ad2:	4411      	add	r1, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
  412ad4:	f1c8 0008 	rsb	r0, r8, #8
  412ad8:	b240      	sxtb	r0, r0
  412ada:	e052      	b.n	412b82 <lv_img_decoder_built_in_read_line+0x212>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  412adc:	68eb      	ldr	r3, [r5, #12]
  412ade:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412ae2:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
  412ae4:	f013 0f03 	tst.w	r3, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  412ae8:	bf0c      	ite	eq
  412aea:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x3) w++;
  412aee:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
  412af2:	10a3      	asrs	r3, r4, #2
  412af4:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 6 - ((x & 0x3) * 2);
  412af8:	43e4      	mvns	r4, r4
  412afa:	f004 0403 	and.w	r4, r4, #3
  412afe:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
  412b00:	f10d 090c 	add.w	r9, sp, #12
  412b04:	e7d1      	b.n	412aaa <lv_img_decoder_built_in_read_line+0x13a>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  412b06:	68eb      	ldr	r3, [r5, #12]
  412b08:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412b0c:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
  412b0e:	f013 0f01 	tst.w	r3, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  412b12:	bf0c      	ite	eq
  412b14:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x1) w++;
  412b18:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
  412b1c:	1063      	asrs	r3, r4, #1
  412b1e:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 4 - ((x & 0x1) * 4);
  412b22:	f014 0f01 	tst.w	r4, #1
  412b26:	d013      	beq.n	412b50 <lv_img_decoder_built_in_read_line+0x1e0>
  412b28:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
  412b2a:	f10d 0910 	add.w	r9, sp, #16
  412b2e:	e7bc      	b.n	412aaa <lv_img_decoder_built_in_read_line+0x13a>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  412b30:	68eb      	ldr	r3, [r5, #12]
  412b32:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412b36:	b29a      	uxth	r2, r3
  412b38:	fa0f fb83 	sxth.w	fp, r3
            ofs += w * y + x;  /*First pixel*/
  412b3c:	fb0a 4a02 	mla	sl, sl, r2, r4
            pos = 0;
  412b40:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
  412b42:	46a1      	mov	r9, r4
  412b44:	e7b1      	b.n	412aaa <lv_img_decoder_built_in_read_line+0x13a>
    int8_t pos   = 0;
  412b46:	2400      	movs	r4, #0
    uint32_t ofs = 0;
  412b48:	46a2      	mov	sl, r4
    lv_coord_t w = 0;
  412b4a:	46a3      	mov	fp, r4
    const lv_opa_t * opa_table = NULL;
  412b4c:	46a1      	mov	r9, r4
  412b4e:	e7ac      	b.n	412aaa <lv_img_decoder_built_in_read_line+0x13a>
            pos       = 4 - ((x & 0x1) * 4);
  412b50:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
  412b52:	f10d 0910 	add.w	r9, sp, #16
  412b56:	e7a8      	b.n	412aaa <lv_img_decoder_built_in_read_line+0x13a>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  412b58:	f10a 0104 	add.w	r1, sl, #4
  412b5c:	9b01      	ldr	r3, [sp, #4]
  412b5e:	6818      	ldr	r0, [r3, #0]
  412b60:	4b45      	ldr	r3, [pc, #276]	; (412c78 <lv_img_decoder_built_in_read_line+0x308>)
  412b62:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  412b64:	2300      	movs	r3, #0
  412b66:	465a      	mov	r2, fp
  412b68:	f8dd b000 	ldr.w	fp, [sp]
  412b6c:	4659      	mov	r1, fp
  412b6e:	9801      	ldr	r0, [sp, #4]
  412b70:	6800      	ldr	r0, [r0, #0]
  412b72:	f8df a108 	ldr.w	sl, [pc, #264]	; 412c7c <lv_img_decoder_built_in_read_line+0x30c>
  412b76:	47d0      	blx	sl
        data_tmp = fs_buf;
  412b78:	46da      	mov	sl, fp
  412b7a:	e7a2      	b.n	412ac2 <lv_img_decoder_built_in_read_line+0x152>
  412b7c:	3203      	adds	r2, #3
    for(i = 0; i < len; i++) {
  412b7e:	4291      	cmp	r1, r2
  412b80:	d017      	beq.n	412bb2 <lv_img_decoder_built_in_read_line+0x242>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  412b82:	f89a 3000 	ldrb.w	r3, [sl]
  412b86:	fa07 f604 	lsl.w	r6, r7, r4
  412b8a:	4033      	ands	r3, r6
  412b8c:	4123      	asrs	r3, r4
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
  412b8e:	7b2e      	ldrb	r6, [r5, #12]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  412b90:	f006 061f 	and.w	r6, r6, #31
  412b94:	2e0e      	cmp	r6, #14
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  412b96:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  412b98:	bf18      	it	ne
  412b9a:	f819 3003 	ldrbne.w	r3, [r9, r3]
  412b9e:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
  412ba0:	eba4 0408 	sub.w	r4, r4, r8
  412ba4:	b264      	sxtb	r4, r4
        if(pos < 0) {
  412ba6:	2c00      	cmp	r4, #0
  412ba8:	dae8      	bge.n	412b7c <lv_img_decoder_built_in_read_line+0x20c>
            pos = 8 - px_size;
  412baa:	4604      	mov	r4, r0
            data_tmp++;
  412bac:	f10a 0a01 	add.w	sl, sl, #1
  412bb0:	e7e4      	b.n	412b7c <lv_img_decoder_built_in_read_line+0x20c>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  412bb2:	9800      	ldr	r0, [sp, #0]
  412bb4:	4b34      	ldr	r3, [pc, #208]	; (412c88 <lv_img_decoder_built_in_read_line+0x318>)
  412bb6:	4798      	blx	r3
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
  412bb8:	2001      	movs	r0, #1
  412bba:	e6ec      	b.n	412996 <lv_img_decoder_built_in_read_line+0x26>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  412bbc:	7b08      	ldrb	r0, [r1, #12]
  412bbe:	f000 001f 	and.w	r0, r0, #31
  412bc2:	4b2c      	ldr	r3, [pc, #176]	; (412c74 <lv_img_decoder_built_in_read_line+0x304>)
  412bc4:	4798      	blx	r3
  412bc6:	4681      	mov	r9, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  412bc8:	f04f 0801 	mov.w	r8, #1
  412bcc:	fa08 f800 	lsl.w	r8, r8, r0
  412bd0:	f108 38ff 	add.w	r8, r8, #4294967295
  412bd4:	fa1f f888 	uxth.w	r8, r8

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
  412bd8:	7b2b      	ldrb	r3, [r5, #12]
  412bda:	f003 031f 	and.w	r3, r3, #31
  412bde:	3b07      	subs	r3, #7
  412be0:	2b03      	cmp	r3, #3
  412be2:	d878      	bhi.n	412cd6 <lv_img_decoder_built_in_read_line+0x366>
  412be4:	e8df f003 	tbb	[pc, r3]
  412be8:	6a522f02 	.word	0x6a522f02
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  412bec:	68eb      	ldr	r3, [r5, #12]
  412bee:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412bf2:	ea4f 0be3 	mov.w	fp, r3, asr #3
            if(dsc->header.w & 0x7) w++;
  412bf6:	f013 0f07 	tst.w	r3, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  412bfa:	bf0c      	ite	eq
  412bfc:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x7) w++;
  412c00:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 3); /*First pixel*/
  412c04:	10e3      	asrs	r3, r4, #3
  412c06:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 8;                /*Skip the palette*/
  412c0a:	f10a 0a08 	add.w	sl, sl, #8
            pos = 7 - (x & 0x7);
  412c0e:	43e4      	mvns	r4, r4
  412c10:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412c14:	69ef      	ldr	r7, [r5, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  412c16:	4658      	mov	r0, fp
  412c18:	4b1a      	ldr	r3, [pc, #104]	; (412c84 <lv_img_decoder_built_in_read_line+0x314>)
  412c1a:	4798      	blx	r3
  412c1c:	9000      	str	r0, [sp, #0]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  412c1e:	7aab      	ldrb	r3, [r5, #10]
  412c20:	2b00      	cmp	r3, #0
  412c22:	d15d      	bne.n	412ce0 <lv_img_decoder_built_in_read_line+0x370>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
  412c24:	686b      	ldr	r3, [r5, #4]
  412c26:	689b      	ldr	r3, [r3, #8]
  412c28:	449a      	add	sl, r3
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
  412c2a:	2e00      	cmp	r6, #0
  412c2c:	f340 8082 	ble.w	412d34 <lv_img_decoder_built_in_read_line+0x3c4>
  412c30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  412c32:	1e71      	subs	r1, r6, #1
  412c34:	b289      	uxth	r1, r1
  412c36:	3101      	adds	r1, #1
  412c38:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  412c3c:	4411      	add	r1, r2
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
  412c3e:	f1c9 0508 	rsb	r5, r9, #8
  412c42:	b26d      	sxtb	r5, r5
  412c44:	e05d      	b.n	412d02 <lv_img_decoder_built_in_read_line+0x392>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  412c46:	68eb      	ldr	r3, [r5, #12]
  412c48:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412c4c:	ea4f 0ba3 	mov.w	fp, r3, asr #2
            if(dsc->header.w & 0x3) w++;
  412c50:	f013 0f03 	tst.w	r3, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  412c54:	bf0c      	ite	eq
  412c56:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x3) w++;
  412c5a:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 2); /*First pixel*/
  412c5e:	10a3      	asrs	r3, r4, #2
  412c60:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 16;               /*Skip the palette*/
  412c64:	f10a 0a10 	add.w	sl, sl, #16
            pos = 6 - ((x & 0x3) * 2);
  412c68:	43e4      	mvns	r4, r4
  412c6a:	f004 0403 	and.w	r4, r4, #3
  412c6e:	0064      	lsls	r4, r4, #1
  412c70:	e7d0      	b.n	412c14 <lv_img_decoder_built_in_read_line+0x2a4>
  412c72:	bf00      	nop
  412c74:	0040ca59 	.word	0x0040ca59
  412c78:	004151c9 	.word	0x004151c9
  412c7c:	0041518d 	.word	0x0041518d
  412c80:	00425be8 	.word	0x00425be8
  412c84:	00415cd9 	.word	0x00415cd9
  412c88:	0041595d 	.word	0x0041595d
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  412c8c:	68eb      	ldr	r3, [r5, #12]
  412c8e:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412c92:	ea4f 0b63 	mov.w	fp, r3, asr #1
            if(dsc->header.w & 0x1) w++;
  412c96:	f013 0f01 	tst.w	r3, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  412c9a:	bf0c      	ite	eq
  412c9c:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x1) w++;
  412ca0:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 1); /*First pixel*/
  412ca4:	1063      	asrs	r3, r4, #1
  412ca6:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 64;               /*Skip the palette*/
  412caa:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
  412cae:	f004 0401 	and.w	r4, r4, #1
  412cb2:	2c00      	cmp	r4, #0
  412cb4:	bf0c      	ite	eq
  412cb6:	2404      	moveq	r4, #4
  412cb8:	2400      	movne	r4, #0
  412cba:	e7ab      	b.n	412c14 <lv_img_decoder_built_in_read_line+0x2a4>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  412cbc:	68eb      	ldr	r3, [r5, #12]
  412cbe:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
  412cc2:	fa1f f38b 	uxth.w	r3, fp
  412cc6:	fa0f fb8b 	sxth.w	fp, fp
            ofs += w * y + x;  /*First pixel*/
  412cca:	fb0a 4a03 	mla	sl, sl, r3, r4
            ofs += 1024;       /*Skip the palette*/
  412cce:	f50a 6a80 	add.w	sl, sl, #1024	; 0x400
            pos = 0;
  412cd2:	2400      	movs	r4, #0
  412cd4:	e79e      	b.n	412c14 <lv_img_decoder_built_in_read_line+0x2a4>
    uint32_t ofs = 0;
  412cd6:	f04f 0a00 	mov.w	sl, #0
    int8_t pos   = 0;
  412cda:	4654      	mov	r4, sl
    lv_coord_t w = 0;
  412cdc:	46d3      	mov	fp, sl
  412cde:	e799      	b.n	412c14 <lv_img_decoder_built_in_read_line+0x2a4>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  412ce0:	f10a 0104 	add.w	r1, sl, #4
  412ce4:	6838      	ldr	r0, [r7, #0]
  412ce6:	4b16      	ldr	r3, [pc, #88]	; (412d40 <lv_img_decoder_built_in_read_line+0x3d0>)
  412ce8:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  412cea:	2300      	movs	r3, #0
  412cec:	465a      	mov	r2, fp
  412cee:	f8dd a000 	ldr.w	sl, [sp]
  412cf2:	4651      	mov	r1, sl
  412cf4:	6838      	ldr	r0, [r7, #0]
  412cf6:	4d13      	ldr	r5, [pc, #76]	; (412d44 <lv_img_decoder_built_in_read_line+0x3d4>)
  412cf8:	47a8      	blx	r5
  412cfa:	e796      	b.n	412c2a <lv_img_decoder_built_in_read_line+0x2ba>
  412cfc:	3203      	adds	r2, #3
    for(i = 0; i < len; i++) {
  412cfe:	428a      	cmp	r2, r1
  412d00:	d018      	beq.n	412d34 <lv_img_decoder_built_in_read_line+0x3c4>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  412d02:	f89a 3000 	ldrb.w	r3, [sl]
  412d06:	fa08 f004 	lsl.w	r0, r8, r4
  412d0a:	4003      	ands	r3, r0
  412d0c:	4123      	asrs	r3, r4
        lv_color_t color = user_data->palette[val_act];
  412d0e:	b2db      	uxtb	r3, r3
  412d10:	6878      	ldr	r0, [r7, #4]
  412d12:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
  412d16:	7010      	strb	r0, [r2, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
  412d18:	0a00      	lsrs	r0, r0, #8
  412d1a:	7050      	strb	r0, [r2, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
  412d1c:	68b8      	ldr	r0, [r7, #8]
  412d1e:	5cc3      	ldrb	r3, [r0, r3]
  412d20:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
  412d22:	eba4 0409 	sub.w	r4, r4, r9
  412d26:	b264      	sxtb	r4, r4
        if(pos < 0) {
  412d28:	2c00      	cmp	r4, #0
  412d2a:	dae7      	bge.n	412cfc <lv_img_decoder_built_in_read_line+0x38c>
            pos = 8 - px_size;
  412d2c:	462c      	mov	r4, r5
            data_tmp++;
  412d2e:	f10a 0a01 	add.w	sl, sl, #1
  412d32:	e7e3      	b.n	412cfc <lv_img_decoder_built_in_read_line+0x38c>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  412d34:	9800      	ldr	r0, [sp, #0]
  412d36:	4b04      	ldr	r3, [pc, #16]	; (412d48 <lv_img_decoder_built_in_read_line+0x3d8>)
  412d38:	4798      	blx	r3
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
  412d3a:	2001      	movs	r0, #1
  412d3c:	e62b      	b.n	412996 <lv_img_decoder_built_in_read_line+0x26>
  412d3e:	bf00      	nop
  412d40:	004151c9 	.word	0x004151c9
  412d44:	0041518d 	.word	0x0041518d
  412d48:	0041595d 	.word	0x0041595d

00412d4c <lv_img_decoder_get_info>:
{
  412d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  412d50:	4681      	mov	r9, r0
  412d52:	460e      	mov	r6, r1
    header->always_zero = 0;
  412d54:	780b      	ldrb	r3, [r1, #0]
  412d56:	f36f 1347 	bfc	r3, #5, #3
  412d5a:	700b      	strb	r3, [r1, #0]
    header->h = 0;
  412d5c:	884b      	ldrh	r3, [r1, #2]
  412d5e:	f36f 134f 	bfc	r3, #5, #11
  412d62:	804b      	strh	r3, [r1, #2]
    header->w = 0;
  412d64:	680b      	ldr	r3, [r1, #0]
  412d66:	f36f 2394 	bfc	r3, #10, #11
  412d6a:	600b      	str	r3, [r1, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
  412d6c:	f36f 0304 	bfc	r3, #0, #5
  412d70:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  412d72:	4810      	ldr	r0, [pc, #64]	; (412db4 <lv_img_decoder_get_info+0x68>)
  412d74:	4b10      	ldr	r3, [pc, #64]	; (412db8 <lv_img_decoder_get_info+0x6c>)
  412d76:	4798      	blx	r3
  412d78:	b1c8      	cbz	r0, 412dae <lv_img_decoder_get_info+0x62>
  412d7a:	4604      	mov	r4, r0
        res = LV_RES_INV;
  412d7c:	f04f 0a00 	mov.w	sl, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  412d80:	f8df 8030 	ldr.w	r8, [pc, #48]	; 412db4 <lv_img_decoder_get_info+0x68>
  412d84:	4f0d      	ldr	r7, [pc, #52]	; (412dbc <lv_img_decoder_get_info+0x70>)
  412d86:	e005      	b.n	412d94 <lv_img_decoder_get_info+0x48>
        res = LV_RES_INV;
  412d88:	4655      	mov	r5, sl
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  412d8a:	4621      	mov	r1, r4
  412d8c:	4640      	mov	r0, r8
  412d8e:	47b8      	blx	r7
  412d90:	4604      	mov	r4, r0
  412d92:	b148      	cbz	r0, 412da8 <lv_img_decoder_get_info+0x5c>
        if(d->info_cb) {
  412d94:	6823      	ldr	r3, [r4, #0]
  412d96:	2b00      	cmp	r3, #0
  412d98:	d0f6      	beq.n	412d88 <lv_img_decoder_get_info+0x3c>
            res = d->info_cb(d, src, header);
  412d9a:	4632      	mov	r2, r6
  412d9c:	4649      	mov	r1, r9
  412d9e:	4620      	mov	r0, r4
  412da0:	4798      	blx	r3
  412da2:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
  412da4:	2801      	cmp	r0, #1
  412da6:	d1f0      	bne.n	412d8a <lv_img_decoder_get_info+0x3e>
}
  412da8:	4628      	mov	r0, r5
  412daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_res_t res = LV_RES_INV;
  412dae:	2500      	movs	r5, #0
  412db0:	e7fa      	b.n	412da8 <lv_img_decoder_get_info+0x5c>
  412db2:	bf00      	nop
  412db4:	2043a16c 	.word	0x2043a16c
  412db8:	004153ed 	.word	0x004153ed
  412dbc:	00415401 	.word	0x00415401

00412dc0 <lv_img_decoder_open>:
{
  412dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  412dc4:	4682      	mov	sl, r0
  412dc6:	4688      	mov	r8, r1
    dsc->color     = color;
  412dc8:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
  412dca:	4608      	mov	r0, r1
  412dcc:	4b23      	ldr	r3, [pc, #140]	; (412e5c <lv_img_decoder_open+0x9c>)
  412dce:	4798      	blx	r3
  412dd0:	f88a 000a 	strb.w	r0, [sl, #10]
    dsc->user_data = NULL;
  412dd4:	2300      	movs	r3, #0
  412dd6:	f8ca 301c 	str.w	r3, [sl, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  412dda:	2801      	cmp	r0, #1
  412ddc:	d00d      	beq.n	412dfa <lv_img_decoder_open+0x3a>
        dsc->src       = src;
  412dde:	f8ca 8004 	str.w	r8, [sl, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  412de2:	481f      	ldr	r0, [pc, #124]	; (412e60 <lv_img_decoder_open+0xa0>)
  412de4:	4b1f      	ldr	r3, [pc, #124]	; (412e64 <lv_img_decoder_open+0xa4>)
  412de6:	4798      	blx	r3
  412de8:	4604      	mov	r4, r0
  412dea:	2800      	cmp	r0, #0
  412dec:	d034      	beq.n	412e58 <lv_img_decoder_open+0x98>
  412dee:	2500      	movs	r5, #0
        res = d->info_cb(d, src, &dsc->header);
  412df0:	f10a 090c 	add.w	r9, sl, #12
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  412df4:	4f1a      	ldr	r7, [pc, #104]	; (412e60 <lv_img_decoder_open+0xa0>)
  412df6:	4e1c      	ldr	r6, [pc, #112]	; (412e68 <lv_img_decoder_open+0xa8>)
  412df8:	e010      	b.n	412e1c <lv_img_decoder_open+0x5c>
        size_t fnlen = strlen(src);
  412dfa:	4640      	mov	r0, r8
  412dfc:	4b1b      	ldr	r3, [pc, #108]	; (412e6c <lv_img_decoder_open+0xac>)
  412dfe:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
  412e00:	3001      	adds	r0, #1
  412e02:	4b1b      	ldr	r3, [pc, #108]	; (412e70 <lv_img_decoder_open+0xb0>)
  412e04:	4798      	blx	r3
  412e06:	f8ca 0004 	str.w	r0, [sl, #4]
        strcpy((char *)dsc->src, src);
  412e0a:	4641      	mov	r1, r8
  412e0c:	4b19      	ldr	r3, [pc, #100]	; (412e74 <lv_img_decoder_open+0xb4>)
  412e0e:	4798      	blx	r3
  412e10:	e7e7      	b.n	412de2 <lv_img_decoder_open+0x22>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  412e12:	4621      	mov	r1, r4
  412e14:	4638      	mov	r0, r7
  412e16:	47b0      	blx	r6
  412e18:	4604      	mov	r4, r0
  412e1a:	b1d0      	cbz	r0, 412e52 <lv_img_decoder_open+0x92>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
  412e1c:	6823      	ldr	r3, [r4, #0]
  412e1e:	2b00      	cmp	r3, #0
  412e20:	d0f7      	beq.n	412e12 <lv_img_decoder_open+0x52>
  412e22:	6862      	ldr	r2, [r4, #4]
  412e24:	2a00      	cmp	r2, #0
  412e26:	d0f4      	beq.n	412e12 <lv_img_decoder_open+0x52>
        res = d->info_cb(d, src, &dsc->header);
  412e28:	464a      	mov	r2, r9
  412e2a:	4641      	mov	r1, r8
  412e2c:	4620      	mov	r0, r4
  412e2e:	4798      	blx	r3
  412e30:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
  412e32:	2801      	cmp	r0, #1
  412e34:	d1ed      	bne.n	412e12 <lv_img_decoder_open+0x52>
        dsc->error_msg = NULL;
  412e36:	2300      	movs	r3, #0
  412e38:	f8ca 3018 	str.w	r3, [sl, #24]
        dsc->img_data  = NULL;
  412e3c:	f8ca 3010 	str.w	r3, [sl, #16]
        dsc->decoder   = d;
  412e40:	f8ca 4000 	str.w	r4, [sl]
        res = d->open_cb(d, dsc);
  412e44:	6863      	ldr	r3, [r4, #4]
  412e46:	4651      	mov	r1, sl
  412e48:	4620      	mov	r0, r4
  412e4a:	4798      	blx	r3
  412e4c:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
  412e4e:	2801      	cmp	r0, #1
  412e50:	d1df      	bne.n	412e12 <lv_img_decoder_open+0x52>
}
  412e52:	4628      	mov	r0, r5
  412e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_res_t res = LV_RES_INV;
  412e58:	2500      	movs	r5, #0
  412e5a:	e7fa      	b.n	412e52 <lv_img_decoder_open+0x92>
  412e5c:	0040ccd9 	.word	0x0040ccd9
  412e60:	2043a16c 	.word	0x2043a16c
  412e64:	004153ed 	.word	0x004153ed
  412e68:	00415401 	.word	0x00415401
  412e6c:	00423781 	.word	0x00423781
  412e70:	004157c9 	.word	0x004157c9
  412e74:	0042369d 	.word	0x0042369d

00412e78 <lv_img_decoder_read_line>:
{
  412e78:	b570      	push	{r4, r5, r6, lr}
  412e7a:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
  412e7c:	6806      	ldr	r6, [r0, #0]
  412e7e:	68b4      	ldr	r4, [r6, #8]
  412e80:	b154      	cbz	r4, 412e98 <lv_img_decoder_read_line+0x20>
  412e82:	461d      	mov	r5, r3
  412e84:	4613      	mov	r3, r2
  412e86:	460a      	mov	r2, r1
  412e88:	4601      	mov	r1, r0
  412e8a:	9806      	ldr	r0, [sp, #24]
  412e8c:	9001      	str	r0, [sp, #4]
  412e8e:	9500      	str	r5, [sp, #0]
  412e90:	4630      	mov	r0, r6
  412e92:	47a0      	blx	r4
}
  412e94:	b002      	add	sp, #8
  412e96:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
  412e98:	2000      	movs	r0, #0
  412e9a:	e7fb      	b.n	412e94 <lv_img_decoder_read_line+0x1c>

00412e9c <lv_img_decoder_close>:
    if(dsc->decoder) {
  412e9c:	6803      	ldr	r3, [r0, #0]
  412e9e:	b183      	cbz	r3, 412ec2 <lv_img_decoder_close+0x26>
{
  412ea0:	b510      	push	{r4, lr}
  412ea2:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
  412ea4:	68da      	ldr	r2, [r3, #12]
  412ea6:	b112      	cbz	r2, 412eae <lv_img_decoder_close+0x12>
  412ea8:	4601      	mov	r1, r0
  412eaa:	4618      	mov	r0, r3
  412eac:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  412eae:	7aa3      	ldrb	r3, [r4, #10]
  412eb0:	2b01      	cmp	r3, #1
  412eb2:	d000      	beq.n	412eb6 <lv_img_decoder_close+0x1a>
  412eb4:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
  412eb6:	6860      	ldr	r0, [r4, #4]
  412eb8:	4b02      	ldr	r3, [pc, #8]	; (412ec4 <lv_img_decoder_close+0x28>)
  412eba:	4798      	blx	r3
            dsc->src = NULL;
  412ebc:	2300      	movs	r3, #0
  412ebe:	6063      	str	r3, [r4, #4]
}
  412ec0:	e7f8      	b.n	412eb4 <lv_img_decoder_close+0x18>
  412ec2:	4770      	bx	lr
  412ec4:	004158b9 	.word	0x004158b9

00412ec8 <lv_img_decoder_create>:
{
  412ec8:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
  412eca:	480a      	ldr	r0, [pc, #40]	; (412ef4 <lv_img_decoder_create+0x2c>)
  412ecc:	4b0a      	ldr	r3, [pc, #40]	; (412ef8 <lv_img_decoder_create+0x30>)
  412ece:	4798      	blx	r3
  412ed0:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
  412ed2:	4b0a      	ldr	r3, [pc, #40]	; (412efc <lv_img_decoder_create+0x34>)
  412ed4:	4798      	blx	r3
  412ed6:	b130      	cbz	r0, 412ee6 <lv_img_decoder_create+0x1e>
    if(decoder == NULL) return NULL;
  412ed8:	b11c      	cbz	r4, 412ee2 <lv_img_decoder_create+0x1a>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
  412eda:	2110      	movs	r1, #16
  412edc:	4620      	mov	r0, r4
  412ede:	4b08      	ldr	r3, [pc, #32]	; (412f00 <lv_img_decoder_create+0x38>)
  412ee0:	4798      	blx	r3
}
  412ee2:	4620      	mov	r0, r4
  412ee4:	bd10      	pop	{r4, pc}
    LV_ASSERT_MEM(decoder);
  412ee6:	4622      	mov	r2, r4
  412ee8:	2300      	movs	r3, #0
  412eea:	4806      	ldr	r0, [pc, #24]	; (412f04 <lv_img_decoder_create+0x3c>)
  412eec:	4906      	ldr	r1, [pc, #24]	; (412f08 <lv_img_decoder_create+0x40>)
  412eee:	4788      	blx	r1
  412ef0:	e7fe      	b.n	412ef0 <lv_img_decoder_create+0x28>
  412ef2:	bf00      	nop
  412ef4:	2043a16c 	.word	0x2043a16c
  412ef8:	00415355 	.word	0x00415355
  412efc:	004150ef 	.word	0x004150ef
  412f00:	00415ead 	.word	0x00415ead
  412f04:	00425a60 	.word	0x00425a60
  412f08:	004150f9 	.word	0x004150f9

00412f0c <_lv_img_decoder_init>:
{
  412f0c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
  412f0e:	2110      	movs	r1, #16
  412f10:	480c      	ldr	r0, [pc, #48]	; (412f44 <_lv_img_decoder_init+0x38>)
  412f12:	4b0d      	ldr	r3, [pc, #52]	; (412f48 <_lv_img_decoder_init+0x3c>)
  412f14:	4798      	blx	r3
    decoder = lv_img_decoder_create();
  412f16:	4b0d      	ldr	r3, [pc, #52]	; (412f4c <_lv_img_decoder_init+0x40>)
  412f18:	4798      	blx	r3
    if(decoder == NULL) {
  412f1a:	b140      	cbz	r0, 412f2e <_lv_img_decoder_init+0x22>
    decoder->info_cb = info_cb;
  412f1c:	4a0c      	ldr	r2, [pc, #48]	; (412f50 <_lv_img_decoder_init+0x44>)
  412f1e:	6002      	str	r2, [r0, #0]
    decoder->open_cb = open_cb;
  412f20:	4a0c      	ldr	r2, [pc, #48]	; (412f54 <_lv_img_decoder_init+0x48>)
  412f22:	6042      	str	r2, [r0, #4]
    decoder->read_line_cb = read_line_cb;
  412f24:	4a0c      	ldr	r2, [pc, #48]	; (412f58 <_lv_img_decoder_init+0x4c>)
  412f26:	6082      	str	r2, [r0, #8]
    decoder->close_cb = close_cb;
  412f28:	4a0c      	ldr	r2, [pc, #48]	; (412f5c <_lv_img_decoder_init+0x50>)
  412f2a:	60c2      	str	r2, [r0, #12]
  412f2c:	bd08      	pop	{r3, pc}
        LV_ASSERT_MEM(decoder);
  412f2e:	4b0c      	ldr	r3, [pc, #48]	; (412f60 <_lv_img_decoder_init+0x54>)
  412f30:	4798      	blx	r3
  412f32:	2800      	cmp	r0, #0
  412f34:	d1fa      	bne.n	412f2c <_lv_img_decoder_init+0x20>
  412f36:	2200      	movs	r2, #0
  412f38:	2300      	movs	r3, #0
  412f3a:	480a      	ldr	r0, [pc, #40]	; (412f64 <_lv_img_decoder_init+0x58>)
  412f3c:	490a      	ldr	r1, [pc, #40]	; (412f68 <_lv_img_decoder_init+0x5c>)
  412f3e:	4788      	blx	r1
  412f40:	e7fe      	b.n	412f40 <_lv_img_decoder_init+0x34>
  412f42:	bf00      	nop
  412f44:	2043a16c 	.word	0x2043a16c
  412f48:	00415343 	.word	0x00415343
  412f4c:	00412ec9 	.word	0x00412ec9
  412f50:	004125c1 	.word	0x004125c1
  412f54:	004126c1 	.word	0x004126c1
  412f58:	00412971 	.word	0x00412971
  412f5c:	00412685 	.word	0x00412685
  412f60:	004150ef 	.word	0x004150ef
  412f64:	00425a60 	.word	0x00425a60
  412f68:	004150f9 	.word	0x004150f9

00412f6c <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
  412f6c:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
  412f6e:	6843      	ldr	r3, [r0, #4]
  412f70:	4798      	blx	r3
}
  412f72:	bd08      	pop	{r3, pc}

00412f74 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
  412f74:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
  412f76:	6804      	ldr	r4, [r0, #0]
  412f78:	47a0      	blx	r4
}
  412f7a:	bd10      	pop	{r4, pc}

00412f7c <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
  412f7c:	b510      	push	{r4, lr}
  412f7e:	b084      	sub	sp, #16
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
  412f80:	4613      	mov	r3, r2
  412f82:	460a      	mov	r2, r1
  412f84:	a901      	add	r1, sp, #4
  412f86:	4c04      	ldr	r4, [pc, #16]	; (412f98 <lv_font_get_glyph_width+0x1c>)
  412f88:	47a0      	blx	r4
    if(ret) return g.adv_w;
  412f8a:	b118      	cbz	r0, 412f94 <lv_font_get_glyph_width+0x18>
  412f8c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
  412f90:	b004      	add	sp, #16
  412f92:	bd10      	pop	{r4, pc}
    else return 0;
  412f94:	2000      	movs	r0, #0
  412f96:	e7fb      	b.n	412f90 <lv_font_get_glyph_width+0x14>
  412f98:	00412f75 	.word	0x00412f75

00412f9c <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
  412f9c:	7803      	ldrb	r3, [r0, #0]
  412f9e:	780a      	ldrb	r2, [r1, #0]
  412fa0:	4293      	cmp	r3, r2
  412fa2:	d001      	beq.n	412fa8 <kern_pair_8_compare+0xc>
  412fa4:	1a98      	subs	r0, r3, r2
  412fa6:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
  412fa8:	7840      	ldrb	r0, [r0, #1]
  412faa:	784b      	ldrb	r3, [r1, #1]
  412fac:	1ac0      	subs	r0, r0, r3

}
  412fae:	4770      	bx	lr

00412fb0 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
  412fb0:	8803      	ldrh	r3, [r0, #0]
  412fb2:	880a      	ldrh	r2, [r1, #0]
  412fb4:	4293      	cmp	r3, r2
  412fb6:	d001      	beq.n	412fbc <kern_pair_16_compare+0xc>
  412fb8:	1a98      	subs	r0, r3, r2
  412fba:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
  412fbc:	8840      	ldrh	r0, [r0, #2]
  412fbe:	884b      	ldrh	r3, [r1, #2]
  412fc0:	1ac0      	subs	r0, r0, r3
}
  412fc2:	4770      	bx	lr

00412fc4 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
  412fc4:	8800      	ldrh	r0, [r0, #0]
  412fc6:	880b      	ldrh	r3, [r1, #0]
}
  412fc8:	1ac0      	subs	r0, r0, r3
  412fca:	4770      	bx	lr

00412fcc <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
  412fcc:	460b      	mov	r3, r1
  412fce:	2900      	cmp	r1, #0
  412fd0:	d06c      	beq.n	4130ac <get_glyph_dsc_id+0xe0>
{
  412fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  412fd4:	b085      	sub	sp, #20
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  412fd6:	6904      	ldr	r4, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  412fd8:	6962      	ldr	r2, [r4, #20]
  412fda:	4291      	cmp	r1, r2
  412fdc:	d019      	beq.n	413012 <get_glyph_dsc_id+0x46>
    for(i = 0; i < fdsc->cmap_num; i++) {
  412fde:	8a62      	ldrh	r2, [r4, #18]
  412fe0:	f3c2 0e08 	ubfx	lr, r2, #0, #9
  412fe4:	f1be 0f00 	cmp.w	lr, #0
  412fe8:	d05c      	beq.n	4130a4 <get_glyph_dsc_id+0xd8>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  412fea:	68a1      	ldr	r1, [r4, #8]
  412fec:	6808      	ldr	r0, [r1, #0]
  412fee:	1a1a      	subs	r2, r3, r0
        if(rcp > fdsc->cmaps[i].range_length) continue;
  412ff0:	8888      	ldrh	r0, [r1, #4]
  412ff2:	4282      	cmp	r2, r0
  412ff4:	d80f      	bhi.n	413016 <get_glyph_dsc_id+0x4a>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  412ff6:	2600      	movs	r6, #0
  412ff8:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
  412ffa:	7c8b      	ldrb	r3, [r1, #18]
  412ffc:	2b02      	cmp	r3, #2
  412ffe:	d01c      	beq.n	41303a <get_glyph_dsc_id+0x6e>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
  413000:	b9f3      	cbnz	r3, 413040 <get_glyph_dsc_id+0x74>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
  413002:	68cb      	ldr	r3, [r1, #12]
  413004:	5c98      	ldrb	r0, [r3, r2]
  413006:	88cb      	ldrh	r3, [r1, #6]
  413008:	4418      	add	r0, r3
        fdsc->last_letter = letter;
  41300a:	6165      	str	r5, [r4, #20]
        fdsc->last_glyph_id = glyph_id;
  41300c:	61a0      	str	r0, [r4, #24]
}
  41300e:	b005      	add	sp, #20
  413010:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  413012:	69a0      	ldr	r0, [r4, #24]
  413014:	e7fb      	b.n	41300e <get_glyph_dsc_id+0x42>
        if(rcp > fdsc->cmaps[i].range_length) continue;
  413016:	2500      	movs	r5, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
  413018:	3501      	adds	r5, #1
  41301a:	b2ad      	uxth	r5, r5
  41301c:	4575      	cmp	r5, lr
  41301e:	da41      	bge.n	4130a4 <get_glyph_dsc_id+0xd8>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  413020:	eb05 0085 	add.w	r0, r5, r5, lsl #2
  413024:	0082      	lsls	r2, r0, #2
  413026:	4616      	mov	r6, r2
  413028:	188f      	adds	r7, r1, r2
  41302a:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
  41302e:	1a9a      	subs	r2, r3, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
  413030:	88b8      	ldrh	r0, [r7, #4]
  413032:	4282      	cmp	r2, r0
  413034:	d8f0      	bhi.n	413018 <get_glyph_dsc_id+0x4c>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  413036:	4639      	mov	r1, r7
  413038:	e7de      	b.n	412ff8 <get_glyph_dsc_id+0x2c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
  41303a:	88c8      	ldrh	r0, [r1, #6]
  41303c:	4410      	add	r0, r2
  41303e:	e7e4      	b.n	41300a <get_glyph_dsc_id+0x3e>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
  413040:	2b03      	cmp	r3, #3
  413042:	d003      	beq.n	41304c <get_glyph_dsc_id+0x80>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
  413044:	2b01      	cmp	r3, #1
  413046:	d017      	beq.n	413078 <get_glyph_dsc_id+0xac>
        uint32_t glyph_id = 0;
  413048:	2000      	movs	r0, #0
  41304a:	e7de      	b.n	41300a <get_glyph_dsc_id+0x3e>
            uint16_t key = rcp;
  41304c:	a804      	add	r0, sp, #16
  41304e:	f820 2d02 	strh.w	r2, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  413052:	8a0a      	ldrh	r2, [r1, #16]
  413054:	6889      	ldr	r1, [r1, #8]
  413056:	4b16      	ldr	r3, [pc, #88]	; (4130b0 <get_glyph_dsc_id+0xe4>)
  413058:	9300      	str	r3, [sp, #0]
  41305a:	2302      	movs	r3, #2
  41305c:	4f15      	ldr	r7, [pc, #84]	; (4130b4 <get_glyph_dsc_id+0xe8>)
  41305e:	47b8      	blx	r7
            if(p) {
  413060:	4603      	mov	r3, r0
  413062:	b138      	cbz	r0, 413074 <get_glyph_dsc_id+0xa8>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  413064:	68a2      	ldr	r2, [r4, #8]
  413066:	4416      	add	r6, r2
  413068:	68b0      	ldr	r0, [r6, #8]
  41306a:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
  41306c:	88f3      	ldrh	r3, [r6, #6]
  41306e:	eb03 0060 	add.w	r0, r3, r0, asr #1
  413072:	e7ca      	b.n	41300a <get_glyph_dsc_id+0x3e>
        uint32_t glyph_id = 0;
  413074:	2000      	movs	r0, #0
  413076:	e7c8      	b.n	41300a <get_glyph_dsc_id+0x3e>
            uint16_t key = rcp;
  413078:	a804      	add	r0, sp, #16
  41307a:	f820 2d02 	strh.w	r2, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  41307e:	8a0a      	ldrh	r2, [r1, #16]
  413080:	6889      	ldr	r1, [r1, #8]
  413082:	4b0b      	ldr	r3, [pc, #44]	; (4130b0 <get_glyph_dsc_id+0xe4>)
  413084:	9300      	str	r3, [sp, #0]
  413086:	2302      	movs	r3, #2
  413088:	4f0a      	ldr	r7, [pc, #40]	; (4130b4 <get_glyph_dsc_id+0xe8>)
  41308a:	47b8      	blx	r7
            if(p) {
  41308c:	b140      	cbz	r0, 4130a0 <get_glyph_dsc_id+0xd4>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  41308e:	68a3      	ldr	r3, [r4, #8]
  413090:	441e      	add	r6, r3
  413092:	68b3      	ldr	r3, [r6, #8]
  413094:	1ac2      	subs	r2, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
  413096:	68f3      	ldr	r3, [r6, #12]
  413098:	5a98      	ldrh	r0, [r3, r2]
  41309a:	88f3      	ldrh	r3, [r6, #6]
  41309c:	4418      	add	r0, r3
  41309e:	e7b4      	b.n	41300a <get_glyph_dsc_id+0x3e>
  4130a0:	2000      	movs	r0, #0
  4130a2:	e7b2      	b.n	41300a <get_glyph_dsc_id+0x3e>
    fdsc->last_letter = letter;
  4130a4:	6163      	str	r3, [r4, #20]
    fdsc->last_glyph_id = 0;
  4130a6:	2000      	movs	r0, #0
  4130a8:	61a0      	str	r0, [r4, #24]
    return 0;
  4130aa:	e7b0      	b.n	41300e <get_glyph_dsc_id+0x42>
    if(letter == '\0') return 0;
  4130ac:	4608      	mov	r0, r1
  4130ae:	4770      	bx	lr
  4130b0:	00412fc5 	.word	0x00412fc5
  4130b4:	004173a9 	.word	0x004173a9

004130b8 <lv_font_get_bitmap_fmt_txt>:
{
  4130b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4130bc:	b09f      	sub	sp, #124	; 0x7c
    if(unicode_letter == '\t') unicode_letter = ' ';
  4130be:	2909      	cmp	r1, #9
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  4130c0:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  4130c2:	bf08      	it	eq
  4130c4:	2120      	moveq	r1, #32
  4130c6:	4ba2      	ldr	r3, [pc, #648]	; (413350 <lv_font_get_bitmap_fmt_txt+0x298>)
  4130c8:	4798      	blx	r3
    if(!gid) return NULL;
  4130ca:	2800      	cmp	r0, #0
  4130cc:	f000 86e6 	beq.w	413e9c <lv_font_get_bitmap_fmt_txt+0xde4>
  4130d0:	4680      	mov	r8, r0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  4130d2:	686f      	ldr	r7, [r5, #4]
  4130d4:	eb07 06c0 	add.w	r6, r7, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
  4130d8:	7ceb      	ldrb	r3, [r5, #19]
  4130da:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  4130de:	d010      	beq.n	413102 <lv_font_get_bitmap_fmt_txt+0x4a>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
  4130e0:	7933      	ldrb	r3, [r6, #4]
  4130e2:	7974      	ldrb	r4, [r6, #5]
  4130e4:	fb04 f403 	mul.w	r4, r4, r3
        if(gsize == 0) return NULL;
  4130e8:	2c00      	cmp	r4, #0
  4130ea:	f000 86d9 	beq.w	413ea0 <lv_font_get_bitmap_fmt_txt+0xde8>
        switch(fdsc->bpp) {
  4130ee:	7ceb      	ldrb	r3, [r5, #19]
  4130f0:	f3c3 0343 	ubfx	r3, r3, #1, #4
  4130f4:	3b01      	subs	r3, #1
  4130f6:	2b03      	cmp	r3, #3
  4130f8:	d80d      	bhi.n	413116 <lv_font_get_bitmap_fmt_txt+0x5e>
  4130fa:	e8df f003 	tbb	[pc, r3]
  4130fe:	870a      	.short	0x870a
  413100:	8d8a      	.short	0x8d8a
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
  413102:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
  413106:	f3c3 0313 	ubfx	r3, r3, #0, #20
  41310a:	6828      	ldr	r0, [r5, #0]
  41310c:	4418      	add	r0, r3
  41310e:	f000 bebd 	b.w	413e8c <lv_font_get_bitmap_fmt_txt+0xdd4>
                buf_size = (gsize + 7) >> 3;
  413112:	3407      	adds	r4, #7
  413114:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
  413116:	4b8f      	ldr	r3, [pc, #572]	; (413354 <lv_font_get_bitmap_fmt_txt+0x29c>)
  413118:	6818      	ldr	r0, [r3, #0]
  41311a:	4b8f      	ldr	r3, [pc, #572]	; (413358 <lv_font_get_bitmap_fmt_txt+0x2a0>)
  41311c:	4798      	blx	r3
  41311e:	4284      	cmp	r4, r0
  413120:	d90e      	bls.n	413140 <lv_font_get_bitmap_fmt_txt+0x88>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
  413122:	4621      	mov	r1, r4
  413124:	4b8b      	ldr	r3, [pc, #556]	; (413354 <lv_font_get_bitmap_fmt_txt+0x29c>)
  413126:	6818      	ldr	r0, [r3, #0]
  413128:	4b8c      	ldr	r3, [pc, #560]	; (41335c <lv_font_get_bitmap_fmt_txt+0x2a4>)
  41312a:	4798      	blx	r3
  41312c:	4604      	mov	r4, r0
            LV_ASSERT_MEM(tmp);
  41312e:	4b8c      	ldr	r3, [pc, #560]	; (413360 <lv_font_get_bitmap_fmt_txt+0x2a8>)
  413130:	4798      	blx	r3
  413132:	2800      	cmp	r0, #0
  413134:	d073      	beq.n	41321e <lv_font_get_bitmap_fmt_txt+0x166>
            if(tmp == NULL) return NULL;
  413136:	2c00      	cmp	r4, #0
  413138:	f000 86b4 	beq.w	413ea4 <lv_font_get_bitmap_fmt_txt+0xdec>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
  41313c:	4b85      	ldr	r3, [pc, #532]	; (413354 <lv_font_get_bitmap_fmt_txt+0x29c>)
  41313e:	601c      	str	r4, [r3, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
  413140:	7ceb      	ldrb	r3, [r5, #19]
  413142:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
  413146:	4614      	mov	r4, r2
  413148:	9212      	str	r2, [sp, #72]	; 0x48
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  41314a:	f857 1038 	ldr.w	r1, [r7, r8, lsl #3]
  41314e:	f3c1 0113 	ubfx	r1, r1, #0, #20
  413152:	682a      	ldr	r2, [r5, #0]
  413154:	440a      	add	r2, r1
  413156:	497f      	ldr	r1, [pc, #508]	; (413354 <lv_font_get_bitmap_fmt_txt+0x29c>)
  413158:	f8d1 9000 	ldr.w	r9, [r1]
  41315c:	7931      	ldrb	r1, [r6, #4]
  41315e:	4608      	mov	r0, r1
  413160:	910d      	str	r1, [sp, #52]	; 0x34
  413162:	b20d      	sxth	r5, r1
  413164:	9510      	str	r5, [sp, #64]	; 0x40
  413166:	7975      	ldrb	r5, [r6, #5]
  413168:	9511      	str	r5, [sp, #68]	; 0x44
                   (uint8_t)fdsc->bpp, prefilter);
  41316a:	f3c3 0343 	ubfx	r3, r3, #1, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  41316e:	b2d9      	uxtb	r1, r3
  413170:	910e      	str	r1, [sp, #56]	; 0x38
    if(bpp == 3) wr_size = 4;
  413172:	2903      	cmp	r1, #3
  413174:	bf14      	ite	ne
  413176:	460d      	movne	r5, r1
  413178:	2504      	moveq	r5, #4
  41317a:	9505      	str	r5, [sp, #20]
    rle_in = in;
  41317c:	4979      	ldr	r1, [pc, #484]	; (413364 <lv_font_get_bitmap_fmt_txt+0x2ac>)
  41317e:	600a      	str	r2, [r1, #0]
    rle_bpp = bpp;
  413180:	4a79      	ldr	r2, [pc, #484]	; (413368 <lv_font_get_bitmap_fmt_txt+0x2b0>)
  413182:	7013      	strb	r3, [r2, #0]
    rle_state = RLE_STATE_SINGLE;
  413184:	2300      	movs	r3, #0
  413186:	4a79      	ldr	r2, [pc, #484]	; (41336c <lv_font_get_bitmap_fmt_txt+0x2b4>)
  413188:	7013      	strb	r3, [r2, #0]
    rle_rdp = 0;
  41318a:	4a79      	ldr	r2, [pc, #484]	; (413370 <lv_font_get_bitmap_fmt_txt+0x2b8>)
  41318c:	6013      	str	r3, [r2, #0]
    rle_prev_v = 0;
  41318e:	4a79      	ldr	r2, [pc, #484]	; (413374 <lv_font_get_bitmap_fmt_txt+0x2bc>)
  413190:	7013      	strb	r3, [r2, #0]
    rle_cnt = 0;
  413192:	4a79      	ldr	r2, [pc, #484]	; (413378 <lv_font_get_bitmap_fmt_txt+0x2c0>)
  413194:	7013      	strb	r3, [r2, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
  413196:	4b79      	ldr	r3, [pc, #484]	; (41337c <lv_font_get_bitmap_fmt_txt+0x2c4>)
  413198:	4798      	blx	r3
  41319a:	9013      	str	r0, [sp, #76]	; 0x4c
    if(prefilter) {
  41319c:	2c40      	cmp	r4, #64	; 0x40
  41319e:	d044      	beq.n	41322a <lv_font_get_bitmap_fmt_txt+0x172>
    uint8_t * line_buf2 = NULL;
  4131a0:	2300      	movs	r3, #0
  4131a2:	9315      	str	r3, [sp, #84]	; 0x54
    for(i = 0; i < w; i++) {
  4131a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4131a6:	2b00      	cmp	r3, #0
  4131a8:	f000 8261 	beq.w	41366e <lv_font_get_bitmap_fmt_txt+0x5b6>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4131ac:	4b6d      	ldr	r3, [pc, #436]	; (413364 <lv_font_get_bitmap_fmt_txt+0x2ac>)
  4131ae:	681f      	ldr	r7, [r3, #0]
  4131b0:	4b6d      	ldr	r3, [pc, #436]	; (413368 <lv_font_get_bitmap_fmt_txt+0x2b0>)
  4131b2:	781b      	ldrb	r3, [r3, #0]
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4131b4:	2101      	movs	r1, #1
  4131b6:	4099      	lsls	r1, r3
  4131b8:	3901      	subs	r1, #1
    if(bit_pos + len >= 8) {
  4131ba:	4698      	mov	r8, r3
  4131bc:	4a6c      	ldr	r2, [pc, #432]	; (413370 <lv_font_get_bitmap_fmt_txt+0x2b8>)
  4131be:	6815      	ldr	r5, [r2, #0]
  4131c0:	4a6d      	ldr	r2, [pc, #436]	; (413378 <lv_font_get_bitmap_fmt_txt+0x2c0>)
  4131c2:	7814      	ldrb	r4, [r2, #0]
  4131c4:	f1c3 0208 	rsb	r2, r3, #8
  4131c8:	9208      	str	r2, [sp, #32]
  4131ca:	f1c3 0210 	rsb	r2, r3, #16
  4131ce:	9207      	str	r2, [sp, #28]
  4131d0:	4a68      	ldr	r2, [pc, #416]	; (413374 <lv_font_get_bitmap_fmt_txt+0x2bc>)
  4131d2:	7812      	ldrb	r2, [r2, #0]
  4131d4:	9201      	str	r2, [sp, #4]
  4131d6:	4a65      	ldr	r2, [pc, #404]	; (41336c <lv_font_get_bitmap_fmt_txt+0x2b4>)
  4131d8:	f892 c000 	ldrb.w	ip, [r2]
  4131dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4131de:	f100 3eff 	add.w	lr, r0, #4294967295
  4131e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4131e4:	3a01      	subs	r2, #1
  4131e6:	b292      	uxth	r2, r2
  4131e8:	4616      	mov	r6, r2
  4131ea:	920a      	str	r2, [sp, #40]	; 0x28
  4131ec:	4602      	mov	r2, r0
  4131ee:	eb02 0b06 	add.w	fp, r2, r6
  4131f2:	4676      	mov	r6, lr
  4131f4:	2200      	movs	r2, #0
  4131f6:	9203      	str	r2, [sp, #12]
  4131f8:	9206      	str	r2, [sp, #24]
    switch(len) {
  4131fa:	f103 3aff 	add.w	sl, r3, #4294967295
            rle_rdp += rle_bpp;
  4131fe:	2301      	movs	r3, #1
  413200:	9302      	str	r3, [sp, #8]
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413202:	b2cb      	uxtb	r3, r1
  413204:	9309      	str	r3, [sp, #36]	; 0x24
            bit_mask = 0x3;
  413206:	9204      	str	r2, [sp, #16]
  413208:	4661      	mov	r1, ip
  41320a:	e031      	b.n	413270 <lv_font_get_bitmap_fmt_txt+0x1b8>
                buf_size = (gsize + 3) >> 2;
  41320c:	3403      	adds	r4, #3
  41320e:	08a4      	lsrs	r4, r4, #2
                break;
  413210:	e781      	b.n	413116 <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  413212:	3401      	adds	r4, #1
  413214:	0864      	lsrs	r4, r4, #1
                break;
  413216:	e77e      	b.n	413116 <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  413218:	3401      	adds	r4, #1
  41321a:	0864      	lsrs	r4, r4, #1
                break;
  41321c:	e77b      	b.n	413116 <lv_font_get_bitmap_fmt_txt+0x5e>
            LV_ASSERT_MEM(tmp);
  41321e:	4622      	mov	r2, r4
  413220:	2300      	movs	r3, #0
  413222:	4857      	ldr	r0, [pc, #348]	; (413380 <lv_font_get_bitmap_fmt_txt+0x2c8>)
  413224:	4957      	ldr	r1, [pc, #348]	; (413384 <lv_font_get_bitmap_fmt_txt+0x2cc>)
  413226:	4788      	blx	r1
  413228:	e7fe      	b.n	413228 <lv_font_get_bitmap_fmt_txt+0x170>
        line_buf2 = _lv_mem_buf_get(w);
  41322a:	980d      	ldr	r0, [sp, #52]	; 0x34
  41322c:	4b53      	ldr	r3, [pc, #332]	; (41337c <lv_font_get_bitmap_fmt_txt+0x2c4>)
  41322e:	4798      	blx	r3
  413230:	9015      	str	r0, [sp, #84]	; 0x54
  413232:	e7b7      	b.n	4131a4 <lv_font_get_bitmap_fmt_txt+0xec>
            bit_mask = 0x3;
  413234:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
  413236:	08eb      	lsrs	r3, r5, #3
    bit_pos = bit_pos & 0x7;
  413238:	f005 0207 	and.w	r2, r5, #7
    if(bit_pos + len >= 8) {
  41323c:	eb02 0c08 	add.w	ip, r2, r8
  413240:	f1bc 0f07 	cmp.w	ip, #7
  413244:	d836      	bhi.n	4132b4 <lv_font_get_bitmap_fmt_txt+0x1fc>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413246:	f817 c003 	ldrb.w	ip, [r7, r3]
  41324a:	9b08      	ldr	r3, [sp, #32]
  41324c:	1a9a      	subs	r2, r3, r2
  41324e:	fa4c f302 	asr.w	r3, ip, r2
  413252:	4003      	ands	r3, r0
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413254:	b115      	cbz	r5, 41325c <lv_font_get_bitmap_fmt_txt+0x1a4>
  413256:	9a01      	ldr	r2, [sp, #4]
  413258:	4293      	cmp	r3, r2
  41325a:	d039      	beq.n	4132d0 <lv_font_get_bitmap_fmt_txt+0x218>
        rle_rdp += rle_bpp;
  41325c:	4445      	add	r5, r8
        rle_prev_v = ret;
  41325e:	9301      	str	r3, [sp, #4]
        rle_rdp += rle_bpp;
  413260:	2201      	movs	r2, #1
  413262:	9802      	ldr	r0, [sp, #8]
  413264:	9004      	str	r0, [sp, #16]
        out[i] = rle_next();
  413266:	f806 3f01 	strb.w	r3, [r6, #1]!
    for(i = 0; i < w; i++) {
  41326a:	455e      	cmp	r6, fp
  41326c:	f000 8155 	beq.w	41351a <lv_font_get_bitmap_fmt_txt+0x462>
    if(rle_state == RLE_STATE_SINGLE) {
  413270:	bba9      	cbnz	r1, 4132de <lv_font_get_bitmap_fmt_txt+0x226>
    switch(len) {
  413272:	f1ba 0f07 	cmp.w	sl, #7
  413276:	d819      	bhi.n	4132ac <lv_font_get_bitmap_fmt_txt+0x1f4>
  413278:	a301      	add	r3, pc, #4	; (adr r3, 413280 <lv_font_get_bitmap_fmt_txt+0x1c8>)
  41327a:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
  41327e:	bf00      	nop
  413280:	004132b1 	.word	0x004132b1
  413284:	00413235 	.word	0x00413235
  413288:	004132a1 	.word	0x004132a1
  41328c:	004132a5 	.word	0x004132a5
  413290:	004132ad 	.word	0x004132ad
  413294:	004132ad 	.word	0x004132ad
  413298:	004132ad 	.word	0x004132ad
  41329c:	004132a9 	.word	0x004132a9
            bit_mask = 0x7;
  4132a0:	2007      	movs	r0, #7
  4132a2:	e7c8      	b.n	413236 <lv_font_get_bitmap_fmt_txt+0x17e>
            bit_mask = 0xF;
  4132a4:	200f      	movs	r0, #15
  4132a6:	e7c6      	b.n	413236 <lv_font_get_bitmap_fmt_txt+0x17e>
            bit_mask = 0xFF;
  4132a8:	20ff      	movs	r0, #255	; 0xff
  4132aa:	e7c4      	b.n	413236 <lv_font_get_bitmap_fmt_txt+0x17e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4132ac:	9809      	ldr	r0, [sp, #36]	; 0x24
  4132ae:	e7c2      	b.n	413236 <lv_font_get_bitmap_fmt_txt+0x17e>
            bit_mask = 0x1;
  4132b0:	2001      	movs	r0, #1
  4132b2:	e7c0      	b.n	413236 <lv_font_get_bitmap_fmt_txt+0x17e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4132b4:	f817 c003 	ldrb.w	ip, [r7, r3]
  4132b8:	443b      	add	r3, r7
  4132ba:	785b      	ldrb	r3, [r3, #1]
  4132bc:	eb03 230c 	add.w	r3, r3, ip, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4132c0:	fa1f fc83 	uxth.w	ip, r3
  4132c4:	9b07      	ldr	r3, [sp, #28]
  4132c6:	1a9a      	subs	r2, r3, r2
  4132c8:	fa4c f302 	asr.w	r3, ip, r2
  4132cc:	4003      	ands	r3, r0
  4132ce:	e7c1      	b.n	413254 <lv_font_get_bitmap_fmt_txt+0x19c>
        if(rle_rdp != 0 && rle_prev_v == ret) {
  4132d0:	2201      	movs	r2, #1
  4132d2:	9203      	str	r2, [sp, #12]
            rle_cnt = 0;
  4132d4:	2400      	movs	r4, #0
        if(rle_rdp != 0 && rle_prev_v == ret) {
  4132d6:	9a02      	ldr	r2, [sp, #8]
  4132d8:	9206      	str	r2, [sp, #24]
            rle_state = RLE_STATE_REPEATE;
  4132da:	4611      	mov	r1, r2
  4132dc:	e7be      	b.n	41325c <lv_font_get_bitmap_fmt_txt+0x1a4>
    else if(rle_state == RLE_STATE_REPEATE) {
  4132de:	2901      	cmp	r1, #1
  4132e0:	d004      	beq.n	4132ec <lv_font_get_bitmap_fmt_txt+0x234>
    else if(rle_state == RLE_STATE_COUNTER) {
  4132e2:	2902      	cmp	r1, #2
  4132e4:	f000 80d3 	beq.w	41348e <lv_font_get_bitmap_fmt_txt+0x3d6>
    uint8_t ret = 0;
  4132e8:	2300      	movs	r3, #0
  4132ea:	e7bc      	b.n	413266 <lv_font_get_bitmap_fmt_txt+0x1ae>
    uint32_t byte_pos = bit_pos >> 3;
  4132ec:	08eb      	lsrs	r3, r5, #3
    bit_pos = bit_pos & 0x7;
  4132ee:	f005 0207 	and.w	r2, r5, #7
    if(bit_pos + len >= 8) {
  4132f2:	f102 0c01 	add.w	ip, r2, #1
  4132f6:	f1bc 0f07 	cmp.w	ip, #7
  4132fa:	d813      	bhi.n	413324 <lv_font_get_bitmap_fmt_txt+0x26c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4132fc:	5cfb      	ldrb	r3, [r7, r3]
  4132fe:	43d2      	mvns	r2, r2
  413300:	3208      	adds	r2, #8
  413302:	4113      	asrs	r3, r2
  413304:	f003 0301 	and.w	r3, r3, #1
        rle_cnt++;
  413308:	3401      	adds	r4, #1
  41330a:	b2e4      	uxtb	r4, r4
        rle_rdp += 1;
  41330c:	1c6a      	adds	r2, r5, #1
        if(v == 1) {
  41330e:	b9b3      	cbnz	r3, 41333e <lv_font_get_bitmap_fmt_txt+0x286>
    switch(len) {
  413310:	f1ba 0f07 	cmp.w	sl, #7
  413314:	f200 80ab 	bhi.w	41346e <lv_font_get_bitmap_fmt_txt+0x3b6>
  413318:	e8df f00a 	tbb	[pc, sl]
  41331c:	a5a38aab 	.word	0xa5a38aab
  413320:	a7a9a9a9 	.word	0xa7a9a9a9
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413324:	f817 c003 	ldrb.w	ip, [r7, r3]
  413328:	443b      	add	r3, r7
  41332a:	785b      	ldrb	r3, [r3, #1]
  41332c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413330:	b29b      	uxth	r3, r3
  413332:	43d2      	mvns	r2, r2
  413334:	3210      	adds	r2, #16
  413336:	4113      	asrs	r3, r2
  413338:	f003 0301 	and.w	r3, r3, #1
  41333c:	e7e4      	b.n	413308 <lv_font_get_bitmap_fmt_txt+0x250>
            if(rle_cnt == 11) {
  41333e:	2c0b      	cmp	r4, #11
  413340:	d022      	beq.n	413388 <lv_font_get_bitmap_fmt_txt+0x2d0>
        rle_rdp += 1;
  413342:	4615      	mov	r5, r2
            ret = rle_prev_v;
  413344:	9b01      	ldr	r3, [sp, #4]
            if(rle_cnt == 11) {
  413346:	2201      	movs	r2, #1
  413348:	9203      	str	r2, [sp, #12]
  41334a:	9a02      	ldr	r2, [sp, #8]
  41334c:	e78b      	b.n	413266 <lv_font_get_bitmap_fmt_txt+0x1ae>
  41334e:	bf00      	nop
  413350:	00412fcd 	.word	0x00412fcd
  413354:	2043a150 	.word	0x2043a150
  413358:	00415941 	.word	0x00415941
  41335c:	00415c61 	.word	0x00415c61
  413360:	004150ef 	.word	0x004150ef
  413364:	2040c6e4 	.word	0x2040c6e4
  413368:	2040c6e0 	.word	0x2040c6e0
  41336c:	2040c6f0 	.word	0x2040c6f0
  413370:	2040c6ec 	.word	0x2040c6ec
  413374:	2040c6e8 	.word	0x2040c6e8
  413378:	2040c6e1 	.word	0x2040c6e1
  41337c:	00415cd9 	.word	0x00415cd9
  413380:	00425a60 	.word	0x00425a60
  413384:	004150f9 	.word	0x004150f9
    uint32_t byte_pos = bit_pos >> 3;
  413388:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
  41338a:	f002 0207 	and.w	r2, r2, #7
    if(bit_pos + len >= 8) {
  41338e:	1d91      	adds	r1, r2, #6
  413390:	2907      	cmp	r1, #7
  413392:	d813      	bhi.n	4133bc <lv_font_get_bitmap_fmt_txt+0x304>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413394:	5cfc      	ldrb	r4, [r7, r3]
  413396:	f1c2 0202 	rsb	r2, r2, #2
  41339a:	fa44 f202 	asr.w	r2, r4, r2
  41339e:	f002 043f 	and.w	r4, r2, #63	; 0x3f
                rle_rdp += 6;
  4133a2:	3507      	adds	r5, #7
                if(rle_cnt != 0) {
  4133a4:	2c00      	cmp	r4, #0
  4133a6:	f040 80ad 	bne.w	413504 <lv_font_get_bitmap_fmt_txt+0x44c>
    switch(len) {
  4133aa:	f1ba 0f07 	cmp.w	sl, #7
  4133ae:	d826      	bhi.n	4133fe <lv_font_get_bitmap_fmt_txt+0x346>
  4133b0:	e8df f00a 	tbb	[pc, sl]
  4133b4:	211f1027 	.word	0x211f1027
  4133b8:	23252525 	.word	0x23252525
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4133bc:	5cf9      	ldrb	r1, [r7, r3]
  4133be:	443b      	add	r3, r7
  4133c0:	785c      	ldrb	r4, [r3, #1]
  4133c2:	eb04 2401 	add.w	r4, r4, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4133c6:	b2a4      	uxth	r4, r4
  4133c8:	f1c2 020a 	rsb	r2, r2, #10
  4133cc:	4114      	asrs	r4, r2
  4133ce:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  4133d2:	e7e6      	b.n	4133a2 <lv_font_get_bitmap_fmt_txt+0x2ea>
            bit_mask = 0x3;
  4133d4:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
  4133d6:	08ea      	lsrs	r2, r5, #3
    bit_pos = bit_pos & 0x7;
  4133d8:	f005 0307 	and.w	r3, r5, #7
    if(bit_pos + len >= 8) {
  4133dc:	eb03 0108 	add.w	r1, r3, r8
  4133e0:	2907      	cmp	r1, #7
  4133e2:	d810      	bhi.n	413406 <lv_font_get_bitmap_fmt_txt+0x34e>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4133e4:	5cba      	ldrb	r2, [r7, r2]
  4133e6:	9908      	ldr	r1, [sp, #32]
  4133e8:	1acb      	subs	r3, r1, r3
  4133ea:	fa42 f303 	asr.w	r3, r2, r3
  4133ee:	4003      	ands	r3, r0
  4133f0:	e014      	b.n	41341c <lv_font_get_bitmap_fmt_txt+0x364>
            bit_mask = 0x7;
  4133f2:	2007      	movs	r0, #7
  4133f4:	e7ef      	b.n	4133d6 <lv_font_get_bitmap_fmt_txt+0x31e>
            bit_mask = 0xF;
  4133f6:	200f      	movs	r0, #15
  4133f8:	e7ed      	b.n	4133d6 <lv_font_get_bitmap_fmt_txt+0x31e>
            bit_mask = 0xFF;
  4133fa:	20ff      	movs	r0, #255	; 0xff
  4133fc:	e7eb      	b.n	4133d6 <lv_font_get_bitmap_fmt_txt+0x31e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4133fe:	9809      	ldr	r0, [sp, #36]	; 0x24
  413400:	e7e9      	b.n	4133d6 <lv_font_get_bitmap_fmt_txt+0x31e>
            bit_mask = 0x1;
  413402:	2001      	movs	r0, #1
  413404:	e7e7      	b.n	4133d6 <lv_font_get_bitmap_fmt_txt+0x31e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413406:	5cb9      	ldrb	r1, [r7, r2]
  413408:	443a      	add	r2, r7
  41340a:	7852      	ldrb	r2, [r2, #1]
  41340c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413410:	b292      	uxth	r2, r2
  413412:	9907      	ldr	r1, [sp, #28]
  413414:	1acb      	subs	r3, r1, r3
  413416:	fa42 f303 	asr.w	r3, r2, r3
  41341a:	4003      	ands	r3, r0
                    rle_rdp += rle_bpp;
  41341c:	4445      	add	r5, r8
                    rle_prev_v = ret;
  41341e:	9301      	str	r3, [sp, #4]
                    rle_rdp += rle_bpp;
  413420:	2201      	movs	r2, #1
  413422:	9203      	str	r2, [sp, #12]
  413424:	9802      	ldr	r0, [sp, #8]
  413426:	4602      	mov	r2, r0
  413428:	9006      	str	r0, [sp, #24]
                    rle_state = RLE_STATE_SINGLE;
  41342a:	2100      	movs	r1, #0
                    rle_rdp += rle_bpp;
  41342c:	9004      	str	r0, [sp, #16]
  41342e:	e71a      	b.n	413266 <lv_font_get_bitmap_fmt_txt+0x1ae>
            bit_mask = 0x3;
  413430:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
  413432:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  413434:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413438:	eb03 0508 	add.w	r5, r3, r8
  41343c:	2d07      	cmp	r5, #7
  41343e:	d81a      	bhi.n	413476 <lv_font_get_bitmap_fmt_txt+0x3be>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413440:	5c79      	ldrb	r1, [r7, r1]
  413442:	9d08      	ldr	r5, [sp, #32]
  413444:	1aeb      	subs	r3, r5, r3
  413446:	fa41 f303 	asr.w	r3, r1, r3
  41344a:	4003      	ands	r3, r0
            rle_rdp += rle_bpp;
  41344c:	eb02 0508 	add.w	r5, r2, r8
            rle_prev_v = ret;
  413450:	9301      	str	r3, [sp, #4]
            rle_rdp += rle_bpp;
  413452:	2201      	movs	r2, #1
  413454:	9203      	str	r2, [sp, #12]
  413456:	9802      	ldr	r0, [sp, #8]
  413458:	4602      	mov	r2, r0
  41345a:	9006      	str	r0, [sp, #24]
            rle_state = RLE_STATE_SINGLE;
  41345c:	2100      	movs	r1, #0
            rle_rdp += rle_bpp;
  41345e:	9004      	str	r0, [sp, #16]
  413460:	e701      	b.n	413266 <lv_font_get_bitmap_fmt_txt+0x1ae>
            bit_mask = 0x7;
  413462:	2007      	movs	r0, #7
  413464:	e7e5      	b.n	413432 <lv_font_get_bitmap_fmt_txt+0x37a>
            bit_mask = 0xF;
  413466:	200f      	movs	r0, #15
  413468:	e7e3      	b.n	413432 <lv_font_get_bitmap_fmt_txt+0x37a>
            bit_mask = 0xFF;
  41346a:	20ff      	movs	r0, #255	; 0xff
  41346c:	e7e1      	b.n	413432 <lv_font_get_bitmap_fmt_txt+0x37a>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41346e:	9809      	ldr	r0, [sp, #36]	; 0x24
  413470:	e7df      	b.n	413432 <lv_font_get_bitmap_fmt_txt+0x37a>
            bit_mask = 0x1;
  413472:	2001      	movs	r0, #1
  413474:	e7dd      	b.n	413432 <lv_font_get_bitmap_fmt_txt+0x37a>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413476:	5c7d      	ldrb	r5, [r7, r1]
  413478:	4439      	add	r1, r7
  41347a:	7849      	ldrb	r1, [r1, #1]
  41347c:	eb01 2105 	add.w	r1, r1, r5, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413480:	b289      	uxth	r1, r1
  413482:	9d07      	ldr	r5, [sp, #28]
  413484:	1aeb      	subs	r3, r5, r3
  413486:	fa41 f303 	asr.w	r3, r1, r3
  41348a:	4003      	ands	r3, r0
  41348c:	e7de      	b.n	41344c <lv_font_get_bitmap_fmt_txt+0x394>
        rle_cnt--;
  41348e:	3c01      	subs	r4, #1
        if(rle_cnt == 0) {
  413490:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  413494:	d13d      	bne.n	413512 <lv_font_get_bitmap_fmt_txt+0x45a>
    switch(len) {
  413496:	f1ba 0f07 	cmp.w	sl, #7
  41349a:	d823      	bhi.n	4134e4 <lv_font_get_bitmap_fmt_txt+0x42c>
  41349c:	e8df f00a 	tbb	[pc, sl]
  4134a0:	1e1c0424 	.word	0x1e1c0424
  4134a4:	20222222 	.word	0x20222222
            bit_mask = 0x3;
  4134a8:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
  4134aa:	08ea      	lsrs	r2, r5, #3
    bit_pos = bit_pos & 0x7;
  4134ac:	f005 0307 	and.w	r3, r5, #7
    if(bit_pos + len >= 8) {
  4134b0:	eb03 0108 	add.w	r1, r3, r8
  4134b4:	2907      	cmp	r1, #7
  4134b6:	d819      	bhi.n	4134ec <lv_font_get_bitmap_fmt_txt+0x434>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4134b8:	5cba      	ldrb	r2, [r7, r2]
  4134ba:	9908      	ldr	r1, [sp, #32]
  4134bc:	1acb      	subs	r3, r1, r3
  4134be:	fa42 f303 	asr.w	r3, r2, r3
  4134c2:	4003      	ands	r3, r0
            rle_rdp += rle_bpp;
  4134c4:	4445      	add	r5, r8
            rle_prev_v = ret;
  4134c6:	9301      	str	r3, [sp, #4]
            rle_rdp += rle_bpp;
  4134c8:	2201      	movs	r2, #1
  4134ca:	9203      	str	r2, [sp, #12]
  4134cc:	9802      	ldr	r0, [sp, #8]
  4134ce:	4602      	mov	r2, r0
  4134d0:	9006      	str	r0, [sp, #24]
            rle_state = RLE_STATE_SINGLE;
  4134d2:	2100      	movs	r1, #0
            rle_rdp += rle_bpp;
  4134d4:	9004      	str	r0, [sp, #16]
  4134d6:	e6c6      	b.n	413266 <lv_font_get_bitmap_fmt_txt+0x1ae>
            bit_mask = 0x7;
  4134d8:	2007      	movs	r0, #7
  4134da:	e7e6      	b.n	4134aa <lv_font_get_bitmap_fmt_txt+0x3f2>
            bit_mask = 0xF;
  4134dc:	200f      	movs	r0, #15
  4134de:	e7e4      	b.n	4134aa <lv_font_get_bitmap_fmt_txt+0x3f2>
            bit_mask = 0xFF;
  4134e0:	20ff      	movs	r0, #255	; 0xff
  4134e2:	e7e2      	b.n	4134aa <lv_font_get_bitmap_fmt_txt+0x3f2>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4134e4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4134e6:	e7e0      	b.n	4134aa <lv_font_get_bitmap_fmt_txt+0x3f2>
            bit_mask = 0x1;
  4134e8:	2001      	movs	r0, #1
  4134ea:	e7de      	b.n	4134aa <lv_font_get_bitmap_fmt_txt+0x3f2>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4134ec:	5cb9      	ldrb	r1, [r7, r2]
  4134ee:	443a      	add	r2, r7
  4134f0:	7852      	ldrb	r2, [r2, #1]
  4134f2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4134f6:	b292      	uxth	r2, r2
  4134f8:	9907      	ldr	r1, [sp, #28]
  4134fa:	1acb      	subs	r3, r1, r3
  4134fc:	fa42 f303 	asr.w	r3, r2, r3
  413500:	4003      	ands	r3, r0
  413502:	e7df      	b.n	4134c4 <lv_font_get_bitmap_fmt_txt+0x40c>
            ret = rle_prev_v;
  413504:	9b01      	ldr	r3, [sp, #4]
                if(rle_cnt != 0) {
  413506:	2201      	movs	r2, #1
  413508:	9203      	str	r2, [sp, #12]
  41350a:	9a02      	ldr	r2, [sp, #8]
  41350c:	9206      	str	r2, [sp, #24]
                    rle_state = RLE_STATE_COUNTER;
  41350e:	2102      	movs	r1, #2
  413510:	e6a9      	b.n	413266 <lv_font_get_bitmap_fmt_txt+0x1ae>
        ret = rle_prev_v;
  413512:	9b01      	ldr	r3, [sp, #4]
        if(rle_cnt == 0) {
  413514:	2001      	movs	r0, #1
  413516:	9003      	str	r0, [sp, #12]
  413518:	e6a5      	b.n	413266 <lv_font_get_bitmap_fmt_txt+0x1ae>
  41351a:	9804      	ldr	r0, [sp, #16]
  41351c:	468c      	mov	ip, r1
  41351e:	b9c8      	cbnz	r0, 413554 <lv_font_get_bitmap_fmt_txt+0x49c>
  413520:	b10a      	cbz	r2, 413526 <lv_font_get_bitmap_fmt_txt+0x46e>
  413522:	4ba9      	ldr	r3, [pc, #676]	; (4137c8 <lv_font_get_bitmap_fmt_txt+0x710>)
  413524:	601d      	str	r5, [r3, #0]
  413526:	9b06      	ldr	r3, [sp, #24]
  413528:	b113      	cbz	r3, 413530 <lv_font_get_bitmap_fmt_txt+0x478>
  41352a:	4ba8      	ldr	r3, [pc, #672]	; (4137cc <lv_font_get_bitmap_fmt_txt+0x714>)
  41352c:	f883 c000 	strb.w	ip, [r3]
  413530:	9b03      	ldr	r3, [sp, #12]
  413532:	b10b      	cbz	r3, 413538 <lv_font_get_bitmap_fmt_txt+0x480>
  413534:	4ba6      	ldr	r3, [pc, #664]	; (4137d0 <lv_font_get_bitmap_fmt_txt+0x718>)
  413536:	701c      	strb	r4, [r3, #0]
            rle_rdp += rle_bpp;
  413538:	2000      	movs	r0, #0
    if(len == 3) {
  41353a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41353c:	9301      	str	r3, [sp, #4]
        len = 4;
  41353e:	2704      	movs	r7, #4
                val = 15;
  413540:	f04f 0c0f 	mov.w	ip, #15
                val = 13;
  413544:	f04f 080d 	mov.w	r8, #13
                val = 11;
  413548:	f04f 0a0b 	mov.w	sl, #11
                val = 9;
  41354c:	f04f 0b09 	mov.w	fp, #9
                val = 4;
  413550:	9702      	str	r7, [sp, #8]
  413552:	e028      	b.n	4135a6 <lv_font_get_bitmap_fmt_txt+0x4ee>
  413554:	4b9f      	ldr	r3, [pc, #636]	; (4137d4 <lv_font_get_bitmap_fmt_txt+0x71c>)
  413556:	f89d 1004 	ldrb.w	r1, [sp, #4]
  41355a:	7019      	strb	r1, [r3, #0]
  41355c:	e7e0      	b.n	413520 <lv_font_get_bitmap_fmt_txt+0x468>
        switch(val) {
  41355e:	2907      	cmp	r1, #7
  413560:	d83d      	bhi.n	4135de <lv_font_get_bitmap_fmt_txt+0x526>
  413562:	e8df f001 	tbb	[pc, r1]
  413566:	2704      	.short	0x2704
  413568:	33302d2a 	.word	0x33302d2a
  41356c:	3936      	.short	0x3936
        len = 4;
  41356e:	463d      	mov	r5, r7
                val = 0;
  413570:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  413572:	f000 0207 	and.w	r2, r0, #7
  413576:	f1c2 0208 	rsb	r2, r2, #8
    bit_pos = 8 - bit_pos - len;
  41357a:	1b52      	subs	r2, r2, r5
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  41357c:	f3c0 04cf 	ubfx	r4, r0, #3, #16
  413580:	f04f 33ff 	mov.w	r3, #4294967295
  413584:	40ab      	lsls	r3, r5
  413586:	f063 03ff 	orn	r3, r3, #255	; 0xff
  41358a:	4093      	lsls	r3, r2
  41358c:	f819 5004 	ldrb.w	r5, [r9, r4]
  413590:	402b      	ands	r3, r5
    out[byte_pos] |= (val << bit_pos);
  413592:	fa01 f202 	lsl.w	r2, r1, r2
  413596:	4313      	orrs	r3, r2
  413598:	f809 3004 	strb.w	r3, [r9, r4]
        wrp += wr_size;
  41359c:	9a05      	ldr	r2, [sp, #20]
  41359e:	4613      	mov	r3, r2
  4135a0:	4410      	add	r0, r2
    for(x = 0; x < w; x++) {
  4135a2:	45b6      	cmp	lr, r6
  4135a4:	d01d      	beq.n	4135e2 <lv_font_get_bitmap_fmt_txt+0x52a>
        bits_write(out, wrp, line_buf1[x], bpp);
  4135a6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    if(len == 3) {
  4135aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4135ac:	2b03      	cmp	r3, #3
  4135ae:	d0d6      	beq.n	41355e <lv_font_get_bitmap_fmt_txt+0x4a6>
  4135b0:	9d01      	ldr	r5, [sp, #4]
  4135b2:	e7de      	b.n	413572 <lv_font_get_bitmap_fmt_txt+0x4ba>
        len = 4;
  4135b4:	463d      	mov	r5, r7
                val = 2;
  4135b6:	2102      	movs	r1, #2
  4135b8:	e7db      	b.n	413572 <lv_font_get_bitmap_fmt_txt+0x4ba>
        len = 4;
  4135ba:	463d      	mov	r5, r7
                val = 4;
  4135bc:	9902      	ldr	r1, [sp, #8]
  4135be:	e7d8      	b.n	413572 <lv_font_get_bitmap_fmt_txt+0x4ba>
        len = 4;
  4135c0:	463d      	mov	r5, r7
                val = 6;
  4135c2:	2106      	movs	r1, #6
  4135c4:	e7d5      	b.n	413572 <lv_font_get_bitmap_fmt_txt+0x4ba>
        len = 4;
  4135c6:	463d      	mov	r5, r7
                val = 9;
  4135c8:	4659      	mov	r1, fp
  4135ca:	e7d2      	b.n	413572 <lv_font_get_bitmap_fmt_txt+0x4ba>
        len = 4;
  4135cc:	463d      	mov	r5, r7
                val = 11;
  4135ce:	4651      	mov	r1, sl
  4135d0:	e7cf      	b.n	413572 <lv_font_get_bitmap_fmt_txt+0x4ba>
        len = 4;
  4135d2:	463d      	mov	r5, r7
                val = 13;
  4135d4:	4641      	mov	r1, r8
  4135d6:	e7cc      	b.n	413572 <lv_font_get_bitmap_fmt_txt+0x4ba>
        len = 4;
  4135d8:	463d      	mov	r5, r7
                val = 15;
  4135da:	4661      	mov	r1, ip
  4135dc:	e7c9      	b.n	413572 <lv_font_get_bitmap_fmt_txt+0x4ba>
        len = 4;
  4135de:	463d      	mov	r5, r7
  4135e0:	e7c7      	b.n	413572 <lv_font_get_bitmap_fmt_txt+0x4ba>
  4135e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4135e4:	fb02 3303 	mla	r3, r2, r3, r3
  4135e8:	930c      	str	r3, [sp, #48]	; 0x30
    for(y = 1; y < h; y++) {
  4135ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4135ec:	2b01      	cmp	r3, #1
  4135ee:	f340 8446 	ble.w	413e7e <lv_font_get_bitmap_fmt_txt+0xdc6>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4135f2:	4b79      	ldr	r3, [pc, #484]	; (4137d8 <lv_font_get_bitmap_fmt_txt+0x720>)
  4135f4:	f8d3 a000 	ldr.w	sl, [r3]
  4135f8:	4b78      	ldr	r3, [pc, #480]	; (4137dc <lv_font_get_bitmap_fmt_txt+0x724>)
  4135fa:	781b      	ldrb	r3, [r3, #0]
  4135fc:	4619      	mov	r1, r3
  4135fe:	9317      	str	r3, [sp, #92]	; 0x5c
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413600:	2201      	movs	r2, #1
  413602:	fa02 f303 	lsl.w	r3, r2, r3
  413606:	3b01      	subs	r3, #1
  413608:	b2db      	uxtb	r3, r3
  41360a:	9318      	str	r3, [sp, #96]	; 0x60
    if(bit_pos + len >= 8) {
  41360c:	468c      	mov	ip, r1
  41360e:	f1c1 0308 	rsb	r3, r1, #8
  413612:	930b      	str	r3, [sp, #44]	; 0x2c
  413614:	f1c1 0310 	rsb	r3, r1, #16
  413618:	930a      	str	r3, [sp, #40]	; 0x28
  41361a:	4b6e      	ldr	r3, [pc, #440]	; (4137d4 <lv_font_get_bitmap_fmt_txt+0x71c>)
  41361c:	781b      	ldrb	r3, [r3, #0]
  41361e:	9301      	str	r3, [sp, #4]
  413620:	4b69      	ldr	r3, [pc, #420]	; (4137c8 <lv_font_get_bitmap_fmt_txt+0x710>)
  413622:	f8d3 8000 	ldr.w	r8, [r3]
  413626:	4b69      	ldr	r3, [pc, #420]	; (4137cc <lv_font_get_bitmap_fmt_txt+0x714>)
  413628:	f893 b000 	ldrb.w	fp, [r3]
  41362c:	4b68      	ldr	r3, [pc, #416]	; (4137d0 <lv_font_get_bitmap_fmt_txt+0x718>)
  41362e:	781b      	ldrb	r3, [r3, #0]
  413630:	9308      	str	r3, [sp, #32]
  413632:	9905      	ldr	r1, [sp, #20]
  413634:	910f      	str	r1, [sp, #60]	; 0x3c
  413636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  413638:	3b01      	subs	r3, #1
  41363a:	b29b      	uxth	r3, r3
  41363c:	931b      	str	r3, [sp, #108]	; 0x6c
  41363e:	4608      	mov	r0, r1
  413640:	4619      	mov	r1, r3
  413642:	fb00 f303 	mul.w	r3, r0, r3
  413646:	9316      	str	r3, [sp, #88]	; 0x58
  413648:	2300      	movs	r3, #0
  41364a:	9307      	str	r3, [sp, #28]
  41364c:	9309      	str	r3, [sp, #36]	; 0x24
  41364e:	9304      	str	r3, [sp, #16]
  413650:	9305      	str	r3, [sp, #20]
  413652:	920d      	str	r2, [sp, #52]	; 0x34
  413654:	9a15      	ldr	r2, [sp, #84]	; 0x54
  413656:	1853      	adds	r3, r2, r1
  413658:	931c      	str	r3, [sp, #112]	; 0x70
            rle_rdp += rle_bpp;
  41365a:	2301      	movs	r3, #1
  41365c:	9302      	str	r3, [sp, #8]
    if(len == 3) {
  41365e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  413660:	9206      	str	r2, [sp, #24]
                val = 4;
  413662:	2204      	movs	r2, #4
  413664:	921d      	str	r2, [sp, #116]	; 0x74
            rle_rdp += rle_bpp;
  413666:	9303      	str	r3, [sp, #12]
  413668:	465d      	mov	r5, fp
  41366a:	4644      	mov	r4, r8
  41366c:	e218      	b.n	413aa0 <lv_font_get_bitmap_fmt_txt+0x9e8>
    for(i = 0; i < w; i++) {
  41366e:	2300      	movs	r3, #0
  413670:	930c      	str	r3, [sp, #48]	; 0x30
  413672:	e7ba      	b.n	4135ea <lv_font_get_bitmap_fmt_txt+0x532>
  413674:	9b10      	ldr	r3, [sp, #64]	; 0x40
  413676:	2b00      	cmp	r3, #0
  413678:	f000 820a 	beq.w	413a90 <lv_font_get_bitmap_fmt_txt+0x9d8>
  41367c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  41367e:	f103 3eff 	add.w	lr, r3, #4294967295
  413682:	4677      	mov	r7, lr
    uint8_t ret = 0;
  413684:	f04f 0800 	mov.w	r8, #0
    switch(len) {
  413688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  41368a:	1e5e      	subs	r6, r3, #1
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41368c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41368e:	9314      	str	r3, [sp, #80]	; 0x50
            bit_mask = 0xFF;
  413690:	f04f 0bff 	mov.w	fp, #255	; 0xff
            bit_mask = 0x3;
  413694:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
  413698:	9908      	ldr	r1, [sp, #32]
  41369a:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
  41369e:	9608      	str	r6, [sp, #32]
  4136a0:	981c      	ldr	r0, [sp, #112]	; 0x70
  4136a2:	e02f      	b.n	413704 <lv_font_get_bitmap_fmt_txt+0x64c>
  4136a4:	f04f 0e03 	mov.w	lr, #3
  4136a8:	e00c      	b.n	4136c4 <lv_font_get_bitmap_fmt_txt+0x60c>
            bit_mask = 0x7;
  4136aa:	f04f 0e07 	mov.w	lr, #7
  4136ae:	e009      	b.n	4136c4 <lv_font_get_bitmap_fmt_txt+0x60c>
            bit_mask = 0xF;
  4136b0:	f04f 0e0f 	mov.w	lr, #15
  4136b4:	e006      	b.n	4136c4 <lv_font_get_bitmap_fmt_txt+0x60c>
            bit_mask = 0xFF;
  4136b6:	46de      	mov	lr, fp
  4136b8:	e004      	b.n	4136c4 <lv_font_get_bitmap_fmt_txt+0x60c>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4136ba:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
  4136be:	e001      	b.n	4136c4 <lv_font_get_bitmap_fmt_txt+0x60c>
            bit_mask = 0x1;
  4136c0:	f8dd e008 	ldr.w	lr, [sp, #8]
    uint32_t byte_pos = bit_pos >> 3;
  4136c4:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  4136c6:	f004 0207 	and.w	r2, r4, #7
    if(bit_pos + len >= 8) {
  4136ca:	eb02 090c 	add.w	r9, r2, ip
  4136ce:	f1b9 0f07 	cmp.w	r9, #7
  4136d2:	d82f      	bhi.n	413734 <lv_font_get_bitmap_fmt_txt+0x67c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4136d4:	f81a 3003 	ldrb.w	r3, [sl, r3]
  4136d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4136da:	1ab2      	subs	r2, r6, r2
  4136dc:	fa43 f202 	asr.w	r2, r3, r2
  4136e0:	ea02 0e0e 	and.w	lr, r2, lr
        if(rle_rdp != 0 && rle_prev_v == ret) {
  4136e4:	b114      	cbz	r4, 4136ec <lv_font_get_bitmap_fmt_txt+0x634>
  4136e6:	9b01      	ldr	r3, [sp, #4]
  4136e8:	4573      	cmp	r3, lr
  4136ea:	d031      	beq.n	413750 <lv_font_get_bitmap_fmt_txt+0x698>
        rle_rdp += rle_bpp;
  4136ec:	4464      	add	r4, ip
        rle_prev_v = ret;
  4136ee:	f8cd e004 	str.w	lr, [sp, #4]
        rle_rdp += rle_bpp;
  4136f2:	9b02      	ldr	r3, [sp, #8]
  4136f4:	9304      	str	r3, [sp, #16]
  4136f6:	9b03      	ldr	r3, [sp, #12]
  4136f8:	9305      	str	r3, [sp, #20]
        out[i] = rle_next();
  4136fa:	f807 ef01 	strb.w	lr, [r7, #1]!
    for(i = 0; i < w; i++) {
  4136fe:	42b8      	cmp	r0, r7
  413700:	f000 8167 	beq.w	4139d2 <lv_font_get_bitmap_fmt_txt+0x91a>
    if(rle_state == RLE_STATE_SINGLE) {
  413704:	bb5d      	cbnz	r5, 41375e <lv_font_get_bitmap_fmt_txt+0x6a6>
    switch(len) {
  413706:	9b08      	ldr	r3, [sp, #32]
  413708:	461a      	mov	r2, r3
  41370a:	2a07      	cmp	r2, #7
  41370c:	d8d5      	bhi.n	4136ba <lv_font_get_bitmap_fmt_txt+0x602>
  41370e:	a301      	add	r3, pc, #4	; (adr r3, 413714 <lv_font_get_bitmap_fmt_txt+0x65c>)
  413710:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
  413714:	004136c1 	.word	0x004136c1
  413718:	004136a5 	.word	0x004136a5
  41371c:	004136ab 	.word	0x004136ab
  413720:	004136b1 	.word	0x004136b1
  413724:	004136bb 	.word	0x004136bb
  413728:	004136bb 	.word	0x004136bb
  41372c:	004136bb 	.word	0x004136bb
  413730:	004136b7 	.word	0x004136b7
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413734:	f81a 9003 	ldrb.w	r9, [sl, r3]
  413738:	4453      	add	r3, sl
  41373a:	785b      	ldrb	r3, [r3, #1]
  41373c:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413740:	b29b      	uxth	r3, r3
  413742:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  413744:	1ab2      	subs	r2, r6, r2
  413746:	fa43 f202 	asr.w	r2, r3, r2
  41374a:	ea02 0e0e 	and.w	lr, r2, lr
  41374e:	e7c9      	b.n	4136e4 <lv_font_get_bitmap_fmt_txt+0x62c>
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413750:	9b02      	ldr	r3, [sp, #8]
  413752:	9307      	str	r3, [sp, #28]
            rle_cnt = 0;
  413754:	4641      	mov	r1, r8
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413756:	9b03      	ldr	r3, [sp, #12]
  413758:	9309      	str	r3, [sp, #36]	; 0x24
            rle_state = RLE_STATE_REPEATE;
  41375a:	461d      	mov	r5, r3
  41375c:	e7c6      	b.n	4136ec <lv_font_get_bitmap_fmt_txt+0x634>
    else if(rle_state == RLE_STATE_REPEATE) {
  41375e:	2d01      	cmp	r5, #1
  413760:	d004      	beq.n	41376c <lv_font_get_bitmap_fmt_txt+0x6b4>
    else if(rle_state == RLE_STATE_COUNTER) {
  413762:	2d02      	cmp	r5, #2
  413764:	f000 80e1 	beq.w	41392a <lv_font_get_bitmap_fmt_txt+0x872>
    uint8_t ret = 0;
  413768:	46c6      	mov	lr, r8
  41376a:	e7c6      	b.n	4136fa <lv_font_get_bitmap_fmt_txt+0x642>
    uint32_t byte_pos = bit_pos >> 3;
  41376c:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  41376e:	f004 0207 	and.w	r2, r4, #7
    if(bit_pos + len >= 8) {
  413772:	f102 0e01 	add.w	lr, r2, #1
  413776:	f1be 0f07 	cmp.w	lr, #7
  41377a:	d816      	bhi.n	4137aa <lv_font_get_bitmap_fmt_txt+0x6f2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41377c:	f81a 3003 	ldrb.w	r3, [sl, r3]
  413780:	43d2      	mvns	r2, r2
  413782:	3208      	adds	r2, #8
  413784:	fa43 f202 	asr.w	r2, r3, r2
  413788:	f002 0201 	and.w	r2, r2, #1
        rle_cnt++;
  41378c:	3101      	adds	r1, #1
  41378e:	b2c9      	uxtb	r1, r1
        rle_rdp += 1;
  413790:	1c63      	adds	r3, r4, #1
        if(v == 1) {
  413792:	bb2a      	cbnz	r2, 4137e0 <lv_font_get_bitmap_fmt_txt+0x728>
    switch(len) {
  413794:	9a08      	ldr	r2, [sp, #32]
  413796:	4614      	mov	r4, r2
  413798:	2c07      	cmp	r4, #7
  41379a:	f200 8098 	bhi.w	4138ce <lv_font_get_bitmap_fmt_txt+0x816>
  41379e:	e8df f004 	tbb	[pc, r4]
  4137a2:	8b99      	.short	0x8b99
  4137a4:	9696918e 	.word	0x9696918e
  4137a8:	9496      	.short	0x9496
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4137aa:	f81a e003 	ldrb.w	lr, [sl, r3]
  4137ae:	4453      	add	r3, sl
  4137b0:	785b      	ldrb	r3, [r3, #1]
  4137b2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4137b6:	b29b      	uxth	r3, r3
  4137b8:	43d2      	mvns	r2, r2
  4137ba:	3210      	adds	r2, #16
  4137bc:	fa43 f202 	asr.w	r2, r3, r2
  4137c0:	f002 0201 	and.w	r2, r2, #1
  4137c4:	e7e2      	b.n	41378c <lv_font_get_bitmap_fmt_txt+0x6d4>
  4137c6:	bf00      	nop
  4137c8:	2040c6ec 	.word	0x2040c6ec
  4137cc:	2040c6f0 	.word	0x2040c6f0
  4137d0:	2040c6e1 	.word	0x2040c6e1
  4137d4:	2040c6e8 	.word	0x2040c6e8
  4137d8:	2040c6e4 	.word	0x2040c6e4
  4137dc:	2040c6e0 	.word	0x2040c6e0
            if(rle_cnt == 11) {
  4137e0:	290b      	cmp	r1, #11
  4137e2:	d007      	beq.n	4137f4 <lv_font_get_bitmap_fmt_txt+0x73c>
        rle_rdp += 1;
  4137e4:	461c      	mov	r4, r3
            ret = rle_prev_v;
  4137e6:	f8dd e004 	ldr.w	lr, [sp, #4]
            if(rle_cnt == 11) {
  4137ea:	9b02      	ldr	r3, [sp, #8]
  4137ec:	9307      	str	r3, [sp, #28]
  4137ee:	9b03      	ldr	r3, [sp, #12]
  4137f0:	9304      	str	r3, [sp, #16]
  4137f2:	e782      	b.n	4136fa <lv_font_get_bitmap_fmt_txt+0x642>
    uint32_t byte_pos = bit_pos >> 3;
  4137f4:	08da      	lsrs	r2, r3, #3
    bit_pos = bit_pos & 0x7;
  4137f6:	f003 0307 	and.w	r3, r3, #7
    if(bit_pos + len >= 8) {
  4137fa:	1d99      	adds	r1, r3, #6
  4137fc:	2907      	cmp	r1, #7
  4137fe:	d815      	bhi.n	41382c <lv_font_get_bitmap_fmt_txt+0x774>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413800:	f81a 2002 	ldrb.w	r2, [sl, r2]
  413804:	f1c3 0302 	rsb	r3, r3, #2
  413808:	fa42 f303 	asr.w	r3, r2, r3
  41380c:	f003 013f 	and.w	r1, r3, #63	; 0x3f
                rle_rdp += 6;
  413810:	3407      	adds	r4, #7
                if(rle_cnt != 0) {
  413812:	2900      	cmp	r1, #0
  413814:	f040 80cf 	bne.w	4139b6 <lv_font_get_bitmap_fmt_txt+0x8fe>
    switch(len) {
  413818:	9b08      	ldr	r3, [sp, #32]
  41381a:	461a      	mov	r2, r3
  41381c:	2a07      	cmp	r2, #7
  41381e:	d837      	bhi.n	413890 <lv_font_get_bitmap_fmt_txt+0x7d8>
  413820:	e8df f002 	tbb	[pc, r2]
  413824:	312e1239 	.word	0x312e1239
  413828:	34363636 	.word	0x34363636
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41382c:	f81a 1002 	ldrb.w	r1, [sl, r2]
  413830:	4452      	add	r2, sl
  413832:	7852      	ldrb	r2, [r2, #1]
  413834:	eb02 2201 	add.w	r2, r2, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413838:	b292      	uxth	r2, r2
  41383a:	f1c3 030a 	rsb	r3, r3, #10
  41383e:	fa42 f303 	asr.w	r3, r2, r3
  413842:	f003 013f 	and.w	r1, r3, #63	; 0x3f
  413846:	e7e3      	b.n	413810 <lv_font_get_bitmap_fmt_txt+0x758>
            bit_mask = 0x3;
  413848:	f04f 0e03 	mov.w	lr, #3
    uint32_t byte_pos = bit_pos >> 3;
  41384c:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  41384e:	f004 0207 	and.w	r2, r4, #7
    if(bit_pos + len >= 8) {
  413852:	eb02 050c 	add.w	r5, r2, ip
  413856:	2d07      	cmp	r5, #7
  413858:	d820      	bhi.n	41389c <lv_font_get_bitmap_fmt_txt+0x7e4>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41385a:	f81a 3003 	ldrb.w	r3, [sl, r3]
  41385e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  413860:	1aaa      	subs	r2, r5, r2
  413862:	fa43 f202 	asr.w	r2, r3, r2
  413866:	ea02 0e0e 	and.w	lr, r2, lr
                    rle_rdp += rle_bpp;
  41386a:	4464      	add	r4, ip
                    rle_prev_v = ret;
  41386c:	f8cd e004 	str.w	lr, [sp, #4]
                    rle_rdp += rle_bpp;
  413870:	9b02      	ldr	r3, [sp, #8]
  413872:	9307      	str	r3, [sp, #28]
  413874:	9b03      	ldr	r3, [sp, #12]
  413876:	9309      	str	r3, [sp, #36]	; 0x24
                    rle_state = RLE_STATE_SINGLE;
  413878:	4645      	mov	r5, r8
                    rle_rdp += rle_bpp;
  41387a:	9304      	str	r3, [sp, #16]
  41387c:	9305      	str	r3, [sp, #20]
  41387e:	e73c      	b.n	4136fa <lv_font_get_bitmap_fmt_txt+0x642>
            bit_mask = 0x7;
  413880:	f04f 0e07 	mov.w	lr, #7
  413884:	e7e2      	b.n	41384c <lv_font_get_bitmap_fmt_txt+0x794>
            bit_mask = 0xF;
  413886:	f04f 0e0f 	mov.w	lr, #15
  41388a:	e7df      	b.n	41384c <lv_font_get_bitmap_fmt_txt+0x794>
            bit_mask = 0xFF;
  41388c:	46de      	mov	lr, fp
  41388e:	e7dd      	b.n	41384c <lv_font_get_bitmap_fmt_txt+0x794>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413890:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
  413894:	e7da      	b.n	41384c <lv_font_get_bitmap_fmt_txt+0x794>
            bit_mask = 0x1;
  413896:	f8dd e008 	ldr.w	lr, [sp, #8]
  41389a:	e7d7      	b.n	41384c <lv_font_get_bitmap_fmt_txt+0x794>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41389c:	f81a 5003 	ldrb.w	r5, [sl, r3]
  4138a0:	4453      	add	r3, sl
  4138a2:	785b      	ldrb	r3, [r3, #1]
  4138a4:	eb03 2305 	add.w	r3, r3, r5, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4138a8:	b29b      	uxth	r3, r3
  4138aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4138ac:	1aaa      	subs	r2, r5, r2
  4138ae:	fa43 f202 	asr.w	r2, r3, r2
  4138b2:	ea02 0e0e 	and.w	lr, r2, lr
  4138b6:	e7d8      	b.n	41386a <lv_font_get_bitmap_fmt_txt+0x7b2>
            bit_mask = 0x3;
  4138b8:	f04f 0e03 	mov.w	lr, #3
  4138bc:	e00c      	b.n	4138d8 <lv_font_get_bitmap_fmt_txt+0x820>
            bit_mask = 0x7;
  4138be:	f04f 0e07 	mov.w	lr, #7
  4138c2:	e009      	b.n	4138d8 <lv_font_get_bitmap_fmt_txt+0x820>
            bit_mask = 0xF;
  4138c4:	f04f 0e0f 	mov.w	lr, #15
  4138c8:	e006      	b.n	4138d8 <lv_font_get_bitmap_fmt_txt+0x820>
            bit_mask = 0xFF;
  4138ca:	46de      	mov	lr, fp
  4138cc:	e004      	b.n	4138d8 <lv_font_get_bitmap_fmt_txt+0x820>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4138ce:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
  4138d2:	e001      	b.n	4138d8 <lv_font_get_bitmap_fmt_txt+0x820>
            bit_mask = 0x1;
  4138d4:	f8dd e008 	ldr.w	lr, [sp, #8]
    uint32_t byte_pos = bit_pos >> 3;
  4138d8:	08da      	lsrs	r2, r3, #3
    bit_pos = bit_pos & 0x7;
  4138da:	f003 0407 	and.w	r4, r3, #7
    if(bit_pos + len >= 8) {
  4138de:	eb04 050c 	add.w	r5, r4, ip
  4138e2:	2d07      	cmp	r5, #7
  4138e4:	d813      	bhi.n	41390e <lv_font_get_bitmap_fmt_txt+0x856>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4138e6:	f81a 2002 	ldrb.w	r2, [sl, r2]
  4138ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4138ec:	1b2c      	subs	r4, r5, r4
  4138ee:	fa42 f404 	asr.w	r4, r2, r4
  4138f2:	ea04 0e0e 	and.w	lr, r4, lr
            rle_rdp += rle_bpp;
  4138f6:	eb03 040c 	add.w	r4, r3, ip
            rle_prev_v = ret;
  4138fa:	f8cd e004 	str.w	lr, [sp, #4]
            rle_rdp += rle_bpp;
  4138fe:	9b02      	ldr	r3, [sp, #8]
  413900:	9307      	str	r3, [sp, #28]
  413902:	9b03      	ldr	r3, [sp, #12]
  413904:	9309      	str	r3, [sp, #36]	; 0x24
            rle_state = RLE_STATE_SINGLE;
  413906:	4645      	mov	r5, r8
            rle_rdp += rle_bpp;
  413908:	9304      	str	r3, [sp, #16]
  41390a:	9305      	str	r3, [sp, #20]
  41390c:	e6f5      	b.n	4136fa <lv_font_get_bitmap_fmt_txt+0x642>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41390e:	f81a 5002 	ldrb.w	r5, [sl, r2]
  413912:	4452      	add	r2, sl
  413914:	7852      	ldrb	r2, [r2, #1]
  413916:	eb02 2205 	add.w	r2, r2, r5, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41391a:	b292      	uxth	r2, r2
  41391c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  41391e:	1b2c      	subs	r4, r5, r4
  413920:	fa42 f404 	asr.w	r4, r2, r4
  413924:	ea04 0e0e 	and.w	lr, r4, lr
  413928:	e7e5      	b.n	4138f6 <lv_font_get_bitmap_fmt_txt+0x83e>
        rle_cnt--;
  41392a:	3901      	subs	r1, #1
        if(rle_cnt == 0) {
  41392c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
  413930:	d14a      	bne.n	4139c8 <lv_font_get_bitmap_fmt_txt+0x910>
    switch(len) {
  413932:	9b08      	ldr	r3, [sp, #32]
  413934:	461a      	mov	r2, r3
  413936:	2a07      	cmp	r2, #7
  413938:	d810      	bhi.n	41395c <lv_font_get_bitmap_fmt_txt+0x8a4>
  41393a:	e8df f002 	tbb	[pc, r2]
  41393e:	0412      	.short	0x0412
  413940:	0f0f0a07 	.word	0x0f0f0a07
  413944:	0d0f      	.short	0x0d0f
            bit_mask = 0x3;
  413946:	f04f 0e03 	mov.w	lr, #3
  41394a:	e00c      	b.n	413966 <lv_font_get_bitmap_fmt_txt+0x8ae>
            bit_mask = 0x7;
  41394c:	f04f 0e07 	mov.w	lr, #7
  413950:	e009      	b.n	413966 <lv_font_get_bitmap_fmt_txt+0x8ae>
            bit_mask = 0xF;
  413952:	f04f 0e0f 	mov.w	lr, #15
  413956:	e006      	b.n	413966 <lv_font_get_bitmap_fmt_txt+0x8ae>
            bit_mask = 0xFF;
  413958:	46de      	mov	lr, fp
  41395a:	e004      	b.n	413966 <lv_font_get_bitmap_fmt_txt+0x8ae>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41395c:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
  413960:	e001      	b.n	413966 <lv_font_get_bitmap_fmt_txt+0x8ae>
            bit_mask = 0x1;
  413962:	f8dd e008 	ldr.w	lr, [sp, #8]
    uint32_t byte_pos = bit_pos >> 3;
  413966:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  413968:	f004 0207 	and.w	r2, r4, #7
    if(bit_pos + len >= 8) {
  41396c:	eb02 050c 	add.w	r5, r2, ip
  413970:	2d07      	cmp	r5, #7
  413972:	d812      	bhi.n	41399a <lv_font_get_bitmap_fmt_txt+0x8e2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413974:	f81a 3003 	ldrb.w	r3, [sl, r3]
  413978:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  41397a:	1aaa      	subs	r2, r5, r2
  41397c:	fa43 f202 	asr.w	r2, r3, r2
  413980:	ea02 0e0e 	and.w	lr, r2, lr
            rle_rdp += rle_bpp;
  413984:	4464      	add	r4, ip
            rle_prev_v = ret;
  413986:	f8cd e004 	str.w	lr, [sp, #4]
            rle_rdp += rle_bpp;
  41398a:	9b02      	ldr	r3, [sp, #8]
  41398c:	9307      	str	r3, [sp, #28]
  41398e:	9b03      	ldr	r3, [sp, #12]
  413990:	9309      	str	r3, [sp, #36]	; 0x24
            rle_state = RLE_STATE_SINGLE;
  413992:	4645      	mov	r5, r8
            rle_rdp += rle_bpp;
  413994:	9304      	str	r3, [sp, #16]
  413996:	9305      	str	r3, [sp, #20]
  413998:	e6af      	b.n	4136fa <lv_font_get_bitmap_fmt_txt+0x642>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41399a:	f81a 5003 	ldrb.w	r5, [sl, r3]
  41399e:	4453      	add	r3, sl
  4139a0:	785b      	ldrb	r3, [r3, #1]
  4139a2:	eb03 2305 	add.w	r3, r3, r5, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4139a6:	b29b      	uxth	r3, r3
  4139a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4139aa:	1aaa      	subs	r2, r5, r2
  4139ac:	fa43 f202 	asr.w	r2, r3, r2
  4139b0:	ea02 0e0e 	and.w	lr, r2, lr
  4139b4:	e7e6      	b.n	413984 <lv_font_get_bitmap_fmt_txt+0x8cc>
            ret = rle_prev_v;
  4139b6:	f8dd e004 	ldr.w	lr, [sp, #4]
                if(rle_cnt != 0) {
  4139ba:	9b02      	ldr	r3, [sp, #8]
  4139bc:	9307      	str	r3, [sp, #28]
  4139be:	9b03      	ldr	r3, [sp, #12]
  4139c0:	9309      	str	r3, [sp, #36]	; 0x24
                    rle_state = RLE_STATE_COUNTER;
  4139c2:	2502      	movs	r5, #2
                if(rle_cnt != 0) {
  4139c4:	9304      	str	r3, [sp, #16]
  4139c6:	e698      	b.n	4136fa <lv_font_get_bitmap_fmt_txt+0x642>
        ret = rle_prev_v;
  4139c8:	f8dd e004 	ldr.w	lr, [sp, #4]
        if(rle_cnt == 0) {
  4139cc:	9b02      	ldr	r3, [sp, #8]
  4139ce:	9307      	str	r3, [sp, #28]
  4139d0:	e693      	b.n	4136fa <lv_font_get_bitmap_fmt_txt+0x642>
  4139d2:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
  4139d6:	9108      	str	r1, [sp, #32]
  4139d8:	f8dd e068 	ldr.w	lr, [sp, #104]	; 0x68
  4139dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4139de:	f103 38ff 	add.w	r8, r3, #4294967295
    for(i = 0; i < w; i++) {
  4139e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                val = 2;
  4139e4:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
  4139e8:	9514      	str	r5, [sp, #80]	; 0x50
  4139ea:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  4139ee:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  4139f2:	e021      	b.n	413a38 <lv_font_get_bitmap_fmt_txt+0x980>
        switch(val) {
  4139f4:	2a07      	cmp	r2, #7
  4139f6:	d840      	bhi.n	413a7a <lv_font_get_bitmap_fmt_txt+0x9c2>
  4139f8:	e8df f002 	tbb	[pc, r2]
  4139fc:	302d2a04 	.word	0x302d2a04
  413a00:	3c393633 	.word	0x3c393633
        len = 4;
  413a04:	2304      	movs	r3, #4
                val = 0;
  413a06:	2200      	movs	r2, #0
    bit_pos = bit_pos & 0x7;
  413a08:	f006 0107 	and.w	r1, r6, #7
  413a0c:	f1c1 0108 	rsb	r1, r1, #8
    bit_pos = 8 - bit_pos - len;
  413a10:	1ac9      	subs	r1, r1, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  413a12:	f3c6 00cf 	ubfx	r0, r6, #3, #16
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413a16:	2501      	movs	r5, #1
  413a18:	fa05 f303 	lsl.w	r3, r5, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  413a1c:	425b      	negs	r3, r3
  413a1e:	f063 03ff 	orn	r3, r3, #255	; 0xff
  413a22:	408b      	lsls	r3, r1
  413a24:	f819 5000 	ldrb.w	r5, [r9, r0]
  413a28:	402b      	ands	r3, r5
    out[byte_pos] |= (val << bit_pos);
  413a2a:	408a      	lsls	r2, r1
  413a2c:	4313      	orrs	r3, r2
  413a2e:	f809 3000 	strb.w	r3, [r9, r0]
  413a32:	445e      	add	r6, fp
            for(x = 0; x < w; x++) {
  413a34:	45be      	cmp	lr, r7
  413a36:	d022      	beq.n	413a7e <lv_font_get_bitmap_fmt_txt+0x9c6>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
  413a38:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  413a3c:	f898 3001 	ldrb.w	r3, [r8, #1]
  413a40:	405a      	eors	r2, r3
  413a42:	f808 2f01 	strb.w	r2, [r8, #1]!
    if(len == 3) {
  413a46:	f1ba 0f03 	cmp.w	sl, #3
  413a4a:	d0d3      	beq.n	4139f4 <lv_font_get_bitmap_fmt_txt+0x93c>
  413a4c:	9b06      	ldr	r3, [sp, #24]
  413a4e:	e7db      	b.n	413a08 <lv_font_get_bitmap_fmt_txt+0x950>
        len = 4;
  413a50:	2304      	movs	r3, #4
                val = 2;
  413a52:	2202      	movs	r2, #2
  413a54:	e7d8      	b.n	413a08 <lv_font_get_bitmap_fmt_txt+0x950>
        len = 4;
  413a56:	2304      	movs	r3, #4
                val = 4;
  413a58:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  413a5a:	e7d5      	b.n	413a08 <lv_font_get_bitmap_fmt_txt+0x950>
        len = 4;
  413a5c:	2304      	movs	r3, #4
                val = 6;
  413a5e:	2206      	movs	r2, #6
  413a60:	e7d2      	b.n	413a08 <lv_font_get_bitmap_fmt_txt+0x950>
        len = 4;
  413a62:	2304      	movs	r3, #4
                val = 9;
  413a64:	2209      	movs	r2, #9
  413a66:	e7cf      	b.n	413a08 <lv_font_get_bitmap_fmt_txt+0x950>
        len = 4;
  413a68:	2304      	movs	r3, #4
                val = 11;
  413a6a:	220b      	movs	r2, #11
  413a6c:	e7cc      	b.n	413a08 <lv_font_get_bitmap_fmt_txt+0x950>
        len = 4;
  413a6e:	2304      	movs	r3, #4
                val = 13;
  413a70:	220d      	movs	r2, #13
  413a72:	e7c9      	b.n	413a08 <lv_font_get_bitmap_fmt_txt+0x950>
        len = 4;
  413a74:	2304      	movs	r3, #4
                val = 15;
  413a76:	220f      	movs	r2, #15
  413a78:	e7c6      	b.n	413a08 <lv_font_get_bitmap_fmt_txt+0x950>
        len = 4;
  413a7a:	2304      	movs	r3, #4
  413a7c:	e7c4      	b.n	413a08 <lv_font_get_bitmap_fmt_txt+0x950>
  413a7e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  413a80:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
  413a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  413a86:	9a16      	ldr	r2, [sp, #88]	; 0x58
  413a88:	4413      	add	r3, r2
  413a8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  413a8c:	441a      	add	r2, r3
  413a8e:	920c      	str	r2, [sp, #48]	; 0x30
  413a90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  413a92:	3301      	adds	r3, #1
  413a94:	b21b      	sxth	r3, r3
  413a96:	930d      	str	r3, [sp, #52]	; 0x34
    for(y = 1; y < h; y++) {
  413a98:	9a11      	ldr	r2, [sp, #68]	; 0x44
  413a9a:	429a      	cmp	r2, r3
  413a9c:	f000 81db 	beq.w	413e56 <lv_font_get_bitmap_fmt_txt+0xd9e>
        if(prefilter) {
  413aa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  413aa2:	2b40      	cmp	r3, #64	; 0x40
  413aa4:	f43f ade6 	beq.w	413674 <lv_font_get_bitmap_fmt_txt+0x5bc>
    for(i = 0; i < w; i++) {
  413aa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  413aaa:	2b00      	cmp	r3, #0
  413aac:	d0f0      	beq.n	413a90 <lv_font_get_bitmap_fmt_txt+0x9d8>
  413aae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  413ab0:	4613      	mov	r3, r2
  413ab2:	f102 3eff 	add.w	lr, r2, #4294967295
  413ab6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  413ab8:	189e      	adds	r6, r3, r2
  413aba:	4677      	mov	r7, lr
    uint8_t ret = 0;
  413abc:	f04f 0b00 	mov.w	fp, #0
    switch(len) {
  413ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  413ac2:	f103 38ff 	add.w	r8, r3, #4294967295
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413ac6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  413ac8:	9314      	str	r3, [sp, #80]	; 0x50
            bit_mask = 0x3;
  413aca:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
  413ace:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
  413ad2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
  413ad6:	9908      	ldr	r1, [sp, #32]
  413ad8:	e028      	b.n	413b2c <lv_font_get_bitmap_fmt_txt+0xa74>
  413ada:	2003      	movs	r0, #3
  413adc:	e008      	b.n	413af0 <lv_font_get_bitmap_fmt_txt+0xa38>
            bit_mask = 0x7;
  413ade:	2007      	movs	r0, #7
  413ae0:	e006      	b.n	413af0 <lv_font_get_bitmap_fmt_txt+0xa38>
            bit_mask = 0xF;
  413ae2:	200f      	movs	r0, #15
  413ae4:	e004      	b.n	413af0 <lv_font_get_bitmap_fmt_txt+0xa38>
            bit_mask = 0xFF;
  413ae6:	20ff      	movs	r0, #255	; 0xff
  413ae8:	e002      	b.n	413af0 <lv_font_get_bitmap_fmt_txt+0xa38>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413aea:	9814      	ldr	r0, [sp, #80]	; 0x50
  413aec:	e000      	b.n	413af0 <lv_font_get_bitmap_fmt_txt+0xa38>
            bit_mask = 0x1;
  413aee:	9802      	ldr	r0, [sp, #8]
    uint32_t byte_pos = bit_pos >> 3;
  413af0:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  413af2:	f004 0207 	and.w	r2, r4, #7
    if(bit_pos + len >= 8) {
  413af6:	eb02 090c 	add.w	r9, r2, ip
  413afa:	f1b9 0f07 	cmp.w	r9, #7
  413afe:	d82d      	bhi.n	413b5c <lv_font_get_bitmap_fmt_txt+0xaa4>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413b00:	f81a 3003 	ldrb.w	r3, [sl, r3]
  413b04:	ebae 0202 	sub.w	r2, lr, r2
  413b08:	fa43 f202 	asr.w	r2, r3, r2
  413b0c:	4010      	ands	r0, r2
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413b0e:	b114      	cbz	r4, 413b16 <lv_font_get_bitmap_fmt_txt+0xa5e>
  413b10:	9b01      	ldr	r3, [sp, #4]
  413b12:	4283      	cmp	r3, r0
  413b14:	d030      	beq.n	413b78 <lv_font_get_bitmap_fmt_txt+0xac0>
        rle_rdp += rle_bpp;
  413b16:	4464      	add	r4, ip
        rle_prev_v = ret;
  413b18:	9001      	str	r0, [sp, #4]
        rle_rdp += rle_bpp;
  413b1a:	9b02      	ldr	r3, [sp, #8]
  413b1c:	9304      	str	r3, [sp, #16]
  413b1e:	9b03      	ldr	r3, [sp, #12]
  413b20:	9305      	str	r3, [sp, #20]
        out[i] = rle_next();
  413b22:	f807 0f01 	strb.w	r0, [r7, #1]!
    for(i = 0; i < w; i++) {
  413b26:	42b7      	cmp	r7, r6
  413b28:	f000 813a 	beq.w	413da0 <lv_font_get_bitmap_fmt_txt+0xce8>
    if(rle_state == RLE_STATE_SINGLE) {
  413b2c:	bb5d      	cbnz	r5, 413b86 <lv_font_get_bitmap_fmt_txt+0xace>
    switch(len) {
  413b2e:	f1b8 0f07 	cmp.w	r8, #7
  413b32:	d8da      	bhi.n	413aea <lv_font_get_bitmap_fmt_txt+0xa32>
  413b34:	a301      	add	r3, pc, #4	; (adr r3, 413b3c <lv_font_get_bitmap_fmt_txt+0xa84>)
  413b36:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
  413b3a:	bf00      	nop
  413b3c:	00413aef 	.word	0x00413aef
  413b40:	00413adb 	.word	0x00413adb
  413b44:	00413adf 	.word	0x00413adf
  413b48:	00413ae3 	.word	0x00413ae3
  413b4c:	00413aeb 	.word	0x00413aeb
  413b50:	00413aeb 	.word	0x00413aeb
  413b54:	00413aeb 	.word	0x00413aeb
  413b58:	00413ae7 	.word	0x00413ae7
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413b5c:	f81a 9003 	ldrb.w	r9, [sl, r3]
  413b60:	4453      	add	r3, sl
  413b62:	785b      	ldrb	r3, [r3, #1]
  413b64:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413b68:	fa1f f983 	uxth.w	r9, r3
  413b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  413b6e:	1a9a      	subs	r2, r3, r2
  413b70:	fa49 f202 	asr.w	r2, r9, r2
  413b74:	4010      	ands	r0, r2
  413b76:	e7ca      	b.n	413b0e <lv_font_get_bitmap_fmt_txt+0xa56>
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413b78:	9b02      	ldr	r3, [sp, #8]
  413b7a:	9307      	str	r3, [sp, #28]
            rle_cnt = 0;
  413b7c:	4659      	mov	r1, fp
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413b7e:	9b03      	ldr	r3, [sp, #12]
  413b80:	9309      	str	r3, [sp, #36]	; 0x24
            rle_state = RLE_STATE_REPEATE;
  413b82:	461d      	mov	r5, r3
  413b84:	e7c7      	b.n	413b16 <lv_font_get_bitmap_fmt_txt+0xa5e>
    else if(rle_state == RLE_STATE_REPEATE) {
  413b86:	2d01      	cmp	r5, #1
  413b88:	d004      	beq.n	413b94 <lv_font_get_bitmap_fmt_txt+0xadc>
    else if(rle_state == RLE_STATE_COUNTER) {
  413b8a:	2d02      	cmp	r5, #2
  413b8c:	f000 80bd 	beq.w	413d0a <lv_font_get_bitmap_fmt_txt+0xc52>
    uint8_t ret = 0;
  413b90:	4658      	mov	r0, fp
  413b92:	e7c6      	b.n	413b22 <lv_font_get_bitmap_fmt_txt+0xa6a>
    uint32_t byte_pos = bit_pos >> 3;
  413b94:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  413b96:	f004 0207 	and.w	r2, r4, #7
    if(bit_pos + len >= 8) {
  413b9a:	1c50      	adds	r0, r2, #1
  413b9c:	2807      	cmp	r0, #7
  413b9e:	d814      	bhi.n	413bca <lv_font_get_bitmap_fmt_txt+0xb12>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413ba0:	f81a 3003 	ldrb.w	r3, [sl, r3]
  413ba4:	43d2      	mvns	r2, r2
  413ba6:	3208      	adds	r2, #8
  413ba8:	fa43 f202 	asr.w	r2, r3, r2
  413bac:	f002 0201 	and.w	r2, r2, #1
        rle_cnt++;
  413bb0:	3101      	adds	r1, #1
  413bb2:	b2c9      	uxtb	r1, r1
        rle_rdp += 1;
  413bb4:	1c63      	adds	r3, r4, #1
        if(v == 1) {
  413bb6:	b9b2      	cbnz	r2, 413be6 <lv_font_get_bitmap_fmt_txt+0xb2e>
    switch(len) {
  413bb8:	f1b8 0f07 	cmp.w	r8, #7
  413bbc:	d87e      	bhi.n	413cbc <lv_font_get_bitmap_fmt_txt+0xc04>
  413bbe:	e8df f008 	tbb	[pc, r8]
  413bc2:	757f      	.short	0x757f
  413bc4:	7d7d7977 	.word	0x7d7d7977
  413bc8:	7b7d      	.short	0x7b7d
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413bca:	f81a 0003 	ldrb.w	r0, [sl, r3]
  413bce:	4453      	add	r3, sl
  413bd0:	785b      	ldrb	r3, [r3, #1]
  413bd2:	eb03 2300 	add.w	r3, r3, r0, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413bd6:	b29b      	uxth	r3, r3
  413bd8:	43d2      	mvns	r2, r2
  413bda:	3210      	adds	r2, #16
  413bdc:	fa43 f202 	asr.w	r2, r3, r2
  413be0:	f002 0201 	and.w	r2, r2, #1
  413be4:	e7e4      	b.n	413bb0 <lv_font_get_bitmap_fmt_txt+0xaf8>
            if(rle_cnt == 11) {
  413be6:	290b      	cmp	r1, #11
  413be8:	d006      	beq.n	413bf8 <lv_font_get_bitmap_fmt_txt+0xb40>
        rle_rdp += 1;
  413bea:	461c      	mov	r4, r3
            ret = rle_prev_v;
  413bec:	9801      	ldr	r0, [sp, #4]
            if(rle_cnt == 11) {
  413bee:	9b02      	ldr	r3, [sp, #8]
  413bf0:	9307      	str	r3, [sp, #28]
  413bf2:	9b03      	ldr	r3, [sp, #12]
  413bf4:	9304      	str	r3, [sp, #16]
  413bf6:	e794      	b.n	413b22 <lv_font_get_bitmap_fmt_txt+0xa6a>
    uint32_t byte_pos = bit_pos >> 3;
  413bf8:	08da      	lsrs	r2, r3, #3
    bit_pos = bit_pos & 0x7;
  413bfa:	f003 0307 	and.w	r3, r3, #7
    if(bit_pos + len >= 8) {
  413bfe:	1d99      	adds	r1, r3, #6
  413c00:	2907      	cmp	r1, #7
  413c02:	d814      	bhi.n	413c2e <lv_font_get_bitmap_fmt_txt+0xb76>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413c04:	f81a 2002 	ldrb.w	r2, [sl, r2]
  413c08:	f1c3 0302 	rsb	r3, r3, #2
  413c0c:	fa42 f303 	asr.w	r3, r2, r3
  413c10:	f003 013f 	and.w	r1, r3, #63	; 0x3f
                rle_rdp += 6;
  413c14:	3407      	adds	r4, #7
                if(rle_cnt != 0) {
  413c16:	2900      	cmp	r1, #0
  413c18:	f040 80b6 	bne.w	413d88 <lv_font_get_bitmap_fmt_txt+0xcd0>
    switch(len) {
  413c1c:	f1b8 0f07 	cmp.w	r8, #7
  413c20:	d832      	bhi.n	413c88 <lv_font_get_bitmap_fmt_txt+0xbd0>
  413c22:	e8df f008 	tbb	[pc, r8]
  413c26:	1133      	.short	0x1133
  413c28:	31312d2b 	.word	0x31312d2b
  413c2c:	2f31      	.short	0x2f31
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413c2e:	f81a 1002 	ldrb.w	r1, [sl, r2]
  413c32:	4452      	add	r2, sl
  413c34:	7852      	ldrb	r2, [r2, #1]
  413c36:	eb02 2101 	add.w	r1, r2, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413c3a:	b289      	uxth	r1, r1
  413c3c:	f1c3 030a 	rsb	r3, r3, #10
  413c40:	4119      	asrs	r1, r3
  413c42:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  413c46:	e7e5      	b.n	413c14 <lv_font_get_bitmap_fmt_txt+0xb5c>
            bit_mask = 0x3;
  413c48:	2503      	movs	r5, #3
    uint32_t byte_pos = bit_pos >> 3;
  413c4a:	08e2      	lsrs	r2, r4, #3
    bit_pos = bit_pos & 0x7;
  413c4c:	f004 0307 	and.w	r3, r4, #7
    if(bit_pos + len >= 8) {
  413c50:	eb03 000c 	add.w	r0, r3, ip
  413c54:	2807      	cmp	r0, #7
  413c56:	d81b      	bhi.n	413c90 <lv_font_get_bitmap_fmt_txt+0xbd8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413c58:	f81a 2002 	ldrb.w	r2, [sl, r2]
  413c5c:	ebae 0303 	sub.w	r3, lr, r3
  413c60:	fa42 f303 	asr.w	r3, r2, r3
  413c64:	ea03 0005 	and.w	r0, r3, r5
                    rle_rdp += rle_bpp;
  413c68:	4464      	add	r4, ip
                    rle_prev_v = ret;
  413c6a:	9001      	str	r0, [sp, #4]
                    rle_rdp += rle_bpp;
  413c6c:	9b02      	ldr	r3, [sp, #8]
  413c6e:	9307      	str	r3, [sp, #28]
  413c70:	9b03      	ldr	r3, [sp, #12]
  413c72:	9309      	str	r3, [sp, #36]	; 0x24
                    rle_state = RLE_STATE_SINGLE;
  413c74:	465d      	mov	r5, fp
                    rle_rdp += rle_bpp;
  413c76:	9304      	str	r3, [sp, #16]
  413c78:	9305      	str	r3, [sp, #20]
  413c7a:	e752      	b.n	413b22 <lv_font_get_bitmap_fmt_txt+0xa6a>
            bit_mask = 0x7;
  413c7c:	2507      	movs	r5, #7
  413c7e:	e7e4      	b.n	413c4a <lv_font_get_bitmap_fmt_txt+0xb92>
            bit_mask = 0xF;
  413c80:	250f      	movs	r5, #15
  413c82:	e7e2      	b.n	413c4a <lv_font_get_bitmap_fmt_txt+0xb92>
            bit_mask = 0xFF;
  413c84:	25ff      	movs	r5, #255	; 0xff
  413c86:	e7e0      	b.n	413c4a <lv_font_get_bitmap_fmt_txt+0xb92>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413c88:	9d14      	ldr	r5, [sp, #80]	; 0x50
  413c8a:	e7de      	b.n	413c4a <lv_font_get_bitmap_fmt_txt+0xb92>
            bit_mask = 0x1;
  413c8c:	9d02      	ldr	r5, [sp, #8]
  413c8e:	e7dc      	b.n	413c4a <lv_font_get_bitmap_fmt_txt+0xb92>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413c90:	f81a 0002 	ldrb.w	r0, [sl, r2]
  413c94:	4452      	add	r2, sl
  413c96:	7852      	ldrb	r2, [r2, #1]
  413c98:	eb02 2200 	add.w	r2, r2, r0, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413c9c:	b292      	uxth	r2, r2
  413c9e:	980a      	ldr	r0, [sp, #40]	; 0x28
  413ca0:	1ac3      	subs	r3, r0, r3
  413ca2:	fa42 f303 	asr.w	r3, r2, r3
  413ca6:	ea03 0005 	and.w	r0, r3, r5
  413caa:	e7dd      	b.n	413c68 <lv_font_get_bitmap_fmt_txt+0xbb0>
            bit_mask = 0x3;
  413cac:	2503      	movs	r5, #3
  413cae:	e008      	b.n	413cc2 <lv_font_get_bitmap_fmt_txt+0xc0a>
            bit_mask = 0x7;
  413cb0:	2507      	movs	r5, #7
  413cb2:	e006      	b.n	413cc2 <lv_font_get_bitmap_fmt_txt+0xc0a>
            bit_mask = 0xF;
  413cb4:	250f      	movs	r5, #15
  413cb6:	e004      	b.n	413cc2 <lv_font_get_bitmap_fmt_txt+0xc0a>
            bit_mask = 0xFF;
  413cb8:	25ff      	movs	r5, #255	; 0xff
  413cba:	e002      	b.n	413cc2 <lv_font_get_bitmap_fmt_txt+0xc0a>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413cbc:	9d14      	ldr	r5, [sp, #80]	; 0x50
  413cbe:	e000      	b.n	413cc2 <lv_font_get_bitmap_fmt_txt+0xc0a>
            bit_mask = 0x1;
  413cc0:	9d02      	ldr	r5, [sp, #8]
    uint32_t byte_pos = bit_pos >> 3;
  413cc2:	08d8      	lsrs	r0, r3, #3
    bit_pos = bit_pos & 0x7;
  413cc4:	f003 0207 	and.w	r2, r3, #7
    if(bit_pos + len >= 8) {
  413cc8:	eb02 040c 	add.w	r4, r2, ip
  413ccc:	2c07      	cmp	r4, #7
  413cce:	d810      	bhi.n	413cf2 <lv_font_get_bitmap_fmt_txt+0xc3a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413cd0:	f81a 0000 	ldrb.w	r0, [sl, r0]
  413cd4:	ebae 0202 	sub.w	r2, lr, r2
  413cd8:	4110      	asrs	r0, r2
  413cda:	4028      	ands	r0, r5
            rle_rdp += rle_bpp;
  413cdc:	eb03 040c 	add.w	r4, r3, ip
            rle_prev_v = ret;
  413ce0:	9001      	str	r0, [sp, #4]
            rle_rdp += rle_bpp;
  413ce2:	9b02      	ldr	r3, [sp, #8]
  413ce4:	9307      	str	r3, [sp, #28]
  413ce6:	9b03      	ldr	r3, [sp, #12]
  413ce8:	9309      	str	r3, [sp, #36]	; 0x24
            rle_state = RLE_STATE_SINGLE;
  413cea:	465d      	mov	r5, fp
            rle_rdp += rle_bpp;
  413cec:	9304      	str	r3, [sp, #16]
  413cee:	9305      	str	r3, [sp, #20]
  413cf0:	e717      	b.n	413b22 <lv_font_get_bitmap_fmt_txt+0xa6a>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413cf2:	f81a 4000 	ldrb.w	r4, [sl, r0]
  413cf6:	4450      	add	r0, sl
  413cf8:	7840      	ldrb	r0, [r0, #1]
  413cfa:	eb00 2004 	add.w	r0, r0, r4, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413cfe:	b280      	uxth	r0, r0
  413d00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  413d02:	1aa2      	subs	r2, r4, r2
  413d04:	4110      	asrs	r0, r2
  413d06:	4028      	ands	r0, r5
  413d08:	e7e8      	b.n	413cdc <lv_font_get_bitmap_fmt_txt+0xc24>
        rle_cnt--;
  413d0a:	3901      	subs	r1, #1
        if(rle_cnt == 0) {
  413d0c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
  413d10:	d142      	bne.n	413d98 <lv_font_get_bitmap_fmt_txt+0xce0>
    switch(len) {
  413d12:	f1b8 0f07 	cmp.w	r8, #7
  413d16:	d80d      	bhi.n	413d34 <lv_font_get_bitmap_fmt_txt+0xc7c>
  413d18:	e8df f008 	tbb	[pc, r8]
  413d1c:	0806040e 	.word	0x0806040e
  413d20:	0a0c0c0c 	.word	0x0a0c0c0c
            bit_mask = 0x3;
  413d24:	2503      	movs	r5, #3
  413d26:	e008      	b.n	413d3a <lv_font_get_bitmap_fmt_txt+0xc82>
            bit_mask = 0x7;
  413d28:	2507      	movs	r5, #7
  413d2a:	e006      	b.n	413d3a <lv_font_get_bitmap_fmt_txt+0xc82>
            bit_mask = 0xF;
  413d2c:	250f      	movs	r5, #15
  413d2e:	e004      	b.n	413d3a <lv_font_get_bitmap_fmt_txt+0xc82>
            bit_mask = 0xFF;
  413d30:	25ff      	movs	r5, #255	; 0xff
  413d32:	e002      	b.n	413d3a <lv_font_get_bitmap_fmt_txt+0xc82>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413d34:	9d14      	ldr	r5, [sp, #80]	; 0x50
  413d36:	e000      	b.n	413d3a <lv_font_get_bitmap_fmt_txt+0xc82>
            bit_mask = 0x1;
  413d38:	9d02      	ldr	r5, [sp, #8]
    uint32_t byte_pos = bit_pos >> 3;
  413d3a:	08e2      	lsrs	r2, r4, #3
    bit_pos = bit_pos & 0x7;
  413d3c:	f004 0307 	and.w	r3, r4, #7
    if(bit_pos + len >= 8) {
  413d40:	eb03 000c 	add.w	r0, r3, ip
  413d44:	2807      	cmp	r0, #7
  413d46:	d811      	bhi.n	413d6c <lv_font_get_bitmap_fmt_txt+0xcb4>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413d48:	f81a 2002 	ldrb.w	r2, [sl, r2]
  413d4c:	ebae 0303 	sub.w	r3, lr, r3
  413d50:	fa42 f303 	asr.w	r3, r2, r3
  413d54:	ea03 0005 	and.w	r0, r3, r5
            rle_rdp += rle_bpp;
  413d58:	4464      	add	r4, ip
            rle_prev_v = ret;
  413d5a:	9001      	str	r0, [sp, #4]
            rle_rdp += rle_bpp;
  413d5c:	9b02      	ldr	r3, [sp, #8]
  413d5e:	9307      	str	r3, [sp, #28]
  413d60:	9b03      	ldr	r3, [sp, #12]
  413d62:	9309      	str	r3, [sp, #36]	; 0x24
            rle_state = RLE_STATE_SINGLE;
  413d64:	465d      	mov	r5, fp
            rle_rdp += rle_bpp;
  413d66:	9304      	str	r3, [sp, #16]
  413d68:	9305      	str	r3, [sp, #20]
  413d6a:	e6da      	b.n	413b22 <lv_font_get_bitmap_fmt_txt+0xa6a>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413d6c:	f81a 0002 	ldrb.w	r0, [sl, r2]
  413d70:	4452      	add	r2, sl
  413d72:	7852      	ldrb	r2, [r2, #1]
  413d74:	eb02 2200 	add.w	r2, r2, r0, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413d78:	b292      	uxth	r2, r2
  413d7a:	980a      	ldr	r0, [sp, #40]	; 0x28
  413d7c:	1ac3      	subs	r3, r0, r3
  413d7e:	fa42 f303 	asr.w	r3, r2, r3
  413d82:	ea03 0005 	and.w	r0, r3, r5
  413d86:	e7e7      	b.n	413d58 <lv_font_get_bitmap_fmt_txt+0xca0>
            ret = rle_prev_v;
  413d88:	9801      	ldr	r0, [sp, #4]
                if(rle_cnt != 0) {
  413d8a:	9b02      	ldr	r3, [sp, #8]
  413d8c:	9307      	str	r3, [sp, #28]
  413d8e:	9b03      	ldr	r3, [sp, #12]
  413d90:	9309      	str	r3, [sp, #36]	; 0x24
                    rle_state = RLE_STATE_COUNTER;
  413d92:	2502      	movs	r5, #2
                if(rle_cnt != 0) {
  413d94:	9304      	str	r3, [sp, #16]
  413d96:	e6c4      	b.n	413b22 <lv_font_get_bitmap_fmt_txt+0xa6a>
        ret = rle_prev_v;
  413d98:	9801      	ldr	r0, [sp, #4]
        if(rle_cnt == 0) {
  413d9a:	9b02      	ldr	r3, [sp, #8]
  413d9c:	9307      	str	r3, [sp, #28]
  413d9e:	e6c0      	b.n	413b22 <lv_font_get_bitmap_fmt_txt+0xa6a>
  413da0:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
  413da4:	f8dd e068 	ldr.w	lr, [sp, #104]	; 0x68
  413da8:	9108      	str	r1, [sp, #32]
    for(i = 0; i < w; i++) {
  413daa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                val = 15;
  413dac:	f04f 0b0f 	mov.w	fp, #15
                val = 2;
  413db0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  413db4:	9514      	str	r5, [sp, #80]	; 0x50
  413db6:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  413dba:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
  413dbe:	e022      	b.n	413e06 <lv_font_get_bitmap_fmt_txt+0xd4e>
        switch(val) {
  413dc0:	2907      	cmp	r1, #7
  413dc2:	d83c      	bhi.n	413e3e <lv_font_get_bitmap_fmt_txt+0xd86>
  413dc4:	e8df f001 	tbb	[pc, r1]
  413dc8:	2c292604 	.word	0x2c292604
  413dcc:	3835322f 	.word	0x3835322f
        len = 4;
  413dd0:	2304      	movs	r3, #4
                val = 0;
  413dd2:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  413dd4:	f006 0207 	and.w	r2, r6, #7
  413dd8:	f1c2 0208 	rsb	r2, r2, #8
    bit_pos = 8 - bit_pos - len;
  413ddc:	1ad2      	subs	r2, r2, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  413dde:	f3c6 00cf 	ubfx	r0, r6, #3, #16
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413de2:	2501      	movs	r5, #1
  413de4:	fa05 f303 	lsl.w	r3, r5, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  413de8:	425b      	negs	r3, r3
  413dea:	f063 03ff 	orn	r3, r3, #255	; 0xff
  413dee:	4093      	lsls	r3, r2
  413df0:	f819 5000 	ldrb.w	r5, [r9, r0]
  413df4:	402b      	ands	r3, r5
    out[byte_pos] |= (val << bit_pos);
  413df6:	fa01 f202 	lsl.w	r2, r1, r2
  413dfa:	4313      	orrs	r3, r2
  413dfc:	f809 3000 	strb.w	r3, [r9, r0]
  413e00:	4456      	add	r6, sl
            for(x = 0; x < w; x++) {
  413e02:	4577      	cmp	r7, lr
  413e04:	d01d      	beq.n	413e42 <lv_font_get_bitmap_fmt_txt+0xd8a>
                bits_write(out, wrp, line_buf1[x], bpp);
  413e06:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    if(len == 3) {
  413e0a:	f1b8 0f03 	cmp.w	r8, #3
  413e0e:	d0d7      	beq.n	413dc0 <lv_font_get_bitmap_fmt_txt+0xd08>
  413e10:	9b06      	ldr	r3, [sp, #24]
  413e12:	e7df      	b.n	413dd4 <lv_font_get_bitmap_fmt_txt+0xd1c>
        len = 4;
  413e14:	2304      	movs	r3, #4
                val = 2;
  413e16:	2102      	movs	r1, #2
  413e18:	e7dc      	b.n	413dd4 <lv_font_get_bitmap_fmt_txt+0xd1c>
        len = 4;
  413e1a:	2304      	movs	r3, #4
                val = 4;
  413e1c:	991d      	ldr	r1, [sp, #116]	; 0x74
  413e1e:	e7d9      	b.n	413dd4 <lv_font_get_bitmap_fmt_txt+0xd1c>
        len = 4;
  413e20:	2304      	movs	r3, #4
                val = 6;
  413e22:	2106      	movs	r1, #6
  413e24:	e7d6      	b.n	413dd4 <lv_font_get_bitmap_fmt_txt+0xd1c>
        len = 4;
  413e26:	2304      	movs	r3, #4
                val = 9;
  413e28:	2109      	movs	r1, #9
  413e2a:	e7d3      	b.n	413dd4 <lv_font_get_bitmap_fmt_txt+0xd1c>
        len = 4;
  413e2c:	2304      	movs	r3, #4
                val = 11;
  413e2e:	210b      	movs	r1, #11
  413e30:	e7d0      	b.n	413dd4 <lv_font_get_bitmap_fmt_txt+0xd1c>
        len = 4;
  413e32:	2304      	movs	r3, #4
                val = 13;
  413e34:	210d      	movs	r1, #13
  413e36:	e7cd      	b.n	413dd4 <lv_font_get_bitmap_fmt_txt+0xd1c>
        len = 4;
  413e38:	2304      	movs	r3, #4
                val = 15;
  413e3a:	4659      	mov	r1, fp
  413e3c:	e7ca      	b.n	413dd4 <lv_font_get_bitmap_fmt_txt+0xd1c>
        len = 4;
  413e3e:	2304      	movs	r3, #4
  413e40:	e7c8      	b.n	413dd4 <lv_font_get_bitmap_fmt_txt+0xd1c>
  413e42:	9d14      	ldr	r5, [sp, #80]	; 0x50
  413e44:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
  413e48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  413e4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  413e4c:	4413      	add	r3, r2
  413e4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  413e50:	441a      	add	r2, r3
  413e52:	920c      	str	r2, [sp, #48]	; 0x30
  413e54:	e61c      	b.n	413a90 <lv_font_get_bitmap_fmt_txt+0x9d8>
  413e56:	46ab      	mov	fp, r5
  413e58:	46a0      	mov	r8, r4
  413e5a:	9b05      	ldr	r3, [sp, #20]
  413e5c:	b9cb      	cbnz	r3, 413e92 <lv_font_get_bitmap_fmt_txt+0xdda>
  413e5e:	9b04      	ldr	r3, [sp, #16]
  413e60:	b113      	cbz	r3, 413e68 <lv_font_get_bitmap_fmt_txt+0xdb0>
  413e62:	4b11      	ldr	r3, [pc, #68]	; (413ea8 <lv_font_get_bitmap_fmt_txt+0xdf0>)
  413e64:	f8c3 8000 	str.w	r8, [r3]
  413e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
  413e6a:	b113      	cbz	r3, 413e72 <lv_font_get_bitmap_fmt_txt+0xdba>
  413e6c:	4b0f      	ldr	r3, [pc, #60]	; (413eac <lv_font_get_bitmap_fmt_txt+0xdf4>)
  413e6e:	f883 b000 	strb.w	fp, [r3]
  413e72:	9b07      	ldr	r3, [sp, #28]
  413e74:	b11b      	cbz	r3, 413e7e <lv_font_get_bitmap_fmt_txt+0xdc6>
  413e76:	4b0e      	ldr	r3, [pc, #56]	; (413eb0 <lv_font_get_bitmap_fmt_txt+0xdf8>)
  413e78:	f89d 2020 	ldrb.w	r2, [sp, #32]
  413e7c:	701a      	strb	r2, [r3, #0]
    _lv_mem_buf_release(line_buf1);
  413e7e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  413e80:	4c0c      	ldr	r4, [pc, #48]	; (413eb4 <lv_font_get_bitmap_fmt_txt+0xdfc>)
  413e82:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
  413e84:	9815      	ldr	r0, [sp, #84]	; 0x54
  413e86:	47a0      	blx	r4
        return LV_GC_ROOT(_lv_font_decompr_buf);
  413e88:	4b0b      	ldr	r3, [pc, #44]	; (413eb8 <lv_font_get_bitmap_fmt_txt+0xe00>)
  413e8a:	6818      	ldr	r0, [r3, #0]
}
  413e8c:	b01f      	add	sp, #124	; 0x7c
  413e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413e92:	4b0a      	ldr	r3, [pc, #40]	; (413ebc <lv_font_get_bitmap_fmt_txt+0xe04>)
  413e94:	f89d 2004 	ldrb.w	r2, [sp, #4]
  413e98:	701a      	strb	r2, [r3, #0]
  413e9a:	e7e0      	b.n	413e5e <lv_font_get_bitmap_fmt_txt+0xda6>
    if(!gid) return NULL;
  413e9c:	2000      	movs	r0, #0
  413e9e:	e7f5      	b.n	413e8c <lv_font_get_bitmap_fmt_txt+0xdd4>
        if(gsize == 0) return NULL;
  413ea0:	2000      	movs	r0, #0
  413ea2:	e7f3      	b.n	413e8c <lv_font_get_bitmap_fmt_txt+0xdd4>
            if(tmp == NULL) return NULL;
  413ea4:	2000      	movs	r0, #0
  413ea6:	e7f1      	b.n	413e8c <lv_font_get_bitmap_fmt_txt+0xdd4>
  413ea8:	2040c6ec 	.word	0x2040c6ec
  413eac:	2040c6f0 	.word	0x2040c6f0
  413eb0:	2040c6e1 	.word	0x2040c6e1
  413eb4:	0041595d 	.word	0x0041595d
  413eb8:	2043a150 	.word	0x2043a150
  413ebc:	2040c6e8 	.word	0x2040c6e8

00413ec0 <lv_font_get_glyph_dsc_fmt_txt>:
{
  413ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  413ec4:	b084      	sub	sp, #16
  413ec6:	4607      	mov	r7, r0
  413ec8:	460c      	mov	r4, r1
  413eca:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
  413ecc:	2a09      	cmp	r2, #9
  413ece:	d036      	beq.n	413f3e <lv_font_get_glyph_dsc_fmt_txt+0x7e>
    bool is_tab = false;
  413ed0:	2500      	movs	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  413ed2:	693e      	ldr	r6, [r7, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  413ed4:	4611      	mov	r1, r2
  413ed6:	4638      	mov	r0, r7
  413ed8:	4b49      	ldr	r3, [pc, #292]	; (414000 <lv_font_get_glyph_dsc_fmt_txt+0x140>)
  413eda:	4798      	blx	r3
    if(!gid) return false;
  413edc:	4680      	mov	r8, r0
  413ede:	2800      	cmp	r0, #0
  413ee0:	f000 8087 	beq.w	413ff2 <lv_font_get_glyph_dsc_fmt_txt+0x132>
    if(fdsc->kern_dsc) {
  413ee4:	68f3      	ldr	r3, [r6, #12]
  413ee6:	2b00      	cmp	r3, #0
  413ee8:	d07f      	beq.n	413fea <lv_font_get_glyph_dsc_fmt_txt+0x12a>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
  413eea:	4649      	mov	r1, r9
  413eec:	4638      	mov	r0, r7
  413eee:	4b44      	ldr	r3, [pc, #272]	; (414000 <lv_font_get_glyph_dsc_fmt_txt+0x140>)
  413ef0:	4798      	blx	r3
        if(gid_next) {
  413ef2:	4603      	mov	r3, r0
  413ef4:	bb30      	cbnz	r0, 413f44 <lv_font_get_glyph_dsc_fmt_txt+0x84>
    int8_t kvalue = 0;
  413ef6:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  413ef8:	6870      	ldr	r0, [r6, #4]
  413efa:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
  413efe:	8a32      	ldrh	r2, [r6, #16]
  413f00:	fb03 f302 	mul.w	r3, r3, r2
  413f04:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
  413f06:	8842      	ldrh	r2, [r0, #2]
  413f08:	f3c2 120b 	ubfx	r2, r2, #4, #12
    if(is_tab) adv_w *= 2;
  413f0c:	b105      	cbz	r5, 413f10 <lv_font_get_glyph_dsc_fmt_txt+0x50>
  413f0e:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
  413f10:	3308      	adds	r3, #8
  413f12:	4413      	add	r3, r2
  413f14:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
  413f16:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
  413f18:	7943      	ldrb	r3, [r0, #5]
  413f1a:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
  413f1c:	7902      	ldrb	r2, [r0, #4]
  413f1e:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
  413f20:	f990 3006 	ldrsb.w	r3, [r0, #6]
  413f24:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
  413f26:	f990 3007 	ldrsb.w	r3, [r0, #7]
  413f2a:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
  413f2c:	7cf3      	ldrb	r3, [r6, #19]
  413f2e:	f3c3 0343 	ubfx	r3, r3, #1, #4
  413f32:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
  413f34:	2d00      	cmp	r5, #0
  413f36:	d061      	beq.n	413ffc <lv_font_get_glyph_dsc_fmt_txt+0x13c>
  413f38:	0052      	lsls	r2, r2, #1
  413f3a:	8062      	strh	r2, [r4, #2]
  413f3c:	e05a      	b.n	413ff4 <lv_font_get_glyph_dsc_fmt_txt+0x134>
        is_tab = true;
  413f3e:	2501      	movs	r5, #1
        unicode_letter = ' ';
  413f40:	2220      	movs	r2, #32
  413f42:	e7c6      	b.n	413ed2 <lv_font_get_glyph_dsc_fmt_txt+0x12>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  413f44:	693a      	ldr	r2, [r7, #16]
    if(fdsc->kern_classes == 0) {
  413f46:	7cd1      	ldrb	r1, [r2, #19]
  413f48:	f011 0f20 	tst.w	r1, #32
  413f4c:	d13c      	bne.n	413fc8 <lv_font_get_glyph_dsc_fmt_txt+0x108>
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
  413f4e:	68d7      	ldr	r7, [r2, #12]
        if(kdsc->glyph_ids_size == 0) {
  413f50:	7afa      	ldrb	r2, [r7, #11]
  413f52:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
  413f56:	d003      	beq.n	413f60 <lv_font_get_glyph_dsc_fmt_txt+0xa0>
        else if(kdsc->glyph_ids_size == 1) {
  413f58:	2a40      	cmp	r2, #64	; 0x40
  413f5a:	d01b      	beq.n	413f94 <lv_font_get_glyph_dsc_fmt_txt+0xd4>
    int8_t value = 0;
  413f5c:	2300      	movs	r3, #0
  413f5e:	e7cb      	b.n	413ef8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            const uint16_t * g_ids = kdsc->glyph_ids;
  413f60:	f8d7 9000 	ldr.w	r9, [r7]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
  413f64:	eb08 2300 	add.w	r3, r8, r0, lsl #8
  413f68:	a804      	add	r0, sp, #16
  413f6a:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
  413f6e:	68ba      	ldr	r2, [r7, #8]
  413f70:	4b24      	ldr	r3, [pc, #144]	; (414004 <lv_font_get_glyph_dsc_fmt_txt+0x144>)
  413f72:	9300      	str	r3, [sp, #0]
  413f74:	2302      	movs	r3, #2
  413f76:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  413f7a:	4649      	mov	r1, r9
  413f7c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 41400c <lv_font_get_glyph_dsc_fmt_txt+0x14c>
  413f80:	47d0      	blx	sl
            if(kid_p) {
  413f82:	b128      	cbz	r0, 413f90 <lv_font_get_glyph_dsc_fmt_txt+0xd0>
                lv_uintptr_t ofs = kid_p - g_ids;
  413f84:	eba0 0309 	sub.w	r3, r0, r9
  413f88:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
  413f8a:	687a      	ldr	r2, [r7, #4]
  413f8c:	56d3      	ldrsb	r3, [r2, r3]
  413f8e:	e7b3      	b.n	413ef8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
    int8_t value = 0;
  413f90:	2300      	movs	r3, #0
  413f92:	e7b1      	b.n	413ef8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            const uint32_t * g_ids = kdsc->glyph_ids;
  413f94:	f8d7 9000 	ldr.w	r9, [r7]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
  413f98:	eb08 4300 	add.w	r3, r8, r0, lsl #16
  413f9c:	a804      	add	r0, sp, #16
  413f9e:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
  413fa2:	68ba      	ldr	r2, [r7, #8]
  413fa4:	4b18      	ldr	r3, [pc, #96]	; (414008 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
  413fa6:	9300      	str	r3, [sp, #0]
  413fa8:	2304      	movs	r3, #4
  413faa:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  413fae:	4649      	mov	r1, r9
  413fb0:	f8df a058 	ldr.w	sl, [pc, #88]	; 41400c <lv_font_get_glyph_dsc_fmt_txt+0x14c>
  413fb4:	47d0      	blx	sl
            if(kid_p) {
  413fb6:	b128      	cbz	r0, 413fc4 <lv_font_get_glyph_dsc_fmt_txt+0x104>
                lv_uintptr_t ofs = kid_p - g_ids;
  413fb8:	eba0 0309 	sub.w	r3, r0, r9
  413fbc:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
  413fbe:	687a      	ldr	r2, [r7, #4]
  413fc0:	56d3      	ldrsb	r3, [r2, r3]
  413fc2:	e799      	b.n	413ef8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
    int8_t value = 0;
  413fc4:	2300      	movs	r3, #0
  413fc6:	e797      	b.n	413ef8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
  413fc8:	68d1      	ldr	r1, [r2, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
  413fca:	684a      	ldr	r2, [r1, #4]
  413fcc:	f812 2008 	ldrb.w	r2, [r2, r8]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
  413fd0:	6888      	ldr	r0, [r1, #8]
  413fd2:	5cc0      	ldrb	r0, [r0, r3]
        if(left_class > 0 && right_class > 0) {
  413fd4:	b15a      	cbz	r2, 413fee <lv_font_get_glyph_dsc_fmt_txt+0x12e>
  413fd6:	b150      	cbz	r0, 413fee <lv_font_get_glyph_dsc_fmt_txt+0x12e>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
  413fd8:	3a01      	subs	r2, #1
  413fda:	7b4f      	ldrb	r7, [r1, #13]
  413fdc:	680b      	ldr	r3, [r1, #0]
  413fde:	4403      	add	r3, r0
  413fe0:	fb07 3202 	mla	r2, r7, r2, r3
  413fe4:	f912 3c01 	ldrsb.w	r3, [r2, #-1]
  413fe8:	e786      	b.n	413ef8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
    int8_t kvalue = 0;
  413fea:	2300      	movs	r3, #0
  413fec:	e784      	b.n	413ef8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
    int8_t value = 0;
  413fee:	2300      	movs	r3, #0
  413ff0:	e782      	b.n	413ef8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
    if(!gid) return false;
  413ff2:	2500      	movs	r5, #0
}
  413ff4:	4628      	mov	r0, r5
  413ff6:	b004      	add	sp, #16
  413ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return true;
  413ffc:	2501      	movs	r5, #1
  413ffe:	e7f9      	b.n	413ff4 <lv_font_get_glyph_dsc_fmt_txt+0x134>
  414000:	00412fcd 	.word	0x00412fcd
  414004:	00412f9d 	.word	0x00412f9d
  414008:	00412fb1 	.word	0x00412fb1
  41400c:	004173a9 	.word	0x004173a9

00414010 <_lv_font_clean_up_fmt_txt>:
{
  414010:	b508      	push	{r3, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
  414012:	4b04      	ldr	r3, [pc, #16]	; (414024 <_lv_font_clean_up_fmt_txt+0x14>)
  414014:	6818      	ldr	r0, [r3, #0]
  414016:	b120      	cbz	r0, 414022 <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
  414018:	4b03      	ldr	r3, [pc, #12]	; (414028 <_lv_font_clean_up_fmt_txt+0x18>)
  41401a:	4798      	blx	r3
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
  41401c:	2200      	movs	r2, #0
  41401e:	4b01      	ldr	r3, [pc, #4]	; (414024 <_lv_font_clean_up_fmt_txt+0x14>)
  414020:	601a      	str	r2, [r3, #0]
  414022:	bd08      	pop	{r3, pc}
  414024:	2043a150 	.word	0x2043a150
  414028:	004158b9 	.word	0x004158b9

0041402c <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
  41402c:	b510      	push	{r4, lr}
  41402e:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
  414030:	2134      	movs	r1, #52	; 0x34
  414032:	4b12      	ldr	r3, [pc, #72]	; (41407c <lv_disp_drv_init+0x50>)
  414034:	4798      	blx	r3

    driver->flush_cb         = NULL;
  414036:	2300      	movs	r3, #0
  414038:	60e3      	str	r3, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
  41403a:	22f0      	movs	r2, #240	; 0xf0
  41403c:	8022      	strh	r2, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
  41403e:	f44f 72a0 	mov.w	r2, #320	; 0x140
  414042:	8062      	strh	r2, [r4, #2]
    driver->buffer           = NULL;
  414044:	6063      	str	r3, [r4, #4]
    driver->rotated          = 0;
  414046:	7a22      	ldrb	r2, [r4, #8]
  414048:	f363 0241 	bfi	r2, r3, #1, #1
  41404c:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
  41404e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  414052:	f042 0207 	orr.w	r2, r2, #7
  414056:	f363 02c7 	bfi	r2, r3, #3, #5
  41405a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  41405e:	22e0      	movs	r2, #224	; 0xe0
  414060:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    driver->dpi = LV_DPI;
  414064:	8922      	ldrh	r2, [r4, #8]
  414066:	2194      	movs	r1, #148	; 0x94
  414068:	f361 028b 	bfi	r2, r1, #2, #10
  41406c:	8122      	strh	r2, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
  41406e:	f042 0201 	orr.w	r2, r2, #1
  414072:	7222      	strb	r2, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
  414074:	62a3      	str	r3, [r4, #40]	; 0x28
    driver->gpu_fill_cb  = NULL;
  414076:	62e3      	str	r3, [r4, #44]	; 0x2c

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
  414078:	6163      	str	r3, [r4, #20]
  41407a:	bd10      	pop	{r4, pc}
  41407c:	00415ead 	.word	0x00415ead

00414080 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
  414080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414082:	4604      	mov	r4, r0
  414084:	460d      	mov	r5, r1
  414086:	4617      	mov	r7, r2
  414088:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
  41408a:	2124      	movs	r1, #36	; 0x24
  41408c:	4b03      	ldr	r3, [pc, #12]	; (41409c <lv_disp_buf_init+0x1c>)
  41408e:	4798      	blx	r3

    disp_buf->buf1    = buf1;
  414090:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
  414092:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
  414094:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
  414096:	60e6      	str	r6, [r4, #12]
  414098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41409a:	bf00      	nop
  41409c:	00415ead 	.word	0x00415ead

004140a0 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
  4140a0:	4b01      	ldr	r3, [pc, #4]	; (4140a8 <lv_disp_get_default+0x8>)
  4140a2:	6818      	ldr	r0, [r3, #0]
  4140a4:	4770      	bx	lr
  4140a6:	bf00      	nop
  4140a8:	2040c6f4 	.word	0x2040c6f4

004140ac <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
  4140ac:	4603      	mov	r3, r0
  4140ae:	b140      	cbz	r0, 4140c2 <lv_disp_get_hor_res+0x16>

    if(disp == NULL)
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  4140b0:	7a1a      	ldrb	r2, [r3, #8]
  4140b2:	f012 0f02 	tst.w	r2, #2
  4140b6:	bf0c      	ite	eq
  4140b8:	f9b3 0000 	ldrsheq.w	r0, [r3]
  4140bc:	f9b3 0002 	ldrshne.w	r0, [r3, #2]
  4140c0:	4770      	bx	lr
    return disp_def;
  4140c2:	4b03      	ldr	r3, [pc, #12]	; (4140d0 <lv_disp_get_hor_res+0x24>)
  4140c4:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
  4140c6:	2b00      	cmp	r3, #0
  4140c8:	d1f2      	bne.n	4140b0 <lv_disp_get_hor_res+0x4>
        return LV_HOR_RES_MAX;
  4140ca:	20f0      	movs	r0, #240	; 0xf0
}
  4140cc:	4770      	bx	lr
  4140ce:	bf00      	nop
  4140d0:	2040c6f4 	.word	0x2040c6f4

004140d4 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
  4140d4:	4603      	mov	r3, r0
  4140d6:	b140      	cbz	r0, 4140ea <lv_disp_get_ver_res+0x16>

    if(disp == NULL)
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  4140d8:	7a1a      	ldrb	r2, [r3, #8]
  4140da:	f012 0f02 	tst.w	r2, #2
  4140de:	bf0c      	ite	eq
  4140e0:	f9b3 0002 	ldrsheq.w	r0, [r3, #2]
  4140e4:	f9b3 0000 	ldrshne.w	r0, [r3]
  4140e8:	4770      	bx	lr
    return disp_def;
  4140ea:	4b03      	ldr	r3, [pc, #12]	; (4140f8 <lv_disp_get_ver_res+0x24>)
  4140ec:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
  4140ee:	2b00      	cmp	r3, #0
  4140f0:	d1f2      	bne.n	4140d8 <lv_disp_get_ver_res+0x4>
        return LV_VER_RES_MAX;
  4140f2:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
  4140f6:	4770      	bx	lr
  4140f8:	2040c6f4 	.word	0x2040c6f4

004140fc <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
  4140fc:	4603      	mov	r3, r0
  4140fe:	b118      	cbz	r0, 414108 <lv_disp_get_dpi+0xc>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
    return disp->driver.dpi;
  414100:	8918      	ldrh	r0, [r3, #8]
  414102:	f3c0 0089 	ubfx	r0, r0, #2, #10
  414106:	4770      	bx	lr
    return disp_def;
  414108:	4b02      	ldr	r3, [pc, #8]	; (414114 <lv_disp_get_dpi+0x18>)
  41410a:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  41410c:	2b00      	cmp	r3, #0
  41410e:	d1f7      	bne.n	414100 <lv_disp_get_dpi+0x4>
  414110:	2094      	movs	r0, #148	; 0x94
}
  414112:	4770      	bx	lr
  414114:	2040c6f4 	.word	0x2040c6f4

00414118 <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
  414118:	b538      	push	{r3, r4, r5, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  41411a:	4605      	mov	r5, r0
  41411c:	b1a0      	cbz	r0, 414148 <lv_disp_get_size_category+0x30>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
    else w = lv_disp_get_hor_res(disp);
  41411e:	4628      	mov	r0, r5
  414120:	4b0e      	ldr	r3, [pc, #56]	; (41415c <lv_disp_get_size_category+0x44>)
  414122:	4798      	blx	r3
  414124:	4604      	mov	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
  414126:	4628      	mov	r0, r5
  414128:	4b0d      	ldr	r3, [pc, #52]	; (414160 <lv_disp_get_size_category+0x48>)
  41412a:	4798      	blx	r3

    w = w * 10 / dpi;
  41412c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  414130:	0064      	lsls	r4, r4, #1
  414132:	fbb4 f0f0 	udiv	r0, r4, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  414136:	281d      	cmp	r0, #29
  414138:	d90c      	bls.n	414154 <lv_disp_get_size_category+0x3c>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  41413a:	2831      	cmp	r0, #49	; 0x31
  41413c:	d90c      	bls.n	414158 <lv_disp_get_size_category+0x40>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
    else return LV_DISP_SIZE_EXTRA_LARGE;
  41413e:	2846      	cmp	r0, #70	; 0x46
  414140:	bf34      	ite	cc
  414142:	2002      	movcc	r0, #2
  414144:	2003      	movcs	r0, #3
  414146:	bd38      	pop	{r3, r4, r5, pc}
    return disp_def;
  414148:	4b06      	ldr	r3, [pc, #24]	; (414164 <lv_disp_get_size_category+0x4c>)
  41414a:	681d      	ldr	r5, [r3, #0]
    if(disp == NULL) w = LV_HOR_RES_MAX;
  41414c:	2d00      	cmp	r5, #0
  41414e:	d1e6      	bne.n	41411e <lv_disp_get_size_category+0x6>
  414150:	24f0      	movs	r4, #240	; 0xf0
  414152:	e7e8      	b.n	414126 <lv_disp_get_size_category+0xe>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  414154:	2000      	movs	r0, #0
  414156:	bd38      	pop	{r3, r4, r5, pc}
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  414158:	2001      	movs	r0, #1
}
  41415a:	bd38      	pop	{r3, r4, r5, pc}
  41415c:	004140ad 	.word	0x004140ad
  414160:	004140fd 	.word	0x004140fd
  414164:	2040c6f4 	.word	0x2040c6f4

00414168 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
  414168:	6842      	ldr	r2, [r0, #4]
  41416a:	2300      	movs	r3, #0
  41416c:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
  41416e:	6842      	ldr	r2, [r0, #4]
  414170:	61d3      	str	r3, [r2, #28]
  414172:	4770      	bx	lr

00414174 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
  414174:	b508      	push	{r3, lr}
    if(disp == NULL)
  414176:	b120      	cbz	r0, 414182 <lv_disp_get_next+0xe>
  414178:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
  41417a:	4804      	ldr	r0, [pc, #16]	; (41418c <lv_disp_get_next+0x18>)
  41417c:	4b04      	ldr	r3, [pc, #16]	; (414190 <lv_disp_get_next+0x1c>)
  41417e:	4798      	blx	r3
}
  414180:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
  414182:	4802      	ldr	r0, [pc, #8]	; (41418c <lv_disp_get_next+0x18>)
  414184:	4b03      	ldr	r3, [pc, #12]	; (414194 <lv_disp_get_next+0x20>)
  414186:	4798      	blx	r3
  414188:	bd08      	pop	{r3, pc}
  41418a:	bf00      	nop
  41418c:	2043a160 	.word	0x2043a160
  414190:	00415401 	.word	0x00415401
  414194:	004153ed 	.word	0x004153ed

00414198 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
  414198:	6840      	ldr	r0, [r0, #4]
  41419a:	4770      	bx	lr

0041419c <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
  41419c:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
}
  4141a0:	f3c0 0009 	ubfx	r0, r0, #0, #10
  4141a4:	4770      	bx	lr

004141a6 <_lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
  4141a6:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  4141aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4141ae:	428b      	cmp	r3, r1
  4141b0:	db07      	blt.n	4141c2 <_lv_disp_pop_from_inv_buf+0x1c>
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
  4141b2:	1a5b      	subs	r3, r3, r1
  4141b4:	f8b0 2182 	ldrh.w	r2, [r0, #386]	; 0x182
  4141b8:	f363 0209 	bfi	r2, r3, #0, #10
  4141bc:	f8a0 2182 	strh.w	r2, [r0, #386]	; 0x182
  4141c0:	4770      	bx	lr
        disp->inv_p = 0;
  4141c2:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  4141c6:	f36f 0309 	bfc	r3, #0, #10
  4141ca:	f8a0 3182 	strh.w	r3, [r0, #386]	; 0x182
  4141ce:	4770      	bx	lr

004141d0 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
  4141d0:	6843      	ldr	r3, [r0, #4]
  4141d2:	681a      	ldr	r2, [r3, #0]
  4141d4:	b122      	cbz	r2, 4141e0 <lv_disp_is_double_buf+0x10>
  4141d6:	6858      	ldr	r0, [r3, #4]
  4141d8:	3000      	adds	r0, #0
  4141da:	bf18      	it	ne
  4141dc:	2001      	movne	r0, #1
  4141de:	4770      	bx	lr
        return true;
    else
        return false;
  4141e0:	2000      	movs	r0, #0
}
  4141e2:	4770      	bx	lr

004141e4 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
  4141e4:	b510      	push	{r4, lr}
  4141e6:	4604      	mov	r4, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
  4141e8:	4b08      	ldr	r3, [pc, #32]	; (41420c <lv_disp_is_true_double_buf+0x28>)
  4141ea:	4798      	blx	r3
  4141ec:	4603      	mov	r3, r0
  4141ee:	b158      	cbz	r0, 414208 <lv_disp_is_true_double_buf+0x24>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
  4141f0:	f9b4 2000 	ldrsh.w	r2, [r4]
  4141f4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  4141f8:	fb03 f302 	mul.w	r3, r3, r2
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
  4141fc:	6862      	ldr	r2, [r4, #4]
  4141fe:	68d2      	ldr	r2, [r2, #12]
  414200:	4293      	cmp	r3, r2
  414202:	bf14      	ite	ne
  414204:	2300      	movne	r3, #0
  414206:	2301      	moveq	r3, #1
        return true;
    }
    else {
        return false;
    }
}
  414208:	4618      	mov	r0, r3
  41420a:	bd10      	pop	{r4, pc}
  41420c:	004141d1 	.word	0x004141d1

00414210 <lv_disp_drv_register>:
{
  414210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414212:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
  414214:	483b      	ldr	r0, [pc, #236]	; (414304 <lv_disp_drv_register+0xf4>)
  414216:	4b3c      	ldr	r3, [pc, #240]	; (414308 <lv_disp_drv_register+0xf8>)
  414218:	4798      	blx	r3
    if(!disp) {
  41421a:	4604      	mov	r4, r0
  41421c:	2800      	cmp	r0, #0
  41421e:	d05c      	beq.n	4142da <lv_disp_drv_register+0xca>
    _lv_memset_00(disp, sizeof(lv_disp_t));
  414220:	f44f 71c4 	mov.w	r1, #392	; 0x188
  414224:	4b39      	ldr	r3, [pc, #228]	; (41430c <lv_disp_drv_register+0xfc>)
  414226:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
  414228:	2234      	movs	r2, #52	; 0x34
  41422a:	4629      	mov	r1, r5
  41422c:	4620      	mov	r0, r4
  41422e:	4b38      	ldr	r3, [pc, #224]	; (414310 <lv_disp_drv_register+0x100>)
  414230:	4798      	blx	r3
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
  414232:	214c      	movs	r1, #76	; 0x4c
  414234:	f104 0038 	add.w	r0, r4, #56	; 0x38
  414238:	4b36      	ldr	r3, [pc, #216]	; (414314 <lv_disp_drv_register+0x104>)
  41423a:	4798      	blx	r3
    disp->last_activity_time = 0;
  41423c:	2300      	movs	r3, #0
  41423e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
    if(disp_def == NULL) disp_def = disp;
  414242:	4b35      	ldr	r3, [pc, #212]	; (414318 <lv_disp_drv_register+0x108>)
  414244:	681b      	ldr	r3, [r3, #0]
  414246:	2b00      	cmp	r3, #0
  414248:	d051      	beq.n	4142ee <lv_disp_drv_register+0xde>
    lv_disp_t * disp_def_tmp = disp_def;
  41424a:	4b33      	ldr	r3, [pc, #204]	; (414318 <lv_disp_drv_register+0x108>)
  41424c:	681f      	ldr	r7, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
  41424e:	601c      	str	r4, [r3, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
  414250:	4623      	mov	r3, r4
  414252:	2203      	movs	r2, #3
  414254:	211e      	movs	r1, #30
  414256:	4831      	ldr	r0, [pc, #196]	; (41431c <lv_disp_drv_register+0x10c>)
  414258:	4d31      	ldr	r5, [pc, #196]	; (414320 <lv_disp_drv_register+0x110>)
  41425a:	47a8      	blx	r5
  41425c:	6360      	str	r0, [r4, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
  41425e:	4b31      	ldr	r3, [pc, #196]	; (414324 <lv_disp_drv_register+0x114>)
  414260:	4798      	blx	r3
  414262:	2800      	cmp	r0, #0
  414264:	d046      	beq.n	4142f4 <lv_disp_drv_register+0xe4>
    if(disp->refr_task == NULL) return NULL;
  414266:	6b63      	ldr	r3, [r4, #52]	; 0x34
  414268:	2b00      	cmp	r3, #0
  41426a:	d049      	beq.n	414300 <lv_disp_drv_register+0xf0>
    disp->inv_p = 0;
  41426c:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
  414270:	f36f 0309 	bfc	r3, #0, #10
  414274:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
    disp->last_activity_time = 0;
  414278:	2500      	movs	r5, #0
  41427a:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
    disp->bg_color = LV_COLOR_WHITE;
  41427e:	4b2a      	ldr	r3, [pc, #168]	; (414328 <lv_disp_drv_register+0x118>)
  414280:	881b      	ldrh	r3, [r3, #0]
  414282:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    disp->bg_img = NULL;
  414286:	65e5      	str	r5, [r4, #92]	; 0x5c
    disp->bg_opa = LV_OPA_COVER;
  414288:	23ff      	movs	r3, #255	; 0xff
  41428a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    disp->prev_scr  = NULL;
  41428e:	64a5      	str	r5, [r4, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
  414290:	4629      	mov	r1, r5
  414292:	4628      	mov	r0, r5
  414294:	4e25      	ldr	r6, [pc, #148]	; (41432c <lv_disp_drv_register+0x11c>)
  414296:	47b0      	blx	r6
  414298:	6460      	str	r0, [r4, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
  41429a:	4629      	mov	r1, r5
  41429c:	4628      	mov	r0, r5
  41429e:	47b0      	blx	r6
  4142a0:	6520      	str	r0, [r4, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
  4142a2:	4629      	mov	r1, r5
  4142a4:	4628      	mov	r0, r5
  4142a6:	47b0      	blx	r6
  4142a8:	6560      	str	r0, [r4, #84]	; 0x54
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
  4142aa:	4629      	mov	r1, r5
  4142ac:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4142ae:	4e20      	ldr	r6, [pc, #128]	; (414330 <lv_disp_drv_register+0x120>)
  4142b0:	47b0      	blx	r6
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
  4142b2:	4629      	mov	r1, r5
  4142b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4142b6:	47b0      	blx	r6
    lv_obj_set_click(disp->top_layer, false);
  4142b8:	4629      	mov	r1, r5
  4142ba:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4142bc:	4e1d      	ldr	r6, [pc, #116]	; (414334 <lv_disp_drv_register+0x124>)
  4142be:	47b0      	blx	r6
    lv_obj_set_click(disp->sys_layer, false);
  4142c0:	4629      	mov	r1, r5
  4142c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4142c4:	47b0      	blx	r6
    lv_obj_invalidate(disp->act_scr);
  4142c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
  4142c8:	4b1b      	ldr	r3, [pc, #108]	; (414338 <lv_disp_drv_register+0x128>)
  4142ca:	4798      	blx	r3
    disp_def = disp_def_tmp; /*Revert the default display*/
  4142cc:	4b12      	ldr	r3, [pc, #72]	; (414318 <lv_disp_drv_register+0x108>)
  4142ce:	601f      	str	r7, [r3, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
  4142d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
  4142d2:	4b1a      	ldr	r3, [pc, #104]	; (41433c <lv_disp_drv_register+0x12c>)
  4142d4:	4798      	blx	r3
}
  4142d6:	4620      	mov	r0, r4
  4142d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
  4142da:	4b12      	ldr	r3, [pc, #72]	; (414324 <lv_disp_drv_register+0x114>)
  4142dc:	4798      	blx	r3
  4142de:	2800      	cmp	r0, #0
  4142e0:	d1f9      	bne.n	4142d6 <lv_disp_drv_register+0xc6>
  4142e2:	2200      	movs	r2, #0
  4142e4:	2300      	movs	r3, #0
  4142e6:	4816      	ldr	r0, [pc, #88]	; (414340 <lv_disp_drv_register+0x130>)
  4142e8:	4916      	ldr	r1, [pc, #88]	; (414344 <lv_disp_drv_register+0x134>)
  4142ea:	4788      	blx	r1
  4142ec:	e7fe      	b.n	4142ec <lv_disp_drv_register+0xdc>
    if(disp_def == NULL) disp_def = disp;
  4142ee:	4b0a      	ldr	r3, [pc, #40]	; (414318 <lv_disp_drv_register+0x108>)
  4142f0:	601c      	str	r4, [r3, #0]
  4142f2:	e7aa      	b.n	41424a <lv_disp_drv_register+0x3a>
    LV_ASSERT_MEM(disp->refr_task);
  4142f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
  4142f6:	2300      	movs	r3, #0
  4142f8:	4811      	ldr	r0, [pc, #68]	; (414340 <lv_disp_drv_register+0x130>)
  4142fa:	4912      	ldr	r1, [pc, #72]	; (414344 <lv_disp_drv_register+0x134>)
  4142fc:	4788      	blx	r1
  4142fe:	e7fe      	b.n	4142fe <lv_disp_drv_register+0xee>
    if(disp->refr_task == NULL) return NULL;
  414300:	2400      	movs	r4, #0
  414302:	e7e8      	b.n	4142d6 <lv_disp_drv_register+0xc6>
  414304:	2043a160 	.word	0x2043a160
  414308:	00415355 	.word	0x00415355
  41430c:	00415ead 	.word	0x00415ead
  414310:	00415a1d 	.word	0x00415a1d
  414314:	00415343 	.word	0x00415343
  414318:	2040c6f4 	.word	0x2040c6f4
  41431c:	00408f8d 	.word	0x00408f8d
  414320:	0041692d 	.word	0x0041692d
  414324:	004150ef 	.word	0x004150ef
  414328:	00430568 	.word	0x00430568
  41432c:	00405d95 	.word	0x00405d95
  414330:	00406e45 	.word	0x00406e45
  414334:	00404d11 	.word	0x00404d11
  414338:	00405565 	.word	0x00405565
  41433c:	00416d15 	.word	0x00416d15
  414340:	00425a60 	.word	0x00425a60
  414344:	004150f9 	.word	0x004150f9

00414348 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
  414348:	b510      	push	{r4, lr}
  41434a:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
  41434c:	211c      	movs	r1, #28
  41434e:	4b08      	ldr	r3, [pc, #32]	; (414370 <lv_indev_drv_init+0x28>)
  414350:	4798      	blx	r3

    driver->type                 = LV_INDEV_TYPE_NONE;
  414352:	2300      	movs	r3, #0
  414354:	7023      	strb	r3, [r4, #0]
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
  414356:	230a      	movs	r3, #10
  414358:	7523      	strb	r3, [r4, #20]
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
  41435a:	7563      	strb	r3, [r4, #21]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
  41435c:	f44f 73c8 	mov.w	r3, #400	; 0x190
  414360:	8323      	strh	r3, [r4, #24]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
  414362:	2364      	movs	r3, #100	; 0x64
  414364:	8363      	strh	r3, [r4, #26]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
  414366:	2332      	movs	r3, #50	; 0x32
  414368:	75e3      	strb	r3, [r4, #23]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
  41436a:	2303      	movs	r3, #3
  41436c:	75a3      	strb	r3, [r4, #22]
  41436e:	bd10      	pop	{r4, pc}
  414370:	00415ead 	.word	0x00415ead

00414374 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
  414374:	b538      	push	{r3, r4, r5, lr}
  414376:	4605      	mov	r5, r0

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  414378:	68c3      	ldr	r3, [r0, #12]
  41437a:	b1fb      	cbz	r3, 4143bc <lv_indev_drv_register+0x48>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
  41437c:	4818      	ldr	r0, [pc, #96]	; (4143e0 <lv_indev_drv_register+0x6c>)
  41437e:	4b19      	ldr	r3, [pc, #100]	; (4143e4 <lv_indev_drv_register+0x70>)
  414380:	4798      	blx	r3
    if(!indev) {
  414382:	4604      	mov	r4, r0
  414384:	b308      	cbz	r0, 4143ca <lv_indev_drv_register+0x56>
        LV_ASSERT_MEM(indev);
        return NULL;
    }

    _lv_memset_00(indev, sizeof(lv_indev_t));
  414386:	2160      	movs	r1, #96	; 0x60
  414388:	4b17      	ldr	r3, [pc, #92]	; (4143e8 <lv_indev_drv_register+0x74>)
  41438a:	4798      	blx	r3
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
  41438c:	221c      	movs	r2, #28
  41438e:	4629      	mov	r1, r5
  414390:	4620      	mov	r0, r4
  414392:	4b16      	ldr	r3, [pc, #88]	; (4143ec <lv_indev_drv_register+0x78>)
  414394:	4798      	blx	r3

    indev->proc.reset_query = 1;
  414396:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  41439a:	f043 0302 	orr.w	r3, r3, #2
  41439e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    indev->cursor           = NULL;
  4143a2:	2300      	movs	r3, #0
  4143a4:	6563      	str	r3, [r4, #84]	; 0x54
    indev->group            = NULL;
  4143a6:	65a3      	str	r3, [r4, #88]	; 0x58
    indev->btn_points       = NULL;
  4143a8:	65e3      	str	r3, [r4, #92]	; 0x5c

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
  4143aa:	4623      	mov	r3, r4
  4143ac:	2204      	movs	r2, #4
  4143ae:	211e      	movs	r1, #30
  4143b0:	480f      	ldr	r0, [pc, #60]	; (4143f0 <lv_indev_drv_register+0x7c>)
  4143b2:	4d10      	ldr	r5, [pc, #64]	; (4143f4 <lv_indev_drv_register+0x80>)
  4143b4:	47a8      	blx	r5
  4143b6:	6120      	str	r0, [r4, #16]

    return indev;
}
  4143b8:	4620      	mov	r0, r4
  4143ba:	bd38      	pop	{r3, r4, r5, pc}
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  4143bc:	4b0e      	ldr	r3, [pc, #56]	; (4143f8 <lv_indev_drv_register+0x84>)
  4143be:	4798      	blx	r3
  4143c0:	60e8      	str	r0, [r5, #12]
    if(driver->disp == NULL) {
  4143c2:	2800      	cmp	r0, #0
  4143c4:	d1da      	bne.n	41437c <lv_indev_drv_register+0x8>
        return NULL;
  4143c6:	2400      	movs	r4, #0
  4143c8:	e7f6      	b.n	4143b8 <lv_indev_drv_register+0x44>
        LV_ASSERT_MEM(indev);
  4143ca:	4b0c      	ldr	r3, [pc, #48]	; (4143fc <lv_indev_drv_register+0x88>)
  4143cc:	4798      	blx	r3
  4143ce:	2800      	cmp	r0, #0
  4143d0:	d1f2      	bne.n	4143b8 <lv_indev_drv_register+0x44>
  4143d2:	2200      	movs	r2, #0
  4143d4:	2300      	movs	r3, #0
  4143d6:	480a      	ldr	r0, [pc, #40]	; (414400 <lv_indev_drv_register+0x8c>)
  4143d8:	490a      	ldr	r1, [pc, #40]	; (414404 <lv_indev_drv_register+0x90>)
  4143da:	4788      	blx	r1
  4143dc:	e7fe      	b.n	4143dc <lv_indev_drv_register+0x68>
  4143de:	bf00      	nop
  4143e0:	2043a154 	.word	0x2043a154
  4143e4:	00415355 	.word	0x00415355
  4143e8:	00415ead 	.word	0x00415ead
  4143ec:	00415a1d 	.word	0x00415a1d
  4143f0:	004041a9 	.word	0x004041a9
  4143f4:	0041692d 	.word	0x0041692d
  4143f8:	004140a1 	.word	0x004140a1
  4143fc:	004150ef 	.word	0x004150ef
  414400:	00425a60 	.word	0x00425a60
  414404:	004150f9 	.word	0x004150f9

00414408 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
  414408:	b508      	push	{r3, lr}
    if(indev == NULL)
  41440a:	b120      	cbz	r0, 414416 <lv_indev_get_next+0xe>
  41440c:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
  41440e:	4804      	ldr	r0, [pc, #16]	; (414420 <lv_indev_get_next+0x18>)
  414410:	4b04      	ldr	r3, [pc, #16]	; (414424 <lv_indev_get_next+0x1c>)
  414412:	4798      	blx	r3
}
  414414:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
  414416:	4802      	ldr	r0, [pc, #8]	; (414420 <lv_indev_get_next+0x18>)
  414418:	4b03      	ldr	r3, [pc, #12]	; (414428 <lv_indev_get_next+0x20>)
  41441a:	4798      	blx	r3
  41441c:	bd08      	pop	{r3, pc}
  41441e:	bf00      	nop
  414420:	2043a154 	.word	0x2043a154
  414424:	00415401 	.word	0x00415401
  414428:	004153ed 	.word	0x004153ed

0041442c <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
  41442c:	b538      	push	{r3, r4, r5, lr}
  41442e:	4604      	mov	r4, r0
  414430:	460d      	mov	r5, r1
    bool cont = false;

    _lv_memset_00(data, sizeof(lv_indev_data_t));
  414432:	2110      	movs	r1, #16
  414434:	4628      	mov	r0, r5
  414436:	4b10      	ldr	r3, [pc, #64]	; (414478 <_lv_indev_read+0x4c>)
  414438:	4798      	blx	r3

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
  41443a:	7823      	ldrb	r3, [r4, #0]
  41443c:	2b01      	cmp	r3, #1
  41443e:	d009      	beq.n	414454 <_lv_indev_read+0x28>
        data->point.x = indev->proc.types.pointer.act_point.x;
        data->point.y = indev->proc.types.pointer.act_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
  414440:	2b02      	cmp	r3, #2
  414442:	d00e      	beq.n	414462 <_lv_indev_read+0x36>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push) */
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
  414444:	2b04      	cmp	r3, #4
  414446:	d00f      	beq.n	414468 <_lv_indev_read+0x3c>
        data->key = LV_KEY_ENTER;
        data->enc_diff = 0;
    }

    if(indev->driver.read_cb) {
  414448:	6863      	ldr	r3, [r4, #4]
  41444a:	b193      	cbz	r3, 414472 <_lv_indev_read+0x46>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
  41444c:	4629      	mov	r1, r5
  41444e:	4620      	mov	r0, r4
  414450:	4798      	blx	r3
  414452:	bd38      	pop	{r3, r4, r5, pc}
        data->point.x = indev->proc.types.pointer.act_point.x;
  414454:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  414458:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
  41445a:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  41445e:	806b      	strh	r3, [r5, #2]
  414460:	e7f2      	b.n	414448 <_lv_indev_read+0x1c>
        data->key = indev->proc.types.keypad.last_key;
  414462:	6a63      	ldr	r3, [r4, #36]	; 0x24
  414464:	606b      	str	r3, [r5, #4]
  414466:	e7ef      	b.n	414448 <_lv_indev_read+0x1c>
        data->key = LV_KEY_ENTER;
  414468:	230a      	movs	r3, #10
  41446a:	606b      	str	r3, [r5, #4]
        data->enc_diff = 0;
  41446c:	2300      	movs	r3, #0
  41446e:	81ab      	strh	r3, [r5, #12]
  414470:	e7ea      	b.n	414448 <_lv_indev_read+0x1c>
    bool cont = false;
  414472:	2000      	movs	r0, #0
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
  414474:	bd38      	pop	{r3, r4, r5, pc}
  414476:	bf00      	nop
  414478:	00415ead 	.word	0x00415ead

0041447c <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
  41447c:	2200      	movs	r2, #0
  41447e:	4b03      	ldr	r3, [pc, #12]	; (41448c <lv_tick_inc+0x10>)
  414480:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
  414482:	4a03      	ldr	r2, [pc, #12]	; (414490 <lv_tick_inc+0x14>)
  414484:	6813      	ldr	r3, [r2, #0]
  414486:	4418      	add	r0, r3
  414488:	6010      	str	r0, [r2, #0]
  41448a:	4770      	bx	lr
  41448c:	2040c6fc 	.word	0x2040c6fc
  414490:	2040c6f8 	.word	0x2040c6f8

00414494 <lv_tick_get>:
     * This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
  414494:	4b04      	ldr	r3, [pc, #16]	; (4144a8 <lv_tick_get+0x14>)
  414496:	f04f 0101 	mov.w	r1, #1
  41449a:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
  41449c:	781a      	ldrb	r2, [r3, #0]
  41449e:	2a00      	cmp	r2, #0
  4144a0:	d0fb      	beq.n	41449a <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
  4144a2:	4b02      	ldr	r3, [pc, #8]	; (4144ac <lv_tick_get+0x18>)
  4144a4:	6818      	ldr	r0, [r3, #0]
  4144a6:	4770      	bx	lr
  4144a8:	2040c6fc 	.word	0x2040c6fc
  4144ac:	2040c6f8 	.word	0x2040c6f8

004144b0 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
  4144b0:	b510      	push	{r4, lr}
  4144b2:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
  4144b4:	4b01      	ldr	r3, [pc, #4]	; (4144bc <lv_tick_elaps+0xc>)
  4144b6:	4798      	blx	r3
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
  4144b8:	1b00      	subs	r0, r0, r4
  4144ba:	bd10      	pop	{r4, pc}
  4144bc:	00414495 	.word	0x00414495

004144c0 <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
  4144c0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  4144c2:	6a88      	ldr	r0, [r1, #40]	; 0x28
  4144c4:	4282      	cmp	r2, r0
  4144c6:	d00b      	beq.n	4144e0 <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
  4144c8:	0280      	lsls	r0, r0, #10
  4144ca:	fb90 f0f2 	sdiv	r0, r0, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
  4144ce:	698a      	ldr	r2, [r1, #24]
  4144d0:	6a0b      	ldr	r3, [r1, #32]
  4144d2:	1a9b      	subs	r3, r3, r2
  4144d4:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
  4144d8:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
  4144dc:	b200      	sxth	r0, r0
  4144de:	4770      	bx	lr
  4144e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4144e4:	e7f3      	b.n	4144ce <lv_anim_path_linear+0xe>
	...

004144e8 <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
  4144e8:	b508      	push	{r3, lr}
    anim_list_changed = true;
  4144ea:	2201      	movs	r2, #1
  4144ec:	4b08      	ldr	r3, [pc, #32]	; (414510 <anim_mark_list_change+0x28>)
  4144ee:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
  4144f0:	4808      	ldr	r0, [pc, #32]	; (414514 <anim_mark_list_change+0x2c>)
  4144f2:	4b09      	ldr	r3, [pc, #36]	; (414518 <anim_mark_list_change+0x30>)
  4144f4:	4798      	blx	r3
  4144f6:	b128      	cbz	r0, 414504 <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
  4144f8:	2104      	movs	r1, #4
  4144fa:	4b08      	ldr	r3, [pc, #32]	; (41451c <anim_mark_list_change+0x34>)
  4144fc:	6818      	ldr	r0, [r3, #0]
  4144fe:	4b08      	ldr	r3, [pc, #32]	; (414520 <anim_mark_list_change+0x38>)
  414500:	4798      	blx	r3
  414502:	bd08      	pop	{r3, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
  414504:	2100      	movs	r1, #0
  414506:	4b05      	ldr	r3, [pc, #20]	; (41451c <anim_mark_list_change+0x34>)
  414508:	6818      	ldr	r0, [r3, #0]
  41450a:	4b05      	ldr	r3, [pc, #20]	; (414520 <anim_mark_list_change+0x38>)
  41450c:	4798      	blx	r3
  41450e:	bd08      	pop	{r3, pc}
  414510:	2040c704 	.word	0x2040c704
  414514:	2043a224 	.word	0x2043a224
  414518:	004153ed 	.word	0x004153ed
  41451c:	2040c700 	.word	0x2040c700
  414520:	00416c89 	.word	0x00416c89

00414524 <anim_task>:
{
  414524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  414528:	b093      	sub	sp, #76	; 0x4c
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  41452a:	485e      	ldr	r0, [pc, #376]	; (4146a4 <anim_task+0x180>)
  41452c:	4b5e      	ldr	r3, [pc, #376]	; (4146a8 <anim_task+0x184>)
  41452e:	4798      	blx	r3
  414530:	b168      	cbz	r0, 41454e <anim_task+0x2a>
  414532:	4601      	mov	r1, r0
  414534:	4d5b      	ldr	r5, [pc, #364]	; (4146a4 <anim_task+0x180>)
  414536:	4c5d      	ldr	r4, [pc, #372]	; (4146ac <anim_task+0x188>)
        a->has_run = 0;
  414538:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
  41453c:	f36f 0341 	bfc	r3, #1, #1
  414540:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  414544:	4628      	mov	r0, r5
  414546:	47a0      	blx	r4
  414548:	4601      	mov	r1, r0
  41454a:	2800      	cmp	r0, #0
  41454c:	d1f4      	bne.n	414538 <anim_task+0x14>
    uint32_t elaps = lv_tick_elaps(last_task_run);
  41454e:	4b58      	ldr	r3, [pc, #352]	; (4146b0 <anim_task+0x18c>)
  414550:	6818      	ldr	r0, [r3, #0]
  414552:	4b58      	ldr	r3, [pc, #352]	; (4146b4 <anim_task+0x190>)
  414554:	4798      	blx	r3
  414556:	4607      	mov	r7, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  414558:	4852      	ldr	r0, [pc, #328]	; (4146a4 <anim_task+0x180>)
  41455a:	4b53      	ldr	r3, [pc, #332]	; (4146a8 <anim_task+0x184>)
  41455c:	4798      	blx	r3
    while(a != NULL) {
  41455e:	4604      	mov	r4, r0
  414560:	2800      	cmp	r0, #0
  414562:	f000 808e 	beq.w	414682 <anim_task+0x15e>
        anim_list_changed = false;
  414566:	4d54      	ldr	r5, [pc, #336]	; (4146b8 <anim_task+0x194>)
  414568:	f04f 0800 	mov.w	r8, #0
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  41456c:	4e4d      	ldr	r6, [pc, #308]	; (4146a4 <anim_task+0x180>)
  41456e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 4146a8 <anim_task+0x184>
  414572:	e024      	b.n	4145be <anim_task+0x9a>
            a->act_time += elaps;
  414574:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  414576:	443b      	add	r3, r7
  414578:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
  41457a:	2b00      	cmp	r3, #0
  41457c:	db17      	blt.n	4145ae <anim_task+0x8a>
                if(a->act_time > a->time) a->act_time = a->time;
  41457e:	6a62      	ldr	r2, [r4, #36]	; 0x24
  414580:	4293      	cmp	r3, r2
  414582:	bfc8      	it	gt
  414584:	62a2      	strgt	r2, [r4, #40]	; 0x28
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
  414586:	6923      	ldr	r3, [r4, #16]
  414588:	2b00      	cmp	r3, #0
  41458a:	d02e      	beq.n	4145ea <anim_task+0xc6>
  41458c:	4621      	mov	r1, r4
  41458e:	f104 0010 	add.w	r0, r4, #16
  414592:	4798      	blx	r3
                if(new_value != a->current) {
  414594:	69e3      	ldr	r3, [r4, #28]
  414596:	4298      	cmp	r0, r3
  414598:	d005      	beq.n	4145a6 <anim_task+0x82>
                    a->current = new_value;
  41459a:	61e0      	str	r0, [r4, #28]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
  41459c:	6863      	ldr	r3, [r4, #4]
  41459e:	b113      	cbz	r3, 4145a6 <anim_task+0x82>
  4145a0:	b201      	sxth	r1, r0
  4145a2:	6820      	ldr	r0, [r4, #0]
  4145a4:	4798      	blx	r3
                if(a->act_time >= a->time) {
  4145a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  4145a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4145aa:	429a      	cmp	r2, r3
  4145ac:	da23      	bge.n	4145f6 <anim_task+0xd2>
        if(anim_list_changed)
  4145ae:	782b      	ldrb	r3, [r5, #0]
  4145b0:	2b00      	cmp	r3, #0
  4145b2:	d060      	beq.n	414676 <anim_task+0x152>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  4145b4:	4630      	mov	r0, r6
  4145b6:	47c8      	blx	r9
  4145b8:	4604      	mov	r4, r0
    while(a != NULL) {
  4145ba:	2c00      	cmp	r4, #0
  4145bc:	d061      	beq.n	414682 <anim_task+0x15e>
        anim_list_changed = false;
  4145be:	f885 8000 	strb.w	r8, [r5]
        if(!a->has_run) {
  4145c2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  4145c6:	f013 0f02 	tst.w	r3, #2
  4145ca:	d154      	bne.n	414676 <anim_task+0x152>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
  4145cc:	f043 0302 	orr.w	r3, r3, #2
  4145d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            int32_t new_act_time = a->act_time + elaps;
  4145d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if(a->act_time <= 0 && new_act_time >= 0) {
  4145d6:	42fb      	cmn	r3, r7
  4145d8:	d4cc      	bmi.n	414574 <anim_task+0x50>
  4145da:	2b00      	cmp	r3, #0
  4145dc:	dcca      	bgt.n	414574 <anim_task+0x50>
                if(a->start_cb) a->start_cb(a);
  4145de:	68a3      	ldr	r3, [r4, #8]
  4145e0:	2b00      	cmp	r3, #0
  4145e2:	d0c7      	beq.n	414574 <anim_task+0x50>
  4145e4:	4620      	mov	r0, r4
  4145e6:	4798      	blx	r3
  4145e8:	e7c4      	b.n	414574 <anim_task+0x50>
                else new_value = lv_anim_path_linear(&a->path, a);
  4145ea:	4621      	mov	r1, r4
  4145ec:	f104 0010 	add.w	r0, r4, #16
  4145f0:	4b32      	ldr	r3, [pc, #200]	; (4146bc <anim_task+0x198>)
  4145f2:	4798      	blx	r3
  4145f4:	e7ce      	b.n	414594 <anim_task+0x70>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
  4145f6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  4145fa:	f013 0201 	ands.w	r2, r3, #1
  4145fe:	d147      	bne.n	414690 <anim_task+0x16c>
  414600:	8f23      	ldrh	r3, [r4, #56]	; 0x38
  414602:	3b01      	subs	r3, #1
  414604:	b29b      	uxth	r3, r3
  414606:	f64f 71fd 	movw	r1, #65533	; 0xfffd
  41460a:	428b      	cmp	r3, r1
        a->repeat_cnt--;
  41460c:	bf98      	it	ls
  41460e:	8723      	strhls	r3, [r4, #56]	; 0x38
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  414610:	8f23      	ldrh	r3, [r4, #56]	; 0x38
  414612:	b90b      	cbnz	r3, 414618 <anim_task+0xf4>
  414614:	6b23      	ldr	r3, [r4, #48]	; 0x30
  414616:	b1d3      	cbz	r3, 41464e <anim_task+0x12a>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
  414618:	6b63      	ldr	r3, [r4, #52]	; 0x34
  41461a:	425b      	negs	r3, r3
  41461c:	62a3      	str	r3, [r4, #40]	; 0x28
        if(a->playback_time != 0) {
  41461e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  414620:	2900      	cmp	r1, #0
  414622:	d0c4      	beq.n	4145ae <anim_task+0x8a>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
  414624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  414626:	425b      	negs	r3, r3
  414628:	62a3      	str	r3, [r4, #40]	; 0x28
            a->playback_now = a->playback_now == 0 ? 1 : 0;
  41462a:	f082 0301 	eor.w	r3, r2, #1
  41462e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
  414632:	f363 0000 	bfi	r0, r3, #0, #1
  414636:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            tmp      = a->start;
  41463a:	69a3      	ldr	r3, [r4, #24]
            a->start = a->end;
  41463c:	6a22      	ldr	r2, [r4, #32]
  41463e:	61a2      	str	r2, [r4, #24]
            a->end   = tmp;
  414640:	6223      	str	r3, [r4, #32]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
  414642:	f010 0f01 	tst.w	r0, #1
  414646:	bf08      	it	eq
  414648:	6be1      	ldreq	r1, [r4, #60]	; 0x3c
  41464a:	6261      	str	r1, [r4, #36]	; 0x24
  41464c:	e7af      	b.n	4145ae <anim_task+0x8a>
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
  41464e:	2244      	movs	r2, #68	; 0x44
  414650:	4621      	mov	r1, r4
  414652:	a801      	add	r0, sp, #4
  414654:	4b1a      	ldr	r3, [pc, #104]	; (4146c0 <anim_task+0x19c>)
  414656:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  414658:	4621      	mov	r1, r4
  41465a:	4630      	mov	r0, r6
  41465c:	4b19      	ldr	r3, [pc, #100]	; (4146c4 <anim_task+0x1a0>)
  41465e:	4798      	blx	r3
        lv_mem_free(a);
  414660:	4620      	mov	r0, r4
  414662:	4b19      	ldr	r3, [pc, #100]	; (4146c8 <anim_task+0x1a4>)
  414664:	4798      	blx	r3
        anim_mark_list_change();
  414666:	4b19      	ldr	r3, [pc, #100]	; (4146cc <anim_task+0x1a8>)
  414668:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
  41466a:	9b04      	ldr	r3, [sp, #16]
  41466c:	2b00      	cmp	r3, #0
  41466e:	d09e      	beq.n	4145ae <anim_task+0x8a>
  414670:	a801      	add	r0, sp, #4
  414672:	4798      	blx	r3
  414674:	e79b      	b.n	4145ae <anim_task+0x8a>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  414676:	4621      	mov	r1, r4
  414678:	4630      	mov	r0, r6
  41467a:	4b0c      	ldr	r3, [pc, #48]	; (4146ac <anim_task+0x188>)
  41467c:	4798      	blx	r3
  41467e:	4604      	mov	r4, r0
  414680:	e79b      	b.n	4145ba <anim_task+0x96>
    last_task_run = lv_tick_get();
  414682:	4b13      	ldr	r3, [pc, #76]	; (4146d0 <anim_task+0x1ac>)
  414684:	4798      	blx	r3
  414686:	4b0a      	ldr	r3, [pc, #40]	; (4146b0 <anim_task+0x18c>)
  414688:	6018      	str	r0, [r3, #0]
}
  41468a:	b013      	add	sp, #76	; 0x4c
  41468c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  414690:	8f23      	ldrh	r3, [r4, #56]	; 0x38
  414692:	2b00      	cmp	r3, #0
  414694:	d0db      	beq.n	41464e <anim_task+0x12a>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
  414696:	6b63      	ldr	r3, [r4, #52]	; 0x34
  414698:	425b      	negs	r3, r3
  41469a:	62a3      	str	r3, [r4, #40]	; 0x28
        if(a->playback_time != 0) {
  41469c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  41469e:	2900      	cmp	r1, #0
  4146a0:	d1c3      	bne.n	41462a <anim_task+0x106>
  4146a2:	e784      	b.n	4145ae <anim_task+0x8a>
  4146a4:	2043a224 	.word	0x2043a224
  4146a8:	004153ed 	.word	0x004153ed
  4146ac:	00415401 	.word	0x00415401
  4146b0:	2040c708 	.word	0x2040c708
  4146b4:	004144b1 	.word	0x004144b1
  4146b8:	2040c704 	.word	0x2040c704
  4146bc:	004144c1 	.word	0x004144c1
  4146c0:	00415a1d 	.word	0x00415a1d
  4146c4:	004154a5 	.word	0x004154a5
  4146c8:	004158b9 	.word	0x004158b9
  4146cc:	004144e9 	.word	0x004144e9
  4146d0:	00414495 	.word	0x00414495

004146d4 <_lv_anim_core_init>:
{
  4146d4:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
  4146d6:	2144      	movs	r1, #68	; 0x44
  4146d8:	480a      	ldr	r0, [pc, #40]	; (414704 <_lv_anim_core_init+0x30>)
  4146da:	4b0b      	ldr	r3, [pc, #44]	; (414708 <_lv_anim_core_init+0x34>)
  4146dc:	4798      	blx	r3
    last_task_run = lv_tick_get();
  4146de:	4b0b      	ldr	r3, [pc, #44]	; (41470c <_lv_anim_core_init+0x38>)
  4146e0:	4798      	blx	r3
  4146e2:	4b0b      	ldr	r3, [pc, #44]	; (414710 <_lv_anim_core_init+0x3c>)
  4146e4:	6018      	str	r0, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
  4146e6:	2300      	movs	r3, #0
  4146e8:	2204      	movs	r2, #4
  4146ea:	211e      	movs	r1, #30
  4146ec:	4809      	ldr	r0, [pc, #36]	; (414714 <_lv_anim_core_init+0x40>)
  4146ee:	4c0a      	ldr	r4, [pc, #40]	; (414718 <_lv_anim_core_init+0x44>)
  4146f0:	47a0      	blx	r4
  4146f2:	4b0a      	ldr	r3, [pc, #40]	; (41471c <_lv_anim_core_init+0x48>)
  4146f4:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
  4146f6:	4b0a      	ldr	r3, [pc, #40]	; (414720 <_lv_anim_core_init+0x4c>)
  4146f8:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actually changed*/
  4146fa:	2200      	movs	r2, #0
  4146fc:	4b09      	ldr	r3, [pc, #36]	; (414724 <_lv_anim_core_init+0x50>)
  4146fe:	701a      	strb	r2, [r3, #0]
  414700:	bd10      	pop	{r4, pc}
  414702:	bf00      	nop
  414704:	2043a224 	.word	0x2043a224
  414708:	00415343 	.word	0x00415343
  41470c:	00414495 	.word	0x00414495
  414710:	2040c708 	.word	0x2040c708
  414714:	00414525 	.word	0x00414525
  414718:	0041692d 	.word	0x0041692d
  41471c:	2040c700 	.word	0x2040c700
  414720:	004144e9 	.word	0x004144e9
  414724:	2040c704 	.word	0x2040c704

00414728 <lv_anim_init>:
{
  414728:	b510      	push	{r4, lr}
  41472a:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
  41472c:	2144      	movs	r1, #68	; 0x44
  41472e:	4b0d      	ldr	r3, [pc, #52]	; (414764 <lv_anim_init+0x3c>)
  414730:	4798      	blx	r3
    a->time    = 500;
  414732:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  414736:	6263      	str	r3, [r4, #36]	; 0x24
    a->start   = 0;
  414738:	2300      	movs	r3, #0
  41473a:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
  41473c:	2364      	movs	r3, #100	; 0x64
  41473e:	6223      	str	r3, [r4, #32]
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  414740:	4b09      	ldr	r3, [pc, #36]	; (414768 <lv_anim_init+0x40>)
  414742:	781a      	ldrb	r2, [r3, #0]
  414744:	7422      	strb	r2, [r4, #16]
  414746:	785a      	ldrb	r2, [r3, #1]
  414748:	7462      	strb	r2, [r4, #17]
  41474a:	789a      	ldrb	r2, [r3, #2]
  41474c:	74a2      	strb	r2, [r4, #18]
  41474e:	78db      	ldrb	r3, [r3, #3]
  414750:	74e3      	strb	r3, [r4, #19]
    a->repeat_cnt = 1;
  414752:	2301      	movs	r3, #1
  414754:	8723      	strh	r3, [r4, #56]	; 0x38
    a->early_apply = 1;
  414756:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  41475a:	f043 0301 	orr.w	r3, r3, #1
  41475e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  414762:	bd10      	pop	{r4, pc}
  414764:	00415ead 	.word	0x00415ead
  414768:	0043056c 	.word	0x0043056c

0041476c <lv_anim_del>:
{
  41476c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414770:	4607      	mov	r7, r0
  414772:	4689      	mov	r9, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  414774:	4817      	ldr	r0, [pc, #92]	; (4147d4 <lv_anim_del+0x68>)
  414776:	4b18      	ldr	r3, [pc, #96]	; (4147d8 <lv_anim_del+0x6c>)
  414778:	4798      	blx	r3
    while(a != NULL) {
  41477a:	b328      	cbz	r0, 4147c8 <lv_anim_del+0x5c>
  41477c:	4604      	mov	r4, r0
  41477e:	f04f 0b00 	mov.w	fp, #0
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  414782:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4147d4 <lv_anim_del+0x68>
  414786:	4e15      	ldr	r6, [pc, #84]	; (4147dc <lv_anim_del+0x70>)
  414788:	e00b      	b.n	4147a2 <lv_anim_del+0x36>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  41478a:	4621      	mov	r1, r4
  41478c:	4640      	mov	r0, r8
  41478e:	4b14      	ldr	r3, [pc, #80]	; (4147e0 <lv_anim_del+0x74>)
  414790:	4798      	blx	r3
            lv_mem_free(a);
  414792:	4620      	mov	r0, r4
  414794:	4b13      	ldr	r3, [pc, #76]	; (4147e4 <lv_anim_del+0x78>)
  414796:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
  414798:	4b13      	ldr	r3, [pc, #76]	; (4147e8 <lv_anim_del+0x7c>)
  41479a:	4798      	blx	r3
            del = true;
  41479c:	46d3      	mov	fp, sl
  41479e:	462c      	mov	r4, r5
    while(a != NULL) {
  4147a0:	b1a5      	cbz	r5, 4147cc <lv_anim_del+0x60>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  4147a2:	4621      	mov	r1, r4
  4147a4:	4640      	mov	r0, r8
  4147a6:	47b0      	blx	r6
  4147a8:	4605      	mov	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
  4147aa:	6823      	ldr	r3, [r4, #0]
  4147ac:	42bb      	cmp	r3, r7
  4147ae:	d1f6      	bne.n	41479e <lv_anim_del+0x32>
  4147b0:	6863      	ldr	r3, [r4, #4]
  4147b2:	f1b9 0f00 	cmp.w	r9, #0
  4147b6:	bf18      	it	ne
  4147b8:	454b      	cmpne	r3, r9
  4147ba:	bf0c      	ite	eq
  4147bc:	f04f 0a01 	moveq.w	sl, #1
  4147c0:	f04f 0a00 	movne.w	sl, #0
  4147c4:	d1eb      	bne.n	41479e <lv_anim_del+0x32>
  4147c6:	e7e0      	b.n	41478a <lv_anim_del+0x1e>
    bool del = false;
  4147c8:	f04f 0b00 	mov.w	fp, #0
}
  4147cc:	4658      	mov	r0, fp
  4147ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4147d2:	bf00      	nop
  4147d4:	2043a224 	.word	0x2043a224
  4147d8:	004153ed 	.word	0x004153ed
  4147dc:	00415401 	.word	0x00415401
  4147e0:	004154a5 	.word	0x004154a5
  4147e4:	004158b9 	.word	0x004158b9
  4147e8:	004144e9 	.word	0x004144e9

004147ec <lv_anim_start>:
{
  4147ec:	b538      	push	{r3, r4, r5, lr}
  4147ee:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
  4147f0:	6841      	ldr	r1, [r0, #4]
  4147f2:	b111      	cbz	r1, 4147fa <lv_anim_start+0xe>
  4147f4:	6800      	ldr	r0, [r0, #0]
  4147f6:	4b18      	ldr	r3, [pc, #96]	; (414858 <lv_anim_start+0x6c>)
  4147f8:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
  4147fa:	4818      	ldr	r0, [pc, #96]	; (41485c <lv_anim_start+0x70>)
  4147fc:	4b18      	ldr	r3, [pc, #96]	; (414860 <lv_anim_start+0x74>)
  4147fe:	4798      	blx	r3
  414800:	b9e8      	cbnz	r0, 41483e <lv_anim_start+0x52>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
  414802:	4816      	ldr	r0, [pc, #88]	; (41485c <lv_anim_start+0x70>)
  414804:	4b17      	ldr	r3, [pc, #92]	; (414864 <lv_anim_start+0x78>)
  414806:	4798      	blx	r3
  414808:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
  41480a:	4b17      	ldr	r3, [pc, #92]	; (414868 <lv_anim_start+0x7c>)
  41480c:	4798      	blx	r3
  41480e:	b1e0      	cbz	r0, 41484a <lv_anim_start+0x5e>
    if(new_anim == NULL) return;
  414810:	b1a4      	cbz	r4, 41483c <lv_anim_start+0x50>
    a->time_orig = a->time;
  414812:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  414814:	63eb      	str	r3, [r5, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
  414816:	2244      	movs	r2, #68	; 0x44
  414818:	4629      	mov	r1, r5
  41481a:	4620      	mov	r0, r4
  41481c:	4b13      	ldr	r3, [pc, #76]	; (41486c <lv_anim_start+0x80>)
  41481e:	4798      	blx	r3
    if(new_anim->early_apply) {
  414820:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  414824:	f013 0f01 	tst.w	r3, #1
  414828:	d006      	beq.n	414838 <lv_anim_start+0x4c>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
  41482a:	6863      	ldr	r3, [r4, #4]
  41482c:	b123      	cbz	r3, 414838 <lv_anim_start+0x4c>
  41482e:	6820      	ldr	r0, [r4, #0]
  414830:	b110      	cbz	r0, 414838 <lv_anim_start+0x4c>
  414832:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
  414836:	4798      	blx	r3
    anim_mark_list_change();
  414838:	4b0d      	ldr	r3, [pc, #52]	; (414870 <lv_anim_start+0x84>)
  41483a:	4798      	blx	r3
  41483c:	bd38      	pop	{r3, r4, r5, pc}
        last_task_run = lv_tick_get() - 1;
  41483e:	4b0d      	ldr	r3, [pc, #52]	; (414874 <lv_anim_start+0x88>)
  414840:	4798      	blx	r3
  414842:	3801      	subs	r0, #1
  414844:	4b0c      	ldr	r3, [pc, #48]	; (414878 <lv_anim_start+0x8c>)
  414846:	6018      	str	r0, [r3, #0]
  414848:	e7db      	b.n	414802 <lv_anim_start+0x16>
    LV_ASSERT_MEM(new_anim);
  41484a:	4622      	mov	r2, r4
  41484c:	2300      	movs	r3, #0
  41484e:	480b      	ldr	r0, [pc, #44]	; (41487c <lv_anim_start+0x90>)
  414850:	490b      	ldr	r1, [pc, #44]	; (414880 <lv_anim_start+0x94>)
  414852:	4788      	blx	r1
  414854:	e7fe      	b.n	414854 <lv_anim_start+0x68>
  414856:	bf00      	nop
  414858:	0041476d 	.word	0x0041476d
  41485c:	2043a224 	.word	0x2043a224
  414860:	00415681 	.word	0x00415681
  414864:	00415355 	.word	0x00415355
  414868:	004150ef 	.word	0x004150ef
  41486c:	00415a1d 	.word	0x00415a1d
  414870:	004144e9 	.word	0x004144e9
  414874:	00414495 	.word	0x00414495
  414878:	2040c708 	.word	0x2040c708
  41487c:	00425a60 	.word	0x00425a60
  414880:	004150f9 	.word	0x004150f9

00414884 <lv_anim_get>:
{
  414884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414886:	4604      	mov	r4, r0
  414888:	460f      	mov	r7, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  41488a:	480a      	ldr	r0, [pc, #40]	; (4148b4 <lv_anim_get+0x30>)
  41488c:	4b0a      	ldr	r3, [pc, #40]	; (4148b8 <lv_anim_get+0x34>)
  41488e:	4798      	blx	r3
  414890:	4601      	mov	r1, r0
  414892:	b160      	cbz	r0, 4148ae <lv_anim_get+0x2a>
  414894:	4e07      	ldr	r6, [pc, #28]	; (4148b4 <lv_anim_get+0x30>)
  414896:	4d09      	ldr	r5, [pc, #36]	; (4148bc <lv_anim_get+0x38>)
  414898:	e003      	b.n	4148a2 <lv_anim_get+0x1e>
  41489a:	4630      	mov	r0, r6
  41489c:	47a8      	blx	r5
  41489e:	4601      	mov	r1, r0
  4148a0:	b128      	cbz	r0, 4148ae <lv_anim_get+0x2a>
        if(a->var == var && a->exec_cb == exec_cb) {
  4148a2:	680b      	ldr	r3, [r1, #0]
  4148a4:	42a3      	cmp	r3, r4
  4148a6:	d1f8      	bne.n	41489a <lv_anim_get+0x16>
  4148a8:	684b      	ldr	r3, [r1, #4]
  4148aa:	42bb      	cmp	r3, r7
  4148ac:	d1f5      	bne.n	41489a <lv_anim_get+0x16>
}
  4148ae:	4608      	mov	r0, r1
  4148b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4148b2:	bf00      	nop
  4148b4:	2043a224 	.word	0x2043a224
  4148b8:	004153ed 	.word	0x004153ed
  4148bc:	00415401 	.word	0x00415401

004148c0 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
  4148c0:	1a89      	subs	r1, r1, r2
  4148c2:	2900      	cmp	r1, #0
  4148c4:	bfb8      	it	lt
  4148c6:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
  4148c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4148cc:	fb02 f201 	mul.w	r2, r2, r1
  4148d0:	fb92 f0f0 	sdiv	r0, r2, r0
  4148d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4148d8:	4290      	cmp	r0, r2
  4148da:	bf28      	it	cs
  4148dc:	4610      	movcs	r0, r2
        time++;
  4148de:	2800      	cmp	r0, #0
  4148e0:	bf08      	it	eq
  4148e2:	2001      	moveq	r0, #1
}
  4148e4:	b280      	uxth	r0, r0
  4148e6:	4770      	bx	lr

004148e8 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
  4148e8:	b430      	push	{r4, r5}
    lv_coord_t r = (area->x2 - area->x1) / 2;
  4148ea:	f9b0 4000 	ldrsh.w	r4, [r0]
  4148ee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  4148f2:	1b1b      	subs	r3, r3, r4
  4148f4:	bf48      	it	mi
  4148f6:	3301      	addmi	r3, #1
  4148f8:	105b      	asrs	r3, r3, #1

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
  4148fa:	b29d      	uxth	r5, r3
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
  4148fc:	880a      	ldrh	r2, [r1, #0]
  4148fe:	1b12      	subs	r2, r2, r4
  414900:	1b52      	subs	r2, r2, r5
    lv_coord_t py = p->y - cy;
  414902:	8849      	ldrh	r1, [r1, #2]
  414904:	8840      	ldrh	r0, [r0, #2]
  414906:	1a08      	subs	r0, r1, r0
  414908:	1b40      	subs	r0, r0, r5

    uint32_t r_sqrd = r * r;
  41490a:	fb13 f303 	smulbb	r3, r3, r3
    uint32_t dist = (px * px) + (py * py);
  41490e:	fb10 f000 	smulbb	r0, r0, r0
  414912:	fb12 0202 	smlabb	r2, r2, r2, r0

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
  414916:	4293      	cmp	r3, r2
  414918:	bf34      	ite	cc
  41491a:	2000      	movcc	r0, #0
  41491c:	2001      	movcs	r0, #1
  41491e:	bc30      	pop	{r4, r5}
  414920:	4770      	bx	lr

00414922 <lv_area_set>:
    area_p->x1 = x1;
  414922:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
  414924:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
  414926:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
  414928:	f9bd 3000 	ldrsh.w	r3, [sp]
  41492c:	80c3      	strh	r3, [r0, #6]
  41492e:	4770      	bx	lr

00414930 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
  414930:	3901      	subs	r1, #1
  414932:	8843      	ldrh	r3, [r0, #2]
  414934:	4419      	add	r1, r3
  414936:	80c1      	strh	r1, [r0, #6]
  414938:	4770      	bx	lr

0041493a <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
  41493a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  41493e:	f9b0 3000 	ldrsh.w	r3, [r0]
  414942:	1ad2      	subs	r2, r2, r3
  414944:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  414948:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
  41494c:	1a18      	subs	r0, r3, r0
  41494e:	3001      	adds	r0, #1
}
  414950:	fb02 0000 	mla	r0, r2, r0, r0
  414954:	4770      	bx	lr

00414956 <_lv_area_intersect>:
{
  414956:	b470      	push	{r4, r5, r6}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
  414958:	f9b2 5000 	ldrsh.w	r5, [r2]
  41495c:	f9b1 3000 	ldrsh.w	r3, [r1]
  414960:	429d      	cmp	r5, r3
  414962:	bfb8      	it	lt
  414964:	461d      	movlt	r5, r3
  414966:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
  414968:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  41496c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  414970:	42a3      	cmp	r3, r4
  414972:	bfb8      	it	lt
  414974:	4623      	movlt	r3, r4
  414976:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
  414978:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
  41497c:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
  414980:	42b4      	cmp	r4, r6
  414982:	bfa8      	it	ge
  414984:	4634      	movge	r4, r6
  414986:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
  414988:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  41498c:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
  414990:	428a      	cmp	r2, r1
  414992:	bfa8      	it	ge
  414994:	460a      	movge	r2, r1
  414996:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
  414998:	42a5      	cmp	r5, r4
  41499a:	bfd8      	it	le
  41499c:	4293      	cmple	r3, r2
  41499e:	bfcc      	ite	gt
  4149a0:	2001      	movgt	r0, #1
  4149a2:	2000      	movle	r0, #0
}
  4149a4:	f080 0001 	eor.w	r0, r0, #1
  4149a8:	bc70      	pop	{r4, r5, r6}
  4149aa:	4770      	bx	lr

004149ac <_lv_area_join>:
{
  4149ac:	b410      	push	{r4}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
  4149ae:	f9b2 3000 	ldrsh.w	r3, [r2]
  4149b2:	f9b1 4000 	ldrsh.w	r4, [r1]
  4149b6:	42a3      	cmp	r3, r4
  4149b8:	bfa8      	it	ge
  4149ba:	4623      	movge	r3, r4
  4149bc:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
  4149be:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  4149c2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  4149c6:	42a3      	cmp	r3, r4
  4149c8:	bfa8      	it	ge
  4149ca:	4623      	movge	r3, r4
  4149cc:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
  4149ce:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  4149d2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
  4149d6:	42a3      	cmp	r3, r4
  4149d8:	bfb8      	it	lt
  4149da:	4623      	movlt	r3, r4
  4149dc:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
  4149de:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
  4149e2:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
  4149e6:	4293      	cmp	r3, r2
  4149e8:	bfb8      	it	lt
  4149ea:	4613      	movlt	r3, r2
  4149ec:	80c3      	strh	r3, [r0, #6]
}
  4149ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  4149f2:	4770      	bx	lr

004149f4 <_lv_area_is_point_on>:
{
  4149f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4149f8:	b085      	sub	sp, #20
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
  4149fa:	f9b1 4000 	ldrsh.w	r4, [r1]
  4149fe:	f9b0 3000 	ldrsh.w	r3, [r0]
  414a02:	429c      	cmp	r4, r3
  414a04:	f2c0 809c 	blt.w	414b40 <_lv_area_is_point_on+0x14c>
  414a08:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
  414a0c:	4544      	cmp	r4, r8
  414a0e:	f300 809b 	bgt.w	414b48 <_lv_area_is_point_on+0x154>
  414a12:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  414a16:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
  414a1a:	4554      	cmp	r4, sl
  414a1c:	f2c0 8096 	blt.w	414b4c <_lv_area_is_point_on+0x158>
  414a20:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
  414a24:	9001      	str	r0, [sp, #4]
    if(!is_on_rect)
  414a26:	4284      	cmp	r4, r0
  414a28:	f300 8092 	bgt.w	414b50 <_lv_area_is_point_on+0x15c>
    if(radius <= 0) {
  414a2c:	2a00      	cmp	r2, #0
  414a2e:	f340 8091 	ble.w	414b54 <_lv_area_is_point_on+0x160>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414a32:	fa1f f988 	uxth.w	r9, r8
  414a36:	b29d      	uxth	r5, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414a38:	b287      	uxth	r7, r0
  414a3a:	fa1f f68a 	uxth.w	r6, sl
    corner_area.x1 = a_p->x1;
  414a3e:	f8ad 3008 	strh.w	r3, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414a42:	f109 0001 	add.w	r0, r9, #1
  414a46:	1b40      	subs	r0, r0, r5
    lv_coord_t w = lv_area_get_width(a_p) / 2;
  414a48:	b200      	sxth	r0, r0
  414a4a:	2800      	cmp	r0, #0
  414a4c:	bfb8      	it	lt
  414a4e:	3001      	addlt	r0, #1
  414a50:	1040      	asrs	r0, r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414a52:	1c7b      	adds	r3, r7, #1
  414a54:	1b9b      	subs	r3, r3, r6
    lv_coord_t h = lv_area_get_height(a_p) / 2;
  414a56:	b21b      	sxth	r3, r3
  414a58:	2b00      	cmp	r3, #0
  414a5a:	bfb8      	it	lt
  414a5c:	3301      	addlt	r3, #1
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
  414a5e:	b200      	sxth	r0, r0
  414a60:	105c      	asrs	r4, r3, #1
    corner_area.x2 = a_p->x1 + radius;
  414a62:	4284      	cmp	r4, r0
  414a64:	bfa8      	it	ge
  414a66:	4604      	movge	r4, r0
  414a68:	4294      	cmp	r4, r2
  414a6a:	bfa8      	it	ge
  414a6c:	4614      	movge	r4, r2
  414a6e:	b2a4      	uxth	r4, r4
  414a70:	4425      	add	r5, r4
  414a72:	b2ad      	uxth	r5, r5
  414a74:	f8ad 500c 	strh.w	r5, [sp, #12]
    corner_area.y1 = a_p->y1;
  414a78:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
  414a7c:	4426      	add	r6, r4
  414a7e:	b2b6      	uxth	r6, r6
  414a80:	fa0f fb86 	sxth.w	fp, r6
  414a84:	f8ad b00e 	strh.w	fp, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  414a88:	2200      	movs	r2, #0
  414a8a:	9100      	str	r1, [sp, #0]
  414a8c:	a802      	add	r0, sp, #8
  414a8e:	f7ff ffb1 	bl	4149f4 <_lv_area_is_point_on>
  414a92:	b150      	cbz	r0, 414aaa <_lv_area_is_point_on+0xb6>
        corner_area.x2 += radius;
  414a94:	4425      	add	r5, r4
  414a96:	f8ad 500c 	strh.w	r5, [sp, #12]
        corner_area.y2 += radius;
  414a9a:	4434      	add	r4, r6
  414a9c:	f8ad 400e 	strh.w	r4, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
  414aa0:	9900      	ldr	r1, [sp, #0]
  414aa2:	a802      	add	r0, sp, #8
  414aa4:	4b2d      	ldr	r3, [pc, #180]	; (414b5c <_lv_area_is_point_on+0x168>)
  414aa6:	4798      	blx	r3
  414aa8:	e04b      	b.n	414b42 <_lv_area_is_point_on+0x14e>
    corner_area.y1 = a_p->y2 - radius;
  414aaa:	1b3f      	subs	r7, r7, r4
  414aac:	b2bf      	uxth	r7, r7
  414aae:	f8ad 700a 	strh.w	r7, [sp, #10]
    corner_area.y2 = a_p->y2;
  414ab2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  414ab6:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  414aba:	2200      	movs	r2, #0
  414abc:	9900      	ldr	r1, [sp, #0]
  414abe:	a802      	add	r0, sp, #8
  414ac0:	f7ff ff98 	bl	4149f4 <_lv_area_is_point_on>
  414ac4:	b150      	cbz	r0, 414adc <_lv_area_is_point_on+0xe8>
        corner_area.x2 += radius;
  414ac6:	4425      	add	r5, r4
  414ac8:	f8ad 500c 	strh.w	r5, [sp, #12]
        corner_area.y1 -= radius;
  414acc:	1b3c      	subs	r4, r7, r4
  414ace:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
  414ad2:	9900      	ldr	r1, [sp, #0]
  414ad4:	a802      	add	r0, sp, #8
  414ad6:	4b21      	ldr	r3, [pc, #132]	; (414b5c <_lv_area_is_point_on+0x168>)
  414ad8:	4798      	blx	r3
  414ada:	e032      	b.n	414b42 <_lv_area_is_point_on+0x14e>
    corner_area.x1 = a_p->x2 - radius;
  414adc:	eba9 0904 	sub.w	r9, r9, r4
  414ae0:	fa1f f989 	uxth.w	r9, r9
  414ae4:	f8ad 9008 	strh.w	r9, [sp, #8]
    corner_area.x2 = a_p->x2;
  414ae8:	f8ad 800c 	strh.w	r8, [sp, #12]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  414aec:	2200      	movs	r2, #0
  414aee:	9d00      	ldr	r5, [sp, #0]
  414af0:	4629      	mov	r1, r5
  414af2:	a802      	add	r0, sp, #8
  414af4:	f7ff ff7e 	bl	4149f4 <_lv_area_is_point_on>
  414af8:	b158      	cbz	r0, 414b12 <_lv_area_is_point_on+0x11e>
        corner_area.x1 -= radius;
  414afa:	eba9 0904 	sub.w	r9, r9, r4
  414afe:	f8ad 9008 	strh.w	r9, [sp, #8]
        corner_area.y1 -= radius;
  414b02:	1b3c      	subs	r4, r7, r4
  414b04:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
  414b08:	4629      	mov	r1, r5
  414b0a:	a802      	add	r0, sp, #8
  414b0c:	4b13      	ldr	r3, [pc, #76]	; (414b5c <_lv_area_is_point_on+0x168>)
  414b0e:	4798      	blx	r3
  414b10:	e017      	b.n	414b42 <_lv_area_is_point_on+0x14e>
    corner_area.y1 = a_p->y1;
  414b12:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
  414b16:	f8ad b00e 	strh.w	fp, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  414b1a:	2200      	movs	r2, #0
  414b1c:	9d00      	ldr	r5, [sp, #0]
  414b1e:	4629      	mov	r1, r5
  414b20:	a802      	add	r0, sp, #8
  414b22:	f7ff ff67 	bl	4149f4 <_lv_area_is_point_on>
  414b26:	b1b8      	cbz	r0, 414b58 <_lv_area_is_point_on+0x164>
        corner_area.x1 -= radius;
  414b28:	eba9 0904 	sub.w	r9, r9, r4
  414b2c:	f8ad 9008 	strh.w	r9, [sp, #8]
        corner_area.y2 += radius;
  414b30:	4434      	add	r4, r6
  414b32:	f8ad 400e 	strh.w	r4, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
  414b36:	4629      	mov	r1, r5
  414b38:	a802      	add	r0, sp, #8
  414b3a:	4b08      	ldr	r3, [pc, #32]	; (414b5c <_lv_area_is_point_on+0x168>)
  414b3c:	4798      	blx	r3
  414b3e:	e000      	b.n	414b42 <_lv_area_is_point_on+0x14e>
        return false;
  414b40:	2000      	movs	r0, #0
}
  414b42:	b005      	add	sp, #20
  414b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return false;
  414b48:	2000      	movs	r0, #0
  414b4a:	e7fa      	b.n	414b42 <_lv_area_is_point_on+0x14e>
  414b4c:	2000      	movs	r0, #0
  414b4e:	e7f8      	b.n	414b42 <_lv_area_is_point_on+0x14e>
  414b50:	2000      	movs	r0, #0
  414b52:	e7f6      	b.n	414b42 <_lv_area_is_point_on+0x14e>
        return true;
  414b54:	2001      	movs	r0, #1
  414b56:	e7f4      	b.n	414b42 <_lv_area_is_point_on+0x14e>
    return true;
  414b58:	2001      	movs	r0, #1
  414b5a:	e7f2      	b.n	414b42 <_lv_area_is_point_on+0x14e>
  414b5c:	004148e9 	.word	0x004148e9

00414b60 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
  414b60:	f9b0 2000 	ldrsh.w	r2, [r0]
  414b64:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  414b68:	429a      	cmp	r2, r3
  414b6a:	dc14      	bgt.n	414b96 <_lv_area_is_on+0x36>
  414b6c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  414b70:	f9b1 3000 	ldrsh.w	r3, [r1]
  414b74:	429a      	cmp	r2, r3
  414b76:	db10      	blt.n	414b9a <_lv_area_is_on+0x3a>
  414b78:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  414b7c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
  414b80:	429a      	cmp	r2, r3
  414b82:	dc0c      	bgt.n	414b9e <_lv_area_is_on+0x3e>
  414b84:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
  414b88:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  414b8c:	4298      	cmp	r0, r3
  414b8e:	bfb4      	ite	lt
  414b90:	2000      	movlt	r0, #0
  414b92:	2001      	movge	r0, #1
  414b94:	4770      	bx	lr
        return false;
  414b96:	2000      	movs	r0, #0
  414b98:	4770      	bx	lr
  414b9a:	2000      	movs	r0, #0
  414b9c:	4770      	bx	lr
  414b9e:	2000      	movs	r0, #0
}
  414ba0:	4770      	bx	lr
	...

00414ba4 <_lv_area_is_in>:
{
  414ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414ba8:	b082      	sub	sp, #8
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
  414baa:	f9b0 6000 	ldrsh.w	r6, [r0]
  414bae:	f9b1 3000 	ldrsh.w	r3, [r1]
  414bb2:	42b3      	cmp	r3, r6
  414bb4:	dc3d      	bgt.n	414c32 <_lv_area_is_in+0x8e>
  414bb6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  414bba:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  414bbe:	429c      	cmp	r4, r3
  414bc0:	dc3c      	bgt.n	414c3c <_lv_area_is_in+0x98>
  414bc2:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
  414bc6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
  414bca:	42bc      	cmp	r4, r7
  414bcc:	db38      	blt.n	414c40 <_lv_area_is_in+0x9c>
       ain_p->y2 <= aholder_p->y2) {
  414bce:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(!is_in) return false;
  414bd2:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
  414bd6:	4540      	cmp	r0, r8
  414bd8:	db34      	blt.n	414c44 <_lv_area_is_in+0xa0>
    if(radius == 0) return true;
  414bda:	b90a      	cbnz	r2, 414be0 <_lv_area_is_in+0x3c>
  414bdc:	2301      	movs	r3, #1
  414bde:	e029      	b.n	414c34 <_lv_area_is_in+0x90>
  414be0:	4615      	mov	r5, r2
  414be2:	460c      	mov	r4, r1
    p.x = ain_p->x1;
  414be4:	f8ad 6004 	strh.w	r6, [sp, #4]
    p.y = ain_p->y1;
  414be8:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  414bec:	a901      	add	r1, sp, #4
  414bee:	4620      	mov	r0, r4
  414bf0:	4b15      	ldr	r3, [pc, #84]	; (414c48 <_lv_area_is_in+0xa4>)
  414bf2:	4798      	blx	r3
  414bf4:	4603      	mov	r3, r0
  414bf6:	b1e8      	cbz	r0, 414c34 <_lv_area_is_in+0x90>
    p.x = ain_p->x2;
  414bf8:	a902      	add	r1, sp, #8
  414bfa:	f821 7d04 	strh.w	r7, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  414bfe:	462a      	mov	r2, r5
  414c00:	4620      	mov	r0, r4
  414c02:	4b11      	ldr	r3, [pc, #68]	; (414c48 <_lv_area_is_in+0xa4>)
  414c04:	4798      	blx	r3
  414c06:	4603      	mov	r3, r0
  414c08:	b1a0      	cbz	r0, 414c34 <_lv_area_is_in+0x90>
    p.x = ain_p->x1;
  414c0a:	f8ad 6004 	strh.w	r6, [sp, #4]
    p.y = ain_p->y2;
  414c0e:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  414c12:	462a      	mov	r2, r5
  414c14:	a901      	add	r1, sp, #4
  414c16:	4620      	mov	r0, r4
  414c18:	4b0b      	ldr	r3, [pc, #44]	; (414c48 <_lv_area_is_in+0xa4>)
  414c1a:	4798      	blx	r3
  414c1c:	4603      	mov	r3, r0
  414c1e:	b148      	cbz	r0, 414c34 <_lv_area_is_in+0x90>
    p.x = ain_p->x2;
  414c20:	a902      	add	r1, sp, #8
  414c22:	f821 7d04 	strh.w	r7, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  414c26:	462a      	mov	r2, r5
  414c28:	4620      	mov	r0, r4
  414c2a:	4b07      	ldr	r3, [pc, #28]	; (414c48 <_lv_area_is_in+0xa4>)
  414c2c:	4798      	blx	r3
  414c2e:	4603      	mov	r3, r0
  414c30:	e000      	b.n	414c34 <_lv_area_is_in+0x90>
    if(!is_in) return false;
  414c32:	2300      	movs	r3, #0
}
  414c34:	4618      	mov	r0, r3
  414c36:	b002      	add	sp, #8
  414c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!is_in) return false;
  414c3c:	2300      	movs	r3, #0
  414c3e:	e7f9      	b.n	414c34 <_lv_area_is_in+0x90>
  414c40:	2300      	movs	r3, #0
  414c42:	e7f7      	b.n	414c34 <_lv_area_is_in+0x90>
  414c44:	2300      	movs	r3, #0
  414c46:	e7f5      	b.n	414c34 <_lv_area_is_in+0x90>
  414c48:	004149f5 	.word	0x004149f5

00414c4c <_lv_area_align>:
{
  414c4c:	b430      	push	{r4, r5}
    switch(align) {
  414c4e:	2a14      	cmp	r2, #20
  414c50:	d83e      	bhi.n	414cd0 <_lv_area_align+0x84>
  414c52:	e8df f012 	tbh	[pc, r2, lsl #1]
  414c56:	0015      	.short	0x0015
  414c58:	004b0047 	.word	0x004b0047
  414c5c:	006d0062 	.word	0x006d0062
  414c60:	00950078 	.word	0x00950078
  414c64:	00bd00a6 	.word	0x00bd00a6
  414c68:	00e200da 	.word	0x00e200da
  414c6c:	010a00fc 	.word	0x010a00fc
  414c70:	012c0112 	.word	0x012c0112
  414c74:	0142013a 	.word	0x0142013a
  414c78:	016a015c 	.word	0x016a015c
  414c7c:	018c0172 	.word	0x018c0172
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414c80:	8882      	ldrh	r2, [r0, #4]
  414c82:	3201      	adds	r2, #1
  414c84:	8804      	ldrh	r4, [r0, #0]
  414c86:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414c88:	b212      	sxth	r2, r2
  414c8a:	2a00      	cmp	r2, #0
  414c8c:	bfb8      	it	lt
  414c8e:	3201      	addlt	r2, #1
  414c90:	1052      	asrs	r2, r2, #1
  414c92:	888c      	ldrh	r4, [r1, #4]
  414c94:	3401      	adds	r4, #1
  414c96:	880d      	ldrh	r5, [r1, #0]
  414c98:	1b64      	subs	r4, r4, r5
  414c9a:	b224      	sxth	r4, r4
  414c9c:	2c00      	cmp	r4, #0
  414c9e:	bfb8      	it	lt
  414ca0:	3401      	addlt	r4, #1
  414ca2:	eba2 0264 	sub.w	r2, r2, r4, asr #1
  414ca6:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414ca8:	88c2      	ldrh	r2, [r0, #6]
  414caa:	3201      	adds	r2, #1
  414cac:	8844      	ldrh	r4, [r0, #2]
  414cae:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414cb0:	b212      	sxth	r2, r2
  414cb2:	2a00      	cmp	r2, #0
  414cb4:	bfb8      	it	lt
  414cb6:	3201      	addlt	r2, #1
  414cb8:	1052      	asrs	r2, r2, #1
  414cba:	88cc      	ldrh	r4, [r1, #6]
  414cbc:	3401      	adds	r4, #1
  414cbe:	8849      	ldrh	r1, [r1, #2]
  414cc0:	1a61      	subs	r1, r4, r1
  414cc2:	b209      	sxth	r1, r1
  414cc4:	2900      	cmp	r1, #0
  414cc6:	bfb8      	it	lt
  414cc8:	3101      	addlt	r1, #1
  414cca:	eba2 0261 	sub.w	r2, r2, r1, asr #1
  414cce:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
  414cd0:	881a      	ldrh	r2, [r3, #0]
  414cd2:	8801      	ldrh	r1, [r0, #0]
  414cd4:	440a      	add	r2, r1
  414cd6:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
  414cd8:	885a      	ldrh	r2, [r3, #2]
  414cda:	8841      	ldrh	r1, [r0, #2]
  414cdc:	440a      	add	r2, r1
  414cde:	805a      	strh	r2, [r3, #2]
}
  414ce0:	bc30      	pop	{r4, r5}
  414ce2:	4770      	bx	lr
            res->x = 0;
  414ce4:	2200      	movs	r2, #0
  414ce6:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  414ce8:	805a      	strh	r2, [r3, #2]
            break;
  414cea:	e7f1      	b.n	414cd0 <_lv_area_align+0x84>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414cec:	8882      	ldrh	r2, [r0, #4]
  414cee:	3201      	adds	r2, #1
  414cf0:	8804      	ldrh	r4, [r0, #0]
  414cf2:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414cf4:	b212      	sxth	r2, r2
  414cf6:	2a00      	cmp	r2, #0
  414cf8:	bfb8      	it	lt
  414cfa:	3201      	addlt	r2, #1
  414cfc:	1052      	asrs	r2, r2, #1
  414cfe:	888c      	ldrh	r4, [r1, #4]
  414d00:	3401      	adds	r4, #1
  414d02:	8809      	ldrh	r1, [r1, #0]
  414d04:	1a61      	subs	r1, r4, r1
  414d06:	b209      	sxth	r1, r1
  414d08:	2900      	cmp	r1, #0
  414d0a:	bfb8      	it	lt
  414d0c:	3101      	addlt	r1, #1
  414d0e:	eba2 0261 	sub.w	r2, r2, r1, asr #1
  414d12:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  414d14:	2200      	movs	r2, #0
  414d16:	805a      	strh	r2, [r3, #2]
            break;
  414d18:	e7da      	b.n	414cd0 <_lv_area_align+0x84>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  414d1a:	8882      	ldrh	r2, [r0, #4]
  414d1c:	888c      	ldrh	r4, [r1, #4]
  414d1e:	1b12      	subs	r2, r2, r4
  414d20:	8804      	ldrh	r4, [r0, #0]
  414d22:	1b12      	subs	r2, r2, r4
  414d24:	8809      	ldrh	r1, [r1, #0]
  414d26:	440a      	add	r2, r1
  414d28:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  414d2a:	2200      	movs	r2, #0
  414d2c:	805a      	strh	r2, [r3, #2]
            break;
  414d2e:	e7cf      	b.n	414cd0 <_lv_area_align+0x84>
            res->x = 0;
  414d30:	2200      	movs	r2, #0
  414d32:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  414d34:	88c2      	ldrh	r2, [r0, #6]
  414d36:	88cc      	ldrh	r4, [r1, #6]
  414d38:	1b12      	subs	r2, r2, r4
  414d3a:	8844      	ldrh	r4, [r0, #2]
  414d3c:	1b12      	subs	r2, r2, r4
  414d3e:	8849      	ldrh	r1, [r1, #2]
  414d40:	440a      	add	r2, r1
  414d42:	805a      	strh	r2, [r3, #2]
            break;
  414d44:	e7c4      	b.n	414cd0 <_lv_area_align+0x84>
  414d46:	8882      	ldrh	r2, [r0, #4]
  414d48:	3201      	adds	r2, #1
  414d4a:	8804      	ldrh	r4, [r0, #0]
  414d4c:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414d4e:	b212      	sxth	r2, r2
  414d50:	2a00      	cmp	r2, #0
  414d52:	bfb8      	it	lt
  414d54:	3201      	addlt	r2, #1
  414d56:	1052      	asrs	r2, r2, #1
  414d58:	888c      	ldrh	r4, [r1, #4]
  414d5a:	3401      	adds	r4, #1
  414d5c:	880d      	ldrh	r5, [r1, #0]
  414d5e:	1b64      	subs	r4, r4, r5
  414d60:	b224      	sxth	r4, r4
  414d62:	2c00      	cmp	r4, #0
  414d64:	bfb8      	it	lt
  414d66:	3401      	addlt	r4, #1
  414d68:	eba2 0264 	sub.w	r2, r2, r4, asr #1
  414d6c:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  414d6e:	88c2      	ldrh	r2, [r0, #6]
  414d70:	88cc      	ldrh	r4, [r1, #6]
  414d72:	1b12      	subs	r2, r2, r4
  414d74:	8844      	ldrh	r4, [r0, #2]
  414d76:	1b12      	subs	r2, r2, r4
  414d78:	8849      	ldrh	r1, [r1, #2]
  414d7a:	440a      	add	r2, r1
  414d7c:	805a      	strh	r2, [r3, #2]
            break;
  414d7e:	e7a7      	b.n	414cd0 <_lv_area_align+0x84>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  414d80:	8882      	ldrh	r2, [r0, #4]
  414d82:	888c      	ldrh	r4, [r1, #4]
  414d84:	1b12      	subs	r2, r2, r4
  414d86:	8804      	ldrh	r4, [r0, #0]
  414d88:	1b12      	subs	r2, r2, r4
  414d8a:	880c      	ldrh	r4, [r1, #0]
  414d8c:	4422      	add	r2, r4
  414d8e:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  414d90:	88c2      	ldrh	r2, [r0, #6]
  414d92:	88cc      	ldrh	r4, [r1, #6]
  414d94:	1b12      	subs	r2, r2, r4
  414d96:	8844      	ldrh	r4, [r0, #2]
  414d98:	1b12      	subs	r2, r2, r4
  414d9a:	8849      	ldrh	r1, [r1, #2]
  414d9c:	440a      	add	r2, r1
  414d9e:	805a      	strh	r2, [r3, #2]
            break;
  414da0:	e796      	b.n	414cd0 <_lv_area_align+0x84>
            res->x = 0;
  414da2:	2200      	movs	r2, #0
  414da4:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414da6:	88c2      	ldrh	r2, [r0, #6]
  414da8:	3201      	adds	r2, #1
  414daa:	8844      	ldrh	r4, [r0, #2]
  414dac:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414dae:	b212      	sxth	r2, r2
  414db0:	2a00      	cmp	r2, #0
  414db2:	bfb8      	it	lt
  414db4:	3201      	addlt	r2, #1
  414db6:	1052      	asrs	r2, r2, #1
  414db8:	88cc      	ldrh	r4, [r1, #6]
  414dba:	3401      	adds	r4, #1
  414dbc:	8849      	ldrh	r1, [r1, #2]
  414dbe:	1a61      	subs	r1, r4, r1
  414dc0:	b209      	sxth	r1, r1
  414dc2:	2900      	cmp	r1, #0
  414dc4:	bfb8      	it	lt
  414dc6:	3101      	addlt	r1, #1
  414dc8:	eba2 0261 	sub.w	r2, r2, r1, asr #1
  414dcc:	805a      	strh	r2, [r3, #2]
            break;
  414dce:	e77f      	b.n	414cd0 <_lv_area_align+0x84>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  414dd0:	8882      	ldrh	r2, [r0, #4]
  414dd2:	888c      	ldrh	r4, [r1, #4]
  414dd4:	1b12      	subs	r2, r2, r4
  414dd6:	8804      	ldrh	r4, [r0, #0]
  414dd8:	1b12      	subs	r2, r2, r4
  414dda:	880c      	ldrh	r4, [r1, #0]
  414ddc:	4422      	add	r2, r4
  414dde:	801a      	strh	r2, [r3, #0]
  414de0:	88c2      	ldrh	r2, [r0, #6]
  414de2:	3201      	adds	r2, #1
  414de4:	8844      	ldrh	r4, [r0, #2]
  414de6:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414de8:	b212      	sxth	r2, r2
  414dea:	2a00      	cmp	r2, #0
  414dec:	bfb8      	it	lt
  414dee:	3201      	addlt	r2, #1
  414df0:	1052      	asrs	r2, r2, #1
  414df2:	88cc      	ldrh	r4, [r1, #6]
  414df4:	3401      	adds	r4, #1
  414df6:	8849      	ldrh	r1, [r1, #2]
  414df8:	1a61      	subs	r1, r4, r1
  414dfa:	b209      	sxth	r1, r1
  414dfc:	2900      	cmp	r1, #0
  414dfe:	bfb8      	it	lt
  414e00:	3101      	addlt	r1, #1
  414e02:	eba2 0261 	sub.w	r2, r2, r1, asr #1
  414e06:	805a      	strh	r2, [r3, #2]
            break;
  414e08:	e762      	b.n	414cd0 <_lv_area_align+0x84>
            res->x = 0;
  414e0a:	2200      	movs	r2, #0
  414e0c:	801a      	strh	r2, [r3, #0]
  414e0e:	88ca      	ldrh	r2, [r1, #6]
  414e10:	8849      	ldrh	r1, [r1, #2]
  414e12:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
  414e14:	43d2      	mvns	r2, r2
  414e16:	805a      	strh	r2, [r3, #2]
            break;
  414e18:	e75a      	b.n	414cd0 <_lv_area_align+0x84>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414e1a:	8882      	ldrh	r2, [r0, #4]
  414e1c:	3201      	adds	r2, #1
  414e1e:	8804      	ldrh	r4, [r0, #0]
  414e20:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414e22:	b212      	sxth	r2, r2
  414e24:	2a00      	cmp	r2, #0
  414e26:	bfb8      	it	lt
  414e28:	3201      	addlt	r2, #1
  414e2a:	1052      	asrs	r2, r2, #1
  414e2c:	888c      	ldrh	r4, [r1, #4]
  414e2e:	3401      	adds	r4, #1
  414e30:	880d      	ldrh	r5, [r1, #0]
  414e32:	1b64      	subs	r4, r4, r5
  414e34:	b224      	sxth	r4, r4
  414e36:	2c00      	cmp	r4, #0
  414e38:	bfb8      	it	lt
  414e3a:	3401      	addlt	r4, #1
  414e3c:	eba2 0264 	sub.w	r2, r2, r4, asr #1
  414e40:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414e42:	88ca      	ldrh	r2, [r1, #6]
  414e44:	8849      	ldrh	r1, [r1, #2]
  414e46:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
  414e48:	43d2      	mvns	r2, r2
  414e4a:	805a      	strh	r2, [r3, #2]
            break;
  414e4c:	e740      	b.n	414cd0 <_lv_area_align+0x84>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  414e4e:	8882      	ldrh	r2, [r0, #4]
  414e50:	888c      	ldrh	r4, [r1, #4]
  414e52:	1b12      	subs	r2, r2, r4
  414e54:	8804      	ldrh	r4, [r0, #0]
  414e56:	1b12      	subs	r2, r2, r4
  414e58:	880c      	ldrh	r4, [r1, #0]
  414e5a:	4422      	add	r2, r4
  414e5c:	801a      	strh	r2, [r3, #0]
  414e5e:	88ca      	ldrh	r2, [r1, #6]
  414e60:	8849      	ldrh	r1, [r1, #2]
  414e62:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
  414e64:	43d2      	mvns	r2, r2
  414e66:	805a      	strh	r2, [r3, #2]
            break;
  414e68:	e732      	b.n	414cd0 <_lv_area_align+0x84>
            res->x = 0;
  414e6a:	2200      	movs	r2, #0
  414e6c:	801a      	strh	r2, [r3, #0]
  414e6e:	88c2      	ldrh	r2, [r0, #6]
  414e70:	3201      	adds	r2, #1
  414e72:	8841      	ldrh	r1, [r0, #2]
  414e74:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
  414e76:	805a      	strh	r2, [r3, #2]
            break;
  414e78:	e72a      	b.n	414cd0 <_lv_area_align+0x84>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414e7a:	8882      	ldrh	r2, [r0, #4]
  414e7c:	3201      	adds	r2, #1
  414e7e:	8804      	ldrh	r4, [r0, #0]
  414e80:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414e82:	b212      	sxth	r2, r2
  414e84:	2a00      	cmp	r2, #0
  414e86:	bfb8      	it	lt
  414e88:	3201      	addlt	r2, #1
  414e8a:	1052      	asrs	r2, r2, #1
  414e8c:	888c      	ldrh	r4, [r1, #4]
  414e8e:	3401      	adds	r4, #1
  414e90:	8809      	ldrh	r1, [r1, #0]
  414e92:	1a61      	subs	r1, r4, r1
  414e94:	b209      	sxth	r1, r1
  414e96:	2900      	cmp	r1, #0
  414e98:	bfb8      	it	lt
  414e9a:	3101      	addlt	r1, #1
  414e9c:	eba2 0261 	sub.w	r2, r2, r1, asr #1
  414ea0:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414ea2:	88c2      	ldrh	r2, [r0, #6]
  414ea4:	3201      	adds	r2, #1
  414ea6:	8841      	ldrh	r1, [r0, #2]
  414ea8:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
  414eaa:	805a      	strh	r2, [r3, #2]
            break;
  414eac:	e710      	b.n	414cd0 <_lv_area_align+0x84>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  414eae:	8882      	ldrh	r2, [r0, #4]
  414eb0:	888c      	ldrh	r4, [r1, #4]
  414eb2:	1b12      	subs	r2, r2, r4
  414eb4:	8804      	ldrh	r4, [r0, #0]
  414eb6:	1b12      	subs	r2, r2, r4
  414eb8:	8809      	ldrh	r1, [r1, #0]
  414eba:	440a      	add	r2, r1
  414ebc:	801a      	strh	r2, [r3, #0]
  414ebe:	88c2      	ldrh	r2, [r0, #6]
  414ec0:	3201      	adds	r2, #1
  414ec2:	8841      	ldrh	r1, [r0, #2]
  414ec4:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
  414ec6:	805a      	strh	r2, [r3, #2]
            break;
  414ec8:	e702      	b.n	414cd0 <_lv_area_align+0x84>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414eca:	888a      	ldrh	r2, [r1, #4]
  414ecc:	8809      	ldrh	r1, [r1, #0]
  414ece:	1a52      	subs	r2, r2, r1
            res->x = -lv_area_get_width(to_align);
  414ed0:	43d2      	mvns	r2, r2
  414ed2:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  414ed4:	2200      	movs	r2, #0
  414ed6:	805a      	strh	r2, [r3, #2]
            break;
  414ed8:	e6fa      	b.n	414cd0 <_lv_area_align+0x84>
  414eda:	888a      	ldrh	r2, [r1, #4]
  414edc:	880c      	ldrh	r4, [r1, #0]
  414ede:	1b12      	subs	r2, r2, r4
            res->x = -lv_area_get_width(to_align);
  414ee0:	43d2      	mvns	r2, r2
  414ee2:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414ee4:	88c2      	ldrh	r2, [r0, #6]
  414ee6:	3201      	adds	r2, #1
  414ee8:	8844      	ldrh	r4, [r0, #2]
  414eea:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414eec:	b212      	sxth	r2, r2
  414eee:	2a00      	cmp	r2, #0
  414ef0:	bfb8      	it	lt
  414ef2:	3201      	addlt	r2, #1
  414ef4:	1052      	asrs	r2, r2, #1
  414ef6:	88cc      	ldrh	r4, [r1, #6]
  414ef8:	3401      	adds	r4, #1
  414efa:	8849      	ldrh	r1, [r1, #2]
  414efc:	1a61      	subs	r1, r4, r1
  414efe:	b209      	sxth	r1, r1
  414f00:	2900      	cmp	r1, #0
  414f02:	bfb8      	it	lt
  414f04:	3101      	addlt	r1, #1
  414f06:	eba2 0261 	sub.w	r2, r2, r1, asr #1
  414f0a:	805a      	strh	r2, [r3, #2]
            break;
  414f0c:	e6e0      	b.n	414cd0 <_lv_area_align+0x84>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414f0e:	888a      	ldrh	r2, [r1, #4]
  414f10:	880c      	ldrh	r4, [r1, #0]
  414f12:	1b12      	subs	r2, r2, r4
            res->x = -lv_area_get_width(to_align);
  414f14:	43d2      	mvns	r2, r2
  414f16:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  414f18:	88c2      	ldrh	r2, [r0, #6]
  414f1a:	88cc      	ldrh	r4, [r1, #6]
  414f1c:	1b12      	subs	r2, r2, r4
  414f1e:	8844      	ldrh	r4, [r0, #2]
  414f20:	1b12      	subs	r2, r2, r4
  414f22:	8849      	ldrh	r1, [r1, #2]
  414f24:	440a      	add	r2, r1
  414f26:	805a      	strh	r2, [r3, #2]
            break;
  414f28:	e6d2      	b.n	414cd0 <_lv_area_align+0x84>
  414f2a:	8882      	ldrh	r2, [r0, #4]
  414f2c:	3201      	adds	r2, #1
  414f2e:	8801      	ldrh	r1, [r0, #0]
  414f30:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base);
  414f32:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  414f34:	2200      	movs	r2, #0
  414f36:	805a      	strh	r2, [r3, #2]
            break;
  414f38:	e6ca      	b.n	414cd0 <_lv_area_align+0x84>
  414f3a:	8882      	ldrh	r2, [r0, #4]
  414f3c:	3201      	adds	r2, #1
  414f3e:	8804      	ldrh	r4, [r0, #0]
  414f40:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base);
  414f42:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414f44:	88c2      	ldrh	r2, [r0, #6]
  414f46:	3201      	adds	r2, #1
  414f48:	8844      	ldrh	r4, [r0, #2]
  414f4a:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  414f4c:	b212      	sxth	r2, r2
  414f4e:	2a00      	cmp	r2, #0
  414f50:	bfb8      	it	lt
  414f52:	3201      	addlt	r2, #1
  414f54:	1052      	asrs	r2, r2, #1
  414f56:	88cc      	ldrh	r4, [r1, #6]
  414f58:	3401      	adds	r4, #1
  414f5a:	8849      	ldrh	r1, [r1, #2]
  414f5c:	1a61      	subs	r1, r4, r1
  414f5e:	b209      	sxth	r1, r1
  414f60:	2900      	cmp	r1, #0
  414f62:	bfb8      	it	lt
  414f64:	3101      	addlt	r1, #1
  414f66:	eba2 0261 	sub.w	r2, r2, r1, asr #1
  414f6a:	805a      	strh	r2, [r3, #2]
            break;
  414f6c:	e6b0      	b.n	414cd0 <_lv_area_align+0x84>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414f6e:	8882      	ldrh	r2, [r0, #4]
  414f70:	3201      	adds	r2, #1
  414f72:	8804      	ldrh	r4, [r0, #0]
  414f74:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base);
  414f76:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  414f78:	88c2      	ldrh	r2, [r0, #6]
  414f7a:	88cc      	ldrh	r4, [r1, #6]
  414f7c:	1b12      	subs	r2, r2, r4
  414f7e:	8844      	ldrh	r4, [r0, #2]
  414f80:	1b12      	subs	r2, r2, r4
  414f82:	8849      	ldrh	r1, [r1, #2]
  414f84:	440a      	add	r2, r1
  414f86:	805a      	strh	r2, [r3, #2]
            break;
  414f88:	e6a2      	b.n	414cd0 <_lv_area_align+0x84>

00414f8a <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
  414f8a:	b430      	push	{r4, r5}
  414f8c:	b28d      	uxth	r5, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
  414f8e:	f010 0f03 	tst.w	r0, #3
  414f92:	d002      	beq.n	414f9a <lv_color_fill+0x10>
        *buf = color;
  414f94:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num--;
  414f98:	3a01      	subs	r2, #1
    }

    uint32_t c32 = color.full + (color.full << 16);
  414f9a:	eb05 4105 	add.w	r1, r5, r5, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
  414f9e:	2a10      	cmp	r2, #16
  414fa0:	d921      	bls.n	414fe6 <lv_color_fill+0x5c>
  414fa2:	f100 0320 	add.w	r3, r0, #32
  414fa6:	4614      	mov	r4, r2
        *buf32 = c32;
  414fa8:	f843 1c20 	str.w	r1, [r3, #-32]
        buf32++;
        *buf32 = c32;
  414fac:	f843 1c1c 	str.w	r1, [r3, #-28]
        buf32++;
        *buf32 = c32;
  414fb0:	f843 1c18 	str.w	r1, [r3, #-24]
        buf32++;
        *buf32 = c32;
  414fb4:	f843 1c14 	str.w	r1, [r3, #-20]
        buf32++;

        *buf32 = c32;
  414fb8:	f843 1c10 	str.w	r1, [r3, #-16]
        buf32++;
        *buf32 = c32;
  414fbc:	f843 1c0c 	str.w	r1, [r3, #-12]
        buf32++;
        *buf32 = c32;
  414fc0:	f843 1c08 	str.w	r1, [r3, #-8]
        buf32++;
        *buf32 = c32;
  414fc4:	f843 1c04 	str.w	r1, [r3, #-4]
        buf32++;

        px_num -= 16;
  414fc8:	3c10      	subs	r4, #16
  414fca:	3320      	adds	r3, #32
    while(px_num > 16) {
  414fcc:	2c10      	cmp	r4, #16
  414fce:	d8eb      	bhi.n	414fa8 <lv_color_fill+0x1e>
  414fd0:	f1a2 0311 	sub.w	r3, r2, #17
  414fd4:	091b      	lsrs	r3, r3, #4
  414fd6:	1c59      	adds	r1, r3, #1
  414fd8:	3a10      	subs	r2, #16
  414fda:	ebc3 7303 	rsb	r3, r3, r3, lsl #28
  414fde:	eb02 1203 	add.w	r2, r2, r3, lsl #4
        buf32++;
  414fe2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
  414fe6:	b11a      	cbz	r2, 414ff0 <lv_color_fill+0x66>
        *buf = color;
  414fe8:	f820 5b02 	strh.w	r5, [r0], #2
    while(px_num) {
  414fec:	3a01      	subs	r2, #1
  414fee:	d1fb      	bne.n	414fe8 <lv_color_fill+0x5e>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
  414ff0:	bc30      	pop	{r4, r5}
  414ff2:	4770      	bx	lr

00414ff4 <lv_color_lighten>:

lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
  414ff4:	b4f0      	push	{r4, r5, r6, r7}
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
  414ff6:	4b22      	ldr	r3, [pc, #136]	; (415080 <lv_color_lighten+0x8c>)
  414ff8:	881b      	ldrh	r3, [r3, #0]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  414ffa:	f1c1 05ff 	rsb	r5, r1, #255	; 0xff
  414ffe:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  415002:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  415006:	fb05 f404 	mul.w	r4, r5, r4
  41500a:	fb01 4202 	mla	r2, r1, r2, r4
  41500e:	3280      	adds	r2, #128	; 0x80
  415010:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  415014:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  415018:	f3c2 54c4 	ubfx	r4, r2, #23, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41501c:	f003 0607 	and.w	r6, r3, #7
  415020:	f3c3 3242 	ubfx	r2, r3, #13, #3
  415024:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  415028:	f000 0707 	and.w	r7, r0, #7
  41502c:	f3c0 3642 	ubfx	r6, r0, #13, #3
  415030:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  415034:	fb05 f606 	mul.w	r6, r5, r6
  415038:	fb01 6202 	mla	r2, r1, r2, r6
  41503c:	3280      	adds	r2, #128	; 0x80
  41503e:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  415042:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  415046:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41504a:	f3c0 2004 	ubfx	r0, r0, #8, #5
  41504e:	fb05 f000 	mul.w	r0, r5, r0
  415052:	fb01 0303 	mla	r3, r1, r3, r0
  415056:	3380      	adds	r3, #128	; 0x80
  415058:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41505c:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  415060:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  415064:	0e91      	lsrs	r1, r2, #26
  415066:	f04f 0000 	mov.w	r0, #0
  41506a:	f361 0002 	bfi	r0, r1, #0, #3
  41506e:	f364 00c7 	bfi	r0, r4, #3, #5
  415072:	f363 200c 	bfi	r0, r3, #8, #5
  415076:	0dd2      	lsrs	r2, r2, #23
  415078:	f362 304f 	bfi	r0, r2, #13, #3
}
  41507c:	bcf0      	pop	{r4, r5, r6, r7}
  41507e:	4770      	bx	lr
  415080:	00430574 	.word	0x00430574

00415084 <lv_color_darken>:

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
  415084:	b410      	push	{r4}
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  415086:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
  41508a:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  41508e:	fb01 f303 	mul.w	r3, r1, r3
  415092:	3380      	adds	r3, #128	; 0x80
  415094:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  415098:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  41509c:	f3c3 52c4 	ubfx	r2, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4150a0:	f000 0407 	and.w	r4, r0, #7
  4150a4:	f3c0 3342 	ubfx	r3, r0, #13, #3
  4150a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  4150ac:	fb01 f303 	mul.w	r3, r1, r3
  4150b0:	3380      	adds	r3, #128	; 0x80
  4150b2:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  4150b6:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4150ba:	f3c0 2004 	ubfx	r0, r0, #8, #5
  4150be:	fb01 f100 	mul.w	r1, r1, r0
  4150c2:	3180      	adds	r1, #128	; 0x80
  4150c4:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  4150c8:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  4150cc:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4150d0:	0e9c      	lsrs	r4, r3, #26
  4150d2:	f04f 0000 	mov.w	r0, #0
  4150d6:	f364 0002 	bfi	r0, r4, #0, #3
  4150da:	f362 00c7 	bfi	r0, r2, #3, #5
  4150de:	f361 200c 	bfi	r0, r1, #8, #5
  4150e2:	0ddb      	lsrs	r3, r3, #23
  4150e4:	f363 304f 	bfi	r0, r3, #13, #3
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
  4150e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4150ec:	4770      	bx	lr

004150ee <lv_debug_check_null>:
bool lv_debug_check_null(const void * p)
{
    if(p) return true;

    return false;
}
  4150ee:	3000      	adds	r0, #0
  4150f0:	bf18      	it	ne
  4150f2:	2001      	movne	r0, #1
  4150f4:	4770      	bx	lr
	...

004150f8 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
  4150f8:	b510      	push	{r4, lr}
  4150fa:	b0c0      	sub	sp, #256	; 0x100
  4150fc:	4604      	mov	r4, r0
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
  4150fe:	4b06      	ldr	r3, [pc, #24]	; (415118 <lv_debug_log_error+0x20>)
  415100:	4798      	blx	r3
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
  415102:	28e5      	cmp	r0, #229	; 0xe5
  415104:	d901      	bls.n	41510a <lv_debug_log_error+0x12>
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
  415106:	b040      	add	sp, #256	; 0x100
  415108:	bd10      	pop	{r4, pc}
        _lv_memcpy(bufp, msg, msg_len);
  41510a:	4602      	mov	r2, r0
  41510c:	4621      	mov	r1, r4
  41510e:	4668      	mov	r0, sp
  415110:	4b02      	ldr	r3, [pc, #8]	; (41511c <lv_debug_log_error+0x24>)
  415112:	4798      	blx	r3
}
  415114:	e7f7      	b.n	415106 <lv_debug_log_error+0xe>
  415116:	bf00      	nop
  415118:	00423781 	.word	0x00423781
  41511c:	00415a1d 	.word	0x00415a1d

00415120 <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
  415120:	1c42      	adds	r2, r0, #1

    while(*path != '\0') {
  415122:	7843      	ldrb	r3, [r0, #1]
  415124:	b173      	cbz	r3, 415144 <lv_fs_get_real_path+0x24>
        if(*path == ':' || *path == '\\' || *path == '/') {
  415126:	2b5c      	cmp	r3, #92	; 0x5c
  415128:	bf18      	it	ne
  41512a:	2b3a      	cmpne	r3, #58	; 0x3a
  41512c:	d001      	beq.n	415132 <lv_fs_get_real_path+0x12>
  41512e:	2b2f      	cmp	r3, #47	; 0x2f
  415130:	d108      	bne.n	415144 <lv_fs_get_real_path+0x24>
    while(*path != '\0') {
  415132:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  415136:	b12b      	cbz	r3, 415144 <lv_fs_get_real_path+0x24>
        if(*path == ':' || *path == '\\' || *path == '/') {
  415138:	2b5c      	cmp	r3, #92	; 0x5c
  41513a:	bf18      	it	ne
  41513c:	2b3a      	cmpne	r3, #58	; 0x3a
  41513e:	d0f8      	beq.n	415132 <lv_fs_get_real_path+0x12>
  415140:	2b2f      	cmp	r3, #47	; 0x2f
  415142:	d0f6      	beq.n	415132 <lv_fs_get_real_path+0x12>
            break;
        }
    }

    return path;
}
  415144:	4610      	mov	r0, r2
  415146:	4770      	bx	lr

00415148 <_lv_fs_init>:
{
  415148:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
  41514a:	2144      	movs	r1, #68	; 0x44
  41514c:	4801      	ldr	r0, [pc, #4]	; (415154 <_lv_fs_init+0xc>)
  41514e:	4b02      	ldr	r3, [pc, #8]	; (415158 <_lv_fs_init+0x10>)
  415150:	4798      	blx	r3
  415152:	bd08      	pop	{r3, pc}
  415154:	2043a1f8 	.word	0x2043a1f8
  415158:	00415343 	.word	0x00415343

0041515c <lv_fs_close>:
{
  41515c:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  41515e:	6843      	ldr	r3, [r0, #4]
  415160:	b173      	cbz	r3, 415180 <lv_fs_close+0x24>
    if(file_p->drv->close_cb == NULL) {
  415162:	691a      	ldr	r2, [r3, #16]
  415164:	b172      	cbz	r2, 415184 <lv_fs_close+0x28>
  415166:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
  415168:	6801      	ldr	r1, [r0, #0]
  41516a:	4618      	mov	r0, r3
  41516c:	4790      	blx	r2
  41516e:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
  415170:	6820      	ldr	r0, [r4, #0]
  415172:	4b05      	ldr	r3, [pc, #20]	; (415188 <lv_fs_close+0x2c>)
  415174:	4798      	blx	r3
    file_p->file_d = NULL;
  415176:	2300      	movs	r3, #0
  415178:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
  41517a:	6063      	str	r3, [r4, #4]
}
  41517c:	4628      	mov	r0, r5
  41517e:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  415180:	250b      	movs	r5, #11
  415182:	e7fb      	b.n	41517c <lv_fs_close+0x20>
        return LV_FS_RES_NOT_IMP;
  415184:	2509      	movs	r5, #9
  415186:	e7f9      	b.n	41517c <lv_fs_close+0x20>
  415188:	004158b9 	.word	0x004158b9

0041518c <lv_fs_read>:
{
  41518c:	b5f0      	push	{r4, r5, r6, r7, lr}
  41518e:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
  415190:	461e      	mov	r6, r3
  415192:	b10b      	cbz	r3, 415198 <lv_fs_read+0xc>
  415194:	2300      	movs	r3, #0
  415196:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  415198:	6845      	ldr	r5, [r0, #4]
  41519a:	b18d      	cbz	r5, 4151c0 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  41519c:	69af      	ldr	r7, [r5, #24]
  41519e:	b18f      	cbz	r7, 4151c4 <lv_fs_read+0x38>
  4151a0:	4613      	mov	r3, r2
  4151a2:	460a      	mov	r2, r1
  4151a4:	4604      	mov	r4, r0
    uint32_t br_tmp = 0;
  4151a6:	a804      	add	r0, sp, #16
  4151a8:	2100      	movs	r1, #0
  4151aa:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
  4151ae:	6821      	ldr	r1, [r4, #0]
  4151b0:	9000      	str	r0, [sp, #0]
  4151b2:	4628      	mov	r0, r5
  4151b4:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
  4151b6:	b10e      	cbz	r6, 4151bc <lv_fs_read+0x30>
  4151b8:	9b03      	ldr	r3, [sp, #12]
  4151ba:	6033      	str	r3, [r6, #0]
}
  4151bc:	b005      	add	sp, #20
  4151be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  4151c0:	200b      	movs	r0, #11
  4151c2:	e7fb      	b.n	4151bc <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  4151c4:	2009      	movs	r0, #9
  4151c6:	e7f9      	b.n	4151bc <lv_fs_read+0x30>

004151c8 <lv_fs_seek>:
{
  4151c8:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  4151ca:	6844      	ldr	r4, [r0, #4]
  4151cc:	b134      	cbz	r4, 4151dc <lv_fs_seek+0x14>
    if(file_p->drv->seek_cb == NULL) {
  4151ce:	6a25      	ldr	r5, [r4, #32]
  4151d0:	b135      	cbz	r5, 4151e0 <lv_fs_seek+0x18>
  4151d2:	460a      	mov	r2, r1
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
  4151d4:	6801      	ldr	r1, [r0, #0]
  4151d6:	4620      	mov	r0, r4
  4151d8:	47a8      	blx	r5
    return res;
  4151da:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  4151dc:	200b      	movs	r0, #11
  4151de:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
  4151e0:	2009      	movs	r0, #9
}
  4151e2:	bd38      	pop	{r3, r4, r5, pc}

004151e4 <lv_fs_get_drv>:
{
  4151e4:	b570      	push	{r4, r5, r6, lr}
  4151e6:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  4151e8:	4809      	ldr	r0, [pc, #36]	; (415210 <lv_fs_get_drv+0x2c>)
  4151ea:	4b0a      	ldr	r3, [pc, #40]	; (415214 <lv_fs_get_drv+0x30>)
  4151ec:	4798      	blx	r3
  4151ee:	4601      	mov	r1, r0
  4151f0:	b158      	cbz	r0, 41520a <lv_fs_get_drv+0x26>
        if(drv->letter == letter) {
  4151f2:	7803      	ldrb	r3, [r0, #0]
  4151f4:	42a3      	cmp	r3, r4
  4151f6:	d008      	beq.n	41520a <lv_fs_get_drv+0x26>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  4151f8:	4e05      	ldr	r6, [pc, #20]	; (415210 <lv_fs_get_drv+0x2c>)
  4151fa:	4d07      	ldr	r5, [pc, #28]	; (415218 <lv_fs_get_drv+0x34>)
  4151fc:	4630      	mov	r0, r6
  4151fe:	47a8      	blx	r5
  415200:	4601      	mov	r1, r0
  415202:	b110      	cbz	r0, 41520a <lv_fs_get_drv+0x26>
        if(drv->letter == letter) {
  415204:	780b      	ldrb	r3, [r1, #0]
  415206:	42a3      	cmp	r3, r4
  415208:	d1f8      	bne.n	4151fc <lv_fs_get_drv+0x18>
}
  41520a:	4608      	mov	r0, r1
  41520c:	bd70      	pop	{r4, r5, r6, pc}
  41520e:	bf00      	nop
  415210:	2043a1f8 	.word	0x2043a1f8
  415214:	004153ed 	.word	0x004153ed
  415218:	00415401 	.word	0x00415401

0041521c <lv_fs_open>:
{
  41521c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    file_p->drv    = NULL;
  415220:	2400      	movs	r4, #0
  415222:	6044      	str	r4, [r0, #4]
    file_p->file_d = NULL;
  415224:	6004      	str	r4, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  415226:	2900      	cmp	r1, #0
  415228:	d044      	beq.n	4152b4 <lv_fs_open+0x98>
  41522a:	460d      	mov	r5, r1
  41522c:	4690      	mov	r8, r2
  41522e:	4604      	mov	r4, r0
    file_p->drv = lv_fs_get_drv(letter);
  415230:	7808      	ldrb	r0, [r1, #0]
  415232:	4b23      	ldr	r3, [pc, #140]	; (4152c0 <lv_fs_open+0xa4>)
  415234:	4798      	blx	r3
  415236:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
  415238:	2800      	cmp	r0, #0
  41523a:	d03f      	beq.n	4152bc <lv_fs_open+0xa0>
    if(file_p->drv->ready_cb != NULL) {
  41523c:	6883      	ldr	r3, [r0, #8]
  41523e:	b10b      	cbz	r3, 415244 <lv_fs_open+0x28>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
  415240:	4798      	blx	r3
  415242:	b1a0      	cbz	r0, 41526e <lv_fs_open+0x52>
    if(file_p->drv->open_cb == NULL) {
  415244:	6867      	ldr	r7, [r4, #4]
  415246:	68fe      	ldr	r6, [r7, #12]
  415248:	b1ae      	cbz	r6, 415276 <lv_fs_open+0x5a>
    const char * real_path = lv_fs_get_real_path(path);
  41524a:	4628      	mov	r0, r5
  41524c:	4b1d      	ldr	r3, [pc, #116]	; (4152c4 <lv_fs_open+0xa8>)
  41524e:	4798      	blx	r3
  415250:	4605      	mov	r5, r0
    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
  415252:	8878      	ldrh	r0, [r7, #2]
  415254:	b198      	cbz	r0, 41527e <lv_fs_open+0x62>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
  415256:	4b1c      	ldr	r3, [pc, #112]	; (4152c8 <lv_fs_open+0xac>)
  415258:	4798      	blx	r3
  41525a:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
  41525c:	4b1b      	ldr	r3, [pc, #108]	; (4152cc <lv_fs_open+0xb0>)
  41525e:	4798      	blx	r3
  415260:	b1a0      	cbz	r0, 41528c <lv_fs_open+0x70>
    if(file_p->file_d == NULL) {
  415262:	6821      	ldr	r1, [r4, #0]
  415264:	b9c1      	cbnz	r1, 415298 <lv_fs_open+0x7c>
        file_p->drv = NULL;
  415266:	2300      	movs	r3, #0
  415268:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
  41526a:	250a      	movs	r5, #10
  41526c:	e023      	b.n	4152b6 <lv_fs_open+0x9a>
            file_p->drv = NULL;
  41526e:	2300      	movs	r3, #0
  415270:	6063      	str	r3, [r4, #4]
            return LV_FS_RES_HW_ERR;
  415272:	2501      	movs	r5, #1
  415274:	e01f      	b.n	4152b6 <lv_fs_open+0x9a>
        file_p->drv = NULL;
  415276:	2300      	movs	r3, #0
  415278:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_NOT_IMP;
  41527a:	2509      	movs	r5, #9
  41527c:	e01b      	b.n	4152b6 <lv_fs_open+0x9a>
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
  41527e:	4643      	mov	r3, r8
  415280:	462a      	mov	r2, r5
  415282:	4621      	mov	r1, r4
  415284:	4638      	mov	r0, r7
  415286:	47b0      	blx	r6
  415288:	4605      	mov	r5, r0
  41528a:	e014      	b.n	4152b6 <lv_fs_open+0x9a>
    LV_ASSERT_MEM(file_p->file_d);
  41528c:	6822      	ldr	r2, [r4, #0]
  41528e:	2300      	movs	r3, #0
  415290:	480f      	ldr	r0, [pc, #60]	; (4152d0 <lv_fs_open+0xb4>)
  415292:	4910      	ldr	r1, [pc, #64]	; (4152d4 <lv_fs_open+0xb8>)
  415294:	4788      	blx	r1
  415296:	e7fe      	b.n	415296 <lv_fs_open+0x7a>
    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
  415298:	6860      	ldr	r0, [r4, #4]
  41529a:	68c7      	ldr	r7, [r0, #12]
  41529c:	4643      	mov	r3, r8
  41529e:	462a      	mov	r2, r5
  4152a0:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
  4152a2:	4605      	mov	r5, r0
  4152a4:	b138      	cbz	r0, 4152b6 <lv_fs_open+0x9a>
        lv_mem_free(file_p->file_d);
  4152a6:	6820      	ldr	r0, [r4, #0]
  4152a8:	4b0b      	ldr	r3, [pc, #44]	; (4152d8 <lv_fs_open+0xbc>)
  4152aa:	4798      	blx	r3
        file_p->file_d = NULL;
  4152ac:	2300      	movs	r3, #0
  4152ae:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
  4152b0:	6063      	str	r3, [r4, #4]
  4152b2:	e000      	b.n	4152b6 <lv_fs_open+0x9a>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  4152b4:	250b      	movs	r5, #11
}
  4152b6:	4628      	mov	r0, r5
  4152b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LV_FS_RES_NOT_EX;
  4152bc:	2503      	movs	r5, #3
  4152be:	e7fa      	b.n	4152b6 <lv_fs_open+0x9a>
  4152c0:	004151e5 	.word	0x004151e5
  4152c4:	00415121 	.word	0x00415121
  4152c8:	004157c9 	.word	0x004157c9
  4152cc:	004150ef 	.word	0x004150ef
  4152d0:	00425a60 	.word	0x00425a60
  4152d4:	004150f9 	.word	0x004150f9
  4152d8:	004158b9 	.word	0x004158b9

004152dc <lv_fs_get_ext>:
{
  4152dc:	b510      	push	{r4, lr}
  4152de:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
  4152e0:	4b10      	ldr	r3, [pc, #64]	; (415324 <lv_fs_get_ext+0x48>)
  4152e2:	4798      	blx	r3
  4152e4:	b1c8      	cbz	r0, 41531a <lv_fs_get_ext+0x3e>
  4152e6:	4602      	mov	r2, r0
        if(fn[i] == '.') {
  4152e8:	1821      	adds	r1, r4, r0
  4152ea:	5c23      	ldrb	r3, [r4, r0]
  4152ec:	2b2e      	cmp	r3, #46	; 0x2e
  4152ee:	d00f      	beq.n	415310 <lv_fs_get_ext+0x34>
        else if(fn[i] == '/' || fn[i] == '\\') {
  4152f0:	2b2f      	cmp	r3, #47	; 0x2f
  4152f2:	d014      	beq.n	41531e <lv_fs_get_ext+0x42>
  4152f4:	2b5c      	cmp	r3, #92	; 0x5c
  4152f6:	d012      	beq.n	41531e <lv_fs_get_ext+0x42>
    for(i = strlen(fn); i > 0; i--) {
  4152f8:	3a01      	subs	r2, #1
  4152fa:	d00c      	beq.n	415316 <lv_fs_get_ext+0x3a>
        if(fn[i] == '.') {
  4152fc:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
  415300:	2b2e      	cmp	r3, #46	; 0x2e
  415302:	d005      	beq.n	415310 <lv_fs_get_ext+0x34>
        else if(fn[i] == '/' || fn[i] == '\\') {
  415304:	2b2f      	cmp	r3, #47	; 0x2f
  415306:	d001      	beq.n	41530c <lv_fs_get_ext+0x30>
  415308:	2b5c      	cmp	r3, #92	; 0x5c
  41530a:	d1f5      	bne.n	4152f8 <lv_fs_get_ext+0x1c>
            return ""; /*No extension if a '\' or '/' found*/
  41530c:	4806      	ldr	r0, [pc, #24]	; (415328 <lv_fs_get_ext+0x4c>)
}
  41530e:	bd10      	pop	{r4, pc}
            return &fn[i + 1];
  415310:	3201      	adds	r2, #1
  415312:	18a0      	adds	r0, r4, r2
  415314:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
  415316:	4804      	ldr	r0, [pc, #16]	; (415328 <lv_fs_get_ext+0x4c>)
  415318:	bd10      	pop	{r4, pc}
  41531a:	4803      	ldr	r0, [pc, #12]	; (415328 <lv_fs_get_ext+0x4c>)
  41531c:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
  41531e:	4802      	ldr	r0, [pc, #8]	; (415328 <lv_fs_get_ext+0x4c>)
  415320:	bd10      	pop	{r4, pc}
  415322:	bf00      	nop
  415324:	00423781 	.word	0x00423781
  415328:	004307f0 	.word	0x004307f0

0041532c <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
  41532c:	460b      	mov	r3, r1
  41532e:	b109      	cbz	r1, 415334 <node_set_prev+0x8>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
  415330:	6801      	ldr	r1, [r0, #0]
  415332:	505a      	str	r2, [r3, r1]
  415334:	4770      	bx	lr

00415336 <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
  415336:	460b      	mov	r3, r1
  415338:	b111      	cbz	r1, 415340 <node_set_next+0xa>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
  41533a:	6801      	ldr	r1, [r0, #0]
  41533c:	440b      	add	r3, r1
  41533e:	605a      	str	r2, [r3, #4]
  415340:	4770      	bx	lr

00415342 <_lv_ll_init>:
    ll_p->head = NULL;
  415342:	2300      	movs	r3, #0
  415344:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
  415346:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
  415348:	3103      	adds	r1, #3
  41534a:	f021 0103 	bic.w	r1, r1, #3
    ll_p->n_size = node_size;
  41534e:	6001      	str	r1, [r0, #0]
  415350:	4770      	bx	lr
	...

00415354 <_lv_ll_ins_head>:
{
  415354:	b538      	push	{r3, r4, r5, lr}
  415356:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  415358:	6800      	ldr	r0, [r0, #0]
  41535a:	3008      	adds	r0, #8
  41535c:	4b0d      	ldr	r3, [pc, #52]	; (415394 <_lv_ll_ins_head+0x40>)
  41535e:	4798      	blx	r3
    if(n_new != NULL) {
  415360:	4605      	mov	r5, r0
  415362:	b190      	cbz	r0, 41538a <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
  415364:	2200      	movs	r2, #0
  415366:	4601      	mov	r1, r0
  415368:	4620      	mov	r0, r4
  41536a:	4b0b      	ldr	r3, [pc, #44]	; (415398 <_lv_ll_ins_head+0x44>)
  41536c:	4798      	blx	r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
  41536e:	6862      	ldr	r2, [r4, #4]
  415370:	4629      	mov	r1, r5
  415372:	4620      	mov	r0, r4
  415374:	4b09      	ldr	r3, [pc, #36]	; (41539c <_lv_ll_ins_head+0x48>)
  415376:	4798      	blx	r3
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
  415378:	6861      	ldr	r1, [r4, #4]
  41537a:	b119      	cbz	r1, 415384 <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
  41537c:	462a      	mov	r2, r5
  41537e:	4620      	mov	r0, r4
  415380:	4b05      	ldr	r3, [pc, #20]	; (415398 <_lv_ll_ins_head+0x44>)
  415382:	4798      	blx	r3
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
  415384:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
  415386:	68a3      	ldr	r3, [r4, #8]
  415388:	b10b      	cbz	r3, 41538e <_lv_ll_ins_head+0x3a>
}
  41538a:	4628      	mov	r0, r5
  41538c:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
  41538e:	60a5      	str	r5, [r4, #8]
  415390:	e7fb      	b.n	41538a <_lv_ll_ins_head+0x36>
  415392:	bf00      	nop
  415394:	004157c9 	.word	0x004157c9
  415398:	0041532d 	.word	0x0041532d
  41539c:	00415337 	.word	0x00415337

004153a0 <_lv_ll_ins_tail>:
{
  4153a0:	b538      	push	{r3, r4, r5, lr}
  4153a2:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  4153a4:	6800      	ldr	r0, [r0, #0]
  4153a6:	3008      	adds	r0, #8
  4153a8:	4b0d      	ldr	r3, [pc, #52]	; (4153e0 <_lv_ll_ins_tail+0x40>)
  4153aa:	4798      	blx	r3
    if(n_new != NULL) {
  4153ac:	4605      	mov	r5, r0
  4153ae:	b190      	cbz	r0, 4153d6 <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
  4153b0:	2200      	movs	r2, #0
  4153b2:	4601      	mov	r1, r0
  4153b4:	4620      	mov	r0, r4
  4153b6:	4b0b      	ldr	r3, [pc, #44]	; (4153e4 <_lv_ll_ins_tail+0x44>)
  4153b8:	4798      	blx	r3
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
  4153ba:	68a2      	ldr	r2, [r4, #8]
  4153bc:	4629      	mov	r1, r5
  4153be:	4620      	mov	r0, r4
  4153c0:	4b09      	ldr	r3, [pc, #36]	; (4153e8 <_lv_ll_ins_tail+0x48>)
  4153c2:	4798      	blx	r3
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
  4153c4:	68a1      	ldr	r1, [r4, #8]
  4153c6:	b119      	cbz	r1, 4153d0 <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
  4153c8:	462a      	mov	r2, r5
  4153ca:	4620      	mov	r0, r4
  4153cc:	4b05      	ldr	r3, [pc, #20]	; (4153e4 <_lv_ll_ins_tail+0x44>)
  4153ce:	4798      	blx	r3
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
  4153d0:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
  4153d2:	6863      	ldr	r3, [r4, #4]
  4153d4:	b10b      	cbz	r3, 4153da <_lv_ll_ins_tail+0x3a>
}
  4153d6:	4628      	mov	r0, r5
  4153d8:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
  4153da:	6065      	str	r5, [r4, #4]
  4153dc:	e7fb      	b.n	4153d6 <_lv_ll_ins_tail+0x36>
  4153de:	bf00      	nop
  4153e0:	004157c9 	.word	0x004157c9
  4153e4:	00415337 	.word	0x00415337
  4153e8:	0041532d 	.word	0x0041532d

004153ec <_lv_ll_get_head>:
    if(ll_p != NULL) {
  4153ec:	b108      	cbz	r0, 4153f2 <_lv_ll_get_head+0x6>
        head = ll_p->head;
  4153ee:	6840      	ldr	r0, [r0, #4]
  4153f0:	4770      	bx	lr
    void * head = NULL;
  4153f2:	2000      	movs	r0, #0
}
  4153f4:	4770      	bx	lr

004153f6 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
  4153f6:	b108      	cbz	r0, 4153fc <_lv_ll_get_tail+0x6>
        tail = ll_p->tail;
  4153f8:	6880      	ldr	r0, [r0, #8]
  4153fa:	4770      	bx	lr
    void * tail = NULL;
  4153fc:	2000      	movs	r0, #0
}
  4153fe:	4770      	bx	lr

00415400 <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
  415400:	b118      	cbz	r0, 41540a <_lv_ll_get_next+0xa>
    return *((lv_ll_node_t **)n_act_d);
  415402:	6803      	ldr	r3, [r0, #0]
  415404:	4419      	add	r1, r3
  415406:	6848      	ldr	r0, [r1, #4]
  415408:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  41540a:	2000      	movs	r0, #0
}
  41540c:	4770      	bx	lr

0041540e <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
  41540e:	b110      	cbz	r0, 415416 <_lv_ll_get_prev+0x8>
    return *((lv_ll_node_t **)n_act_d);
  415410:	6803      	ldr	r3, [r0, #0]
  415412:	58c8      	ldr	r0, [r1, r3]
  415414:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  415416:	2000      	movs	r0, #0
}
  415418:	4770      	bx	lr
	...

0041541c <_lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
  41541c:	2800      	cmp	r0, #0
  41541e:	d035      	beq.n	41548c <_lv_ll_ins_prev+0x70>
{
  415420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  415424:	4604      	mov	r4, r0
    if(NULL == ll_p || NULL == n_act) return NULL;
  415426:	b361      	cbz	r1, 415482 <_lv_ll_ins_prev+0x66>
    if(ll_p != NULL) {
  415428:	b320      	cbz	r0, 415474 <_lv_ll_ins_prev+0x58>
        head = ll_p->head;
  41542a:	6843      	ldr	r3, [r0, #4]
  41542c:	460d      	mov	r5, r1
    if(_lv_ll_get_head(ll_p) == n_act) {
  41542e:	4299      	cmp	r1, r3
  415430:	d022      	beq.n	415478 <_lv_ll_ins_prev+0x5c>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  415432:	6820      	ldr	r0, [r4, #0]
  415434:	3008      	adds	r0, #8
  415436:	4b16      	ldr	r3, [pc, #88]	; (415490 <_lv_ll_ins_prev+0x74>)
  415438:	4798      	blx	r3
        if(n_new == NULL) return NULL;
  41543a:	4606      	mov	r6, r0
  41543c:	b320      	cbz	r0, 415488 <_lv_ll_ins_prev+0x6c>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
  41543e:	4629      	mov	r1, r5
  415440:	4620      	mov	r0, r4
  415442:	4b14      	ldr	r3, [pc, #80]	; (415494 <_lv_ll_ins_prev+0x78>)
  415444:	4798      	blx	r3
  415446:	4680      	mov	r8, r0
        node_set_next(ll_p, n_prev, n_new);
  415448:	4632      	mov	r2, r6
  41544a:	4601      	mov	r1, r0
  41544c:	4620      	mov	r0, r4
  41544e:	4f12      	ldr	r7, [pc, #72]	; (415498 <_lv_ll_ins_prev+0x7c>)
  415450:	47b8      	blx	r7
        node_set_prev(ll_p, n_new, n_prev);
  415452:	4642      	mov	r2, r8
  415454:	4631      	mov	r1, r6
  415456:	4620      	mov	r0, r4
  415458:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4154a0 <_lv_ll_ins_prev+0x84>
  41545c:	47c0      	blx	r8
        node_set_prev(ll_p, n_act, n_new);
  41545e:	4632      	mov	r2, r6
  415460:	4629      	mov	r1, r5
  415462:	4620      	mov	r0, r4
  415464:	47c0      	blx	r8
        node_set_next(ll_p, n_new, n_act);
  415466:	462a      	mov	r2, r5
  415468:	4631      	mov	r1, r6
  41546a:	4620      	mov	r0, r4
  41546c:	47b8      	blx	r7
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  41546e:	4630      	mov	r0, r6
  415470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    void * head = NULL;
  415474:	2300      	movs	r3, #0
  415476:	e7d9      	b.n	41542c <_lv_ll_ins_prev+0x10>
        n_new = _lv_ll_ins_head(ll_p);
  415478:	4620      	mov	r0, r4
  41547a:	4b08      	ldr	r3, [pc, #32]	; (41549c <_lv_ll_ins_prev+0x80>)
  41547c:	4798      	blx	r3
  41547e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
  415482:	2000      	movs	r0, #0
  415484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
  415488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
  41548c:	2000      	movs	r0, #0
}
  41548e:	4770      	bx	lr
  415490:	004157c9 	.word	0x004157c9
  415494:	0041540f 	.word	0x0041540f
  415498:	00415337 	.word	0x00415337
  41549c:	00415355 	.word	0x00415355
  4154a0:	0041532d 	.word	0x0041532d

004154a4 <_lv_ll_remove>:
{
  4154a4:	b570      	push	{r4, r5, r6, lr}
  4154a6:	460d      	mov	r5, r1
    if(ll_p != NULL) {
  4154a8:	4604      	mov	r4, r0
  4154aa:	b350      	cbz	r0, 415502 <_lv_ll_remove+0x5e>
    if(_lv_ll_get_head(ll_p) == node_p) {
  4154ac:	6843      	ldr	r3, [r0, #4]
  4154ae:	4299      	cmp	r1, r3
  4154b0:	d029      	beq.n	415506 <_lv_ll_remove+0x62>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
  4154b2:	6883      	ldr	r3, [r0, #8]
  4154b4:	4299      	cmp	r1, r3
  4154b6:	d017      	beq.n	4154e8 <_lv_ll_remove+0x44>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
  4154b8:	4629      	mov	r1, r5
  4154ba:	4620      	mov	r0, r4
  4154bc:	4b18      	ldr	r3, [pc, #96]	; (415520 <_lv_ll_remove+0x7c>)
  4154be:	4798      	blx	r3
  4154c0:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
  4154c2:	4629      	mov	r1, r5
  4154c4:	4620      	mov	r0, r4
  4154c6:	4b17      	ldr	r3, [pc, #92]	; (415524 <_lv_ll_remove+0x80>)
  4154c8:	4798      	blx	r3
  4154ca:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
  4154cc:	4602      	mov	r2, r0
  4154ce:	4631      	mov	r1, r6
  4154d0:	4620      	mov	r0, r4
  4154d2:	4b15      	ldr	r3, [pc, #84]	; (415528 <_lv_ll_remove+0x84>)
  4154d4:	4798      	blx	r3
        node_set_prev(ll_p, n_next, n_prev);
  4154d6:	4632      	mov	r2, r6
  4154d8:	4629      	mov	r1, r5
  4154da:	4620      	mov	r0, r4
  4154dc:	4b13      	ldr	r3, [pc, #76]	; (41552c <_lv_ll_remove+0x88>)
  4154de:	4798      	blx	r3
}
  4154e0:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = NULL;
  4154e2:	2300      	movs	r3, #0
  4154e4:	60a3      	str	r3, [r4, #8]
  4154e6:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
  4154e8:	4b0d      	ldr	r3, [pc, #52]	; (415520 <_lv_ll_remove+0x7c>)
  4154ea:	4798      	blx	r3
  4154ec:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
  4154ee:	b128      	cbz	r0, 4154fc <_lv_ll_remove+0x58>
            node_set_next(ll_p, ll_p->tail, NULL);
  4154f0:	2200      	movs	r2, #0
  4154f2:	4601      	mov	r1, r0
  4154f4:	4620      	mov	r0, r4
  4154f6:	4b0c      	ldr	r3, [pc, #48]	; (415528 <_lv_ll_remove+0x84>)
  4154f8:	4798      	blx	r3
  4154fa:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->head = NULL;
  4154fc:	2300      	movs	r3, #0
  4154fe:	6063      	str	r3, [r4, #4]
  415500:	bd70      	pop	{r4, r5, r6, pc}
    if(_lv_ll_get_head(ll_p) == node_p) {
  415502:	2900      	cmp	r1, #0
  415504:	d1d8      	bne.n	4154b8 <_lv_ll_remove+0x14>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
  415506:	4629      	mov	r1, r5
  415508:	4620      	mov	r0, r4
  41550a:	4b06      	ldr	r3, [pc, #24]	; (415524 <_lv_ll_remove+0x80>)
  41550c:	4798      	blx	r3
  41550e:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
  415510:	2800      	cmp	r0, #0
  415512:	d0e6      	beq.n	4154e2 <_lv_ll_remove+0x3e>
            node_set_prev(ll_p, ll_p->head, NULL);
  415514:	2200      	movs	r2, #0
  415516:	4601      	mov	r1, r0
  415518:	4620      	mov	r0, r4
  41551a:	4b04      	ldr	r3, [pc, #16]	; (41552c <_lv_ll_remove+0x88>)
  41551c:	4798      	blx	r3
  41551e:	bd70      	pop	{r4, r5, r6, pc}
  415520:	0041540f 	.word	0x0041540f
  415524:	00415401 	.word	0x00415401
  415528:	00415337 	.word	0x00415337
  41552c:	0041532d 	.word	0x0041532d

00415530 <_lv_ll_chg_list>:
{
  415530:	b570      	push	{r4, r5, r6, lr}
  415532:	460c      	mov	r4, r1
  415534:	4615      	mov	r5, r2
  415536:	461e      	mov	r6, r3
    _lv_ll_remove(ll_ori_p, node);
  415538:	4611      	mov	r1, r2
  41553a:	4b17      	ldr	r3, [pc, #92]	; (415598 <_lv_ll_chg_list+0x68>)
  41553c:	4798      	blx	r3
    if(head) {
  41553e:	b1ae      	cbz	r6, 41556c <_lv_ll_chg_list+0x3c>
        node_set_prev(ll_new_p, node, NULL);
  415540:	2200      	movs	r2, #0
  415542:	4629      	mov	r1, r5
  415544:	4620      	mov	r0, r4
  415546:	4b15      	ldr	r3, [pc, #84]	; (41559c <_lv_ll_chg_list+0x6c>)
  415548:	4798      	blx	r3
        node_set_next(ll_new_p, node, ll_new_p->head);
  41554a:	6862      	ldr	r2, [r4, #4]
  41554c:	4629      	mov	r1, r5
  41554e:	4620      	mov	r0, r4
  415550:	4b13      	ldr	r3, [pc, #76]	; (4155a0 <_lv_ll_chg_list+0x70>)
  415552:	4798      	blx	r3
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
  415554:	6861      	ldr	r1, [r4, #4]
  415556:	b119      	cbz	r1, 415560 <_lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
  415558:	462a      	mov	r2, r5
  41555a:	4620      	mov	r0, r4
  41555c:	4b0f      	ldr	r3, [pc, #60]	; (41559c <_lv_ll_chg_list+0x6c>)
  41555e:	4798      	blx	r3
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
  415560:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
  415562:	68a3      	ldr	r3, [r4, #8]
  415564:	b103      	cbz	r3, 415568 <_lv_ll_chg_list+0x38>
  415566:	bd70      	pop	{r4, r5, r6, pc}
            ll_new_p->tail = node;
  415568:	60a5      	str	r5, [r4, #8]
  41556a:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
  41556c:	68a2      	ldr	r2, [r4, #8]
  41556e:	4629      	mov	r1, r5
  415570:	4620      	mov	r0, r4
  415572:	4b0a      	ldr	r3, [pc, #40]	; (41559c <_lv_ll_chg_list+0x6c>)
  415574:	4798      	blx	r3
        node_set_next(ll_new_p, node, NULL);
  415576:	2200      	movs	r2, #0
  415578:	4629      	mov	r1, r5
  41557a:	4620      	mov	r0, r4
  41557c:	4b08      	ldr	r3, [pc, #32]	; (4155a0 <_lv_ll_chg_list+0x70>)
  41557e:	4798      	blx	r3
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
  415580:	68a1      	ldr	r1, [r4, #8]
  415582:	b119      	cbz	r1, 41558c <_lv_ll_chg_list+0x5c>
            node_set_next(ll_new_p, ll_new_p->tail, node);
  415584:	462a      	mov	r2, r5
  415586:	4620      	mov	r0, r4
  415588:	4b05      	ldr	r3, [pc, #20]	; (4155a0 <_lv_ll_chg_list+0x70>)
  41558a:	4798      	blx	r3
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
  41558c:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
  41558e:	6863      	ldr	r3, [r4, #4]
  415590:	2b00      	cmp	r3, #0
  415592:	d1e8      	bne.n	415566 <_lv_ll_chg_list+0x36>
            ll_new_p->head = node;
  415594:	6065      	str	r5, [r4, #4]
}
  415596:	e7e6      	b.n	415566 <_lv_ll_chg_list+0x36>
  415598:	004154a5 	.word	0x004154a5
  41559c:	0041532d 	.word	0x0041532d
  4155a0:	00415337 	.word	0x00415337

004155a4 <_lv_ll_get_len>:
{
  4155a4:	b570      	push	{r4, r5, r6, lr}
    if(ll_p != NULL) {
  4155a6:	b160      	cbz	r0, 4155c2 <_lv_ll_get_len+0x1e>
  4155a8:	4605      	mov	r5, r0
        head = ll_p->head;
  4155aa:	6841      	ldr	r1, [r0, #4]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  4155ac:	b159      	cbz	r1, 4155c6 <_lv_ll_get_len+0x22>
  4155ae:	2400      	movs	r4, #0
  4155b0:	4e06      	ldr	r6, [pc, #24]	; (4155cc <_lv_ll_get_len+0x28>)
        len++;
  4155b2:	3401      	adds	r4, #1
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  4155b4:	4628      	mov	r0, r5
  4155b6:	47b0      	blx	r6
  4155b8:	4601      	mov	r1, r0
  4155ba:	2800      	cmp	r0, #0
  4155bc:	d1f9      	bne.n	4155b2 <_lv_ll_get_len+0xe>
}
  4155be:	4620      	mov	r0, r4
  4155c0:	bd70      	pop	{r4, r5, r6, pc}
    if(ll_p != NULL) {
  4155c2:	2400      	movs	r4, #0
  4155c4:	e7fb      	b.n	4155be <_lv_ll_get_len+0x1a>
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  4155c6:	2400      	movs	r4, #0
    return len;
  4155c8:	e7f9      	b.n	4155be <_lv_ll_get_len+0x1a>
  4155ca:	bf00      	nop
  4155cc:	00415401 	.word	0x00415401

004155d0 <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
  4155d0:	4291      	cmp	r1, r2
  4155d2:	d04c      	beq.n	41566e <_lv_ll_move_before+0x9e>
{
  4155d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4155d8:	4617      	mov	r7, r2
  4155da:	460c      	mov	r4, r1
  4155dc:	4605      	mov	r5, r0
    if(n_after != NULL)
  4155de:	b312      	cbz	r2, 415626 <_lv_ll_move_before+0x56>
        n_before = _lv_ll_get_prev(ll_p, n_after);
  4155e0:	4611      	mov	r1, r2
  4155e2:	4b23      	ldr	r3, [pc, #140]	; (415670 <_lv_ll_move_before+0xa0>)
  4155e4:	4798      	blx	r3
  4155e6:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
  4155e8:	4284      	cmp	r4, r0
  4155ea:	d01a      	beq.n	415622 <_lv_ll_move_before+0x52>
    _lv_ll_remove(ll_p, n_act);
  4155ec:	4621      	mov	r1, r4
  4155ee:	4628      	mov	r0, r5
  4155f0:	4b20      	ldr	r3, [pc, #128]	; (415674 <_lv_ll_move_before+0xa4>)
  4155f2:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
  4155f4:	4622      	mov	r2, r4
  4155f6:	4631      	mov	r1, r6
  4155f8:	4628      	mov	r0, r5
  4155fa:	f8df 807c 	ldr.w	r8, [pc, #124]	; 415678 <_lv_ll_move_before+0xa8>
  4155fe:	47c0      	blx	r8
    node_set_prev(ll_p, n_act, n_before);
  415600:	4632      	mov	r2, r6
  415602:	4621      	mov	r1, r4
  415604:	4628      	mov	r0, r5
  415606:	f8df 9074 	ldr.w	r9, [pc, #116]	; 41567c <_lv_ll_move_before+0xac>
  41560a:	47c8      	blx	r9
    node_set_prev(ll_p, n_after, n_act);
  41560c:	4622      	mov	r2, r4
  41560e:	4639      	mov	r1, r7
  415610:	4628      	mov	r0, r5
  415612:	47c8      	blx	r9
    node_set_next(ll_p, n_act, n_after);
  415614:	463a      	mov	r2, r7
  415616:	4621      	mov	r1, r4
  415618:	4628      	mov	r0, r5
  41561a:	47c0      	blx	r8
    if(n_before == NULL) ll_p->head = n_act;
  41561c:	b306      	cbz	r6, 415660 <_lv_ll_move_before+0x90>
  41561e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  415622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(ll_p != NULL) {
  415626:	b1f0      	cbz	r0, 415666 <_lv_ll_move_before+0x96>
        tail = ll_p->tail;
  415628:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
  41562a:	42b4      	cmp	r4, r6
  41562c:	d01d      	beq.n	41566a <_lv_ll_move_before+0x9a>
    _lv_ll_remove(ll_p, n_act);
  41562e:	4621      	mov	r1, r4
  415630:	4628      	mov	r0, r5
  415632:	4b10      	ldr	r3, [pc, #64]	; (415674 <_lv_ll_move_before+0xa4>)
  415634:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
  415636:	4622      	mov	r2, r4
  415638:	4631      	mov	r1, r6
  41563a:	4628      	mov	r0, r5
  41563c:	4f0e      	ldr	r7, [pc, #56]	; (415678 <_lv_ll_move_before+0xa8>)
  41563e:	47b8      	blx	r7
    node_set_prev(ll_p, n_act, n_before);
  415640:	4632      	mov	r2, r6
  415642:	4621      	mov	r1, r4
  415644:	4628      	mov	r0, r5
  415646:	f8df 8034 	ldr.w	r8, [pc, #52]	; 41567c <_lv_ll_move_before+0xac>
  41564a:	47c0      	blx	r8
    node_set_prev(ll_p, n_after, n_act);
  41564c:	4622      	mov	r2, r4
  41564e:	2100      	movs	r1, #0
  415650:	4628      	mov	r0, r5
  415652:	47c0      	blx	r8
    node_set_next(ll_p, n_act, n_after);
  415654:	2200      	movs	r2, #0
  415656:	4621      	mov	r1, r4
  415658:	4628      	mov	r0, r5
  41565a:	47b8      	blx	r7
    if(n_after == NULL) ll_p->tail = n_act;
  41565c:	60ac      	str	r4, [r5, #8]
  41565e:	e7dd      	b.n	41561c <_lv_ll_move_before+0x4c>
    if(n_before == NULL) ll_p->head = n_act;
  415660:	606c      	str	r4, [r5, #4]
  415662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    void * tail = NULL;
  415666:	4616      	mov	r6, r2
  415668:	e7df      	b.n	41562a <_lv_ll_move_before+0x5a>
  41566a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41566e:	4770      	bx	lr
  415670:	0041540f 	.word	0x0041540f
  415674:	004154a5 	.word	0x004154a5
  415678:	00415337 	.word	0x00415337
  41567c:	0041532d 	.word	0x0041532d

00415680 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
  415680:	b140      	cbz	r0, 415694 <_lv_ll_is_empty+0x14>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  415682:	6842      	ldr	r2, [r0, #4]
  415684:	b10a      	cbz	r2, 41568a <_lv_ll_is_empty+0xa>
    return false;
  415686:	2000      	movs	r0, #0
}
  415688:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  41568a:	6880      	ldr	r0, [r0, #8]
  41568c:	fab0 f080 	clz	r0, r0
  415690:	0940      	lsrs	r0, r0, #5
  415692:	4770      	bx	lr
    if(ll_p == NULL) return true;
  415694:	2001      	movs	r0, #1
  415696:	4770      	bx	lr

00415698 <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
  415698:	4b1c      	ldr	r3, [pc, #112]	; (41570c <_lv_trigo_sin+0x74>)
  41569a:	fb83 2300 	smull	r2, r3, r3, r0
  41569e:	181a      	adds	r2, r3, r0
  4156a0:	17c3      	asrs	r3, r0, #31
  4156a2:	ebc3 2322 	rsb	r3, r3, r2, asr #8
  4156a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
  4156aa:	fb02 0013 	mls	r0, r2, r3, r0
  4156ae:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
  4156b0:	2800      	cmp	r0, #0
  4156b2:	db15      	blt.n	4156e0 <_lv_trigo_sin+0x48>

    if(angle < 90) {
  4156b4:	2859      	cmp	r0, #89	; 0x59
  4156b6:	dd16      	ble.n	4156e6 <_lv_trigo_sin+0x4e>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
  4156b8:	b280      	uxth	r0, r0
  4156ba:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
  4156be:	b29b      	uxth	r3, r3
  4156c0:	2b59      	cmp	r3, #89	; 0x59
  4156c2:	d914      	bls.n	4156ee <_lv_trigo_sin+0x56>
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
    }
    else if(angle >= 180 && angle < 270) {
  4156c4:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
  4156c8:	b29b      	uxth	r3, r3
  4156ca:	2b59      	cmp	r3, #89	; 0x59
  4156cc:	d916      	bls.n	4156fc <_lv_trigo_sin+0x64>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
  4156ce:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
  4156d2:	b200      	sxth	r0, r0
  4156d4:	4b0e      	ldr	r3, [pc, #56]	; (415710 <_lv_trigo_sin+0x78>)
  4156d6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  4156da:	4240      	negs	r0, r0
  4156dc:	b200      	sxth	r0, r0
    }

    return ret;
}
  4156de:	4770      	bx	lr
    if(angle < 0) angle = 360 + angle;
  4156e0:	4410      	add	r0, r2
  4156e2:	b200      	sxth	r0, r0
  4156e4:	e7e6      	b.n	4156b4 <_lv_trigo_sin+0x1c>
        ret = sin0_90_table[angle];
  4156e6:	4b0a      	ldr	r3, [pc, #40]	; (415710 <_lv_trigo_sin+0x78>)
  4156e8:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  4156ec:	4770      	bx	lr
        angle = 180 - angle;
  4156ee:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
  4156f2:	b200      	sxth	r0, r0
  4156f4:	4b06      	ldr	r3, [pc, #24]	; (415710 <_lv_trigo_sin+0x78>)
  4156f6:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  4156fa:	4770      	bx	lr
        ret   = -sin0_90_table[angle];
  4156fc:	b21b      	sxth	r3, r3
  4156fe:	4a04      	ldr	r2, [pc, #16]	; (415710 <_lv_trigo_sin+0x78>)
  415700:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
  415704:	4240      	negs	r0, r0
  415706:	b200      	sxth	r0, r0
  415708:	4770      	bx	lr
  41570a:	bf00      	nop
  41570c:	b60b60b7 	.word	0xb60b60b7
  415710:	00430578 	.word	0x00430578

00415714 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
  415714:	b430      	push	{r4, r5}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
  415716:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
  415718:	2400      	movs	r4, #0
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
  41571a:	1913      	adds	r3, r2, r4
        if(trial * trial <= x) root = trial;
  41571c:	fb03 f503 	mul.w	r5, r3, r3
  415720:	42a8      	cmp	r0, r5
  415722:	bf28      	it	cs
  415724:	461c      	movcs	r4, r3
        mask = mask >> 1;
    } while(mask);
  415726:	0852      	lsrs	r2, r2, #1
  415728:	d1f7      	bne.n	41571a <_lv_sqrt+0x6>

    q->i = root >> 4;
  41572a:	0923      	lsrs	r3, r4, #4
  41572c:	800b      	strh	r3, [r1, #0]
    q->f = (root & 0xf) << 4;
  41572e:	0124      	lsls	r4, r4, #4
  415730:	b2e4      	uxtb	r4, r4
  415732:	804c      	strh	r4, [r1, #2]
}
  415734:	bc30      	pop	{r4, r5}
  415736:	4770      	bx	lr

00415738 <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
  415738:	4603      	mov	r3, r0
  41573a:	b160      	cbz	r0, 415756 <ent_get_next+0x1e>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
  41573c:	3004      	adds	r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
  41573e:	681b      	ldr	r3, [r3, #0]
  415740:	eb00 0053 	add.w	r0, r0, r3, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  415744:	1d02      	adds	r2, r0, #4
  415746:	4b05      	ldr	r3, [pc, #20]	; (41575c <ent_get_next+0x24>)
  415748:	681b      	ldr	r3, [r3, #0]
  41574a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  41574e:	429a      	cmp	r2, r3
  415750:	bf28      	it	cs
  415752:	2000      	movcs	r0, #0
    }

    return next_e;
}
  415754:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
  415756:	4b01      	ldr	r3, [pc, #4]	; (41575c <ent_get_next+0x24>)
  415758:	6818      	ldr	r0, [r3, #0]
  41575a:	4770      	bx	lr
  41575c:	2040c734 	.word	0x2040c734

00415760 <ent_trunc>:
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  415760:	3103      	adds	r1, #3
  415762:	f021 0103 	bic.w	r1, r1, #3

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
  415766:	6803      	ldr	r3, [r0, #0]
  415768:	f3c3 035e 	ubfx	r3, r3, #1, #31
  41576c:	1d0a      	adds	r2, r1, #4
  41576e:	4293      	cmp	r3, r2
  415770:	d016      	beq.n	4157a0 <ent_trunc+0x40>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
  415772:	4299      	cmp	r1, r3
  415774:	d014      	beq.n	4157a0 <ent_trunc+0x40>
{
  415776:	b410      	push	{r4}
        uint8_t * e_data             = &e->first_data;
  415778:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
  41577a:	5c53      	ldrb	r3, [r2, r1]
  41577c:	f36f 0300 	bfc	r3, #0, #1
  415780:	5453      	strb	r3, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
  415782:	6803      	ldr	r3, [r0, #0]
  415784:	f3c3 035e 	ubfx	r3, r3, #1, #31
  415788:	3b04      	subs	r3, #4
  41578a:	1a5b      	subs	r3, r3, r1
  41578c:	5854      	ldr	r4, [r2, r1]
  41578e:	f363 045f 	bfi	r4, r3, #1, #31
  415792:	5054      	str	r4, [r2, r1]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
  415794:	6803      	ldr	r3, [r0, #0]
  415796:	f361 035f 	bfi	r3, r1, #1, #31
  41579a:	6003      	str	r3, [r0, #0]
    }
}
  41579c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4157a0:	4770      	bx	lr
	...

004157a4 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
  4157a4:	4b06      	ldr	r3, [pc, #24]	; (4157c0 <_lv_mem_init+0x1c>)
  4157a6:	4a07      	ldr	r2, [pc, #28]	; (4157c4 <_lv_mem_init+0x20>)
  4157a8:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
  4157aa:	781a      	ldrb	r2, [r3, #0]
  4157ac:	f36f 0200 	bfc	r2, #0, #1
  4157b0:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
  4157b2:	681a      	ldr	r2, [r3, #0]
  4157b4:	f647 71fc 	movw	r1, #32764	; 0x7ffc
  4157b8:	f361 025f 	bfi	r2, r1, #1, #31
  4157bc:	601a      	str	r2, [r3, #0]
  4157be:	4770      	bx	lr
  4157c0:	2040c738 	.word	0x2040c738
  4157c4:	2040c734 	.word	0x2040c734

004157c8 <lv_mem_alloc>:
{
  4157c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(size == 0) {
  4157cc:	b328      	cbz	r0, 41581a <lv_mem_alloc+0x52>
  4157ce:	4606      	mov	r6, r0
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  4157d0:	3603      	adds	r6, #3
  4157d2:	f026 0603 	bic.w	r6, r6, #3
    lv_mem_ent_t * e = NULL;
  4157d6:	2400      	movs	r4, #0
    void * alloc = NULL;
  4157d8:	4625      	mov	r5, r4
        e = ent_get_next(e);
  4157da:	4f19      	ldr	r7, [pc, #100]	; (415840 <lv_mem_alloc+0x78>)
        ent_trunc(e, size);
  4157dc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 415850 <lv_mem_alloc+0x88>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
  4157e0:	46a1      	mov	r9, r4
  4157e2:	e002      	b.n	4157ea <lv_mem_alloc+0x22>
  4157e4:	464d      	mov	r5, r9
  4157e6:	e000      	b.n	4157ea <lv_mem_alloc+0x22>
  4157e8:	464d      	mov	r5, r9
        e = ent_get_next(e);
  4157ea:	4620      	mov	r0, r4
  4157ec:	47b8      	blx	r7
        if(e != NULL) {
  4157ee:	4604      	mov	r4, r0
  4157f0:	b1b8      	cbz	r0, 415822 <lv_mem_alloc+0x5a>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
  4157f2:	7803      	ldrb	r3, [r0, #0]
  4157f4:	f013 0f01 	tst.w	r3, #1
  4157f8:	d1f4      	bne.n	4157e4 <lv_mem_alloc+0x1c>
  4157fa:	6803      	ldr	r3, [r0, #0]
  4157fc:	f3c3 035e 	ubfx	r3, r3, #1, #31
  415800:	429e      	cmp	r6, r3
  415802:	d8f1      	bhi.n	4157e8 <lv_mem_alloc+0x20>
        ent_trunc(e, size);
  415804:	4631      	mov	r1, r6
  415806:	47c0      	blx	r8
        e->header.s.used = 1;
  415808:	7823      	ldrb	r3, [r4, #0]
  41580a:	f043 0301 	orr.w	r3, r3, #1
  41580e:	4625      	mov	r5, r4
  415810:	f805 3b04 	strb.w	r3, [r5], #4
    } while(e != NULL && alloc == NULL);
  415814:	2d00      	cmp	r5, #0
  415816:	d0e8      	beq.n	4157ea <lv_mem_alloc+0x22>
  415818:	e005      	b.n	415826 <lv_mem_alloc+0x5e>
        return &zero_mem;
  41581a:	4d0a      	ldr	r5, [pc, #40]	; (415844 <lv_mem_alloc+0x7c>)
}
  41581c:	4628      	mov	r0, r5
  41581e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(alloc == NULL) {
  415822:	2d00      	cmp	r5, #0
  415824:	d0fa      	beq.n	41581c <lv_mem_alloc+0x54>
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
  415826:	4b08      	ldr	r3, [pc, #32]	; (415848 <lv_mem_alloc+0x80>)
  415828:	681b      	ldr	r3, [r3, #0]
  41582a:	429d      	cmp	r5, r3
  41582c:	d9f6      	bls.n	41581c <lv_mem_alloc+0x54>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
  41582e:	1af3      	subs	r3, r6, r3
  415830:	442b      	add	r3, r5
  415832:	4a06      	ldr	r2, [pc, #24]	; (41584c <lv_mem_alloc+0x84>)
  415834:	6812      	ldr	r2, [r2, #0]
  415836:	4293      	cmp	r3, r2
  415838:	d9f0      	bls.n	41581c <lv_mem_alloc+0x54>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
  41583a:	4a04      	ldr	r2, [pc, #16]	; (41584c <lv_mem_alloc+0x84>)
  41583c:	6013      	str	r3, [r2, #0]
  41583e:	e7ed      	b.n	41581c <lv_mem_alloc+0x54>
  415840:	00415739 	.word	0x00415739
  415844:	20414738 	.word	0x20414738
  415848:	2040c734 	.word	0x2040c734
  41584c:	2040c730 	.word	0x2040c730
  415850:	00415761 	.word	0x00415761

00415854 <lv_mem_defrag>:
{
  415854:	b538      	push	{r3, r4, r5, lr}
    e_free = ent_get_next(NULL);
  415856:	2000      	movs	r0, #0
  415858:	4b16      	ldr	r3, [pc, #88]	; (4158b4 <lv_mem_defrag+0x60>)
  41585a:	4798      	blx	r3
  41585c:	4604      	mov	r4, r0
        e_next = ent_get_next(e_free);
  41585e:	4d15      	ldr	r5, [pc, #84]	; (4158b4 <lv_mem_defrag+0x60>)
  415860:	e01b      	b.n	41589a <lv_mem_defrag+0x46>
  415862:	bd38      	pop	{r3, r4, r5, pc}
  415864:	4620      	mov	r0, r4
  415866:	47a8      	blx	r5
        while(e_next != NULL) {
  415868:	4601      	mov	r1, r0
  41586a:	b308      	cbz	r0, 4158b0 <lv_mem_defrag+0x5c>
            if(e_next->header.s.used == 0) {
  41586c:	7803      	ldrb	r3, [r0, #0]
  41586e:	f013 0f01 	tst.w	r3, #1
  415872:	d111      	bne.n	415898 <lv_mem_defrag+0x44>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
  415874:	6823      	ldr	r3, [r4, #0]
  415876:	f3c3 025e 	ubfx	r2, r3, #1, #31
  41587a:	3204      	adds	r2, #4
  41587c:	6808      	ldr	r0, [r1, #0]
  41587e:	eb02 0250 	add.w	r2, r2, r0, lsr #1
  415882:	f362 035f 	bfi	r3, r2, #1, #31
  415886:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
  415888:	4608      	mov	r0, r1
  41588a:	47a8      	blx	r5
        while(e_next != NULL) {
  41588c:	4601      	mov	r1, r0
  41588e:	b170      	cbz	r0, 4158ae <lv_mem_defrag+0x5a>
            if(e_next->header.s.used == 0) {
  415890:	780b      	ldrb	r3, [r1, #0]
  415892:	f013 0f01 	tst.w	r3, #1
  415896:	d0ed      	beq.n	415874 <lv_mem_defrag+0x20>
{
  415898:	460c      	mov	r4, r1
        while(e_free != NULL) {
  41589a:	2c00      	cmp	r4, #0
  41589c:	d0e1      	beq.n	415862 <lv_mem_defrag+0xe>
            if(e_free->header.s.used != 0) {
  41589e:	7823      	ldrb	r3, [r4, #0]
  4158a0:	f013 0f01 	tst.w	r3, #1
  4158a4:	d0de      	beq.n	415864 <lv_mem_defrag+0x10>
                e_free = ent_get_next(e_free);
  4158a6:	4620      	mov	r0, r4
  4158a8:	47a8      	blx	r5
  4158aa:	4604      	mov	r4, r0
  4158ac:	e7f5      	b.n	41589a <lv_mem_defrag+0x46>
  4158ae:	bd38      	pop	{r3, r4, r5, pc}
  4158b0:	bd38      	pop	{r3, r4, r5, pc}
  4158b2:	bf00      	nop
  4158b4:	00415739 	.word	0x00415739

004158b8 <lv_mem_free>:
    if(data == NULL) return;
  4158b8:	2800      	cmp	r0, #0
  4158ba:	d038      	beq.n	41592e <lv_mem_free+0x76>
{
  4158bc:	b538      	push	{r3, r4, r5, lr}
  4158be:	4604      	mov	r4, r0
    if(data == NULL) return;
  4158c0:	4b1b      	ldr	r3, [pc, #108]	; (415930 <lv_mem_free+0x78>)
  4158c2:	4298      	cmp	r0, r3
  4158c4:	d032      	beq.n	41592c <lv_mem_free+0x74>
    e->header.s.used = 0;
  4158c6:	f810 3c04 	ldrb.w	r3, [r0, #-4]
  4158ca:	f36f 0300 	bfc	r3, #0, #1
  4158ce:	f800 3c04 	strb.w	r3, [r0, #-4]
    full_defrag_cnt++;
  4158d2:	4a18      	ldr	r2, [pc, #96]	; (415934 <lv_mem_free+0x7c>)
  4158d4:	8813      	ldrh	r3, [r2, #0]
  4158d6:	3301      	adds	r3, #1
  4158d8:	b29b      	uxth	r3, r3
  4158da:	8013      	strh	r3, [r2, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
  4158dc:	2b0f      	cmp	r3, #15
  4158de:	d820      	bhi.n	415922 <lv_mem_free+0x6a>
        e_next = ent_get_next(e);
  4158e0:	3804      	subs	r0, #4
  4158e2:	4b15      	ldr	r3, [pc, #84]	; (415938 <lv_mem_free+0x80>)
  4158e4:	4798      	blx	r3
        while(e_next != NULL) {
  4158e6:	4601      	mov	r1, r0
  4158e8:	b300      	cbz	r0, 41592c <lv_mem_free+0x74>
            if(e_next->header.s.used == 0) {
  4158ea:	7803      	ldrb	r3, [r0, #0]
  4158ec:	f013 0f01 	tst.w	r3, #1
  4158f0:	d115      	bne.n	41591e <lv_mem_free+0x66>
            e_next = ent_get_next(e_next);
  4158f2:	4d11      	ldr	r5, [pc, #68]	; (415938 <lv_mem_free+0x80>)
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
  4158f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4158f8:	f3c3 025e 	ubfx	r2, r3, #1, #31
  4158fc:	3204      	adds	r2, #4
  4158fe:	6808      	ldr	r0, [r1, #0]
  415900:	eb02 0250 	add.w	r2, r2, r0, lsr #1
  415904:	f362 035f 	bfi	r3, r2, #1, #31
  415908:	f844 3c04 	str.w	r3, [r4, #-4]
            e_next = ent_get_next(e_next);
  41590c:	4608      	mov	r0, r1
  41590e:	47a8      	blx	r5
        while(e_next != NULL) {
  415910:	4601      	mov	r1, r0
  415912:	b128      	cbz	r0, 415920 <lv_mem_free+0x68>
            if(e_next->header.s.used == 0) {
  415914:	780b      	ldrb	r3, [r1, #0]
  415916:	f013 0f01 	tst.w	r3, #1
  41591a:	d0eb      	beq.n	4158f4 <lv_mem_free+0x3c>
  41591c:	bd38      	pop	{r3, r4, r5, pc}
  41591e:	bd38      	pop	{r3, r4, r5, pc}
  415920:	bd38      	pop	{r3, r4, r5, pc}
        full_defrag_cnt = 0;
  415922:	2200      	movs	r2, #0
  415924:	4b03      	ldr	r3, [pc, #12]	; (415934 <lv_mem_free+0x7c>)
  415926:	801a      	strh	r2, [r3, #0]
        lv_mem_defrag();
  415928:	4b04      	ldr	r3, [pc, #16]	; (41593c <lv_mem_free+0x84>)
  41592a:	4798      	blx	r3
  41592c:	bd38      	pop	{r3, r4, r5, pc}
  41592e:	4770      	bx	lr
  415930:	20414738 	.word	0x20414738
  415934:	2040c70c 	.word	0x2040c70c
  415938:	00415739 	.word	0x00415739
  41593c:	00415855 	.word	0x00415855

00415940 <_lv_mem_get_size>:
    if(data == &zero_mem) return 0;
  415940:	4b05      	ldr	r3, [pc, #20]	; (415958 <_lv_mem_get_size+0x18>)
  415942:	4298      	cmp	r0, r3
  415944:	d005      	beq.n	415952 <_lv_mem_get_size+0x12>
  415946:	b120      	cbz	r0, 415952 <_lv_mem_get_size+0x12>
    return e->header.s.d_size;
  415948:	f850 0c04 	ldr.w	r0, [r0, #-4]
  41594c:	f3c0 005e 	ubfx	r0, r0, #1, #31
  415950:	4770      	bx	lr
  415952:	2000      	movs	r0, #0
}
  415954:	4770      	bx	lr
  415956:	bf00      	nop
  415958:	20414738 	.word	0x20414738

0041595c <_lv_mem_buf_release>:
        if(mem_buf_small[i].p == p) {
  41595c:	4b16      	ldr	r3, [pc, #88]	; (4159b8 <_lv_mem_buf_release+0x5c>)
  41595e:	681b      	ldr	r3, [r3, #0]
  415960:	4298      	cmp	r0, r3
  415962:	d01e      	beq.n	4159a2 <_lv_mem_buf_release+0x46>
  415964:	4b14      	ldr	r3, [pc, #80]	; (4159b8 <_lv_mem_buf_release+0x5c>)
  415966:	689b      	ldr	r3, [r3, #8]
  415968:	4283      	cmp	r3, r0
  41596a:	d011      	beq.n	415990 <_lv_mem_buf_release+0x34>
{
  41596c:	b410      	push	{r4}
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
  41596e:	4b13      	ldr	r3, [pc, #76]	; (4159bc <_lv_mem_buf_release+0x60>)
  415970:	681b      	ldr	r3, [r3, #0]
  415972:	4298      	cmp	r0, r3
  415974:	d017      	beq.n	4159a6 <_lv_mem_buf_release+0x4a>
  415976:	2301      	movs	r3, #1
  415978:	4910      	ldr	r1, [pc, #64]	; (4159bc <_lv_mem_buf_release+0x60>)
  41597a:	461c      	mov	r4, r3
  41597c:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
  415980:	4290      	cmp	r0, r2
  415982:	d011      	beq.n	4159a8 <_lv_mem_buf_release+0x4c>
  415984:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  415986:	2b10      	cmp	r3, #16
  415988:	d1f7      	bne.n	41597a <_lv_mem_buf_release+0x1e>
}
  41598a:	f85d 4b04 	ldr.w	r4, [sp], #4
  41598e:	4770      	bx	lr
        if(mem_buf_small[i].p == p) {
  415990:	2201      	movs	r2, #1
            mem_buf_small[i].used = 0;
  415992:	4b09      	ldr	r3, [pc, #36]	; (4159b8 <_lv_mem_buf_release+0x5c>)
  415994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  415998:	799a      	ldrb	r2, [r3, #6]
  41599a:	f36f 0200 	bfc	r2, #0, #1
  41599e:	719a      	strb	r2, [r3, #6]
            return;
  4159a0:	4770      	bx	lr
        if(mem_buf_small[i].p == p) {
  4159a2:	2200      	movs	r2, #0
  4159a4:	e7f5      	b.n	415992 <_lv_mem_buf_release+0x36>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
  4159a6:	2400      	movs	r4, #0
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  4159a8:	4b04      	ldr	r3, [pc, #16]	; (4159bc <_lv_mem_buf_release+0x60>)
  4159aa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  4159ae:	79a3      	ldrb	r3, [r4, #6]
  4159b0:	f36f 0300 	bfc	r3, #0, #1
  4159b4:	71a3      	strb	r3, [r4, #6]
            return;
  4159b6:	e7e8      	b.n	41598a <_lv_mem_buf_release+0x2e>
  4159b8:	20400070 	.word	0x20400070
  4159bc:	2043a178 	.word	0x2043a178

004159c0 <_lv_mem_buf_free_all>:
{
  4159c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        mem_buf_small[i].used = 0;
  4159c4:	4b12      	ldr	r3, [pc, #72]	; (415a10 <_lv_mem_buf_free_all+0x50>)
  4159c6:	799a      	ldrb	r2, [r3, #6]
  4159c8:	f36f 0200 	bfc	r2, #0, #1
  4159cc:	719a      	strb	r2, [r3, #6]
  4159ce:	7b9a      	ldrb	r2, [r3, #14]
  4159d0:	f36f 0200 	bfc	r2, #0, #1
  4159d4:	739a      	strb	r2, [r3, #14]
  4159d6:	4c0f      	ldr	r4, [pc, #60]	; (415a14 <_lv_mem_buf_free_all+0x54>)
  4159d8:	2500      	movs	r5, #0
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
  4159da:	f8df 803c 	ldr.w	r8, [pc, #60]	; 415a18 <_lv_mem_buf_free_all+0x58>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
  4159de:	462e      	mov	r6, r5
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  4159e0:	1f27      	subs	r7, r4, #4
  4159e2:	e003      	b.n	4159ec <_lv_mem_buf_free_all+0x2c>
  4159e4:	3501      	adds	r5, #1
  4159e6:	3408      	adds	r4, #8
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  4159e8:	2d10      	cmp	r5, #16
  4159ea:	d00e      	beq.n	415a0a <_lv_mem_buf_free_all+0x4a>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
  4159ec:	f854 0c04 	ldr.w	r0, [r4, #-4]
  4159f0:	2800      	cmp	r0, #0
  4159f2:	d0f7      	beq.n	4159e4 <_lv_mem_buf_free_all+0x24>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
  4159f4:	47c0      	blx	r8
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
  4159f6:	f844 6c04 	str.w	r6, [r4, #-4]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  4159fa:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
  4159fe:	799a      	ldrb	r2, [r3, #6]
  415a00:	f366 0200 	bfi	r2, r6, #0, #1
  415a04:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
  415a06:	8026      	strh	r6, [r4, #0]
  415a08:	e7ec      	b.n	4159e4 <_lv_mem_buf_free_all+0x24>
}
  415a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415a0e:	bf00      	nop
  415a10:	20400070 	.word	0x20400070
  415a14:	2043a17c 	.word	0x2043a17c
  415a18:	004158b9 	.word	0x004158b9

00415a1c <_lv_memcpy>:
{
  415a1c:	b4f0      	push	{r4, r5, r6, r7}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
  415a1e:	f000 0703 	and.w	r7, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
  415a22:	f001 0403 	and.w	r4, r1, #3
    if(s_align != d_align) {
  415a26:	42a7      	cmp	r7, r4
  415a28:	f000 80a6 	beq.w	415b78 <_lv_memcpy+0x15c>
        while(len > 32) {
  415a2c:	2a20      	cmp	r2, #32
  415a2e:	f240 80a1 	bls.w	415b74 <_lv_memcpy+0x158>
  415a32:	f100 0420 	add.w	r4, r0, #32
  415a36:	f101 0320 	add.w	r3, r1, #32
  415a3a:	4615      	mov	r5, r2
            REPEAT8(COPY8);
  415a3c:	f813 6c20 	ldrb.w	r6, [r3, #-32]
  415a40:	f804 6c20 	strb.w	r6, [r4, #-32]
  415a44:	f813 6c1f 	ldrb.w	r6, [r3, #-31]
  415a48:	f804 6c1f 	strb.w	r6, [r4, #-31]
  415a4c:	f813 6c1e 	ldrb.w	r6, [r3, #-30]
  415a50:	f804 6c1e 	strb.w	r6, [r4, #-30]
  415a54:	f813 6c1d 	ldrb.w	r6, [r3, #-29]
  415a58:	f804 6c1d 	strb.w	r6, [r4, #-29]
  415a5c:	f813 6c1c 	ldrb.w	r6, [r3, #-28]
  415a60:	f804 6c1c 	strb.w	r6, [r4, #-28]
  415a64:	f813 6c1b 	ldrb.w	r6, [r3, #-27]
  415a68:	f804 6c1b 	strb.w	r6, [r4, #-27]
  415a6c:	f813 6c1a 	ldrb.w	r6, [r3, #-26]
  415a70:	f804 6c1a 	strb.w	r6, [r4, #-26]
  415a74:	f813 6c19 	ldrb.w	r6, [r3, #-25]
  415a78:	f804 6c19 	strb.w	r6, [r4, #-25]
            REPEAT8(COPY8);
  415a7c:	f813 6c18 	ldrb.w	r6, [r3, #-24]
  415a80:	f804 6c18 	strb.w	r6, [r4, #-24]
  415a84:	f813 6c17 	ldrb.w	r6, [r3, #-23]
  415a88:	f804 6c17 	strb.w	r6, [r4, #-23]
  415a8c:	f813 6c16 	ldrb.w	r6, [r3, #-22]
  415a90:	f804 6c16 	strb.w	r6, [r4, #-22]
  415a94:	f813 6c15 	ldrb.w	r6, [r3, #-21]
  415a98:	f804 6c15 	strb.w	r6, [r4, #-21]
  415a9c:	f813 6c14 	ldrb.w	r6, [r3, #-20]
  415aa0:	f804 6c14 	strb.w	r6, [r4, #-20]
  415aa4:	f813 6c13 	ldrb.w	r6, [r3, #-19]
  415aa8:	f804 6c13 	strb.w	r6, [r4, #-19]
  415aac:	f813 6c12 	ldrb.w	r6, [r3, #-18]
  415ab0:	f804 6c12 	strb.w	r6, [r4, #-18]
  415ab4:	f813 6c11 	ldrb.w	r6, [r3, #-17]
  415ab8:	f804 6c11 	strb.w	r6, [r4, #-17]
            REPEAT8(COPY8);
  415abc:	f813 6c10 	ldrb.w	r6, [r3, #-16]
  415ac0:	f804 6c10 	strb.w	r6, [r4, #-16]
  415ac4:	f813 6c0f 	ldrb.w	r6, [r3, #-15]
  415ac8:	f804 6c0f 	strb.w	r6, [r4, #-15]
  415acc:	f813 6c0e 	ldrb.w	r6, [r3, #-14]
  415ad0:	f804 6c0e 	strb.w	r6, [r4, #-14]
  415ad4:	f813 6c0d 	ldrb.w	r6, [r3, #-13]
  415ad8:	f804 6c0d 	strb.w	r6, [r4, #-13]
  415adc:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
  415ae0:	f804 6c0c 	strb.w	r6, [r4, #-12]
  415ae4:	f813 6c0b 	ldrb.w	r6, [r3, #-11]
  415ae8:	f804 6c0b 	strb.w	r6, [r4, #-11]
  415aec:	f813 6c0a 	ldrb.w	r6, [r3, #-10]
  415af0:	f804 6c0a 	strb.w	r6, [r4, #-10]
  415af4:	f813 6c09 	ldrb.w	r6, [r3, #-9]
  415af8:	f804 6c09 	strb.w	r6, [r4, #-9]
            REPEAT8(COPY8);
  415afc:	f813 6c08 	ldrb.w	r6, [r3, #-8]
  415b00:	f804 6c08 	strb.w	r6, [r4, #-8]
  415b04:	f813 6c07 	ldrb.w	r6, [r3, #-7]
  415b08:	f804 6c07 	strb.w	r6, [r4, #-7]
  415b0c:	f813 6c06 	ldrb.w	r6, [r3, #-6]
  415b10:	f804 6c06 	strb.w	r6, [r4, #-6]
  415b14:	f813 6c05 	ldrb.w	r6, [r3, #-5]
  415b18:	f804 6c05 	strb.w	r6, [r4, #-5]
  415b1c:	f813 6c04 	ldrb.w	r6, [r3, #-4]
  415b20:	f804 6c04 	strb.w	r6, [r4, #-4]
  415b24:	f813 6c03 	ldrb.w	r6, [r3, #-3]
  415b28:	f804 6c03 	strb.w	r6, [r4, #-3]
  415b2c:	f813 6c02 	ldrb.w	r6, [r3, #-2]
  415b30:	f804 6c02 	strb.w	r6, [r4, #-2]
  415b34:	f813 6c01 	ldrb.w	r6, [r3, #-1]
  415b38:	f804 6c01 	strb.w	r6, [r4, #-1]
            len -= 32;
  415b3c:	3d20      	subs	r5, #32
  415b3e:	3420      	adds	r4, #32
  415b40:	3320      	adds	r3, #32
        while(len > 32) {
  415b42:	2d20      	cmp	r5, #32
  415b44:	f63f af7a 	bhi.w	415a3c <_lv_memcpy+0x20>
  415b48:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
  415b4c:	f025 041f 	bic.w	r4, r5, #31
  415b50:	3420      	adds	r4, #32
  415b52:	1903      	adds	r3, r0, r4
  415b54:	4421      	add	r1, r4
  415b56:	3a20      	subs	r2, #32
  415b58:	f025 051f 	bic.w	r5, r5, #31
  415b5c:	1b52      	subs	r2, r2, r5
        while(len) {
  415b5e:	b13a      	cbz	r2, 415b70 <_lv_memcpy+0x154>
  415b60:	3901      	subs	r1, #1
  415b62:	441a      	add	r2, r3
            COPY8
  415b64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  415b68:	f803 4b01 	strb.w	r4, [r3], #1
        while(len) {
  415b6c:	4293      	cmp	r3, r2
  415b6e:	d1f9      	bne.n	415b64 <_lv_memcpy+0x148>
}
  415b70:	bcf0      	pop	{r4, r5, r6, r7}
  415b72:	4770      	bx	lr
        while(len > 32) {
  415b74:	4603      	mov	r3, r0
  415b76:	e7f2      	b.n	415b5e <_lv_memcpy+0x142>
    if(d_align) {
  415b78:	b1a7      	cbz	r7, 415ba4 <_lv_memcpy+0x188>
        while(d_align && len) {
  415b7a:	f1c7 0704 	rsb	r7, r7, #4
  415b7e:	2a00      	cmp	r2, #0
  415b80:	d069      	beq.n	415c56 <_lv_memcpy+0x23a>
  415b82:	460c      	mov	r4, r1
  415b84:	4603      	mov	r3, r0
  415b86:	4616      	mov	r6, r2
            COPY8;
  415b88:	f814 1b01 	ldrb.w	r1, [r4], #1
  415b8c:	f803 1b01 	strb.w	r1, [r3], #1
  415b90:	4621      	mov	r1, r4
            len--;
  415b92:	3e01      	subs	r6, #1
        while(d_align && len) {
  415b94:	1ab5      	subs	r5, r6, r2
  415b96:	42fd      	cmn	r5, r7
  415b98:	d001      	beq.n	415b9e <_lv_memcpy+0x182>
  415b9a:	2e00      	cmp	r6, #0
  415b9c:	d1f4      	bne.n	415b88 <_lv_memcpy+0x16c>
            COPY8;
  415b9e:	461d      	mov	r5, r3
            len--;
  415ba0:	4632      	mov	r2, r6
  415ba2:	e000      	b.n	415ba6 <_lv_memcpy+0x18a>
    uint8_t * d8 = dst;
  415ba4:	4605      	mov	r5, r0
    while(len > 32) {
  415ba6:	2a20      	cmp	r2, #32
  415ba8:	d934      	bls.n	415c14 <_lv_memcpy+0x1f8>
  415baa:	f105 0420 	add.w	r4, r5, #32
  415bae:	f101 0320 	add.w	r3, r1, #32
  415bb2:	4616      	mov	r6, r2
        REPEAT8(COPY32)
  415bb4:	f853 7c20 	ldr.w	r7, [r3, #-32]
  415bb8:	f844 7c20 	str.w	r7, [r4, #-32]
  415bbc:	f853 7c1c 	ldr.w	r7, [r3, #-28]
  415bc0:	f844 7c1c 	str.w	r7, [r4, #-28]
  415bc4:	f853 7c18 	ldr.w	r7, [r3, #-24]
  415bc8:	f844 7c18 	str.w	r7, [r4, #-24]
  415bcc:	f853 7c14 	ldr.w	r7, [r3, #-20]
  415bd0:	f844 7c14 	str.w	r7, [r4, #-20]
  415bd4:	f853 7c10 	ldr.w	r7, [r3, #-16]
  415bd8:	f844 7c10 	str.w	r7, [r4, #-16]
  415bdc:	f853 7c0c 	ldr.w	r7, [r3, #-12]
  415be0:	f844 7c0c 	str.w	r7, [r4, #-12]
  415be4:	f853 7c08 	ldr.w	r7, [r3, #-8]
  415be8:	f844 7c08 	str.w	r7, [r4, #-8]
  415bec:	f853 7c04 	ldr.w	r7, [r3, #-4]
  415bf0:	f844 7c04 	str.w	r7, [r4, #-4]
        len -= 32;
  415bf4:	3e20      	subs	r6, #32
  415bf6:	3420      	adds	r4, #32
  415bf8:	3320      	adds	r3, #32
    while(len > 32) {
  415bfa:	2e20      	cmp	r6, #32
  415bfc:	d8da      	bhi.n	415bb4 <_lv_memcpy+0x198>
  415bfe:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
  415c02:	f023 041f 	bic.w	r4, r3, #31
  415c06:	3420      	adds	r4, #32
  415c08:	4425      	add	r5, r4
  415c0a:	4421      	add	r1, r4
  415c0c:	3a20      	subs	r2, #32
  415c0e:	f023 031f 	bic.w	r3, r3, #31
  415c12:	1ad2      	subs	r2, r2, r3
    while(len > 4) {
  415c14:	2a04      	cmp	r2, #4
  415c16:	d920      	bls.n	415c5a <_lv_memcpy+0x23e>
  415c18:	1f0e      	subs	r6, r1, #4
  415c1a:	462c      	mov	r4, r5
  415c1c:	4613      	mov	r3, r2
        COPY32;
  415c1e:	f856 7f04 	ldr.w	r7, [r6, #4]!
  415c22:	f844 7b04 	str.w	r7, [r4], #4
        len -= 4;
  415c26:	3b04      	subs	r3, #4
    while(len > 4) {
  415c28:	2b04      	cmp	r3, #4
  415c2a:	d8f8      	bhi.n	415c1e <_lv_memcpy+0x202>
  415c2c:	1f54      	subs	r4, r2, #5
  415c2e:	f024 0303 	bic.w	r3, r4, #3
  415c32:	3304      	adds	r3, #4
  415c34:	3a04      	subs	r2, #4
  415c36:	f024 0403 	bic.w	r4, r4, #3
  415c3a:	1b12      	subs	r2, r2, r4
        COPY32;
  415c3c:	4419      	add	r1, r3
  415c3e:	442b      	add	r3, r5
    while(len) {
  415c40:	2a00      	cmp	r2, #0
  415c42:	d095      	beq.n	415b70 <_lv_memcpy+0x154>
  415c44:	3901      	subs	r1, #1
  415c46:	441a      	add	r2, r3
        COPY8
  415c48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  415c4c:	f803 4b01 	strb.w	r4, [r3], #1
    while(len) {
  415c50:	4293      	cmp	r3, r2
  415c52:	d1f9      	bne.n	415c48 <_lv_memcpy+0x22c>
  415c54:	e78c      	b.n	415b70 <_lv_memcpy+0x154>
    uint8_t * d8 = dst;
  415c56:	4605      	mov	r5, r0
  415c58:	e7a5      	b.n	415ba6 <_lv_memcpy+0x18a>
    while(len > 4) {
  415c5a:	462b      	mov	r3, r5
  415c5c:	e7f0      	b.n	415c40 <_lv_memcpy+0x224>
	...

00415c60 <lv_mem_realloc>:
{
  415c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
  415c62:	3103      	adds	r1, #3
  415c64:	f021 0503 	bic.w	r5, r1, #3
    if(data_p != NULL) {
  415c68:	4604      	mov	r4, r0
  415c6a:	b138      	cbz	r0, 415c7c <lv_mem_realloc+0x1c>
        if(e->header.s.used == 0) {
  415c6c:	f810 3c04 	ldrb.w	r3, [r0, #-4]
  415c70:	f003 0301 	and.w	r3, r3, #1
            data_p = NULL;
  415c74:	2b00      	cmp	r3, #0
  415c76:	bf14      	ite	ne
  415c78:	4604      	movne	r4, r0
  415c7a:	2400      	moveq	r4, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
  415c7c:	4620      	mov	r0, r4
  415c7e:	4b11      	ldr	r3, [pc, #68]	; (415cc4 <lv_mem_realloc+0x64>)
  415c80:	4798      	blx	r3
  415c82:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  415c84:	4285      	cmp	r5, r0
  415c86:	d01b      	beq.n	415cc0 <lv_mem_realloc+0x60>
    if(new_size < old_size) {
  415c88:	d30c      	bcc.n	415ca4 <lv_mem_realloc+0x44>
    new_p = lv_mem_alloc(new_size);
  415c8a:	4628      	mov	r0, r5
  415c8c:	4b0e      	ldr	r3, [pc, #56]	; (415cc8 <lv_mem_realloc+0x68>)
  415c8e:	4798      	blx	r3
    if(new_p == NULL) {
  415c90:	4607      	mov	r7, r0
  415c92:	b128      	cbz	r0, 415ca0 <lv_mem_realloc+0x40>
    if(data_p != NULL) {
  415c94:	b124      	cbz	r4, 415ca0 <lv_mem_realloc+0x40>
        if(old_size != 0 && new_size != 0) {
  415c96:	b106      	cbz	r6, 415c9a <lv_mem_realloc+0x3a>
  415c98:	b955      	cbnz	r5, 415cb0 <lv_mem_realloc+0x50>
        lv_mem_free(data_p);
  415c9a:	4620      	mov	r0, r4
  415c9c:	4b0b      	ldr	r3, [pc, #44]	; (415ccc <lv_mem_realloc+0x6c>)
  415c9e:	4798      	blx	r3
}
  415ca0:	4638      	mov	r0, r7
  415ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ent_trunc(e, new_size);
  415ca4:	4629      	mov	r1, r5
  415ca6:	1f20      	subs	r0, r4, #4
  415ca8:	4b09      	ldr	r3, [pc, #36]	; (415cd0 <lv_mem_realloc+0x70>)
  415caa:	4798      	blx	r3
        return &e->first_data;
  415cac:	4627      	mov	r7, r4
  415cae:	e7f7      	b.n	415ca0 <lv_mem_realloc+0x40>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
  415cb0:	462a      	mov	r2, r5
  415cb2:	42b5      	cmp	r5, r6
  415cb4:	bf28      	it	cs
  415cb6:	4632      	movcs	r2, r6
  415cb8:	4621      	mov	r1, r4
  415cba:	4b06      	ldr	r3, [pc, #24]	; (415cd4 <lv_mem_realloc+0x74>)
  415cbc:	4798      	blx	r3
  415cbe:	e7ec      	b.n	415c9a <lv_mem_realloc+0x3a>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  415cc0:	4627      	mov	r7, r4
  415cc2:	e7ed      	b.n	415ca0 <lv_mem_realloc+0x40>
  415cc4:	00415941 	.word	0x00415941
  415cc8:	004157c9 	.word	0x004157c9
  415ccc:	004158b9 	.word	0x004158b9
  415cd0:	00415761 	.word	0x00415761
  415cd4:	00415a1d 	.word	0x00415a1d

00415cd8 <_lv_mem_buf_get>:
    if(size == 0) return NULL;
  415cd8:	2800      	cmp	r0, #0
  415cda:	f000 8082 	beq.w	415de2 <_lv_mem_buf_get+0x10a>
{
  415cde:	b570      	push	{r4, r5, r6, lr}
  415ce0:	4606      	mov	r6, r0
    if(size <= MEM_BUF_SMALL_SIZE) {
  415ce2:	2810      	cmp	r0, #16
  415ce4:	d809      	bhi.n	415cfa <_lv_mem_buf_get+0x22>
            if(mem_buf_small[i].used == 0) {
  415ce6:	4b40      	ldr	r3, [pc, #256]	; (415de8 <_lv_mem_buf_get+0x110>)
  415ce8:	799b      	ldrb	r3, [r3, #6]
  415cea:	f013 0f01 	tst.w	r3, #1
  415cee:	d015      	beq.n	415d1c <_lv_mem_buf_get+0x44>
  415cf0:	4b3d      	ldr	r3, [pc, #244]	; (415de8 <_lv_mem_buf_get+0x110>)
  415cf2:	7b9b      	ldrb	r3, [r3, #14]
  415cf4:	f013 0f01 	tst.w	r3, #1
  415cf8:	d005      	beq.n	415d06 <_lv_mem_buf_get+0x2e>
  415cfa:	4a3c      	ldr	r2, [pc, #240]	; (415dec <_lv_mem_buf_get+0x114>)
  415cfc:	2300      	movs	r3, #0
  415cfe:	f04f 35ff 	mov.w	r5, #4294967295
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
  415d02:	4614      	mov	r4, r2
  415d04:	e01b      	b.n	415d3e <_lv_mem_buf_get+0x66>
            if(mem_buf_small[i].used == 0) {
  415d06:	2301      	movs	r3, #1
                mem_buf_small[i].used = 1;
  415d08:	4937      	ldr	r1, [pc, #220]	; (415de8 <_lv_mem_buf_get+0x110>)
  415d0a:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  415d0e:	7982      	ldrb	r2, [r0, #6]
  415d10:	f042 0201 	orr.w	r2, r2, #1
  415d14:	7182      	strb	r2, [r0, #6]
                return mem_buf_small[i].p;
  415d16:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
  415d1a:	e02f      	b.n	415d7c <_lv_mem_buf_get+0xa4>
            if(mem_buf_small[i].used == 0) {
  415d1c:	2300      	movs	r3, #0
  415d1e:	e7f3      	b.n	415d08 <_lv_mem_buf_get+0x30>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  415d20:	4a32      	ldr	r2, [pc, #200]	; (415dec <_lv_mem_buf_get+0x114>)
  415d22:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  415d26:	798b      	ldrb	r3, [r1, #6]
  415d28:	f043 0301 	orr.w	r3, r3, #1
  415d2c:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
  415d2e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
  415d32:	e023      	b.n	415d7c <_lv_mem_buf_get+0xa4>
                i_guess = i;
  415d34:	b25d      	sxtb	r5, r3
  415d36:	3301      	adds	r3, #1
  415d38:	3208      	adds	r2, #8
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  415d3a:	2b10      	cmp	r3, #16
  415d3c:	d013      	beq.n	415d66 <_lv_mem_buf_get+0x8e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
  415d3e:	4618      	mov	r0, r3
  415d40:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
  415d44:	7989      	ldrb	r1, [r1, #6]
  415d46:	f011 0f01 	tst.w	r1, #1
  415d4a:	d1f4      	bne.n	415d36 <_lv_mem_buf_get+0x5e>
  415d4c:	8891      	ldrh	r1, [r2, #4]
  415d4e:	428e      	cmp	r6, r1
  415d50:	d8f1      	bhi.n	415d36 <_lv_mem_buf_get+0x5e>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
  415d52:	d0e5      	beq.n	415d20 <_lv_mem_buf_get+0x48>
            else if(i_guess < 0) {
  415d54:	2d00      	cmp	r5, #0
  415d56:	dbed      	blt.n	415d34 <_lv_mem_buf_get+0x5c>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
  415d58:	eb04 00c5 	add.w	r0, r4, r5, lsl #3
  415d5c:	8880      	ldrh	r0, [r0, #4]
  415d5e:	4288      	cmp	r0, r1
                i_guess = i;
  415d60:	bf88      	it	hi
  415d62:	b25d      	sxtbhi	r5, r3
  415d64:	e7e7      	b.n	415d36 <_lv_mem_buf_get+0x5e>
    if(i_guess >= 0) {
  415d66:	2d00      	cmp	r5, #0
  415d68:	db0a      	blt.n	415d80 <_lv_mem_buf_get+0xa8>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
  415d6a:	4a20      	ldr	r2, [pc, #128]	; (415dec <_lv_mem_buf_get+0x114>)
  415d6c:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
  415d70:	798b      	ldrb	r3, [r1, #6]
  415d72:	f043 0301 	orr.w	r3, r3, #1
  415d76:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
  415d78:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
}
  415d7c:	4618      	mov	r0, r3
  415d7e:	bd70      	pop	{r4, r5, r6, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
  415d80:	4b1a      	ldr	r3, [pc, #104]	; (415dec <_lv_mem_buf_get+0x114>)
  415d82:	799b      	ldrb	r3, [r3, #6]
  415d84:	f013 0f01 	tst.w	r3, #1
  415d88:	d011      	beq.n	415dae <_lv_mem_buf_get+0xd6>
  415d8a:	2301      	movs	r3, #1
  415d8c:	4a17      	ldr	r2, [pc, #92]	; (415dec <_lv_mem_buf_get+0x114>)
  415d8e:	461c      	mov	r4, r3
  415d90:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  415d94:	7989      	ldrb	r1, [r1, #6]
  415d96:	f011 0f01 	tst.w	r1, #1
  415d9a:	d009      	beq.n	415db0 <_lv_mem_buf_get+0xd8>
  415d9c:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  415d9e:	2b10      	cmp	r3, #16
  415da0:	d1f5      	bne.n	415d8e <_lv_mem_buf_get+0xb6>
    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
  415da2:	2200      	movs	r2, #0
  415da4:	2300      	movs	r3, #0
  415da6:	4812      	ldr	r0, [pc, #72]	; (415df0 <_lv_mem_buf_get+0x118>)
  415da8:	4912      	ldr	r1, [pc, #72]	; (415df4 <_lv_mem_buf_get+0x11c>)
  415daa:	4788      	blx	r1
  415dac:	e7fe      	b.n	415dac <_lv_mem_buf_get+0xd4>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
  415dae:	2400      	movs	r4, #0
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
  415db0:	4631      	mov	r1, r6
  415db2:	4b0e      	ldr	r3, [pc, #56]	; (415dec <_lv_mem_buf_get+0x114>)
  415db4:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  415db8:	4b0f      	ldr	r3, [pc, #60]	; (415df8 <_lv_mem_buf_get+0x120>)
  415dba:	4798      	blx	r3
            if(buf == NULL) {
  415dbc:	4603      	mov	r3, r0
  415dbe:	b150      	cbz	r0, 415dd6 <_lv_mem_buf_get+0xfe>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  415dc0:	480a      	ldr	r0, [pc, #40]	; (415dec <_lv_mem_buf_get+0x114>)
  415dc2:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
  415dc6:	7991      	ldrb	r1, [r2, #6]
  415dc8:	f041 0101 	orr.w	r1, r1, #1
  415dcc:	7191      	strb	r1, [r2, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
  415dce:	8096      	strh	r6, [r2, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
  415dd0:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
  415dd4:	e7d2      	b.n	415d7c <_lv_mem_buf_get+0xa4>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
  415dd6:	2200      	movs	r2, #0
  415dd8:	2300      	movs	r3, #0
  415dda:	4808      	ldr	r0, [pc, #32]	; (415dfc <_lv_mem_buf_get+0x124>)
  415ddc:	4905      	ldr	r1, [pc, #20]	; (415df4 <_lv_mem_buf_get+0x11c>)
  415dde:	4788      	blx	r1
  415de0:	e7fe      	b.n	415de0 <_lv_mem_buf_get+0x108>
    if(size == 0) return NULL;
  415de2:	2300      	movs	r3, #0
}
  415de4:	4618      	mov	r0, r3
  415de6:	4770      	bx	lr
  415de8:	20400070 	.word	0x20400070
  415dec:	2043a178 	.word	0x2043a178
  415df0:	00430684 	.word	0x00430684
  415df4:	004150f9 	.word	0x004150f9
  415df8:	00415c61 	.word	0x00415c61
  415dfc:	00430630 	.word	0x00430630

00415e00 <_lv_memset>:
{
  415e00:	b430      	push	{r4, r5}
    if(d_align) {
  415e02:	f010 0503 	ands.w	r5, r0, #3
  415e06:	d00c      	beq.n	415e22 <_lv_memset+0x22>
        while(d_align && len) {
  415e08:	f1c5 0504 	rsb	r5, r5, #4
  415e0c:	b14a      	cbz	r2, 415e22 <_lv_memset+0x22>
  415e0e:	4613      	mov	r3, r2
            SET8(v);
  415e10:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
  415e14:	3b01      	subs	r3, #1
        while(d_align && len) {
  415e16:	1a9c      	subs	r4, r3, r2
  415e18:	42ec      	cmn	r4, r5
  415e1a:	d001      	beq.n	415e20 <_lv_memset+0x20>
  415e1c:	2b00      	cmp	r3, #0
  415e1e:	d1f7      	bne.n	415e10 <_lv_memset+0x10>
            len--;
  415e20:	461a      	mov	r2, r3
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
  415e22:	eb01 2401 	add.w	r4, r1, r1, lsl #8
  415e26:	eb04 4401 	add.w	r4, r4, r1, lsl #16
  415e2a:	eb04 6401 	add.w	r4, r4, r1, lsl #24
    while(len > 32) {
  415e2e:	2a20      	cmp	r2, #32
  415e30:	d920      	bls.n	415e74 <_lv_memset+0x74>
  415e32:	f100 0320 	add.w	r3, r0, #32
  415e36:	4615      	mov	r5, r2
        REPEAT8(SET32(v32));
  415e38:	f843 4c20 	str.w	r4, [r3, #-32]
  415e3c:	f843 4c1c 	str.w	r4, [r3, #-28]
  415e40:	f843 4c18 	str.w	r4, [r3, #-24]
  415e44:	f843 4c14 	str.w	r4, [r3, #-20]
  415e48:	f843 4c10 	str.w	r4, [r3, #-16]
  415e4c:	f843 4c0c 	str.w	r4, [r3, #-12]
  415e50:	f843 4c08 	str.w	r4, [r3, #-8]
  415e54:	f843 4c04 	str.w	r4, [r3, #-4]
        len -= 32;
  415e58:	3d20      	subs	r5, #32
  415e5a:	3320      	adds	r3, #32
    while(len > 32) {
  415e5c:	2d20      	cmp	r5, #32
  415e5e:	d8eb      	bhi.n	415e38 <_lv_memset+0x38>
  415e60:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
  415e64:	f025 031f 	bic.w	r3, r5, #31
  415e68:	3320      	adds	r3, #32
  415e6a:	4418      	add	r0, r3
  415e6c:	3a20      	subs	r2, #32
  415e6e:	f025 051f 	bic.w	r5, r5, #31
  415e72:	1b52      	subs	r2, r2, r5
    while(len > 4) {
  415e74:	2a04      	cmp	r2, #4
  415e76:	d917      	bls.n	415ea8 <_lv_memset+0xa8>
  415e78:	4605      	mov	r5, r0
  415e7a:	4613      	mov	r3, r2
        SET32(v32);
  415e7c:	f845 4b04 	str.w	r4, [r5], #4
        len -= 4;
  415e80:	3b04      	subs	r3, #4
    while(len > 4) {
  415e82:	2b04      	cmp	r3, #4
  415e84:	d8fa      	bhi.n	415e7c <_lv_memset+0x7c>
  415e86:	1f54      	subs	r4, r2, #5
  415e88:	f024 0303 	bic.w	r3, r4, #3
  415e8c:	3304      	adds	r3, #4
  415e8e:	3a04      	subs	r2, #4
  415e90:	f024 0403 	bic.w	r4, r4, #3
  415e94:	1b12      	subs	r2, r2, r4
        SET32(v32);
  415e96:	4403      	add	r3, r0
    while(len) {
  415e98:	b122      	cbz	r2, 415ea4 <_lv_memset+0xa4>
  415e9a:	441a      	add	r2, r3
        SET8(v);
  415e9c:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  415ea0:	429a      	cmp	r2, r3
  415ea2:	d1fb      	bne.n	415e9c <_lv_memset+0x9c>
}
  415ea4:	bc30      	pop	{r4, r5}
  415ea6:	4770      	bx	lr
    while(len > 4) {
  415ea8:	4603      	mov	r3, r0
  415eaa:	e7f5      	b.n	415e98 <_lv_memset+0x98>

00415eac <_lv_memset_00>:
{
  415eac:	b430      	push	{r4, r5}
    if(d_align) {
  415eae:	f010 0403 	ands.w	r4, r0, #3
  415eb2:	d00d      	beq.n	415ed0 <_lv_memset_00+0x24>
        while(d_align && len) {
  415eb4:	f1c4 0404 	rsb	r4, r4, #4
  415eb8:	b151      	cbz	r1, 415ed0 <_lv_memset_00+0x24>
  415eba:	460b      	mov	r3, r1
            SET8(0);
  415ebc:	2500      	movs	r5, #0
  415ebe:	f800 5b01 	strb.w	r5, [r0], #1
            len--;
  415ec2:	3b01      	subs	r3, #1
        while(d_align && len) {
  415ec4:	1a5a      	subs	r2, r3, r1
  415ec6:	42e2      	cmn	r2, r4
  415ec8:	d001      	beq.n	415ece <_lv_memset_00+0x22>
  415eca:	2b00      	cmp	r3, #0
  415ecc:	d1f7      	bne.n	415ebe <_lv_memset_00+0x12>
            len--;
  415ece:	4619      	mov	r1, r3
    while(len > 32) {
  415ed0:	2920      	cmp	r1, #32
  415ed2:	d921      	bls.n	415f18 <_lv_memset_00+0x6c>
  415ed4:	f100 0320 	add.w	r3, r0, #32
  415ed8:	460c      	mov	r4, r1
        REPEAT8(SET32(0));
  415eda:	2200      	movs	r2, #0
  415edc:	f843 2c20 	str.w	r2, [r3, #-32]
  415ee0:	f843 2c1c 	str.w	r2, [r3, #-28]
  415ee4:	f843 2c18 	str.w	r2, [r3, #-24]
  415ee8:	f843 2c14 	str.w	r2, [r3, #-20]
  415eec:	f843 2c10 	str.w	r2, [r3, #-16]
  415ef0:	f843 2c0c 	str.w	r2, [r3, #-12]
  415ef4:	f843 2c08 	str.w	r2, [r3, #-8]
  415ef8:	f843 2c04 	str.w	r2, [r3, #-4]
        len -= 32;
  415efc:	3c20      	subs	r4, #32
  415efe:	3320      	adds	r3, #32
    while(len > 32) {
  415f00:	2c20      	cmp	r4, #32
  415f02:	d8eb      	bhi.n	415edc <_lv_memset_00+0x30>
  415f04:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
  415f08:	f023 021f 	bic.w	r2, r3, #31
  415f0c:	3220      	adds	r2, #32
  415f0e:	4410      	add	r0, r2
  415f10:	3920      	subs	r1, #32
  415f12:	f023 031f 	bic.w	r3, r3, #31
  415f16:	1ac9      	subs	r1, r1, r3
    while(len > 4) {
  415f18:	2904      	cmp	r1, #4
  415f1a:	d910      	bls.n	415f3e <_lv_memset_00+0x92>
  415f1c:	4602      	mov	r2, r0
  415f1e:	460b      	mov	r3, r1
        SET32(0);
  415f20:	2400      	movs	r4, #0
  415f22:	f842 4b04 	str.w	r4, [r2], #4
        len -= 4;
  415f26:	3b04      	subs	r3, #4
    while(len > 4) {
  415f28:	2b04      	cmp	r3, #4
  415f2a:	d8fa      	bhi.n	415f22 <_lv_memset_00+0x76>
  415f2c:	1f4b      	subs	r3, r1, #5
  415f2e:	f023 0203 	bic.w	r2, r3, #3
  415f32:	3204      	adds	r2, #4
  415f34:	3904      	subs	r1, #4
  415f36:	f023 0303 	bic.w	r3, r3, #3
  415f3a:	1ac9      	subs	r1, r1, r3
        SET32(0);
  415f3c:	4410      	add	r0, r2
    while(len) {
  415f3e:	b129      	cbz	r1, 415f4c <_lv_memset_00+0xa0>
  415f40:	4401      	add	r1, r0
        SET8(0);
  415f42:	2300      	movs	r3, #0
  415f44:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
  415f48:	4281      	cmp	r1, r0
  415f4a:	d1fb      	bne.n	415f44 <_lv_memset_00+0x98>
}
  415f4c:	bc30      	pop	{r4, r5}
  415f4e:	4770      	bx	lr

00415f50 <_lv_memset_ff>:
{
  415f50:	b430      	push	{r4, r5}
    if(d_align) {
  415f52:	f010 0403 	ands.w	r4, r0, #3
  415f56:	d00d      	beq.n	415f74 <_lv_memset_ff+0x24>
        while(d_align && len) {
  415f58:	f1c4 0404 	rsb	r4, r4, #4
  415f5c:	b151      	cbz	r1, 415f74 <_lv_memset_ff+0x24>
  415f5e:	460b      	mov	r3, r1
            SET8(0xFF);
  415f60:	25ff      	movs	r5, #255	; 0xff
  415f62:	f800 5b01 	strb.w	r5, [r0], #1
            len--;
  415f66:	3b01      	subs	r3, #1
        while(d_align && len) {
  415f68:	1a5a      	subs	r2, r3, r1
  415f6a:	42e2      	cmn	r2, r4
  415f6c:	d001      	beq.n	415f72 <_lv_memset_ff+0x22>
  415f6e:	2b00      	cmp	r3, #0
  415f70:	d1f7      	bne.n	415f62 <_lv_memset_ff+0x12>
            len--;
  415f72:	4619      	mov	r1, r3
    while(len > 32) {
  415f74:	2920      	cmp	r1, #32
  415f76:	d922      	bls.n	415fbe <_lv_memset_ff+0x6e>
  415f78:	f100 0320 	add.w	r3, r0, #32
  415f7c:	460c      	mov	r4, r1
        REPEAT8(SET32(0xFFFFFFFF));
  415f7e:	f04f 32ff 	mov.w	r2, #4294967295
  415f82:	f843 2c20 	str.w	r2, [r3, #-32]
  415f86:	f843 2c1c 	str.w	r2, [r3, #-28]
  415f8a:	f843 2c18 	str.w	r2, [r3, #-24]
  415f8e:	f843 2c14 	str.w	r2, [r3, #-20]
  415f92:	f843 2c10 	str.w	r2, [r3, #-16]
  415f96:	f843 2c0c 	str.w	r2, [r3, #-12]
  415f9a:	f843 2c08 	str.w	r2, [r3, #-8]
  415f9e:	f843 2c04 	str.w	r2, [r3, #-4]
        len -= 32;
  415fa2:	3c20      	subs	r4, #32
  415fa4:	3320      	adds	r3, #32
    while(len > 32) {
  415fa6:	2c20      	cmp	r4, #32
  415fa8:	d8eb      	bhi.n	415f82 <_lv_memset_ff+0x32>
  415faa:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
  415fae:	f023 021f 	bic.w	r2, r3, #31
  415fb2:	3220      	adds	r2, #32
  415fb4:	4410      	add	r0, r2
  415fb6:	3920      	subs	r1, #32
  415fb8:	f023 031f 	bic.w	r3, r3, #31
  415fbc:	1ac9      	subs	r1, r1, r3
    while(len > 4) {
  415fbe:	2904      	cmp	r1, #4
  415fc0:	d911      	bls.n	415fe6 <_lv_memset_ff+0x96>
  415fc2:	4602      	mov	r2, r0
  415fc4:	460b      	mov	r3, r1
        SET32(0xFFFFFFFF);
  415fc6:	f04f 34ff 	mov.w	r4, #4294967295
  415fca:	f842 4b04 	str.w	r4, [r2], #4
        len -= 4;
  415fce:	3b04      	subs	r3, #4
    while(len > 4) {
  415fd0:	2b04      	cmp	r3, #4
  415fd2:	d8fa      	bhi.n	415fca <_lv_memset_ff+0x7a>
  415fd4:	1f4b      	subs	r3, r1, #5
  415fd6:	f023 0203 	bic.w	r2, r3, #3
  415fda:	3204      	adds	r2, #4
  415fdc:	3904      	subs	r1, #4
  415fde:	f023 0303 	bic.w	r3, r3, #3
  415fe2:	1ac9      	subs	r1, r1, r3
        SET32(0xFFFFFFFF);
  415fe4:	4410      	add	r0, r2
    while(len) {
  415fe6:	b129      	cbz	r1, 415ff4 <_lv_memset_ff+0xa4>
  415fe8:	4401      	add	r1, r0
        SET8(0xFF);
  415fea:	23ff      	movs	r3, #255	; 0xff
  415fec:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
  415ff0:	4281      	cmp	r1, r0
  415ff2:	d1fb      	bne.n	415fec <_lv_memset_ff+0x9c>
}
  415ff4:	bc30      	pop	{r4, r5}
  415ff6:	4770      	bx	lr

00415ff8 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
  415ff8:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
  415ffa:	bf38      	it	cc
  415ffc:	5488      	strbcc	r0, [r1, r2]
  415ffe:	4770      	bx	lr

00416000 <_out_null>:
    }
}

// internal null output
static inline void _out_null(char character, void * buffer, size_t idx, size_t maxlen)
{
  416000:	4770      	bx	lr

00416002 <_ntoa_format>:
}

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
  416002:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416006:	b083      	sub	sp, #12
  416008:	4607      	mov	r7, r0
  41600a:	9100      	str	r1, [sp, #0]
  41600c:	4692      	mov	sl, r2
  41600e:	4698      	mov	r8, r3
  416010:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  416012:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  416014:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
  416018:	9910      	ldr	r1, [sp, #64]	; 0x40
  41601a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
  41601e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
  416020:	f012 0302 	ands.w	r3, r2, #2
  416024:	9301      	str	r3, [sp, #4]
  416026:	d12e      	bne.n	416086 <_ntoa_format+0x84>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  416028:	f1b9 0f00 	cmp.w	r9, #0
  41602c:	d00e      	beq.n	41604c <_ntoa_format+0x4a>
  41602e:	f012 0f01 	tst.w	r2, #1
  416032:	f000 80b7 	beq.w	4161a4 <_ntoa_format+0x1a2>
  416036:	b915      	cbnz	r5, 41603e <_ntoa_format+0x3c>
  416038:	f012 0f0c 	tst.w	r2, #12
  41603c:	d001      	beq.n	416042 <_ntoa_format+0x40>
            width--;
  41603e:	f109 39ff 	add.w	r9, r9, #4294967295
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  416042:	428c      	cmp	r4, r1
  416044:	d212      	bcs.n	41606c <_ntoa_format+0x6a>
  416046:	2c1f      	cmp	r4, #31
  416048:	d904      	bls.n	416054 <_ntoa_format+0x52>
  41604a:	e00f      	b.n	41606c <_ntoa_format+0x6a>
  41604c:	428c      	cmp	r4, r1
  41604e:	d20a      	bcs.n	416066 <_ntoa_format+0x64>
  416050:	2c1f      	cmp	r4, #31
  416052:	d808      	bhi.n	416066 <_ntoa_format+0x64>
  416054:	1933      	adds	r3, r6, r4
            buf[len++] = '0';
  416056:	2030      	movs	r0, #48	; 0x30
  416058:	3401      	adds	r4, #1
  41605a:	f803 0b01 	strb.w	r0, [r3], #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  41605e:	42a1      	cmp	r1, r4
  416060:	d901      	bls.n	416066 <_ntoa_format+0x64>
  416062:	2c1f      	cmp	r4, #31
  416064:	d9f8      	bls.n	416058 <_ntoa_format+0x56>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  416066:	f012 0f01 	tst.w	r2, #1
  41606a:	d00c      	beq.n	416086 <_ntoa_format+0x84>
  41606c:	45a1      	cmp	r9, r4
  41606e:	d90a      	bls.n	416086 <_ntoa_format+0x84>
  416070:	2c1f      	cmp	r4, #31
  416072:	d808      	bhi.n	416086 <_ntoa_format+0x84>
  416074:	1933      	adds	r3, r6, r4
            buf[len++] = '0';
  416076:	2030      	movs	r0, #48	; 0x30
  416078:	3401      	adds	r4, #1
  41607a:	f803 0b01 	strb.w	r0, [r3], #1
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  41607e:	454c      	cmp	r4, r9
  416080:	d201      	bcs.n	416086 <_ntoa_format+0x84>
  416082:	2c1f      	cmp	r4, #31
  416084:	d9f8      	bls.n	416078 <_ntoa_format+0x76>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
  416086:	f012 0f10 	tst.w	r2, #16
  41608a:	d017      	beq.n	4160bc <_ntoa_format+0xba>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
  41608c:	f412 6f80 	tst.w	r2, #1024	; 0x400
  416090:	d104      	bne.n	41609c <_ntoa_format+0x9a>
  416092:	b11c      	cbz	r4, 41609c <_ntoa_format+0x9a>
  416094:	428c      	cmp	r4, r1
  416096:	d01e      	beq.n	4160d6 <_ntoa_format+0xd4>
  416098:	454c      	cmp	r4, r9
  41609a:	d01c      	beq.n	4160d6 <_ntoa_format+0xd4>
            len--;
            if(len && (base == 16U)) {
                len--;
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  41609c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41609e:	2b10      	cmp	r3, #16
  4160a0:	d023      	beq.n	4160ea <_ntoa_format+0xe8>
            buf[len++] = 'x';
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  4160a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4160a4:	2b02      	cmp	r3, #2
  4160a6:	d104      	bne.n	4160b2 <_ntoa_format+0xb0>
  4160a8:	2c1f      	cmp	r4, #31
  4160aa:	d802      	bhi.n	4160b2 <_ntoa_format+0xb0>
            buf[len++] = 'b';
  4160ac:	2362      	movs	r3, #98	; 0x62
  4160ae:	5533      	strb	r3, [r6, r4]
  4160b0:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
  4160b2:	2c1f      	cmp	r4, #31
  4160b4:	d832      	bhi.n	41611c <_ntoa_format+0x11a>
            buf[len++] = '0';
  4160b6:	2330      	movs	r3, #48	; 0x30
  4160b8:	5533      	strb	r3, [r6, r4]
  4160ba:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
  4160bc:	2c1f      	cmp	r4, #31
  4160be:	d82d      	bhi.n	41611c <_ntoa_format+0x11a>
        if(negative) {
  4160c0:	bb4d      	cbnz	r5, 416116 <_ntoa_format+0x114>
            buf[len++] = '-';
        }
        else if(flags & FLAGS_PLUS) {
  4160c2:	f012 0f04 	tst.w	r2, #4
  4160c6:	d13c      	bne.n	416142 <_ntoa_format+0x140>
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
  4160c8:	f012 0f08 	tst.w	r2, #8
  4160cc:	d026      	beq.n	41611c <_ntoa_format+0x11a>
            buf[len++] = ' ';
  4160ce:	2320      	movs	r3, #32
  4160d0:	5533      	strb	r3, [r6, r4]
  4160d2:	3401      	adds	r4, #1
  4160d4:	e022      	b.n	41611c <_ntoa_format+0x11a>
            if(len && (base == 16U)) {
  4160d6:	1e63      	subs	r3, r4, #1
  4160d8:	2c01      	cmp	r4, #1
  4160da:	d004      	beq.n	4160e6 <_ntoa_format+0xe4>
  4160dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4160de:	2910      	cmp	r1, #16
  4160e0:	d101      	bne.n	4160e6 <_ntoa_format+0xe4>
                len--;
  4160e2:	3c02      	subs	r4, #2
  4160e4:	e7da      	b.n	41609c <_ntoa_format+0x9a>
            len--;
  4160e6:	461c      	mov	r4, r3
  4160e8:	e7d8      	b.n	41609c <_ntoa_format+0x9a>
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  4160ea:	2c1f      	cmp	r4, #31
  4160ec:	bf8c      	ite	hi
  4160ee:	2300      	movhi	r3, #0
  4160f0:	2301      	movls	r3, #1
  4160f2:	f002 0120 	and.w	r1, r2, #32
  4160f6:	f012 0f20 	tst.w	r2, #32
  4160fa:	d104      	bne.n	416106 <_ntoa_format+0x104>
  4160fc:	b11b      	cbz	r3, 416106 <_ntoa_format+0x104>
            buf[len++] = 'x';
  4160fe:	2378      	movs	r3, #120	; 0x78
  416100:	5533      	strb	r3, [r6, r4]
  416102:	3401      	adds	r4, #1
  416104:	e7d5      	b.n	4160b2 <_ntoa_format+0xb0>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  416106:	2900      	cmp	r1, #0
  416108:	d0d3      	beq.n	4160b2 <_ntoa_format+0xb0>
  41610a:	2b00      	cmp	r3, #0
  41610c:	d0d1      	beq.n	4160b2 <_ntoa_format+0xb0>
            buf[len++] = 'X';
  41610e:	2358      	movs	r3, #88	; 0x58
  416110:	5533      	strb	r3, [r6, r4]
  416112:	3401      	adds	r4, #1
  416114:	e7cd      	b.n	4160b2 <_ntoa_format+0xb0>
            buf[len++] = '-';
  416116:	232d      	movs	r3, #45	; 0x2d
  416118:	5533      	strb	r3, [r6, r4]
  41611a:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
  41611c:	f012 0f03 	tst.w	r2, #3
  416120:	d115      	bne.n	41614e <_ntoa_format+0x14c>
        for(i = len; i < width; i++) {
  416122:	454c      	cmp	r4, r9
  416124:	d211      	bcs.n	41614a <_ntoa_format+0x148>
  416126:	eb09 0b0a 	add.w	fp, r9, sl
  41612a:	ebab 0b04 	sub.w	fp, fp, r4
  41612e:	4652      	mov	r2, sl
            out(' ', buffer, idx++, maxlen);
  416130:	1c55      	adds	r5, r2, #1
  416132:	4643      	mov	r3, r8
  416134:	9900      	ldr	r1, [sp, #0]
  416136:	2020      	movs	r0, #32
  416138:	47b8      	blx	r7
  41613a:	462a      	mov	r2, r5
        for(i = len; i < width; i++) {
  41613c:	455d      	cmp	r5, fp
  41613e:	d1f7      	bne.n	416130 <_ntoa_format+0x12e>
  416140:	e006      	b.n	416150 <_ntoa_format+0x14e>
            buf[len++] = '+';  // ignore the space if the '+' exists
  416142:	232b      	movs	r3, #43	; 0x2b
  416144:	5533      	strb	r3, [r6, r4]
  416146:	3401      	adds	r4, #1
  416148:	e7e8      	b.n	41611c <_ntoa_format+0x11a>
        for(i = len; i < width; i++) {
  41614a:	4655      	mov	r5, sl
  41614c:	e000      	b.n	416150 <_ntoa_format+0x14e>
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
  41614e:	4655      	mov	r5, sl
    while(len) {
  416150:	b314      	cbz	r4, 416198 <_ntoa_format+0x196>
  416152:	4426      	add	r6, r4
  416154:	442c      	add	r4, r5
  416156:	462a      	mov	r2, r5
        out(buf[--len], buffer, idx++, maxlen);
  416158:	1c55      	adds	r5, r2, #1
  41615a:	4643      	mov	r3, r8
  41615c:	9900      	ldr	r1, [sp, #0]
  41615e:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  416162:	47b8      	blx	r7
  416164:	462a      	mov	r2, r5
    while(len) {
  416166:	42a5      	cmp	r5, r4
  416168:	d1f6      	bne.n	416158 <_ntoa_format+0x156>
    if(flags & FLAGS_LEFT) {
  41616a:	9b01      	ldr	r3, [sp, #4]
  41616c:	b1b3      	cbz	r3, 41619c <_ntoa_format+0x19a>
        while(idx - start_idx < width) {
  41616e:	eba4 030a 	sub.w	r3, r4, sl
  416172:	4599      	cmp	r9, r3
  416174:	d914      	bls.n	4161a0 <_ntoa_format+0x19e>
            out(' ', buffer, idx++, maxlen);
  416176:	2620      	movs	r6, #32
  416178:	4622      	mov	r2, r4
  41617a:	9c00      	ldr	r4, [sp, #0]
  41617c:	1c55      	adds	r5, r2, #1
  41617e:	4643      	mov	r3, r8
  416180:	4621      	mov	r1, r4
  416182:	4630      	mov	r0, r6
  416184:	47b8      	blx	r7
  416186:	462a      	mov	r2, r5
        while(idx - start_idx < width) {
  416188:	eba5 030a 	sub.w	r3, r5, sl
  41618c:	4599      	cmp	r9, r3
  41618e:	d8f5      	bhi.n	41617c <_ntoa_format+0x17a>
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
  416190:	4628      	mov	r0, r5
  416192:	b003      	add	sp, #12
  416194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while(len) {
  416198:	462c      	mov	r4, r5
  41619a:	e7e6      	b.n	41616a <_ntoa_format+0x168>
    if(flags & FLAGS_LEFT) {
  41619c:	4625      	mov	r5, r4
  41619e:	e7f7      	b.n	416190 <_ntoa_format+0x18e>
        while(idx - start_idx < width) {
  4161a0:	4625      	mov	r5, r4
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
  4161a2:	e7f5      	b.n	416190 <_ntoa_format+0x18e>
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  4161a4:	2c1f      	cmp	r4, #31
  4161a6:	f63f af6e 	bhi.w	416086 <_ntoa_format+0x84>
  4161aa:	428c      	cmp	r4, r1
  4161ac:	f4ff af52 	bcc.w	416054 <_ntoa_format+0x52>
  4161b0:	e769      	b.n	416086 <_ntoa_format+0x84>
	...

004161b4 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  4161b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4161b8:	b090      	sub	sp, #64	; 0x40
  4161ba:	9d16      	ldr	r5, [sp, #88]	; 0x58
  4161bc:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4161be:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
  4161c2:	b945      	cbnz	r5, 4161d6 <_ntoa_long+0x22>
        flags &= ~FLAGS_HASH;
  4161c4:	f028 0410 	bic.w	r4, r8, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
  4161c8:	f418 6f80 	tst.w	r8, #1024	; 0x400
  4161cc:	d002      	beq.n	4161d4 <_ntoa_long+0x20>
        flags &= ~FLAGS_HASH;
  4161ce:	46a0      	mov	r8, r4
    size_t len = 0U;
  4161d0:	2700      	movs	r7, #0
  4161d2:	e01d      	b.n	416210 <_ntoa_long+0x5c>
        flags &= ~FLAGS_HASH;
  4161d4:	46a0      	mov	r8, r4
  4161d6:	f018 0f20 	tst.w	r8, #32
  4161da:	f10d 0e1f 	add.w	lr, sp, #31
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  4161de:	f04f 0700 	mov.w	r7, #0
  4161e2:	bf14      	ite	ne
  4161e4:	f04f 0c37 	movne.w	ip, #55	; 0x37
  4161e8:	f04f 0c57 	moveq.w	ip, #87	; 0x57
            const char digit = (char)(value % base);
  4161ec:	fbb5 f4f6 	udiv	r4, r5, r6
  4161f0:	fb06 5414 	mls	r4, r6, r4, r5
  4161f4:	b2e4      	uxtb	r4, r4
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  4161f6:	3701      	adds	r7, #1
  4161f8:	2c09      	cmp	r4, #9
  4161fa:	bf94      	ite	ls
  4161fc:	3430      	addls	r4, #48	; 0x30
  4161fe:	4464      	addhi	r4, ip
  416200:	b2e4      	uxtb	r4, r4
  416202:	f80e 4f01 	strb.w	r4, [lr, #1]!
            value /= base;
  416206:	fbb5 f5f6 	udiv	r5, r5, r6
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  41620a:	b10d      	cbz	r5, 416210 <_ntoa_long+0x5c>
  41620c:	2f1f      	cmp	r7, #31
  41620e:	d9ed      	bls.n	4161ec <_ntoa_long+0x38>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
  416210:	f8cd 8018 	str.w	r8, [sp, #24]
  416214:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  416216:	9405      	str	r4, [sp, #20]
  416218:	9c19      	ldr	r4, [sp, #100]	; 0x64
  41621a:	9404      	str	r4, [sp, #16]
  41621c:	9603      	str	r6, [sp, #12]
  41621e:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
  416222:	9402      	str	r4, [sp, #8]
  416224:	9701      	str	r7, [sp, #4]
  416226:	ac08      	add	r4, sp, #32
  416228:	9400      	str	r4, [sp, #0]
  41622a:	4c02      	ldr	r4, [pc, #8]	; (416234 <_ntoa_long+0x80>)
  41622c:	47a0      	blx	r4
}
  41622e:	b010      	add	sp, #64	; 0x40
  416230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  416234:	00416003 	.word	0x00416003

00416238 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  416238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41623c:	b095      	sub	sp, #84	; 0x54
  41623e:	9008      	str	r0, [sp, #32]
  416240:	9109      	str	r1, [sp, #36]	; 0x24
  416242:	920a      	str	r2, [sp, #40]	; 0x28
  416244:	930b      	str	r3, [sp, #44]	; 0x2c
  416246:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
  41624a:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
  41624e:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
  416252:	ea54 0305 	orrs.w	r3, r4, r5
  416256:	d10a      	bne.n	41626e <_ntoa_long_long+0x36>
        flags &= ~FLAGS_HASH;
  416258:	9b26      	ldr	r3, [sp, #152]	; 0x98
  41625a:	f023 0310 	bic.w	r3, r3, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
  41625e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  416260:	f412 6f80 	tst.w	r2, #1024	; 0x400
  416264:	d002      	beq.n	41626c <_ntoa_long_long+0x34>
        flags &= ~FLAGS_HASH;
  416266:	9326      	str	r3, [sp, #152]	; 0x98
    size_t len = 0U;
  416268:	2600      	movs	r6, #0
  41626a:	e027      	b.n	4162bc <_ntoa_long_long+0x84>
        flags &= ~FLAGS_HASH;
  41626c:	9326      	str	r3, [sp, #152]	; 0x98
  41626e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  416270:	f013 0f20 	tst.w	r3, #32
  416274:	f10d 0a2f 	add.w	sl, sp, #47	; 0x2f
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  416278:	f04f 0600 	mov.w	r6, #0
            const char digit = (char)(value % base);
  41627c:	4f1b      	ldr	r7, [pc, #108]	; (4162ec <_ntoa_long_long+0xb4>)
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  41627e:	bf14      	ite	ne
  416280:	f04f 0b37 	movne.w	fp, #55	; 0x37
  416284:	f04f 0b57 	moveq.w	fp, #87	; 0x57
            const char digit = (char)(value % base);
  416288:	464a      	mov	r2, r9
  41628a:	4643      	mov	r3, r8
  41628c:	4620      	mov	r0, r4
  41628e:	4629      	mov	r1, r5
  416290:	47b8      	blx	r7
  416292:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  416294:	3601      	adds	r6, #1
  416296:	2a09      	cmp	r2, #9
  416298:	bf94      	ite	ls
  41629a:	3230      	addls	r2, #48	; 0x30
  41629c:	445a      	addhi	r2, fp
  41629e:	b2d2      	uxtb	r2, r2
  4162a0:	f80a 2f01 	strb.w	r2, [sl, #1]!
            value /= base;
  4162a4:	464a      	mov	r2, r9
  4162a6:	4643      	mov	r3, r8
  4162a8:	4620      	mov	r0, r4
  4162aa:	4629      	mov	r1, r5
  4162ac:	47b8      	blx	r7
  4162ae:	4604      	mov	r4, r0
  4162b0:	460d      	mov	r5, r1
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  4162b2:	ea50 0301 	orrs.w	r3, r0, r1
  4162b6:	d001      	beq.n	4162bc <_ntoa_long_long+0x84>
  4162b8:	2e1f      	cmp	r6, #31
  4162ba:	d9e5      	bls.n	416288 <_ntoa_long_long+0x50>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
  4162bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4162be:	9306      	str	r3, [sp, #24]
  4162c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4162c2:	9305      	str	r3, [sp, #20]
  4162c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4162c6:	9304      	str	r3, [sp, #16]
  4162c8:	f8cd 900c 	str.w	r9, [sp, #12]
  4162cc:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
  4162d0:	9302      	str	r3, [sp, #8]
  4162d2:	9601      	str	r6, [sp, #4]
  4162d4:	ab0c      	add	r3, sp, #48	; 0x30
  4162d6:	9300      	str	r3, [sp, #0]
  4162d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4162da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4162dc:	9909      	ldr	r1, [sp, #36]	; 0x24
  4162de:	9808      	ldr	r0, [sp, #32]
  4162e0:	4c03      	ldr	r4, [pc, #12]	; (4162f0 <_ntoa_long_long+0xb8>)
  4162e2:	47a0      	blx	r4
}
  4162e4:	b015      	add	sp, #84	; 0x54
  4162e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4162ea:	bf00      	nop
  4162ec:	004226ad 	.word	0x004226ad
  4162f0:	00416003 	.word	0x00416003

004162f4 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
{
  4162f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4162f8:	b091      	sub	sp, #68	; 0x44
  4162fa:	920a      	str	r2, [sp, #40]	; 0x28
  4162fc:	461c      	mov	r4, r3
  4162fe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
  416300:	910b      	str	r1, [sp, #44]	; 0x2c
        // use null output function
        out = _out_null;
  416302:	4b9f      	ldr	r3, [pc, #636]	; (416580 <_vsnprintf+0x28c>)
  416304:	2900      	cmp	r1, #0
  416306:	bf14      	ite	ne
  416308:	4681      	movne	r9, r0
  41630a:	4699      	moveq	r9, r3
                    format++;
                    break;
                }

            case '%' :
                out('%', buffer, idx++, maxlen);
  41630c:	f04f 0b00 	mov.w	fp, #0
    while(*format) {
  416310:	7820      	ldrb	r0, [r4, #0]
  416312:	2800      	cmp	r0, #0
  416314:	f000 82ac 	beq.w	416870 <_vsnprintf+0x57c>
        if(*format != '%') {
  416318:	2825      	cmp	r0, #37	; 0x25
  41631a:	d008      	beq.n	41632e <_vsnprintf+0x3a>
            out(*format, buffer, idx++, maxlen);
  41631c:	f10b 0501 	add.w	r5, fp, #1
  416320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416322:	465a      	mov	r2, fp
  416324:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416326:	47c8      	blx	r9
            format++;
  416328:	3401      	adds	r4, #1
            out(*format, buffer, idx++, maxlen);
  41632a:	46ab      	mov	fp, r5
            continue;
  41632c:	e7f0      	b.n	416310 <_vsnprintf+0x1c>
            format++;
  41632e:	1c62      	adds	r2, r4, #1
        flags = 0U;
  416330:	2100      	movs	r1, #0
  416332:	e001      	b.n	416338 <_vsnprintf+0x44>
                    flags |= FLAGS_ZEROPAD;
  416334:	f041 0101 	orr.w	r1, r1, #1
  416338:	4614      	mov	r4, r2
  41633a:	3201      	adds	r2, #1
            switch(*format) {
  41633c:	7823      	ldrb	r3, [r4, #0]
  41633e:	3b20      	subs	r3, #32
  416340:	2b10      	cmp	r3, #16
  416342:	d831      	bhi.n	4163a8 <_vsnprintf+0xb4>
  416344:	a001      	add	r0, pc, #4	; (adr r0, 41634c <_vsnprintf+0x58>)
  416346:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
  41634a:	bf00      	nop
  41634c:	0041639d 	.word	0x0041639d
  416350:	004163a9 	.word	0x004163a9
  416354:	004163a9 	.word	0x004163a9
  416358:	004163a3 	.word	0x004163a3
  41635c:	004163a9 	.word	0x004163a9
  416360:	004163a9 	.word	0x004163a9
  416364:	004163a9 	.word	0x004163a9
  416368:	004163a9 	.word	0x004163a9
  41636c:	004163a9 	.word	0x004163a9
  416370:	004163a9 	.word	0x004163a9
  416374:	004163a9 	.word	0x004163a9
  416378:	00416397 	.word	0x00416397
  41637c:	004163a9 	.word	0x004163a9
  416380:	00416391 	.word	0x00416391
  416384:	004163a9 	.word	0x004163a9
  416388:	004163a9 	.word	0x004163a9
  41638c:	00416335 	.word	0x00416335
                    flags |= FLAGS_LEFT;
  416390:	f041 0102 	orr.w	r1, r1, #2
                    break;
  416394:	e7d0      	b.n	416338 <_vsnprintf+0x44>
                    flags |= FLAGS_PLUS;
  416396:	f041 0104 	orr.w	r1, r1, #4
                    break;
  41639a:	e7cd      	b.n	416338 <_vsnprintf+0x44>
                    flags |= FLAGS_SPACE;
  41639c:	f041 0108 	orr.w	r1, r1, #8
                    break;
  4163a0:	e7ca      	b.n	416338 <_vsnprintf+0x44>
                    flags |= FLAGS_HASH;
  4163a2:	f041 0110 	orr.w	r1, r1, #16
                    break;
  4163a6:	e7c7      	b.n	416338 <_vsnprintf+0x44>
        if(_is_digit(*format)) {
  4163a8:	7823      	ldrb	r3, [r4, #0]
    return (ch >= '0') && (ch <= '9');
  4163aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
        if(_is_digit(*format)) {
  4163ae:	b2d2      	uxtb	r2, r2
  4163b0:	2a09      	cmp	r2, #9
  4163b2:	d916      	bls.n	4163e2 <_vsnprintf+0xee>
        else if(*format == '*') {
  4163b4:	2b2a      	cmp	r3, #42	; 0x2a
  4163b6:	d022      	beq.n	4163fe <_vsnprintf+0x10a>
        width = 0U;
  4163b8:	2500      	movs	r5, #0
        if(*format == '.') {
  4163ba:	7823      	ldrb	r3, [r4, #0]
  4163bc:	2b2e      	cmp	r3, #46	; 0x2e
  4163be:	d029      	beq.n	416414 <_vsnprintf+0x120>
        precision = 0U;
  4163c0:	2700      	movs	r7, #0
        switch(*format) {
  4163c2:	7823      	ldrb	r3, [r4, #0]
  4163c4:	3b68      	subs	r3, #104	; 0x68
  4163c6:	2b12      	cmp	r3, #18
  4163c8:	d860      	bhi.n	41648c <_vsnprintf+0x198>
  4163ca:	e8df f003 	tbb	[pc, r3]
  4163ce:	5f51      	.short	0x5f51
  4163d0:	5f465fbb 	.word	0x5f465fbb
  4163d4:	5f5f5f5f 	.word	0x5f5f5f5f
  4163d8:	5f5c5f5f 	.word	0x5f5c5f5f
  4163dc:	5f5f5f5f 	.word	0x5f5f5f5f
  4163e0:	bf          	.byte	0xbf
  4163e1:	00          	.byte	0x00
  4163e2:	2500      	movs	r5, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
  4163e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4163e8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
  4163ec:	3d30      	subs	r5, #48	; 0x30
    while(_is_digit(**str)) {
  4163ee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    return (ch >= '0') && (ch <= '9');
  4163f2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while(_is_digit(**str)) {
  4163f6:	b2d2      	uxtb	r2, r2
  4163f8:	2a09      	cmp	r2, #9
  4163fa:	d9f3      	bls.n	4163e4 <_vsnprintf+0xf0>
  4163fc:	e7dd      	b.n	4163ba <_vsnprintf+0xc6>
            const int w = va_arg(va, int);
  4163fe:	1d33      	adds	r3, r6, #4
  416400:	6835      	ldr	r5, [r6, #0]
            if(w < 0) {
  416402:	2d00      	cmp	r5, #0
  416404:	db02      	blt.n	41640c <_vsnprintf+0x118>
            format++;
  416406:	3401      	adds	r4, #1
            const int w = va_arg(va, int);
  416408:	461e      	mov	r6, r3
  41640a:	e7d6      	b.n	4163ba <_vsnprintf+0xc6>
                flags |= FLAGS_LEFT;    // reverse padding
  41640c:	f041 0102 	orr.w	r1, r1, #2
                width = (unsigned int) - w;
  416410:	426d      	negs	r5, r5
  416412:	e7f8      	b.n	416406 <_vsnprintf+0x112>
            flags |= FLAGS_PRECISION;
  416414:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
            format++;
  416418:	1c60      	adds	r0, r4, #1
            if(_is_digit(*format)) {
  41641a:	7863      	ldrb	r3, [r4, #1]
    return (ch >= '0') && (ch <= '9');
  41641c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
            if(_is_digit(*format)) {
  416420:	b2d2      	uxtb	r2, r2
  416422:	2a09      	cmp	r2, #9
  416424:	d904      	bls.n	416430 <_vsnprintf+0x13c>
            else if(*format == '*') {
  416426:	2b2a      	cmp	r3, #42	; 0x2a
  416428:	d011      	beq.n	41644e <_vsnprintf+0x15a>
            format++;
  41642a:	4604      	mov	r4, r0
        precision = 0U;
  41642c:	2700      	movs	r7, #0
  41642e:	e7c8      	b.n	4163c2 <_vsnprintf+0xce>
  416430:	2700      	movs	r7, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
  416432:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  416436:	eb03 0747 	add.w	r7, r3, r7, lsl #1
  41643a:	3f30      	subs	r7, #48	; 0x30
    while(_is_digit(**str)) {
  41643c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    return (ch >= '0') && (ch <= '9');
  416440:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while(_is_digit(**str)) {
  416444:	b2d2      	uxtb	r2, r2
  416446:	2a09      	cmp	r2, #9
  416448:	d9f3      	bls.n	416432 <_vsnprintf+0x13e>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
  41644a:	4604      	mov	r4, r0
  41644c:	e7b9      	b.n	4163c2 <_vsnprintf+0xce>
                precision = prec > 0 ? (unsigned int)prec : 0U;
  41644e:	6837      	ldr	r7, [r6, #0]
  416450:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
                format++;
  416454:	3402      	adds	r4, #2
                const int prec = (int)va_arg(va, int);
  416456:	3604      	adds	r6, #4
  416458:	e7b3      	b.n	4163c2 <_vsnprintf+0xce>
                if(*format == 'l') {
  41645a:	7863      	ldrb	r3, [r4, #1]
  41645c:	2b6c      	cmp	r3, #108	; 0x6c
  41645e:	d003      	beq.n	416468 <_vsnprintf+0x174>
                flags |= FLAGS_LONG;
  416460:	f441 7180 	orr.w	r1, r1, #256	; 0x100
                format++;
  416464:	3401      	adds	r4, #1
  416466:	e011      	b.n	41648c <_vsnprintf+0x198>
                    flags |= FLAGS_LONG_LONG;
  416468:	f441 7140 	orr.w	r1, r1, #768	; 0x300
                    format++;
  41646c:	3402      	adds	r4, #2
  41646e:	e00d      	b.n	41648c <_vsnprintf+0x198>
                if(*format == 'h') {
  416470:	7863      	ldrb	r3, [r4, #1]
  416472:	2b68      	cmp	r3, #104	; 0x68
  416474:	d003      	beq.n	41647e <_vsnprintf+0x18a>
                flags |= FLAGS_SHORT;
  416476:	f041 0180 	orr.w	r1, r1, #128	; 0x80
                format++;
  41647a:	3401      	adds	r4, #1
  41647c:	e006      	b.n	41648c <_vsnprintf+0x198>
                    flags |= FLAGS_CHAR;
  41647e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
                    format++;
  416482:	3402      	adds	r4, #2
  416484:	e002      	b.n	41648c <_vsnprintf+0x198>
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  416486:	f441 7180 	orr.w	r1, r1, #256	; 0x100
                format++;
  41648a:	3401      	adds	r4, #1
        switch(*format) {
  41648c:	7820      	ldrb	r0, [r4, #0]
  41648e:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
  416492:	2b53      	cmp	r3, #83	; 0x53
  416494:	f200 81df 	bhi.w	416856 <_vsnprintf+0x562>
  416498:	e8df f013 	tbh	[pc, r3, lsl #1]
  41649c:	01dd01d3 	.word	0x01dd01d3
  4164a0:	01dd01dd 	.word	0x01dd01dd
  4164a4:	01dd01dd 	.word	0x01dd01dd
  4164a8:	01dd01dd 	.word	0x01dd01dd
  4164ac:	01dd01dd 	.word	0x01dd01dd
  4164b0:	01dd01dd 	.word	0x01dd01dd
  4164b4:	01dd01dd 	.word	0x01dd01dd
  4164b8:	01dd01dd 	.word	0x01dd01dd
  4164bc:	01dd01dd 	.word	0x01dd01dd
  4164c0:	01dd01dd 	.word	0x01dd01dd
  4164c4:	01dd01dd 	.word	0x01dd01dd
  4164c8:	01dd01dd 	.word	0x01dd01dd
  4164cc:	01dd01dd 	.word	0x01dd01dd
  4164d0:	01dd01dd 	.word	0x01dd01dd
  4164d4:	01dd01dd 	.word	0x01dd01dd
  4164d8:	01dd01dd 	.word	0x01dd01dd
  4164dc:	01dd01dd 	.word	0x01dd01dd
  4164e0:	01dd01dd 	.word	0x01dd01dd
  4164e4:	01dd01dd 	.word	0x01dd01dd
  4164e8:	01dd01dd 	.word	0x01dd01dd
  4164ec:	01dd01dd 	.word	0x01dd01dd
  4164f0:	01dd01dd 	.word	0x01dd01dd
  4164f4:	01dd01dd 	.word	0x01dd01dd
  4164f8:	01dd01dd 	.word	0x01dd01dd
  4164fc:	01dd01dd 	.word	0x01dd01dd
  416500:	005c01dd 	.word	0x005c01dd
  416504:	01dd01dd 	.word	0x01dd01dd
  416508:	01dd01dd 	.word	0x01dd01dd
  41650c:	01dd01dd 	.word	0x01dd01dd
  416510:	01dd01dd 	.word	0x01dd01dd
  416514:	005c01dd 	.word	0x005c01dd
  416518:	005c0130 	.word	0x005c0130
  41651c:	01dd01dd 	.word	0x01dd01dd
  416520:	01dd01dd 	.word	0x01dd01dd
  416524:	01dd005c 	.word	0x01dd005c
  416528:	01dd01dd 	.word	0x01dd01dd
  41652c:	01dd01dd 	.word	0x01dd01dd
  416530:	01bc005c 	.word	0x01bc005c
  416534:	01dd01dd 	.word	0x01dd01dd
  416538:	01dd0153 	.word	0x01dd0153
  41653c:	01dd005c 	.word	0x01dd005c
  416540:	005c01dd 	.word	0x005c01dd
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  416544:	f441 7100 	orr.w	r1, r1, #512	; 0x200
                format++;
  416548:	3401      	adds	r4, #1
                break;
  41654a:	e79f      	b.n	41648c <_vsnprintf+0x198>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  41654c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
                format++;
  416550:	3401      	adds	r4, #1
                break;
  416552:	e79b      	b.n	41648c <_vsnprintf+0x198>
                    if(*format == 'x' || *format == 'X') {
  416554:	f000 03df 	and.w	r3, r0, #223	; 0xdf
  416558:	2b58      	cmp	r3, #88	; 0x58
  41655a:	d009      	beq.n	416570 <_vsnprintf+0x27c>
                    else if(*format == 'o') {
  41655c:	286f      	cmp	r0, #111	; 0x6f
  41655e:	f000 81c1 	beq.w	4168e4 <_vsnprintf+0x5f0>
                    else if(*format == 'b') {
  416562:	2862      	cmp	r0, #98	; 0x62
  416564:	f000 81c0 	beq.w	4168e8 <_vsnprintf+0x5f4>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
  416568:	f021 0110 	bic.w	r1, r1, #16
                        base = 10U;
  41656c:	230a      	movs	r3, #10
  41656e:	e000      	b.n	416572 <_vsnprintf+0x27e>
                        base = 16U;
  416570:	2310      	movs	r3, #16
                    if(*format == 'X') {
  416572:	2858      	cmp	r0, #88	; 0x58
  416574:	d006      	beq.n	416584 <_vsnprintf+0x290>
                    if((*format != 'i') && (*format != 'd')) {
  416576:	2869      	cmp	r0, #105	; 0x69
  416578:	d008      	beq.n	41658c <_vsnprintf+0x298>
  41657a:	2864      	cmp	r0, #100	; 0x64
  41657c:	d006      	beq.n	41658c <_vsnprintf+0x298>
  41657e:	e003      	b.n	416588 <_vsnprintf+0x294>
  416580:	00416001 	.word	0x00416001
                        flags |= FLAGS_UPPERCASE;
  416584:	f041 0120 	orr.w	r1, r1, #32
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
  416588:	f021 010c 	bic.w	r1, r1, #12
                    if(flags & FLAGS_PRECISION) {
  41658c:	f411 6f80 	tst.w	r1, #1024	; 0x400
                        flags &= ~FLAGS_ZEROPAD;
  416590:	bf18      	it	ne
  416592:	f021 0101 	bicne.w	r1, r1, #1
                    if((*format == 'i') || (*format == 'd')) {
  416596:	2869      	cmp	r0, #105	; 0x69
  416598:	d021      	beq.n	4165de <_vsnprintf+0x2ea>
  41659a:	2864      	cmp	r0, #100	; 0x64
  41659c:	d01f      	beq.n	4165de <_vsnprintf+0x2ea>
                        if(flags & FLAGS_LONG_LONG) {
  41659e:	f411 7f00 	tst.w	r1, #512	; 0x200
  4165a2:	d17d      	bne.n	4166a0 <_vsnprintf+0x3ac>
                        else if(flags & FLAGS_LONG) {
  4165a4:	f411 7f80 	tst.w	r1, #256	; 0x100
  4165a8:	f040 8092 	bne.w	4166d0 <_vsnprintf+0x3dc>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  4165ac:	f011 0f40 	tst.w	r1, #64	; 0x40
  4165b0:	f040 80a1 	bne.w	4166f6 <_vsnprintf+0x402>
  4165b4:	f011 0f80 	tst.w	r1, #128	; 0x80
  4165b8:	bf14      	ite	ne
  4165ba:	8832      	ldrhne	r2, [r6, #0]
  4165bc:	6832      	ldreq	r2, [r6, #0]
  4165be:	3604      	adds	r6, #4
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
  4165c0:	9105      	str	r1, [sp, #20]
  4165c2:	9504      	str	r5, [sp, #16]
  4165c4:	9703      	str	r7, [sp, #12]
  4165c6:	9302      	str	r3, [sp, #8]
  4165c8:	2300      	movs	r3, #0
  4165ca:	9301      	str	r3, [sp, #4]
  4165cc:	9200      	str	r2, [sp, #0]
  4165ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4165d0:	465a      	mov	r2, fp
  4165d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4165d4:	4648      	mov	r0, r9
  4165d6:	4da4      	ldr	r5, [pc, #656]	; (416868 <_vsnprintf+0x574>)
  4165d8:	47a8      	blx	r5
  4165da:	4683      	mov	fp, r0
  4165dc:	e020      	b.n	416620 <_vsnprintf+0x32c>
                        if(flags & FLAGS_LONG_LONG) {
  4165de:	f411 7f00 	tst.w	r1, #512	; 0x200
  4165e2:	d11f      	bne.n	416624 <_vsnprintf+0x330>
                        else if(flags & FLAGS_LONG) {
  4165e4:	f411 7f80 	tst.w	r1, #256	; 0x100
  4165e8:	d141      	bne.n	41666e <_vsnprintf+0x37a>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  4165ea:	f011 0f40 	tst.w	r1, #64	; 0x40
  4165ee:	d154      	bne.n	41669a <_vsnprintf+0x3a6>
                                                                                                                                       int) : va_arg(va, int);
  4165f0:	f011 0f80 	tst.w	r1, #128	; 0x80
  4165f4:	bf14      	ite	ne
  4165f6:	f9b6 2000 	ldrshne.w	r2, [r6]
  4165fa:	6832      	ldreq	r2, [r6, #0]
  4165fc:	3604      	adds	r6, #4
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
  4165fe:	9105      	str	r1, [sp, #20]
  416600:	9504      	str	r5, [sp, #16]
  416602:	9703      	str	r7, [sp, #12]
  416604:	9302      	str	r3, [sp, #8]
  416606:	0fd3      	lsrs	r3, r2, #31
  416608:	9301      	str	r3, [sp, #4]
  41660a:	2a00      	cmp	r2, #0
  41660c:	bfb8      	it	lt
  41660e:	4252      	neglt	r2, r2
  416610:	9200      	str	r2, [sp, #0]
  416612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416614:	465a      	mov	r2, fp
  416616:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416618:	4648      	mov	r0, r9
  41661a:	4d93      	ldr	r5, [pc, #588]	; (416868 <_vsnprintf+0x574>)
  41661c:	47a8      	blx	r5
  41661e:	4683      	mov	fp, r0
                    format++;
  416620:	3401      	adds	r4, #1
                    break;
  416622:	e675      	b.n	416310 <_vsnprintf+0x1c>
                            const long long value = va_arg(va, long long);
  416624:	1df2      	adds	r2, r6, #7
  416626:	f022 0207 	bic.w	r2, r2, #7
  41662a:	f102 0608 	add.w	r6, r2, #8
  41662e:	f8d2 e000 	ldr.w	lr, [r2]
  416632:	6850      	ldr	r0, [r2, #4]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
  416634:	9108      	str	r1, [sp, #32]
  416636:	9507      	str	r5, [sp, #28]
  416638:	9706      	str	r7, [sp, #24]
  41663a:	9304      	str	r3, [sp, #16]
  41663c:	2300      	movs	r3, #0
  41663e:	9305      	str	r3, [sp, #20]
  416640:	0fc3      	lsrs	r3, r0, #31
  416642:	9302      	str	r3, [sp, #8]
  416644:	4672      	mov	r2, lr
  416646:	4603      	mov	r3, r0
  416648:	2a00      	cmp	r2, #0
  41664a:	f170 0100 	sbcs.w	r1, r0, #0
  41664e:	db09      	blt.n	416664 <_vsnprintf+0x370>
  416650:	e9cd 2300 	strd	r2, r3, [sp]
  416654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416656:	465a      	mov	r2, fp
  416658:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41665a:	4648      	mov	r0, r9
  41665c:	4d83      	ldr	r5, [pc, #524]	; (41686c <_vsnprintf+0x578>)
  41665e:	47a8      	blx	r5
  416660:	4683      	mov	fp, r0
  416662:	e7dd      	b.n	416620 <_vsnprintf+0x32c>
  416664:	f1de 0200 	rsbs	r2, lr, #0
  416668:	eb60 0340 	sbc.w	r3, r0, r0, lsl #1
  41666c:	e7f0      	b.n	416650 <_vsnprintf+0x35c>
                            const long value = va_arg(va, long);
  41666e:	f106 0804 	add.w	r8, r6, #4
  416672:	6832      	ldr	r2, [r6, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision,
  416674:	9105      	str	r1, [sp, #20]
  416676:	9504      	str	r5, [sp, #16]
  416678:	9703      	str	r7, [sp, #12]
  41667a:	9302      	str	r3, [sp, #8]
  41667c:	0fd3      	lsrs	r3, r2, #31
  41667e:	9301      	str	r3, [sp, #4]
  416680:	2a00      	cmp	r2, #0
  416682:	bfb8      	it	lt
  416684:	4252      	neglt	r2, r2
  416686:	9200      	str	r2, [sp, #0]
  416688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41668a:	465a      	mov	r2, fp
  41668c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41668e:	4648      	mov	r0, r9
  416690:	4d75      	ldr	r5, [pc, #468]	; (416868 <_vsnprintf+0x574>)
  416692:	47a8      	blx	r5
  416694:	4683      	mov	fp, r0
                            const long value = va_arg(va, long);
  416696:	4646      	mov	r6, r8
  416698:	e7c2      	b.n	416620 <_vsnprintf+0x32c>
  41669a:	7832      	ldrb	r2, [r6, #0]
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  41669c:	3604      	adds	r6, #4
  41669e:	e7ae      	b.n	4165fe <_vsnprintf+0x30a>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
  4166a0:	1df2      	adds	r2, r6, #7
  4166a2:	f022 0207 	bic.w	r2, r2, #7
  4166a6:	f102 0608 	add.w	r6, r2, #8
  4166aa:	9108      	str	r1, [sp, #32]
  4166ac:	9507      	str	r5, [sp, #28]
  4166ae:	9706      	str	r7, [sp, #24]
  4166b0:	2100      	movs	r1, #0
  4166b2:	9304      	str	r3, [sp, #16]
  4166b4:	9105      	str	r1, [sp, #20]
  4166b6:	9102      	str	r1, [sp, #8]
  4166b8:	e9d2 2300 	ldrd	r2, r3, [r2]
  4166bc:	e9cd 2300 	strd	r2, r3, [sp]
  4166c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4166c2:	465a      	mov	r2, fp
  4166c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4166c6:	4648      	mov	r0, r9
  4166c8:	4d68      	ldr	r5, [pc, #416]	; (41686c <_vsnprintf+0x578>)
  4166ca:	47a8      	blx	r5
  4166cc:	4683      	mov	fp, r0
  4166ce:	e7a7      	b.n	416620 <_vsnprintf+0x32c>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
  4166d0:	f106 0804 	add.w	r8, r6, #4
  4166d4:	9105      	str	r1, [sp, #20]
  4166d6:	9504      	str	r5, [sp, #16]
  4166d8:	9703      	str	r7, [sp, #12]
  4166da:	9302      	str	r3, [sp, #8]
  4166dc:	2300      	movs	r3, #0
  4166de:	9301      	str	r3, [sp, #4]
  4166e0:	6833      	ldr	r3, [r6, #0]
  4166e2:	9300      	str	r3, [sp, #0]
  4166e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4166e6:	465a      	mov	r2, fp
  4166e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4166ea:	4648      	mov	r0, r9
  4166ec:	4d5e      	ldr	r5, [pc, #376]	; (416868 <_vsnprintf+0x574>)
  4166ee:	47a8      	blx	r5
  4166f0:	4683      	mov	fp, r0
  4166f2:	4646      	mov	r6, r8
  4166f4:	e794      	b.n	416620 <_vsnprintf+0x32c>
  4166f6:	7832      	ldrb	r2, [r6, #0]
                            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va,
  4166f8:	3604      	adds	r6, #4
  4166fa:	e761      	b.n	4165c0 <_vsnprintf+0x2cc>
                    if(!(flags & FLAGS_LEFT)) {
  4166fc:	f011 0f02 	tst.w	r1, #2
  416700:	f040 80c4 	bne.w	41688c <_vsnprintf+0x598>
                        while(l++ < width) {
  416704:	2d01      	cmp	r5, #1
  416706:	f240 80dd 	bls.w	4168c4 <_vsnprintf+0x5d0>
  41670a:	f10b 37ff 	add.w	r7, fp, #4294967295
  41670e:	442f      	add	r7, r5
                            out(' ', buffer, idx++, maxlen);
  416710:	f04f 0820 	mov.w	r8, #32
  416714:	465a      	mov	r2, fp
  416716:	1c55      	adds	r5, r2, #1
  416718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41671a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41671c:	4640      	mov	r0, r8
  41671e:	47c8      	blx	r9
  416720:	462a      	mov	r2, r5
                        while(l++ < width) {
  416722:	42bd      	cmp	r5, r7
  416724:	d1f7      	bne.n	416716 <_vsnprintf+0x422>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
  416726:	1d37      	adds	r7, r6, #4
  416728:	f105 0b01 	add.w	fp, r5, #1
  41672c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41672e:	462a      	mov	r2, r5
  416730:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416732:	7830      	ldrb	r0, [r6, #0]
  416734:	47c8      	blx	r9
  416736:	463e      	mov	r6, r7
                    format++;
  416738:	3401      	adds	r4, #1
                    break;
  41673a:	e5e9      	b.n	416310 <_vsnprintf+0x1c>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
  41673c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  41673e:	46bb      	mov	fp, r7
  416740:	e7fa      	b.n	416738 <_vsnprintf+0x444>
                    const char * p = va_arg(va, char *);
  416742:	1d33      	adds	r3, r6, #4
  416744:	930e      	str	r3, [sp, #56]	; 0x38
  416746:	6833      	ldr	r3, [r6, #0]
  416748:	461a      	mov	r2, r3
  41674a:	930c      	str	r3, [sp, #48]	; 0x30
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
  41674c:	2f00      	cmp	r7, #0
  41674e:	bf14      	ite	ne
  416750:	463b      	movne	r3, r7
  416752:	f04f 33ff 	moveq.w	r3, #4294967295
    for(s = str; *s && maxsize--; ++s);
  416756:	7810      	ldrb	r0, [r2, #0]
  416758:	2800      	cmp	r0, #0
  41675a:	f000 80b5 	beq.w	4168c8 <_vsnprintf+0x5d4>
  41675e:	f812 6f01 	ldrb.w	r6, [r2, #1]!
  416762:	b10e      	cbz	r6, 416768 <_vsnprintf+0x474>
  416764:	3b01      	subs	r3, #1
  416766:	d1fa      	bne.n	41675e <_vsnprintf+0x46a>
    return (unsigned int)(s - str);
  416768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41676a:	1ad3      	subs	r3, r2, r3
  41676c:	930d      	str	r3, [sp, #52]	; 0x34
                    if(flags & FLAGS_PRECISION) {
  41676e:	f411 6a80 	ands.w	sl, r1, #1024	; 0x400
  416772:	d003      	beq.n	41677c <_vsnprintf+0x488>
                        l = (l < precision ? l : precision);
  416774:	42bb      	cmp	r3, r7
  416776:	bf28      	it	cs
  416778:	463b      	movcs	r3, r7
  41677a:	930d      	str	r3, [sp, #52]	; 0x34
                    if(!(flags & FLAGS_LEFT)) {
  41677c:	f011 0302 	ands.w	r3, r1, #2
  416780:	930f      	str	r3, [sp, #60]	; 0x3c
  416782:	f040 80a3 	bne.w	4168cc <_vsnprintf+0x5d8>
                        while(l++ < width) {
  416786:	990d      	ldr	r1, [sp, #52]	; 0x34
  416788:	460b      	mov	r3, r1
  41678a:	3301      	adds	r3, #1
  41678c:	428d      	cmp	r5, r1
  41678e:	f240 80a7 	bls.w	4168e0 <_vsnprintf+0x5ec>
  416792:	eb05 080b 	add.w	r8, r5, fp
  416796:	eba8 0801 	sub.w	r8, r8, r1
                            out(' ', buffer, idx++, maxlen);
  41679a:	465a      	mov	r2, fp
  41679c:	1c56      	adds	r6, r2, #1
  41679e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4167a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4167a2:	2020      	movs	r0, #32
  4167a4:	47c8      	blx	r9
  4167a6:	4632      	mov	r2, r6
                        while(l++ < width) {
  4167a8:	45b0      	cmp	r8, r6
  4167aa:	d1f7      	bne.n	41679c <_vsnprintf+0x4a8>
  4167ac:	1c6b      	adds	r3, r5, #1
  4167ae:	930d      	str	r3, [sp, #52]	; 0x34
                            out(' ', buffer, idx++, maxlen);
  4167b0:	46b3      	mov	fp, r6
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  4167b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4167b4:	7818      	ldrb	r0, [r3, #0]
  4167b6:	2800      	cmp	r0, #0
  4167b8:	f040 8089 	bne.w	4168ce <_vsnprintf+0x5da>
  4167bc:	e023      	b.n	416806 <_vsnprintf+0x512>
  4167be:	461f      	mov	r7, r3
                        out(*(p++), buffer, idx++, maxlen);
  4167c0:	1c56      	adds	r6, r2, #1
  4167c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4167c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4167c6:	47c8      	blx	r9
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  4167c8:	f818 0f01 	ldrb.w	r0, [r8, #1]!
  4167cc:	b140      	cbz	r0, 4167e0 <_vsnprintf+0x4ec>
                        out(*(p++), buffer, idx++, maxlen);
  4167ce:	4632      	mov	r2, r6
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  4167d0:	2c00      	cmp	r4, #0
  4167d2:	d0f5      	beq.n	4167c0 <_vsnprintf+0x4cc>
  4167d4:	1e7b      	subs	r3, r7, #1
  4167d6:	2f00      	cmp	r7, #0
  4167d8:	d1f1      	bne.n	4167be <_vsnprintf+0x4ca>
  4167da:	4654      	mov	r4, sl
  4167dc:	4616      	mov	r6, r2
  4167de:	e000      	b.n	4167e2 <_vsnprintf+0x4ee>
  4167e0:	4654      	mov	r4, sl
                    if(flags & FLAGS_LEFT) {
  4167e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4167e4:	b193      	cbz	r3, 41680c <_vsnprintf+0x518>
                        while(l++ < width) {
  4167e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4167e8:	4295      	cmp	r5, r2
  4167ea:	d911      	bls.n	416810 <_vsnprintf+0x51c>
  4167ec:	4435      	add	r5, r6
  4167ee:	1aad      	subs	r5, r5, r2
                            out(' ', buffer, idx++, maxlen);
  4167f0:	2720      	movs	r7, #32
  4167f2:	4632      	mov	r2, r6
  4167f4:	f102 0b01 	add.w	fp, r2, #1
  4167f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4167fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4167fc:	4638      	mov	r0, r7
  4167fe:	47c8      	blx	r9
  416800:	465a      	mov	r2, fp
                        while(l++ < width) {
  416802:	45ab      	cmp	fp, r5
  416804:	d1f6      	bne.n	4167f4 <_vsnprintf+0x500>
                    format++;
  416806:	3401      	adds	r4, #1
                    const char * p = va_arg(va, char *);
  416808:	9e0e      	ldr	r6, [sp, #56]	; 0x38
                    break;
  41680a:	e581      	b.n	416310 <_vsnprintf+0x1c>
  41680c:	46b3      	mov	fp, r6
  41680e:	e7fa      	b.n	416806 <_vsnprintf+0x512>
                        while(l++ < width) {
  416810:	46b3      	mov	fp, r6
  416812:	e7f8      	b.n	416806 <_vsnprintf+0x512>
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
  416814:	1d35      	adds	r5, r6, #4
                    flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
  416816:	f041 0121 	orr.w	r1, r1, #33	; 0x21
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
  41681a:	9105      	str	r1, [sp, #20]
  41681c:	2308      	movs	r3, #8
  41681e:	9304      	str	r3, [sp, #16]
  416820:	9703      	str	r7, [sp, #12]
  416822:	2310      	movs	r3, #16
  416824:	9302      	str	r3, [sp, #8]
  416826:	2300      	movs	r3, #0
  416828:	9301      	str	r3, [sp, #4]
  41682a:	6833      	ldr	r3, [r6, #0]
  41682c:	9300      	str	r3, [sp, #0]
  41682e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416830:	465a      	mov	r2, fp
  416832:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416834:	4648      	mov	r0, r9
  416836:	4e0c      	ldr	r6, [pc, #48]	; (416868 <_vsnprintf+0x574>)
  416838:	47b0      	blx	r6
  41683a:	4683      	mov	fp, r0
                    format++;
  41683c:	3401      	adds	r4, #1
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
  41683e:	462e      	mov	r6, r5
                    break;
  416840:	e566      	b.n	416310 <_vsnprintf+0x1c>
                out('%', buffer, idx++, maxlen);
  416842:	f10b 0501 	add.w	r5, fp, #1
  416846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416848:	465a      	mov	r2, fp
  41684a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41684c:	2025      	movs	r0, #37	; 0x25
  41684e:	47c8      	blx	r9
                format++;
  416850:	3401      	adds	r4, #1
                out('%', buffer, idx++, maxlen);
  416852:	46ab      	mov	fp, r5
                break;
  416854:	e55c      	b.n	416310 <_vsnprintf+0x1c>

            default :
                out(*format, buffer, idx++, maxlen);
  416856:	f10b 0501 	add.w	r5, fp, #1
  41685a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41685c:	465a      	mov	r2, fp
  41685e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416860:	47c8      	blx	r9
                format++;
  416862:	3401      	adds	r4, #1
                out(*format, buffer, idx++, maxlen);
  416864:	46ab      	mov	fp, r5
                break;
  416866:	e553      	b.n	416310 <_vsnprintf+0x1c>
  416868:	004161b5 	.word	0x004161b5
  41686c:	00416239 	.word	0x00416239
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
  416870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  416872:	4593      	cmp	fp, r2
  416874:	bf2c      	ite	cs
  416876:	f102 32ff 	addcs.w	r2, r2, #4294967295
  41687a:	465a      	movcc	r2, fp
  41687c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41687e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416880:	2000      	movs	r0, #0
  416882:	47c8      	blx	r9

    // return written chars without terminating \0
    return (int)idx;
}
  416884:	4658      	mov	r0, fp
  416886:	b011      	add	sp, #68	; 0x44
  416888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
  41688c:	1d33      	adds	r3, r6, #4
  41688e:	930c      	str	r3, [sp, #48]	; 0x30
  416890:	f10b 0701 	add.w	r7, fp, #1
  416894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416896:	465a      	mov	r2, fp
  416898:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41689a:	7830      	ldrb	r0, [r6, #0]
  41689c:	47c8      	blx	r9
                        while(l++ < width) {
  41689e:	2d01      	cmp	r5, #1
  4168a0:	f67f af4c 	bls.w	41673c <_vsnprintf+0x448>
  4168a4:	eb05 0a0b 	add.w	sl, r5, fp
                            out(' ', buffer, idx++, maxlen);
  4168a8:	f04f 0820 	mov.w	r8, #32
  4168ac:	463a      	mov	r2, r7
  4168ae:	1c56      	adds	r6, r2, #1
  4168b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4168b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4168b4:	4640      	mov	r0, r8
  4168b6:	47c8      	blx	r9
  4168b8:	4632      	mov	r2, r6
                        while(l++ < width) {
  4168ba:	4556      	cmp	r6, sl
  4168bc:	d1f7      	bne.n	4168ae <_vsnprintf+0x5ba>
  4168be:	44ab      	add	fp, r5
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
  4168c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4168c2:	e739      	b.n	416738 <_vsnprintf+0x444>
                        while(l++ < width) {
  4168c4:	465d      	mov	r5, fp
  4168c6:	e72e      	b.n	416726 <_vsnprintf+0x432>
    for(s = str; *s && maxsize--; ++s);
  4168c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4168ca:	e74d      	b.n	416768 <_vsnprintf+0x474>
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  4168cc:	b130      	cbz	r0, 4168dc <_vsnprintf+0x5e8>
  4168ce:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  4168d2:	465a      	mov	r2, fp
  4168d4:	4623      	mov	r3, r4
  4168d6:	4654      	mov	r4, sl
  4168d8:	469a      	mov	sl, r3
  4168da:	e779      	b.n	4167d0 <_vsnprintf+0x4dc>
  4168dc:	465e      	mov	r6, fp
  4168de:	e782      	b.n	4167e6 <_vsnprintf+0x4f2>
                        while(l++ < width) {
  4168e0:	930d      	str	r3, [sp, #52]	; 0x34
  4168e2:	e766      	b.n	4167b2 <_vsnprintf+0x4be>
                        base =  8U;
  4168e4:	2308      	movs	r3, #8
  4168e6:	e64f      	b.n	416588 <_vsnprintf+0x294>
                        base =  2U;
  4168e8:	2302      	movs	r3, #2
  4168ea:	e64d      	b.n	416588 <_vsnprintf+0x294>

004168ec <lv_vsnprintf>:
    va_end(va);
    return ret;
}

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
  4168ec:	b510      	push	{r4, lr}
  4168ee:	b082      	sub	sp, #8
    return _vsnprintf(_out_buffer, buffer, count, format, va);
  4168f0:	9300      	str	r3, [sp, #0]
  4168f2:	4613      	mov	r3, r2
  4168f4:	460a      	mov	r2, r1
  4168f6:	4601      	mov	r1, r0
  4168f8:	4802      	ldr	r0, [pc, #8]	; (416904 <lv_vsnprintf+0x18>)
  4168fa:	4c03      	ldr	r4, [pc, #12]	; (416908 <lv_vsnprintf+0x1c>)
  4168fc:	47a0      	blx	r4
}
  4168fe:	b002      	add	sp, #8
  416900:	bd10      	pop	{r4, pc}
  416902:	bf00      	nop
  416904:	00415ff9 	.word	0x00415ff9
  416908:	004162f5 	.word	0x004162f5

0041690c <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
  41690c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
  41690e:	2118      	movs	r1, #24
  416910:	4803      	ldr	r0, [pc, #12]	; (416920 <_lv_task_core_init+0x14>)
  416912:	4b04      	ldr	r3, [pc, #16]	; (416924 <_lv_task_core_init+0x18>)
  416914:	4798      	blx	r3
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
  416916:	2201      	movs	r2, #1
  416918:	4b03      	ldr	r3, [pc, #12]	; (416928 <_lv_task_core_init+0x1c>)
  41691a:	701a      	strb	r2, [r3, #0]
  41691c:	bd08      	pop	{r3, pc}
  41691e:	bf00      	nop
  416920:	2043a144 	.word	0x2043a144
  416924:	00415343 	.word	0x00415343
  416928:	2041474c 	.word	0x2041474c

0041692c <lv_task_create>:
{
  41692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  416930:	4681      	mov	r9, r0
  416932:	468a      	mov	sl, r1
  416934:	4615      	mov	r5, r2
  416936:	4698      	mov	r8, r3
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  416938:	482d      	ldr	r0, [pc, #180]	; (4169f0 <lv_task_create+0xc4>)
  41693a:	4b2e      	ldr	r3, [pc, #184]	; (4169f4 <lv_task_create+0xc8>)
  41693c:	4798      	blx	r3
    if(NULL == tmp) {
  41693e:	b1d8      	cbz	r0, 416978 <lv_task_create+0x4c>
  416940:	4604      	mov	r4, r0
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  416942:	4f2b      	ldr	r7, [pc, #172]	; (4169f0 <lv_task_create+0xc4>)
  416944:	4e2c      	ldr	r6, [pc, #176]	; (4169f8 <lv_task_create+0xcc>)
            if(tmp->prio <= prio) {
  416946:	7d23      	ldrb	r3, [r4, #20]
  416948:	f003 0307 	and.w	r3, r3, #7
  41694c:	42ab      	cmp	r3, r5
  41694e:	dd22      	ble.n	416996 <lv_task_create+0x6a>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  416950:	4621      	mov	r1, r4
  416952:	4638      	mov	r0, r7
  416954:	47b0      	blx	r6
        } while(tmp != NULL);
  416956:	4604      	mov	r4, r0
  416958:	2800      	cmp	r0, #0
  41695a:	d1f4      	bne.n	416946 <lv_task_create+0x1a>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
  41695c:	4824      	ldr	r0, [pc, #144]	; (4169f0 <lv_task_create+0xc4>)
  41695e:	4b27      	ldr	r3, [pc, #156]	; (4169fc <lv_task_create+0xd0>)
  416960:	4798      	blx	r3
  416962:	4606      	mov	r6, r0
            LV_ASSERT_MEM(new_task);
  416964:	4b26      	ldr	r3, [pc, #152]	; (416a00 <lv_task_create+0xd4>)
  416966:	4798      	blx	r3
  416968:	2800      	cmp	r0, #0
  41696a:	d13d      	bne.n	4169e8 <lv_task_create+0xbc>
  41696c:	4632      	mov	r2, r6
  41696e:	2300      	movs	r3, #0
  416970:	4824      	ldr	r0, [pc, #144]	; (416a04 <lv_task_create+0xd8>)
  416972:	4925      	ldr	r1, [pc, #148]	; (416a08 <lv_task_create+0xdc>)
  416974:	4788      	blx	r1
  416976:	e7fe      	b.n	416976 <lv_task_create+0x4a>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
  416978:	481d      	ldr	r0, [pc, #116]	; (4169f0 <lv_task_create+0xc4>)
  41697a:	4b24      	ldr	r3, [pc, #144]	; (416a0c <lv_task_create+0xe0>)
  41697c:	4798      	blx	r3
  41697e:	4606      	mov	r6, r0
        LV_ASSERT_MEM(new_task);
  416980:	4b1f      	ldr	r3, [pc, #124]	; (416a00 <lv_task_create+0xd4>)
  416982:	4798      	blx	r3
  416984:	b928      	cbnz	r0, 416992 <lv_task_create+0x66>
  416986:	4632      	mov	r2, r6
  416988:	2300      	movs	r3, #0
  41698a:	481e      	ldr	r0, [pc, #120]	; (416a04 <lv_task_create+0xd8>)
  41698c:	491e      	ldr	r1, [pc, #120]	; (416a08 <lv_task_create+0xdc>)
  41698e:	4788      	blx	r1
  416990:	e7fe      	b.n	416990 <lv_task_create+0x64>
        if(new_task == NULL) return NULL;
  416992:	b95e      	cbnz	r6, 4169ac <lv_task_create+0x80>
  416994:	e01f      	b.n	4169d6 <lv_task_create+0xaa>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  416996:	4621      	mov	r1, r4
  416998:	4815      	ldr	r0, [pc, #84]	; (4169f0 <lv_task_create+0xc4>)
  41699a:	4b1d      	ldr	r3, [pc, #116]	; (416a10 <lv_task_create+0xe4>)
  41699c:	4798      	blx	r3
  41699e:	4606      	mov	r6, r0
                LV_ASSERT_MEM(new_task);
  4169a0:	4b17      	ldr	r3, [pc, #92]	; (416a00 <lv_task_create+0xd4>)
  4169a2:	4798      	blx	r3
  4169a4:	b1d0      	cbz	r0, 4169dc <lv_task_create+0xb0>
                if(new_task == NULL) return NULL;
  4169a6:	b1b6      	cbz	r6, 4169d6 <lv_task_create+0xaa>
        if(tmp == NULL) {
  4169a8:	2c00      	cmp	r4, #0
  4169aa:	d0d7      	beq.n	41695c <lv_task_create+0x30>
    task_list_changed = true;
  4169ac:	2401      	movs	r4, #1
  4169ae:	4b19      	ldr	r3, [pc, #100]	; (416a14 <lv_task_create+0xe8>)
  4169b0:	701c      	strb	r4, [r3, #0]
    new_task->period  = period;
  4169b2:	f8c6 a000 	str.w	sl, [r6]
    new_task->task_cb = task_xcb;
  4169b6:	f8c6 9008 	str.w	r9, [r6, #8]
    new_task->prio    = prio;
  4169ba:	7d33      	ldrb	r3, [r6, #20]
  4169bc:	f365 0302 	bfi	r3, r5, #0, #3
  4169c0:	7533      	strb	r3, [r6, #20]
    new_task->repeat_count = -1;
  4169c2:	f04f 33ff 	mov.w	r3, #4294967295
  4169c6:	6133      	str	r3, [r6, #16]
    new_task->last_run = lv_tick_get();
  4169c8:	4b13      	ldr	r3, [pc, #76]	; (416a18 <lv_task_create+0xec>)
  4169ca:	4798      	blx	r3
  4169cc:	6070      	str	r0, [r6, #4]
    new_task->user_data = user_data;
  4169ce:	f8c6 800c 	str.w	r8, [r6, #12]
    task_created = true;
  4169d2:	4b12      	ldr	r3, [pc, #72]	; (416a1c <lv_task_create+0xf0>)
  4169d4:	701c      	strb	r4, [r3, #0]
}
  4169d6:	4630      	mov	r0, r6
  4169d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                LV_ASSERT_MEM(new_task);
  4169dc:	4632      	mov	r2, r6
  4169de:	2300      	movs	r3, #0
  4169e0:	4808      	ldr	r0, [pc, #32]	; (416a04 <lv_task_create+0xd8>)
  4169e2:	4909      	ldr	r1, [pc, #36]	; (416a08 <lv_task_create+0xdc>)
  4169e4:	4788      	blx	r1
  4169e6:	e7fe      	b.n	4169e6 <lv_task_create+0xba>
            if(new_task == NULL) return NULL;
  4169e8:	2e00      	cmp	r6, #0
  4169ea:	d1df      	bne.n	4169ac <lv_task_create+0x80>
  4169ec:	e7f3      	b.n	4169d6 <lv_task_create+0xaa>
  4169ee:	bf00      	nop
  4169f0:	2043a144 	.word	0x2043a144
  4169f4:	004153ed 	.word	0x004153ed
  4169f8:	00415401 	.word	0x00415401
  4169fc:	004153a1 	.word	0x004153a1
  416a00:	004150ef 	.word	0x004150ef
  416a04:	00425a60 	.word	0x00425a60
  416a08:	004150f9 	.word	0x004150f9
  416a0c:	00415355 	.word	0x00415355
  416a10:	0041541d 	.word	0x0041541d
  416a14:	2041474f 	.word	0x2041474f
  416a18:	00414495 	.word	0x00414495
  416a1c:	2041474d 	.word	0x2041474d

00416a20 <lv_task_del>:
{
  416a20:	b510      	push	{r4, lr}
  416a22:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
  416a24:	4601      	mov	r1, r0
  416a26:	4809      	ldr	r0, [pc, #36]	; (416a4c <lv_task_del+0x2c>)
  416a28:	4b09      	ldr	r3, [pc, #36]	; (416a50 <lv_task_del+0x30>)
  416a2a:	4798      	blx	r3
    task_list_changed = true;
  416a2c:	2201      	movs	r2, #1
  416a2e:	4b09      	ldr	r3, [pc, #36]	; (416a54 <lv_task_del+0x34>)
  416a30:	701a      	strb	r2, [r3, #0]
    lv_mem_free(task);
  416a32:	4620      	mov	r0, r4
  416a34:	4b08      	ldr	r3, [pc, #32]	; (416a58 <lv_task_del+0x38>)
  416a36:	4798      	blx	r3
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
  416a38:	4b08      	ldr	r3, [pc, #32]	; (416a5c <lv_task_del+0x3c>)
  416a3a:	681b      	ldr	r3, [r3, #0]
  416a3c:	429c      	cmp	r4, r3
  416a3e:	d000      	beq.n	416a42 <lv_task_del+0x22>
  416a40:	bd10      	pop	{r4, pc}
  416a42:	2201      	movs	r2, #1
  416a44:	4b06      	ldr	r3, [pc, #24]	; (416a60 <lv_task_del+0x40>)
  416a46:	701a      	strb	r2, [r3, #0]
}
  416a48:	e7fa      	b.n	416a40 <lv_task_del+0x20>
  416a4a:	bf00      	nop
  416a4c:	2043a144 	.word	0x2043a144
  416a50:	004154a5 	.word	0x004154a5
  416a54:	2041474f 	.word	0x2041474f
  416a58:	004158b9 	.word	0x004158b9
  416a5c:	2043a214 	.word	0x2043a214
  416a60:	2041474e 	.word	0x2041474e

00416a64 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
  416a64:	b510      	push	{r4, lr}
  416a66:	4604      	mov	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
  416a68:	6840      	ldr	r0, [r0, #4]
  416a6a:	4b0f      	ldr	r3, [pc, #60]	; (416aa8 <lv_task_exec+0x44>)
  416a6c:	4798      	blx	r3
    if(elp >= task->period)
  416a6e:	6823      	ldr	r3, [r4, #0]
  416a70:	4298      	cmp	r0, r3
  416a72:	d201      	bcs.n	416a78 <lv_task_exec+0x14>
    bool exec = false;
  416a74:	2000      	movs	r0, #0
  416a76:	bd10      	pop	{r4, pc}
        task->last_run = lv_tick_get();
  416a78:	4b0c      	ldr	r3, [pc, #48]	; (416aac <lv_task_exec+0x48>)
  416a7a:	4798      	blx	r3
  416a7c:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
  416a7e:	68a3      	ldr	r3, [r4, #8]
  416a80:	b10b      	cbz	r3, 416a86 <lv_task_exec+0x22>
  416a82:	4620      	mov	r0, r4
  416a84:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
  416a86:	4b0a      	ldr	r3, [pc, #40]	; (416ab0 <lv_task_exec+0x4c>)
  416a88:	7818      	ldrb	r0, [r3, #0]
  416a8a:	b938      	cbnz	r0, 416a9c <lv_task_exec+0x38>
            if(task->repeat_count > 0) {
  416a8c:	6923      	ldr	r3, [r4, #16]
  416a8e:	2b00      	cmp	r3, #0
  416a90:	dd01      	ble.n	416a96 <lv_task_exec+0x32>
                task->repeat_count--;
  416a92:	3b01      	subs	r3, #1
  416a94:	6123      	str	r3, [r4, #16]
            if(task->repeat_count == 0) {
  416a96:	6923      	ldr	r3, [r4, #16]
  416a98:	b10b      	cbz	r3, 416a9e <lv_task_exec+0x3a>
        exec = true;
  416a9a:	2001      	movs	r0, #1
}
  416a9c:	bd10      	pop	{r4, pc}
                lv_task_del(task);
  416a9e:	4620      	mov	r0, r4
  416aa0:	4b04      	ldr	r3, [pc, #16]	; (416ab4 <lv_task_exec+0x50>)
  416aa2:	4798      	blx	r3
        exec = true;
  416aa4:	2001      	movs	r0, #1
  416aa6:	bd10      	pop	{r4, pc}
  416aa8:	004144b1 	.word	0x004144b1
  416aac:	00414495 	.word	0x00414495
  416ab0:	2041474e 	.word	0x2041474e
  416ab4:	00416a21 	.word	0x00416a21

00416ab8 <lv_task_handler>:
{
  416ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416abc:	b083      	sub	sp, #12
    if(already_running) return 1;
  416abe:	4b63      	ldr	r3, [pc, #396]	; (416c4c <lv_task_handler+0x194>)
  416ac0:	781b      	ldrb	r3, [r3, #0]
  416ac2:	2b00      	cmp	r3, #0
  416ac4:	f040 80af 	bne.w	416c26 <lv_task_handler+0x16e>
    already_running = true;
  416ac8:	2201      	movs	r2, #1
  416aca:	4b60      	ldr	r3, [pc, #384]	; (416c4c <lv_task_handler+0x194>)
  416acc:	701a      	strb	r2, [r3, #0]
    if(lv_task_run == false) {
  416ace:	4b60      	ldr	r3, [pc, #384]	; (416c50 <lv_task_handler+0x198>)
  416ad0:	781b      	ldrb	r3, [r3, #0]
  416ad2:	b923      	cbnz	r3, 416ade <lv_task_handler+0x26>
        already_running = false; /*Release mutex*/
  416ad4:	2200      	movs	r2, #0
  416ad6:	4b5d      	ldr	r3, [pc, #372]	; (416c4c <lv_task_handler+0x194>)
  416ad8:	701a      	strb	r2, [r3, #0]
        return 1;
  416ada:	2501      	movs	r5, #1
  416adc:	e0a4      	b.n	416c28 <lv_task_handler+0x170>
    uint32_t handler_start = lv_tick_get();
  416ade:	4b5d      	ldr	r3, [pc, #372]	; (416c54 <lv_task_handler+0x19c>)
  416ae0:	4798      	blx	r3
  416ae2:	9001      	str	r0, [sp, #4]
    lv_task_t * task_interrupter = NULL;
  416ae4:	2500      	movs	r5, #0
        task_deleted             = false;
  416ae6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 416c80 <lv_task_handler+0x1c8>
  416aea:	f04f 0b00 	mov.w	fp, #0
        task_created             = false;
  416aee:	f8df a194 	ldr.w	sl, [pc, #404]	; 416c84 <lv_task_handler+0x1cc>
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  416af2:	f8df 8170 	ldr.w	r8, [pc, #368]	; 416c64 <lv_task_handler+0x1ac>
  416af6:	4c58      	ldr	r4, [pc, #352]	; (416c58 <lv_task_handler+0x1a0>)
  416af8:	e09b      	b.n	416c32 <lv_task_handler+0x17a>
                LV_GC_ROOT(_lv_task_act) = next;
  416afa:	6026      	str	r6, [r4, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
  416afc:	2500      	movs	r5, #0
                continue; /*Load the next task*/
  416afe:	e00d      	b.n	416b1c <lv_task_handler+0x64>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
  416b00:	4b56      	ldr	r3, [pc, #344]	; (416c5c <lv_task_handler+0x1a4>)
  416b02:	4798      	blx	r3
            if(task_created || task_deleted) {
  416b04:	f89a 3000 	ldrb.w	r3, [sl]
  416b08:	bb5b      	cbnz	r3, 416b62 <lv_task_handler+0xaa>
  416b0a:	f899 3000 	ldrb.w	r3, [r9]
  416b0e:	bb43      	cbnz	r3, 416b62 <lv_task_handler+0xaa>
            if(task_list_changed) {
  416b10:	4b53      	ldr	r3, [pc, #332]	; (416c60 <lv_task_handler+0x1a8>)
  416b12:	781b      	ldrb	r3, [r3, #0]
  416b14:	2b00      	cmp	r3, #0
  416b16:	f040 808b 	bne.w	416c30 <lv_task_handler+0x178>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
  416b1a:	6026      	str	r6, [r4, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  416b1c:	6821      	ldr	r1, [r4, #0]
  416b1e:	b301      	cbz	r1, 416b62 <lv_task_handler+0xaa>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
  416b20:	4640      	mov	r0, r8
  416b22:	47b8      	blx	r7
  416b24:	4606      	mov	r6, r0
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
  416b26:	6820      	ldr	r0, [r4, #0]
  416b28:	7d03      	ldrb	r3, [r0, #20]
  416b2a:	f013 0307 	ands.w	r3, r3, #7
  416b2e:	d018      	beq.n	416b62 <lv_task_handler+0xaa>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
  416b30:	4285      	cmp	r5, r0
  416b32:	d0e2      	beq.n	416afa <lv_task_handler+0x42>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
  416b34:	2b05      	cmp	r3, #5
  416b36:	d0e3      	beq.n	416b00 <lv_task_handler+0x48>
            else if(task_interrupter) {
  416b38:	2d00      	cmp	r5, #0
  416b3a:	d05e      	beq.n	416bfa <lv_task_handler+0x142>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
  416b3c:	7d02      	ldrb	r2, [r0, #20]
  416b3e:	f002 0207 	and.w	r2, r2, #7
  416b42:	7d2b      	ldrb	r3, [r5, #20]
  416b44:	f003 0307 	and.w	r3, r3, #7
  416b48:	429a      	cmp	r2, r3
  416b4a:	dddb      	ble.n	416b04 <lv_task_handler+0x4c>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  416b4c:	4b43      	ldr	r3, [pc, #268]	; (416c5c <lv_task_handler+0x1a4>)
  416b4e:	4798      	blx	r3
  416b50:	2800      	cmp	r0, #0
  416b52:	d0d7      	beq.n	416b04 <lv_task_handler+0x4c>
                        if(!task_created && !task_deleted) {
  416b54:	f89a 3000 	ldrb.w	r3, [sl]
  416b58:	b91b      	cbnz	r3, 416b62 <lv_task_handler+0xaa>
  416b5a:	f899 3000 	ldrb.w	r3, [r9]
  416b5e:	2b00      	cmp	r3, #0
  416b60:	d049      	beq.n	416bf6 <lv_task_handler+0x13e>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  416b62:	4840      	ldr	r0, [pc, #256]	; (416c64 <lv_task_handler+0x1ac>)
  416b64:	4b40      	ldr	r3, [pc, #256]	; (416c68 <lv_task_handler+0x1b0>)
  416b66:	4798      	blx	r3
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  416b68:	4604      	mov	r4, r0
  416b6a:	2800      	cmp	r0, #0
  416b6c:	d053      	beq.n	416c16 <lv_task_handler+0x15e>
  416b6e:	7d03      	ldrb	r3, [r0, #20]
  416b70:	f013 0f07 	tst.w	r3, #7
  416b74:	d052      	beq.n	416c1c <lv_task_handler+0x164>
  416b76:	f04f 35ff 	mov.w	r5, #4294967295
    uint32_t elp = lv_tick_elaps(task->last_run);
  416b7a:	4f3c      	ldr	r7, [pc, #240]	; (416c6c <lv_task_handler+0x1b4>)
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
  416b7c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 416c64 <lv_task_handler+0x1ac>
  416b80:	4e3b      	ldr	r6, [pc, #236]	; (416c70 <lv_task_handler+0x1b8>)
    uint32_t elp = lv_tick_elaps(task->last_run);
  416b82:	6860      	ldr	r0, [r4, #4]
  416b84:	47b8      	blx	r7
    if(elp >= task->period)
  416b86:	6823      	ldr	r3, [r4, #0]
  416b88:	4298      	cmp	r0, r3
        return 0;
    return task->period - elp;
  416b8a:	bf34      	ite	cc
  416b8c:	1a1b      	subcc	r3, r3, r0
        return 0;
  416b8e:	2300      	movcs	r3, #0
  416b90:	429d      	cmp	r5, r3
  416b92:	bf28      	it	cs
  416b94:	461d      	movcs	r5, r3
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
  416b96:	4621      	mov	r1, r4
  416b98:	4640      	mov	r0, r8
  416b9a:	47b0      	blx	r6
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  416b9c:	4604      	mov	r4, r0
  416b9e:	b118      	cbz	r0, 416ba8 <lv_task_handler+0xf0>
  416ba0:	7d03      	ldrb	r3, [r0, #20]
  416ba2:	f013 0f07 	tst.w	r3, #7
  416ba6:	d1ec      	bne.n	416b82 <lv_task_handler+0xca>
    busy_time += lv_tick_elaps(handler_start);
  416ba8:	9801      	ldr	r0, [sp, #4]
  416baa:	4c30      	ldr	r4, [pc, #192]	; (416c6c <lv_task_handler+0x1b4>)
  416bac:	47a0      	blx	r4
  416bae:	4a31      	ldr	r2, [pc, #196]	; (416c74 <lv_task_handler+0x1bc>)
  416bb0:	6813      	ldr	r3, [r2, #0]
  416bb2:	4403      	add	r3, r0
  416bb4:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
  416bb6:	4b30      	ldr	r3, [pc, #192]	; (416c78 <lv_task_handler+0x1c0>)
  416bb8:	6818      	ldr	r0, [r3, #0]
  416bba:	47a0      	blx	r4
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
  416bbc:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  416bc0:	d315      	bcc.n	416bee <lv_task_handler+0x136>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
  416bc2:	4b2c      	ldr	r3, [pc, #176]	; (416c74 <lv_task_handler+0x1bc>)
  416bc4:	681a      	ldr	r2, [r3, #0]
  416bc6:	2364      	movs	r3, #100	; 0x64
  416bc8:	fb03 f302 	mul.w	r3, r3, r2
  416bcc:	fbb3 f3f0 	udiv	r3, r3, r0
  416bd0:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  416bd2:	2b64      	cmp	r3, #100	; 0x64
  416bd4:	d825      	bhi.n	416c22 <lv_task_handler+0x16a>
  416bd6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  416bda:	b2db      	uxtb	r3, r3
  416bdc:	4a27      	ldr	r2, [pc, #156]	; (416c7c <lv_task_handler+0x1c4>)
  416bde:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
  416be0:	2200      	movs	r2, #0
  416be2:	4b24      	ldr	r3, [pc, #144]	; (416c74 <lv_task_handler+0x1bc>)
  416be4:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
  416be6:	4b1b      	ldr	r3, [pc, #108]	; (416c54 <lv_task_handler+0x19c>)
  416be8:	4798      	blx	r3
  416bea:	4b23      	ldr	r3, [pc, #140]	; (416c78 <lv_task_handler+0x1c0>)
  416bec:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
  416bee:	2200      	movs	r2, #0
  416bf0:	4b16      	ldr	r3, [pc, #88]	; (416c4c <lv_task_handler+0x194>)
  416bf2:	701a      	strb	r2, [r3, #0]
    return time_till_next;
  416bf4:	e018      	b.n	416c28 <lv_task_handler+0x170>
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
  416bf6:	6825      	ldr	r5, [r4, #0]
                            break;
  416bf8:	e01b      	b.n	416c32 <lv_task_handler+0x17a>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  416bfa:	4b18      	ldr	r3, [pc, #96]	; (416c5c <lv_task_handler+0x1a4>)
  416bfc:	4798      	blx	r3
  416bfe:	2800      	cmp	r0, #0
  416c00:	d080      	beq.n	416b04 <lv_task_handler+0x4c>
                    if(!task_created && !task_deleted) {
  416c02:	f89a 3000 	ldrb.w	r3, [sl]
  416c06:	2b00      	cmp	r3, #0
  416c08:	d1ab      	bne.n	416b62 <lv_task_handler+0xaa>
  416c0a:	f899 3000 	ldrb.w	r3, [r9]
  416c0e:	2b00      	cmp	r3, #0
  416c10:	d1a7      	bne.n	416b62 <lv_task_handler+0xaa>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
  416c12:	6825      	ldr	r5, [r4, #0]
                        break;
  416c14:	e00d      	b.n	416c32 <lv_task_handler+0x17a>
    uint32_t time_till_next = LV_NO_TASK_READY;
  416c16:	f04f 35ff 	mov.w	r5, #4294967295
  416c1a:	e7c5      	b.n	416ba8 <lv_task_handler+0xf0>
  416c1c:	f04f 35ff 	mov.w	r5, #4294967295
  416c20:	e7c2      	b.n	416ba8 <lv_task_handler+0xf0>
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  416c22:	2300      	movs	r3, #0
  416c24:	e7da      	b.n	416bdc <lv_task_handler+0x124>
    if(already_running) return 1;
  416c26:	2501      	movs	r5, #1
}
  416c28:	4628      	mov	r0, r5
  416c2a:	b003      	add	sp, #12
  416c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                task_interrupter = NULL;
  416c30:	2500      	movs	r5, #0
        task_deleted             = false;
  416c32:	f889 b000 	strb.w	fp, [r9]
        task_created             = false;
  416c36:	f88a b000 	strb.w	fp, [sl]
        task_list_changed        = false;
  416c3a:	4b09      	ldr	r3, [pc, #36]	; (416c60 <lv_task_handler+0x1a8>)
  416c3c:	f883 b000 	strb.w	fp, [r3]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  416c40:	4640      	mov	r0, r8
  416c42:	4b09      	ldr	r3, [pc, #36]	; (416c68 <lv_task_handler+0x1b0>)
  416c44:	4798      	blx	r3
  416c46:	6020      	str	r0, [r4, #0]
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
  416c48:	4f09      	ldr	r7, [pc, #36]	; (416c70 <lv_task_handler+0x1b8>)
        while(LV_GC_ROOT(_lv_task_act)) {
  416c4a:	e767      	b.n	416b1c <lv_task_handler+0x64>
  416c4c:	2041473c 	.word	0x2041473c
  416c50:	2041474c 	.word	0x2041474c
  416c54:	00414495 	.word	0x00414495
  416c58:	2043a214 	.word	0x2043a214
  416c5c:	00416a65 	.word	0x00416a65
  416c60:	2041474f 	.word	0x2041474f
  416c64:	2043a144 	.word	0x2043a144
  416c68:	004153ed 	.word	0x004153ed
  416c6c:	004144b1 	.word	0x004144b1
  416c70:	00415401 	.word	0x00415401
  416c74:	20414740 	.word	0x20414740
  416c78:	20414748 	.word	0x20414748
  416c7c:	20414744 	.word	0x20414744
  416c80:	2041474e 	.word	0x2041474e
  416c84:	2041474d 	.word	0x2041474d

00416c88 <lv_task_set_prio>:
{
  416c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(task->prio == prio) return;
  416c8c:	7d03      	ldrb	r3, [r0, #20]
  416c8e:	f003 0307 	and.w	r3, r3, #7
  416c92:	428b      	cmp	r3, r1
  416c94:	d031      	beq.n	416cfa <lv_task_set_prio+0x72>
  416c96:	460d      	mov	r5, r1
  416c98:	4688      	mov	r8, r1
  416c9a:	4681      	mov	r9, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  416c9c:	4818      	ldr	r0, [pc, #96]	; (416d00 <lv_task_set_prio+0x78>)
  416c9e:	4b19      	ldr	r3, [pc, #100]	; (416d04 <lv_task_set_prio+0x7c>)
  416ca0:	4798      	blx	r3
  416ca2:	4604      	mov	r4, r0
  416ca4:	b318      	cbz	r0, 416cee <lv_task_set_prio+0x66>
        if(i->prio <= prio) {
  416ca6:	7d03      	ldrb	r3, [r0, #20]
  416ca8:	f003 0307 	and.w	r3, r3, #7
  416cac:	429d      	cmp	r5, r3
  416cae:	da0b      	bge.n	416cc8 <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  416cb0:	4f13      	ldr	r7, [pc, #76]	; (416d00 <lv_task_set_prio+0x78>)
  416cb2:	4e15      	ldr	r6, [pc, #84]	; (416d08 <lv_task_set_prio+0x80>)
  416cb4:	4621      	mov	r1, r4
  416cb6:	4638      	mov	r0, r7
  416cb8:	47b0      	blx	r6
  416cba:	4604      	mov	r4, r0
  416cbc:	b1b8      	cbz	r0, 416cee <lv_task_set_prio+0x66>
        if(i->prio <= prio) {
  416cbe:	7d23      	ldrb	r3, [r4, #20]
  416cc0:	f003 0307 	and.w	r3, r3, #7
  416cc4:	429d      	cmp	r5, r3
  416cc6:	dbf5      	blt.n	416cb4 <lv_task_set_prio+0x2c>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
  416cc8:	45a1      	cmp	r9, r4
  416cca:	d005      	beq.n	416cd8 <lv_task_set_prio+0x50>
  416ccc:	4622      	mov	r2, r4
  416cce:	4649      	mov	r1, r9
  416cd0:	480b      	ldr	r0, [pc, #44]	; (416d00 <lv_task_set_prio+0x78>)
  416cd2:	4b0e      	ldr	r3, [pc, #56]	; (416d0c <lv_task_set_prio+0x84>)
  416cd4:	4798      	blx	r3
    if(i == NULL) {
  416cd6:	b154      	cbz	r4, 416cee <lv_task_set_prio+0x66>
    task_list_changed = true;
  416cd8:	2201      	movs	r2, #1
  416cda:	4b0d      	ldr	r3, [pc, #52]	; (416d10 <lv_task_set_prio+0x88>)
  416cdc:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
  416cde:	f899 3014 	ldrb.w	r3, [r9, #20]
  416ce2:	f368 0302 	bfi	r3, r8, #0, #3
  416ce6:	f889 3014 	strb.w	r3, [r9, #20]
  416cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
  416cee:	2200      	movs	r2, #0
  416cf0:	4649      	mov	r1, r9
  416cf2:	4803      	ldr	r0, [pc, #12]	; (416d00 <lv_task_set_prio+0x78>)
  416cf4:	4b05      	ldr	r3, [pc, #20]	; (416d0c <lv_task_set_prio+0x84>)
  416cf6:	4798      	blx	r3
  416cf8:	e7ee      	b.n	416cd8 <lv_task_set_prio+0x50>
  416cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  416cfe:	bf00      	nop
  416d00:	2043a144 	.word	0x2043a144
  416d04:	004153ed 	.word	0x004153ed
  416d08:	00415401 	.word	0x00415401
  416d0c:	004155d1 	.word	0x004155d1
  416d10:	2041474f 	.word	0x2041474f

00416d14 <lv_task_ready>:
{
  416d14:	b510      	push	{r4, lr}
  416d16:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
  416d18:	4b03      	ldr	r3, [pc, #12]	; (416d28 <lv_task_ready+0x14>)
  416d1a:	4798      	blx	r3
  416d1c:	6823      	ldr	r3, [r4, #0]
  416d1e:	43db      	mvns	r3, r3
  416d20:	4403      	add	r3, r0
  416d22:	6063      	str	r3, [r4, #4]
  416d24:	bd10      	pop	{r4, pc}
  416d26:	bf00      	nop
  416d28:	00414495 	.word	0x00414495

00416d2c <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
  416d2c:	7803      	ldrb	r3, [r0, #0]
  416d2e:	f013 0f80 	tst.w	r3, #128	; 0x80
  416d32:	d101      	bne.n	416d38 <lv_txt_utf8_size+0xc>
        return 1;
  416d34:	2001      	movs	r0, #1
  416d36:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0)
  416d38:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
  416d3c:	2ac0      	cmp	r2, #192	; 0xc0
  416d3e:	d00a      	beq.n	416d56 <lv_txt_utf8_size+0x2a>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
  416d40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  416d44:	2ae0      	cmp	r2, #224	; 0xe0
  416d46:	d008      	beq.n	416d5a <lv_txt_utf8_size+0x2e>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
  416d48:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
  416d4c:	2bf0      	cmp	r3, #240	; 0xf0
  416d4e:	bf0c      	ite	eq
  416d50:	2004      	moveq	r0, #4
  416d52:	2000      	movne	r0, #0
  416d54:	4770      	bx	lr
        return 2;
  416d56:	2002      	movs	r0, #2
  416d58:	4770      	bx	lr
        return 3;
  416d5a:	2003      	movs	r0, #3
}
  416d5c:	4770      	bx	lr

00416d5e <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
  416d5e:	b470      	push	{r4, r5, r6}
  416d60:	b083      	sub	sp, #12
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
  416d62:	2300      	movs	r3, #0
  416d64:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
  416d66:	460c      	mov	r4, r1
  416d68:	b151      	cbz	r1, 416d80 <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
  416d6a:	6822      	ldr	r2, [r4, #0]
  416d6c:	5c83      	ldrb	r3, [r0, r2]
  416d6e:	f013 0f80 	tst.w	r3, #128	; 0x80
  416d72:	d107      	bne.n	416d84 <lv_txt_utf8_next+0x26>
        result = txt[*i];
  416d74:	4618      	mov	r0, r3
        (*i)++;
  416d76:	3201      	adds	r2, #1
  416d78:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
  416d7a:	b003      	add	sp, #12
  416d7c:	bc70      	pop	{r4, r5, r6}
  416d7e:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
  416d80:	ac01      	add	r4, sp, #4
  416d82:	e7f2      	b.n	416d6a <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
  416d84:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
  416d88:	29c0      	cmp	r1, #192	; 0xc0
  416d8a:	d00b      	beq.n	416da4 <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF0) == 0xE0) {
  416d8c:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
  416d90:	29e0      	cmp	r1, #224	; 0xe0
  416d92:	d019      	beq.n	416dc8 <lv_txt_utf8_next+0x6a>
        else if((txt[*i] & 0xF8) == 0xF0) {
  416d94:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
  416d98:	29f0      	cmp	r1, #240	; 0xf0
  416d9a:	d033      	beq.n	416e04 <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
  416d9c:	3201      	adds	r2, #1
  416d9e:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
  416da0:	2000      	movs	r0, #0
  416da2:	e7ea      	b.n	416d7a <lv_txt_utf8_next+0x1c>
            (*i)++;
  416da4:	1c51      	adds	r1, r2, #1
  416da6:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416da8:	5c40      	ldrb	r0, [r0, r1]
  416daa:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  416dae:	2980      	cmp	r1, #128	; 0x80
  416db0:	d001      	beq.n	416db6 <lv_txt_utf8_next+0x58>
  416db2:	2000      	movs	r0, #0
  416db4:	e7e1      	b.n	416d7a <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
  416db6:	019b      	lsls	r3, r3, #6
  416db8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
  416dbc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  416dc0:	4418      	add	r0, r3
            (*i)++;
  416dc2:	3202      	adds	r2, #2
  416dc4:	6022      	str	r2, [r4, #0]
  416dc6:	e7d8      	b.n	416d7a <lv_txt_utf8_next+0x1c>
            (*i)++;
  416dc8:	1c51      	adds	r1, r2, #1
  416dca:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416dcc:	5c41      	ldrb	r1, [r0, r1]
  416dce:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  416dd2:	2d80      	cmp	r5, #128	; 0x80
  416dd4:	d001      	beq.n	416dda <lv_txt_utf8_next+0x7c>
  416dd6:	2000      	movs	r0, #0
  416dd8:	e7cf      	b.n	416d7a <lv_txt_utf8_next+0x1c>
            (*i)++;
  416dda:	1c95      	adds	r5, r2, #2
  416ddc:	6025      	str	r5, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416dde:	5d40      	ldrb	r0, [r0, r5]
  416de0:	f000 05c0 	and.w	r5, r0, #192	; 0xc0
  416de4:	2d80      	cmp	r5, #128	; 0x80
  416de6:	d001      	beq.n	416dec <lv_txt_utf8_next+0x8e>
  416de8:	2000      	movs	r0, #0
  416dea:	e7c6      	b.n	416d7a <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
  416dec:	031b      	lsls	r3, r3, #12
  416dee:	b29b      	uxth	r3, r3
            result += (txt[*i] & 0x3F);
  416df0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  416df4:	4403      	add	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  416df6:	0188      	lsls	r0, r1, #6
  416df8:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
  416dfc:	4418      	add	r0, r3
            (*i)++;
  416dfe:	3203      	adds	r2, #3
  416e00:	6022      	str	r2, [r4, #0]
  416e02:	e7ba      	b.n	416d7a <lv_txt_utf8_next+0x1c>
            (*i)++;
  416e04:	1c51      	adds	r1, r2, #1
  416e06:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416e08:	5c41      	ldrb	r1, [r0, r1]
  416e0a:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  416e0e:	2d80      	cmp	r5, #128	; 0x80
  416e10:	d001      	beq.n	416e16 <lv_txt_utf8_next+0xb8>
  416e12:	2000      	movs	r0, #0
  416e14:	e7b1      	b.n	416d7a <lv_txt_utf8_next+0x1c>
            (*i)++;
  416e16:	1c95      	adds	r5, r2, #2
  416e18:	6025      	str	r5, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416e1a:	5d45      	ldrb	r5, [r0, r5]
  416e1c:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
  416e20:	2e80      	cmp	r6, #128	; 0x80
  416e22:	d001      	beq.n	416e28 <lv_txt_utf8_next+0xca>
  416e24:	2000      	movs	r0, #0
  416e26:	e7a8      	b.n	416d7a <lv_txt_utf8_next+0x1c>
            (*i)++;
  416e28:	1cd6      	adds	r6, r2, #3
  416e2a:	6026      	str	r6, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416e2c:	5d86      	ldrb	r6, [r0, r6]
  416e2e:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
  416e32:	2880      	cmp	r0, #128	; 0x80
  416e34:	d001      	beq.n	416e3a <lv_txt_utf8_next+0xdc>
  416e36:	2000      	movs	r0, #0
  416e38:	e79f      	b.n	416d7a <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
  416e3a:	049b      	lsls	r3, r3, #18
  416e3c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
  416e40:	0309      	lsls	r1, r1, #12
  416e42:	f401 307c 	and.w	r0, r1, #258048	; 0x3f000
  416e46:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  416e48:	01a8      	lsls	r0, r5, #6
  416e4a:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
  416e4e:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  416e52:	4430      	add	r0, r6
  416e54:	4418      	add	r0, r3
            (*i)++;
  416e56:	3204      	adds	r2, #4
  416e58:	6022      	str	r2, [r4, #0]
  416e5a:	e78e      	b.n	416d7a <lv_txt_utf8_next+0x1c>

00416e5c <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
  416e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  416e5e:	b083      	sub	sp, #12
  416e60:	4606      	mov	r6, r0
  416e62:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
  416e64:	680b      	ldr	r3, [r1, #0]
  416e66:	3b01      	subs	r3, #1
  416e68:	600b      	str	r3, [r1, #0]
  416e6a:	2404      	movs	r4, #4
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
  416e6c:	4f0e      	ldr	r7, [pc, #56]	; (416ea8 <lv_txt_utf8_prev+0x4c>)
  416e6e:	e005      	b.n	416e7c <lv_txt_utf8_prev+0x20>
        if(c_size == 0) {
            if(*i != 0)
                (*i)--;
  416e70:	3801      	subs	r0, #1
  416e72:	6028      	str	r0, [r5, #0]
  416e74:	1e63      	subs	r3, r4, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  416e76:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  416e7a:	d008      	beq.n	416e8e <lv_txt_utf8_prev+0x32>
        c_size = _lv_txt_encoded_size(&txt[*i]);
  416e7c:	6828      	ldr	r0, [r5, #0]
  416e7e:	4430      	add	r0, r6
  416e80:	683b      	ldr	r3, [r7, #0]
  416e82:	4798      	blx	r3
        if(c_size == 0) {
  416e84:	b928      	cbnz	r0, 416e92 <lv_txt_utf8_prev+0x36>
            if(*i != 0)
  416e86:	6828      	ldr	r0, [r5, #0]
  416e88:	2800      	cmp	r0, #0
  416e8a:	d1f1      	bne.n	416e70 <lv_txt_utf8_prev+0x14>
  416e8c:	e009      	b.n	416ea2 <lv_txt_utf8_prev+0x46>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  416e8e:	2000      	movs	r0, #0
  416e90:	e007      	b.n	416ea2 <lv_txt_utf8_prev+0x46>
                return 0;
        }
        cnt++;
    } while(c_size == 0);

    uint32_t i_tmp  = *i;
  416e92:	682b      	ldr	r3, [r5, #0]
  416e94:	a902      	add	r1, sp, #8
  416e96:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
  416e9a:	4b04      	ldr	r3, [pc, #16]	; (416eac <lv_txt_utf8_prev+0x50>)
  416e9c:	681b      	ldr	r3, [r3, #0]
  416e9e:	4630      	mov	r0, r6
  416ea0:	4798      	blx	r3

    return letter;
}
  416ea2:	b003      	add	sp, #12
  416ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  416ea6:	bf00      	nop
  416ea8:	20400090 	.word	0x20400090
  416eac:	20400088 	.word	0x20400088

00416eb0 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
  416eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
    for(i = 0; i < utf8_id; i++) {
  416eb4:	460e      	mov	r6, r1
  416eb6:	b191      	cbz	r1, 416ede <lv_txt_utf8_get_byte_id+0x2e>
  416eb8:	4607      	mov	r7, r0
  416eba:	2400      	movs	r4, #0
  416ebc:	4625      	mov	r5, r4
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
  416ebe:	f8df 8024 	ldr.w	r8, [pc, #36]	; 416ee4 <lv_txt_utf8_get_byte_id+0x34>
  416ec2:	1938      	adds	r0, r7, r4
  416ec4:	f8d8 3000 	ldr.w	r3, [r8]
  416ec8:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
  416eca:	2800      	cmp	r0, #0
  416ecc:	bf08      	it	eq
  416ece:	2001      	moveq	r0, #1
  416ed0:	4404      	add	r4, r0
    for(i = 0; i < utf8_id; i++) {
  416ed2:	3501      	adds	r5, #1
  416ed4:	42ae      	cmp	r6, r5
  416ed6:	d1f4      	bne.n	416ec2 <lv_txt_utf8_get_byte_id+0x12>
    }

    return byte_cnt;
}
  416ed8:	4620      	mov	r0, r4
  416eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t byte_cnt = 0;
  416ede:	460c      	mov	r4, r1
    return byte_cnt;
  416ee0:	e7fa      	b.n	416ed8 <lv_txt_utf8_get_byte_id+0x28>
  416ee2:	bf00      	nop
  416ee4:	20400090 	.word	0x20400090

00416ee8 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
  416ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
  416eea:	b083      	sub	sp, #12
    uint32_t i        = 0;
  416eec:	2300      	movs	r3, #0
  416eee:	9301      	str	r3, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
  416ef0:	460d      	mov	r5, r1
  416ef2:	b169      	cbz	r1, 416f10 <lv_txt_utf8_get_char_id+0x28>
  416ef4:	4606      	mov	r6, r0
  416ef6:	461c      	mov	r4, r3
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
  416ef8:	4f06      	ldr	r7, [pc, #24]	; (416f14 <lv_txt_utf8_get_char_id+0x2c>)
  416efa:	a901      	add	r1, sp, #4
  416efc:	4630      	mov	r0, r6
  416efe:	683b      	ldr	r3, [r7, #0]
  416f00:	4798      	blx	r3
        char_cnt++;
  416f02:	3401      	adds	r4, #1
    while(i < byte_id) {
  416f04:	9b01      	ldr	r3, [sp, #4]
  416f06:	42ab      	cmp	r3, r5
  416f08:	d3f7      	bcc.n	416efa <lv_txt_utf8_get_char_id+0x12>
    }

    return char_cnt;
}
  416f0a:	4620      	mov	r0, r4
  416f0c:	b003      	add	sp, #12
  416f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t char_cnt = 0;
  416f10:	460c      	mov	r4, r1
    return char_cnt;
  416f12:	e7fa      	b.n	416f0a <lv_txt_utf8_get_char_id+0x22>
  416f14:	20400088 	.word	0x20400088

00416f18 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
  416f18:	b570      	push	{r4, r5, r6, lr}
  416f1a:	b082      	sub	sp, #8
    uint32_t len = 0;
    uint32_t i   = 0;
  416f1c:	2300      	movs	r3, #0
  416f1e:	9301      	str	r3, [sp, #4]

    while(txt[i] != '\0') {
  416f20:	7803      	ldrb	r3, [r0, #0]
  416f22:	b173      	cbz	r3, 416f42 <lv_txt_utf8_get_length+0x2a>
  416f24:	4604      	mov	r4, r0
  416f26:	2500      	movs	r5, #0
        _lv_txt_encoded_next(txt, &i);
  416f28:	4e07      	ldr	r6, [pc, #28]	; (416f48 <lv_txt_utf8_get_length+0x30>)
  416f2a:	a901      	add	r1, sp, #4
  416f2c:	4620      	mov	r0, r4
  416f2e:	6833      	ldr	r3, [r6, #0]
  416f30:	4798      	blx	r3
        len++;
  416f32:	3501      	adds	r5, #1
    while(txt[i] != '\0') {
  416f34:	9b01      	ldr	r3, [sp, #4]
  416f36:	5ce3      	ldrb	r3, [r4, r3]
  416f38:	2b00      	cmp	r3, #0
  416f3a:	d1f6      	bne.n	416f2a <lv_txt_utf8_get_length+0x12>
    }

    return len;
}
  416f3c:	4628      	mov	r0, r5
  416f3e:	b002      	add	sp, #8
  416f40:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t len = 0;
  416f42:	2500      	movs	r5, #0
    return len;
  416f44:	e7fa      	b.n	416f3c <lv_txt_utf8_get_length+0x24>
  416f46:	bf00      	nop
  416f48:	20400088 	.word	0x20400088

00416f4c <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  416f4c:	2923      	cmp	r1, #35	; 0x23
  416f4e:	d004      	beq.n	416f5a <_lv_txt_is_cmd+0xe>
    if(*state == LV_TXT_CMD_STATE_PAR) {
  416f50:	7803      	ldrb	r3, [r0, #0]
  416f52:	2b01      	cmp	r3, #1
  416f54:	d015      	beq.n	416f82 <_lv_txt_is_cmd+0x36>
    bool ret = false;
  416f56:	2000      	movs	r0, #0
  416f58:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
  416f5a:	7803      	ldrb	r3, [r0, #0]
  416f5c:	b91b      	cbnz	r3, 416f66 <_lv_txt_is_cmd+0x1a>
            *state = LV_TXT_CMD_STATE_PAR;
  416f5e:	2301      	movs	r3, #1
  416f60:	7003      	strb	r3, [r0, #0]
        ret = true;
  416f62:	4618      	mov	r0, r3
  416f64:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
  416f66:	2b01      	cmp	r3, #1
  416f68:	d003      	beq.n	416f72 <_lv_txt_is_cmd+0x26>
        else if(*state == LV_TXT_CMD_STATE_IN) {
  416f6a:	2b02      	cmp	r3, #2
  416f6c:	d005      	beq.n	416f7a <_lv_txt_is_cmd+0x2e>
    bool ret = false;
  416f6e:	2000      	movs	r0, #0
}
  416f70:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_WAIT;
  416f72:	2300      	movs	r3, #0
  416f74:	7003      	strb	r3, [r0, #0]
    bool ret = false;
  416f76:	4618      	mov	r0, r3
  416f78:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_WAIT;
  416f7a:	2300      	movs	r3, #0
  416f7c:	7003      	strb	r3, [r0, #0]
            ret    = true;
  416f7e:	2001      	movs	r0, #1
  416f80:	4770      	bx	lr
        if(c == ' ') {
  416f82:	2920      	cmp	r1, #32
  416f84:	d103      	bne.n	416f8e <_lv_txt_is_cmd+0x42>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
  416f86:	2302      	movs	r3, #2
  416f88:	7003      	strb	r3, [r0, #0]
        ret = true;
  416f8a:	2001      	movs	r0, #1
  416f8c:	4770      	bx	lr
  416f8e:	2001      	movs	r0, #1
  416f90:	4770      	bx	lr
	...

00416f94 <_lv_txt_get_next_line>:
{
  416f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416f98:	b091      	sub	sp, #68	; 0x44
  416f9a:	9008      	str	r0, [sp, #32]
  416f9c:	9205      	str	r2, [sp, #20]
  416f9e:	9307      	str	r3, [sp, #28]
  416fa0:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
  416fa4:	9304      	str	r3, [sp, #16]
    if(font == NULL) return 0;
  416fa6:	9106      	str	r1, [sp, #24]
  416fa8:	2900      	cmp	r1, #0
  416faa:	f000 80fa 	beq.w	4171a2 <_lv_txt_get_next_line+0x20e>
  416fae:	2800      	cmp	r0, #0
  416fb0:	f000 80f7 	beq.w	4171a2 <_lv_txt_get_next_line+0x20e>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
  416fb4:	f013 0f12 	tst.w	r3, #18
  416fb8:	d01e      	beq.n	416ff8 <_lv_txt_get_next_line+0x64>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
  416fba:	7803      	ldrb	r3, [r0, #0]
  416fbc:	2b0d      	cmp	r3, #13
  416fbe:	d805      	bhi.n	416fcc <_lv_txt_get_next_line+0x38>
  416fc0:	f242 4201 	movw	r2, #9217	; 0x2401
  416fc4:	40da      	lsrs	r2, r3
  416fc6:	f012 0f01 	tst.w	r2, #1
  416fca:	d10f      	bne.n	416fec <_lv_txt_get_next_line+0x58>
  416fcc:	9a08      	ldr	r2, [sp, #32]
{
  416fce:	2000      	movs	r0, #0
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
  416fd0:	f242 4401 	movw	r4, #9217	; 0x2401
  416fd4:	e004      	b.n	416fe0 <_lv_txt_get_next_line+0x4c>
  416fd6:	fa24 f103 	lsr.w	r1, r4, r3
  416fda:	f011 0f01 	tst.w	r1, #1
  416fde:	d106      	bne.n	416fee <_lv_txt_get_next_line+0x5a>
  416fe0:	3001      	adds	r0, #1
  416fe2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  416fe6:	2b0d      	cmp	r3, #13
  416fe8:	d8fa      	bhi.n	416fe0 <_lv_txt_get_next_line+0x4c>
  416fea:	e7f4      	b.n	416fd6 <_lv_txt_get_next_line+0x42>
  416fec:	2000      	movs	r0, #0
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
  416fee:	2b00      	cmp	r3, #0
  416ff0:	f000 80ce 	beq.w	417190 <_lv_txt_get_next_line+0x1fc>
  416ff4:	3001      	adds	r0, #1
  416ff6:	e0cb      	b.n	417190 <_lv_txt_get_next_line+0x1fc>
  416ff8:	9b04      	ldr	r3, [sp, #16]
  416ffa:	f003 0302 	and.w	r3, r3, #2
  416ffe:	461a      	mov	r2, r3
  417000:	930b      	str	r3, [sp, #44]	; 0x2c
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  417002:	f647 4318 	movw	r3, #31768	; 0x7c18
  417006:	9907      	ldr	r1, [sp, #28]
  417008:	2a00      	cmp	r2, #0
  41700a:	bf18      	it	ne
  41700c:	4619      	movne	r1, r3
  41700e:	9107      	str	r1, [sp, #28]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  417010:	2300      	movs	r3, #0
  417012:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    uint32_t i = 0;                                        /* Iterating index into txt */
  417016:	930e      	str	r3, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
  417018:	f8df 9198 	ldr.w	r9, [pc, #408]	; 4171b4 <_lv_txt_get_next_line+0x220>
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  41701c:	f8df a198 	ldr.w	sl, [pc, #408]	; 4171b8 <_lv_txt_get_next_line+0x224>
    while(txt[i] != '\0' && max_width > 0) {
  417020:	e088      	b.n	417134 <_lv_txt_get_next_line+0x1a0>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  417022:	9a01      	ldr	r2, [sp, #4]
  417024:	4621      	mov	r1, r4
  417026:	9806      	ldr	r0, [sp, #24]
  417028:	4b5f      	ldr	r3, [pc, #380]	; (4171a8 <_lv_txt_get_next_line+0x214>)
  41702a:	4798      	blx	r3
        cur_w += letter_w;
  41702c:	4405      	add	r5, r0
  41702e:	b2ad      	uxth	r5, r5
        if(letter_w > 0) {
  417030:	b200      	sxth	r0, r0
  417032:	2800      	cmp	r0, #0
  417034:	dd02      	ble.n	41703c <_lv_txt_get_next_line+0xa8>
            cur_w += letter_space;
  417036:	9b05      	ldr	r3, [sp, #20]
  417038:	441d      	add	r5, r3
  41703a:	b2ad      	uxth	r5, r5
  41703c:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  41703e:	f1b7 3fff 	cmp.w	r7, #4294967295
  417042:	d038      	beq.n	4170b6 <_lv_txt_get_next_line+0x122>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  417044:	f1a4 020a 	sub.w	r2, r4, #10
  417048:	2a16      	cmp	r2, #22
  41704a:	d83b      	bhi.n	4170c4 <_lv_txt_get_next_line+0x130>
  41704c:	4b57      	ldr	r3, [pc, #348]	; (4171ac <_lv_txt_get_next_line+0x218>)
  41704e:	40d3      	lsrs	r3, r2
  417050:	f013 0f01 	tst.w	r3, #1
  417054:	d139      	bne.n	4170ca <_lv_txt_get_next_line+0x136>
  417056:	2301      	movs	r3, #1
  417058:	222c      	movs	r2, #44	; 0x2c
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
  41705a:	4294      	cmp	r4, r2
  41705c:	d035      	beq.n	4170ca <_lv_txt_get_next_line+0x136>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  41705e:	3301      	adds	r3, #1
  417060:	b2db      	uxtb	r3, r3
  417062:	f81a 2003 	ldrb.w	r2, [sl, r3]
  417066:	2a00      	cmp	r2, #0
  417068:	d1f7      	bne.n	41705a <_lv_txt_get_next_line+0xc6>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
  41706a:	f1b7 3fff 	cmp.w	r7, #4294967295
  41706e:	bf08      	it	eq
  417070:	46ab      	moveq	fp, r5
        i = i_next;
  417072:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        i_next = i_next_next;
  417074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417076:	930c      	str	r3, [sp, #48]	; 0x30
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
  417078:	9b03      	ldr	r3, [sp, #12]
  41707a:	9302      	str	r3, [sp, #8]
  41707c:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
  41707e:	f818 3006 	ldrb.w	r3, [r8, r6]
  417082:	2b00      	cmp	r3, #0
  417084:	d02a      	beq.n	4170dc <_lv_txt_get_next_line+0x148>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
  417086:	f8d9 3000 	ldr.w	r3, [r9]
  41708a:	a90d      	add	r1, sp, #52	; 0x34
  41708c:	4640      	mov	r0, r8
  41708e:	4798      	blx	r3
  417090:	9001      	str	r0, [sp, #4]
        word_len++;
  417092:	9b02      	ldr	r3, [sp, #8]
  417094:	3301      	adds	r3, #1
  417096:	9303      	str	r3, [sp, #12]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  417098:	9b04      	ldr	r3, [sp, #16]
  41709a:	f013 0f01 	tst.w	r3, #1
  41709e:	d0c0      	beq.n	417022 <_lv_txt_get_next_line+0x8e>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
  4170a0:	4621      	mov	r1, r4
  4170a2:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
  4170a6:	4b42      	ldr	r3, [pc, #264]	; (4171b0 <_lv_txt_get_next_line+0x21c>)
  4170a8:	4798      	blx	r3
  4170aa:	2800      	cmp	r0, #0
  4170ac:	d0b9      	beq.n	417022 <_lv_txt_get_next_line+0x8e>
                i = i_next;
  4170ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                i_next = i_next_next;
  4170b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4170b2:	930c      	str	r3, [sp, #48]	; 0x30
  4170b4:	e7e0      	b.n	417078 <_lv_txt_get_next_line+0xe4>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  4170b6:	9b05      	ldr	r3, [sp, #20]
  4170b8:	1aeb      	subs	r3, r5, r3
  4170ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4170bc:	4293      	cmp	r3, r2
  4170be:	bfc8      	it	gt
  4170c0:	4637      	movgt	r7, r6
  4170c2:	e7bf      	b.n	417044 <_lv_txt_get_next_line+0xb0>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  4170c4:	2301      	movs	r3, #1
  4170c6:	222c      	movs	r2, #44	; 0x2c
  4170c8:	e7c7      	b.n	41705a <_lv_txt_get_next_line+0xc6>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
  4170ca:	b93e      	cbnz	r6, 4170dc <_lv_txt_get_next_line+0x148>
  4170cc:	f1b7 3fff 	cmp.w	r7, #4294967295
  4170d0:	bf14      	ite	ne
  4170d2:	2300      	movne	r3, #0
  4170d4:	2301      	moveq	r3, #1
  4170d6:	2b00      	cmp	r3, #0
  4170d8:	bf18      	it	ne
  4170da:	46ab      	movne	fp, r5
    if(break_index == NO_BREAK_FOUND) {
  4170dc:	f1b7 3fff 	cmp.w	r7, #4294967295
  4170e0:	d00a      	beq.n	4170f8 <_lv_txt_get_next_line+0x164>
    if(force) return break_index;
  4170e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4170e4:	b183      	cbz	r3, 417108 <_lv_txt_get_next_line+0x174>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
  4170e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4170e8:	2b00      	cmp	r3, #0
  4170ea:	d150      	bne.n	41718e <_lv_txt_get_next_line+0x1fa>
  4170ec:	4b31      	ldr	r3, [pc, #196]	; (4171b4 <_lv_txt_get_next_line+0x220>)
  4170ee:	681b      	ldr	r3, [r3, #0]
  4170f0:	a90e      	add	r1, sp, #56	; 0x38
  4170f2:	9808      	ldr	r0, [sp, #32]
  4170f4:	4798      	blx	r3
  4170f6:	e048      	b.n	41718a <_lv_txt_get_next_line+0x1f6>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
  4170f8:	9b02      	ldr	r3, [sp, #8]
  4170fa:	b123      	cbz	r3, 417106 <_lv_txt_get_next_line+0x172>
  4170fc:	2c0d      	cmp	r4, #13
  4170fe:	d140      	bne.n	417182 <_lv_txt_get_next_line+0x1ee>
  417100:	9b01      	ldr	r3, [sp, #4]
  417102:	2b0a      	cmp	r3, #10
  417104:	d13d      	bne.n	417182 <_lv_txt_get_next_line+0x1ee>
  417106:	9f0c      	ldr	r7, [sp, #48]	; 0x30
        max_width -= word_w;
  417108:	9b07      	ldr	r3, [sp, #28]
  41710a:	eba3 0b0b 	sub.w	fp, r3, fp
  41710e:	fa0f f38b 	sxth.w	r3, fp
  417112:	9307      	str	r3, [sp, #28]
        if(advance == 0) {
  417114:	2f00      	cmp	r7, #0
  417116:	d0e6      	beq.n	4170e6 <_lv_txt_get_next_line+0x152>
        i += advance;
  417118:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  41711a:	443e      	add	r6, r7
  41711c:	960e      	str	r6, [sp, #56]	; 0x38
        if(txt[0] == '\n' || txt[0] == '\r') break;
  41711e:	9a08      	ldr	r2, [sp, #32]
  417120:	7813      	ldrb	r3, [r2, #0]
  417122:	2b0a      	cmp	r3, #10
  417124:	d031      	beq.n	41718a <_lv_txt_get_next_line+0x1f6>
  417126:	2b0d      	cmp	r3, #13
  417128:	d02f      	beq.n	41718a <_lv_txt_get_next_line+0x1f6>
        if(txt[i] == '\n' || txt[i] == '\r') {
  41712a:	5d93      	ldrb	r3, [r2, r6]
  41712c:	2b0a      	cmp	r3, #10
  41712e:	d02a      	beq.n	417186 <_lv_txt_get_next_line+0x1f2>
  417130:	2b0d      	cmp	r3, #13
  417132:	d028      	beq.n	417186 <_lv_txt_get_next_line+0x1f2>
    while(txt[i] != '\0' && max_width > 0) {
  417134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  417136:	930a      	str	r3, [sp, #40]	; 0x28
  417138:	9908      	ldr	r1, [sp, #32]
  41713a:	eb01 0803 	add.w	r8, r1, r3
  41713e:	5ccb      	ldrb	r3, [r1, r3]
  417140:	b31b      	cbz	r3, 41718a <_lv_txt_get_next_line+0x1f6>
  417142:	9b07      	ldr	r3, [sp, #28]
  417144:	2b00      	cmp	r3, #0
  417146:	dd20      	ble.n	41718a <_lv_txt_get_next_line+0x1f6>
    if(txt == NULL || txt[0] == '\0') return 0;
  417148:	f1b8 0f00 	cmp.w	r8, #0
  41714c:	d0cb      	beq.n	4170e6 <_lv_txt_get_next_line+0x152>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  41714e:	f647 4318 	movw	r3, #31768	; 0x7c18
  417152:	9a07      	ldr	r2, [sp, #28]
  417154:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417156:	2900      	cmp	r1, #0
  417158:	bf08      	it	eq
  41715a:	4613      	moveq	r3, r2
  41715c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
  41715e:	2600      	movs	r6, #0
  417160:	960c      	str	r6, [sp, #48]	; 0x30
  417162:	960d      	str	r6, [sp, #52]	; 0x34
    letter = _lv_txt_encoded_next(txt, &i_next);
  417164:	f8d9 3000 	ldr.w	r3, [r9]
  417168:	a90c      	add	r1, sp, #48	; 0x30
  41716a:	4640      	mov	r0, r8
  41716c:	4798      	blx	r3
  41716e:	4604      	mov	r4, r0
    i_next_next = i_next;
  417170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  417172:	930d      	str	r3, [sp, #52]	; 0x34
        uint32_t word_w = 0;
  417174:	46b3      	mov	fp, r6
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
  417176:	f04f 37ff 	mov.w	r7, #4294967295
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
  41717a:	9602      	str	r6, [sp, #8]
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
  41717c:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /* Letter at i_next */
  41717e:	9601      	str	r6, [sp, #4]
  417180:	e77d      	b.n	41707e <_lv_txt_get_next_line+0xea>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
  417182:	4637      	mov	r7, r6
  417184:	e7c0      	b.n	417108 <_lv_txt_get_next_line+0x174>
            i++;  /* Include the following newline in the current line */
  417186:	3601      	adds	r6, #1
  417188:	960e      	str	r6, [sp, #56]	; 0x38
    if(i == 0) {
  41718a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41718c:	b11b      	cbz	r3, 417196 <_lv_txt_get_next_line+0x202>
    return i;
  41718e:	980e      	ldr	r0, [sp, #56]	; 0x38
}
  417190:	b011      	add	sp, #68	; 0x44
  417192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _lv_txt_encoded_next(txt, &i);
  417196:	4b07      	ldr	r3, [pc, #28]	; (4171b4 <_lv_txt_get_next_line+0x220>)
  417198:	681b      	ldr	r3, [r3, #0]
  41719a:	a90e      	add	r1, sp, #56	; 0x38
  41719c:	9808      	ldr	r0, [sp, #32]
  41719e:	4798      	blx	r3
  4171a0:	e7f5      	b.n	41718e <_lv_txt_get_next_line+0x1fa>
    if(font == NULL) return 0;
  4171a2:	2000      	movs	r0, #0
  4171a4:	e7f4      	b.n	417190 <_lv_txt_get_next_line+0x1fc>
  4171a6:	bf00      	nop
  4171a8:	00412f7d 	.word	0x00412f7d
  4171ac:	00400009 	.word	0x00400009
  4171b0:	00416f4d 	.word	0x00416f4d
  4171b4:	20400088 	.word	0x20400088
  4171b8:	004306b4 	.word	0x004306b4

004171bc <_lv_txt_get_width>:
{
  4171bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4171c0:	b085      	sub	sp, #20
    if(font == NULL) return 0;
  4171c2:	2a00      	cmp	r2, #0
  4171c4:	d041      	beq.n	41724a <_lv_txt_get_width+0x8e>
  4171c6:	4614      	mov	r4, r2
  4171c8:	2800      	cmp	r0, #0
  4171ca:	d03e      	beq.n	41724a <_lv_txt_get_width+0x8e>
    uint32_t i                   = 0;
  4171cc:	2200      	movs	r2, #0
  4171ce:	9203      	str	r2, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  4171d0:	f88d 200b 	strb.w	r2, [sp, #11]
    if(length != 0) {
  4171d4:	b151      	cbz	r1, 4171ec <_lv_txt_get_width+0x30>
  4171d6:	9401      	str	r4, [sp, #4]
  4171d8:	469b      	mov	fp, r3
  4171da:	4689      	mov	r9, r1
  4171dc:	4605      	mov	r5, r0
  4171de:	2400      	movs	r4, #0
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
  4171e0:	4f1b      	ldr	r7, [pc, #108]	; (417250 <_lv_txt_get_width+0x94>)
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  4171e2:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
  4171e6:	f00a 0a01 	and.w	sl, sl, #1
  4171ea:	e00c      	b.n	417206 <_lv_txt_get_width+0x4a>
    lv_coord_t width             = 0;
  4171ec:	4614      	mov	r4, r2
  4171ee:	e028      	b.n	417242 <_lv_txt_get_width+0x86>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
  4171f0:	4642      	mov	r2, r8
  4171f2:	4631      	mov	r1, r6
  4171f4:	9801      	ldr	r0, [sp, #4]
  4171f6:	4b17      	ldr	r3, [pc, #92]	; (417254 <_lv_txt_get_width+0x98>)
  4171f8:	4798      	blx	r3
            if(char_width > 0) {
  4171fa:	b203      	sxth	r3, r0
  4171fc:	2b00      	cmp	r3, #0
  4171fe:	dd02      	ble.n	417206 <_lv_txt_get_width+0x4a>
                width += letter_space;
  417200:	445c      	add	r4, fp
  417202:	4404      	add	r4, r0
  417204:	b224      	sxth	r4, r4
        while(i < length) {
  417206:	9b03      	ldr	r3, [sp, #12]
  417208:	4599      	cmp	r9, r3
  41720a:	d915      	bls.n	417238 <_lv_txt_get_width+0x7c>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
  41720c:	683b      	ldr	r3, [r7, #0]
  41720e:	a903      	add	r1, sp, #12
  417210:	4628      	mov	r0, r5
  417212:	4798      	blx	r3
  417214:	4606      	mov	r6, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
  417216:	683b      	ldr	r3, [r7, #0]
  417218:	2100      	movs	r1, #0
  41721a:	9803      	ldr	r0, [sp, #12]
  41721c:	4428      	add	r0, r5
  41721e:	4798      	blx	r3
  417220:	4680      	mov	r8, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  417222:	f1ba 0f00 	cmp.w	sl, #0
  417226:	d0e3      	beq.n	4171f0 <_lv_txt_get_width+0x34>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
  417228:	4631      	mov	r1, r6
  41722a:	f10d 000b 	add.w	r0, sp, #11
  41722e:	4b0a      	ldr	r3, [pc, #40]	; (417258 <_lv_txt_get_width+0x9c>)
  417230:	4798      	blx	r3
  417232:	2800      	cmp	r0, #0
  417234:	d1e7      	bne.n	417206 <_lv_txt_get_width+0x4a>
  417236:	e7db      	b.n	4171f0 <_lv_txt_get_width+0x34>
        if(width > 0) {
  417238:	2c00      	cmp	r4, #0
  41723a:	dd02      	ble.n	417242 <_lv_txt_get_width+0x86>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
  41723c:	eba4 040b 	sub.w	r4, r4, fp
  417240:	b224      	sxth	r4, r4
}
  417242:	4620      	mov	r0, r4
  417244:	b005      	add	sp, #20
  417246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
  41724a:	2400      	movs	r4, #0
  41724c:	e7f9      	b.n	417242 <_lv_txt_get_width+0x86>
  41724e:	bf00      	nop
  417250:	20400088 	.word	0x20400088
  417254:	00412f7d 	.word	0x00412f7d
  417258:	00416f4d 	.word	0x00416f4d

0041725c <_lv_txt_get_size>:
{
  41725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417260:	b089      	sub	sp, #36	; 0x24
  417262:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
  417266:	9406      	str	r4, [sp, #24]
  417268:	f9bd 504c 	ldrsh.w	r5, [sp, #76]	; 0x4c
  41726c:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    size_res->x = 0;
  417270:	2400      	movs	r4, #0
  417272:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
  417274:	8044      	strh	r4, [r0, #2]
    if(font == NULL) return;
  417276:	2a00      	cmp	r2, #0
  417278:	d051      	beq.n	41731e <_lv_txt_get_size+0xc2>
  41727a:	2900      	cmp	r1, #0
  41727c:	d04f      	beq.n	41731e <_lv_txt_get_size+0xc2>
  41727e:	4616      	mov	r6, r2
  417280:	9203      	str	r2, [sp, #12]
  417282:	9302      	str	r3, [sp, #8]
  417284:	4604      	mov	r4, r0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  417286:	f008 0302 	and.w	r3, r8, #2
  41728a:	f647 4218 	movw	r2, #31768	; 0x7c18
  41728e:	2b00      	cmp	r3, #0
  417290:	bf18      	it	ne
  417292:	4615      	movne	r5, r2
  417294:	9504      	str	r5, [sp, #16]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  417296:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
  41729a:	9207      	str	r2, [sp, #28]
    uint16_t letter_height = lv_font_get_line_height(font);
  41729c:	fa1f fa82 	uxth.w	sl, r2
    while(text[line_start] != '\0') {
  4172a0:	780b      	ldrb	r3, [r1, #0]
  4172a2:	2b00      	cmp	r3, #0
  4172a4:	d043      	beq.n	41732e <_lv_txt_get_size+0xd2>
  4172a6:	460e      	mov	r6, r1
  4172a8:	2500      	movs	r5, #0
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
  4172aa:	f8df b090 	ldr.w	fp, [pc, #144]	; 41733c <_lv_txt_get_size+0xe0>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
  4172ae:	9b06      	ldr	r3, [sp, #24]
  4172b0:	449a      	add	sl, r3
  4172b2:	fa1f f98a 	uxth.w	r9, sl
  4172b6:	4647      	mov	r7, r8
  4172b8:	4688      	mov	r8, r1
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
  4172ba:	9700      	str	r7, [sp, #0]
  4172bc:	9b04      	ldr	r3, [sp, #16]
  4172be:	9a02      	ldr	r2, [sp, #8]
  4172c0:	9903      	ldr	r1, [sp, #12]
  4172c2:	4630      	mov	r0, r6
  4172c4:	47d8      	blx	fp
  4172c6:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
  4172c8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  4172cc:	eb0a 0203 	add.w	r2, sl, r3
  4172d0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  4172d4:	d223      	bcs.n	41731e <_lv_txt_get_size+0xc2>
  4172d6:	f8cd 9014 	str.w	r9, [sp, #20]
            size_res->y += line_space;
  4172da:	444b      	add	r3, r9
  4172dc:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
  4172de:	9700      	str	r7, [sp, #0]
  4172e0:	9b02      	ldr	r3, [sp, #8]
  4172e2:	9a03      	ldr	r2, [sp, #12]
  4172e4:	4601      	mov	r1, r0
  4172e6:	4630      	mov	r0, r6
  4172e8:	4e13      	ldr	r6, [pc, #76]	; (417338 <_lv_txt_get_size+0xdc>)
  4172ea:	47b0      	blx	r6
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
  4172ec:	f9b4 3000 	ldrsh.w	r3, [r4]
  4172f0:	4298      	cmp	r0, r3
  4172f2:	bfb8      	it	lt
  4172f4:	4618      	movlt	r0, r3
  4172f6:	8020      	strh	r0, [r4, #0]
    while(text[line_start] != '\0') {
  4172f8:	eb08 0605 	add.w	r6, r8, r5
  4172fc:	f818 3005 	ldrb.w	r3, [r8, r5]
  417300:	2b00      	cmp	r3, #0
  417302:	d1da      	bne.n	4172ba <_lv_txt_get_size+0x5e>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
  417304:	b12d      	cbz	r5, 417312 <_lv_txt_get_size+0xb6>
  417306:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  41730a:	2b0a      	cmp	r3, #10
  41730c:	d00a      	beq.n	417324 <_lv_txt_get_size+0xc8>
  41730e:	2b0d      	cmp	r3, #13
  417310:	d008      	beq.n	417324 <_lv_txt_get_size+0xc8>
    if(size_res->y == 0)
  417312:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  417316:	b153      	cbz	r3, 41732e <_lv_txt_get_size+0xd2>
        size_res->y -= line_space;
  417318:	9a06      	ldr	r2, [sp, #24]
  41731a:	1a9b      	subs	r3, r3, r2
  41731c:	8063      	strh	r3, [r4, #2]
}
  41731e:	b009      	add	sp, #36	; 0x24
  417320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y += letter_height + line_space;
  417324:	8863      	ldrh	r3, [r4, #2]
  417326:	9a05      	ldr	r2, [sp, #20]
  417328:	441a      	add	r2, r3
  41732a:	8062      	strh	r2, [r4, #2]
  41732c:	e7f1      	b.n	417312 <_lv_txt_get_size+0xb6>
        size_res->y = letter_height;
  41732e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  417332:	8063      	strh	r3, [r4, #2]
  417334:	e7f3      	b.n	41731e <_lv_txt_get_size+0xc2>
  417336:	bf00      	nop
  417338:	004171bd 	.word	0x004171bd
  41733c:	00416f95 	.word	0x00416f95

00417340 <_lv_txt_set_text_vfmt>:
{
  417340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  417344:	b082      	sub	sp, #8
  417346:	4607      	mov	r7, r0
  417348:	460d      	mov	r5, r1
    va_copy(ap_copy, ap);
  41734a:	9101      	str	r1, [sp, #4]
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
  41734c:	460b      	mov	r3, r1
  41734e:	4602      	mov	r2, r0
  417350:	2100      	movs	r1, #0
  417352:	4608      	mov	r0, r1
  417354:	4c0f      	ldr	r4, [pc, #60]	; (417394 <_lv_txt_set_text_vfmt+0x54>)
  417356:	47a0      	blx	r4
  417358:	4680      	mov	r8, r0
    text = lv_mem_alloc(len + 1);
  41735a:	1c46      	adds	r6, r0, #1
  41735c:	4630      	mov	r0, r6
  41735e:	4b0e      	ldr	r3, [pc, #56]	; (417398 <_lv_txt_set_text_vfmt+0x58>)
  417360:	4798      	blx	r3
  417362:	4604      	mov	r4, r0
    LV_ASSERT_MEM(text);
  417364:	4b0d      	ldr	r3, [pc, #52]	; (41739c <_lv_txt_set_text_vfmt+0x5c>)
  417366:	4798      	blx	r3
  417368:	b168      	cbz	r0, 417386 <_lv_txt_set_text_vfmt+0x46>
    if(text == NULL) {
  41736a:	b144      	cbz	r4, 41737e <_lv_txt_set_text_vfmt+0x3e>
    text[len] = 0; /* Ensure NULL termination */
  41736c:	2300      	movs	r3, #0
  41736e:	f804 3008 	strb.w	r3, [r4, r8]
    lv_vsnprintf(text, len + 1, fmt, ap);
  417372:	462b      	mov	r3, r5
  417374:	463a      	mov	r2, r7
  417376:	4631      	mov	r1, r6
  417378:	4620      	mov	r0, r4
  41737a:	4d06      	ldr	r5, [pc, #24]	; (417394 <_lv_txt_set_text_vfmt+0x54>)
  41737c:	47a8      	blx	r5
}
  41737e:	4620      	mov	r0, r4
  417380:	b002      	add	sp, #8
  417382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(text);
  417386:	4622      	mov	r2, r4
  417388:	2300      	movs	r3, #0
  41738a:	4805      	ldr	r0, [pc, #20]	; (4173a0 <_lv_txt_set_text_vfmt+0x60>)
  41738c:	4905      	ldr	r1, [pc, #20]	; (4173a4 <_lv_txt_set_text_vfmt+0x64>)
  41738e:	4788      	blx	r1
  417390:	e7fe      	b.n	417390 <_lv_txt_set_text_vfmt+0x50>
  417392:	bf00      	nop
  417394:	004168ed 	.word	0x004168ed
  417398:	004157c9 	.word	0x004157c9
  41739c:	004150ef 	.word	0x004150ef
  4173a0:	00425a60 	.word	0x00425a60
  4173a4:	004150f9 	.word	0x004150f9

004173a8 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
  4173a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4173ac:	4681      	mov	r9, r0
  4173ae:	468a      	mov	sl, r1
  4173b0:	461f      	mov	r7, r3
  4173b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
  4173b6:	4614      	mov	r4, r2
  4173b8:	b932      	cbnz	r2, 4173c8 <_lv_utils_bsearch+0x20>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
  4173ba:	2000      	movs	r0, #0
  4173bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(c < 0) {
  4173c0:	2800      	cmp	r0, #0
  4173c2:	da14      	bge.n	4173ee <_lv_utils_bsearch+0x46>
            n /= 2;
  4173c4:	462c      	mov	r4, r5
    for(middle = base; n != 0;) {
  4173c6:	b17c      	cbz	r4, 4173e8 <_lv_utils_bsearch+0x40>
        middle += (n / 2) * size;
  4173c8:	0865      	lsrs	r5, r4, #1
  4173ca:	fb07 a605 	mla	r6, r7, r5, sl
        if((c = (*cmp)(key, middle)) > 0) {
  4173ce:	4631      	mov	r1, r6
  4173d0:	4648      	mov	r0, r9
  4173d2:	47c0      	blx	r8
  4173d4:	2800      	cmp	r0, #0
  4173d6:	ddf3      	ble.n	4173c0 <_lv_utils_bsearch+0x18>
            n    = (n / 2) - ((n & 1) == 0);
  4173d8:	f084 0401 	eor.w	r4, r4, #1
  4173dc:	f004 0401 	and.w	r4, r4, #1
  4173e0:	1b2c      	subs	r4, r5, r4
            base = (middle += size);
  4173e2:	eb06 0a07 	add.w	sl, r6, r7
  4173e6:	e7ee      	b.n	4173c6 <_lv_utils_bsearch+0x1e>
    return NULL;
  4173e8:	2000      	movs	r0, #0
  4173ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
  4173ee:	4630      	mov	r0, r6
}
  4173f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004173f4 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  4173f4:	b570      	push	{r4, r5, r6, lr}
  4173f6:	4604      	mov	r4, r0
  4173f8:	460d      	mov	r5, r1
  4173fa:	4616      	mov	r6, r2
    if(th->base) {
  4173fc:	6880      	ldr	r0, [r0, #8]
  4173fe:	b108      	cbz	r0, 417404 <apply_theme+0x10>
        apply_theme(th->base, obj, name);
  417400:	f7ff fff8 	bl	4173f4 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
  417404:	6863      	ldr	r3, [r4, #4]
  417406:	b11b      	cbz	r3, 417410 <apply_theme+0x1c>
        th->apply_xcb(obj, name);
  417408:	4631      	mov	r1, r6
  41740a:	4628      	mov	r0, r5
  41740c:	4798      	blx	r3
  41740e:	bd70      	pop	{r4, r5, r6, pc}
    }
    else if(th->apply_cb) {
  417410:	6823      	ldr	r3, [r4, #0]
  417412:	b123      	cbz	r3, 41741e <apply_theme+0x2a>
        th->apply_cb(act_theme, obj, name);
  417414:	4632      	mov	r2, r6
  417416:	4629      	mov	r1, r5
  417418:	4801      	ldr	r0, [pc, #4]	; (417420 <apply_theme+0x2c>)
  41741a:	6800      	ldr	r0, [r0, #0]
  41741c:	4798      	blx	r3
  41741e:	bd70      	pop	{r4, r5, r6, pc}
  417420:	20414750 	.word	0x20414750

00417424 <lv_theme_set_act>:
    act_theme = th;
  417424:	4b01      	ldr	r3, [pc, #4]	; (41742c <lv_theme_set_act+0x8>)
  417426:	6018      	str	r0, [r3, #0]
  417428:	4770      	bx	lr
  41742a:	bf00      	nop
  41742c:	20414750 	.word	0x20414750

00417430 <lv_theme_apply>:
{
  417430:	b570      	push	{r4, r5, r6, lr}
  417432:	4604      	mov	r4, r0
  417434:	460d      	mov	r5, r1
    }
}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
    switch(name) {
  417436:	1e4b      	subs	r3, r1, #1
  417438:	2b27      	cmp	r3, #39	; 0x27
  41743a:	d82c      	bhi.n	417496 <lv_theme_apply+0x66>
  41743c:	e8df f013 	tbh	[pc, r3, lsl #1]
  417440:	00320028 	.word	0x00320028
  417444:	004c0071 	.word	0x004c0071
  417448:	003e003a 	.word	0x003e003a
  41744c:	005d0133 	.word	0x005d0133
  417450:	00f00089 	.word	0x00f00089
  417454:	01400036 	.word	0x01400036
  417458:	014b00e3 	.word	0x014b00e3
  41745c:	00650061 	.word	0x00650061
  417460:	00690045 	.word	0x00690045
  417464:	006d009b 	.word	0x006d009b
  417468:	00df00d5 	.word	0x00df00d5
  41746c:	00900147 	.word	0x00900147
  417470:	00d10094 	.word	0x00d10094
  417474:	00ca009f 	.word	0x00ca009f
  417478:	0128007f 	.word	0x0128007f
  41747c:	0078012f 	.word	0x0078012f
  417480:	00fa0053 	.word	0x00fa0053
  417484:	00b900a9 	.word	0x00b900a9
  417488:	00c0011b 	.word	0x00c0011b
  41748c:	0117010a 	.word	0x0117010a
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  417490:	2100      	movs	r1, #0
  417492:	4b96      	ldr	r3, [pc, #600]	; (4176ec <lv_theme_apply+0x2bc>)
  417494:	4798      	blx	r3
    apply_theme(act_theme, obj, name);
  417496:	462a      	mov	r2, r5
  417498:	4621      	mov	r1, r4
  41749a:	4b95      	ldr	r3, [pc, #596]	; (4176f0 <lv_theme_apply+0x2c0>)
  41749c:	6818      	ldr	r0, [r3, #0]
  41749e:	4b95      	ldr	r3, [pc, #596]	; (4176f4 <lv_theme_apply+0x2c4>)
  4174a0:	4798      	blx	r3
  4174a2:	bd70      	pop	{r4, r5, r6, pc}
            break;
        case LV_THEME_OBJ:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  4174a4:	2100      	movs	r1, #0
  4174a6:	4b91      	ldr	r3, [pc, #580]	; (4176ec <lv_theme_apply+0x2bc>)
  4174a8:	4798      	blx	r3
  4174aa:	e7f4      	b.n	417496 <lv_theme_apply+0x66>
            break;
#if LV_USE_CONT
        case LV_THEME_CONT:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  4174ac:	2100      	movs	r1, #0
  4174ae:	4b8f      	ldr	r3, [pc, #572]	; (4176ec <lv_theme_apply+0x2bc>)
  4174b0:	4798      	blx	r3
  4174b2:	e7f0      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  4174b4:	2100      	movs	r1, #0
  4174b6:	4b8d      	ldr	r3, [pc, #564]	; (4176ec <lv_theme_apply+0x2bc>)
  4174b8:	4798      	blx	r3
  4174ba:	e7ec      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
  4174bc:	2100      	movs	r1, #0
  4174be:	4e8b      	ldr	r6, [pc, #556]	; (4176ec <lv_theme_apply+0x2bc>)
  4174c0:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
  4174c2:	2101      	movs	r1, #1
  4174c4:	4620      	mov	r0, r4
  4174c6:	47b0      	blx	r6
  4174c8:	e7e5      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
  4174ca:	2100      	movs	r1, #0
  4174cc:	4e87      	ldr	r6, [pc, #540]	; (4176ec <lv_theme_apply+0x2bc>)
  4174ce:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
  4174d0:	2101      	movs	r1, #1
  4174d2:	4620      	mov	r0, r4
  4174d4:	47b0      	blx	r6
  4174d6:	e7de      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
  4174d8:	2100      	movs	r1, #0
  4174da:	4e84      	ldr	r6, [pc, #528]	; (4176ec <lv_theme_apply+0x2bc>)
  4174dc:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
  4174de:	2101      	movs	r1, #1
  4174e0:	4620      	mov	r0, r4
  4174e2:	47b0      	blx	r6
  4174e4:	e7d7      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
  4174e6:	2100      	movs	r1, #0
  4174e8:	4e80      	ldr	r6, [pc, #512]	; (4176ec <lv_theme_apply+0x2bc>)
  4174ea:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
  4174ec:	2101      	movs	r1, #1
  4174ee:	4620      	mov	r0, r4
  4174f0:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
  4174f2:	2102      	movs	r1, #2
  4174f4:	4620      	mov	r0, r4
  4174f6:	47b0      	blx	r6
  4174f8:	e7cd      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_CANVAS
        case LV_THEME_CANVAS:
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
  4174fa:	2100      	movs	r1, #0
  4174fc:	4b7b      	ldr	r3, [pc, #492]	; (4176ec <lv_theme_apply+0x2bc>)
  4174fe:	4798      	blx	r3
  417500:	e7c9      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_IMG
        case LV_THEME_IMAGE:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  417502:	2100      	movs	r1, #0
  417504:	4b79      	ldr	r3, [pc, #484]	; (4176ec <lv_theme_apply+0x2bc>)
  417506:	4798      	blx	r3
  417508:	e7c5      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_IMGBTN
        case LV_THEME_IMGBTN:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  41750a:	2100      	movs	r1, #0
  41750c:	4b77      	ldr	r3, [pc, #476]	; (4176ec <lv_theme_apply+0x2bc>)
  41750e:	4798      	blx	r3
  417510:	e7c1      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_LABEL
        case LV_THEME_LABEL:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  417512:	2100      	movs	r1, #0
  417514:	4b75      	ldr	r3, [pc, #468]	; (4176ec <lv_theme_apply+0x2bc>)
  417516:	4798      	blx	r3
  417518:	e7bd      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_LINE
        case LV_THEME_LINE:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  41751a:	2100      	movs	r1, #0
  41751c:	4b73      	ldr	r3, [pc, #460]	; (4176ec <lv_theme_apply+0x2bc>)
  41751e:	4798      	blx	r3
  417520:	e7b9      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
  417522:	2100      	movs	r1, #0
  417524:	4e71      	ldr	r6, [pc, #452]	; (4176ec <lv_theme_apply+0x2bc>)
  417526:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
  417528:	2101      	movs	r1, #1
  41752a:	4620      	mov	r0, r4
  41752c:	47b0      	blx	r6
  41752e:	e7b2      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
  417530:	2100      	movs	r1, #0
  417532:	4e6e      	ldr	r6, [pc, #440]	; (4176ec <lv_theme_apply+0x2bc>)
  417534:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
  417536:	2101      	movs	r1, #1
  417538:	4620      	mov	r0, r4
  41753a:	47b0      	blx	r6
  41753c:	e7ab      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
  41753e:	2100      	movs	r1, #0
  417540:	4e6a      	ldr	r6, [pc, #424]	; (4176ec <lv_theme_apply+0x2bc>)
  417542:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
  417544:	2101      	movs	r1, #1
  417546:	4620      	mov	r0, r4
  417548:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
  41754a:	2102      	movs	r1, #2
  41754c:	4620      	mov	r0, r4
  41754e:	47b0      	blx	r6
  417550:	e7a1      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
  417552:	2100      	movs	r1, #0
  417554:	4e65      	ldr	r6, [pc, #404]	; (4176ec <lv_theme_apply+0x2bc>)
  417556:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
  417558:	2140      	movs	r1, #64	; 0x40
  41755a:	4620      	mov	r0, r4
  41755c:	47b0      	blx	r6
  41755e:	e79a      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
  417560:	2100      	movs	r1, #0
  417562:	4b62      	ldr	r3, [pc, #392]	; (4176ec <lv_theme_apply+0x2bc>)
  417564:	4798      	blx	r3
  417566:	e796      	b.n	417496 <lv_theme_apply+0x66>
            break;

        case LV_THEME_MSGBOX_BTNS:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  417568:	2140      	movs	r1, #64	; 0x40
  41756a:	4e60      	ldr	r6, [pc, #384]	; (4176ec <lv_theme_apply+0x2bc>)
  41756c:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
  41756e:	2141      	movs	r1, #65	; 0x41
  417570:	4620      	mov	r0, r4
  417572:	47b0      	blx	r6
  417574:	e78f      	b.n	417496 <lv_theme_apply+0x66>
            break;

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
  417576:	2100      	movs	r1, #0
  417578:	4b5c      	ldr	r3, [pc, #368]	; (4176ec <lv_theme_apply+0x2bc>)
  41757a:	4798      	blx	r3
  41757c:	e78b      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  41757e:	2100      	movs	r1, #0
  417580:	4e5a      	ldr	r6, [pc, #360]	; (4176ec <lv_theme_apply+0x2bc>)
  417582:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  417584:	2140      	movs	r1, #64	; 0x40
  417586:	4620      	mov	r0, r4
  417588:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  41758a:	2101      	movs	r1, #1
  41758c:	4620      	mov	r0, r4
  41758e:	47b0      	blx	r6
  417590:	e781      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
  417592:	2100      	movs	r1, #0
  417594:	4e55      	ldr	r6, [pc, #340]	; (4176ec <lv_theme_apply+0x2bc>)
  417596:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
  417598:	2140      	movs	r1, #64	; 0x40
  41759a:	4620      	mov	r0, r4
  41759c:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  41759e:	2141      	movs	r1, #65	; 0x41
  4175a0:	4620      	mov	r0, r4
  4175a2:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
  4175a4:	2143      	movs	r1, #67	; 0x43
  4175a6:	4620      	mov	r0, r4
  4175a8:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  4175aa:	2142      	movs	r1, #66	; 0x42
  4175ac:	4620      	mov	r0, r4
  4175ae:	47b0      	blx	r6
  4175b0:	e771      	b.n	417496 <lv_theme_apply+0x66>
            break;

        case LV_THEME_TABVIEW_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  4175b2:	2100      	movs	r1, #0
  4175b4:	4e4d      	ldr	r6, [pc, #308]	; (4176ec <lv_theme_apply+0x2bc>)
  4175b6:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4175b8:	2140      	movs	r1, #64	; 0x40
  4175ba:	4620      	mov	r0, r4
  4175bc:	47b0      	blx	r6
  4175be:	e76a      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
  4175c0:	2100      	movs	r1, #0
  4175c2:	4e4a      	ldr	r6, [pc, #296]	; (4176ec <lv_theme_apply+0x2bc>)
  4175c4:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  4175c6:	2101      	movs	r1, #1
  4175c8:	4620      	mov	r0, r4
  4175ca:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  4175cc:	2102      	movs	r1, #2
  4175ce:	4620      	mov	r0, r4
  4175d0:	47b0      	blx	r6
  4175d2:	e760      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
  4175d4:	2100      	movs	r1, #0
  4175d6:	4e45      	ldr	r6, [pc, #276]	; (4176ec <lv_theme_apply+0x2bc>)
  4175d8:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
  4175da:	2103      	movs	r1, #3
  4175dc:	4620      	mov	r0, r4
  4175de:	47b0      	blx	r6
  4175e0:	e759      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
  4175e2:	2100      	movs	r1, #0
  4175e4:	4b41      	ldr	r3, [pc, #260]	; (4176ec <lv_theme_apply+0x2bc>)
  4175e6:	4798      	blx	r3
  4175e8:	e755      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
  4175ea:	2100      	movs	r1, #0
  4175ec:	4e3f      	ldr	r6, [pc, #252]	; (4176ec <lv_theme_apply+0x2bc>)
  4175ee:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
  4175f0:	2140      	movs	r1, #64	; 0x40
  4175f2:	4620      	mov	r0, r4
  4175f4:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
  4175f6:	2101      	movs	r1, #1
  4175f8:	4620      	mov	r0, r4
  4175fa:	47b0      	blx	r6
  4175fc:	e74b      	b.n	417496 <lv_theme_apply+0x66>
            break;

        case LV_THEME_LIST_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  4175fe:	2100      	movs	r1, #0
  417600:	4b3a      	ldr	r3, [pc, #232]	; (4176ec <lv_theme_apply+0x2bc>)
  417602:	4798      	blx	r3
  417604:	e747      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
  417606:	2100      	movs	r1, #0
  417608:	4e38      	ldr	r6, [pc, #224]	; (4176ec <lv_theme_apply+0x2bc>)
  41760a:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
  41760c:	2140      	movs	r1, #64	; 0x40
  41760e:	4620      	mov	r0, r4
  417610:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  417612:	2141      	movs	r1, #65	; 0x41
  417614:	4620      	mov	r0, r4
  417616:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  417618:	2142      	movs	r1, #66	; 0x42
  41761a:	4620      	mov	r0, r4
  41761c:	47b0      	blx	r6
  41761e:	e73a      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
  417620:	2100      	movs	r1, #0
  417622:	4e32      	ldr	r6, [pc, #200]	; (4176ec <lv_theme_apply+0x2bc>)
  417624:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
  417626:	2101      	movs	r1, #1
  417628:	4620      	mov	r0, r4
  41762a:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
  41762c:	2102      	movs	r1, #2
  41762e:	4620      	mov	r0, r4
  417630:	47b0      	blx	r6
  417632:	e730      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE:
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
  417634:	2100      	movs	r1, #0
  417636:	4e2d      	ldr	r6, [pc, #180]	; (4176ec <lv_theme_apply+0x2bc>)
  417638:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
  41763a:	2101      	movs	r1, #1
  41763c:	4620      	mov	r0, r4
  41763e:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
  417640:	2102      	movs	r1, #2
  417642:	4620      	mov	r0, r4
  417644:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
  417646:	2103      	movs	r1, #3
  417648:	4620      	mov	r0, r4
  41764a:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
  41764c:	2104      	movs	r1, #4
  41764e:	4620      	mov	r0, r4
  417650:	47b0      	blx	r6
  417652:	e720      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
  417654:	2100      	movs	r1, #0
  417656:	4e25      	ldr	r6, [pc, #148]	; (4176ec <lv_theme_apply+0x2bc>)
  417658:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
  41765a:	2142      	movs	r1, #66	; 0x42
  41765c:	4620      	mov	r0, r4
  41765e:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  417660:	2141      	movs	r1, #65	; 0x41
  417662:	4620      	mov	r0, r4
  417664:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
  417666:	2140      	movs	r1, #64	; 0x40
  417668:	4620      	mov	r0, r4
  41766a:	47b0      	blx	r6
  41766c:	e713      	b.n	417496 <lv_theme_apply+0x66>
            break;

        case LV_THEME_WIN_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  41766e:	2100      	movs	r1, #0
  417670:	4b1e      	ldr	r3, [pc, #120]	; (4176ec <lv_theme_apply+0x2bc>)
  417672:	4798      	blx	r3
  417674:	e70f      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
  417676:	2100      	movs	r1, #0
  417678:	4e1c      	ldr	r6, [pc, #112]	; (4176ec <lv_theme_apply+0x2bc>)
  41767a:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  41767c:	2104      	movs	r1, #4
  41767e:	4620      	mov	r0, r4
  417680:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  417682:	2103      	movs	r1, #3
  417684:	4620      	mov	r0, r4
  417686:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  417688:	2101      	movs	r1, #1
  41768a:	4620      	mov	r0, r4
  41768c:	47b0      	blx	r6
  41768e:	e702      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
  417690:	2100      	movs	r1, #0
  417692:	4e16      	ldr	r6, [pc, #88]	; (4176ec <lv_theme_apply+0x2bc>)
  417694:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
  417696:	2103      	movs	r1, #3
  417698:	4620      	mov	r0, r4
  41769a:	47b0      	blx	r6
  41769c:	e6fb      	b.n	417496 <lv_theme_apply+0x66>
            break;

        case LV_THEME_SPINBOX_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  41769e:	2100      	movs	r1, #0
  4176a0:	4b12      	ldr	r3, [pc, #72]	; (4176ec <lv_theme_apply+0x2bc>)
  4176a2:	4798      	blx	r3
  4176a4:	e6f7      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
  4176a6:	2100      	movs	r1, #0
  4176a8:	4e10      	ldr	r6, [pc, #64]	; (4176ec <lv_theme_apply+0x2bc>)
  4176aa:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
  4176ac:	2103      	movs	r1, #3
  4176ae:	4620      	mov	r0, r4
  4176b0:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
  4176b2:	2101      	movs	r1, #1
  4176b4:	4620      	mov	r0, r4
  4176b6:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  4176b8:	2102      	movs	r1, #2
  4176ba:	4620      	mov	r0, r4
  4176bc:	47b0      	blx	r6
  4176be:	e6ea      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
  4176c0:	2100      	movs	r1, #0
  4176c2:	4e0a      	ldr	r6, [pc, #40]	; (4176ec <lv_theme_apply+0x2bc>)
  4176c4:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
  4176c6:	2101      	movs	r1, #1
  4176c8:	4620      	mov	r0, r4
  4176ca:	47b0      	blx	r6
  4176cc:	e6e3      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
  4176ce:	2100      	movs	r1, #0
  4176d0:	4b06      	ldr	r3, [pc, #24]	; (4176ec <lv_theme_apply+0x2bc>)
  4176d2:	4798      	blx	r3
  4176d4:	e6df      	b.n	417496 <lv_theme_apply+0x66>
            break;
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
  4176d6:	2100      	movs	r1, #0
  4176d8:	4e04      	ldr	r6, [pc, #16]	; (4176ec <lv_theme_apply+0x2bc>)
  4176da:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
  4176dc:	2101      	movs	r1, #1
  4176de:	4620      	mov	r0, r4
  4176e0:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
  4176e2:	2102      	movs	r1, #2
  4176e4:	4620      	mov	r0, r4
  4176e6:	47b0      	blx	r6
  4176e8:	e6d5      	b.n	417496 <lv_theme_apply+0x66>
  4176ea:	bf00      	nop
  4176ec:	004052e1 	.word	0x004052e1
  4176f0:	20414750 	.word	0x20414750
  4176f4:	004173f5 	.word	0x004173f5

004176f8 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
  4176f8:	4b01      	ldr	r3, [pc, #4]	; (417700 <lv_theme_get_font_normal+0x8>)
  4176fa:	681b      	ldr	r3, [r3, #0]
}
  4176fc:	6958      	ldr	r0, [r3, #20]
  4176fe:	4770      	bx	lr
  417700:	20414750 	.word	0x20414750

00417704 <theme_apply>:

    return &theme;
}

static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  417704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  417708:	460c      	mov	r4, r1
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
  41770a:	3a01      	subs	r2, #1
  41770c:	2a27      	cmp	r2, #39	; 0x27
  41770e:	d831      	bhi.n	417774 <theme_apply+0x70>
  417710:	e8df f012 	tbh	[pc, r2, lsl #1]
  417714:	00370028 	.word	0x00370028
  417718:	008800ae 	.word	0x008800ae
  41771c:	0055004b 	.word	0x0055004b
  417720:	003002af 	.word	0x003002af
  417724:	01fd00fd 	.word	0x01fd00fd
  417728:	02cb0041 	.word	0x02cb0041
  41772c:	02ea01d3 	.word	0x02ea01d3
  417730:	00300030 	.word	0x00300030
  417734:	0030006f 	.word	0x0030006f
  417738:	00300131 	.word	0x00300131
  41773c:	01c901b4 	.word	0x01c901b4
  417740:	011202db 	.word	0x011202db
  417744:	01af0121 	.word	0x01af0121
  417748:	019a013b 	.word	0x019a013b
  41774c:	028500e2 	.word	0x028500e2
  417750:	00d202a0 	.word	0x00d202a0
  417754:	02270098 	.word	0x02270098
  417758:	017b0160 	.word	0x017b0160
  41775c:	01850264 	.word	0x01850264
  417760:	025a023f 	.word	0x025a023f
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  417764:	2100      	movs	r1, #0
  417766:	4620      	mov	r0, r4
  417768:	4b96      	ldr	r3, [pc, #600]	; (4179c4 <theme_apply+0x2c0>)
  41776a:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
  41776c:	4b96      	ldr	r3, [pc, #600]	; (4179c8 <theme_apply+0x2c4>)
  41776e:	6819      	ldr	r1, [r3, #0]
  417770:	4b96      	ldr	r3, [pc, #600]	; (4179cc <theme_apply+0x2c8>)
  417772:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  417774:	22ff      	movs	r2, #255	; 0xff
  417776:	4611      	mov	r1, r2
  417778:	4620      	mov	r0, r4
  41777a:	4b95      	ldr	r3, [pc, #596]	; (4179d0 <theme_apply+0x2cc>)
  41777c:	4798      	blx	r3
  41777e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  417782:	2100      	movs	r1, #0
  417784:	4620      	mov	r0, r4
  417786:	4b8f      	ldr	r3, [pc, #572]	; (4179c4 <theme_apply+0x2c0>)
  417788:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  41778a:	4b8f      	ldr	r3, [pc, #572]	; (4179c8 <theme_apply+0x2c4>)
  41778c:	6819      	ldr	r1, [r3, #0]
  41778e:	3104      	adds	r1, #4
  417790:	4b8e      	ldr	r3, [pc, #568]	; (4179cc <theme_apply+0x2c8>)
  417792:	4798      	blx	r3
            break;
  417794:	e7ee      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
  417796:	2100      	movs	r1, #0
  417798:	4620      	mov	r0, r4
  41779a:	4b8a      	ldr	r3, [pc, #552]	; (4179c4 <theme_apply+0x2c0>)
  41779c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  41779e:	4b8a      	ldr	r3, [pc, #552]	; (4179c8 <theme_apply+0x2c4>)
  4177a0:	6819      	ldr	r1, [r3, #0]
  4177a2:	3104      	adds	r1, #4
  4177a4:	4b89      	ldr	r3, [pc, #548]	; (4179cc <theme_apply+0x2c8>)
  4177a6:	4798      	blx	r3
            break;
  4177a8:	e7e4      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  4177aa:	2100      	movs	r1, #0
  4177ac:	4620      	mov	r0, r4
  4177ae:	4b85      	ldr	r3, [pc, #532]	; (4179c4 <theme_apply+0x2c0>)
  4177b0:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
  4177b2:	4b85      	ldr	r3, [pc, #532]	; (4179c8 <theme_apply+0x2c4>)
  4177b4:	6819      	ldr	r1, [r3, #0]
  4177b6:	3110      	adds	r1, #16
  4177b8:	4b84      	ldr	r3, [pc, #528]	; (4179cc <theme_apply+0x2c8>)
  4177ba:	4798      	blx	r3
            break;
  4177bc:	e7da      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
  4177be:	2100      	movs	r1, #0
  4177c0:	4620      	mov	r0, r4
  4177c2:	4f80      	ldr	r7, [pc, #512]	; (4179c4 <theme_apply+0x2c0>)
  4177c4:	47b8      	blx	r7
  4177c6:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4177c8:	4e7f      	ldr	r6, [pc, #508]	; (4179c8 <theme_apply+0x2c4>)
  4177ca:	6831      	ldr	r1, [r6, #0]
  4177cc:	3104      	adds	r1, #4
  4177ce:	4d7f      	ldr	r5, [pc, #508]	; (4179cc <theme_apply+0x2c8>)
  4177d0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  4177d2:	6831      	ldr	r1, [r6, #0]
  4177d4:	3118      	adds	r1, #24
  4177d6:	4640      	mov	r0, r8
  4177d8:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
  4177da:	2101      	movs	r1, #1
  4177dc:	4620      	mov	r0, r4
  4177de:	47b8      	blx	r7
  4177e0:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4177e2:	6831      	ldr	r1, [r6, #0]
  4177e4:	3104      	adds	r1, #4
  4177e6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  4177e8:	6831      	ldr	r1, [r6, #0]
  4177ea:	3108      	adds	r1, #8
  4177ec:	4638      	mov	r0, r7
  4177ee:	47a8      	blx	r5
            break;
  4177f0:	e7c0      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
  4177f2:	2100      	movs	r1, #0
  4177f4:	4620      	mov	r0, r4
  4177f6:	4f73      	ldr	r7, [pc, #460]	; (4179c4 <theme_apply+0x2c0>)
  4177f8:	47b8      	blx	r7
  4177fa:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->scr);
  4177fc:	4e72      	ldr	r6, [pc, #456]	; (4179c8 <theme_apply+0x2c4>)
  4177fe:	6831      	ldr	r1, [r6, #0]
  417800:	4d72      	ldr	r5, [pc, #456]	; (4179cc <theme_apply+0x2c8>)
  417802:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
  417804:	6831      	ldr	r1, [r6, #0]
  417806:	316c      	adds	r1, #108	; 0x6c
  417808:	4640      	mov	r0, r8
  41780a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
  41780c:	2101      	movs	r1, #1
  41780e:	4620      	mov	r0, r4
  417810:	47b8      	blx	r7
  417812:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  417814:	6831      	ldr	r1, [r6, #0]
  417816:	3104      	adds	r1, #4
  417818:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  41781a:	6831      	ldr	r1, [r6, #0]
  41781c:	3108      	adds	r1, #8
  41781e:	4638      	mov	r0, r7
  417820:	47a8      	blx	r5
            break;
  417822:	e7a7      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
  417824:	2100      	movs	r1, #0
  417826:	4620      	mov	r0, r4
  417828:	4f66      	ldr	r7, [pc, #408]	; (4179c4 <theme_apply+0x2c0>)
  41782a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  41782c:	4e66      	ldr	r6, [pc, #408]	; (4179c8 <theme_apply+0x2c4>)
  41782e:	6831      	ldr	r1, [r6, #0]
  417830:	3128      	adds	r1, #40	; 0x28
  417832:	4d66      	ldr	r5, [pc, #408]	; (4179cc <theme_apply+0x2c8>)
  417834:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
  417836:	2101      	movs	r1, #1
  417838:	4620      	mov	r0, r4
  41783a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  41783c:	6831      	ldr	r1, [r6, #0]
  41783e:	312c      	adds	r1, #44	; 0x2c
  417840:	47a8      	blx	r5
            break;
  417842:	e797      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
  417844:	2100      	movs	r1, #0
  417846:	4620      	mov	r0, r4
  417848:	4f5e      	ldr	r7, [pc, #376]	; (4179c4 <theme_apply+0x2c0>)
  41784a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  41784c:	4e5e      	ldr	r6, [pc, #376]	; (4179c8 <theme_apply+0x2c4>)
  41784e:	6831      	ldr	r1, [r6, #0]
  417850:	3128      	adds	r1, #40	; 0x28
  417852:	4d5e      	ldr	r5, [pc, #376]	; (4179cc <theme_apply+0x2c8>)
  417854:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
  417856:	2101      	movs	r1, #1
  417858:	4620      	mov	r0, r4
  41785a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  41785c:	6831      	ldr	r1, [r6, #0]
  41785e:	312c      	adds	r1, #44	; 0x2c
  417860:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
  417862:	2102      	movs	r1, #2
  417864:	4620      	mov	r0, r4
  417866:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
  417868:	6831      	ldr	r1, [r6, #0]
  41786a:	31a0      	adds	r1, #160	; 0xa0
  41786c:	47a8      	blx	r5
            break;
  41786e:	e781      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
  417870:	2100      	movs	r1, #0
  417872:	4620      	mov	r0, r4
  417874:	4f53      	ldr	r7, [pc, #332]	; (4179c4 <theme_apply+0x2c0>)
  417876:	47b8      	blx	r7
  417878:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41787a:	4e53      	ldr	r6, [pc, #332]	; (4179c8 <theme_apply+0x2c4>)
  41787c:	6831      	ldr	r1, [r6, #0]
  41787e:	3104      	adds	r1, #4
  417880:	4d52      	ldr	r5, [pc, #328]	; (4179cc <theme_apply+0x2c8>)
  417882:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
  417884:	6831      	ldr	r1, [r6, #0]
  417886:	3120      	adds	r1, #32
  417888:	4640      	mov	r0, r8
  41788a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
  41788c:	2101      	movs	r1, #1
  41788e:	4620      	mov	r0, r4
  417890:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  417892:	6831      	ldr	r1, [r6, #0]
  417894:	311c      	adds	r1, #28
  417896:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
  417898:	2102      	movs	r1, #2
  41789a:	4620      	mov	r0, r4
  41789c:	47b8      	blx	r7
  41789e:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4178a0:	6831      	ldr	r1, [r6, #0]
  4178a2:	3104      	adds	r1, #4
  4178a4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  4178a6:	6831      	ldr	r1, [r6, #0]
  4178a8:	3108      	adds	r1, #8
  4178aa:	4638      	mov	r0, r7
  4178ac:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_knob);
  4178ae:	6831      	ldr	r1, [r6, #0]
  4178b0:	3124      	adds	r1, #36	; 0x24
  4178b2:	4638      	mov	r0, r7
  4178b4:	47a8      	blx	r5
            break;
  4178b6:	e75d      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
  4178b8:	2100      	movs	r1, #0
  4178ba:	4620      	mov	r0, r4
  4178bc:	4f41      	ldr	r7, [pc, #260]	; (4179c4 <theme_apply+0x2c0>)
  4178be:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
  4178c0:	4e41      	ldr	r6, [pc, #260]	; (4179c8 <theme_apply+0x2c4>)
  4178c2:	6831      	ldr	r1, [r6, #0]
  4178c4:	3120      	adds	r1, #32
  4178c6:	4d41      	ldr	r5, [pc, #260]	; (4179cc <theme_apply+0x2c8>)
  4178c8:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
  4178ca:	2101      	movs	r1, #1
  4178cc:	4620      	mov	r0, r4
  4178ce:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  4178d0:	6831      	ldr	r1, [r6, #0]
  4178d2:	311c      	adds	r1, #28
  4178d4:	47a8      	blx	r5
            break;
  4178d6:	e74d      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
  4178d8:	2100      	movs	r1, #0
  4178da:	4620      	mov	r0, r4
  4178dc:	4f39      	ldr	r7, [pc, #228]	; (4179c4 <theme_apply+0x2c0>)
  4178de:	47b8      	blx	r7
  4178e0:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
  4178e2:	4e39      	ldr	r6, [pc, #228]	; (4179c8 <theme_apply+0x2c4>)
  4178e4:	6831      	ldr	r1, [r6, #0]
  4178e6:	3128      	adds	r1, #40	; 0x28
  4178e8:	4d38      	ldr	r5, [pc, #224]	; (4179cc <theme_apply+0x2c8>)
  4178ea:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
  4178ec:	6831      	ldr	r1, [r6, #0]
  4178ee:	3198      	adds	r1, #152	; 0x98
  4178f0:	4640      	mov	r0, r8
  4178f2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
  4178f4:	2101      	movs	r1, #1
  4178f6:	4620      	mov	r0, r4
  4178f8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  4178fa:	6831      	ldr	r1, [r6, #0]
  4178fc:	312c      	adds	r1, #44	; 0x2c
  4178fe:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
  417900:	2102      	movs	r1, #2
  417902:	4620      	mov	r0, r4
  417904:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
  417906:	6831      	ldr	r1, [r6, #0]
  417908:	3194      	adds	r1, #148	; 0x94
  41790a:	47a8      	blx	r5
            break;
  41790c:	e732      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
  41790e:	2100      	movs	r1, #0
  417910:	4620      	mov	r0, r4
  417912:	4f2c      	ldr	r7, [pc, #176]	; (4179c4 <theme_apply+0x2c0>)
  417914:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cb_bg);
  417916:	4e2c      	ldr	r6, [pc, #176]	; (4179c8 <theme_apply+0x2c4>)
  417918:	6831      	ldr	r1, [r6, #0]
  41791a:	3150      	adds	r1, #80	; 0x50
  41791c:	4d2b      	ldr	r5, [pc, #172]	; (4179cc <theme_apply+0x2c8>)
  41791e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
  417920:	2140      	movs	r1, #64	; 0x40
  417922:	4620      	mov	r0, r4
  417924:	47b8      	blx	r7
  417926:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->btn);
  417928:	6831      	ldr	r1, [r6, #0]
  41792a:	3110      	adds	r1, #16
  41792c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
  41792e:	6831      	ldr	r1, [r6, #0]
  417930:	3154      	adds	r1, #84	; 0x54
  417932:	4638      	mov	r0, r7
  417934:	47a8      	blx	r5
            break;
  417936:	e71d      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
  417938:	2100      	movs	r1, #0
  41793a:	4620      	mov	r0, r4
  41793c:	4b21      	ldr	r3, [pc, #132]	; (4179c4 <theme_apply+0x2c0>)
  41793e:	4798      	blx	r3
  417940:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  417942:	4e21      	ldr	r6, [pc, #132]	; (4179c8 <theme_apply+0x2c4>)
  417944:	6831      	ldr	r1, [r6, #0]
  417946:	3104      	adds	r1, #4
  417948:	4d20      	ldr	r5, [pc, #128]	; (4179cc <theme_apply+0x2c8>)
  41794a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->mbox_bg);
  41794c:	6831      	ldr	r1, [r6, #0]
  41794e:	3180      	adds	r1, #128	; 0x80
  417950:	4638      	mov	r0, r7
  417952:	47a8      	blx	r5
            break;
  417954:	e70e      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  417956:	2140      	movs	r1, #64	; 0x40
  417958:	4620      	mov	r0, r4
  41795a:	4f1a      	ldr	r7, [pc, #104]	; (4179c4 <theme_apply+0x2c0>)
  41795c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
  41795e:	4e1a      	ldr	r6, [pc, #104]	; (4179c8 <theme_apply+0x2c4>)
  417960:	6831      	ldr	r1, [r6, #0]
  417962:	3118      	adds	r1, #24
  417964:	4d19      	ldr	r5, [pc, #100]	; (4179cc <theme_apply+0x2c8>)
  417966:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
  417968:	2141      	movs	r1, #65	; 0x41
  41796a:	4620      	mov	r0, r4
  41796c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
  41796e:	6831      	ldr	r1, [r6, #0]
  417970:	3110      	adds	r1, #16
  417972:	47a8      	blx	r5
            break;
  417974:	e6fe      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
  417976:	2100      	movs	r1, #0
  417978:	4620      	mov	r0, r4
  41797a:	4b12      	ldr	r3, [pc, #72]	; (4179c4 <theme_apply+0x2c0>)
  41797c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
  41797e:	4b12      	ldr	r3, [pc, #72]	; (4179c8 <theme_apply+0x2c4>)
  417980:	6819      	ldr	r1, [r3, #0]
  417982:	3170      	adds	r1, #112	; 0x70
  417984:	4b11      	ldr	r3, [pc, #68]	; (4179cc <theme_apply+0x2c8>)
  417986:	4798      	blx	r3
            break;
  417988:	e6f4      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
  41798a:	2100      	movs	r1, #0
  41798c:	4620      	mov	r0, r4
  41798e:	4f0d      	ldr	r7, [pc, #52]	; (4179c4 <theme_apply+0x2c0>)
  417990:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  417992:	4e0d      	ldr	r6, [pc, #52]	; (4179c8 <theme_apply+0x2c4>)
  417994:	6831      	ldr	r1, [r6, #0]
  417996:	3104      	adds	r1, #4
  417998:	4d0c      	ldr	r5, [pc, #48]	; (4179cc <theme_apply+0x2c8>)
  41799a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  41799c:	2140      	movs	r1, #64	; 0x40
  41799e:	4620      	mov	r0, r4
  4179a0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
  4179a2:	6831      	ldr	r1, [r6, #0]
  4179a4:	3114      	adds	r1, #20
  4179a6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  4179a8:	2101      	movs	r1, #1
  4179aa:	4620      	mov	r0, r4
  4179ac:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4179ae:	6831      	ldr	r1, [r6, #0]
  4179b0:	3184      	adds	r1, #132	; 0x84
  4179b2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
  4179b4:	2102      	movs	r1, #2
  4179b6:	4620      	mov	r0, r4
  4179b8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  4179ba:	6831      	ldr	r1, [r6, #0]
  4179bc:	3188      	adds	r1, #136	; 0x88
  4179be:	47a8      	blx	r5
            break;
  4179c0:	e6d8      	b.n	417774 <theme_apply+0x70>
  4179c2:	bf00      	nop
  4179c4:	00405219 	.word	0x00405219
  4179c8:	20414758 	.word	0x20414758
  4179cc:	004095e9 	.word	0x004095e9
  4179d0:	00406d55 	.word	0x00406d55
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
  4179d4:	2100      	movs	r1, #0
  4179d6:	4620      	mov	r0, r4
  4179d8:	4f9b      	ldr	r7, [pc, #620]	; (417c48 <theme_apply+0x544>)
  4179da:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  4179dc:	4e9b      	ldr	r6, [pc, #620]	; (417c4c <theme_apply+0x548>)
  4179de:	6831      	ldr	r1, [r6, #0]
  4179e0:	4d9b      	ldr	r5, [pc, #620]	; (417c50 <theme_apply+0x54c>)
  4179e2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  4179e4:	2141      	movs	r1, #65	; 0x41
  4179e6:	4620      	mov	r0, r4
  4179e8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  4179ea:	6831      	ldr	r1, [r6, #0]
  4179ec:	31ac      	adds	r1, #172	; 0xac
  4179ee:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
  4179f0:	2143      	movs	r1, #67	; 0x43
  4179f2:	4620      	mov	r0, r4
  4179f4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_indic);
  4179f6:	6831      	ldr	r1, [r6, #0]
  4179f8:	31b0      	adds	r1, #176	; 0xb0
  4179fa:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  4179fc:	2142      	movs	r1, #66	; 0x42
  4179fe:	4620      	mov	r0, r4
  417a00:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns);
  417a02:	6831      	ldr	r1, [r6, #0]
  417a04:	31a8      	adds	r1, #168	; 0xa8
  417a06:	47a8      	blx	r5
            break;
  417a08:	e6b4      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  417a0a:	2140      	movs	r1, #64	; 0x40
  417a0c:	4620      	mov	r0, r4
  417a0e:	4b8e      	ldr	r3, [pc, #568]	; (417c48 <theme_apply+0x544>)
  417a10:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  417a12:	4b8e      	ldr	r3, [pc, #568]	; (417c4c <theme_apply+0x548>)
  417a14:	6819      	ldr	r1, [r3, #0]
  417a16:	31b4      	adds	r1, #180	; 0xb4
  417a18:	4b8d      	ldr	r3, [pc, #564]	; (417c50 <theme_apply+0x54c>)
  417a1a:	4798      	blx	r3
            break;
  417a1c:	e6aa      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
  417a1e:	2100      	movs	r1, #0
  417a20:	4620      	mov	r0, r4
  417a22:	4f89      	ldr	r7, [pc, #548]	; (417c48 <theme_apply+0x544>)
  417a24:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  417a26:	4e89      	ldr	r6, [pc, #548]	; (417c4c <theme_apply+0x548>)
  417a28:	6831      	ldr	r1, [r6, #0]
  417a2a:	4d89      	ldr	r5, [pc, #548]	; (417c50 <theme_apply+0x54c>)
  417a2c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  417a2e:	2101      	movs	r1, #1
  417a30:	4620      	mov	r0, r4
  417a32:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  417a34:	6831      	ldr	r1, [r6, #0]
  417a36:	3184      	adds	r1, #132	; 0x84
  417a38:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  417a3a:	2102      	movs	r1, #2
  417a3c:	4620      	mov	r0, r4
  417a3e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  417a40:	6831      	ldr	r1, [r6, #0]
  417a42:	3188      	adds	r1, #136	; 0x88
  417a44:	47a8      	blx	r5
            break;
  417a46:	e695      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
  417a48:	2100      	movs	r1, #0
  417a4a:	4620      	mov	r0, r4
  417a4c:	4f7e      	ldr	r7, [pc, #504]	; (417c48 <theme_apply+0x544>)
  417a4e:	47b8      	blx	r7
  417a50:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417a52:	4e7e      	ldr	r6, [pc, #504]	; (417c4c <theme_apply+0x548>)
  417a54:	6831      	ldr	r1, [r6, #0]
  417a56:	3104      	adds	r1, #4
  417a58:	4d7d      	ldr	r5, [pc, #500]	; (417c50 <theme_apply+0x54c>)
  417a5a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
  417a5c:	6831      	ldr	r1, [r6, #0]
  417a5e:	318c      	adds	r1, #140	; 0x8c
  417a60:	4640      	mov	r0, r8
  417a62:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
  417a64:	2103      	movs	r1, #3
  417a66:	4620      	mov	r0, r4
  417a68:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
  417a6a:	6831      	ldr	r1, [r6, #0]
  417a6c:	3190      	adds	r1, #144	; 0x90
  417a6e:	47a8      	blx	r5
            break;
  417a70:	e680      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
  417a72:	2100      	movs	r1, #0
  417a74:	4620      	mov	r0, r4
  417a76:	4b74      	ldr	r3, [pc, #464]	; (417c48 <theme_apply+0x544>)
  417a78:	4798      	blx	r3
            break;
  417a7a:	e67b      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
  417a7c:	2100      	movs	r1, #0
  417a7e:	4620      	mov	r0, r4
  417a80:	4f71      	ldr	r7, [pc, #452]	; (417c48 <theme_apply+0x544>)
  417a82:	47b8      	blx	r7
  417a84:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417a86:	4e71      	ldr	r6, [pc, #452]	; (417c4c <theme_apply+0x548>)
  417a88:	6831      	ldr	r1, [r6, #0]
  417a8a:	3104      	adds	r1, #4
  417a8c:	4d70      	ldr	r5, [pc, #448]	; (417c50 <theme_apply+0x54c>)
  417a8e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
  417a90:	6831      	ldr	r1, [r6, #0]
  417a92:	3178      	adds	r1, #120	; 0x78
  417a94:	4640      	mov	r0, r8
  417a96:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
  417a98:	2101      	movs	r1, #1
  417a9a:	4620      	mov	r0, r4
  417a9c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  417a9e:	6831      	ldr	r1, [r6, #0]
  417aa0:	3184      	adds	r1, #132	; 0x84
  417aa2:	47a8      	blx	r5
            break;
  417aa4:	e666      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  417aa6:	2100      	movs	r1, #0
  417aa8:	4620      	mov	r0, r4
  417aaa:	4b67      	ldr	r3, [pc, #412]	; (417c48 <theme_apply+0x544>)
  417aac:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
  417aae:	4b67      	ldr	r3, [pc, #412]	; (417c4c <theme_apply+0x548>)
  417ab0:	6819      	ldr	r1, [r3, #0]
  417ab2:	317c      	adds	r1, #124	; 0x7c
  417ab4:	4b66      	ldr	r3, [pc, #408]	; (417c50 <theme_apply+0x54c>)
  417ab6:	4798      	blx	r3
            break;
  417ab8:	e65c      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
  417aba:	2100      	movs	r1, #0
  417abc:	4620      	mov	r0, r4
  417abe:	4f62      	ldr	r7, [pc, #392]	; (417c48 <theme_apply+0x544>)
  417ac0:	47b8      	blx	r7
  417ac2:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417ac4:	4e61      	ldr	r6, [pc, #388]	; (417c4c <theme_apply+0x548>)
  417ac6:	6831      	ldr	r1, [r6, #0]
  417ac8:	3104      	adds	r1, #4
  417aca:	4d61      	ldr	r5, [pc, #388]	; (417c50 <theme_apply+0x54c>)
  417acc:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  417ace:	6831      	ldr	r1, [r6, #0]
  417ad0:	3108      	adds	r1, #8
  417ad2:	4640      	mov	r0, r8
  417ad4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  417ad6:	6831      	ldr	r1, [r6, #0]
  417ad8:	3118      	adds	r1, #24
  417ada:	4640      	mov	r0, r8
  417adc:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
  417ade:	2140      	movs	r1, #64	; 0x40
  417ae0:	4620      	mov	r0, r4
  417ae2:	47b8      	blx	r7
  417ae4:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417ae6:	6831      	ldr	r1, [r6, #0]
  417ae8:	3104      	adds	r1, #4
  417aea:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
  417aec:	6831      	ldr	r1, [r6, #0]
  417aee:	3158      	adds	r1, #88	; 0x58
  417af0:	4640      	mov	r0, r8
  417af2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  417af4:	2141      	movs	r1, #65	; 0x41
  417af6:	4620      	mov	r0, r4
  417af8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  417afa:	6831      	ldr	r1, [r6, #0]
  417afc:	3184      	adds	r1, #132	; 0x84
  417afe:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  417b00:	2142      	movs	r1, #66	; 0x42
  417b02:	4620      	mov	r0, r4
  417b04:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
  417b06:	6831      	ldr	r1, [r6, #0]
  417b08:	315c      	adds	r1, #92	; 0x5c
  417b0a:	47a8      	blx	r5
            break;
  417b0c:	e632      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
  417b0e:	2100      	movs	r1, #0
  417b10:	4620      	mov	r0, r4
  417b12:	4f4d      	ldr	r7, [pc, #308]	; (417c48 <theme_apply+0x544>)
  417b14:	47b8      	blx	r7
  417b16:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417b18:	4e4c      	ldr	r6, [pc, #304]	; (417c4c <theme_apply+0x548>)
  417b1a:	6831      	ldr	r1, [r6, #0]
  417b1c:	3104      	adds	r1, #4
  417b1e:	4d4c      	ldr	r5, [pc, #304]	; (417c50 <theme_apply+0x54c>)
  417b20:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
  417b22:	6831      	ldr	r1, [r6, #0]
  417b24:	3144      	adds	r1, #68	; 0x44
  417b26:	4640      	mov	r0, r8
  417b28:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  417b2a:	6831      	ldr	r1, [r6, #0]
  417b2c:	3118      	adds	r1, #24
  417b2e:	4640      	mov	r0, r8
  417b30:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
  417b32:	2101      	movs	r1, #1
  417b34:	4620      	mov	r0, r4
  417b36:	47b8      	blx	r7
  417b38:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->pad_small);
  417b3a:	6831      	ldr	r1, [r6, #0]
  417b3c:	3118      	adds	r1, #24
  417b3e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  417b40:	6831      	ldr	r1, [r6, #0]
  417b42:	3148      	adds	r1, #72	; 0x48
  417b44:	4640      	mov	r0, r8
  417b46:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
  417b48:	2103      	movs	r1, #3
  417b4a:	4620      	mov	r0, r4
  417b4c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  417b4e:	6831      	ldr	r1, [r6, #0]
  417b50:	3148      	adds	r1, #72	; 0x48
  417b52:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
  417b54:	2102      	movs	r1, #2
  417b56:	4620      	mov	r0, r4
  417b58:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
  417b5a:	6831      	ldr	r1, [r6, #0]
  417b5c:	314c      	adds	r1, #76	; 0x4c
  417b5e:	47a8      	blx	r5
            break;
  417b60:	e608      	b.n	417774 <theme_apply+0x70>
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
  417b62:	2100      	movs	r1, #0
  417b64:	4620      	mov	r0, r4
  417b66:	4b38      	ldr	r3, [pc, #224]	; (417c48 <theme_apply+0x544>)
  417b68:	4798      	blx	r3
                _lv_style_list_add_style(list, &styles->bg);
  417b6a:	4b38      	ldr	r3, [pc, #224]	; (417c4c <theme_apply+0x548>)
  417b6c:	6819      	ldr	r1, [r3, #0]
  417b6e:	3104      	adds	r1, #4
  417b70:	4b37      	ldr	r3, [pc, #220]	; (417c50 <theme_apply+0x54c>)
  417b72:	4798      	blx	r3
                int idx = 1; /* start value should be 1, not zero, since cell styles
  417b74:	2501      	movs	r5, #1
                    list = lv_obj_get_style_list(obj, idx);
  417b76:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 417c48 <theme_apply+0x544>
                    _lv_style_list_add_style(list, &styles->table_cell);
  417b7a:	4f34      	ldr	r7, [pc, #208]	; (417c4c <theme_apply+0x548>)
  417b7c:	4e34      	ldr	r6, [pc, #208]	; (417c50 <theme_apply+0x54c>)
                    list = lv_obj_get_style_list(obj, idx);
  417b7e:	b2e9      	uxtb	r1, r5
  417b80:	4620      	mov	r0, r4
  417b82:	47c0      	blx	r8
                    _lv_style_list_add_style(list, &styles->table_cell);
  417b84:	6839      	ldr	r1, [r7, #0]
  417b86:	31a4      	adds	r1, #164	; 0xa4
  417b88:	47b0      	blx	r6
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  417b8a:	3501      	adds	r5, #1
  417b8c:	2d05      	cmp	r5, #5
  417b8e:	d1f6      	bne.n	417b7e <theme_apply+0x47a>
  417b90:	e5f0      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
  417b92:	2100      	movs	r1, #0
  417b94:	4620      	mov	r0, r4
  417b96:	4f2c      	ldr	r7, [pc, #176]	; (417c48 <theme_apply+0x544>)
  417b98:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  417b9a:	4e2c      	ldr	r6, [pc, #176]	; (417c4c <theme_apply+0x548>)
  417b9c:	6831      	ldr	r1, [r6, #0]
  417b9e:	4d2c      	ldr	r5, [pc, #176]	; (417c50 <theme_apply+0x54c>)
  417ba0:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
  417ba2:	2142      	movs	r1, #66	; 0x42
  417ba4:	4620      	mov	r0, r4
  417ba6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  417ba8:	6831      	ldr	r1, [r6, #0]
  417baa:	3184      	adds	r1, #132	; 0x84
  417bac:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  417bae:	2141      	movs	r1, #65	; 0x41
  417bb0:	4620      	mov	r0, r4
  417bb2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  417bb4:	6831      	ldr	r1, [r6, #0]
  417bb6:	31b4      	adds	r1, #180	; 0xb4
  417bb8:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
  417bba:	2140      	movs	r1, #64	; 0x40
  417bbc:	4620      	mov	r0, r4
  417bbe:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  417bc0:	6831      	ldr	r1, [r6, #0]
  417bc2:	31ac      	adds	r1, #172	; 0xac
  417bc4:	47a8      	blx	r5
            break;
  417bc6:	e5d5      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  417bc8:	2100      	movs	r1, #0
  417bca:	4620      	mov	r0, r4
  417bcc:	4b1e      	ldr	r3, [pc, #120]	; (417c48 <theme_apply+0x544>)
  417bce:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
  417bd0:	4b1e      	ldr	r3, [pc, #120]	; (417c4c <theme_apply+0x548>)
  417bd2:	6819      	ldr	r1, [r3, #0]
  417bd4:	31a8      	adds	r1, #168	; 0xa8
  417bd6:	4b1e      	ldr	r3, [pc, #120]	; (417c50 <theme_apply+0x54c>)
  417bd8:	4798      	blx	r3
            break;
  417bda:	e5cb      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
  417bdc:	2100      	movs	r1, #0
  417bde:	4620      	mov	r0, r4
  417be0:	4f19      	ldr	r7, [pc, #100]	; (417c48 <theme_apply+0x544>)
  417be2:	47b8      	blx	r7
  417be4:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417be6:	4e19      	ldr	r6, [pc, #100]	; (417c4c <theme_apply+0x548>)
  417be8:	6831      	ldr	r1, [r6, #0]
  417bea:	3104      	adds	r1, #4
  417bec:	4d18      	ldr	r5, [pc, #96]	; (417c50 <theme_apply+0x54c>)
  417bee:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  417bf0:	6831      	ldr	r1, [r6, #0]
  417bf2:	3118      	adds	r1, #24
  417bf4:	4640      	mov	r0, r8
  417bf6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  417bf8:	2104      	movs	r1, #4
  417bfa:	4620      	mov	r0, r4
  417bfc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
  417bfe:	6831      	ldr	r1, [r6, #0]
  417c00:	31bc      	adds	r1, #188	; 0xbc
  417c02:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  417c04:	2103      	movs	r1, #3
  417c06:	4620      	mov	r0, r4
  417c08:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
  417c0a:	6831      	ldr	r1, [r6, #0]
  417c0c:	31b8      	adds	r1, #184	; 0xb8
  417c0e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  417c10:	2101      	movs	r1, #1
  417c12:	4620      	mov	r0, r4
  417c14:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  417c16:	6831      	ldr	r1, [r6, #0]
  417c18:	3184      	adds	r1, #132	; 0x84
  417c1a:	47a8      	blx	r5
            break;
  417c1c:	e5aa      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
  417c1e:	2100      	movs	r1, #0
  417c20:	4620      	mov	r0, r4
  417c22:	4f09      	ldr	r7, [pc, #36]	; (417c48 <theme_apply+0x544>)
  417c24:	47b8      	blx	r7
  417c26:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417c28:	4e08      	ldr	r6, [pc, #32]	; (417c4c <theme_apply+0x548>)
  417c2a:	6831      	ldr	r1, [r6, #0]
  417c2c:	3104      	adds	r1, #4
  417c2e:	4d08      	ldr	r5, [pc, #32]	; (417c50 <theme_apply+0x54c>)
  417c30:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  417c32:	6831      	ldr	r1, [r6, #0]
  417c34:	3118      	adds	r1, #24
  417c36:	4640      	mov	r0, r8
  417c38:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
  417c3a:	2103      	movs	r1, #3
  417c3c:	4620      	mov	r0, r4
  417c3e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
  417c40:	6831      	ldr	r1, [r6, #0]
  417c42:	319c      	adds	r1, #156	; 0x9c
  417c44:	47a8      	blx	r5
            break;
  417c46:	e595      	b.n	417774 <theme_apply+0x70>
  417c48:	00405219 	.word	0x00405219
  417c4c:	20414758 	.word	0x20414758
  417c50:	004095e9 	.word	0x004095e9
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  417c54:	2100      	movs	r1, #0
  417c56:	4620      	mov	r0, r4
  417c58:	4b31      	ldr	r3, [pc, #196]	; (417d20 <theme_apply+0x61c>)
  417c5a:	4798      	blx	r3
  417c5c:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  417c5e:	4e31      	ldr	r6, [pc, #196]	; (417d24 <theme_apply+0x620>)
  417c60:	6831      	ldr	r1, [r6, #0]
  417c62:	3104      	adds	r1, #4
  417c64:	4d30      	ldr	r5, [pc, #192]	; (417d28 <theme_apply+0x624>)
  417c66:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  417c68:	6831      	ldr	r1, [r6, #0]
  417c6a:	3108      	adds	r1, #8
  417c6c:	4638      	mov	r0, r7
  417c6e:	47a8      	blx	r5
            break;
  417c70:	e580      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
  417c72:	2100      	movs	r1, #0
  417c74:	4620      	mov	r0, r4
  417c76:	4f2a      	ldr	r7, [pc, #168]	; (417d20 <theme_apply+0x61c>)
  417c78:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  417c7a:	4e2a      	ldr	r6, [pc, #168]	; (417d24 <theme_apply+0x620>)
  417c7c:	6831      	ldr	r1, [r6, #0]
  417c7e:	3104      	adds	r1, #4
  417c80:	4d29      	ldr	r5, [pc, #164]	; (417d28 <theme_apply+0x624>)
  417c82:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
  417c84:	2103      	movs	r1, #3
  417c86:	4620      	mov	r0, r4
  417c88:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
  417c8a:	6831      	ldr	r1, [r6, #0]
  417c8c:	3130      	adds	r1, #48	; 0x30
  417c8e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
  417c90:	2101      	movs	r1, #1
  417c92:	4620      	mov	r0, r4
  417c94:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
  417c96:	6831      	ldr	r1, [r6, #0]
  417c98:	3134      	adds	r1, #52	; 0x34
  417c9a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  417c9c:	2102      	movs	r1, #2
  417c9e:	4620      	mov	r0, r4
  417ca0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
  417ca2:	6831      	ldr	r1, [r6, #0]
  417ca4:	3138      	adds	r1, #56	; 0x38
  417ca6:	47a8      	blx	r5
            break;
  417ca8:	e564      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
  417caa:	2100      	movs	r1, #0
  417cac:	4620      	mov	r0, r4
  417cae:	4f1c      	ldr	r7, [pc, #112]	; (417d20 <theme_apply+0x61c>)
  417cb0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
  417cb2:	4e1c      	ldr	r6, [pc, #112]	; (417d24 <theme_apply+0x620>)
  417cb4:	6831      	ldr	r1, [r6, #0]
  417cb6:	313c      	adds	r1, #60	; 0x3c
  417cb8:	4d1b      	ldr	r5, [pc, #108]	; (417d28 <theme_apply+0x624>)
  417cba:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
  417cbc:	2101      	movs	r1, #1
  417cbe:	4620      	mov	r0, r4
  417cc0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
  417cc2:	6831      	ldr	r1, [r6, #0]
  417cc4:	3140      	adds	r1, #64	; 0x40
  417cc6:	47a8      	blx	r5
            break;
  417cc8:	e554      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
  417cca:	2100      	movs	r1, #0
  417ccc:	4620      	mov	r0, r4
  417cce:	4b14      	ldr	r3, [pc, #80]	; (417d20 <theme_apply+0x61c>)
  417cd0:	4798      	blx	r3
  417cd2:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  417cd4:	4e13      	ldr	r6, [pc, #76]	; (417d24 <theme_apply+0x620>)
  417cd6:	6831      	ldr	r1, [r6, #0]
  417cd8:	3104      	adds	r1, #4
  417cda:	4d13      	ldr	r5, [pc, #76]	; (417d28 <theme_apply+0x624>)
  417cdc:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->lmeter);
  417cde:	6831      	ldr	r1, [r6, #0]
  417ce0:	3174      	adds	r1, #116	; 0x74
  417ce2:	4638      	mov	r0, r7
  417ce4:	47a8      	blx	r5
            break;
  417ce6:	e545      	b.n	417774 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
  417ce8:	2100      	movs	r1, #0
  417cea:	4620      	mov	r0, r4
  417cec:	4f0c      	ldr	r7, [pc, #48]	; (417d20 <theme_apply+0x61c>)
  417cee:	47b8      	blx	r7
  417cf0:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417cf2:	4e0c      	ldr	r6, [pc, #48]	; (417d24 <theme_apply+0x620>)
  417cf4:	6831      	ldr	r1, [r6, #0]
  417cf6:	3104      	adds	r1, #4
  417cf8:	4d0b      	ldr	r5, [pc, #44]	; (417d28 <theme_apply+0x624>)
  417cfa:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
  417cfc:	6831      	ldr	r1, [r6, #0]
  417cfe:	3160      	adds	r1, #96	; 0x60
  417d00:	4640      	mov	r0, r8
  417d02:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
  417d04:	2101      	movs	r1, #1
  417d06:	4620      	mov	r0, r4
  417d08:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
  417d0a:	6831      	ldr	r1, [r6, #0]
  417d0c:	3164      	adds	r1, #100	; 0x64
  417d0e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
  417d10:	2102      	movs	r1, #2
  417d12:	4620      	mov	r0, r4
  417d14:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
  417d16:	6831      	ldr	r1, [r6, #0]
  417d18:	3168      	adds	r1, #104	; 0x68
  417d1a:	47a8      	blx	r5
            break;
  417d1c:	e52a      	b.n	417774 <theme_apply+0x70>
  417d1e:	bf00      	nop
  417d20:	00405219 	.word	0x00405219
  417d24:	20414758 	.word	0x20414758
  417d28:	004095e9 	.word	0x004095e9

00417d2c <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
  417d2c:	b508      	push	{r3, lr}
    if(inited) lv_style_reset(style);
  417d2e:	4b04      	ldr	r3, [pc, #16]	; (417d40 <style_init_reset+0x14>)
  417d30:	781b      	ldrb	r3, [r3, #0]
  417d32:	b913      	cbnz	r3, 417d3a <style_init_reset+0xe>
    else lv_style_init(style);
  417d34:	4b03      	ldr	r3, [pc, #12]	; (417d44 <style_init_reset+0x18>)
  417d36:	4798      	blx	r3
  417d38:	bd08      	pop	{r3, pc}
    if(inited) lv_style_reset(style);
  417d3a:	4b03      	ldr	r3, [pc, #12]	; (417d48 <style_init_reset+0x1c>)
  417d3c:	4798      	blx	r3
  417d3e:	bd08      	pop	{r3, pc}
  417d40:	20414754 	.word	0x20414754
  417d44:	00409501 	.word	0x00409501
  417d48:	00409715 	.word	0x00409715

00417d4c <bar_init>:
{
  417d4c:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->bar_bg);
  417d4e:	4c6d      	ldr	r4, [pc, #436]	; (417f04 <bar_init+0x1b8>)
  417d50:	6820      	ldr	r0, [r4, #0]
  417d52:	3028      	adds	r0, #40	; 0x28
  417d54:	4b6c      	ldr	r3, [pc, #432]	; (417f08 <bar_init+0x1bc>)
  417d56:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417d58:	6820      	ldr	r0, [r4, #0]
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417d5a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417d5e:	2101      	movs	r1, #1
  417d60:	3028      	adds	r0, #40	; 0x28
  417d62:	4b6a      	ldr	r3, [pc, #424]	; (417f0c <bar_init+0x1c0>)
  417d64:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  417d66:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  417d68:	22ff      	movs	r2, #255	; 0xff
  417d6a:	212c      	movs	r1, #44	; 0x2c
  417d6c:	3028      	adds	r0, #40	; 0x28
  417d6e:	4b68      	ldr	r3, [pc, #416]	; (417f10 <bar_init+0x1c4>)
  417d70:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  417d72:	6820      	ldr	r0, [r4, #0]
  417d74:	3028      	adds	r0, #40	; 0x28
  417d76:	4b67      	ldr	r3, [pc, #412]	; (417f14 <bar_init+0x1c8>)
  417d78:	6a1b      	ldr	r3, [r3, #32]
  417d7a:	f013 0f02 	tst.w	r3, #2
  417d7e:	f040 809b 	bne.w	417eb8 <bar_init+0x16c>
  417d82:	2302      	movs	r3, #2
  417d84:	2109      	movs	r1, #9
  417d86:	2408      	movs	r4, #8
  417d88:	461d      	mov	r5, r3
  417d8a:	f04f 0200 	mov.w	r2, #0
  417d8e:	f365 0202 	bfi	r2, r5, #0, #3
  417d92:	f364 02c7 	bfi	r2, r4, #3, #5
  417d96:	f361 220c 	bfi	r2, r1, #8, #5
  417d9a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  417d9e:	2129      	movs	r1, #41	; 0x29
  417da0:	4b5d      	ldr	r3, [pc, #372]	; (417f18 <bar_init+0x1cc>)
  417da2:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  417da4:	4b57      	ldr	r3, [pc, #348]	; (417f04 <bar_init+0x1b8>)
  417da6:	6818      	ldr	r0, [r3, #0]
  417da8:	3028      	adds	r0, #40	; 0x28
  417daa:	4b5a      	ldr	r3, [pc, #360]	; (417f14 <bar_init+0x1c8>)
  417dac:	6a1b      	ldr	r3, [r3, #32]
  417dae:	f013 0f02 	tst.w	r3, #2
  417db2:	f040 8086 	bne.w	417ec2 <bar_init+0x176>
  417db6:	2307      	movs	r3, #7
  417db8:	211f      	movs	r1, #31
  417dba:	460c      	mov	r4, r1
  417dbc:	461d      	mov	r5, r3
  417dbe:	f04f 0200 	mov.w	r2, #0
  417dc2:	f365 0202 	bfi	r2, r5, #0, #3
  417dc6:	f364 02c7 	bfi	r2, r4, #3, #5
  417dca:	f361 220c 	bfi	r2, r1, #8, #5
  417dce:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  417dd2:	2179      	movs	r1, #121	; 0x79
  417dd4:	4d50      	ldr	r5, [pc, #320]	; (417f18 <bar_init+0x1cc>)
  417dd6:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
  417dd8:	4c4a      	ldr	r4, [pc, #296]	; (417f04 <bar_init+0x1b8>)
  417dda:	6820      	ldr	r0, [r4, #0]
  417ddc:	4e4d      	ldr	r6, [pc, #308]	; (417f14 <bar_init+0x1c8>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  417dde:	89b2      	ldrh	r2, [r6, #12]
  417de0:	2149      	movs	r1, #73	; 0x49
  417de2:	3028      	adds	r0, #40	; 0x28
  417de4:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
  417de6:	6820      	ldr	r0, [r4, #0]
  417de8:	89f2      	ldrh	r2, [r6, #14]
  417dea:	f240 4149 	movw	r1, #1097	; 0x449
  417dee:	3028      	adds	r0, #40	; 0x28
  417df0:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  417df2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  417df4:	2200      	movs	r2, #0
  417df6:	214c      	movs	r1, #76	; 0x4c
  417df8:	3028      	adds	r0, #40	; 0x28
  417dfa:	4d45      	ldr	r5, [pc, #276]	; (417f10 <bar_init+0x1c4>)
  417dfc:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
  417dfe:	6820      	ldr	r0, [r4, #0]
  417e00:	227f      	movs	r2, #127	; 0x7f
  417e02:	f44f 7113 	mov.w	r1, #588	; 0x24c
  417e06:	3028      	adds	r0, #40	; 0x28
  417e08:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  417e0a:	6824      	ldr	r4, [r4, #0]
  417e0c:	3428      	adds	r4, #40	; 0x28
  417e0e:	6a33      	ldr	r3, [r6, #32]
  417e10:	f013 0f20 	tst.w	r3, #32
  417e14:	d05a      	beq.n	417ecc <bar_init+0x180>
  417e16:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  417e18:	2140      	movs	r1, #64	; 0x40
  417e1a:	4620      	mov	r0, r4
  417e1c:	4d3b      	ldr	r5, [pc, #236]	; (417f0c <bar_init+0x1c0>)
  417e1e:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  417e20:	4c38      	ldr	r4, [pc, #224]	; (417f04 <bar_init+0x1b8>)
  417e22:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  417e24:	2200      	movs	r2, #0
  417e26:	21b0      	movs	r1, #176	; 0xb0
  417e28:	3028      	adds	r0, #40	; 0x28
  417e2a:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  417e2c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  417e2e:	224c      	movs	r2, #76	; 0x4c
  417e30:	21b7      	movs	r1, #183	; 0xb7
  417e32:	3028      	adds	r0, #40	; 0x28
  417e34:	47a8      	blx	r5
    style_init_reset(&styles->bar_indic);
  417e36:	6820      	ldr	r0, [r4, #0]
  417e38:	302c      	adds	r0, #44	; 0x2c
  417e3a:	4b33      	ldr	r3, [pc, #204]	; (417f08 <bar_init+0x1bc>)
  417e3c:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  417e3e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  417e40:	22ff      	movs	r2, #255	; 0xff
  417e42:	212c      	movs	r1, #44	; 0x2c
  417e44:	4408      	add	r0, r1
  417e46:	4b32      	ldr	r3, [pc, #200]	; (417f10 <bar_init+0x1c4>)
  417e48:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417e4a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417e4c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417e50:	2101      	movs	r1, #1
  417e52:	302c      	adds	r0, #44	; 0x2c
  417e54:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
  417e56:	6820      	ldr	r0, [r4, #0]
  417e58:	4d2e      	ldr	r5, [pc, #184]	; (417f14 <bar_init+0x1c8>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  417e5a:	89aa      	ldrh	r2, [r5, #12]
  417e5c:	2129      	movs	r1, #41	; 0x29
  417e5e:	302c      	adds	r0, #44	; 0x2c
  417e60:	4e2d      	ldr	r6, [pc, #180]	; (417f18 <bar_init+0x1cc>)
  417e62:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
  417e64:	6820      	ldr	r0, [r4, #0]
  417e66:	f04f 0200 	mov.w	r2, #0
  417e6a:	2304      	movs	r3, #4
  417e6c:	f363 0202 	bfi	r2, r3, #0, #3
  417e70:	2311      	movs	r3, #17
  417e72:	f363 02c7 	bfi	r2, r3, #3, #5
  417e76:	f363 220c 	bfi	r2, r3, #8, #5
  417e7a:	2302      	movs	r3, #2
  417e7c:	f363 324f 	bfi	r2, r3, #13, #3
  417e80:	f242 0129 	movw	r1, #8233	; 0x2029
  417e84:	302c      	adds	r0, #44	; 0x2c
  417e86:	47b0      	blx	r6
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
  417e88:	6820      	ldr	r0, [r4, #0]
  417e8a:	302c      	adds	r0, #44	; 0x2c
  417e8c:	6a2b      	ldr	r3, [r5, #32]
  417e8e:	f013 0f02 	tst.w	r3, #2
  417e92:	d132      	bne.n	417efa <bar_init+0x1ae>
  417e94:	2307      	movs	r3, #7
  417e96:	211f      	movs	r1, #31
  417e98:	460c      	mov	r4, r1
  417e9a:	461d      	mov	r5, r3
  417e9c:	f04f 0200 	mov.w	r2, #0
  417ea0:	f365 0202 	bfi	r2, r5, #0, #3
  417ea4:	f364 02c7 	bfi	r2, r4, #3, #5
  417ea8:	f361 220c 	bfi	r2, r1, #8, #5
  417eac:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  417eb0:	2179      	movs	r1, #121	; 0x79
  417eb2:	4b19      	ldr	r3, [pc, #100]	; (417f18 <bar_init+0x1cc>)
  417eb4:	4798      	blx	r3
  417eb6:	bd70      	pop	{r4, r5, r6, pc}
  417eb8:	2305      	movs	r3, #5
  417eba:	211b      	movs	r1, #27
  417ebc:	241a      	movs	r4, #26
  417ebe:	2506      	movs	r5, #6
  417ec0:	e763      	b.n	417d8a <bar_init+0x3e>
  417ec2:	2300      	movs	r3, #0
  417ec4:	2109      	movs	r1, #9
  417ec6:	2406      	movs	r4, #6
  417ec8:	2502      	movs	r5, #2
  417eca:	e778      	b.n	417dbe <bar_init+0x72>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  417ecc:	2000      	movs	r0, #0
  417ece:	4b13      	ldr	r3, [pc, #76]	; (417f1c <bar_init+0x1d0>)
  417ed0:	4798      	blx	r3
  417ed2:	3028      	adds	r0, #40	; 0x28
  417ed4:	0040      	lsls	r0, r0, #1
  417ed6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417eda:	da01      	bge.n	417ee0 <bar_init+0x194>
  417edc:	2201      	movs	r2, #1
  417ede:	e79b      	b.n	417e18 <bar_init+0xcc>
  417ee0:	2000      	movs	r0, #0
  417ee2:	4b0e      	ldr	r3, [pc, #56]	; (417f1c <bar_init+0x1d0>)
  417ee4:	4798      	blx	r3
  417ee6:	3028      	adds	r0, #40	; 0x28
  417ee8:	0040      	lsls	r0, r0, #1
  417eea:	4b0d      	ldr	r3, [pc, #52]	; (417f20 <bar_init+0x1d4>)
  417eec:	fb83 2300 	smull	r2, r3, r3, r0
  417ef0:	17c2      	asrs	r2, r0, #31
  417ef2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417ef6:	b212      	sxth	r2, r2
  417ef8:	e78e      	b.n	417e18 <bar_init+0xcc>
  417efa:	2300      	movs	r3, #0
  417efc:	2109      	movs	r1, #9
  417efe:	2408      	movs	r4, #8
  417f00:	2502      	movs	r5, #2
  417f02:	e7cb      	b.n	417e9c <bar_init+0x150>
  417f04:	20414758 	.word	0x20414758
  417f08:	00417d2d 	.word	0x00417d2d
  417f0c:	004098e5 	.word	0x004098e5
  417f10:	00409ba5 	.word	0x00409ba5
  417f14:	2041475c 	.word	0x2041475c
  417f18:	00409a45 	.word	0x00409a45
  417f1c:	004140fd 	.word	0x004140fd
  417f20:	66666667 	.word	0x66666667

00417f24 <slider_init>:
{
  417f24:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->slider_knob);
  417f26:	4ca5      	ldr	r4, [pc, #660]	; (4181bc <slider_init+0x298>)
  417f28:	6820      	ldr	r0, [r4, #0]
  417f2a:	3094      	adds	r0, #148	; 0x94
  417f2c:	4ba4      	ldr	r3, [pc, #656]	; (4181c0 <slider_init+0x29c>)
  417f2e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  417f30:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  417f32:	22ff      	movs	r2, #255	; 0xff
  417f34:	212c      	movs	r1, #44	; 0x2c
  417f36:	3094      	adds	r0, #148	; 0x94
  417f38:	4ba2      	ldr	r3, [pc, #648]	; (4181c4 <slider_init+0x2a0>)
  417f3a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  417f3c:	6820      	ldr	r0, [r4, #0]
  417f3e:	3094      	adds	r0, #148	; 0x94
  417f40:	4ba1      	ldr	r3, [pc, #644]	; (4181c8 <slider_init+0x2a4>)
  417f42:	6a1b      	ldr	r3, [r3, #32]
  417f44:	f013 0f02 	tst.w	r3, #2
  417f48:	f000 80bb 	beq.w	4180c2 <slider_init+0x19e>
  417f4c:	4b9e      	ldr	r3, [pc, #632]	; (4181c8 <slider_init+0x2a4>)
  417f4e:	899a      	ldrh	r2, [r3, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  417f50:	2129      	movs	r1, #41	; 0x29
  417f52:	4b9e      	ldr	r3, [pc, #632]	; (4181cc <slider_init+0x2a8>)
  417f54:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  417f56:	4b99      	ldr	r3, [pc, #612]	; (4181bc <slider_init+0x298>)
  417f58:	6818      	ldr	r0, [r3, #0]
  417f5a:	3094      	adds	r0, #148	; 0x94
  417f5c:	4b9a      	ldr	r3, [pc, #616]	; (4181c8 <slider_init+0x2a4>)
  417f5e:	6a1b      	ldr	r3, [r3, #32]
  417f60:	f013 0f02 	tst.w	r3, #2
  417f64:	f040 80b0 	bne.w	4180c8 <slider_init+0x1a4>
  417f68:	2307      	movs	r3, #7
  417f6a:	211f      	movs	r1, #31
  417f6c:	460c      	mov	r4, r1
  417f6e:	461d      	mov	r5, r3
  417f70:	f04f 0200 	mov.w	r2, #0
  417f74:	f365 0202 	bfi	r2, r5, #0, #3
  417f78:	f364 02c7 	bfi	r2, r4, #3, #5
  417f7c:	f361 220c 	bfi	r2, r1, #8, #5
  417f80:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  417f84:	2179      	movs	r1, #121	; 0x79
  417f86:	4b91      	ldr	r3, [pc, #580]	; (4181cc <slider_init+0x2a8>)
  417f88:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417f8a:	4c8c      	ldr	r4, [pc, #560]	; (4181bc <slider_init+0x298>)
  417f8c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417f8e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417f92:	2101      	movs	r1, #1
  417f94:	3094      	adds	r0, #148	; 0x94
  417f96:	4b8e      	ldr	r3, [pc, #568]	; (4181d0 <slider_init+0x2ac>)
  417f98:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417f9a:	6824      	ldr	r4, [r4, #0]
  417f9c:	3494      	adds	r4, #148	; 0x94
  417f9e:	2000      	movs	r0, #0
  417fa0:	4b8c      	ldr	r3, [pc, #560]	; (4181d4 <slider_init+0x2b0>)
  417fa2:	4798      	blx	r3
  417fa4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417fa8:	3050      	adds	r0, #80	; 0x50
  417faa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417fae:	f280 8090 	bge.w	4180d2 <slider_init+0x1ae>
  417fb2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  417fb4:	2112      	movs	r1, #18
  417fb6:	4620      	mov	r0, r4
  417fb8:	4b85      	ldr	r3, [pc, #532]	; (4181d0 <slider_init+0x2ac>)
  417fba:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417fbc:	4b7f      	ldr	r3, [pc, #508]	; (4181bc <slider_init+0x298>)
  417fbe:	681c      	ldr	r4, [r3, #0]
  417fc0:	3494      	adds	r4, #148	; 0x94
  417fc2:	2000      	movs	r0, #0
  417fc4:	4b83      	ldr	r3, [pc, #524]	; (4181d4 <slider_init+0x2b0>)
  417fc6:	4798      	blx	r3
  417fc8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417fcc:	3050      	adds	r0, #80	; 0x50
  417fce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417fd2:	f280 808c 	bge.w	4180ee <slider_init+0x1ca>
  417fd6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  417fd8:	2113      	movs	r1, #19
  417fda:	4620      	mov	r0, r4
  417fdc:	4b7c      	ldr	r3, [pc, #496]	; (4181d0 <slider_init+0x2ac>)
  417fde:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417fe0:	4b76      	ldr	r3, [pc, #472]	; (4181bc <slider_init+0x298>)
  417fe2:	681c      	ldr	r4, [r3, #0]
  417fe4:	3494      	adds	r4, #148	; 0x94
  417fe6:	2000      	movs	r0, #0
  417fe8:	4b7a      	ldr	r3, [pc, #488]	; (4181d4 <slider_init+0x2b0>)
  417fea:	4798      	blx	r3
  417fec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417ff0:	3050      	adds	r0, #80	; 0x50
  417ff2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417ff6:	f280 8088 	bge.w	41810a <slider_init+0x1e6>
  417ffa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  417ffc:	2110      	movs	r1, #16
  417ffe:	4620      	mov	r0, r4
  418000:	4b73      	ldr	r3, [pc, #460]	; (4181d0 <slider_init+0x2ac>)
  418002:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418004:	4b6d      	ldr	r3, [pc, #436]	; (4181bc <slider_init+0x298>)
  418006:	681c      	ldr	r4, [r3, #0]
  418008:	3494      	adds	r4, #148	; 0x94
  41800a:	2000      	movs	r0, #0
  41800c:	4b71      	ldr	r3, [pc, #452]	; (4181d4 <slider_init+0x2b0>)
  41800e:	4798      	blx	r3
  418010:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418014:	3050      	adds	r0, #80	; 0x50
  418016:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41801a:	f280 8084 	bge.w	418126 <slider_init+0x202>
  41801e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418020:	2111      	movs	r1, #17
  418022:	4620      	mov	r0, r4
  418024:	4b6a      	ldr	r3, [pc, #424]	; (4181d0 <slider_init+0x2ac>)
  418026:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
  418028:	4c64      	ldr	r4, [pc, #400]	; (4181bc <slider_init+0x298>)
  41802a:	6820      	ldr	r0, [r4, #0]
  41802c:	3098      	adds	r0, #152	; 0x98
  41802e:	4b64      	ldr	r3, [pc, #400]	; (4181c0 <slider_init+0x29c>)
  418030:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418032:	6824      	ldr	r4, [r4, #0]
  418034:	3498      	adds	r4, #152	; 0x98
  418036:	2000      	movs	r0, #0
  418038:	4b66      	ldr	r3, [pc, #408]	; (4181d4 <slider_init+0x2b0>)
  41803a:	4798      	blx	r3
  41803c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418040:	0040      	lsls	r0, r0, #1
  418042:	3050      	adds	r0, #80	; 0x50
  418044:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418048:	da7b      	bge.n	418142 <slider_init+0x21e>
  41804a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41804c:	2117      	movs	r1, #23
  41804e:	4620      	mov	r0, r4
  418050:	4b5f      	ldr	r3, [pc, #380]	; (4181d0 <slider_init+0x2ac>)
  418052:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418054:	4b59      	ldr	r3, [pc, #356]	; (4181bc <slider_init+0x298>)
  418056:	681c      	ldr	r4, [r3, #0]
  418058:	3498      	adds	r4, #152	; 0x98
  41805a:	2000      	movs	r0, #0
  41805c:	4b5d      	ldr	r3, [pc, #372]	; (4181d4 <slider_init+0x2b0>)
  41805e:	4798      	blx	r3
  418060:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418064:	0040      	lsls	r0, r0, #1
  418066:	3050      	adds	r0, #80	; 0x50
  418068:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41806c:	da78      	bge.n	418160 <slider_init+0x23c>
  41806e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  418070:	2118      	movs	r1, #24
  418072:	4620      	mov	r0, r4
  418074:	4b56      	ldr	r3, [pc, #344]	; (4181d0 <slider_init+0x2ac>)
  418076:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418078:	4b50      	ldr	r3, [pc, #320]	; (4181bc <slider_init+0x298>)
  41807a:	681c      	ldr	r4, [r3, #0]
  41807c:	3498      	adds	r4, #152	; 0x98
  41807e:	2000      	movs	r0, #0
  418080:	4b54      	ldr	r3, [pc, #336]	; (4181d4 <slider_init+0x2b0>)
  418082:	4798      	blx	r3
  418084:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418088:	0040      	lsls	r0, r0, #1
  41808a:	3050      	adds	r0, #80	; 0x50
  41808c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418090:	da75      	bge.n	41817e <slider_init+0x25a>
  418092:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  418094:	2115      	movs	r1, #21
  418096:	4620      	mov	r0, r4
  418098:	4b4d      	ldr	r3, [pc, #308]	; (4181d0 <slider_init+0x2ac>)
  41809a:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41809c:	4b47      	ldr	r3, [pc, #284]	; (4181bc <slider_init+0x298>)
  41809e:	681c      	ldr	r4, [r3, #0]
  4180a0:	3498      	adds	r4, #152	; 0x98
  4180a2:	2000      	movs	r0, #0
  4180a4:	4b4b      	ldr	r3, [pc, #300]	; (4181d4 <slider_init+0x2b0>)
  4180a6:	4798      	blx	r3
  4180a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4180ac:	0040      	lsls	r0, r0, #1
  4180ae:	3050      	adds	r0, #80	; 0x50
  4180b0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4180b4:	da72      	bge.n	41819c <slider_init+0x278>
  4180b6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  4180b8:	2116      	movs	r1, #22
  4180ba:	4620      	mov	r0, r4
  4180bc:	4b44      	ldr	r3, [pc, #272]	; (4181d0 <slider_init+0x2ac>)
  4180be:	4798      	blx	r3
  4180c0:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  4180c2:	4b45      	ldr	r3, [pc, #276]	; (4181d8 <slider_init+0x2b4>)
  4180c4:	881a      	ldrh	r2, [r3, #0]
  4180c6:	e743      	b.n	417f50 <slider_init+0x2c>
  4180c8:	2300      	movs	r3, #0
  4180ca:	2109      	movs	r1, #9
  4180cc:	2406      	movs	r4, #6
  4180ce:	2502      	movs	r5, #2
  4180d0:	e74e      	b.n	417f70 <slider_init+0x4c>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4180d2:	2000      	movs	r0, #0
  4180d4:	4b3f      	ldr	r3, [pc, #252]	; (4181d4 <slider_init+0x2b0>)
  4180d6:	4798      	blx	r3
  4180d8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4180dc:	3050      	adds	r0, #80	; 0x50
  4180de:	4b3f      	ldr	r3, [pc, #252]	; (4181dc <slider_init+0x2b8>)
  4180e0:	fb83 2300 	smull	r2, r3, r3, r0
  4180e4:	17c2      	asrs	r2, r0, #31
  4180e6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4180ea:	b212      	sxth	r2, r2
  4180ec:	e762      	b.n	417fb4 <slider_init+0x90>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4180ee:	2000      	movs	r0, #0
  4180f0:	4b38      	ldr	r3, [pc, #224]	; (4181d4 <slider_init+0x2b0>)
  4180f2:	4798      	blx	r3
  4180f4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4180f8:	3050      	adds	r0, #80	; 0x50
  4180fa:	4b38      	ldr	r3, [pc, #224]	; (4181dc <slider_init+0x2b8>)
  4180fc:	fb83 2300 	smull	r2, r3, r3, r0
  418100:	17c2      	asrs	r2, r0, #31
  418102:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418106:	b212      	sxth	r2, r2
  418108:	e766      	b.n	417fd8 <slider_init+0xb4>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  41810a:	2000      	movs	r0, #0
  41810c:	4b31      	ldr	r3, [pc, #196]	; (4181d4 <slider_init+0x2b0>)
  41810e:	4798      	blx	r3
  418110:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418114:	3050      	adds	r0, #80	; 0x50
  418116:	4b31      	ldr	r3, [pc, #196]	; (4181dc <slider_init+0x2b8>)
  418118:	fb83 2300 	smull	r2, r3, r3, r0
  41811c:	17c2      	asrs	r2, r0, #31
  41811e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418122:	b212      	sxth	r2, r2
  418124:	e76a      	b.n	417ffc <slider_init+0xd8>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418126:	2000      	movs	r0, #0
  418128:	4b2a      	ldr	r3, [pc, #168]	; (4181d4 <slider_init+0x2b0>)
  41812a:	4798      	blx	r3
  41812c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418130:	3050      	adds	r0, #80	; 0x50
  418132:	4b2a      	ldr	r3, [pc, #168]	; (4181dc <slider_init+0x2b8>)
  418134:	fb83 2300 	smull	r2, r3, r3, r0
  418138:	17c2      	asrs	r2, r0, #31
  41813a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41813e:	b212      	sxth	r2, r2
  418140:	e76e      	b.n	418020 <slider_init+0xfc>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418142:	2000      	movs	r0, #0
  418144:	4b23      	ldr	r3, [pc, #140]	; (4181d4 <slider_init+0x2b0>)
  418146:	4798      	blx	r3
  418148:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41814c:	0040      	lsls	r0, r0, #1
  41814e:	3050      	adds	r0, #80	; 0x50
  418150:	4b22      	ldr	r3, [pc, #136]	; (4181dc <slider_init+0x2b8>)
  418152:	fb83 2300 	smull	r2, r3, r3, r0
  418156:	17c2      	asrs	r2, r0, #31
  418158:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41815c:	b212      	sxth	r2, r2
  41815e:	e775      	b.n	41804c <slider_init+0x128>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418160:	2000      	movs	r0, #0
  418162:	4b1c      	ldr	r3, [pc, #112]	; (4181d4 <slider_init+0x2b0>)
  418164:	4798      	blx	r3
  418166:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41816a:	0040      	lsls	r0, r0, #1
  41816c:	3050      	adds	r0, #80	; 0x50
  41816e:	4b1b      	ldr	r3, [pc, #108]	; (4181dc <slider_init+0x2b8>)
  418170:	fb83 2300 	smull	r2, r3, r3, r0
  418174:	17c2      	asrs	r2, r0, #31
  418176:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41817a:	b212      	sxth	r2, r2
  41817c:	e778      	b.n	418070 <slider_init+0x14c>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41817e:	2000      	movs	r0, #0
  418180:	4b14      	ldr	r3, [pc, #80]	; (4181d4 <slider_init+0x2b0>)
  418182:	4798      	blx	r3
  418184:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418188:	0040      	lsls	r0, r0, #1
  41818a:	3050      	adds	r0, #80	; 0x50
  41818c:	4b13      	ldr	r3, [pc, #76]	; (4181dc <slider_init+0x2b8>)
  41818e:	fb83 2300 	smull	r2, r3, r3, r0
  418192:	17c2      	asrs	r2, r0, #31
  418194:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418198:	b212      	sxth	r2, r2
  41819a:	e77b      	b.n	418094 <slider_init+0x170>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41819c:	2000      	movs	r0, #0
  41819e:	4b0d      	ldr	r3, [pc, #52]	; (4181d4 <slider_init+0x2b0>)
  4181a0:	4798      	blx	r3
  4181a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4181a6:	0040      	lsls	r0, r0, #1
  4181a8:	3050      	adds	r0, #80	; 0x50
  4181aa:	4b0c      	ldr	r3, [pc, #48]	; (4181dc <slider_init+0x2b8>)
  4181ac:	fb83 2300 	smull	r2, r3, r3, r0
  4181b0:	17c2      	asrs	r2, r0, #31
  4181b2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4181b6:	b212      	sxth	r2, r2
  4181b8:	e77e      	b.n	4180b8 <slider_init+0x194>
  4181ba:	bf00      	nop
  4181bc:	20414758 	.word	0x20414758
  4181c0:	00417d2d 	.word	0x00417d2d
  4181c4:	00409ba5 	.word	0x00409ba5
  4181c8:	2041475c 	.word	0x2041475c
  4181cc:	00409a45 	.word	0x00409a45
  4181d0:	004098e5 	.word	0x004098e5
  4181d4:	004140fd 	.word	0x004140fd
  4181d8:	004306bc 	.word	0x004306bc
  4181dc:	66666667 	.word	0x66666667

004181e0 <switch_init>:
{
  4181e0:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
  4181e2:	4c48      	ldr	r4, [pc, #288]	; (418304 <switch_init+0x124>)
  4181e4:	6820      	ldr	r0, [r4, #0]
  4181e6:	30a0      	adds	r0, #160	; 0xa0
  4181e8:	4b47      	ldr	r3, [pc, #284]	; (418308 <switch_init+0x128>)
  4181ea:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  4181ec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4181ee:	22ff      	movs	r2, #255	; 0xff
  4181f0:	212c      	movs	r1, #44	; 0x2c
  4181f2:	30a0      	adds	r0, #160	; 0xa0
  4181f4:	4b45      	ldr	r3, [pc, #276]	; (41830c <switch_init+0x12c>)
  4181f6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  4181f8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4181fa:	4b45      	ldr	r3, [pc, #276]	; (418310 <switch_init+0x130>)
  4181fc:	881a      	ldrh	r2, [r3, #0]
  4181fe:	2129      	movs	r1, #41	; 0x29
  418200:	30a0      	adds	r0, #160	; 0xa0
  418202:	4b44      	ldr	r3, [pc, #272]	; (418314 <switch_init+0x134>)
  418204:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418206:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418208:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41820c:	2101      	movs	r1, #1
  41820e:	30a0      	adds	r0, #160	; 0xa0
  418210:	4b41      	ldr	r3, [pc, #260]	; (418318 <switch_init+0x138>)
  418212:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  418214:	6824      	ldr	r4, [r4, #0]
  418216:	34a0      	adds	r4, #160	; 0xa0
  418218:	2000      	movs	r0, #0
  41821a:	4b40      	ldr	r3, [pc, #256]	; (41831c <switch_init+0x13c>)
  41821c:	4798      	blx	r3
  41821e:	3014      	adds	r0, #20
  418220:	0080      	lsls	r0, r0, #2
  418222:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418226:	da39      	bge.n	41829c <switch_init+0xbc>
  418228:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41822c:	2110      	movs	r1, #16
  41822e:	4620      	mov	r0, r4
  418230:	4b39      	ldr	r3, [pc, #228]	; (418318 <switch_init+0x138>)
  418232:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  418234:	4b33      	ldr	r3, [pc, #204]	; (418304 <switch_init+0x124>)
  418236:	681c      	ldr	r4, [r3, #0]
  418238:	34a0      	adds	r4, #160	; 0xa0
  41823a:	2000      	movs	r0, #0
  41823c:	4b37      	ldr	r3, [pc, #220]	; (41831c <switch_init+0x13c>)
  41823e:	4798      	blx	r3
  418240:	3014      	adds	r0, #20
  418242:	0080      	lsls	r0, r0, #2
  418244:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418248:	da35      	bge.n	4182b6 <switch_init+0xd6>
  41824a:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41824e:	2111      	movs	r1, #17
  418250:	4620      	mov	r0, r4
  418252:	4b31      	ldr	r3, [pc, #196]	; (418318 <switch_init+0x138>)
  418254:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  418256:	4b2b      	ldr	r3, [pc, #172]	; (418304 <switch_init+0x124>)
  418258:	681c      	ldr	r4, [r3, #0]
  41825a:	34a0      	adds	r4, #160	; 0xa0
  41825c:	2000      	movs	r0, #0
  41825e:	4b2f      	ldr	r3, [pc, #188]	; (41831c <switch_init+0x13c>)
  418260:	4798      	blx	r3
  418262:	3014      	adds	r0, #20
  418264:	0080      	lsls	r0, r0, #2
  418266:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41826a:	da31      	bge.n	4182d0 <switch_init+0xf0>
  41826c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418270:	2112      	movs	r1, #18
  418272:	4620      	mov	r0, r4
  418274:	4b28      	ldr	r3, [pc, #160]	; (418318 <switch_init+0x138>)
  418276:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  418278:	4b22      	ldr	r3, [pc, #136]	; (418304 <switch_init+0x124>)
  41827a:	681c      	ldr	r4, [r3, #0]
  41827c:	34a0      	adds	r4, #160	; 0xa0
  41827e:	2000      	movs	r0, #0
  418280:	4b26      	ldr	r3, [pc, #152]	; (41831c <switch_init+0x13c>)
  418282:	4798      	blx	r3
  418284:	3014      	adds	r0, #20
  418286:	0080      	lsls	r0, r0, #2
  418288:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41828c:	da2d      	bge.n	4182ea <switch_init+0x10a>
  41828e:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418292:	2113      	movs	r1, #19
  418294:	4620      	mov	r0, r4
  418296:	4b20      	ldr	r3, [pc, #128]	; (418318 <switch_init+0x138>)
  418298:	4798      	blx	r3
  41829a:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  41829c:	2000      	movs	r0, #0
  41829e:	4b1f      	ldr	r3, [pc, #124]	; (41831c <switch_init+0x13c>)
  4182a0:	4798      	blx	r3
  4182a2:	3014      	adds	r0, #20
  4182a4:	0080      	lsls	r0, r0, #2
  4182a6:	4b1e      	ldr	r3, [pc, #120]	; (418320 <switch_init+0x140>)
  4182a8:	fb83 2300 	smull	r2, r3, r3, r0
  4182ac:	17c2      	asrs	r2, r0, #31
  4182ae:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  4182b2:	b212      	sxth	r2, r2
  4182b4:	e7ba      	b.n	41822c <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  4182b6:	2000      	movs	r0, #0
  4182b8:	4b18      	ldr	r3, [pc, #96]	; (41831c <switch_init+0x13c>)
  4182ba:	4798      	blx	r3
  4182bc:	3014      	adds	r0, #20
  4182be:	0080      	lsls	r0, r0, #2
  4182c0:	4b17      	ldr	r3, [pc, #92]	; (418320 <switch_init+0x140>)
  4182c2:	fb83 2300 	smull	r2, r3, r3, r0
  4182c6:	17c2      	asrs	r2, r0, #31
  4182c8:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  4182cc:	b212      	sxth	r2, r2
  4182ce:	e7be      	b.n	41824e <switch_init+0x6e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  4182d0:	2000      	movs	r0, #0
  4182d2:	4b12      	ldr	r3, [pc, #72]	; (41831c <switch_init+0x13c>)
  4182d4:	4798      	blx	r3
  4182d6:	3014      	adds	r0, #20
  4182d8:	0080      	lsls	r0, r0, #2
  4182da:	4b11      	ldr	r3, [pc, #68]	; (418320 <switch_init+0x140>)
  4182dc:	fb83 2300 	smull	r2, r3, r3, r0
  4182e0:	17c2      	asrs	r2, r0, #31
  4182e2:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  4182e6:	b212      	sxth	r2, r2
  4182e8:	e7c2      	b.n	418270 <switch_init+0x90>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  4182ea:	2000      	movs	r0, #0
  4182ec:	4b0b      	ldr	r3, [pc, #44]	; (41831c <switch_init+0x13c>)
  4182ee:	4798      	blx	r3
  4182f0:	3014      	adds	r0, #20
  4182f2:	0080      	lsls	r0, r0, #2
  4182f4:	4b0a      	ldr	r3, [pc, #40]	; (418320 <switch_init+0x140>)
  4182f6:	fb83 2300 	smull	r2, r3, r3, r0
  4182fa:	17c2      	asrs	r2, r0, #31
  4182fc:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  418300:	b212      	sxth	r2, r2
  418302:	e7c6      	b.n	418292 <switch_init+0xb2>
  418304:	20414758 	.word	0x20414758
  418308:	00417d2d 	.word	0x00417d2d
  41830c:	00409ba5 	.word	0x00409ba5
  418310:	004306bc 	.word	0x004306bc
  418314:	00409a45 	.word	0x00409a45
  418318:	004098e5 	.word	0x004098e5
  41831c:	004140fd 	.word	0x004140fd
  418320:	66666667 	.word	0x66666667

00418324 <linemeter_init>:
{
  418324:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->lmeter);
  418326:	4c8a      	ldr	r4, [pc, #552]	; (418550 <linemeter_init+0x22c>)
  418328:	6820      	ldr	r0, [r4, #0]
  41832a:	3074      	adds	r0, #116	; 0x74
  41832c:	4b89      	ldr	r3, [pc, #548]	; (418554 <linemeter_init+0x230>)
  41832e:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418330:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418332:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418336:	2101      	movs	r1, #1
  418338:	3074      	adds	r0, #116	; 0x74
  41833a:	4b87      	ldr	r3, [pc, #540]	; (418558 <linemeter_init+0x234>)
  41833c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  41833e:	6824      	ldr	r4, [r4, #0]
  418340:	3474      	adds	r4, #116	; 0x74
  418342:	2000      	movs	r0, #0
  418344:	4b85      	ldr	r3, [pc, #532]	; (41855c <linemeter_init+0x238>)
  418346:	4798      	blx	r3
  418348:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41834c:	0080      	lsls	r0, r0, #2
  41834e:	3050      	adds	r0, #80	; 0x50
  418350:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418354:	f280 8093 	bge.w	41847e <linemeter_init+0x15a>
  418358:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41835a:	2112      	movs	r1, #18
  41835c:	4620      	mov	r0, r4
  41835e:	4b7e      	ldr	r3, [pc, #504]	; (418558 <linemeter_init+0x234>)
  418360:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  418362:	4b7b      	ldr	r3, [pc, #492]	; (418550 <linemeter_init+0x22c>)
  418364:	681c      	ldr	r4, [r3, #0]
  418366:	3474      	adds	r4, #116	; 0x74
  418368:	2000      	movs	r0, #0
  41836a:	4b7c      	ldr	r3, [pc, #496]	; (41855c <linemeter_init+0x238>)
  41836c:	4798      	blx	r3
  41836e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418372:	0080      	lsls	r0, r0, #2
  418374:	3050      	adds	r0, #80	; 0x50
  418376:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41837a:	f280 808f 	bge.w	41849c <linemeter_init+0x178>
  41837e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418380:	2113      	movs	r1, #19
  418382:	4620      	mov	r0, r4
  418384:	4b74      	ldr	r3, [pc, #464]	; (418558 <linemeter_init+0x234>)
  418386:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  418388:	4b71      	ldr	r3, [pc, #452]	; (418550 <linemeter_init+0x22c>)
  41838a:	681c      	ldr	r4, [r3, #0]
  41838c:	3474      	adds	r4, #116	; 0x74
  41838e:	2000      	movs	r0, #0
  418390:	4b72      	ldr	r3, [pc, #456]	; (41855c <linemeter_init+0x238>)
  418392:	4798      	blx	r3
  418394:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418398:	0080      	lsls	r0, r0, #2
  41839a:	3050      	adds	r0, #80	; 0x50
  41839c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4183a0:	f280 808b 	bge.w	4184ba <linemeter_init+0x196>
  4183a4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4183a6:	2110      	movs	r1, #16
  4183a8:	4620      	mov	r0, r4
  4183aa:	4b6b      	ldr	r3, [pc, #428]	; (418558 <linemeter_init+0x234>)
  4183ac:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  4183ae:	4b68      	ldr	r3, [pc, #416]	; (418550 <linemeter_init+0x22c>)
  4183b0:	681c      	ldr	r4, [r3, #0]
  4183b2:	3474      	adds	r4, #116	; 0x74
  4183b4:	2000      	movs	r0, #0
  4183b6:	4b69      	ldr	r3, [pc, #420]	; (41855c <linemeter_init+0x238>)
  4183b8:	4798      	blx	r3
  4183ba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4183be:	0040      	lsls	r0, r0, #1
  4183c0:	3050      	adds	r0, #80	; 0x50
  4183c2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4183c6:	f280 8087 	bge.w	4184d8 <linemeter_init+0x1b4>
  4183ca:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4183cc:	2114      	movs	r1, #20
  4183ce:	4620      	mov	r0, r4
  4183d0:	4b61      	ldr	r3, [pc, #388]	; (418558 <linemeter_init+0x234>)
  4183d2:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  4183d4:	4b5e      	ldr	r3, [pc, #376]	; (418550 <linemeter_init+0x22c>)
  4183d6:	681c      	ldr	r4, [r3, #0]
  4183d8:	3474      	adds	r4, #116	; 0x74
  4183da:	2000      	movs	r0, #0
  4183dc:	4b5f      	ldr	r3, [pc, #380]	; (41855c <linemeter_init+0x238>)
  4183de:	4798      	blx	r3
  4183e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4183e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4183e8:	3050      	adds	r0, #80	; 0x50
  4183ea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4183ee:	f280 8082 	bge.w	4184f6 <linemeter_init+0x1d2>
  4183f2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  4183f4:	21c0      	movs	r1, #192	; 0xc0
  4183f6:	4620      	mov	r0, r4
  4183f8:	4b57      	ldr	r3, [pc, #348]	; (418558 <linemeter_init+0x234>)
  4183fa:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  4183fc:	4c54      	ldr	r4, [pc, #336]	; (418550 <linemeter_init+0x22c>)
  4183fe:	6820      	ldr	r0, [r4, #0]
  418400:	4e57      	ldr	r6, [pc, #348]	; (418560 <linemeter_init+0x23c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418402:	89b2      	ldrh	r2, [r6, #12]
  418404:	2199      	movs	r1, #153	; 0x99
  418406:	3074      	adds	r0, #116	; 0x74
  418408:	4d56      	ldr	r5, [pc, #344]	; (418564 <linemeter_init+0x240>)
  41840a:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  41840c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  41840e:	89b2      	ldrh	r2, [r6, #12]
  418410:	21c9      	movs	r1, #201	; 0xc9
  418412:	3074      	adds	r0, #116	; 0x74
  418414:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  418416:	6820      	ldr	r0, [r4, #0]
  418418:	f04f 0200 	mov.w	r2, #0
  41841c:	2304      	movs	r3, #4
  41841e:	f363 0202 	bfi	r2, r3, #0, #3
  418422:	2311      	movs	r3, #17
  418424:	f363 02c7 	bfi	r2, r3, #3, #5
  418428:	f363 220c 	bfi	r2, r3, #8, #5
  41842c:	2302      	movs	r3, #2
  41842e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  418432:	21ca      	movs	r1, #202	; 0xca
  418434:	3074      	adds	r0, #116	; 0x74
  418436:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  418438:	6824      	ldr	r4, [r4, #0]
  41843a:	3474      	adds	r4, #116	; 0x74
  41843c:	2000      	movs	r0, #0
  41843e:	4b47      	ldr	r3, [pc, #284]	; (41855c <linemeter_init+0x238>)
  418440:	4798      	blx	r3
  418442:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418446:	0040      	lsls	r0, r0, #1
  418448:	3050      	adds	r0, #80	; 0x50
  41844a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41844e:	da62      	bge.n	418516 <linemeter_init+0x1f2>
  418450:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418452:	2190      	movs	r1, #144	; 0x90
  418454:	4620      	mov	r0, r4
  418456:	4b40      	ldr	r3, [pc, #256]	; (418558 <linemeter_init+0x234>)
  418458:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  41845a:	4b3d      	ldr	r3, [pc, #244]	; (418550 <linemeter_init+0x22c>)
  41845c:	681c      	ldr	r4, [r3, #0]
  41845e:	3474      	adds	r4, #116	; 0x74
  418460:	2000      	movs	r0, #0
  418462:	4b3e      	ldr	r3, [pc, #248]	; (41855c <linemeter_init+0x238>)
  418464:	4798      	blx	r3
  418466:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41846a:	3050      	adds	r0, #80	; 0x50
  41846c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418470:	da60      	bge.n	418534 <linemeter_init+0x210>
  418472:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  418474:	21c3      	movs	r1, #195	; 0xc3
  418476:	4620      	mov	r0, r4
  418478:	4b37      	ldr	r3, [pc, #220]	; (418558 <linemeter_init+0x234>)
  41847a:	4798      	blx	r3
  41847c:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  41847e:	2000      	movs	r0, #0
  418480:	4b36      	ldr	r3, [pc, #216]	; (41855c <linemeter_init+0x238>)
  418482:	4798      	blx	r3
  418484:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418488:	0080      	lsls	r0, r0, #2
  41848a:	3050      	adds	r0, #80	; 0x50
  41848c:	4b36      	ldr	r3, [pc, #216]	; (418568 <linemeter_init+0x244>)
  41848e:	fb83 2300 	smull	r2, r3, r3, r0
  418492:	17c2      	asrs	r2, r0, #31
  418494:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418498:	b212      	sxth	r2, r2
  41849a:	e75e      	b.n	41835a <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  41849c:	2000      	movs	r0, #0
  41849e:	4b2f      	ldr	r3, [pc, #188]	; (41855c <linemeter_init+0x238>)
  4184a0:	4798      	blx	r3
  4184a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4184a6:	0080      	lsls	r0, r0, #2
  4184a8:	3050      	adds	r0, #80	; 0x50
  4184aa:	4b2f      	ldr	r3, [pc, #188]	; (418568 <linemeter_init+0x244>)
  4184ac:	fb83 2300 	smull	r2, r3, r3, r0
  4184b0:	17c2      	asrs	r2, r0, #31
  4184b2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4184b6:	b212      	sxth	r2, r2
  4184b8:	e762      	b.n	418380 <linemeter_init+0x5c>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  4184ba:	2000      	movs	r0, #0
  4184bc:	4b27      	ldr	r3, [pc, #156]	; (41855c <linemeter_init+0x238>)
  4184be:	4798      	blx	r3
  4184c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4184c4:	0080      	lsls	r0, r0, #2
  4184c6:	3050      	adds	r0, #80	; 0x50
  4184c8:	4b27      	ldr	r3, [pc, #156]	; (418568 <linemeter_init+0x244>)
  4184ca:	fb83 2300 	smull	r2, r3, r3, r0
  4184ce:	17c2      	asrs	r2, r0, #31
  4184d0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4184d4:	b212      	sxth	r2, r2
  4184d6:	e766      	b.n	4183a6 <linemeter_init+0x82>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  4184d8:	2000      	movs	r0, #0
  4184da:	4b20      	ldr	r3, [pc, #128]	; (41855c <linemeter_init+0x238>)
  4184dc:	4798      	blx	r3
  4184de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4184e2:	0040      	lsls	r0, r0, #1
  4184e4:	3050      	adds	r0, #80	; 0x50
  4184e6:	4b20      	ldr	r3, [pc, #128]	; (418568 <linemeter_init+0x244>)
  4184e8:	fb83 2300 	smull	r2, r3, r3, r0
  4184ec:	17c2      	asrs	r2, r0, #31
  4184ee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4184f2:	b212      	sxth	r2, r2
  4184f4:	e76a      	b.n	4183cc <linemeter_init+0xa8>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  4184f6:	2000      	movs	r0, #0
  4184f8:	4b18      	ldr	r3, [pc, #96]	; (41855c <linemeter_init+0x238>)
  4184fa:	4798      	blx	r3
  4184fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418504:	3050      	adds	r0, #80	; 0x50
  418506:	4b18      	ldr	r3, [pc, #96]	; (418568 <linemeter_init+0x244>)
  418508:	fb83 2300 	smull	r2, r3, r3, r0
  41850c:	17c2      	asrs	r2, r0, #31
  41850e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418512:	b212      	sxth	r2, r2
  418514:	e76e      	b.n	4183f4 <linemeter_init+0xd0>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  418516:	2000      	movs	r0, #0
  418518:	4b10      	ldr	r3, [pc, #64]	; (41855c <linemeter_init+0x238>)
  41851a:	4798      	blx	r3
  41851c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418520:	0040      	lsls	r0, r0, #1
  418522:	3050      	adds	r0, #80	; 0x50
  418524:	4b10      	ldr	r3, [pc, #64]	; (418568 <linemeter_init+0x244>)
  418526:	fb83 2300 	smull	r2, r3, r3, r0
  41852a:	17c2      	asrs	r2, r0, #31
  41852c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418530:	b212      	sxth	r2, r2
  418532:	e78e      	b.n	418452 <linemeter_init+0x12e>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  418534:	2000      	movs	r0, #0
  418536:	4b09      	ldr	r3, [pc, #36]	; (41855c <linemeter_init+0x238>)
  418538:	4798      	blx	r3
  41853a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41853e:	3050      	adds	r0, #80	; 0x50
  418540:	4b09      	ldr	r3, [pc, #36]	; (418568 <linemeter_init+0x244>)
  418542:	fb83 2300 	smull	r2, r3, r3, r0
  418546:	17c2      	asrs	r2, r0, #31
  418548:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41854c:	b212      	sxth	r2, r2
  41854e:	e791      	b.n	418474 <linemeter_init+0x150>
  418550:	20414758 	.word	0x20414758
  418554:	00417d2d 	.word	0x00417d2d
  418558:	004098e5 	.word	0x004098e5
  41855c:	004140fd 	.word	0x004140fd
  418560:	2041475c 	.word	0x2041475c
  418564:	00409a45 	.word	0x00409a45
  418568:	66666667 	.word	0x66666667

0041856c <gauge_init>:
{
  41856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->gauge_main);
  418570:	4cc0      	ldr	r4, [pc, #768]	; (418874 <gauge_init+0x308>)
  418572:	6820      	ldr	r0, [r4, #0]
  418574:	3060      	adds	r0, #96	; 0x60
  418576:	4bc0      	ldr	r3, [pc, #768]	; (418878 <gauge_init+0x30c>)
  418578:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  41857a:	6820      	ldr	r0, [r4, #0]
  41857c:	f04f 0804 	mov.w	r8, #4
  418580:	f04f 0200 	mov.w	r2, #0
  418584:	f368 0202 	bfi	r2, r8, #0, #3
  418588:	2511      	movs	r5, #17
  41858a:	f365 02c7 	bfi	r2, r5, #3, #5
  41858e:	f365 220c 	bfi	r2, r5, #8, #5
  418592:	2702      	movs	r7, #2
  418594:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418598:	2199      	movs	r1, #153	; 0x99
  41859a:	3060      	adds	r0, #96	; 0x60
  41859c:	4eb7      	ldr	r6, [pc, #732]	; (41887c <gauge_init+0x310>)
  41859e:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  4185a0:	6820      	ldr	r0, [r4, #0]
  4185a2:	f04f 0200 	mov.w	r2, #0
  4185a6:	f368 0202 	bfi	r2, r8, #0, #3
  4185aa:	f365 02c7 	bfi	r2, r5, #3, #5
  4185ae:	f365 220c 	bfi	r2, r5, #8, #5
  4185b2:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  4185b6:	21c9      	movs	r1, #201	; 0xc9
  4185b8:	3060      	adds	r0, #96	; 0x60
  4185ba:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
  4185bc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  4185be:	4bb0      	ldr	r3, [pc, #704]	; (418880 <gauge_init+0x314>)
  4185c0:	899a      	ldrh	r2, [r3, #12]
  4185c2:	21ca      	movs	r1, #202	; 0xca
  4185c4:	3060      	adds	r0, #96	; 0x60
  4185c6:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  4185c8:	6824      	ldr	r4, [r4, #0]
  4185ca:	3460      	adds	r4, #96	; 0x60
  4185cc:	2000      	movs	r0, #0
  4185ce:	4bad      	ldr	r3, [pc, #692]	; (418884 <gauge_init+0x318>)
  4185d0:	4798      	blx	r3
  4185d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4185d6:	3050      	adds	r0, #80	; 0x50
  4185d8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4185dc:	f280 8177 	bge.w	4188ce <gauge_init+0x362>
  4185e0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4185e2:	2190      	movs	r1, #144	; 0x90
  4185e4:	4620      	mov	r0, r4
  4185e6:	4ba8      	ldr	r3, [pc, #672]	; (418888 <gauge_init+0x31c>)
  4185e8:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  4185ea:	4ba2      	ldr	r3, [pc, #648]	; (418874 <gauge_init+0x308>)
  4185ec:	681c      	ldr	r4, [r3, #0]
  4185ee:	3460      	adds	r4, #96	; 0x60
  4185f0:	2000      	movs	r0, #0
  4185f2:	4ba4      	ldr	r3, [pc, #656]	; (418884 <gauge_init+0x318>)
  4185f4:	4798      	blx	r3
  4185f6:	3014      	adds	r0, #20
  4185f8:	0080      	lsls	r0, r0, #2
  4185fa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4185fe:	f280 8174 	bge.w	4188ea <gauge_init+0x37e>
  418602:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  418604:	21c3      	movs	r1, #195	; 0xc3
  418606:	4620      	mov	r0, r4
  418608:	4b9f      	ldr	r3, [pc, #636]	; (418888 <gauge_init+0x31c>)
  41860a:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  41860c:	4b99      	ldr	r3, [pc, #612]	; (418874 <gauge_init+0x308>)
  41860e:	681c      	ldr	r4, [r3, #0]
  418610:	3460      	adds	r4, #96	; 0x60
  418612:	2000      	movs	r0, #0
  418614:	4b9b      	ldr	r3, [pc, #620]	; (418884 <gauge_init+0x318>)
  418616:	4798      	blx	r3
  418618:	300a      	adds	r0, #10
  41861a:	00c0      	lsls	r0, r0, #3
  41861c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418620:	f280 8170 	bge.w	418904 <gauge_init+0x398>
  418624:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  418626:	21c2      	movs	r1, #194	; 0xc2
  418628:	4620      	mov	r0, r4
  41862a:	4b97      	ldr	r3, [pc, #604]	; (418888 <gauge_init+0x31c>)
  41862c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41862e:	4b91      	ldr	r3, [pc, #580]	; (418874 <gauge_init+0x308>)
  418630:	681c      	ldr	r4, [r3, #0]
  418632:	3460      	adds	r4, #96	; 0x60
  418634:	2000      	movs	r0, #0
  418636:	4b93      	ldr	r3, [pc, #588]	; (418884 <gauge_init+0x318>)
  418638:	4798      	blx	r3
  41863a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41863e:	0080      	lsls	r0, r0, #2
  418640:	3050      	adds	r0, #80	; 0x50
  418642:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418646:	f280 816a 	bge.w	41891e <gauge_init+0x3b2>
  41864a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41864c:	2112      	movs	r1, #18
  41864e:	4620      	mov	r0, r4
  418650:	4b8d      	ldr	r3, [pc, #564]	; (418888 <gauge_init+0x31c>)
  418652:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  418654:	4b87      	ldr	r3, [pc, #540]	; (418874 <gauge_init+0x308>)
  418656:	681c      	ldr	r4, [r3, #0]
  418658:	3460      	adds	r4, #96	; 0x60
  41865a:	2000      	movs	r0, #0
  41865c:	4b89      	ldr	r3, [pc, #548]	; (418884 <gauge_init+0x318>)
  41865e:	4798      	blx	r3
  418660:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418664:	0080      	lsls	r0, r0, #2
  418666:	3050      	adds	r0, #80	; 0x50
  418668:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41866c:	f280 8166 	bge.w	41893c <gauge_init+0x3d0>
  418670:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418672:	2113      	movs	r1, #19
  418674:	4620      	mov	r0, r4
  418676:	4b84      	ldr	r3, [pc, #528]	; (418888 <gauge_init+0x31c>)
  418678:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41867a:	4b7e      	ldr	r3, [pc, #504]	; (418874 <gauge_init+0x308>)
  41867c:	681c      	ldr	r4, [r3, #0]
  41867e:	3460      	adds	r4, #96	; 0x60
  418680:	2000      	movs	r0, #0
  418682:	4b80      	ldr	r3, [pc, #512]	; (418884 <gauge_init+0x318>)
  418684:	4798      	blx	r3
  418686:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41868a:	0080      	lsls	r0, r0, #2
  41868c:	3050      	adds	r0, #80	; 0x50
  41868e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418692:	f280 8162 	bge.w	41895a <gauge_init+0x3ee>
  418696:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418698:	2110      	movs	r1, #16
  41869a:	4620      	mov	r0, r4
  41869c:	4b7a      	ldr	r3, [pc, #488]	; (418888 <gauge_init+0x31c>)
  41869e:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4186a0:	4b74      	ldr	r3, [pc, #464]	; (418874 <gauge_init+0x308>)
  4186a2:	681c      	ldr	r4, [r3, #0]
  4186a4:	3460      	adds	r4, #96	; 0x60
  4186a6:	2000      	movs	r0, #0
  4186a8:	4b76      	ldr	r3, [pc, #472]	; (418884 <gauge_init+0x318>)
  4186aa:	4798      	blx	r3
  4186ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4186b0:	0080      	lsls	r0, r0, #2
  4186b2:	3050      	adds	r0, #80	; 0x50
  4186b4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4186b8:	f280 815e 	bge.w	418978 <gauge_init+0x40c>
  4186bc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4186be:	2114      	movs	r1, #20
  4186c0:	4620      	mov	r0, r4
  4186c2:	4b71      	ldr	r3, [pc, #452]	; (418888 <gauge_init+0x31c>)
  4186c4:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  4186c6:	4b6b      	ldr	r3, [pc, #428]	; (418874 <gauge_init+0x308>)
  4186c8:	681c      	ldr	r4, [r3, #0]
  4186ca:	3460      	adds	r4, #96	; 0x60
  4186cc:	2000      	movs	r0, #0
  4186ce:	4b6d      	ldr	r3, [pc, #436]	; (418884 <gauge_init+0x318>)
  4186d0:	4798      	blx	r3
  4186d2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4186d6:	3050      	adds	r0, #80	; 0x50
  4186d8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4186dc:	f280 815b 	bge.w	418996 <gauge_init+0x42a>
  4186e0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  4186e2:	21c0      	movs	r1, #192	; 0xc0
  4186e4:	4620      	mov	r0, r4
  4186e6:	4d68      	ldr	r5, [pc, #416]	; (418888 <gauge_init+0x31c>)
  4186e8:	47a8      	blx	r5
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  4186ea:	4c62      	ldr	r4, [pc, #392]	; (418874 <gauge_init+0x308>)
  4186ec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4186ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4186f2:	2101      	movs	r1, #1
  4186f4:	3060      	adds	r0, #96	; 0x60
  4186f6:	47a8      	blx	r5
    style_init_reset(&styles->gauge_strong);
  4186f8:	6820      	ldr	r0, [r4, #0]
  4186fa:	3064      	adds	r0, #100	; 0x64
  4186fc:	4b5e      	ldr	r3, [pc, #376]	; (418878 <gauge_init+0x30c>)
  4186fe:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  418700:	6820      	ldr	r0, [r4, #0]
  418702:	f04f 0804 	mov.w	r8, #4
  418706:	f04f 0200 	mov.w	r2, #0
  41870a:	f368 0202 	bfi	r2, r8, #0, #3
  41870e:	2511      	movs	r5, #17
  418710:	f365 02c7 	bfi	r2, r5, #3, #5
  418714:	f365 220c 	bfi	r2, r5, #8, #5
  418718:	2702      	movs	r7, #2
  41871a:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41871e:	2199      	movs	r1, #153	; 0x99
  418720:	3064      	adds	r0, #100	; 0x64
  418722:	4e56      	ldr	r6, [pc, #344]	; (41887c <gauge_init+0x310>)
  418724:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  418726:	6820      	ldr	r0, [r4, #0]
  418728:	f04f 0200 	mov.w	r2, #0
  41872c:	f368 0202 	bfi	r2, r8, #0, #3
  418730:	f365 02c7 	bfi	r2, r5, #3, #5
  418734:	f365 220c 	bfi	r2, r5, #8, #5
  418738:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  41873c:	21c9      	movs	r1, #201	; 0xc9
  41873e:	3064      	adds	r0, #100	; 0x64
  418740:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
  418742:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  418744:	4b4e      	ldr	r3, [pc, #312]	; (418880 <gauge_init+0x314>)
  418746:	899a      	ldrh	r2, [r3, #12]
  418748:	21ca      	movs	r1, #202	; 0xca
  41874a:	3064      	adds	r0, #100	; 0x64
  41874c:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  41874e:	6824      	ldr	r4, [r4, #0]
  418750:	3464      	adds	r4, #100	; 0x64
  418752:	2000      	movs	r0, #0
  418754:	4b4b      	ldr	r3, [pc, #300]	; (418884 <gauge_init+0x318>)
  418756:	4798      	blx	r3
  418758:	300a      	adds	r0, #10
  41875a:	00c0      	lsls	r0, r0, #3
  41875c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418760:	f280 8127 	bge.w	4189b2 <gauge_init+0x446>
  418764:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418766:	2190      	movs	r1, #144	; 0x90
  418768:	4620      	mov	r0, r4
  41876a:	4b47      	ldr	r3, [pc, #284]	; (418888 <gauge_init+0x31c>)
  41876c:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  41876e:	4b41      	ldr	r3, [pc, #260]	; (418874 <gauge_init+0x308>)
  418770:	681c      	ldr	r4, [r3, #0]
  418772:	3464      	adds	r4, #100	; 0x64
  418774:	2000      	movs	r0, #0
  418776:	4b43      	ldr	r3, [pc, #268]	; (418884 <gauge_init+0x318>)
  418778:	4798      	blx	r3
  41877a:	300a      	adds	r0, #10
  41877c:	00c0      	lsls	r0, r0, #3
  41877e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418782:	f280 8123 	bge.w	4189cc <gauge_init+0x460>
  418786:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  418788:	21c3      	movs	r1, #195	; 0xc3
  41878a:	4620      	mov	r0, r4
  41878c:	4b3e      	ldr	r3, [pc, #248]	; (418888 <gauge_init+0x31c>)
  41878e:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  418790:	4b38      	ldr	r3, [pc, #224]	; (418874 <gauge_init+0x308>)
  418792:	681c      	ldr	r4, [r3, #0]
  418794:	3464      	adds	r4, #100	; 0x64
  418796:	2000      	movs	r0, #0
  418798:	4b3a      	ldr	r3, [pc, #232]	; (418884 <gauge_init+0x318>)
  41879a:	4798      	blx	r3
  41879c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4187a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4187a4:	3050      	adds	r0, #80	; 0x50
  4187a6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4187aa:	f280 811c 	bge.w	4189e6 <gauge_init+0x47a>
  4187ae:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  4187b0:	21c0      	movs	r1, #192	; 0xc0
  4187b2:	4620      	mov	r0, r4
  4187b4:	4b34      	ldr	r3, [pc, #208]	; (418888 <gauge_init+0x31c>)
  4187b6:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
  4187b8:	4c2e      	ldr	r4, [pc, #184]	; (418874 <gauge_init+0x308>)
  4187ba:	6820      	ldr	r0, [r4, #0]
  4187bc:	3068      	adds	r0, #104	; 0x68
  4187be:	4b2e      	ldr	r3, [pc, #184]	; (418878 <gauge_init+0x30c>)
  4187c0:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  4187c2:	6820      	ldr	r0, [r4, #0]
  4187c4:	3068      	adds	r0, #104	; 0x68
  4187c6:	4b2e      	ldr	r3, [pc, #184]	; (418880 <gauge_init+0x314>)
  4187c8:	6a1b      	ldr	r3, [r3, #32]
  4187ca:	f013 0f02 	tst.w	r3, #2
  4187ce:	f040 811a 	bne.w	418a06 <gauge_init+0x49a>
  4187d2:	211f      	movs	r1, #31
  4187d4:	460c      	mov	r4, r1
  4187d6:	2307      	movs	r3, #7
  4187d8:	f04f 0200 	mov.w	r2, #0
  4187dc:	f363 0202 	bfi	r2, r3, #0, #3
  4187e0:	f364 02c7 	bfi	r2, r4, #3, #5
  4187e4:	f361 220c 	bfi	r2, r1, #8, #5
  4187e8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4187ec:	2199      	movs	r1, #153	; 0x99
  4187ee:	4b23      	ldr	r3, [pc, #140]	; (41887c <gauge_init+0x310>)
  4187f0:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  4187f2:	4b20      	ldr	r3, [pc, #128]	; (418874 <gauge_init+0x308>)
  4187f4:	681c      	ldr	r4, [r3, #0]
  4187f6:	3468      	adds	r4, #104	; 0x68
  4187f8:	2000      	movs	r0, #0
  4187fa:	4b22      	ldr	r3, [pc, #136]	; (418884 <gauge_init+0x318>)
  4187fc:	4798      	blx	r3
  4187fe:	300a      	adds	r0, #10
  418800:	00c0      	lsls	r0, r0, #3
  418802:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418806:	f280 8102 	bge.w	418a0e <gauge_init+0x4a2>
  41880a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41880c:	2190      	movs	r1, #144	; 0x90
  41880e:	4620      	mov	r0, r4
  418810:	4b1d      	ldr	r3, [pc, #116]	; (418888 <gauge_init+0x31c>)
  418812:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
  418814:	4c17      	ldr	r4, [pc, #92]	; (418874 <gauge_init+0x308>)
  418816:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418818:	22ff      	movs	r2, #255	; 0xff
  41881a:	212c      	movs	r1, #44	; 0x2c
  41881c:	3068      	adds	r0, #104	; 0x68
  41881e:	4b1b      	ldr	r3, [pc, #108]	; (41888c <gauge_init+0x320>)
  418820:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  418822:	6820      	ldr	r0, [r4, #0]
  418824:	3068      	adds	r0, #104	; 0x68
  418826:	4b16      	ldr	r3, [pc, #88]	; (418880 <gauge_init+0x314>)
  418828:	6a1b      	ldr	r3, [r3, #32]
  41882a:	f013 0f02 	tst.w	r3, #2
  41882e:	f040 80fb 	bne.w	418a28 <gauge_init+0x4bc>
  418832:	211f      	movs	r1, #31
  418834:	460c      	mov	r4, r1
  418836:	2307      	movs	r3, #7
  418838:	f04f 0200 	mov.w	r2, #0
  41883c:	f363 0202 	bfi	r2, r3, #0, #3
  418840:	f364 02c7 	bfi	r2, r4, #3, #5
  418844:	f361 220c 	bfi	r2, r1, #8, #5
  418848:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41884c:	2129      	movs	r1, #41	; 0x29
  41884e:	4b0b      	ldr	r3, [pc, #44]	; (41887c <gauge_init+0x310>)
  418850:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418852:	4c08      	ldr	r4, [pc, #32]	; (418874 <gauge_init+0x308>)
  418854:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418856:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41885a:	2101      	movs	r1, #1
  41885c:	3068      	adds	r0, #104	; 0x68
  41885e:	4b0a      	ldr	r3, [pc, #40]	; (418888 <gauge_init+0x31c>)
  418860:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  418862:	6824      	ldr	r4, [r4, #0]
  418864:	3468      	adds	r4, #104	; 0x68
  418866:	2000      	movs	r0, #0
  418868:	4b06      	ldr	r3, [pc, #24]	; (418884 <gauge_init+0x318>)
  41886a:	4798      	blx	r3
  41886c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418870:	0040      	lsls	r0, r0, #1
  418872:	e00d      	b.n	418890 <gauge_init+0x324>
  418874:	20414758 	.word	0x20414758
  418878:	00417d2d 	.word	0x00417d2d
  41887c:	00409a45 	.word	0x00409a45
  418880:	2041475c 	.word	0x2041475c
  418884:	004140fd 	.word	0x004140fd
  418888:	004098e5 	.word	0x004098e5
  41888c:	00409ba5 	.word	0x00409ba5
  418890:	3050      	adds	r0, #80	; 0x50
  418892:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418896:	f280 80cb 	bge.w	418a30 <gauge_init+0x4c4>
  41889a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41889c:	2103      	movs	r1, #3
  41889e:	4620      	mov	r0, r4
  4188a0:	4b72      	ldr	r3, [pc, #456]	; (418a6c <gauge_init+0x500>)
  4188a2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  4188a4:	4b72      	ldr	r3, [pc, #456]	; (418a70 <gauge_init+0x504>)
  4188a6:	681c      	ldr	r4, [r3, #0]
  4188a8:	3468      	adds	r4, #104	; 0x68
  4188aa:	2000      	movs	r0, #0
  4188ac:	4b71      	ldr	r3, [pc, #452]	; (418a74 <gauge_init+0x508>)
  4188ae:	4798      	blx	r3
  4188b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4188b4:	0040      	lsls	r0, r0, #1
  4188b6:	3050      	adds	r0, #80	; 0x50
  4188b8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4188bc:	f280 80c7 	bge.w	418a4e <gauge_init+0x4e2>
  4188c0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4188c2:	2114      	movs	r1, #20
  4188c4:	4620      	mov	r0, r4
  4188c6:	4b69      	ldr	r3, [pc, #420]	; (418a6c <gauge_init+0x500>)
  4188c8:	4798      	blx	r3
  4188ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  4188ce:	2000      	movs	r0, #0
  4188d0:	4b68      	ldr	r3, [pc, #416]	; (418a74 <gauge_init+0x508>)
  4188d2:	4798      	blx	r3
  4188d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4188d8:	3050      	adds	r0, #80	; 0x50
  4188da:	4b67      	ldr	r3, [pc, #412]	; (418a78 <gauge_init+0x50c>)
  4188dc:	fb83 2300 	smull	r2, r3, r3, r0
  4188e0:	17c2      	asrs	r2, r0, #31
  4188e2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4188e6:	b212      	sxth	r2, r2
  4188e8:	e67b      	b.n	4185e2 <gauge_init+0x76>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  4188ea:	2000      	movs	r0, #0
  4188ec:	4b61      	ldr	r3, [pc, #388]	; (418a74 <gauge_init+0x508>)
  4188ee:	4798      	blx	r3
  4188f0:	3014      	adds	r0, #20
  4188f2:	0080      	lsls	r0, r0, #2
  4188f4:	4b60      	ldr	r3, [pc, #384]	; (418a78 <gauge_init+0x50c>)
  4188f6:	fb83 2300 	smull	r2, r3, r3, r0
  4188fa:	17c2      	asrs	r2, r0, #31
  4188fc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418900:	b212      	sxth	r2, r2
  418902:	e67f      	b.n	418604 <gauge_init+0x98>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  418904:	2000      	movs	r0, #0
  418906:	4b5b      	ldr	r3, [pc, #364]	; (418a74 <gauge_init+0x508>)
  418908:	4798      	blx	r3
  41890a:	300a      	adds	r0, #10
  41890c:	00c0      	lsls	r0, r0, #3
  41890e:	4b5a      	ldr	r3, [pc, #360]	; (418a78 <gauge_init+0x50c>)
  418910:	fb83 2300 	smull	r2, r3, r3, r0
  418914:	17c2      	asrs	r2, r0, #31
  418916:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41891a:	b212      	sxth	r2, r2
  41891c:	e683      	b.n	418626 <gauge_init+0xba>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41891e:	2000      	movs	r0, #0
  418920:	4b54      	ldr	r3, [pc, #336]	; (418a74 <gauge_init+0x508>)
  418922:	4798      	blx	r3
  418924:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418928:	0080      	lsls	r0, r0, #2
  41892a:	3050      	adds	r0, #80	; 0x50
  41892c:	4b52      	ldr	r3, [pc, #328]	; (418a78 <gauge_init+0x50c>)
  41892e:	fb83 2300 	smull	r2, r3, r3, r0
  418932:	17c2      	asrs	r2, r0, #31
  418934:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418938:	b212      	sxth	r2, r2
  41893a:	e687      	b.n	41864c <gauge_init+0xe0>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41893c:	2000      	movs	r0, #0
  41893e:	4b4d      	ldr	r3, [pc, #308]	; (418a74 <gauge_init+0x508>)
  418940:	4798      	blx	r3
  418942:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418946:	0080      	lsls	r0, r0, #2
  418948:	3050      	adds	r0, #80	; 0x50
  41894a:	4b4b      	ldr	r3, [pc, #300]	; (418a78 <gauge_init+0x50c>)
  41894c:	fb83 2300 	smull	r2, r3, r3, r0
  418950:	17c2      	asrs	r2, r0, #31
  418952:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418956:	b212      	sxth	r2, r2
  418958:	e68b      	b.n	418672 <gauge_init+0x106>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41895a:	2000      	movs	r0, #0
  41895c:	4b45      	ldr	r3, [pc, #276]	; (418a74 <gauge_init+0x508>)
  41895e:	4798      	blx	r3
  418960:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418964:	0080      	lsls	r0, r0, #2
  418966:	3050      	adds	r0, #80	; 0x50
  418968:	4b43      	ldr	r3, [pc, #268]	; (418a78 <gauge_init+0x50c>)
  41896a:	fb83 2300 	smull	r2, r3, r3, r0
  41896e:	17c2      	asrs	r2, r0, #31
  418970:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418974:	b212      	sxth	r2, r2
  418976:	e68f      	b.n	418698 <gauge_init+0x12c>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  418978:	2000      	movs	r0, #0
  41897a:	4b3e      	ldr	r3, [pc, #248]	; (418a74 <gauge_init+0x508>)
  41897c:	4798      	blx	r3
  41897e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418982:	0080      	lsls	r0, r0, #2
  418984:	3050      	adds	r0, #80	; 0x50
  418986:	4b3c      	ldr	r3, [pc, #240]	; (418a78 <gauge_init+0x50c>)
  418988:	fb83 2300 	smull	r2, r3, r3, r0
  41898c:	17c2      	asrs	r2, r0, #31
  41898e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418992:	b212      	sxth	r2, r2
  418994:	e693      	b.n	4186be <gauge_init+0x152>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  418996:	2000      	movs	r0, #0
  418998:	4b36      	ldr	r3, [pc, #216]	; (418a74 <gauge_init+0x508>)
  41899a:	4798      	blx	r3
  41899c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4189a0:	3050      	adds	r0, #80	; 0x50
  4189a2:	4b35      	ldr	r3, [pc, #212]	; (418a78 <gauge_init+0x50c>)
  4189a4:	fb83 2300 	smull	r2, r3, r3, r0
  4189a8:	17c2      	asrs	r2, r0, #31
  4189aa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4189ae:	b212      	sxth	r2, r2
  4189b0:	e697      	b.n	4186e2 <gauge_init+0x176>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  4189b2:	2000      	movs	r0, #0
  4189b4:	4b2f      	ldr	r3, [pc, #188]	; (418a74 <gauge_init+0x508>)
  4189b6:	4798      	blx	r3
  4189b8:	300a      	adds	r0, #10
  4189ba:	00c0      	lsls	r0, r0, #3
  4189bc:	4b2e      	ldr	r3, [pc, #184]	; (418a78 <gauge_init+0x50c>)
  4189be:	fb83 2300 	smull	r2, r3, r3, r0
  4189c2:	17c2      	asrs	r2, r0, #31
  4189c4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4189c8:	b212      	sxth	r2, r2
  4189ca:	e6cc      	b.n	418766 <gauge_init+0x1fa>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  4189cc:	2000      	movs	r0, #0
  4189ce:	4b29      	ldr	r3, [pc, #164]	; (418a74 <gauge_init+0x508>)
  4189d0:	4798      	blx	r3
  4189d2:	300a      	adds	r0, #10
  4189d4:	00c0      	lsls	r0, r0, #3
  4189d6:	4b28      	ldr	r3, [pc, #160]	; (418a78 <gauge_init+0x50c>)
  4189d8:	fb83 2300 	smull	r2, r3, r3, r0
  4189dc:	17c2      	asrs	r2, r0, #31
  4189de:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4189e2:	b212      	sxth	r2, r2
  4189e4:	e6d0      	b.n	418788 <gauge_init+0x21c>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  4189e6:	2000      	movs	r0, #0
  4189e8:	4b22      	ldr	r3, [pc, #136]	; (418a74 <gauge_init+0x508>)
  4189ea:	4798      	blx	r3
  4189ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4189f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4189f4:	3050      	adds	r0, #80	; 0x50
  4189f6:	4b20      	ldr	r3, [pc, #128]	; (418a78 <gauge_init+0x50c>)
  4189f8:	fb83 2300 	smull	r2, r3, r3, r0
  4189fc:	17c2      	asrs	r2, r0, #31
  4189fe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418a02:	b212      	sxth	r2, r2
  418a04:	e6d4      	b.n	4187b0 <gauge_init+0x244>
  418a06:	210b      	movs	r1, #11
  418a08:	2408      	movs	r4, #8
  418a0a:	2302      	movs	r3, #2
  418a0c:	e6e4      	b.n	4187d8 <gauge_init+0x26c>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  418a0e:	2000      	movs	r0, #0
  418a10:	4b18      	ldr	r3, [pc, #96]	; (418a74 <gauge_init+0x508>)
  418a12:	4798      	blx	r3
  418a14:	300a      	adds	r0, #10
  418a16:	00c0      	lsls	r0, r0, #3
  418a18:	4b17      	ldr	r3, [pc, #92]	; (418a78 <gauge_init+0x50c>)
  418a1a:	fb83 2300 	smull	r2, r3, r3, r0
  418a1e:	17c2      	asrs	r2, r0, #31
  418a20:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418a24:	b212      	sxth	r2, r2
  418a26:	e6f1      	b.n	41880c <gauge_init+0x2a0>
  418a28:	210b      	movs	r1, #11
  418a2a:	2408      	movs	r4, #8
  418a2c:	2302      	movs	r3, #2
  418a2e:	e703      	b.n	418838 <gauge_init+0x2cc>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  418a30:	2000      	movs	r0, #0
  418a32:	4b10      	ldr	r3, [pc, #64]	; (418a74 <gauge_init+0x508>)
  418a34:	4798      	blx	r3
  418a36:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418a3a:	0040      	lsls	r0, r0, #1
  418a3c:	3050      	adds	r0, #80	; 0x50
  418a3e:	4b0e      	ldr	r3, [pc, #56]	; (418a78 <gauge_init+0x50c>)
  418a40:	fb83 2300 	smull	r2, r3, r3, r0
  418a44:	17c2      	asrs	r2, r0, #31
  418a46:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418a4a:	b212      	sxth	r2, r2
  418a4c:	e726      	b.n	41889c <gauge_init+0x330>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  418a4e:	2000      	movs	r0, #0
  418a50:	4b08      	ldr	r3, [pc, #32]	; (418a74 <gauge_init+0x508>)
  418a52:	4798      	blx	r3
  418a54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418a58:	0040      	lsls	r0, r0, #1
  418a5a:	3050      	adds	r0, #80	; 0x50
  418a5c:	4b06      	ldr	r3, [pc, #24]	; (418a78 <gauge_init+0x50c>)
  418a5e:	fb83 2300 	smull	r2, r3, r3, r0
  418a62:	17c2      	asrs	r2, r0, #31
  418a64:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418a68:	b212      	sxth	r2, r2
  418a6a:	e72a      	b.n	4188c2 <gauge_init+0x356>
  418a6c:	004098e5 	.word	0x004098e5
  418a70:	20414758 	.word	0x20414758
  418a74:	004140fd 	.word	0x004140fd
  418a78:	66666667 	.word	0x66666667

00418a7c <arc_init>:
{
  418a7c:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->arc_indic);
  418a7e:	4c4e      	ldr	r4, [pc, #312]	; (418bb8 <arc_init+0x13c>)
  418a80:	6820      	ldr	r0, [r4, #0]
  418a82:	301c      	adds	r0, #28
  418a84:	4b4d      	ldr	r3, [pc, #308]	; (418bbc <arc_init+0x140>)
  418a86:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
  418a88:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418a8a:	4b4d      	ldr	r3, [pc, #308]	; (418bc0 <arc_init+0x144>)
  418a8c:	899a      	ldrh	r2, [r3, #12]
  418a8e:	2199      	movs	r1, #153	; 0x99
  418a90:	301c      	adds	r0, #28
  418a92:	4b4c      	ldr	r3, [pc, #304]	; (418bc4 <arc_init+0x148>)
  418a94:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  418a96:	6824      	ldr	r4, [r4, #0]
  418a98:	341c      	adds	r4, #28
  418a9a:	2000      	movs	r0, #0
  418a9c:	4b4a      	ldr	r3, [pc, #296]	; (418bc8 <arc_init+0x14c>)
  418a9e:	4798      	blx	r3
  418aa0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418aa4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418aa8:	3050      	adds	r0, #80	; 0x50
  418aaa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418aae:	da5e      	bge.n	418b6e <arc_init+0xf2>
  418ab0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418ab2:	2190      	movs	r1, #144	; 0x90
  418ab4:	4620      	mov	r0, r4
  418ab6:	4d45      	ldr	r5, [pc, #276]	; (418bcc <arc_init+0x150>)
  418ab8:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
  418aba:	4c3f      	ldr	r4, [pc, #252]	; (418bb8 <arc_init+0x13c>)
  418abc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  418abe:	2201      	movs	r2, #1
  418ac0:	2194      	movs	r1, #148	; 0x94
  418ac2:	301c      	adds	r0, #28
  418ac4:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
  418ac6:	6820      	ldr	r0, [r4, #0]
  418ac8:	3020      	adds	r0, #32
  418aca:	4b3c      	ldr	r3, [pc, #240]	; (418bbc <arc_init+0x140>)
  418acc:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  418ace:	6820      	ldr	r0, [r4, #0]
  418ad0:	3020      	adds	r0, #32
  418ad2:	4b3b      	ldr	r3, [pc, #236]	; (418bc0 <arc_init+0x144>)
  418ad4:	6a1b      	ldr	r3, [r3, #32]
  418ad6:	f013 0f02 	tst.w	r3, #2
  418ada:	d158      	bne.n	418b8e <arc_init+0x112>
  418adc:	2302      	movs	r3, #2
  418ade:	2109      	movs	r1, #9
  418ae0:	2408      	movs	r4, #8
  418ae2:	461d      	mov	r5, r3
  418ae4:	f04f 0200 	mov.w	r2, #0
  418ae8:	f365 0202 	bfi	r2, r5, #0, #3
  418aec:	f364 02c7 	bfi	r2, r4, #3, #5
  418af0:	f361 220c 	bfi	r2, r1, #8, #5
  418af4:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418af8:	2199      	movs	r1, #153	; 0x99
  418afa:	4b32      	ldr	r3, [pc, #200]	; (418bc4 <arc_init+0x148>)
  418afc:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  418afe:	4b2e      	ldr	r3, [pc, #184]	; (418bb8 <arc_init+0x13c>)
  418b00:	681c      	ldr	r4, [r3, #0]
  418b02:	3420      	adds	r4, #32
  418b04:	2000      	movs	r0, #0
  418b06:	4b30      	ldr	r3, [pc, #192]	; (418bc8 <arc_init+0x14c>)
  418b08:	4798      	blx	r3
  418b0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418b0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418b12:	3050      	adds	r0, #80	; 0x50
  418b14:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418b18:	da3e      	bge.n	418b98 <arc_init+0x11c>
  418b1a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418b1c:	2190      	movs	r1, #144	; 0x90
  418b1e:	4620      	mov	r0, r4
  418b20:	4c2a      	ldr	r4, [pc, #168]	; (418bcc <arc_init+0x150>)
  418b22:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
  418b24:	4d24      	ldr	r5, [pc, #144]	; (418bb8 <arc_init+0x13c>)
  418b26:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  418b28:	2201      	movs	r2, #1
  418b2a:	2194      	movs	r1, #148	; 0x94
  418b2c:	3020      	adds	r0, #32
  418b2e:	47a0      	blx	r4
    style_init_reset(&styles->arc_knob);
  418b30:	6828      	ldr	r0, [r5, #0]
  418b32:	3024      	adds	r0, #36	; 0x24
  418b34:	4b21      	ldr	r3, [pc, #132]	; (418bbc <arc_init+0x140>)
  418b36:	4798      	blx	r3
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
  418b38:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418b3a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418b3e:	2101      	movs	r1, #1
  418b40:	3024      	adds	r0, #36	; 0x24
  418b42:	47a0      	blx	r4
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  418b44:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418b46:	2200      	movs	r2, #0
  418b48:	2110      	movs	r1, #16
  418b4a:	3024      	adds	r0, #36	; 0x24
  418b4c:	47a0      	blx	r4
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  418b4e:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418b50:	2200      	movs	r2, #0
  418b52:	2111      	movs	r1, #17
  418b54:	3024      	adds	r0, #36	; 0x24
  418b56:	47a0      	blx	r4
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
  418b58:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418b5a:	2200      	movs	r2, #0
  418b5c:	2112      	movs	r1, #18
  418b5e:	3024      	adds	r0, #36	; 0x24
  418b60:	47a0      	blx	r4
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
  418b62:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418b64:	2200      	movs	r2, #0
  418b66:	2113      	movs	r1, #19
  418b68:	3024      	adds	r0, #36	; 0x24
  418b6a:	47a0      	blx	r4
  418b6c:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  418b6e:	2000      	movs	r0, #0
  418b70:	4b15      	ldr	r3, [pc, #84]	; (418bc8 <arc_init+0x14c>)
  418b72:	4798      	blx	r3
  418b74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418b78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418b7c:	3050      	adds	r0, #80	; 0x50
  418b7e:	4b14      	ldr	r3, [pc, #80]	; (418bd0 <arc_init+0x154>)
  418b80:	fb83 2300 	smull	r2, r3, r3, r0
  418b84:	17c2      	asrs	r2, r0, #31
  418b86:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418b8a:	b212      	sxth	r2, r2
  418b8c:	e791      	b.n	418ab2 <arc_init+0x36>
  418b8e:	2305      	movs	r3, #5
  418b90:	211b      	movs	r1, #27
  418b92:	241a      	movs	r4, #26
  418b94:	2506      	movs	r5, #6
  418b96:	e7a5      	b.n	418ae4 <arc_init+0x68>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  418b98:	2000      	movs	r0, #0
  418b9a:	4b0b      	ldr	r3, [pc, #44]	; (418bc8 <arc_init+0x14c>)
  418b9c:	4798      	blx	r3
  418b9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418ba2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418ba6:	3050      	adds	r0, #80	; 0x50
  418ba8:	4b09      	ldr	r3, [pc, #36]	; (418bd0 <arc_init+0x154>)
  418baa:	fb83 2300 	smull	r2, r3, r3, r0
  418bae:	17c2      	asrs	r2, r0, #31
  418bb0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418bb4:	b212      	sxth	r2, r2
  418bb6:	e7b1      	b.n	418b1c <arc_init+0xa0>
  418bb8:	20414758 	.word	0x20414758
  418bbc:	00417d2d 	.word	0x00417d2d
  418bc0:	2041475c 	.word	0x2041475c
  418bc4:	00409a45 	.word	0x00409a45
  418bc8:	004140fd 	.word	0x004140fd
  418bcc:	004098e5 	.word	0x004098e5
  418bd0:	66666667 	.word	0x66666667

00418bd4 <chart_init>:
{
  418bd4:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->chart_bg);
  418bd6:	4c90      	ldr	r4, [pc, #576]	; (418e18 <chart_init+0x244>)
  418bd8:	6820      	ldr	r0, [r4, #0]
  418bda:	3044      	adds	r0, #68	; 0x44
  418bdc:	4b8f      	ldr	r3, [pc, #572]	; (418e1c <chart_init+0x248>)
  418bde:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  418be0:	6820      	ldr	r0, [r4, #0]
  418be2:	3044      	adds	r0, #68	; 0x44
  418be4:	4b8e      	ldr	r3, [pc, #568]	; (418e20 <chart_init+0x24c>)
  418be6:	6a1b      	ldr	r3, [r3, #32]
  418be8:	f013 0f02 	tst.w	r3, #2
  418bec:	f040 80b1 	bne.w	418d52 <chart_init+0x17e>
  418bf0:	2103      	movs	r1, #3
  418bf2:	2317      	movs	r3, #23
  418bf4:	2414      	movs	r4, #20
  418bf6:	f04f 0200 	mov.w	r2, #0
  418bfa:	2505      	movs	r5, #5
  418bfc:	f365 0202 	bfi	r2, r5, #0, #3
  418c00:	f364 02c7 	bfi	r2, r4, #3, #5
  418c04:	f363 220c 	bfi	r2, r3, #8, #5
  418c08:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  418c0c:	f248 0189 	movw	r1, #32905	; 0x8089
  418c10:	4b84      	ldr	r3, [pc, #528]	; (418e24 <chart_init+0x250>)
  418c12:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
  418c14:	4c80      	ldr	r4, [pc, #512]	; (418e18 <chart_init+0x244>)
  418c16:	6820      	ldr	r0, [r4, #0]
  418c18:	3048      	adds	r0, #72	; 0x48
  418c1a:	4b80      	ldr	r3, [pc, #512]	; (418e1c <chart_init+0x248>)
  418c1c:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  418c1e:	6824      	ldr	r4, [r4, #0]
  418c20:	3448      	adds	r4, #72	; 0x48
  418c22:	2000      	movs	r0, #0
  418c24:	4b80      	ldr	r3, [pc, #512]	; (418e28 <chart_init+0x254>)
  418c26:	4798      	blx	r3
  418c28:	3050      	adds	r0, #80	; 0x50
  418c2a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c2e:	f280 8094 	bge.w	418d5a <chart_init+0x186>
  418c32:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418c34:	2190      	movs	r1, #144	; 0x90
  418c36:	4620      	mov	r0, r4
  418c38:	4b7c      	ldr	r3, [pc, #496]	; (418e2c <chart_init+0x258>)
  418c3a:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418c3c:	4b76      	ldr	r3, [pc, #472]	; (418e18 <chart_init+0x244>)
  418c3e:	681c      	ldr	r4, [r3, #0]
  418c40:	3448      	adds	r4, #72	; 0x48
  418c42:	2000      	movs	r0, #0
  418c44:	4b78      	ldr	r3, [pc, #480]	; (418e28 <chart_init+0x254>)
  418c46:	4798      	blx	r3
  418c48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418c4c:	0040      	lsls	r0, r0, #1
  418c4e:	3050      	adds	r0, #80	; 0x50
  418c50:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c54:	f280 808d 	bge.w	418d72 <chart_init+0x19e>
  418c58:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  418c5a:	2192      	movs	r1, #146	; 0x92
  418c5c:	4620      	mov	r0, r4
  418c5e:	4b73      	ldr	r3, [pc, #460]	; (418e2c <chart_init+0x258>)
  418c60:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418c62:	4b6d      	ldr	r3, [pc, #436]	; (418e18 <chart_init+0x244>)
  418c64:	681c      	ldr	r4, [r3, #0]
  418c66:	3448      	adds	r4, #72	; 0x48
  418c68:	2000      	movs	r0, #0
  418c6a:	4b6f      	ldr	r3, [pc, #444]	; (418e28 <chart_init+0x254>)
  418c6c:	4798      	blx	r3
  418c6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418c72:	0040      	lsls	r0, r0, #1
  418c74:	3050      	adds	r0, #80	; 0x50
  418c76:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c7a:	f280 8089 	bge.w	418d90 <chart_init+0x1bc>
  418c7e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  418c80:	2193      	movs	r1, #147	; 0x93
  418c82:	4620      	mov	r0, r4
  418c84:	4b69      	ldr	r3, [pc, #420]	; (418e2c <chart_init+0x258>)
  418c86:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  418c88:	4b63      	ldr	r3, [pc, #396]	; (418e18 <chart_init+0x244>)
  418c8a:	6818      	ldr	r0, [r3, #0]
  418c8c:	4b64      	ldr	r3, [pc, #400]	; (418e20 <chart_init+0x24c>)
  418c8e:	6a1b      	ldr	r3, [r3, #32]
  418c90:	f013 0302 	ands.w	r3, r3, #2
  418c94:	bf14      	ite	ne
  418c96:	2107      	movne	r1, #7
  418c98:	2102      	moveq	r1, #2
  418c9a:	2b00      	cmp	r3, #0
  418c9c:	bf15      	itete	ne
  418c9e:	241c      	movne	r4, #28
  418ca0:	2412      	moveq	r4, #18
  418ca2:	251a      	movne	r5, #26
  418ca4:	2510      	moveq	r5, #16
  418ca6:	bf14      	ite	ne
  418ca8:	2306      	movne	r3, #6
  418caa:	2304      	moveq	r3, #4
  418cac:	f04f 0200 	mov.w	r2, #0
  418cb0:	f363 0202 	bfi	r2, r3, #0, #3
  418cb4:	f365 02c7 	bfi	r2, r5, #3, #5
  418cb8:	f364 220c 	bfi	r2, r4, #8, #5
  418cbc:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418cc0:	2199      	movs	r1, #153	; 0x99
  418cc2:	3048      	adds	r0, #72	; 0x48
  418cc4:	4b57      	ldr	r3, [pc, #348]	; (418e24 <chart_init+0x250>)
  418cc6:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
  418cc8:	4c53      	ldr	r4, [pc, #332]	; (418e18 <chart_init+0x244>)
  418cca:	6820      	ldr	r0, [r4, #0]
  418ccc:	304c      	adds	r0, #76	; 0x4c
  418cce:	4b53      	ldr	r3, [pc, #332]	; (418e1c <chart_init+0x248>)
  418cd0:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  418cd2:	6824      	ldr	r4, [r4, #0]
  418cd4:	344c      	adds	r4, #76	; 0x4c
  418cd6:	2000      	movs	r0, #0
  418cd8:	4b53      	ldr	r3, [pc, #332]	; (418e28 <chart_init+0x254>)
  418cda:	4798      	blx	r3
  418cdc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418ce0:	3050      	adds	r0, #80	; 0x50
  418ce2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418ce6:	da62      	bge.n	418dae <chart_init+0x1da>
  418ce8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418cea:	2190      	movs	r1, #144	; 0x90
  418cec:	4620      	mov	r0, r4
  418cee:	4b4f      	ldr	r3, [pc, #316]	; (418e2c <chart_init+0x258>)
  418cf0:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  418cf2:	4b49      	ldr	r3, [pc, #292]	; (418e18 <chart_init+0x244>)
  418cf4:	681c      	ldr	r4, [r3, #0]
  418cf6:	344c      	adds	r4, #76	; 0x4c
  418cf8:	2000      	movs	r0, #0
  418cfa:	4b4b      	ldr	r3, [pc, #300]	; (418e28 <chart_init+0x254>)
  418cfc:	4798      	blx	r3
  418cfe:	3014      	adds	r0, #20
  418d00:	0080      	lsls	r0, r0, #2
  418d02:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d06:	da60      	bge.n	418dca <chart_init+0x1f6>
  418d08:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  418d0a:	2103      	movs	r1, #3
  418d0c:	4620      	mov	r0, r4
  418d0e:	4b47      	ldr	r3, [pc, #284]	; (418e2c <chart_init+0x258>)
  418d10:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  418d12:	4b41      	ldr	r3, [pc, #260]	; (418e18 <chart_init+0x244>)
  418d14:	681c      	ldr	r4, [r3, #0]
  418d16:	344c      	adds	r4, #76	; 0x4c
  418d18:	2000      	movs	r0, #0
  418d1a:	4b43      	ldr	r3, [pc, #268]	; (418e28 <chart_init+0x254>)
  418d1c:	4798      	blx	r3
  418d1e:	3028      	adds	r0, #40	; 0x28
  418d20:	0040      	lsls	r0, r0, #1
  418d22:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d26:	da5d      	bge.n	418de4 <chart_init+0x210>
  418d28:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  418d2a:	2114      	movs	r1, #20
  418d2c:	4620      	mov	r0, r4
  418d2e:	4b3f      	ldr	r3, [pc, #252]	; (418e2c <chart_init+0x258>)
  418d30:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  418d32:	4b39      	ldr	r3, [pc, #228]	; (418e18 <chart_init+0x244>)
  418d34:	681c      	ldr	r4, [r3, #0]
  418d36:	344c      	adds	r4, #76	; 0x4c
  418d38:	2000      	movs	r0, #0
  418d3a:	4b3b      	ldr	r3, [pc, #236]	; (418e28 <chart_init+0x254>)
  418d3c:	4798      	blx	r3
  418d3e:	3050      	adds	r0, #80	; 0x50
  418d40:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d44:	da5b      	bge.n	418dfe <chart_init+0x22a>
  418d46:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418d48:	2101      	movs	r1, #1
  418d4a:	4620      	mov	r0, r4
  418d4c:	4b37      	ldr	r3, [pc, #220]	; (418e2c <chart_init+0x258>)
  418d4e:	4798      	blx	r3
  418d50:	bd38      	pop	{r3, r4, r5, pc}
  418d52:	2102      	movs	r1, #2
  418d54:	2315      	movs	r3, #21
  418d56:	461c      	mov	r4, r3
  418d58:	e74d      	b.n	418bf6 <chart_init+0x22>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  418d5a:	2000      	movs	r0, #0
  418d5c:	4b32      	ldr	r3, [pc, #200]	; (418e28 <chart_init+0x254>)
  418d5e:	4798      	blx	r3
  418d60:	3050      	adds	r0, #80	; 0x50
  418d62:	4b33      	ldr	r3, [pc, #204]	; (418e30 <chart_init+0x25c>)
  418d64:	fb83 2300 	smull	r2, r3, r3, r0
  418d68:	17c2      	asrs	r2, r0, #31
  418d6a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d6e:	b212      	sxth	r2, r2
  418d70:	e760      	b.n	418c34 <chart_init+0x60>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418d72:	2000      	movs	r0, #0
  418d74:	4b2c      	ldr	r3, [pc, #176]	; (418e28 <chart_init+0x254>)
  418d76:	4798      	blx	r3
  418d78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418d7c:	0040      	lsls	r0, r0, #1
  418d7e:	3050      	adds	r0, #80	; 0x50
  418d80:	4b2b      	ldr	r3, [pc, #172]	; (418e30 <chart_init+0x25c>)
  418d82:	fb83 2300 	smull	r2, r3, r3, r0
  418d86:	17c2      	asrs	r2, r0, #31
  418d88:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d8c:	b212      	sxth	r2, r2
  418d8e:	e764      	b.n	418c5a <chart_init+0x86>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418d90:	2000      	movs	r0, #0
  418d92:	4b25      	ldr	r3, [pc, #148]	; (418e28 <chart_init+0x254>)
  418d94:	4798      	blx	r3
  418d96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418d9a:	0040      	lsls	r0, r0, #1
  418d9c:	3050      	adds	r0, #80	; 0x50
  418d9e:	4b24      	ldr	r3, [pc, #144]	; (418e30 <chart_init+0x25c>)
  418da0:	fb83 2300 	smull	r2, r3, r3, r0
  418da4:	17c2      	asrs	r2, r0, #31
  418da6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418daa:	b212      	sxth	r2, r2
  418dac:	e768      	b.n	418c80 <chart_init+0xac>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  418dae:	2000      	movs	r0, #0
  418db0:	4b1d      	ldr	r3, [pc, #116]	; (418e28 <chart_init+0x254>)
  418db2:	4798      	blx	r3
  418db4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418db8:	3050      	adds	r0, #80	; 0x50
  418dba:	4b1d      	ldr	r3, [pc, #116]	; (418e30 <chart_init+0x25c>)
  418dbc:	fb83 2300 	smull	r2, r3, r3, r0
  418dc0:	17c2      	asrs	r2, r0, #31
  418dc2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418dc6:	b212      	sxth	r2, r2
  418dc8:	e78f      	b.n	418cea <chart_init+0x116>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  418dca:	2000      	movs	r0, #0
  418dcc:	4b16      	ldr	r3, [pc, #88]	; (418e28 <chart_init+0x254>)
  418dce:	4798      	blx	r3
  418dd0:	3014      	adds	r0, #20
  418dd2:	0080      	lsls	r0, r0, #2
  418dd4:	4b16      	ldr	r3, [pc, #88]	; (418e30 <chart_init+0x25c>)
  418dd6:	fb83 2300 	smull	r2, r3, r3, r0
  418dda:	17c2      	asrs	r2, r0, #31
  418ddc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418de0:	b212      	sxth	r2, r2
  418de2:	e792      	b.n	418d0a <chart_init+0x136>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  418de4:	2000      	movs	r0, #0
  418de6:	4b10      	ldr	r3, [pc, #64]	; (418e28 <chart_init+0x254>)
  418de8:	4798      	blx	r3
  418dea:	3028      	adds	r0, #40	; 0x28
  418dec:	0040      	lsls	r0, r0, #1
  418dee:	4b10      	ldr	r3, [pc, #64]	; (418e30 <chart_init+0x25c>)
  418df0:	fb83 2300 	smull	r2, r3, r3, r0
  418df4:	17c2      	asrs	r2, r0, #31
  418df6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418dfa:	b212      	sxth	r2, r2
  418dfc:	e795      	b.n	418d2a <chart_init+0x156>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  418dfe:	2000      	movs	r0, #0
  418e00:	4b09      	ldr	r3, [pc, #36]	; (418e28 <chart_init+0x254>)
  418e02:	4798      	blx	r3
  418e04:	3050      	adds	r0, #80	; 0x50
  418e06:	4b0a      	ldr	r3, [pc, #40]	; (418e30 <chart_init+0x25c>)
  418e08:	fb83 2300 	smull	r2, r3, r3, r0
  418e0c:	17c2      	asrs	r2, r0, #31
  418e0e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e12:	b212      	sxth	r2, r2
  418e14:	e798      	b.n	418d48 <chart_init+0x174>
  418e16:	bf00      	nop
  418e18:	20414758 	.word	0x20414758
  418e1c:	00417d2d 	.word	0x00417d2d
  418e20:	2041475c 	.word	0x2041475c
  418e24:	00409a45 	.word	0x00409a45
  418e28:	004140fd 	.word	0x004140fd
  418e2c:	004098e5 	.word	0x004098e5
  418e30:	66666667 	.word	0x66666667

00418e34 <led_init>:
{
  418e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->led);
  418e38:	4c3a      	ldr	r4, [pc, #232]	; (418f24 <led_init+0xf0>)
  418e3a:	6820      	ldr	r0, [r4, #0]
  418e3c:	3070      	adds	r0, #112	; 0x70
  418e3e:	4b3a      	ldr	r3, [pc, #232]	; (418f28 <led_init+0xf4>)
  418e40:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
  418e42:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418e44:	22ff      	movs	r2, #255	; 0xff
  418e46:	212c      	movs	r1, #44	; 0x2c
  418e48:	3070      	adds	r0, #112	; 0x70
  418e4a:	4d38      	ldr	r5, [pc, #224]	; (418f2c <led_init+0xf8>)
  418e4c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  418e4e:	6820      	ldr	r0, [r4, #0]
  418e50:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 418f40 <led_init+0x10c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418e54:	f8b8 200c 	ldrh.w	r2, [r8, #12]
  418e58:	2129      	movs	r1, #41	; 0x29
  418e5a:	3070      	adds	r0, #112	; 0x70
  418e5c:	4f34      	ldr	r7, [pc, #208]	; (418f30 <led_init+0xfc>)
  418e5e:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
  418e60:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  418e62:	2202      	movs	r2, #2
  418e64:	2130      	movs	r1, #48	; 0x30
  418e66:	3070      	adds	r0, #112	; 0x70
  418e68:	4e32      	ldr	r6, [pc, #200]	; (418f34 <led_init+0x100>)
  418e6a:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
  418e6c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  418e6e:	227f      	movs	r2, #127	; 0x7f
  418e70:	213c      	movs	r1, #60	; 0x3c
  418e72:	3070      	adds	r0, #112	; 0x70
  418e74:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
  418e76:	6825      	ldr	r5, [r4, #0]
  418e78:	3570      	adds	r5, #112	; 0x70
  418e7a:	214c      	movs	r1, #76	; 0x4c
  418e7c:	f8b8 000c 	ldrh.w	r0, [r8, #12]
  418e80:	4b2d      	ldr	r3, [pc, #180]	; (418f38 <led_init+0x104>)
  418e82:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  418e84:	4602      	mov	r2, r0
  418e86:	2139      	movs	r1, #57	; 0x39
  418e88:	4628      	mov	r0, r5
  418e8a:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418e8c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418e8e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418e92:	2101      	movs	r1, #1
  418e94:	3070      	adds	r0, #112	; 0x70
  418e96:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  418e98:	6824      	ldr	r4, [r4, #0]
  418e9a:	3470      	adds	r4, #112	; 0x70
  418e9c:	2000      	movs	r0, #0
  418e9e:	4b27      	ldr	r3, [pc, #156]	; (418f3c <led_init+0x108>)
  418ea0:	4798      	blx	r3
  418ea2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418ea6:	3050      	adds	r0, #80	; 0x50
  418ea8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418eac:	da1e      	bge.n	418eec <led_init+0xb8>
  418eae:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  418eb0:	2150      	movs	r1, #80	; 0x50
  418eb2:	4620      	mov	r0, r4
  418eb4:	4b1f      	ldr	r3, [pc, #124]	; (418f34 <led_init+0x100>)
  418eb6:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  418eb8:	4c1a      	ldr	r4, [pc, #104]	; (418f24 <led_init+0xf0>)
  418eba:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  418ebc:	4b20      	ldr	r3, [pc, #128]	; (418f40 <led_init+0x10c>)
  418ebe:	899a      	ldrh	r2, [r3, #12]
  418ec0:	2159      	movs	r1, #89	; 0x59
  418ec2:	3070      	adds	r0, #112	; 0x70
  418ec4:	4b1a      	ldr	r3, [pc, #104]	; (418f30 <led_init+0xfc>)
  418ec6:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  418ec8:	6824      	ldr	r4, [r4, #0]
  418eca:	3470      	adds	r4, #112	; 0x70
  418ecc:	2000      	movs	r0, #0
  418ece:	4b1b      	ldr	r3, [pc, #108]	; (418f3c <led_init+0x108>)
  418ed0:	4798      	blx	r3
  418ed2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418ed6:	3050      	adds	r0, #80	; 0x50
  418ed8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418edc:	da14      	bge.n	418f08 <led_init+0xd4>
  418ede:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  418ee0:	2153      	movs	r1, #83	; 0x53
  418ee2:	4620      	mov	r0, r4
  418ee4:	4b13      	ldr	r3, [pc, #76]	; (418f34 <led_init+0x100>)
  418ee6:	4798      	blx	r3
  418ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  418eec:	2000      	movs	r0, #0
  418eee:	4b13      	ldr	r3, [pc, #76]	; (418f3c <led_init+0x108>)
  418ef0:	4798      	blx	r3
  418ef2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418ef6:	3050      	adds	r0, #80	; 0x50
  418ef8:	4b12      	ldr	r3, [pc, #72]	; (418f44 <led_init+0x110>)
  418efa:	fb83 2300 	smull	r2, r3, r3, r0
  418efe:	17c2      	asrs	r2, r0, #31
  418f00:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418f04:	b212      	sxth	r2, r2
  418f06:	e7d3      	b.n	418eb0 <led_init+0x7c>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  418f08:	2000      	movs	r0, #0
  418f0a:	4b0c      	ldr	r3, [pc, #48]	; (418f3c <led_init+0x108>)
  418f0c:	4798      	blx	r3
  418f0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418f12:	3050      	adds	r0, #80	; 0x50
  418f14:	4b0b      	ldr	r3, [pc, #44]	; (418f44 <led_init+0x110>)
  418f16:	fb83 2300 	smull	r2, r3, r3, r0
  418f1a:	17c2      	asrs	r2, r0, #31
  418f1c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418f20:	b212      	sxth	r2, r2
  418f22:	e7dd      	b.n	418ee0 <led_init+0xac>
  418f24:	20414758 	.word	0x20414758
  418f28:	00417d2d 	.word	0x00417d2d
  418f2c:	00409ba5 	.word	0x00409ba5
  418f30:	00409a45 	.word	0x00409a45
  418f34:	004098e5 	.word	0x004098e5
  418f38:	00414ff5 	.word	0x00414ff5
  418f3c:	004140fd 	.word	0x004140fd
  418f40:	2041475c 	.word	0x2041475c
  418f44:	66666667 	.word	0x66666667

00418f48 <basic_init>:
{
  418f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->scr);
  418f4a:	4cbe      	ldr	r4, [pc, #760]	; (419244 <basic_init+0x2fc>)
  418f4c:	6820      	ldr	r0, [r4, #0]
  418f4e:	4bbe      	ldr	r3, [pc, #760]	; (419248 <basic_init+0x300>)
  418f50:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418f52:	22ff      	movs	r2, #255	; 0xff
  418f54:	212c      	movs	r1, #44	; 0x2c
  418f56:	6820      	ldr	r0, [r4, #0]
  418f58:	4bbc      	ldr	r3, [pc, #752]	; (41924c <basic_init+0x304>)
  418f5a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
  418f5c:	6820      	ldr	r0, [r4, #0]
  418f5e:	4bbc      	ldr	r3, [pc, #752]	; (419250 <basic_init+0x308>)
  418f60:	6a1b      	ldr	r3, [r3, #32]
  418f62:	f013 0f02 	tst.w	r3, #2
  418f66:	f040 8768 	bne.w	419e3a <basic_init+0xef2>
  418f6a:	2302      	movs	r3, #2
  418f6c:	210b      	movs	r1, #11
  418f6e:	2408      	movs	r4, #8
  418f70:	461d      	mov	r5, r3
  418f72:	f04f 0200 	mov.w	r2, #0
  418f76:	f365 0202 	bfi	r2, r5, #0, #3
  418f7a:	f364 02c7 	bfi	r2, r4, #3, #5
  418f7e:	f361 220c 	bfi	r2, r1, #8, #5
  418f82:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418f86:	2129      	movs	r1, #41	; 0x29
  418f88:	4bb2      	ldr	r3, [pc, #712]	; (419254 <basic_init+0x30c>)
  418f8a:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  418f8c:	4bad      	ldr	r3, [pc, #692]	; (419244 <basic_init+0x2fc>)
  418f8e:	6818      	ldr	r0, [r3, #0]
  418f90:	4baf      	ldr	r3, [pc, #700]	; (419250 <basic_init+0x308>)
  418f92:	6a1b      	ldr	r3, [r3, #32]
  418f94:	f013 0f02 	tst.w	r3, #2
  418f98:	f040 8755 	bne.w	419e46 <basic_init+0xefe>
  418f9c:	2302      	movs	r3, #2
  418f9e:	211d      	movs	r1, #29
  418fa0:	241c      	movs	r4, #28
  418fa2:	2507      	movs	r5, #7
  418fa4:	f04f 0200 	mov.w	r2, #0
  418fa8:	f365 0202 	bfi	r2, r5, #0, #3
  418fac:	f364 02c7 	bfi	r2, r4, #3, #5
  418fb0:	f361 220c 	bfi	r2, r1, #8, #5
  418fb4:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  418fb8:	f248 0189 	movw	r1, #32905	; 0x8089
  418fbc:	4ba5      	ldr	r3, [pc, #660]	; (419254 <basic_init+0x30c>)
  418fbe:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  418fc0:	4ba0      	ldr	r3, [pc, #640]	; (419244 <basic_init+0x2fc>)
  418fc2:	6818      	ldr	r0, [r3, #0]
  418fc4:	4ba2      	ldr	r3, [pc, #648]	; (419250 <basic_init+0x308>)
  418fc6:	6a1b      	ldr	r3, [r3, #32]
  418fc8:	f013 0f02 	tst.w	r3, #2
  418fcc:	f040 8741 	bne.w	419e52 <basic_init+0xf0a>
  418fd0:	2302      	movs	r3, #2
  418fd2:	211d      	movs	r1, #29
  418fd4:	241c      	movs	r4, #28
  418fd6:	2507      	movs	r5, #7
  418fd8:	f04f 0200 	mov.w	r2, #0
  418fdc:	f365 0202 	bfi	r2, r5, #0, #3
  418fe0:	f364 02c7 	bfi	r2, r4, #3, #5
  418fe4:	f361 220c 	bfi	r2, r1, #8, #5
  418fe8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  418fec:	2179      	movs	r1, #121	; 0x79
  418fee:	4b99      	ldr	r3, [pc, #612]	; (419254 <basic_init+0x30c>)
  418ff0:	4798      	blx	r3
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  418ff2:	4b94      	ldr	r3, [pc, #592]	; (419244 <basic_init+0x2fc>)
  418ff4:	6818      	ldr	r0, [r3, #0]
  418ff6:	4b96      	ldr	r3, [pc, #600]	; (419250 <basic_init+0x308>)
  418ff8:	6a1b      	ldr	r3, [r3, #32]
  418ffa:	f013 0f02 	tst.w	r3, #2
  418ffe:	f040 872e 	bne.w	419e5e <basic_init+0xf16>
  419002:	2302      	movs	r3, #2
  419004:	211d      	movs	r1, #29
  419006:	241c      	movs	r4, #28
  419008:	2507      	movs	r5, #7
  41900a:	f04f 0200 	mov.w	r2, #0
  41900e:	f365 0202 	bfi	r2, r5, #0, #3
  419012:	f364 02c7 	bfi	r2, r4, #3, #5
  419016:	f361 220c 	bfi	r2, r1, #8, #5
  41901a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  41901e:	f248 018a 	movw	r1, #32906	; 0x808a
  419022:	4e8c      	ldr	r6, [pc, #560]	; (419254 <basic_init+0x30c>)
  419024:	47b0      	blx	r6
    lv_style_set_text_sel_bg_color(&styles->scr, LV_STATE_DEFAULT, theme.color_primary);
  419026:	4c87      	ldr	r4, [pc, #540]	; (419244 <basic_init+0x2fc>)
  419028:	4d89      	ldr	r5, [pc, #548]	; (419250 <basic_init+0x308>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  41902a:	89aa      	ldrh	r2, [r5, #12]
  41902c:	f248 018b 	movw	r1, #32907	; 0x808b
  419030:	6820      	ldr	r0, [r4, #0]
  419032:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  419034:	696a      	ldr	r2, [r5, #20]
  419036:	217e      	movs	r1, #126	; 0x7e
  419038:	6820      	ldr	r0, [r4, #0]
  41903a:	4b87      	ldr	r3, [pc, #540]	; (419258 <basic_init+0x310>)
  41903c:	4798      	blx	r3
    style_init_reset(&styles->bg);
  41903e:	6820      	ldr	r0, [r4, #0]
  419040:	3004      	adds	r0, #4
  419042:	4b81      	ldr	r3, [pc, #516]	; (419248 <basic_init+0x300>)
  419044:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  419046:	6824      	ldr	r4, [r4, #0]
  419048:	3404      	adds	r4, #4
  41904a:	2000      	movs	r0, #0
  41904c:	4b83      	ldr	r3, [pc, #524]	; (41925c <basic_init+0x314>)
  41904e:	4798      	blx	r3
  419050:	300a      	adds	r0, #10
  419052:	00c0      	lsls	r0, r0, #3
  419054:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419058:	f280 8707 	bge.w	419e6a <basic_init+0xf22>
  41905c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41905e:	2101      	movs	r1, #1
  419060:	4620      	mov	r0, r4
  419062:	4b7f      	ldr	r3, [pc, #508]	; (419260 <basic_init+0x318>)
  419064:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  419066:	4c77      	ldr	r4, [pc, #476]	; (419244 <basic_init+0x2fc>)
  419068:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41906a:	22ff      	movs	r2, #255	; 0xff
  41906c:	212c      	movs	r1, #44	; 0x2c
  41906e:	3004      	adds	r0, #4
  419070:	4b76      	ldr	r3, [pc, #472]	; (41924c <basic_init+0x304>)
  419072:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
  419074:	6820      	ldr	r0, [r4, #0]
  419076:	3004      	adds	r0, #4
  419078:	4b75      	ldr	r3, [pc, #468]	; (419250 <basic_init+0x308>)
  41907a:	6a1b      	ldr	r3, [r3, #32]
  41907c:	f013 0f02 	tst.w	r3, #2
  419080:	f040 8701 	bne.w	419e86 <basic_init+0xf3e>
  419084:	2300      	movs	r3, #0
  419086:	210e      	movs	r1, #14
  419088:	240b      	movs	r4, #11
  41908a:	2503      	movs	r5, #3
  41908c:	f04f 0200 	mov.w	r2, #0
  419090:	f365 0202 	bfi	r2, r5, #0, #3
  419094:	f364 02c7 	bfi	r2, r4, #3, #5
  419098:	f361 220c 	bfi	r2, r1, #8, #5
  41909c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4190a0:	2129      	movs	r1, #41	; 0x29
  4190a2:	4b6c      	ldr	r3, [pc, #432]	; (419254 <basic_init+0x30c>)
  4190a4:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  4190a6:	4b67      	ldr	r3, [pc, #412]	; (419244 <basic_init+0x2fc>)
  4190a8:	6818      	ldr	r0, [r3, #0]
  4190aa:	4b69      	ldr	r3, [pc, #420]	; (419250 <basic_init+0x308>)
  4190ac:	6a1b      	ldr	r3, [r3, #32]
  4190ae:	f013 0302 	ands.w	r3, r3, #2
  4190b2:	bf14      	ite	ne
  4190b4:	2107      	movne	r1, #7
  4190b6:	2102      	moveq	r1, #2
  4190b8:	2b00      	cmp	r3, #0
  4190ba:	bf15      	itete	ne
  4190bc:	241c      	movne	r4, #28
  4190be:	2412      	moveq	r4, #18
  4190c0:	251a      	movne	r5, #26
  4190c2:	2510      	moveq	r5, #16
  4190c4:	bf14      	ite	ne
  4190c6:	2306      	movne	r3, #6
  4190c8:	2304      	moveq	r3, #4
  4190ca:	f04f 0200 	mov.w	r2, #0
  4190ce:	f363 0202 	bfi	r2, r3, #0, #3
  4190d2:	f365 02c7 	bfi	r2, r5, #3, #5
  4190d6:	f364 220c 	bfi	r2, r4, #8, #5
  4190da:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  4190de:	2139      	movs	r1, #57	; 0x39
  4190e0:	3004      	adds	r0, #4
  4190e2:	4b5c      	ldr	r3, [pc, #368]	; (419254 <basic_init+0x30c>)
  4190e4:	4798      	blx	r3
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  4190e6:	4b5a      	ldr	r3, [pc, #360]	; (419250 <basic_init+0x308>)
  4190e8:	6a1b      	ldr	r3, [r3, #32]
  4190ea:	f013 0f20 	tst.w	r3, #32
  4190ee:	f000 86d0 	beq.w	419e92 <basic_init+0xf4a>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
  4190f2:	4c54      	ldr	r4, [pc, #336]	; (419244 <basic_init+0x2fc>)
  4190f4:	6820      	ldr	r0, [r4, #0]
  4190f6:	4b56      	ldr	r3, [pc, #344]	; (419250 <basic_init+0x308>)
  4190f8:	89da      	ldrh	r2, [r3, #14]
  4190fa:	f240 4139 	movw	r1, #1081	; 0x439
  4190fe:	3004      	adds	r0, #4
  419100:	4b54      	ldr	r3, [pc, #336]	; (419254 <basic_init+0x30c>)
  419102:	4798      	blx	r3
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  419104:	6824      	ldr	r4, [r4, #0]
  419106:	3404      	adds	r4, #4
  419108:	2000      	movs	r0, #0
  41910a:	4b54      	ldr	r3, [pc, #336]	; (41925c <basic_init+0x314>)
  41910c:	4798      	blx	r3
  41910e:	3028      	adds	r0, #40	; 0x28
  419110:	0040      	lsls	r0, r0, #1
  419112:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419116:	f280 86c7 	bge.w	419ea8 <basic_init+0xf60>
  41911a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41911c:	2130      	movs	r1, #48	; 0x30
  41911e:	4620      	mov	r0, r4
  419120:	4d4f      	ldr	r5, [pc, #316]	; (419260 <basic_init+0x318>)
  419122:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
  419124:	4c47      	ldr	r4, [pc, #284]	; (419244 <basic_init+0x2fc>)
  419126:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  419128:	2201      	movs	r2, #1
  41912a:	2133      	movs	r1, #51	; 0x33
  41912c:	3004      	adds	r0, #4
  41912e:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  419130:	6820      	ldr	r0, [r4, #0]
  419132:	3004      	adds	r0, #4
  419134:	4b46      	ldr	r3, [pc, #280]	; (419250 <basic_init+0x308>)
  419136:	6a1b      	ldr	r3, [r3, #32]
  419138:	f013 0f02 	tst.w	r3, #2
  41913c:	f040 86c2 	bne.w	419ec4 <basic_init+0xf7c>
  419140:	231f      	movs	r3, #31
  419142:	4619      	mov	r1, r3
  419144:	2407      	movs	r4, #7
  419146:	f04f 0200 	mov.w	r2, #0
  41914a:	f364 0202 	bfi	r2, r4, #0, #3
  41914e:	f361 02c7 	bfi	r2, r1, #3, #5
  419152:	f363 220c 	bfi	r2, r3, #8, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419156:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41915a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41915e:	f248 0189 	movw	r1, #32905	; 0x8089
  419162:	4b3c      	ldr	r3, [pc, #240]	; (419254 <basic_init+0x30c>)
  419164:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
  419166:	4c3a      	ldr	r4, [pc, #232]	; (419250 <basic_init+0x308>)
  419168:	4d36      	ldr	r5, [pc, #216]	; (419244 <basic_init+0x2fc>)
  41916a:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41916c:	6962      	ldr	r2, [r4, #20]
  41916e:	217e      	movs	r1, #126	; 0x7e
  419170:	3004      	adds	r0, #4
  419172:	4b39      	ldr	r3, [pc, #228]	; (419258 <basic_init+0x310>)
  419174:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  419176:	6828      	ldr	r0, [r5, #0]
  419178:	3004      	adds	r0, #4
  41917a:	6a23      	ldr	r3, [r4, #32]
  41917c:	f013 0f02 	tst.w	r3, #2
  419180:	f040 86a5 	bne.w	419ece <basic_init+0xf86>
  419184:	231f      	movs	r3, #31
  419186:	4619      	mov	r1, r3
  419188:	2407      	movs	r4, #7
  41918a:	f04f 0200 	mov.w	r2, #0
  41918e:	f364 0202 	bfi	r2, r4, #0, #3
  419192:	f361 02c7 	bfi	r2, r1, #3, #5
  419196:	f363 220c 	bfi	r2, r3, #8, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41919a:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41919e:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  4191a2:	2179      	movs	r1, #121	; 0x79
  4191a4:	4b2b      	ldr	r3, [pc, #172]	; (419254 <basic_init+0x30c>)
  4191a6:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  4191a8:	4b26      	ldr	r3, [pc, #152]	; (419244 <basic_init+0x2fc>)
  4191aa:	6818      	ldr	r0, [r3, #0]
  4191ac:	3004      	adds	r0, #4
  4191ae:	4b28      	ldr	r3, [pc, #160]	; (419250 <basic_init+0x308>)
  4191b0:	6a1b      	ldr	r3, [r3, #32]
  4191b2:	f013 0f02 	tst.w	r3, #2
  4191b6:	f040 86a1 	bne.w	419efc <basic_init+0xfb4>
  4191ba:	231f      	movs	r3, #31
  4191bc:	4619      	mov	r1, r3
  4191be:	2407      	movs	r4, #7
  4191c0:	f04f 0200 	mov.w	r2, #0
  4191c4:	f364 0202 	bfi	r2, r4, #0, #3
  4191c8:	f361 02c7 	bfi	r2, r1, #3, #5
  4191cc:	f363 220c 	bfi	r2, r3, #8, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  4191d0:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  4191d4:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  4191d8:	f248 01a9 	movw	r1, #32937	; 0x80a9
  4191dc:	4b1d      	ldr	r3, [pc, #116]	; (419254 <basic_init+0x30c>)
  4191de:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  4191e0:	4b18      	ldr	r3, [pc, #96]	; (419244 <basic_init+0x2fc>)
  4191e2:	6818      	ldr	r0, [r3, #0]
  4191e4:	3004      	adds	r0, #4
  4191e6:	4b1a      	ldr	r3, [pc, #104]	; (419250 <basic_init+0x308>)
  4191e8:	6a1b      	ldr	r3, [r3, #32]
  4191ea:	f013 0f02 	tst.w	r3, #2
  4191ee:	f040 868a 	bne.w	419f06 <basic_init+0xfbe>
  4191f2:	231f      	movs	r3, #31
  4191f4:	4619      	mov	r1, r3
  4191f6:	2407      	movs	r4, #7
  4191f8:	f04f 0200 	mov.w	r2, #0
  4191fc:	f364 0202 	bfi	r2, r4, #0, #3
  419200:	f361 02c7 	bfi	r2, r1, #3, #5
  419204:	f363 220c 	bfi	r2, r3, #8, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  419208:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41920c:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  419210:	2199      	movs	r1, #153	; 0x99
  419212:	4b10      	ldr	r3, [pc, #64]	; (419254 <basic_init+0x30c>)
  419214:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
  419216:	4c0b      	ldr	r4, [pc, #44]	; (419244 <basic_init+0x2fc>)
  419218:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41921a:	2201      	movs	r2, #1
  41921c:	2190      	movs	r1, #144	; 0x90
  41921e:	3004      	adds	r0, #4
  419220:	4b0f      	ldr	r3, [pc, #60]	; (419260 <basic_init+0x318>)
  419222:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  419224:	6825      	ldr	r5, [r4, #0]
  419226:	3504      	adds	r5, #4
  419228:	2000      	movs	r0, #0
  41922a:	4b0e      	ldr	r3, [pc, #56]	; (419264 <basic_init+0x31c>)
  41922c:	4798      	blx	r3
  41922e:	2801      	cmp	r0, #1
  419230:	f240 866e 	bls.w	419f10 <basic_init+0xfc8>
  419234:	2000      	movs	r0, #0
  419236:	4b09      	ldr	r3, [pc, #36]	; (41925c <basic_init+0x314>)
  419238:	4798      	blx	r3
  41923a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41923e:	0040      	lsls	r0, r0, #1
  419240:	3050      	adds	r0, #80	; 0x50
  419242:	e011      	b.n	419268 <basic_init+0x320>
  419244:	20414758 	.word	0x20414758
  419248:	00417d2d 	.word	0x00417d2d
  41924c:	00409ba5 	.word	0x00409ba5
  419250:	2041475c 	.word	0x2041475c
  419254:	00409a45 	.word	0x00409a45
  419258:	00409cf1 	.word	0x00409cf1
  41925c:	004140fd 	.word	0x004140fd
  419260:	004098e5 	.word	0x004098e5
  419264:	00414119 	.word	0x00414119
  419268:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41926c:	f280 866b 	bge.w	419f46 <basic_init+0xffe>
  419270:	2401      	movs	r4, #1
  419272:	2000      	movs	r0, #0
  419274:	4bb3      	ldr	r3, [pc, #716]	; (419544 <basic_init+0x5fc>)
  419276:	4798      	blx	r3
  419278:	3028      	adds	r0, #40	; 0x28
  41927a:	0040      	lsls	r0, r0, #1
  41927c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419280:	f280 8671 	bge.w	419f66 <basic_init+0x101e>
  419284:	2201      	movs	r2, #1
  419286:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419288:	b212      	sxth	r2, r2
  41928a:	2112      	movs	r1, #18
  41928c:	4628      	mov	r0, r5
  41928e:	4bae      	ldr	r3, [pc, #696]	; (419548 <basic_init+0x600>)
  419290:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  419292:	4bae      	ldr	r3, [pc, #696]	; (41954c <basic_init+0x604>)
  419294:	681d      	ldr	r5, [r3, #0]
  419296:	3504      	adds	r5, #4
  419298:	2000      	movs	r0, #0
  41929a:	4bad      	ldr	r3, [pc, #692]	; (419550 <basic_init+0x608>)
  41929c:	4798      	blx	r3
  41929e:	2801      	cmp	r0, #1
  4192a0:	f240 866f 	bls.w	419f82 <basic_init+0x103a>
  4192a4:	2000      	movs	r0, #0
  4192a6:	4ba7      	ldr	r3, [pc, #668]	; (419544 <basic_init+0x5fc>)
  4192a8:	4798      	blx	r3
  4192aa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4192ae:	0040      	lsls	r0, r0, #1
  4192b0:	3050      	adds	r0, #80	; 0x50
  4192b2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4192b6:	f280 867f 	bge.w	419fb8 <basic_init+0x1070>
  4192ba:	2401      	movs	r4, #1
  4192bc:	2000      	movs	r0, #0
  4192be:	4ba1      	ldr	r3, [pc, #644]	; (419544 <basic_init+0x5fc>)
  4192c0:	4798      	blx	r3
  4192c2:	3028      	adds	r0, #40	; 0x28
  4192c4:	0040      	lsls	r0, r0, #1
  4192c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4192ca:	f280 8685 	bge.w	419fd8 <basic_init+0x1090>
  4192ce:	2201      	movs	r2, #1
  4192d0:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4192d2:	b212      	sxth	r2, r2
  4192d4:	2113      	movs	r1, #19
  4192d6:	4628      	mov	r0, r5
  4192d8:	4b9b      	ldr	r3, [pc, #620]	; (419548 <basic_init+0x600>)
  4192da:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  4192dc:	4b9b      	ldr	r3, [pc, #620]	; (41954c <basic_init+0x604>)
  4192de:	681d      	ldr	r5, [r3, #0]
  4192e0:	3504      	adds	r5, #4
  4192e2:	2000      	movs	r0, #0
  4192e4:	4b9a      	ldr	r3, [pc, #616]	; (419550 <basic_init+0x608>)
  4192e6:	4798      	blx	r3
  4192e8:	2801      	cmp	r0, #1
  4192ea:	f240 8683 	bls.w	419ff4 <basic_init+0x10ac>
  4192ee:	2000      	movs	r0, #0
  4192f0:	4b94      	ldr	r3, [pc, #592]	; (419544 <basic_init+0x5fc>)
  4192f2:	4798      	blx	r3
  4192f4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4192f8:	0040      	lsls	r0, r0, #1
  4192fa:	3050      	adds	r0, #80	; 0x50
  4192fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419300:	f280 8693 	bge.w	41a02a <basic_init+0x10e2>
  419304:	2401      	movs	r4, #1
  419306:	2000      	movs	r0, #0
  419308:	4b8e      	ldr	r3, [pc, #568]	; (419544 <basic_init+0x5fc>)
  41930a:	4798      	blx	r3
  41930c:	3028      	adds	r0, #40	; 0x28
  41930e:	0040      	lsls	r0, r0, #1
  419310:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419314:	f280 8699 	bge.w	41a04a <basic_init+0x1102>
  419318:	2201      	movs	r2, #1
  41931a:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41931c:	b212      	sxth	r2, r2
  41931e:	2110      	movs	r1, #16
  419320:	4628      	mov	r0, r5
  419322:	4b89      	ldr	r3, [pc, #548]	; (419548 <basic_init+0x600>)
  419324:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  419326:	4b89      	ldr	r3, [pc, #548]	; (41954c <basic_init+0x604>)
  419328:	681d      	ldr	r5, [r3, #0]
  41932a:	3504      	adds	r5, #4
  41932c:	2000      	movs	r0, #0
  41932e:	4b88      	ldr	r3, [pc, #544]	; (419550 <basic_init+0x608>)
  419330:	4798      	blx	r3
  419332:	2801      	cmp	r0, #1
  419334:	f240 8697 	bls.w	41a066 <basic_init+0x111e>
  419338:	2000      	movs	r0, #0
  41933a:	4b82      	ldr	r3, [pc, #520]	; (419544 <basic_init+0x5fc>)
  41933c:	4798      	blx	r3
  41933e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419342:	0040      	lsls	r0, r0, #1
  419344:	3050      	adds	r0, #80	; 0x50
  419346:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41934a:	f280 86a7 	bge.w	41a09c <basic_init+0x1154>
  41934e:	2401      	movs	r4, #1
  419350:	2000      	movs	r0, #0
  419352:	4b7c      	ldr	r3, [pc, #496]	; (419544 <basic_init+0x5fc>)
  419354:	4798      	blx	r3
  419356:	3028      	adds	r0, #40	; 0x28
  419358:	0040      	lsls	r0, r0, #1
  41935a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41935e:	f280 86ad 	bge.w	41a0bc <basic_init+0x1174>
  419362:	2201      	movs	r2, #1
  419364:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419366:	b212      	sxth	r2, r2
  419368:	2111      	movs	r1, #17
  41936a:	4628      	mov	r0, r5
  41936c:	4b76      	ldr	r3, [pc, #472]	; (419548 <basic_init+0x600>)
  41936e:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  419370:	4b76      	ldr	r3, [pc, #472]	; (41954c <basic_init+0x604>)
  419372:	681c      	ldr	r4, [r3, #0]
  419374:	3404      	adds	r4, #4
  419376:	2000      	movs	r0, #0
  419378:	4b75      	ldr	r3, [pc, #468]	; (419550 <basic_init+0x608>)
  41937a:	4798      	blx	r3
  41937c:	2801      	cmp	r0, #1
  41937e:	f240 86ab 	bls.w	41a0d8 <basic_init+0x1190>
  419382:	2000      	movs	r0, #0
  419384:	4b6f      	ldr	r3, [pc, #444]	; (419544 <basic_init+0x5fc>)
  419386:	4798      	blx	r3
  419388:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41938c:	0040      	lsls	r0, r0, #1
  41938e:	3050      	adds	r0, #80	; 0x50
  419390:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419394:	f280 86bb 	bge.w	41a10e <basic_init+0x11c6>
  419398:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41939a:	2114      	movs	r1, #20
  41939c:	4620      	mov	r0, r4
  41939e:	4d6a      	ldr	r5, [pc, #424]	; (419548 <basic_init+0x600>)
  4193a0:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  4193a2:	4c6a      	ldr	r4, [pc, #424]	; (41954c <basic_init+0x604>)
  4193a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  4193a6:	2200      	movs	r2, #0
  4193a8:	21b0      	movs	r1, #176	; 0xb0
  4193aa:	3004      	adds	r0, #4
  4193ac:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
  4193ae:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  4193b0:	2239      	movs	r2, #57	; 0x39
  4193b2:	21b7      	movs	r1, #183	; 0xb7
  4193b4:	3004      	adds	r0, #4
  4193b6:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
  4193b8:	6820      	ldr	r0, [r4, #0]
  4193ba:	300c      	adds	r0, #12
  4193bc:	4b65      	ldr	r3, [pc, #404]	; (419554 <basic_init+0x60c>)
  4193be:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
  4193c0:	6820      	ldr	r0, [r4, #0]
  4193c2:	1d01      	adds	r1, r0, #4
  4193c4:	300c      	adds	r0, #12
  4193c6:	4b64      	ldr	r3, [pc, #400]	; (419558 <basic_init+0x610>)
  4193c8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
  4193ca:	6820      	ldr	r0, [r4, #0]
  4193cc:	300c      	adds	r0, #12
  4193ce:	4b63      	ldr	r3, [pc, #396]	; (41955c <basic_init+0x614>)
  4193d0:	6a1b      	ldr	r3, [r3, #32]
  4193d2:	f013 0f02 	tst.w	r3, #2
  4193d6:	f040 86aa 	bne.w	41a12e <basic_init+0x11e6>
  4193da:	2302      	movs	r3, #2
  4193dc:	2109      	movs	r1, #9
  4193de:	2408      	movs	r4, #8
  4193e0:	461d      	mov	r5, r3
  4193e2:	f04f 0200 	mov.w	r2, #0
  4193e6:	f365 0202 	bfi	r2, r5, #0, #3
  4193ea:	f364 02c7 	bfi	r2, r4, #3, #5
  4193ee:	f361 220c 	bfi	r2, r1, #8, #5
  4193f2:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4193f6:	2129      	movs	r1, #41	; 0x29
  4193f8:	4b59      	ldr	r3, [pc, #356]	; (419560 <basic_init+0x618>)
  4193fa:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
  4193fc:	4b53      	ldr	r3, [pc, #332]	; (41954c <basic_init+0x604>)
  4193fe:	6818      	ldr	r0, [r3, #0]
  419400:	300c      	adds	r0, #12
  419402:	4b56      	ldr	r3, [pc, #344]	; (41955c <basic_init+0x614>)
  419404:	6a1b      	ldr	r3, [r3, #32]
  419406:	f013 0f02 	tst.w	r3, #2
  41940a:	f040 8696 	bne.w	41a13a <basic_init+0x11f2>
  41940e:	2100      	movs	r1, #0
  419410:	2308      	movs	r3, #8
  419412:	461c      	mov	r4, r3
  419414:	2502      	movs	r5, #2
  419416:	f04f 0200 	mov.w	r2, #0
  41941a:	f365 0202 	bfi	r2, r5, #0, #3
  41941e:	f364 02c7 	bfi	r2, r4, #3, #5
  419422:	f363 220c 	bfi	r2, r3, #8, #5
  419426:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41942a:	2139      	movs	r1, #57	; 0x39
  41942c:	4b4c      	ldr	r3, [pc, #304]	; (419560 <basic_init+0x618>)
  41942e:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  419430:	4b46      	ldr	r3, [pc, #280]	; (41954c <basic_init+0x604>)
  419432:	6818      	ldr	r0, [r3, #0]
  419434:	4b49      	ldr	r3, [pc, #292]	; (41955c <basic_init+0x614>)
  419436:	6a1b      	ldr	r3, [r3, #32]
  419438:	f013 0302 	ands.w	r3, r3, #2
  41943c:	bf14      	ite	ne
  41943e:	2100      	movne	r1, #0
  419440:	2102      	moveq	r1, #2
  419442:	2b00      	cmp	r3, #0
  419444:	bf15      	itete	ne
  419446:	2409      	movne	r4, #9
  419448:	2415      	moveq	r4, #21
  41944a:	2506      	movne	r5, #6
  41944c:	2514      	moveq	r5, #20
  41944e:	bf14      	ite	ne
  419450:	2302      	movne	r3, #2
  419452:	2305      	moveq	r3, #5
  419454:	f04f 0200 	mov.w	r2, #0
  419458:	f363 0202 	bfi	r2, r3, #0, #3
  41945c:	f365 02c7 	bfi	r2, r5, #3, #5
  419460:	f364 220c 	bfi	r2, r4, #8, #5
  419464:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419468:	f248 0189 	movw	r1, #32905	; 0x8089
  41946c:	300c      	adds	r0, #12
  41946e:	4b3c      	ldr	r3, [pc, #240]	; (419560 <basic_init+0x618>)
  419470:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  419472:	4b36      	ldr	r3, [pc, #216]	; (41954c <basic_init+0x604>)
  419474:	6818      	ldr	r0, [r3, #0]
  419476:	4b39      	ldr	r3, [pc, #228]	; (41955c <basic_init+0x614>)
  419478:	6a1b      	ldr	r3, [r3, #32]
  41947a:	f013 0302 	ands.w	r3, r3, #2
  41947e:	bf14      	ite	ne
  419480:	2100      	movne	r1, #0
  419482:	2102      	moveq	r1, #2
  419484:	2b00      	cmp	r3, #0
  419486:	bf15      	itete	ne
  419488:	2409      	movne	r4, #9
  41948a:	2415      	moveq	r4, #21
  41948c:	2506      	movne	r5, #6
  41948e:	2514      	moveq	r5, #20
  419490:	bf14      	ite	ne
  419492:	2302      	movne	r3, #2
  419494:	2305      	moveq	r3, #5
  419496:	f04f 0200 	mov.w	r2, #0
  41949a:	f363 0202 	bfi	r2, r3, #0, #3
  41949e:	f365 02c7 	bfi	r2, r5, #3, #5
  4194a2:	f364 220c 	bfi	r2, r4, #8, #5
  4194a6:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  4194aa:	2179      	movs	r1, #121	; 0x79
  4194ac:	300c      	adds	r0, #12
  4194ae:	4b2c      	ldr	r3, [pc, #176]	; (419560 <basic_init+0x618>)
  4194b0:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  4194b2:	4b26      	ldr	r3, [pc, #152]	; (41954c <basic_init+0x604>)
  4194b4:	6818      	ldr	r0, [r3, #0]
  4194b6:	4b29      	ldr	r3, [pc, #164]	; (41955c <basic_init+0x614>)
  4194b8:	6a1b      	ldr	r3, [r3, #32]
  4194ba:	f013 0302 	ands.w	r3, r3, #2
  4194be:	bf14      	ite	ne
  4194c0:	2100      	movne	r1, #0
  4194c2:	2102      	moveq	r1, #2
  4194c4:	2b00      	cmp	r3, #0
  4194c6:	bf15      	itete	ne
  4194c8:	2409      	movne	r4, #9
  4194ca:	2415      	moveq	r4, #21
  4194cc:	2506      	movne	r5, #6
  4194ce:	2514      	moveq	r5, #20
  4194d0:	bf14      	ite	ne
  4194d2:	2302      	movne	r3, #2
  4194d4:	2305      	moveq	r3, #5
  4194d6:	f04f 0200 	mov.w	r2, #0
  4194da:	f363 0202 	bfi	r2, r3, #0, #3
  4194de:	f365 02c7 	bfi	r2, r5, #3, #5
  4194e2:	f364 220c 	bfi	r2, r4, #8, #5
  4194e6:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  4194ea:	f248 01a9 	movw	r1, #32937	; 0x80a9
  4194ee:	300c      	adds	r0, #12
  4194f0:	4b1b      	ldr	r3, [pc, #108]	; (419560 <basic_init+0x618>)
  4194f2:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  4194f4:	4b15      	ldr	r3, [pc, #84]	; (41954c <basic_init+0x604>)
  4194f6:	6818      	ldr	r0, [r3, #0]
  4194f8:	4b18      	ldr	r3, [pc, #96]	; (41955c <basic_init+0x614>)
  4194fa:	6a1b      	ldr	r3, [r3, #32]
  4194fc:	f013 0302 	ands.w	r3, r3, #2
  419500:	bf14      	ite	ne
  419502:	2100      	movne	r1, #0
  419504:	2102      	moveq	r1, #2
  419506:	2b00      	cmp	r3, #0
  419508:	bf15      	itete	ne
  41950a:	2409      	movne	r4, #9
  41950c:	2415      	moveq	r4, #21
  41950e:	2506      	movne	r5, #6
  419510:	2514      	moveq	r5, #20
  419512:	bf14      	ite	ne
  419514:	2302      	movne	r3, #2
  419516:	2305      	moveq	r3, #5
  419518:	f04f 0200 	mov.w	r2, #0
  41951c:	f363 0202 	bfi	r2, r3, #0, #3
  419520:	f365 02c7 	bfi	r2, r5, #3, #5
  419524:	f364 220c 	bfi	r2, r4, #8, #5
  419528:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41952c:	2199      	movs	r1, #153	; 0x99
  41952e:	300c      	adds	r0, #12
  419530:	4b0b      	ldr	r3, [pc, #44]	; (419560 <basic_init+0x618>)
  419532:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
  419534:	4c05      	ldr	r4, [pc, #20]	; (41954c <basic_init+0x604>)
  419536:	6820      	ldr	r0, [r4, #0]
  419538:	3008      	adds	r0, #8
  41953a:	4b06      	ldr	r3, [pc, #24]	; (419554 <basic_init+0x60c>)
  41953c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
  41953e:	6820      	ldr	r0, [r4, #0]
  419540:	3008      	adds	r0, #8
  419542:	e00f      	b.n	419564 <basic_init+0x61c>
  419544:	004140fd 	.word	0x004140fd
  419548:	004098e5 	.word	0x004098e5
  41954c:	20414758 	.word	0x20414758
  419550:	00414119 	.word	0x00414119
  419554:	00417d2d 	.word	0x00417d2d
  419558:	00409785 	.word	0x00409785
  41955c:	2041475c 	.word	0x2041475c
  419560:	00409a45 	.word	0x00409a45
  419564:	4bbc      	ldr	r3, [pc, #752]	; (419858 <basic_init+0x910>)
  419566:	6a1b      	ldr	r3, [r3, #32]
  419568:	f013 0f02 	tst.w	r3, #2
  41956c:	f040 85eb 	bne.w	41a146 <basic_init+0x11fe>
  419570:	230a      	movs	r3, #10
  419572:	2109      	movs	r1, #9
  419574:	2402      	movs	r4, #2
  419576:	f04f 0200 	mov.w	r2, #0
  41957a:	f364 0202 	bfi	r2, r4, #0, #3
  41957e:	f361 02c7 	bfi	r2, r1, #3, #5
  419582:	f363 220c 	bfi	r2, r3, #8, #5
  419586:	2303      	movs	r3, #3
  419588:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41958c:	f241 0129 	movw	r1, #4137	; 0x1029
  419590:	4db2      	ldr	r5, [pc, #712]	; (41985c <basic_init+0x914>)
  419592:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
  419594:	4cb2      	ldr	r4, [pc, #712]	; (419860 <basic_init+0x918>)
  419596:	6820      	ldr	r0, [r4, #0]
  419598:	4faf      	ldr	r7, [pc, #700]	; (419858 <basic_init+0x910>)
  41959a:	89ba      	ldrh	r2, [r7, #12]
  41959c:	f240 1129 	movw	r1, #297	; 0x129
  4195a0:	3008      	adds	r0, #8
  4195a2:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
  4195a4:	6826      	ldr	r6, [r4, #0]
  4195a6:	3608      	adds	r6, #8
  4195a8:	2133      	movs	r1, #51	; 0x33
  4195aa:	89b8      	ldrh	r0, [r7, #12]
  4195ac:	4bad      	ldr	r3, [pc, #692]	; (419864 <basic_init+0x91c>)
  4195ae:	4798      	blx	r3
  4195b0:	4602      	mov	r2, r0
  4195b2:	f241 1129 	movw	r1, #4393	; 0x1129
  4195b6:	4630      	mov	r0, r6
  4195b8:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
  4195ba:	6820      	ldr	r0, [r4, #0]
  4195bc:	3008      	adds	r0, #8
  4195be:	6a3b      	ldr	r3, [r7, #32]
  4195c0:	f013 0f02 	tst.w	r3, #2
  4195c4:	f040 85c4 	bne.w	41a150 <basic_init+0x1208>
  4195c8:	2300      	movs	r3, #0
  4195ca:	210e      	movs	r1, #14
  4195cc:	240b      	movs	r4, #11
  4195ce:	2503      	movs	r5, #3
  4195d0:	f04f 0200 	mov.w	r2, #0
  4195d4:	f365 0202 	bfi	r2, r5, #0, #3
  4195d8:	f364 02c7 	bfi	r2, r4, #3, #5
  4195dc:	f361 220c 	bfi	r2, r1, #8, #5
  4195e0:	f363 324f 	bfi	r2, r3, #13, #3
  4195e4:	f242 0129 	movw	r1, #8233	; 0x2029
  4195e8:	4f9c      	ldr	r7, [pc, #624]	; (41985c <basic_init+0x914>)
  4195ea:	47b8      	blx	r7
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
  4195ec:	4c9c      	ldr	r4, [pc, #624]	; (419860 <basic_init+0x918>)
  4195ee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  4195f0:	2200      	movs	r2, #0
  4195f2:	f44f 7198 	mov.w	r1, #304	; 0x130
  4195f6:	3008      	adds	r0, #8
  4195f8:	4b9b      	ldr	r3, [pc, #620]	; (419868 <basic_init+0x920>)
  4195fa:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
  4195fc:	6825      	ldr	r5, [r4, #0]
  4195fe:	3508      	adds	r5, #8
  419600:	4e95      	ldr	r6, [pc, #596]	; (419858 <basic_init+0x910>)
  419602:	2133      	movs	r1, #51	; 0x33
  419604:	89b0      	ldrh	r0, [r6, #12]
  419606:	4b97      	ldr	r3, [pc, #604]	; (419864 <basic_init+0x91c>)
  419608:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41960a:	4602      	mov	r2, r0
  41960c:	f241 2139 	movw	r1, #4665	; 0x1239
  419610:	4628      	mov	r0, r5
  419612:	47b8      	blx	r7
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
  419614:	6820      	ldr	r0, [r4, #0]
  419616:	3008      	adds	r0, #8
  419618:	6a33      	ldr	r3, [r6, #32]
  41961a:	f013 0f02 	tst.w	r3, #2
  41961e:	f040 859d 	bne.w	41a15c <basic_init+0x1214>
  419622:	2101      	movs	r1, #1
  419624:	230d      	movs	r3, #13
  419626:	240b      	movs	r4, #11
  419628:	2503      	movs	r5, #3
  41962a:	f04f 0200 	mov.w	r2, #0
  41962e:	f365 0202 	bfi	r2, r5, #0, #3
  419632:	f364 02c7 	bfi	r2, r4, #3, #5
  419636:	f363 220c 	bfi	r2, r3, #8, #5
  41963a:	f361 324f 	bfi	r2, r1, #13, #3
  41963e:	f241 0139 	movw	r1, #4153	; 0x1039
  419642:	4b86      	ldr	r3, [pc, #536]	; (41985c <basic_init+0x914>)
  419644:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
  419646:	4b86      	ldr	r3, [pc, #536]	; (419860 <basic_init+0x918>)
  419648:	6818      	ldr	r0, [r3, #0]
  41964a:	3008      	adds	r0, #8
  41964c:	4b82      	ldr	r3, [pc, #520]	; (419858 <basic_init+0x910>)
  41964e:	6a1b      	ldr	r3, [r3, #32]
  419650:	f013 0f02 	tst.w	r3, #2
  419654:	f040 8588 	bne.w	41a168 <basic_init+0x1220>
  419658:	2301      	movs	r3, #1
  41965a:	210d      	movs	r1, #13
  41965c:	240b      	movs	r4, #11
  41965e:	2503      	movs	r5, #3
  419660:	f04f 0200 	mov.w	r2, #0
  419664:	f365 0202 	bfi	r2, r5, #0, #3
  419668:	f364 02c7 	bfi	r2, r4, #3, #5
  41966c:	f361 220c 	bfi	r2, r1, #8, #5
  419670:	f363 324f 	bfi	r2, r3, #13, #3
  419674:	f240 1139 	movw	r1, #313	; 0x139
  419678:	4b78      	ldr	r3, [pc, #480]	; (41985c <basic_init+0x914>)
  41967a:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
  41967c:	4b78      	ldr	r3, [pc, #480]	; (419860 <basic_init+0x918>)
  41967e:	6818      	ldr	r0, [r3, #0]
  419680:	3008      	adds	r0, #8
  419682:	4b75      	ldr	r3, [pc, #468]	; (419858 <basic_init+0x910>)
  419684:	6a1b      	ldr	r3, [r3, #32]
  419686:	f013 0f02 	tst.w	r3, #2
  41968a:	f040 8573 	bne.w	41a174 <basic_init+0x122c>
  41968e:	2301      	movs	r3, #1
  419690:	210d      	movs	r1, #13
  419692:	240b      	movs	r4, #11
  419694:	2503      	movs	r5, #3
  419696:	f04f 0200 	mov.w	r2, #0
  41969a:	f365 0202 	bfi	r2, r5, #0, #3
  41969e:	f364 02c7 	bfi	r2, r4, #3, #5
  4196a2:	f361 220c 	bfi	r2, r1, #8, #5
  4196a6:	f363 324f 	bfi	r2, r3, #13, #3
  4196aa:	f241 1139 	movw	r1, #4409	; 0x1139
  4196ae:	4b6b      	ldr	r3, [pc, #428]	; (41985c <basic_init+0x914>)
  4196b0:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
  4196b2:	4b6b      	ldr	r3, [pc, #428]	; (419860 <basic_init+0x918>)
  4196b4:	6818      	ldr	r0, [r3, #0]
  4196b6:	4b68      	ldr	r3, [pc, #416]	; (419858 <basic_init+0x910>)
  4196b8:	6a1b      	ldr	r3, [r3, #32]
  4196ba:	f013 0302 	ands.w	r3, r3, #2
  4196be:	bf14      	ite	ne
  4196c0:	2107      	movne	r1, #7
  4196c2:	2101      	moveq	r1, #1
  4196c4:	2b00      	cmp	r3, #0
  4196c6:	bf15      	itete	ne
  4196c8:	241c      	movne	r4, #28
  4196ca:	240d      	moveq	r4, #13
  4196cc:	251a      	movne	r5, #26
  4196ce:	250b      	moveq	r5, #11
  4196d0:	bf14      	ite	ne
  4196d2:	2306      	movne	r3, #6
  4196d4:	2303      	moveq	r3, #3
  4196d6:	f04f 0200 	mov.w	r2, #0
  4196da:	f363 0202 	bfi	r2, r3, #0, #3
  4196de:	f365 02c7 	bfi	r2, r5, #3, #5
  4196e2:	f364 220c 	bfi	r2, r4, #8, #5
  4196e6:	f361 324f 	bfi	r2, r1, #13, #3
  4196ea:	f242 0139 	movw	r1, #8249	; 0x2039
  4196ee:	3008      	adds	r0, #8
  4196f0:	4b5a      	ldr	r3, [pc, #360]	; (41985c <basic_init+0x914>)
  4196f2:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  4196f4:	4b5a      	ldr	r3, [pc, #360]	; (419860 <basic_init+0x918>)
  4196f6:	6818      	ldr	r0, [r3, #0]
  4196f8:	3008      	adds	r0, #8
  4196fa:	4b57      	ldr	r3, [pc, #348]	; (419858 <basic_init+0x910>)
  4196fc:	6a1b      	ldr	r3, [r3, #32]
  4196fe:	f013 0f02 	tst.w	r3, #2
  419702:	f040 853d 	bne.w	41a180 <basic_init+0x1238>
  419706:	231f      	movs	r3, #31
  419708:	4619      	mov	r1, r3
  41970a:	2407      	movs	r4, #7
  41970c:	f04f 0200 	mov.w	r2, #0
  419710:	f364 0202 	bfi	r2, r4, #0, #3
  419714:	f361 02c7 	bfi	r2, r1, #3, #5
  419718:	f363 220c 	bfi	r2, r3, #8, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41971c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419720:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  419724:	f249 0189 	movw	r1, #37001	; 0x9089
  419728:	4d4c      	ldr	r5, [pc, #304]	; (41985c <basic_init+0x914>)
  41972a:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41972c:	4c4c      	ldr	r4, [pc, #304]	; (419860 <basic_init+0x918>)
  41972e:	6820      	ldr	r0, [r4, #0]
  419730:	f04f 32ff 	mov.w	r2, #4294967295
  419734:	f248 1189 	movw	r1, #33161	; 0x8189
  419738:	3008      	adds	r0, #8
  41973a:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41973c:	6820      	ldr	r0, [r4, #0]
  41973e:	f04f 32ff 	mov.w	r2, #4294967295
  419742:	f249 1189 	movw	r1, #37257	; 0x9189
  419746:	3008      	adds	r0, #8
  419748:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41974a:	6820      	ldr	r0, [r4, #0]
  41974c:	4b42      	ldr	r3, [pc, #264]	; (419858 <basic_init+0x910>)
  41974e:	6a1b      	ldr	r3, [r3, #32]
  419750:	f013 0302 	ands.w	r3, r3, #2
  419754:	bf14      	ite	ne
  419756:	2402      	movne	r4, #2
  419758:	2406      	moveq	r4, #6
  41975a:	2b00      	cmp	r3, #0
  41975c:	bf15      	itete	ne
  41975e:	2115      	movne	r1, #21
  419760:	2113      	moveq	r1, #19
  419762:	2305      	movne	r3, #5
  419764:	2304      	moveq	r3, #4
  419766:	f04f 0200 	mov.w	r2, #0
  41976a:	f363 0202 	bfi	r2, r3, #0, #3
  41976e:	f361 02c7 	bfi	r2, r1, #3, #5
  419772:	f361 220c 	bfi	r2, r1, #8, #5
  419776:	f364 324f 	bfi	r2, r4, #13, #3
  41977a:	f24a 0189 	movw	r1, #41097	; 0xa089
  41977e:	3008      	adds	r0, #8
  419780:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  419782:	4b37      	ldr	r3, [pc, #220]	; (419860 <basic_init+0x918>)
  419784:	6818      	ldr	r0, [r3, #0]
  419786:	3008      	adds	r0, #8
  419788:	4b33      	ldr	r3, [pc, #204]	; (419858 <basic_init+0x910>)
  41978a:	6a1b      	ldr	r3, [r3, #32]
  41978c:	f013 0f02 	tst.w	r3, #2
  419790:	f040 84fb 	bne.w	41a18a <basic_init+0x1242>
  419794:	231f      	movs	r3, #31
  419796:	4619      	mov	r1, r3
  419798:	2407      	movs	r4, #7
  41979a:	f04f 0200 	mov.w	r2, #0
  41979e:	f364 0202 	bfi	r2, r4, #0, #3
  4197a2:	f361 02c7 	bfi	r2, r1, #3, #5
  4197a6:	f363 220c 	bfi	r2, r3, #8, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  4197aa:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  4197ae:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  4197b2:	f249 01a9 	movw	r1, #37033	; 0x90a9
  4197b6:	4d29      	ldr	r5, [pc, #164]	; (41985c <basic_init+0x914>)
  4197b8:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  4197ba:	4c29      	ldr	r4, [pc, #164]	; (419860 <basic_init+0x918>)
  4197bc:	6820      	ldr	r0, [r4, #0]
  4197be:	f04f 32ff 	mov.w	r2, #4294967295
  4197c2:	f248 11a9 	movw	r1, #33193	; 0x81a9
  4197c6:	3008      	adds	r0, #8
  4197c8:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  4197ca:	6820      	ldr	r0, [r4, #0]
  4197cc:	f04f 32ff 	mov.w	r2, #4294967295
  4197d0:	f249 11a9 	movw	r1, #37289	; 0x91a9
  4197d4:	3008      	adds	r0, #8
  4197d6:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  4197d8:	6820      	ldr	r0, [r4, #0]
  4197da:	4b1f      	ldr	r3, [pc, #124]	; (419858 <basic_init+0x910>)
  4197dc:	6a1b      	ldr	r3, [r3, #32]
  4197de:	f013 0302 	ands.w	r3, r3, #2
  4197e2:	bf14      	ite	ne
  4197e4:	2402      	movne	r4, #2
  4197e6:	2406      	moveq	r4, #6
  4197e8:	2b00      	cmp	r3, #0
  4197ea:	bf15      	itete	ne
  4197ec:	2115      	movne	r1, #21
  4197ee:	2113      	moveq	r1, #19
  4197f0:	2305      	movne	r3, #5
  4197f2:	2304      	moveq	r3, #4
  4197f4:	f04f 0200 	mov.w	r2, #0
  4197f8:	f363 0202 	bfi	r2, r3, #0, #3
  4197fc:	f361 02c7 	bfi	r2, r1, #3, #5
  419800:	f361 220c 	bfi	r2, r1, #8, #5
  419804:	f364 324f 	bfi	r2, r4, #13, #3
  419808:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41980c:	3008      	adds	r0, #8
  41980e:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  419810:	4c13      	ldr	r4, [pc, #76]	; (419860 <basic_init+0x918>)
  419812:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  419814:	2229      	movs	r2, #41	; 0x29
  419816:	21b6      	movs	r1, #182	; 0xb6
  419818:	3008      	adds	r0, #8
  41981a:	4d13      	ldr	r5, [pc, #76]	; (419868 <basic_init+0x920>)
  41981c:	47a8      	blx	r5
    style_init_reset(&styles->btn);
  41981e:	6820      	ldr	r0, [r4, #0]
  419820:	3010      	adds	r0, #16
  419822:	4b12      	ldr	r3, [pc, #72]	; (41986c <basic_init+0x924>)
  419824:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419826:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419828:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41982c:	2101      	movs	r1, #1
  41982e:	3010      	adds	r0, #16
  419830:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  419832:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419834:	22ff      	movs	r2, #255	; 0xff
  419836:	212c      	movs	r1, #44	; 0x2c
  419838:	3010      	adds	r0, #16
  41983a:	4b0d      	ldr	r3, [pc, #52]	; (419870 <basic_init+0x928>)
  41983c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
  41983e:	6820      	ldr	r0, [r4, #0]
  419840:	3010      	adds	r0, #16
  419842:	4b05      	ldr	r3, [pc, #20]	; (419858 <basic_init+0x910>)
  419844:	6a1b      	ldr	r3, [r3, #32]
  419846:	f013 0f02 	tst.w	r3, #2
  41984a:	f040 84a3 	bne.w	41a194 <basic_init+0x124c>
  41984e:	2300      	movs	r3, #0
  419850:	210e      	movs	r1, #14
  419852:	240b      	movs	r4, #11
  419854:	2503      	movs	r5, #3
  419856:	e00d      	b.n	419874 <basic_init+0x92c>
  419858:	2041475c 	.word	0x2041475c
  41985c:	00409a45 	.word	0x00409a45
  419860:	20414758 	.word	0x20414758
  419864:	00415085 	.word	0x00415085
  419868:	004098e5 	.word	0x004098e5
  41986c:	00417d2d 	.word	0x00417d2d
  419870:	00409ba5 	.word	0x00409ba5
  419874:	f04f 0200 	mov.w	r2, #0
  419878:	f365 0202 	bfi	r2, r5, #0, #3
  41987c:	f364 02c7 	bfi	r2, r4, #3, #5
  419880:	f361 220c 	bfi	r2, r1, #8, #5
  419884:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419888:	2129      	movs	r1, #41	; 0x29
  41988a:	4bc7      	ldr	r3, [pc, #796]	; (419ba8 <basic_init+0xc60>)
  41988c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
  41988e:	4bc7      	ldr	r3, [pc, #796]	; (419bac <basic_init+0xc64>)
  419890:	6818      	ldr	r0, [r3, #0]
  419892:	3010      	adds	r0, #16
  419894:	4bc6      	ldr	r3, [pc, #792]	; (419bb0 <basic_init+0xc68>)
  419896:	6a1b      	ldr	r3, [r3, #32]
  419898:	f013 0f02 	tst.w	r3, #2
  41989c:	f000 8480 	beq.w	41a1a0 <basic_init+0x1258>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4198a0:	4bc3      	ldr	r3, [pc, #780]	; (419bb0 <basic_init+0xc68>)
  4198a2:	7b1a      	ldrb	r2, [r3, #12]
  4198a4:	08d1      	lsrs	r1, r2, #3
  4198a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4198aa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
  4198ae:	f641 1634 	movw	r6, #6452	; 0x1934
  4198b2:	4431      	add	r1, r6
  4198b4:	eb01 2401 	add.w	r4, r1, r1, lsl #8
  4198b8:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
  4198bc:	f3c1 51c4 	ubfx	r1, r1, #23, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4198c0:	f002 0407 	and.w	r4, r2, #7
  4198c4:	7b5b      	ldrb	r3, [r3, #13]
  4198c6:	095a      	lsrs	r2, r3, #5
  4198c8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  4198cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4198d0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
  4198d4:	f243 24b4 	movw	r4, #12980	; 0x32b4
  4198d8:	4414      	add	r4, r2
  4198da:	eb04 2204 	add.w	r2, r4, r4, lsl #8
  4198de:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
  4198e2:	f3c4 6582 	ubfx	r5, r4, #26, #3
  4198e6:	f3c4 54c2 	ubfx	r4, r4, #23, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4198ea:	f003 031f 	and.w	r3, r3, #31
  4198ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4198f2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
  4198f6:	4433      	add	r3, r6
  4198f8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  4198fc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  419900:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  419904:	f04f 0200 	mov.w	r2, #0
  419908:	f365 0202 	bfi	r2, r5, #0, #3
  41990c:	f361 02c7 	bfi	r2, r1, #3, #5
  419910:	f363 220c 	bfi	r2, r3, #8, #5
  419914:	f364 324f 	bfi	r2, r4, #13, #3
  419918:	f241 0129 	movw	r1, #4137	; 0x1029
  41991c:	4da2      	ldr	r5, [pc, #648]	; (419ba8 <basic_init+0xc60>)
  41991e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
  419920:	4ca2      	ldr	r4, [pc, #648]	; (419bac <basic_init+0xc64>)
  419922:	6820      	ldr	r0, [r4, #0]
  419924:	4fa2      	ldr	r7, [pc, #648]	; (419bb0 <basic_init+0xc68>)
  419926:	89ba      	ldrh	r2, [r7, #12]
  419928:	f240 1129 	movw	r1, #297	; 0x129
  41992c:	3010      	adds	r0, #16
  41992e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
  419930:	6826      	ldr	r6, [r4, #0]
  419932:	3610      	adds	r6, #16
  419934:	214c      	movs	r1, #76	; 0x4c
  419936:	89b8      	ldrh	r0, [r7, #12]
  419938:	4b9e      	ldr	r3, [pc, #632]	; (419bb4 <basic_init+0xc6c>)
  41993a:	4798      	blx	r3
  41993c:	4602      	mov	r2, r0
  41993e:	f241 1129 	movw	r1, #4393	; 0x1129
  419942:	4630      	mov	r0, r6
  419944:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
  419946:	6820      	ldr	r0, [r4, #0]
  419948:	3010      	adds	r0, #16
  41994a:	6a3b      	ldr	r3, [r7, #32]
  41994c:	f013 0f02 	tst.w	r3, #2
  419950:	f040 8454 	bne.w	41a1fc <basic_init+0x12b4>
  419954:	2300      	movs	r3, #0
  419956:	210e      	movs	r1, #14
  419958:	240b      	movs	r4, #11
  41995a:	2503      	movs	r5, #3
  41995c:	f04f 0200 	mov.w	r2, #0
  419960:	f365 0202 	bfi	r2, r5, #0, #3
  419964:	f364 02c7 	bfi	r2, r4, #3, #5
  419968:	f361 220c 	bfi	r2, r1, #8, #5
  41996c:	f363 324f 	bfi	r2, r3, #13, #3
  419970:	f242 0129 	movw	r1, #8233	; 0x2029
  419974:	4b8c      	ldr	r3, [pc, #560]	; (419ba8 <basic_init+0xc60>)
  419976:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
  419978:	4b8c      	ldr	r3, [pc, #560]	; (419bac <basic_init+0xc64>)
  41997a:	6818      	ldr	r0, [r3, #0]
  41997c:	4b8c      	ldr	r3, [pc, #560]	; (419bb0 <basic_init+0xc68>)
  41997e:	6a1b      	ldr	r3, [r3, #32]
  419980:	f013 0302 	ands.w	r3, r3, #2
  419984:	bf14      	ite	ne
  419986:	2403      	movne	r4, #3
  419988:	2402      	moveq	r4, #2
  41998a:	2b00      	cmp	r3, #0
  41998c:	bf15      	itete	ne
  41998e:	2119      	movne	r1, #25
  419990:	2111      	moveq	r1, #17
  419992:	2306      	movne	r3, #6
  419994:	2304      	moveq	r3, #4
  419996:	f04f 0200 	mov.w	r2, #0
  41999a:	f363 0202 	bfi	r2, r3, #0, #3
  41999e:	f361 02c7 	bfi	r2, r1, #3, #5
  4199a2:	f361 220c 	bfi	r2, r1, #8, #5
  4199a6:	f364 324f 	bfi	r2, r4, #13, #3
  4199aa:	f242 1129 	movw	r1, #8489	; 0x2129
  4199ae:	3010      	adds	r0, #16
  4199b0:	4e7d      	ldr	r6, [pc, #500]	; (419ba8 <basic_init+0xc60>)
  4199b2:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
  4199b4:	4d7d      	ldr	r5, [pc, #500]	; (419bac <basic_init+0xc64>)
  4199b6:	6828      	ldr	r0, [r5, #0]
  4199b8:	4c7d      	ldr	r4, [pc, #500]	; (419bb0 <basic_init+0xc68>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  4199ba:	89a2      	ldrh	r2, [r4, #12]
  4199bc:	2139      	movs	r1, #57	; 0x39
  4199be:	3010      	adds	r0, #16
  4199c0:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
  4199c2:	6828      	ldr	r0, [r5, #0]
  4199c4:	89a2      	ldrh	r2, [r4, #12]
  4199c6:	f241 0139 	movw	r1, #4153	; 0x1039
  4199ca:	3010      	adds	r0, #16
  4199cc:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
  4199ce:	6828      	ldr	r0, [r5, #0]
  4199d0:	6a23      	ldr	r3, [r4, #32]
  4199d2:	f003 0402 	and.w	r4, r3, #2
  4199d6:	f013 0302 	ands.w	r3, r3, #2
  4199da:	bf14      	ite	ne
  4199dc:	2111      	movne	r1, #17
  4199de:	2108      	moveq	r1, #8
  4199e0:	2b00      	cmp	r3, #0
  4199e2:	bf14      	ite	ne
  4199e4:	2304      	movne	r3, #4
  4199e6:	2302      	moveq	r3, #2
  4199e8:	f04f 0200 	mov.w	r2, #0
  4199ec:	f363 0202 	bfi	r2, r3, #0, #3
  4199f0:	f361 02c7 	bfi	r2, r1, #3, #5
  4199f4:	f361 220c 	bfi	r2, r1, #8, #5
  4199f8:	f364 324f 	bfi	r2, r4, #13, #3
  4199fc:	f242 0139 	movw	r1, #8249	; 0x2039
  419a00:	3010      	adds	r0, #16
  419a02:	47b0      	blx	r6
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  419a04:	682c      	ldr	r4, [r5, #0]
  419a06:	3410      	adds	r4, #16
  419a08:	2000      	movs	r0, #0
  419a0a:	4b6b      	ldr	r3, [pc, #428]	; (419bb8 <basic_init+0xc70>)
  419a0c:	4798      	blx	r3
  419a0e:	3028      	adds	r0, #40	; 0x28
  419a10:	0040      	lsls	r0, r0, #1
  419a12:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419a16:	f280 83f7 	bge.w	41a208 <basic_init+0x12c0>
  419a1a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  419a1c:	2130      	movs	r1, #48	; 0x30
  419a1e:	4620      	mov	r0, r4
  419a20:	4b66      	ldr	r3, [pc, #408]	; (419bbc <basic_init+0xc74>)
  419a22:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
  419a24:	4c61      	ldr	r4, [pc, #388]	; (419bac <basic_init+0xc64>)
  419a26:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  419a28:	2200      	movs	r2, #0
  419a2a:	f44f 719e 	mov.w	r1, #316	; 0x13c
  419a2e:	3010      	adds	r0, #16
  419a30:	4b63      	ldr	r3, [pc, #396]	; (419bc0 <basic_init+0xc78>)
  419a32:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  419a34:	6820      	ldr	r0, [r4, #0]
  419a36:	3010      	adds	r0, #16
  419a38:	4b5d      	ldr	r3, [pc, #372]	; (419bb0 <basic_init+0xc68>)
  419a3a:	6a1b      	ldr	r3, [r3, #32]
  419a3c:	f013 0f02 	tst.w	r3, #2
  419a40:	f040 83f0 	bne.w	41a224 <basic_init+0x12dc>
  419a44:	2307      	movs	r3, #7
  419a46:	211f      	movs	r1, #31
  419a48:	460c      	mov	r4, r1
  419a4a:	461d      	mov	r5, r3
  419a4c:	f04f 0200 	mov.w	r2, #0
  419a50:	f365 0202 	bfi	r2, r5, #0, #3
  419a54:	f364 02c7 	bfi	r2, r4, #3, #5
  419a58:	f361 220c 	bfi	r2, r1, #8, #5
  419a5c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419a60:	f248 0189 	movw	r1, #32905	; 0x8089
  419a64:	4b50      	ldr	r3, [pc, #320]	; (419ba8 <basic_init+0xc60>)
  419a66:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  419a68:	4b50      	ldr	r3, [pc, #320]	; (419bac <basic_init+0xc64>)
  419a6a:	6818      	ldr	r0, [r3, #0]
  419a6c:	3010      	adds	r0, #16
  419a6e:	4b50      	ldr	r3, [pc, #320]	; (419bb0 <basic_init+0xc68>)
  419a70:	6a1b      	ldr	r3, [r3, #32]
  419a72:	f013 0f02 	tst.w	r3, #2
  419a76:	f040 83da 	bne.w	41a22e <basic_init+0x12e6>
  419a7a:	2307      	movs	r3, #7
  419a7c:	211f      	movs	r1, #31
  419a7e:	460c      	mov	r4, r1
  419a80:	461d      	mov	r5, r3
  419a82:	f04f 0200 	mov.w	r2, #0
  419a86:	f365 0202 	bfi	r2, r5, #0, #3
  419a8a:	f364 02c7 	bfi	r2, r4, #3, #5
  419a8e:	f361 220c 	bfi	r2, r1, #8, #5
  419a92:	f363 324f 	bfi	r2, r3, #13, #3
  419a96:	f249 0189 	movw	r1, #37001	; 0x9089
  419a9a:	4d43      	ldr	r5, [pc, #268]	; (419ba8 <basic_init+0xc60>)
  419a9c:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  419a9e:	4c43      	ldr	r4, [pc, #268]	; (419bac <basic_init+0xc64>)
  419aa0:	6820      	ldr	r0, [r4, #0]
  419aa2:	f04f 32ff 	mov.w	r2, #4294967295
  419aa6:	f248 1189 	movw	r1, #33161	; 0x8189
  419aaa:	3010      	adds	r0, #16
  419aac:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  419aae:	6820      	ldr	r0, [r4, #0]
  419ab0:	f04f 32ff 	mov.w	r2, #4294967295
  419ab4:	f249 1189 	movw	r1, #37257	; 0x9189
  419ab8:	3010      	adds	r0, #16
  419aba:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  419abc:	6820      	ldr	r0, [r4, #0]
  419abe:	f04f 0200 	mov.w	r2, #0
  419ac2:	2304      	movs	r3, #4
  419ac4:	f363 0202 	bfi	r2, r3, #0, #3
  419ac8:	2311      	movs	r3, #17
  419aca:	f363 02c7 	bfi	r2, r3, #3, #5
  419ace:	f363 220c 	bfi	r2, r3, #8, #5
  419ad2:	2302      	movs	r3, #2
  419ad4:	f363 324f 	bfi	r2, r3, #13, #3
  419ad8:	f24a 0189 	movw	r1, #41097	; 0xa089
  419adc:	3010      	adds	r0, #16
  419ade:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  419ae0:	6820      	ldr	r0, [r4, #0]
  419ae2:	3010      	adds	r0, #16
  419ae4:	4b32      	ldr	r3, [pc, #200]	; (419bb0 <basic_init+0xc68>)
  419ae6:	6a1b      	ldr	r3, [r3, #32]
  419ae8:	f013 0f02 	tst.w	r3, #2
  419aec:	f040 83a4 	bne.w	41a238 <basic_init+0x12f0>
  419af0:	2307      	movs	r3, #7
  419af2:	211f      	movs	r1, #31
  419af4:	460c      	mov	r4, r1
  419af6:	461d      	mov	r5, r3
  419af8:	f04f 0200 	mov.w	r2, #0
  419afc:	f365 0202 	bfi	r2, r5, #0, #3
  419b00:	f364 02c7 	bfi	r2, r4, #3, #5
  419b04:	f361 220c 	bfi	r2, r1, #8, #5
  419b08:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  419b0c:	f248 01a9 	movw	r1, #32937	; 0x80a9
  419b10:	4b25      	ldr	r3, [pc, #148]	; (419ba8 <basic_init+0xc60>)
  419b12:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  419b14:	4b25      	ldr	r3, [pc, #148]	; (419bac <basic_init+0xc64>)
  419b16:	6818      	ldr	r0, [r3, #0]
  419b18:	3010      	adds	r0, #16
  419b1a:	4b25      	ldr	r3, [pc, #148]	; (419bb0 <basic_init+0xc68>)
  419b1c:	6a1b      	ldr	r3, [r3, #32]
  419b1e:	f013 0f02 	tst.w	r3, #2
  419b22:	f040 838e 	bne.w	41a242 <basic_init+0x12fa>
  419b26:	2307      	movs	r3, #7
  419b28:	211f      	movs	r1, #31
  419b2a:	460c      	mov	r4, r1
  419b2c:	461d      	mov	r5, r3
  419b2e:	f04f 0200 	mov.w	r2, #0
  419b32:	f365 0202 	bfi	r2, r5, #0, #3
  419b36:	f364 02c7 	bfi	r2, r4, #3, #5
  419b3a:	f361 220c 	bfi	r2, r1, #8, #5
  419b3e:	f363 324f 	bfi	r2, r3, #13, #3
  419b42:	f249 01a9 	movw	r1, #37033	; 0x90a9
  419b46:	4d18      	ldr	r5, [pc, #96]	; (419ba8 <basic_init+0xc60>)
  419b48:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
  419b4a:	4c18      	ldr	r4, [pc, #96]	; (419bac <basic_init+0xc64>)
  419b4c:	6820      	ldr	r0, [r4, #0]
  419b4e:	f04f 32ff 	mov.w	r2, #4294967295
  419b52:	f249 01a9 	movw	r1, #37033	; 0x90a9
  419b56:	3010      	adds	r0, #16
  419b58:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  419b5a:	6820      	ldr	r0, [r4, #0]
  419b5c:	f04f 32ff 	mov.w	r2, #4294967295
  419b60:	f249 11a9 	movw	r1, #37289	; 0x91a9
  419b64:	3010      	adds	r0, #16
  419b66:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  419b68:	6820      	ldr	r0, [r4, #0]
  419b6a:	f04f 0200 	mov.w	r2, #0
  419b6e:	2304      	movs	r3, #4
  419b70:	f363 0202 	bfi	r2, r3, #0, #3
  419b74:	2311      	movs	r3, #17
  419b76:	f363 02c7 	bfi	r2, r3, #3, #5
  419b7a:	f363 220c 	bfi	r2, r3, #8, #5
  419b7e:	2302      	movs	r3, #2
  419b80:	f363 324f 	bfi	r2, r3, #13, #3
  419b84:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  419b88:	3010      	adds	r0, #16
  419b8a:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  419b8c:	6820      	ldr	r0, [r4, #0]
  419b8e:	3010      	adds	r0, #16
  419b90:	4b07      	ldr	r3, [pc, #28]	; (419bb0 <basic_init+0xc68>)
  419b92:	6a1b      	ldr	r3, [r3, #32]
  419b94:	f013 0f02 	tst.w	r3, #2
  419b98:	f040 8358 	bne.w	41a24c <basic_init+0x1304>
  419b9c:	2307      	movs	r3, #7
  419b9e:	211f      	movs	r1, #31
  419ba0:	460c      	mov	r4, r1
  419ba2:	461d      	mov	r5, r3
  419ba4:	e00e      	b.n	419bc4 <basic_init+0xc7c>
  419ba6:	bf00      	nop
  419ba8:	00409a45 	.word	0x00409a45
  419bac:	20414758 	.word	0x20414758
  419bb0:	2041475c 	.word	0x2041475c
  419bb4:	00415085 	.word	0x00415085
  419bb8:	004140fd 	.word	0x004140fd
  419bbc:	004098e5 	.word	0x004098e5
  419bc0:	00409ba5 	.word	0x00409ba5
  419bc4:	f04f 0200 	mov.w	r2, #0
  419bc8:	f365 0202 	bfi	r2, r5, #0, #3
  419bcc:	f364 02c7 	bfi	r2, r4, #3, #5
  419bd0:	f361 220c 	bfi	r2, r1, #8, #5
  419bd4:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  419bd8:	2179      	movs	r1, #121	; 0x79
  419bda:	4bbf      	ldr	r3, [pc, #764]	; (419ed8 <basic_init+0xf90>)
  419bdc:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  419bde:	4bbf      	ldr	r3, [pc, #764]	; (419edc <basic_init+0xf94>)
  419be0:	6818      	ldr	r0, [r3, #0]
  419be2:	3010      	adds	r0, #16
  419be4:	4bbe      	ldr	r3, [pc, #760]	; (419ee0 <basic_init+0xf98>)
  419be6:	6a1b      	ldr	r3, [r3, #32]
  419be8:	f013 0f02 	tst.w	r3, #2
  419bec:	f040 8333 	bne.w	41a256 <basic_init+0x130e>
  419bf0:	2307      	movs	r3, #7
  419bf2:	211f      	movs	r1, #31
  419bf4:	460c      	mov	r4, r1
  419bf6:	461d      	mov	r5, r3
  419bf8:	f04f 0200 	mov.w	r2, #0
  419bfc:	f365 0202 	bfi	r2, r5, #0, #3
  419c00:	f364 02c7 	bfi	r2, r4, #3, #5
  419c04:	f361 220c 	bfi	r2, r1, #8, #5
  419c08:	f363 324f 	bfi	r2, r3, #13, #3
  419c0c:	f241 0179 	movw	r1, #4217	; 0x1079
  419c10:	4db1      	ldr	r5, [pc, #708]	; (419ed8 <basic_init+0xf90>)
  419c12:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  419c14:	4cb1      	ldr	r4, [pc, #708]	; (419edc <basic_init+0xf94>)
  419c16:	6820      	ldr	r0, [r4, #0]
  419c18:	f04f 32ff 	mov.w	r2, #4294967295
  419c1c:	f240 1179 	movw	r1, #377	; 0x179
  419c20:	3010      	adds	r0, #16
  419c22:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  419c24:	6820      	ldr	r0, [r4, #0]
  419c26:	f04f 32ff 	mov.w	r2, #4294967295
  419c2a:	f241 1179 	movw	r1, #4473	; 0x1179
  419c2e:	3010      	adds	r0, #16
  419c30:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  419c32:	6820      	ldr	r0, [r4, #0]
  419c34:	f04f 0200 	mov.w	r2, #0
  419c38:	2304      	movs	r3, #4
  419c3a:	f363 0202 	bfi	r2, r3, #0, #3
  419c3e:	2311      	movs	r3, #17
  419c40:	f363 02c7 	bfi	r2, r3, #3, #5
  419c44:	f363 220c 	bfi	r2, r3, #8, #5
  419c48:	2302      	movs	r3, #2
  419c4a:	f363 324f 	bfi	r2, r3, #13, #3
  419c4e:	f242 0179 	movw	r1, #8313	; 0x2079
  419c52:	3010      	adds	r0, #16
  419c54:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  419c56:	6824      	ldr	r4, [r4, #0]
  419c58:	3410      	adds	r4, #16
  419c5a:	2000      	movs	r0, #0
  419c5c:	4ba1      	ldr	r3, [pc, #644]	; (419ee4 <basic_init+0xf9c>)
  419c5e:	4798      	blx	r3
  419c60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419c64:	00c0      	lsls	r0, r0, #3
  419c66:	3050      	adds	r0, #80	; 0x50
  419c68:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c6c:	f280 82fe 	bge.w	41a26c <basic_init+0x1324>
  419c70:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419c72:	2112      	movs	r1, #18
  419c74:	4620      	mov	r0, r4
  419c76:	4b9c      	ldr	r3, [pc, #624]	; (419ee8 <basic_init+0xfa0>)
  419c78:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  419c7a:	4b98      	ldr	r3, [pc, #608]	; (419edc <basic_init+0xf94>)
  419c7c:	681c      	ldr	r4, [r3, #0]
  419c7e:	3410      	adds	r4, #16
  419c80:	2000      	movs	r0, #0
  419c82:	4b98      	ldr	r3, [pc, #608]	; (419ee4 <basic_init+0xf9c>)
  419c84:	4798      	blx	r3
  419c86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419c8a:	00c0      	lsls	r0, r0, #3
  419c8c:	3050      	adds	r0, #80	; 0x50
  419c8e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c92:	f280 82fa 	bge.w	41a28a <basic_init+0x1342>
  419c96:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419c98:	2113      	movs	r1, #19
  419c9a:	4620      	mov	r0, r4
  419c9c:	4b92      	ldr	r3, [pc, #584]	; (419ee8 <basic_init+0xfa0>)
  419c9e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  419ca0:	4b8e      	ldr	r3, [pc, #568]	; (419edc <basic_init+0xf94>)
  419ca2:	681c      	ldr	r4, [r3, #0]
  419ca4:	3410      	adds	r4, #16
  419ca6:	2000      	movs	r0, #0
  419ca8:	4b8e      	ldr	r3, [pc, #568]	; (419ee4 <basic_init+0xf9c>)
  419caa:	4798      	blx	r3
  419cac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419cb0:	3050      	adds	r0, #80	; 0x50
  419cb2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419cb6:	f280 82f7 	bge.w	41a2a8 <basic_init+0x1360>
  419cba:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419cbc:	2110      	movs	r1, #16
  419cbe:	4620      	mov	r0, r4
  419cc0:	4b89      	ldr	r3, [pc, #548]	; (419ee8 <basic_init+0xfa0>)
  419cc2:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  419cc4:	4b85      	ldr	r3, [pc, #532]	; (419edc <basic_init+0xf94>)
  419cc6:	681c      	ldr	r4, [r3, #0]
  419cc8:	3410      	adds	r4, #16
  419cca:	2000      	movs	r0, #0
  419ccc:	4b85      	ldr	r3, [pc, #532]	; (419ee4 <basic_init+0xf9c>)
  419cce:	4798      	blx	r3
  419cd0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419cd4:	3050      	adds	r0, #80	; 0x50
  419cd6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419cda:	f280 82f3 	bge.w	41a2c4 <basic_init+0x137c>
  419cde:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419ce0:	2111      	movs	r1, #17
  419ce2:	4620      	mov	r0, r4
  419ce4:	4b80      	ldr	r3, [pc, #512]	; (419ee8 <basic_init+0xfa0>)
  419ce6:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  419ce8:	4b7c      	ldr	r3, [pc, #496]	; (419edc <basic_init+0xf94>)
  419cea:	681c      	ldr	r4, [r3, #0]
  419cec:	3410      	adds	r4, #16
  419cee:	2000      	movs	r0, #0
  419cf0:	4b7c      	ldr	r3, [pc, #496]	; (419ee4 <basic_init+0xf9c>)
  419cf2:	4798      	blx	r3
  419cf4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419cf8:	0080      	lsls	r0, r0, #2
  419cfa:	3050      	adds	r0, #80	; 0x50
  419cfc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419d00:	f280 82ee 	bge.w	41a2e0 <basic_init+0x1398>
  419d04:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419d06:	2114      	movs	r1, #20
  419d08:	4620      	mov	r0, r4
  419d0a:	4b77      	ldr	r3, [pc, #476]	; (419ee8 <basic_init+0xfa0>)
  419d0c:	4798      	blx	r3
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  419d0e:	4b73      	ldr	r3, [pc, #460]	; (419edc <basic_init+0xf94>)
  419d10:	681c      	ldr	r4, [r3, #0]
  419d12:	3410      	adds	r4, #16
  419d14:	4b72      	ldr	r3, [pc, #456]	; (419ee0 <basic_init+0xf98>)
  419d16:	6a1b      	ldr	r3, [r3, #32]
  419d18:	f013 0f20 	tst.w	r3, #32
  419d1c:	f000 82ef 	beq.w	41a2fe <basic_init+0x13b6>
  419d20:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  419d22:	2140      	movs	r1, #64	; 0x40
  419d24:	4620      	mov	r0, r4
  419d26:	4d70      	ldr	r5, [pc, #448]	; (419ee8 <basic_init+0xfa0>)
  419d28:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
  419d2a:	4c6c      	ldr	r4, [pc, #432]	; (419edc <basic_init+0xf94>)
  419d2c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  419d2e:	2200      	movs	r2, #0
  419d30:	214c      	movs	r1, #76	; 0x4c
  419d32:	3010      	adds	r0, #16
  419d34:	4e6d      	ldr	r6, [pc, #436]	; (419eec <basic_init+0xfa4>)
  419d36:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
  419d38:	6820      	ldr	r0, [r4, #0]
  419d3a:	227f      	movs	r2, #127	; 0x7f
  419d3c:	f44f 7113 	mov.w	r1, #588	; 0x24c
  419d40:	3010      	adds	r0, #16
  419d42:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
  419d44:	6820      	ldr	r0, [r4, #0]
  419d46:	4f66      	ldr	r7, [pc, #408]	; (419ee0 <basic_init+0xf98>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  419d48:	89ba      	ldrh	r2, [r7, #12]
  419d4a:	2149      	movs	r1, #73	; 0x49
  419d4c:	3010      	adds	r0, #16
  419d4e:	4e62      	ldr	r6, [pc, #392]	; (419ed8 <basic_init+0xf90>)
  419d50:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
  419d52:	6820      	ldr	r0, [r4, #0]
  419d54:	89fa      	ldrh	r2, [r7, #14]
  419d56:	f240 4149 	movw	r1, #1097	; 0x449
  419d5a:	3010      	adds	r0, #16
  419d5c:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  419d5e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  419d60:	2200      	movs	r2, #0
  419d62:	21b0      	movs	r1, #176	; 0xb0
  419d64:	3010      	adds	r0, #16
  419d66:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
  419d68:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  419d6a:	223c      	movs	r2, #60	; 0x3c
  419d6c:	21b5      	movs	r1, #181	; 0xb5
  419d6e:	3010      	adds	r0, #16
  419d70:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  419d72:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  419d74:	2229      	movs	r2, #41	; 0x29
  419d76:	21b6      	movs	r1, #182	; 0xb6
  419d78:	3010      	adds	r0, #16
  419d7a:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  419d7c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  419d7e:	224c      	movs	r2, #76	; 0x4c
  419d80:	21b7      	movs	r1, #183	; 0xb7
  419d82:	3010      	adds	r0, #16
  419d84:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  419d86:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  419d88:	2200      	movs	r2, #0
  419d8a:	21b1      	movs	r1, #177	; 0xb1
  419d8c:	3010      	adds	r0, #16
  419d8e:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
  419d90:	6820      	ldr	r0, [r4, #0]
  419d92:	2200      	movs	r2, #0
  419d94:	f241 01b1 	movw	r1, #4273	; 0x10b1
  419d98:	3010      	adds	r0, #16
  419d9a:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
  419d9c:	6820      	ldr	r0, [r4, #0]
  419d9e:	3014      	adds	r0, #20
  419da0:	4b53      	ldr	r3, [pc, #332]	; (419ef0 <basic_init+0xfa8>)
  419da2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  419da4:	6824      	ldr	r4, [r4, #0]
  419da6:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  419da8:	2000      	movs	r0, #0
  419daa:	4b52      	ldr	r3, [pc, #328]	; (419ef4 <basic_init+0xfac>)
  419dac:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  419dae:	2801      	cmp	r0, #1
  419db0:	f240 82bc 	bls.w	41a32c <basic_init+0x13e4>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  419db4:	2000      	movs	r0, #0
  419db6:	4b4b      	ldr	r3, [pc, #300]	; (419ee4 <basic_init+0xf9c>)
  419db8:	4798      	blx	r3
  419dba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419dbe:	00c0      	lsls	r0, r0, #3
  419dc0:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  419dc2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419dc6:	f280 82cc 	bge.w	41a362 <basic_init+0x141a>
  419dca:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419dcc:	2114      	movs	r1, #20
  419dce:	4620      	mov	r0, r4
  419dd0:	4b45      	ldr	r3, [pc, #276]	; (419ee8 <basic_init+0xfa0>)
  419dd2:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
  419dd4:	4b41      	ldr	r3, [pc, #260]	; (419edc <basic_init+0xf94>)
  419dd6:	6818      	ldr	r0, [r3, #0]
  419dd8:	3018      	adds	r0, #24
  419dda:	4b45      	ldr	r3, [pc, #276]	; (419ef0 <basic_init+0xfa8>)
  419ddc:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  419dde:	2000      	movs	r0, #0
  419de0:	4b44      	ldr	r3, [pc, #272]	; (419ef4 <basic_init+0xfac>)
  419de2:	4798      	blx	r3
  419de4:	2801      	cmp	r0, #1
  419de6:	f240 82cb 	bls.w	41a380 <basic_init+0x1438>
  419dea:	2000      	movs	r0, #0
  419dec:	4b3d      	ldr	r3, [pc, #244]	; (419ee4 <basic_init+0xf9c>)
  419dee:	4798      	blx	r3
  419df0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419df4:	0080      	lsls	r0, r0, #2
  419df6:	3050      	adds	r0, #80	; 0x50
  419df8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419dfc:	f280 82db 	bge.w	41a3b6 <basic_init+0x146e>
  419e00:	2401      	movs	r4, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  419e02:	4e36      	ldr	r6, [pc, #216]	; (419edc <basic_init+0xf94>)
  419e04:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419e06:	4622      	mov	r2, r4
  419e08:	2112      	movs	r1, #18
  419e0a:	3018      	adds	r0, #24
  419e0c:	4d36      	ldr	r5, [pc, #216]	; (419ee8 <basic_init+0xfa0>)
  419e0e:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  419e10:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419e12:	4622      	mov	r2, r4
  419e14:	2113      	movs	r1, #19
  419e16:	3018      	adds	r0, #24
  419e18:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  419e1a:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419e1c:	4622      	mov	r2, r4
  419e1e:	2110      	movs	r1, #16
  419e20:	3018      	adds	r0, #24
  419e22:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  419e24:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419e26:	4622      	mov	r2, r4
  419e28:	2111      	movs	r1, #17
  419e2a:	3018      	adds	r0, #24
  419e2c:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  419e2e:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419e30:	4622      	mov	r2, r4
  419e32:	2114      	movs	r1, #20
  419e34:	3018      	adds	r0, #24
  419e36:	47a8      	blx	r5
  419e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  419e3a:	2303      	movs	r3, #3
  419e3c:	211e      	movs	r1, #30
  419e3e:	241d      	movs	r4, #29
  419e40:	2507      	movs	r5, #7
  419e42:	f7ff b896 	b.w	418f72 <basic_init+0x2a>
  419e46:	2307      	movs	r3, #7
  419e48:	2108      	movs	r1, #8
  419e4a:	461c      	mov	r4, r3
  419e4c:	2501      	movs	r5, #1
  419e4e:	f7ff b8a9 	b.w	418fa4 <basic_init+0x5c>
  419e52:	2307      	movs	r3, #7
  419e54:	2108      	movs	r1, #8
  419e56:	461c      	mov	r4, r3
  419e58:	2501      	movs	r5, #1
  419e5a:	f7ff b8bd 	b.w	418fd8 <basic_init+0x90>
  419e5e:	2307      	movs	r3, #7
  419e60:	2108      	movs	r1, #8
  419e62:	461c      	mov	r4, r3
  419e64:	2501      	movs	r5, #1
  419e66:	f7ff b8d0 	b.w	41900a <basic_init+0xc2>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  419e6a:	2000      	movs	r0, #0
  419e6c:	4b1d      	ldr	r3, [pc, #116]	; (419ee4 <basic_init+0xf9c>)
  419e6e:	4798      	blx	r3
  419e70:	300a      	adds	r0, #10
  419e72:	00c0      	lsls	r0, r0, #3
  419e74:	4b20      	ldr	r3, [pc, #128]	; (419ef8 <basic_init+0xfb0>)
  419e76:	fb83 2300 	smull	r2, r3, r3, r0
  419e7a:	17c2      	asrs	r2, r0, #31
  419e7c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419e80:	b212      	sxth	r2, r2
  419e82:	f7ff b8ec 	b.w	41905e <basic_init+0x116>
  419e86:	2307      	movs	r3, #7
  419e88:	211f      	movs	r1, #31
  419e8a:	460c      	mov	r4, r1
  419e8c:	461d      	mov	r5, r3
  419e8e:	f7ff b8fd 	b.w	41908c <basic_init+0x144>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  419e92:	4b12      	ldr	r3, [pc, #72]	; (419edc <basic_init+0xf94>)
  419e94:	6818      	ldr	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  419e96:	4b12      	ldr	r3, [pc, #72]	; (419ee0 <basic_init+0xf98>)
  419e98:	899a      	ldrh	r2, [r3, #12]
  419e9a:	f240 2139 	movw	r1, #569	; 0x239
  419e9e:	3004      	adds	r0, #4
  419ea0:	4b0d      	ldr	r3, [pc, #52]	; (419ed8 <basic_init+0xf90>)
  419ea2:	4798      	blx	r3
  419ea4:	f7ff b925 	b.w	4190f2 <basic_init+0x1aa>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  419ea8:	2000      	movs	r0, #0
  419eaa:	4b0e      	ldr	r3, [pc, #56]	; (419ee4 <basic_init+0xf9c>)
  419eac:	4798      	blx	r3
  419eae:	3028      	adds	r0, #40	; 0x28
  419eb0:	0040      	lsls	r0, r0, #1
  419eb2:	4b11      	ldr	r3, [pc, #68]	; (419ef8 <basic_init+0xfb0>)
  419eb4:	fb83 2300 	smull	r2, r3, r3, r0
  419eb8:	17c2      	asrs	r2, r0, #31
  419eba:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419ebe:	b212      	sxth	r2, r2
  419ec0:	f7ff b92c 	b.w	41911c <basic_init+0x1d4>
  419ec4:	2308      	movs	r3, #8
  419ec6:	2107      	movs	r1, #7
  419ec8:	2401      	movs	r4, #1
  419eca:	f7ff b93c 	b.w	419146 <basic_init+0x1fe>
  419ece:	2308      	movs	r3, #8
  419ed0:	2107      	movs	r1, #7
  419ed2:	2401      	movs	r4, #1
  419ed4:	f7ff b959 	b.w	41918a <basic_init+0x242>
  419ed8:	00409a45 	.word	0x00409a45
  419edc:	20414758 	.word	0x20414758
  419ee0:	2041475c 	.word	0x2041475c
  419ee4:	004140fd 	.word	0x004140fd
  419ee8:	004098e5 	.word	0x004098e5
  419eec:	00409ba5 	.word	0x00409ba5
  419ef0:	00417d2d 	.word	0x00417d2d
  419ef4:	00414119 	.word	0x00414119
  419ef8:	66666667 	.word	0x66666667
  419efc:	2308      	movs	r3, #8
  419efe:	2107      	movs	r1, #7
  419f00:	2401      	movs	r4, #1
  419f02:	f7ff b95d 	b.w	4191c0 <basic_init+0x278>
  419f06:	2308      	movs	r3, #8
  419f08:	2107      	movs	r1, #7
  419f0a:	2401      	movs	r4, #1
  419f0c:	f7ff b974 	b.w	4191f8 <basic_init+0x2b0>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  419f10:	2000      	movs	r0, #0
  419f12:	4bd3      	ldr	r3, [pc, #844]	; (41a260 <basic_init+0x1318>)
  419f14:	4798      	blx	r3
  419f16:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f1a:	3050      	adds	r0, #80	; 0x50
  419f1c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f20:	da02      	bge.n	419f28 <basic_init+0xfe0>
  419f22:	2401      	movs	r4, #1
  419f24:	f7ff b9a5 	b.w	419272 <basic_init+0x32a>
  419f28:	2000      	movs	r0, #0
  419f2a:	4bcd      	ldr	r3, [pc, #820]	; (41a260 <basic_init+0x1318>)
  419f2c:	4798      	blx	r3
  419f2e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f32:	3050      	adds	r0, #80	; 0x50
  419f34:	4acb      	ldr	r2, [pc, #812]	; (41a264 <basic_init+0x131c>)
  419f36:	fb82 3200 	smull	r3, r2, r2, r0
  419f3a:	17c4      	asrs	r4, r0, #31
  419f3c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  419f40:	b2a4      	uxth	r4, r4
  419f42:	f7ff b996 	b.w	419272 <basic_init+0x32a>
  419f46:	2000      	movs	r0, #0
  419f48:	4bc5      	ldr	r3, [pc, #788]	; (41a260 <basic_init+0x1318>)
  419f4a:	4798      	blx	r3
  419f4c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f50:	0040      	lsls	r0, r0, #1
  419f52:	3050      	adds	r0, #80	; 0x50
  419f54:	4ac3      	ldr	r2, [pc, #780]	; (41a264 <basic_init+0x131c>)
  419f56:	fb82 3200 	smull	r3, r2, r2, r0
  419f5a:	17c4      	asrs	r4, r0, #31
  419f5c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  419f60:	b2a4      	uxth	r4, r4
  419f62:	f7ff b986 	b.w	419272 <basic_init+0x32a>
  419f66:	2000      	movs	r0, #0
  419f68:	4bbd      	ldr	r3, [pc, #756]	; (41a260 <basic_init+0x1318>)
  419f6a:	4798      	blx	r3
  419f6c:	3028      	adds	r0, #40	; 0x28
  419f6e:	0040      	lsls	r0, r0, #1
  419f70:	4bbc      	ldr	r3, [pc, #752]	; (41a264 <basic_init+0x131c>)
  419f72:	fb83 2300 	smull	r2, r3, r3, r0
  419f76:	17c2      	asrs	r2, r0, #31
  419f78:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419f7c:	b292      	uxth	r2, r2
  419f7e:	f7ff b982 	b.w	419286 <basic_init+0x33e>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  419f82:	2000      	movs	r0, #0
  419f84:	4bb6      	ldr	r3, [pc, #728]	; (41a260 <basic_init+0x1318>)
  419f86:	4798      	blx	r3
  419f88:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f8c:	3050      	adds	r0, #80	; 0x50
  419f8e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f92:	da02      	bge.n	419f9a <basic_init+0x1052>
  419f94:	2401      	movs	r4, #1
  419f96:	f7ff b991 	b.w	4192bc <basic_init+0x374>
  419f9a:	2000      	movs	r0, #0
  419f9c:	4bb0      	ldr	r3, [pc, #704]	; (41a260 <basic_init+0x1318>)
  419f9e:	4798      	blx	r3
  419fa0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419fa4:	3050      	adds	r0, #80	; 0x50
  419fa6:	4aaf      	ldr	r2, [pc, #700]	; (41a264 <basic_init+0x131c>)
  419fa8:	fb82 3200 	smull	r3, r2, r2, r0
  419fac:	17c4      	asrs	r4, r0, #31
  419fae:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  419fb2:	b2a4      	uxth	r4, r4
  419fb4:	f7ff b982 	b.w	4192bc <basic_init+0x374>
  419fb8:	2000      	movs	r0, #0
  419fba:	4ba9      	ldr	r3, [pc, #676]	; (41a260 <basic_init+0x1318>)
  419fbc:	4798      	blx	r3
  419fbe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419fc2:	0040      	lsls	r0, r0, #1
  419fc4:	3050      	adds	r0, #80	; 0x50
  419fc6:	4aa7      	ldr	r2, [pc, #668]	; (41a264 <basic_init+0x131c>)
  419fc8:	fb82 3200 	smull	r3, r2, r2, r0
  419fcc:	17c4      	asrs	r4, r0, #31
  419fce:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  419fd2:	b2a4      	uxth	r4, r4
  419fd4:	f7ff b972 	b.w	4192bc <basic_init+0x374>
  419fd8:	2000      	movs	r0, #0
  419fda:	4ba1      	ldr	r3, [pc, #644]	; (41a260 <basic_init+0x1318>)
  419fdc:	4798      	blx	r3
  419fde:	3028      	adds	r0, #40	; 0x28
  419fe0:	0040      	lsls	r0, r0, #1
  419fe2:	4ba0      	ldr	r3, [pc, #640]	; (41a264 <basic_init+0x131c>)
  419fe4:	fb83 2300 	smull	r2, r3, r3, r0
  419fe8:	17c2      	asrs	r2, r0, #31
  419fea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419fee:	b292      	uxth	r2, r2
  419ff0:	f7ff b96e 	b.w	4192d0 <basic_init+0x388>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  419ff4:	2000      	movs	r0, #0
  419ff6:	4b9a      	ldr	r3, [pc, #616]	; (41a260 <basic_init+0x1318>)
  419ff8:	4798      	blx	r3
  419ffa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419ffe:	3050      	adds	r0, #80	; 0x50
  41a000:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a004:	da02      	bge.n	41a00c <basic_init+0x10c4>
  41a006:	2401      	movs	r4, #1
  41a008:	f7ff b97d 	b.w	419306 <basic_init+0x3be>
  41a00c:	2000      	movs	r0, #0
  41a00e:	4b94      	ldr	r3, [pc, #592]	; (41a260 <basic_init+0x1318>)
  41a010:	4798      	blx	r3
  41a012:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a016:	3050      	adds	r0, #80	; 0x50
  41a018:	4a92      	ldr	r2, [pc, #584]	; (41a264 <basic_init+0x131c>)
  41a01a:	fb82 3200 	smull	r3, r2, r2, r0
  41a01e:	17c4      	asrs	r4, r0, #31
  41a020:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41a024:	b2a4      	uxth	r4, r4
  41a026:	f7ff b96e 	b.w	419306 <basic_init+0x3be>
  41a02a:	2000      	movs	r0, #0
  41a02c:	4b8c      	ldr	r3, [pc, #560]	; (41a260 <basic_init+0x1318>)
  41a02e:	4798      	blx	r3
  41a030:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a034:	0040      	lsls	r0, r0, #1
  41a036:	3050      	adds	r0, #80	; 0x50
  41a038:	4a8a      	ldr	r2, [pc, #552]	; (41a264 <basic_init+0x131c>)
  41a03a:	fb82 3200 	smull	r3, r2, r2, r0
  41a03e:	17c4      	asrs	r4, r0, #31
  41a040:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41a044:	b2a4      	uxth	r4, r4
  41a046:	f7ff b95e 	b.w	419306 <basic_init+0x3be>
  41a04a:	2000      	movs	r0, #0
  41a04c:	4b84      	ldr	r3, [pc, #528]	; (41a260 <basic_init+0x1318>)
  41a04e:	4798      	blx	r3
  41a050:	3028      	adds	r0, #40	; 0x28
  41a052:	0040      	lsls	r0, r0, #1
  41a054:	4b83      	ldr	r3, [pc, #524]	; (41a264 <basic_init+0x131c>)
  41a056:	fb83 2300 	smull	r2, r3, r3, r0
  41a05a:	17c2      	asrs	r2, r0, #31
  41a05c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a060:	b292      	uxth	r2, r2
  41a062:	f7ff b95a 	b.w	41931a <basic_init+0x3d2>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41a066:	2000      	movs	r0, #0
  41a068:	4b7d      	ldr	r3, [pc, #500]	; (41a260 <basic_init+0x1318>)
  41a06a:	4798      	blx	r3
  41a06c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a070:	3050      	adds	r0, #80	; 0x50
  41a072:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a076:	da02      	bge.n	41a07e <basic_init+0x1136>
  41a078:	2401      	movs	r4, #1
  41a07a:	f7ff b969 	b.w	419350 <basic_init+0x408>
  41a07e:	2000      	movs	r0, #0
  41a080:	4b77      	ldr	r3, [pc, #476]	; (41a260 <basic_init+0x1318>)
  41a082:	4798      	blx	r3
  41a084:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a088:	3050      	adds	r0, #80	; 0x50
  41a08a:	4a76      	ldr	r2, [pc, #472]	; (41a264 <basic_init+0x131c>)
  41a08c:	fb82 3200 	smull	r3, r2, r2, r0
  41a090:	17c4      	asrs	r4, r0, #31
  41a092:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41a096:	b2a4      	uxth	r4, r4
  41a098:	f7ff b95a 	b.w	419350 <basic_init+0x408>
  41a09c:	2000      	movs	r0, #0
  41a09e:	4b70      	ldr	r3, [pc, #448]	; (41a260 <basic_init+0x1318>)
  41a0a0:	4798      	blx	r3
  41a0a2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0a6:	0040      	lsls	r0, r0, #1
  41a0a8:	3050      	adds	r0, #80	; 0x50
  41a0aa:	4a6e      	ldr	r2, [pc, #440]	; (41a264 <basic_init+0x131c>)
  41a0ac:	fb82 3200 	smull	r3, r2, r2, r0
  41a0b0:	17c4      	asrs	r4, r0, #31
  41a0b2:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41a0b6:	b2a4      	uxth	r4, r4
  41a0b8:	f7ff b94a 	b.w	419350 <basic_init+0x408>
  41a0bc:	2000      	movs	r0, #0
  41a0be:	4b68      	ldr	r3, [pc, #416]	; (41a260 <basic_init+0x1318>)
  41a0c0:	4798      	blx	r3
  41a0c2:	3028      	adds	r0, #40	; 0x28
  41a0c4:	0040      	lsls	r0, r0, #1
  41a0c6:	4b67      	ldr	r3, [pc, #412]	; (41a264 <basic_init+0x131c>)
  41a0c8:	fb83 2300 	smull	r2, r3, r3, r0
  41a0cc:	17c2      	asrs	r2, r0, #31
  41a0ce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0d2:	b292      	uxth	r2, r2
  41a0d4:	f7ff b946 	b.w	419364 <basic_init+0x41c>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41a0d8:	2000      	movs	r0, #0
  41a0da:	4b61      	ldr	r3, [pc, #388]	; (41a260 <basic_init+0x1318>)
  41a0dc:	4798      	blx	r3
  41a0de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0e2:	3050      	adds	r0, #80	; 0x50
  41a0e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a0e8:	da02      	bge.n	41a0f0 <basic_init+0x11a8>
  41a0ea:	2201      	movs	r2, #1
  41a0ec:	f7ff b955 	b.w	41939a <basic_init+0x452>
  41a0f0:	2000      	movs	r0, #0
  41a0f2:	4b5b      	ldr	r3, [pc, #364]	; (41a260 <basic_init+0x1318>)
  41a0f4:	4798      	blx	r3
  41a0f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0fa:	3050      	adds	r0, #80	; 0x50
  41a0fc:	4b59      	ldr	r3, [pc, #356]	; (41a264 <basic_init+0x131c>)
  41a0fe:	fb83 2300 	smull	r2, r3, r3, r0
  41a102:	17c2      	asrs	r2, r0, #31
  41a104:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a108:	b212      	sxth	r2, r2
  41a10a:	f7ff b946 	b.w	41939a <basic_init+0x452>
  41a10e:	2000      	movs	r0, #0
  41a110:	4b53      	ldr	r3, [pc, #332]	; (41a260 <basic_init+0x1318>)
  41a112:	4798      	blx	r3
  41a114:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a118:	0040      	lsls	r0, r0, #1
  41a11a:	3050      	adds	r0, #80	; 0x50
  41a11c:	4b51      	ldr	r3, [pc, #324]	; (41a264 <basic_init+0x131c>)
  41a11e:	fb83 2300 	smull	r2, r3, r3, r0
  41a122:	17c2      	asrs	r2, r0, #31
  41a124:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a128:	b212      	sxth	r2, r2
  41a12a:	f7ff b936 	b.w	41939a <basic_init+0x452>
  41a12e:	2305      	movs	r3, #5
  41a130:	211b      	movs	r1, #27
  41a132:	241a      	movs	r4, #26
  41a134:	2506      	movs	r5, #6
  41a136:	f7ff b954 	b.w	4193e2 <basic_init+0x49a>
  41a13a:	2101      	movs	r1, #1
  41a13c:	231d      	movs	r3, #29
  41a13e:	241b      	movs	r4, #27
  41a140:	2507      	movs	r5, #7
  41a142:	f7ff b968 	b.w	419416 <basic_init+0x4ce>
  41a146:	231d      	movs	r3, #29
  41a148:	4619      	mov	r1, r3
  41a14a:	2407      	movs	r4, #7
  41a14c:	f7ff ba13 	b.w	419576 <basic_init+0x62e>
  41a150:	2307      	movs	r3, #7
  41a152:	211f      	movs	r1, #31
  41a154:	460c      	mov	r4, r1
  41a156:	461d      	mov	r5, r3
  41a158:	f7ff ba3a 	b.w	4195d0 <basic_init+0x688>
  41a15c:	2103      	movs	r1, #3
  41a15e:	2319      	movs	r3, #25
  41a160:	461c      	mov	r4, r3
  41a162:	2506      	movs	r5, #6
  41a164:	f7ff ba61 	b.w	41962a <basic_init+0x6e2>
  41a168:	2307      	movs	r3, #7
  41a16a:	2108      	movs	r1, #8
  41a16c:	461c      	mov	r4, r3
  41a16e:	2501      	movs	r5, #1
  41a170:	f7ff ba76 	b.w	419660 <basic_init+0x718>
  41a174:	2307      	movs	r3, #7
  41a176:	2108      	movs	r1, #8
  41a178:	461c      	mov	r4, r3
  41a17a:	2501      	movs	r5, #1
  41a17c:	f7ff ba8b 	b.w	419696 <basic_init+0x74e>
  41a180:	2308      	movs	r3, #8
  41a182:	2107      	movs	r1, #7
  41a184:	2401      	movs	r4, #1
  41a186:	f7ff bac1 	b.w	41970c <basic_init+0x7c4>
  41a18a:	2308      	movs	r3, #8
  41a18c:	2107      	movs	r1, #7
  41a18e:	2401      	movs	r4, #1
  41a190:	f7ff bb03 	b.w	41979a <basic_init+0x852>
  41a194:	2307      	movs	r3, #7
  41a196:	211f      	movs	r1, #31
  41a198:	460c      	mov	r4, r1
  41a19a:	461d      	mov	r5, r3
  41a19c:	f7ff bb6a 	b.w	419874 <basic_init+0x92c>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41a1a0:	4a31      	ldr	r2, [pc, #196]	; (41a268 <basic_init+0x1320>)
  41a1a2:	7b14      	ldrb	r4, [r2, #12]
  41a1a4:	08e1      	lsrs	r1, r4, #3
  41a1a6:	234c      	movs	r3, #76	; 0x4c
  41a1a8:	fb03 f101 	mul.w	r1, r3, r1
  41a1ac:	f601 0131 	addw	r1, r1, #2097	; 0x831
  41a1b0:	eb01 2501 	add.w	r5, r1, r1, lsl #8
  41a1b4:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
  41a1b8:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41a1bc:	f004 0507 	and.w	r5, r4, #7
  41a1c0:	7b52      	ldrb	r2, [r2, #13]
  41a1c2:	0954      	lsrs	r4, r2, #5
  41a1c4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  41a1c8:	f241 1548 	movw	r5, #4424	; 0x1148
  41a1cc:	fb03 5404 	mla	r4, r3, r4, r5
  41a1d0:	eb04 2504 	add.w	r5, r4, r4, lsl #8
  41a1d4:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
  41a1d8:	f3c4 6582 	ubfx	r5, r4, #26, #3
  41a1dc:	f3c4 54c2 	ubfx	r4, r4, #23, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41a1e0:	f002 021f 	and.w	r2, r2, #31
  41a1e4:	fb03 f302 	mul.w	r3, r3, r2
  41a1e8:	f603 234a 	addw	r3, r3, #2634	; 0xa4a
  41a1ec:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  41a1f0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  41a1f4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41a1f8:	f7ff bb84 	b.w	419904 <basic_init+0x9bc>
  41a1fc:	2307      	movs	r3, #7
  41a1fe:	211f      	movs	r1, #31
  41a200:	460c      	mov	r4, r1
  41a202:	461d      	mov	r5, r3
  41a204:	f7ff bbaa 	b.w	41995c <basic_init+0xa14>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41a208:	2000      	movs	r0, #0
  41a20a:	4b15      	ldr	r3, [pc, #84]	; (41a260 <basic_init+0x1318>)
  41a20c:	4798      	blx	r3
  41a20e:	3028      	adds	r0, #40	; 0x28
  41a210:	0040      	lsls	r0, r0, #1
  41a212:	4b14      	ldr	r3, [pc, #80]	; (41a264 <basic_init+0x131c>)
  41a214:	fb83 2300 	smull	r2, r3, r3, r0
  41a218:	17c2      	asrs	r2, r0, #31
  41a21a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a21e:	b212      	sxth	r2, r2
  41a220:	f7ff bbfc 	b.w	419a1c <basic_init+0xad4>
  41a224:	2300      	movs	r3, #0
  41a226:	2109      	movs	r1, #9
  41a228:	2406      	movs	r4, #6
  41a22a:	2502      	movs	r5, #2
  41a22c:	e40e      	b.n	419a4c <basic_init+0xb04>
  41a22e:	2300      	movs	r3, #0
  41a230:	2109      	movs	r1, #9
  41a232:	2406      	movs	r4, #6
  41a234:	2502      	movs	r5, #2
  41a236:	e424      	b.n	419a82 <basic_init+0xb3a>
  41a238:	2300      	movs	r3, #0
  41a23a:	2109      	movs	r1, #9
  41a23c:	2406      	movs	r4, #6
  41a23e:	2502      	movs	r5, #2
  41a240:	e45a      	b.n	419af8 <basic_init+0xbb0>
  41a242:	2300      	movs	r3, #0
  41a244:	2109      	movs	r1, #9
  41a246:	2406      	movs	r4, #6
  41a248:	2502      	movs	r5, #2
  41a24a:	e470      	b.n	419b2e <basic_init+0xbe6>
  41a24c:	2300      	movs	r3, #0
  41a24e:	2109      	movs	r1, #9
  41a250:	2406      	movs	r4, #6
  41a252:	2502      	movs	r5, #2
  41a254:	e4b6      	b.n	419bc4 <basic_init+0xc7c>
  41a256:	2300      	movs	r3, #0
  41a258:	2109      	movs	r1, #9
  41a25a:	2406      	movs	r4, #6
  41a25c:	2502      	movs	r5, #2
  41a25e:	e4cb      	b.n	419bf8 <basic_init+0xcb0>
  41a260:	004140fd 	.word	0x004140fd
  41a264:	66666667 	.word	0x66666667
  41a268:	2041475c 	.word	0x2041475c
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41a26c:	2000      	movs	r0, #0
  41a26e:	4b59      	ldr	r3, [pc, #356]	; (41a3d4 <basic_init+0x148c>)
  41a270:	4798      	blx	r3
  41a272:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a276:	00c0      	lsls	r0, r0, #3
  41a278:	3050      	adds	r0, #80	; 0x50
  41a27a:	4b57      	ldr	r3, [pc, #348]	; (41a3d8 <basic_init+0x1490>)
  41a27c:	fb83 2300 	smull	r2, r3, r3, r0
  41a280:	17c2      	asrs	r2, r0, #31
  41a282:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a286:	b212      	sxth	r2, r2
  41a288:	e4f3      	b.n	419c72 <basic_init+0xd2a>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41a28a:	2000      	movs	r0, #0
  41a28c:	4b51      	ldr	r3, [pc, #324]	; (41a3d4 <basic_init+0x148c>)
  41a28e:	4798      	blx	r3
  41a290:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a294:	00c0      	lsls	r0, r0, #3
  41a296:	3050      	adds	r0, #80	; 0x50
  41a298:	4b4f      	ldr	r3, [pc, #316]	; (41a3d8 <basic_init+0x1490>)
  41a29a:	fb83 2300 	smull	r2, r3, r3, r0
  41a29e:	17c2      	asrs	r2, r0, #31
  41a2a0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a2a4:	b212      	sxth	r2, r2
  41a2a6:	e4f7      	b.n	419c98 <basic_init+0xd50>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41a2a8:	2000      	movs	r0, #0
  41a2aa:	4b4a      	ldr	r3, [pc, #296]	; (41a3d4 <basic_init+0x148c>)
  41a2ac:	4798      	blx	r3
  41a2ae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a2b2:	3050      	adds	r0, #80	; 0x50
  41a2b4:	4b48      	ldr	r3, [pc, #288]	; (41a3d8 <basic_init+0x1490>)
  41a2b6:	fb83 2300 	smull	r2, r3, r3, r0
  41a2ba:	17c2      	asrs	r2, r0, #31
  41a2bc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a2c0:	b212      	sxth	r2, r2
  41a2c2:	e4fb      	b.n	419cbc <basic_init+0xd74>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41a2c4:	2000      	movs	r0, #0
  41a2c6:	4b43      	ldr	r3, [pc, #268]	; (41a3d4 <basic_init+0x148c>)
  41a2c8:	4798      	blx	r3
  41a2ca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a2ce:	3050      	adds	r0, #80	; 0x50
  41a2d0:	4b41      	ldr	r3, [pc, #260]	; (41a3d8 <basic_init+0x1490>)
  41a2d2:	fb83 2300 	smull	r2, r3, r3, r0
  41a2d6:	17c2      	asrs	r2, r0, #31
  41a2d8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a2dc:	b212      	sxth	r2, r2
  41a2de:	e4ff      	b.n	419ce0 <basic_init+0xd98>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41a2e0:	2000      	movs	r0, #0
  41a2e2:	4b3c      	ldr	r3, [pc, #240]	; (41a3d4 <basic_init+0x148c>)
  41a2e4:	4798      	blx	r3
  41a2e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a2ea:	0080      	lsls	r0, r0, #2
  41a2ec:	3050      	adds	r0, #80	; 0x50
  41a2ee:	4b3a      	ldr	r3, [pc, #232]	; (41a3d8 <basic_init+0x1490>)
  41a2f0:	fb83 2300 	smull	r2, r3, r3, r0
  41a2f4:	17c2      	asrs	r2, r0, #31
  41a2f6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a2fa:	b212      	sxth	r2, r2
  41a2fc:	e503      	b.n	419d06 <basic_init+0xdbe>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41a2fe:	2000      	movs	r0, #0
  41a300:	4b34      	ldr	r3, [pc, #208]	; (41a3d4 <basic_init+0x148c>)
  41a302:	4798      	blx	r3
  41a304:	3028      	adds	r0, #40	; 0x28
  41a306:	0040      	lsls	r0, r0, #1
  41a308:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a30c:	da01      	bge.n	41a312 <basic_init+0x13ca>
  41a30e:	2201      	movs	r2, #1
  41a310:	e507      	b.n	419d22 <basic_init+0xdda>
  41a312:	2000      	movs	r0, #0
  41a314:	4b2f      	ldr	r3, [pc, #188]	; (41a3d4 <basic_init+0x148c>)
  41a316:	4798      	blx	r3
  41a318:	3028      	adds	r0, #40	; 0x28
  41a31a:	0040      	lsls	r0, r0, #1
  41a31c:	4b2e      	ldr	r3, [pc, #184]	; (41a3d8 <basic_init+0x1490>)
  41a31e:	fb83 2300 	smull	r2, r3, r3, r0
  41a322:	17c2      	asrs	r2, r0, #31
  41a324:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a328:	b212      	sxth	r2, r2
  41a32a:	e4fa      	b.n	419d22 <basic_init+0xdda>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41a32c:	2000      	movs	r0, #0
  41a32e:	4b29      	ldr	r3, [pc, #164]	; (41a3d4 <basic_init+0x148c>)
  41a330:	4798      	blx	r3
  41a332:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a336:	0080      	lsls	r0, r0, #2
  41a338:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41a33a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a33e:	da01      	bge.n	41a344 <basic_init+0x13fc>
  41a340:	2201      	movs	r2, #1
  41a342:	e543      	b.n	419dcc <basic_init+0xe84>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41a344:	2000      	movs	r0, #0
  41a346:	4b23      	ldr	r3, [pc, #140]	; (41a3d4 <basic_init+0x148c>)
  41a348:	4798      	blx	r3
  41a34a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a34e:	0080      	lsls	r0, r0, #2
  41a350:	3050      	adds	r0, #80	; 0x50
  41a352:	4b21      	ldr	r3, [pc, #132]	; (41a3d8 <basic_init+0x1490>)
  41a354:	fb83 2300 	smull	r2, r3, r3, r0
  41a358:	17c2      	asrs	r2, r0, #31
  41a35a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41a35e:	b212      	sxth	r2, r2
  41a360:	e534      	b.n	419dcc <basic_init+0xe84>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41a362:	2000      	movs	r0, #0
  41a364:	4b1b      	ldr	r3, [pc, #108]	; (41a3d4 <basic_init+0x148c>)
  41a366:	4798      	blx	r3
  41a368:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a36c:	00c0      	lsls	r0, r0, #3
  41a36e:	3050      	adds	r0, #80	; 0x50
  41a370:	4b19      	ldr	r3, [pc, #100]	; (41a3d8 <basic_init+0x1490>)
  41a372:	fb83 2300 	smull	r2, r3, r3, r0
  41a376:	17c2      	asrs	r2, r0, #31
  41a378:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41a37c:	b212      	sxth	r2, r2
  41a37e:	e525      	b.n	419dcc <basic_init+0xe84>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41a380:	2000      	movs	r0, #0
  41a382:	4b14      	ldr	r3, [pc, #80]	; (41a3d4 <basic_init+0x148c>)
  41a384:	4798      	blx	r3
  41a386:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a38a:	0040      	lsls	r0, r0, #1
  41a38c:	3050      	adds	r0, #80	; 0x50
  41a38e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a392:	da01      	bge.n	41a398 <basic_init+0x1450>
  41a394:	2401      	movs	r4, #1
  41a396:	e534      	b.n	419e02 <basic_init+0xeba>
  41a398:	2000      	movs	r0, #0
  41a39a:	4b0e      	ldr	r3, [pc, #56]	; (41a3d4 <basic_init+0x148c>)
  41a39c:	4798      	blx	r3
  41a39e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a3a2:	0040      	lsls	r0, r0, #1
  41a3a4:	3050      	adds	r0, #80	; 0x50
  41a3a6:	4b0c      	ldr	r3, [pc, #48]	; (41a3d8 <basic_init+0x1490>)
  41a3a8:	fb83 2300 	smull	r2, r3, r3, r0
  41a3ac:	17c4      	asrs	r4, r0, #31
  41a3ae:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41a3b2:	b224      	sxth	r4, r4
  41a3b4:	e525      	b.n	419e02 <basic_init+0xeba>
  41a3b6:	2000      	movs	r0, #0
  41a3b8:	4b06      	ldr	r3, [pc, #24]	; (41a3d4 <basic_init+0x148c>)
  41a3ba:	4798      	blx	r3
  41a3bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a3c0:	0080      	lsls	r0, r0, #2
  41a3c2:	3050      	adds	r0, #80	; 0x50
  41a3c4:	4b04      	ldr	r3, [pc, #16]	; (41a3d8 <basic_init+0x1490>)
  41a3c6:	fb83 2300 	smull	r2, r3, r3, r0
  41a3ca:	17c4      	asrs	r4, r0, #31
  41a3cc:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41a3d0:	b224      	sxth	r4, r4
  41a3d2:	e516      	b.n	419e02 <basic_init+0xeba>
  41a3d4:	004140fd 	.word	0x004140fd
  41a3d8:	66666667 	.word	0x66666667

0041a3dc <lv_theme_material_init>:
{
  41a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41a3de:	4607      	mov	r7, r0
  41a3e0:	460e      	mov	r6, r1
  41a3e2:	4614      	mov	r4, r2
  41a3e4:	461d      	mov	r5, r3
    if(!inited) {
  41a3e6:	4bb6      	ldr	r3, [pc, #728]	; (41a6c0 <lv_theme_material_init+0x2e4>)
  41a3e8:	781b      	ldrb	r3, [r3, #0]
  41a3ea:	2b00      	cmp	r3, #0
  41a3ec:	f001 8383 	beq.w	41baf6 <lv_theme_material_init+0x171a>
    theme.color_primary = color_primary;
  41a3f0:	4bb4      	ldr	r3, [pc, #720]	; (41a6c4 <lv_theme_material_init+0x2e8>)
  41a3f2:	819f      	strh	r7, [r3, #12]
    theme.color_secondary = color_secondary;
  41a3f4:	81de      	strh	r6, [r3, #14]
    theme.font_small = font_small;
  41a3f6:	611d      	str	r5, [r3, #16]
    theme.font_normal = font_normal;
  41a3f8:	9a06      	ldr	r2, [sp, #24]
  41a3fa:	615a      	str	r2, [r3, #20]
    theme.font_subtitle = font_subtitle;
  41a3fc:	9a07      	ldr	r2, [sp, #28]
  41a3fe:	619a      	str	r2, [r3, #24]
    theme.font_title = font_title;
  41a400:	9a08      	ldr	r2, [sp, #32]
  41a402:	61da      	str	r2, [r3, #28]
    theme.flags = flags;
  41a404:	621c      	str	r4, [r3, #32]
    basic_init();
  41a406:	4bb0      	ldr	r3, [pc, #704]	; (41a6c8 <lv_theme_material_init+0x2ec>)
  41a408:	4798      	blx	r3
    bar_init();
  41a40a:	4bb0      	ldr	r3, [pc, #704]	; (41a6cc <lv_theme_material_init+0x2f0>)
  41a40c:	4798      	blx	r3
    led_init();
  41a40e:	4bb0      	ldr	r3, [pc, #704]	; (41a6d0 <lv_theme_material_init+0x2f4>)
  41a410:	4798      	blx	r3
    slider_init();
  41a412:	4bb0      	ldr	r3, [pc, #704]	; (41a6d4 <lv_theme_material_init+0x2f8>)
  41a414:	4798      	blx	r3
    switch_init();
  41a416:	4bb0      	ldr	r3, [pc, #704]	; (41a6d8 <lv_theme_material_init+0x2fc>)
  41a418:	4798      	blx	r3
    linemeter_init();
  41a41a:	4bb0      	ldr	r3, [pc, #704]	; (41a6dc <lv_theme_material_init+0x300>)
  41a41c:	4798      	blx	r3
    gauge_init();
  41a41e:	4bb0      	ldr	r3, [pc, #704]	; (41a6e0 <lv_theme_material_init+0x304>)
  41a420:	4798      	blx	r3
    arc_init();
  41a422:	4bb0      	ldr	r3, [pc, #704]	; (41a6e4 <lv_theme_material_init+0x308>)
  41a424:	4798      	blx	r3
    chart_init();
  41a426:	4bb0      	ldr	r3, [pc, #704]	; (41a6e8 <lv_theme_material_init+0x30c>)
  41a428:	4798      	blx	r3
    style_init_reset(&styles->calendar_header);
  41a42a:	4cb0      	ldr	r4, [pc, #704]	; (41a6ec <lv_theme_material_init+0x310>)
  41a42c:	6820      	ldr	r0, [r4, #0]
  41a42e:	3034      	adds	r0, #52	; 0x34
  41a430:	4baf      	ldr	r3, [pc, #700]	; (41a6f0 <lv_theme_material_init+0x314>)
  41a432:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  41a434:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a436:	2200      	movs	r2, #0
  41a438:	2110      	movs	r1, #16
  41a43a:	3034      	adds	r0, #52	; 0x34
  41a43c:	4bad      	ldr	r3, [pc, #692]	; (41a6f4 <lv_theme_material_init+0x318>)
  41a43e:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41a440:	6824      	ldr	r4, [r4, #0]
  41a442:	3434      	adds	r4, #52	; 0x34
  41a444:	2000      	movs	r0, #0
  41a446:	4bac      	ldr	r3, [pc, #688]	; (41a6f8 <lv_theme_material_init+0x31c>)
  41a448:	4798      	blx	r3
  41a44a:	2801      	cmp	r0, #1
  41a44c:	f241 835c 	bls.w	41bb08 <lv_theme_material_init+0x172c>
  41a450:	2000      	movs	r0, #0
  41a452:	4baa      	ldr	r3, [pc, #680]	; (41a6fc <lv_theme_material_init+0x320>)
  41a454:	4798      	blx	r3
  41a456:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a45a:	0040      	lsls	r0, r0, #1
  41a45c:	3050      	adds	r0, #80	; 0x50
  41a45e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a462:	f281 836c 	bge.w	41bb3e <lv_theme_material_init+0x1762>
  41a466:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a468:	2112      	movs	r1, #18
  41a46a:	4620      	mov	r0, r4
  41a46c:	4ba1      	ldr	r3, [pc, #644]	; (41a6f4 <lv_theme_material_init+0x318>)
  41a46e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41a470:	4b9e      	ldr	r3, [pc, #632]	; (41a6ec <lv_theme_material_init+0x310>)
  41a472:	681c      	ldr	r4, [r3, #0]
  41a474:	3434      	adds	r4, #52	; 0x34
  41a476:	2000      	movs	r0, #0
  41a478:	4b9f      	ldr	r3, [pc, #636]	; (41a6f8 <lv_theme_material_init+0x31c>)
  41a47a:	4798      	blx	r3
  41a47c:	2801      	cmp	r0, #1
  41a47e:	f241 836e 	bls.w	41bb5e <lv_theme_material_init+0x1782>
  41a482:	2000      	movs	r0, #0
  41a484:	4b9d      	ldr	r3, [pc, #628]	; (41a6fc <lv_theme_material_init+0x320>)
  41a486:	4798      	blx	r3
  41a488:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a48c:	0040      	lsls	r0, r0, #1
  41a48e:	3050      	adds	r0, #80	; 0x50
  41a490:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a494:	f281 837e 	bge.w	41bb94 <lv_theme_material_init+0x17b8>
  41a498:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a49a:	2113      	movs	r1, #19
  41a49c:	4620      	mov	r0, r4
  41a49e:	4d95      	ldr	r5, [pc, #596]	; (41a6f4 <lv_theme_material_init+0x318>)
  41a4a0:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  41a4a2:	4c92      	ldr	r4, [pc, #584]	; (41a6ec <lv_theme_material_init+0x310>)
  41a4a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a4a6:	2200      	movs	r2, #0
  41a4a8:	2111      	movs	r1, #17
  41a4aa:	3034      	adds	r0, #52	; 0x34
  41a4ac:	47a8      	blx	r5
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41a4ae:	6824      	ldr	r4, [r4, #0]
  41a4b0:	3434      	adds	r4, #52	; 0x34
  41a4b2:	2000      	movs	r0, #0
  41a4b4:	4b90      	ldr	r3, [pc, #576]	; (41a6f8 <lv_theme_material_init+0x31c>)
  41a4b6:	4798      	blx	r3
  41a4b8:	2801      	cmp	r0, #1
  41a4ba:	f241 837b 	bls.w	41bbb4 <lv_theme_material_init+0x17d8>
  41a4be:	2000      	movs	r0, #0
  41a4c0:	4b8e      	ldr	r3, [pc, #568]	; (41a6fc <lv_theme_material_init+0x320>)
  41a4c2:	4798      	blx	r3
  41a4c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a4c8:	0040      	lsls	r0, r0, #1
  41a4ca:	3050      	adds	r0, #80	; 0x50
  41a4cc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a4d0:	f281 838b 	bge.w	41bbea <lv_theme_material_init+0x180e>
  41a4d4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41a4d6:	2115      	movs	r1, #21
  41a4d8:	4620      	mov	r0, r4
  41a4da:	4b86      	ldr	r3, [pc, #536]	; (41a6f4 <lv_theme_material_init+0x318>)
  41a4dc:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41a4de:	4b83      	ldr	r3, [pc, #524]	; (41a6ec <lv_theme_material_init+0x310>)
  41a4e0:	681c      	ldr	r4, [r3, #0]
  41a4e2:	3434      	adds	r4, #52	; 0x34
  41a4e4:	2000      	movs	r0, #0
  41a4e6:	4b84      	ldr	r3, [pc, #528]	; (41a6f8 <lv_theme_material_init+0x31c>)
  41a4e8:	4798      	blx	r3
  41a4ea:	2801      	cmp	r0, #1
  41a4ec:	f241 838d 	bls.w	41bc0a <lv_theme_material_init+0x182e>
  41a4f0:	2000      	movs	r0, #0
  41a4f2:	4b82      	ldr	r3, [pc, #520]	; (41a6fc <lv_theme_material_init+0x320>)
  41a4f4:	4798      	blx	r3
  41a4f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a4fa:	0040      	lsls	r0, r0, #1
  41a4fc:	3050      	adds	r0, #80	; 0x50
  41a4fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a502:	f281 839d 	bge.w	41bc40 <lv_theme_material_init+0x1864>
  41a506:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41a508:	2116      	movs	r1, #22
  41a50a:	4620      	mov	r0, r4
  41a50c:	4b79      	ldr	r3, [pc, #484]	; (41a6f4 <lv_theme_material_init+0x318>)
  41a50e:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  41a510:	4b76      	ldr	r3, [pc, #472]	; (41a6ec <lv_theme_material_init+0x310>)
  41a512:	6818      	ldr	r0, [r3, #0]
  41a514:	3034      	adds	r0, #52	; 0x34
  41a516:	4b6b      	ldr	r3, [pc, #428]	; (41a6c4 <lv_theme_material_init+0x2e8>)
  41a518:	6a1b      	ldr	r3, [r3, #32]
  41a51a:	f013 0f02 	tst.w	r3, #2
  41a51e:	f041 839f 	bne.w	41bc60 <lv_theme_material_init+0x1884>
  41a522:	2107      	movs	r1, #7
  41a524:	231f      	movs	r3, #31
  41a526:	460c      	mov	r4, r1
  41a528:	f04f 0200 	mov.w	r2, #0
  41a52c:	f364 0202 	bfi	r2, r4, #0, #3
  41a530:	f363 02c7 	bfi	r2, r3, #3, #5
  41a534:	f363 220c 	bfi	r2, r3, #8, #5
  41a538:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a53c:	f249 0189 	movw	r1, #37001	; 0x9089
  41a540:	4b6f      	ldr	r3, [pc, #444]	; (41a700 <lv_theme_material_init+0x324>)
  41a542:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
  41a544:	4c69      	ldr	r4, [pc, #420]	; (41a6ec <lv_theme_material_init+0x310>)
  41a546:	6820      	ldr	r0, [r4, #0]
  41a548:	3038      	adds	r0, #56	; 0x38
  41a54a:	4b69      	ldr	r3, [pc, #420]	; (41a6f0 <lv_theme_material_init+0x314>)
  41a54c:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  41a54e:	6820      	ldr	r0, [r4, #0]
  41a550:	3038      	adds	r0, #56	; 0x38
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
  41a552:	4b5c      	ldr	r3, [pc, #368]	; (41a6c4 <lv_theme_material_init+0x2e8>)
  41a554:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  41a556:	f013 0f02 	tst.w	r3, #2
  41a55a:	f041 8386 	bne.w	41bc6a <lv_theme_material_init+0x188e>
  41a55e:	2103      	movs	r1, #3
  41a560:	231d      	movs	r3, #29
  41a562:	461c      	mov	r4, r3
  41a564:	2507      	movs	r5, #7
  41a566:	f04f 0200 	mov.w	r2, #0
  41a56a:	f365 0202 	bfi	r2, r5, #0, #3
  41a56e:	f364 02c7 	bfi	r2, r4, #3, #5
  41a572:	f363 220c 	bfi	r2, r3, #8, #5
  41a576:	f361 324f 	bfi	r2, r1, #13, #3
  41a57a:	f248 0189 	movw	r1, #32905	; 0x8089
  41a57e:	4b60      	ldr	r3, [pc, #384]	; (41a700 <lv_theme_material_init+0x324>)
  41a580:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41a582:	4b5a      	ldr	r3, [pc, #360]	; (41a6ec <lv_theme_material_init+0x310>)
  41a584:	681c      	ldr	r4, [r3, #0]
  41a586:	3438      	adds	r4, #56	; 0x38
  41a588:	2000      	movs	r0, #0
  41a58a:	4b5b      	ldr	r3, [pc, #364]	; (41a6f8 <lv_theme_material_init+0x31c>)
  41a58c:	4798      	blx	r3
  41a58e:	2801      	cmp	r0, #1
  41a590:	f241 8371 	bls.w	41bc76 <lv_theme_material_init+0x189a>
  41a594:	2000      	movs	r0, #0
  41a596:	4b59      	ldr	r3, [pc, #356]	; (41a6fc <lv_theme_material_init+0x320>)
  41a598:	4798      	blx	r3
  41a59a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a59e:	0040      	lsls	r0, r0, #1
  41a5a0:	3050      	adds	r0, #80	; 0x50
  41a5a2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a5a6:	f281 8399 	bge.w	41bcdc <lv_theme_material_init+0x1900>
  41a5aa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a5ac:	2112      	movs	r1, #18
  41a5ae:	4620      	mov	r0, r4
  41a5b0:	4b50      	ldr	r3, [pc, #320]	; (41a6f4 <lv_theme_material_init+0x318>)
  41a5b2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41a5b4:	4b4d      	ldr	r3, [pc, #308]	; (41a6ec <lv_theme_material_init+0x310>)
  41a5b6:	681c      	ldr	r4, [r3, #0]
  41a5b8:	3438      	adds	r4, #56	; 0x38
  41a5ba:	2000      	movs	r0, #0
  41a5bc:	4b4e      	ldr	r3, [pc, #312]	; (41a6f8 <lv_theme_material_init+0x31c>)
  41a5be:	4798      	blx	r3
  41a5c0:	2801      	cmp	r0, #1
  41a5c2:	f241 839b 	bls.w	41bcfc <lv_theme_material_init+0x1920>
  41a5c6:	2000      	movs	r0, #0
  41a5c8:	4b4c      	ldr	r3, [pc, #304]	; (41a6fc <lv_theme_material_init+0x320>)
  41a5ca:	4798      	blx	r3
  41a5cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a5d0:	0040      	lsls	r0, r0, #1
  41a5d2:	3050      	adds	r0, #80	; 0x50
  41a5d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a5d8:	f281 83ab 	bge.w	41bd32 <lv_theme_material_init+0x1956>
  41a5dc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a5de:	2113      	movs	r1, #19
  41a5e0:	4620      	mov	r0, r4
  41a5e2:	4b44      	ldr	r3, [pc, #272]	; (41a6f4 <lv_theme_material_init+0x318>)
  41a5e4:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41a5e6:	4b41      	ldr	r3, [pc, #260]	; (41a6ec <lv_theme_material_init+0x310>)
  41a5e8:	681c      	ldr	r4, [r3, #0]
  41a5ea:	3438      	adds	r4, #56	; 0x38
  41a5ec:	2000      	movs	r0, #0
  41a5ee:	4b42      	ldr	r3, [pc, #264]	; (41a6f8 <lv_theme_material_init+0x31c>)
  41a5f0:	4798      	blx	r3
  41a5f2:	2801      	cmp	r0, #1
  41a5f4:	f241 83ad 	bls.w	41bd52 <lv_theme_material_init+0x1976>
  41a5f8:	2000      	movs	r0, #0
  41a5fa:	4b40      	ldr	r3, [pc, #256]	; (41a6fc <lv_theme_material_init+0x320>)
  41a5fc:	4798      	blx	r3
  41a5fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a602:	0040      	lsls	r0, r0, #1
  41a604:	3050      	adds	r0, #80	; 0x50
  41a606:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a60a:	f281 83bd 	bge.w	41bd88 <lv_theme_material_init+0x19ac>
  41a60e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a610:	2111      	movs	r1, #17
  41a612:	4620      	mov	r0, r4
  41a614:	4b37      	ldr	r3, [pc, #220]	; (41a6f4 <lv_theme_material_init+0x318>)
  41a616:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
  41a618:	4c34      	ldr	r4, [pc, #208]	; (41a6ec <lv_theme_material_init+0x310>)
  41a61a:	6820      	ldr	r0, [r4, #0]
  41a61c:	3030      	adds	r0, #48	; 0x30
  41a61e:	4b34      	ldr	r3, [pc, #208]	; (41a6f0 <lv_theme_material_init+0x314>)
  41a620:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  41a622:	6824      	ldr	r4, [r4, #0]
  41a624:	3430      	adds	r4, #48	; 0x30
  41a626:	2000      	movs	r0, #0
  41a628:	4b34      	ldr	r3, [pc, #208]	; (41a6fc <lv_theme_material_init+0x320>)
  41a62a:	4798      	blx	r3
  41a62c:	3014      	adds	r0, #20
  41a62e:	0080      	lsls	r0, r0, #2
  41a630:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a634:	f281 83b8 	bge.w	41bda8 <lv_theme_material_init+0x19cc>
  41a638:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a63a:	2101      	movs	r1, #1
  41a63c:	4620      	mov	r0, r4
  41a63e:	4b2d      	ldr	r3, [pc, #180]	; (41a6f4 <lv_theme_material_init+0x318>)
  41a640:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  41a642:	4b2a      	ldr	r3, [pc, #168]	; (41a6ec <lv_theme_material_init+0x310>)
  41a644:	6818      	ldr	r0, [r3, #0]
  41a646:	3030      	adds	r0, #48	; 0x30
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  41a648:	4b1e      	ldr	r3, [pc, #120]	; (41a6c4 <lv_theme_material_init+0x2e8>)
  41a64a:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  41a64c:	f013 0f02 	tst.w	r3, #2
  41a650:	f041 83b8 	bne.w	41bdc4 <lv_theme_material_init+0x19e8>
  41a654:	2307      	movs	r3, #7
  41a656:	211f      	movs	r1, #31
  41a658:	460c      	mov	r4, r1
  41a65a:	461d      	mov	r5, r3
  41a65c:	f04f 0200 	mov.w	r2, #0
  41a660:	f365 0202 	bfi	r2, r5, #0, #3
  41a664:	f364 02c7 	bfi	r2, r4, #3, #5
  41a668:	f361 220c 	bfi	r2, r1, #8, #5
  41a66c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a670:	f248 1189 	movw	r1, #33161	; 0x8189
  41a674:	4d22      	ldr	r5, [pc, #136]	; (41a700 <lv_theme_material_init+0x324>)
  41a676:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
  41a678:	4c1c      	ldr	r4, [pc, #112]	; (41a6ec <lv_theme_material_init+0x310>)
  41a67a:	6820      	ldr	r0, [r4, #0]
  41a67c:	4b21      	ldr	r3, [pc, #132]	; (41a704 <lv_theme_material_init+0x328>)
  41a67e:	889a      	ldrh	r2, [r3, #4]
  41a680:	f24a 0189 	movw	r1, #41097	; 0xa089
  41a684:	3030      	adds	r0, #48	; 0x30
  41a686:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  41a688:	6820      	ldr	r0, [r4, #0]
  41a68a:	4b0e      	ldr	r3, [pc, #56]	; (41a6c4 <lv_theme_material_init+0x2e8>)
  41a68c:	6a1b      	ldr	r3, [r3, #32]
  41a68e:	f013 0f02 	tst.w	r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a692:	bf14      	ite	ne
  41a694:	2233      	movne	r2, #51	; 0x33
  41a696:	2266      	moveq	r2, #102	; 0x66
  41a698:	f44f 7196 	mov.w	r1, #300	; 0x12c
  41a69c:	3030      	adds	r0, #48	; 0x30
  41a69e:	4d1a      	ldr	r5, [pc, #104]	; (41a708 <lv_theme_material_init+0x32c>)
  41a6a0:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
  41a6a2:	6820      	ldr	r0, [r4, #0]
  41a6a4:	2233      	movs	r2, #51	; 0x33
  41a6a6:	f241 012c 	movw	r1, #4140	; 0x102c
  41a6aa:	3030      	adds	r0, #48	; 0x30
  41a6ac:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
  41a6ae:	6820      	ldr	r0, [r4, #0]
  41a6b0:	22ff      	movs	r2, #255	; 0xff
  41a6b2:	f44f 710b 	mov.w	r1, #556	; 0x22c
  41a6b6:	3030      	adds	r0, #48	; 0x30
  41a6b8:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
  41a6ba:	6820      	ldr	r0, [r4, #0]
  41a6bc:	e026      	b.n	41a70c <lv_theme_material_init+0x330>
  41a6be:	bf00      	nop
  41a6c0:	20414754 	.word	0x20414754
  41a6c4:	2041475c 	.word	0x2041475c
  41a6c8:	00418f49 	.word	0x00418f49
  41a6cc:	00417d4d 	.word	0x00417d4d
  41a6d0:	00418e35 	.word	0x00418e35
  41a6d4:	00417f25 	.word	0x00417f25
  41a6d8:	004181e1 	.word	0x004181e1
  41a6dc:	00418325 	.word	0x00418325
  41a6e0:	0041856d 	.word	0x0041856d
  41a6e4:	00418a7d 	.word	0x00418a7d
  41a6e8:	00418bd5 	.word	0x00418bd5
  41a6ec:	20414758 	.word	0x20414758
  41a6f0:	00417d2d 	.word	0x00417d2d
  41a6f4:	004098e5 	.word	0x004098e5
  41a6f8:	00414119 	.word	0x00414119
  41a6fc:	004140fd 	.word	0x004140fd
  41a700:	00409a45 	.word	0x00409a45
  41a704:	004306bc 	.word	0x004306bc
  41a708:	00409ba5 	.word	0x00409ba5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a70c:	4bba      	ldr	r3, [pc, #744]	; (41a9f8 <lv_theme_material_init+0x61c>)
  41a70e:	881a      	ldrh	r2, [r3, #0]
  41a710:	f248 2189 	movw	r1, #33417	; 0x8289
  41a714:	3030      	adds	r0, #48	; 0x30
  41a716:	4eb9      	ldr	r6, [pc, #740]	; (41a9fc <lv_theme_material_init+0x620>)
  41a718:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
  41a71a:	6820      	ldr	r0, [r4, #0]
  41a71c:	4db8      	ldr	r5, [pc, #736]	; (41aa00 <lv_theme_material_init+0x624>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a71e:	89aa      	ldrh	r2, [r5, #12]
  41a720:	f240 2129 	movw	r1, #553	; 0x229
  41a724:	3030      	adds	r0, #48	; 0x30
  41a726:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  41a728:	6820      	ldr	r0, [r4, #0]
  41a72a:	3030      	adds	r0, #48	; 0x30
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
  41a72c:	6a2b      	ldr	r3, [r5, #32]
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  41a72e:	f013 0f02 	tst.w	r3, #2
  41a732:	f041 834d 	bne.w	41bdd0 <lv_theme_material_init+0x19f4>
  41a736:	2107      	movs	r1, #7
  41a738:	231f      	movs	r3, #31
  41a73a:	460c      	mov	r4, r1
  41a73c:	f04f 0200 	mov.w	r2, #0
  41a740:	f364 0202 	bfi	r2, r4, #0, #3
  41a744:	f363 02c7 	bfi	r2, r3, #3, #5
  41a748:	f363 220c 	bfi	r2, r3, #8, #5
  41a74c:	f361 324f 	bfi	r2, r1, #13, #3
  41a750:	2129      	movs	r1, #41	; 0x29
  41a752:	4daa      	ldr	r5, [pc, #680]	; (41a9fc <lv_theme_material_init+0x620>)
  41a754:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  41a756:	4cab      	ldr	r4, [pc, #684]	; (41aa04 <lv_theme_material_init+0x628>)
  41a758:	6820      	ldr	r0, [r4, #0]
  41a75a:	4ea9      	ldr	r6, [pc, #676]	; (41aa00 <lv_theme_material_init+0x624>)
  41a75c:	89b2      	ldrh	r2, [r6, #12]
  41a75e:	f240 1129 	movw	r1, #297	; 0x129
  41a762:	3030      	adds	r0, #48	; 0x30
  41a764:	47a8      	blx	r5
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
  41a766:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41a768:	2202      	movs	r2, #2
  41a76a:	f44f 7198 	mov.w	r1, #304	; 0x130
  41a76e:	3030      	adds	r0, #48	; 0x30
  41a770:	4fa5      	ldr	r7, [pc, #660]	; (41aa08 <lv_theme_material_init+0x62c>)
  41a772:	47b8      	blx	r7
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
  41a774:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41a776:	2204      	movs	r2, #4
  41a778:	f240 1131 	movw	r1, #305	; 0x131
  41a77c:	3030      	adds	r0, #48	; 0x30
  41a77e:	47b8      	blx	r7
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  41a780:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41a782:	89b2      	ldrh	r2, [r6, #12]
  41a784:	f240 1139 	movw	r1, #313	; 0x139
  41a788:	3030      	adds	r0, #48	; 0x30
  41a78a:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  41a78c:	6824      	ldr	r4, [r4, #0]
  41a78e:	3430      	adds	r4, #48	; 0x30
  41a790:	2000      	movs	r0, #0
  41a792:	4b9e      	ldr	r3, [pc, #632]	; (41aa0c <lv_theme_material_init+0x630>)
  41a794:	4798      	blx	r3
  41a796:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a79a:	3050      	adds	r0, #80	; 0x50
  41a79c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a7a0:	f281 831b 	bge.w	41bdda <lv_theme_material_init+0x19fe>
  41a7a4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a7a6:	2114      	movs	r1, #20
  41a7a8:	4620      	mov	r0, r4
  41a7aa:	4b97      	ldr	r3, [pc, #604]	; (41aa08 <lv_theme_material_init+0x62c>)
  41a7ac:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41a7ae:	4b95      	ldr	r3, [pc, #596]	; (41aa04 <lv_theme_material_init+0x628>)
  41a7b0:	681c      	ldr	r4, [r3, #0]
  41a7b2:	3430      	adds	r4, #48	; 0x30
  41a7b4:	2000      	movs	r0, #0
  41a7b6:	4b96      	ldr	r3, [pc, #600]	; (41aa10 <lv_theme_material_init+0x634>)
  41a7b8:	4798      	blx	r3
  41a7ba:	2801      	cmp	r0, #1
  41a7bc:	f241 831c 	bls.w	41bdf8 <lv_theme_material_init+0x1a1c>
  41a7c0:	2000      	movs	r0, #0
  41a7c2:	4b92      	ldr	r3, [pc, #584]	; (41aa0c <lv_theme_material_init+0x630>)
  41a7c4:	4798      	blx	r3
  41a7c6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a7ca:	0040      	lsls	r0, r0, #1
  41a7cc:	3050      	adds	r0, #80	; 0x50
  41a7ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a7d2:	f281 832c 	bge.w	41be2e <lv_theme_material_init+0x1a52>
  41a7d6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a7d8:	2112      	movs	r1, #18
  41a7da:	4620      	mov	r0, r4
  41a7dc:	4b8a      	ldr	r3, [pc, #552]	; (41aa08 <lv_theme_material_init+0x62c>)
  41a7de:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41a7e0:	4b88      	ldr	r3, [pc, #544]	; (41aa04 <lv_theme_material_init+0x628>)
  41a7e2:	681c      	ldr	r4, [r3, #0]
  41a7e4:	3430      	adds	r4, #48	; 0x30
  41a7e6:	2000      	movs	r0, #0
  41a7e8:	4b89      	ldr	r3, [pc, #548]	; (41aa10 <lv_theme_material_init+0x634>)
  41a7ea:	4798      	blx	r3
  41a7ec:	2801      	cmp	r0, #1
  41a7ee:	f241 832e 	bls.w	41be4e <lv_theme_material_init+0x1a72>
  41a7f2:	2000      	movs	r0, #0
  41a7f4:	4b85      	ldr	r3, [pc, #532]	; (41aa0c <lv_theme_material_init+0x630>)
  41a7f6:	4798      	blx	r3
  41a7f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a7fc:	0040      	lsls	r0, r0, #1
  41a7fe:	3050      	adds	r0, #80	; 0x50
  41a800:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a804:	f281 833e 	bge.w	41be84 <lv_theme_material_init+0x1aa8>
  41a808:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a80a:	2113      	movs	r1, #19
  41a80c:	4620      	mov	r0, r4
  41a80e:	4b7e      	ldr	r3, [pc, #504]	; (41aa08 <lv_theme_material_init+0x62c>)
  41a810:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41a812:	4b7c      	ldr	r3, [pc, #496]	; (41aa04 <lv_theme_material_init+0x628>)
  41a814:	681c      	ldr	r4, [r3, #0]
  41a816:	3430      	adds	r4, #48	; 0x30
  41a818:	2000      	movs	r0, #0
  41a81a:	4b7d      	ldr	r3, [pc, #500]	; (41aa10 <lv_theme_material_init+0x634>)
  41a81c:	4798      	blx	r3
  41a81e:	2801      	cmp	r0, #1
  41a820:	f241 8340 	bls.w	41bea4 <lv_theme_material_init+0x1ac8>
  41a824:	2000      	movs	r0, #0
  41a826:	4b79      	ldr	r3, [pc, #484]	; (41aa0c <lv_theme_material_init+0x630>)
  41a828:	4798      	blx	r3
  41a82a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a82e:	0040      	lsls	r0, r0, #1
  41a830:	3050      	adds	r0, #80	; 0x50
  41a832:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a836:	f281 8350 	bge.w	41beda <lv_theme_material_init+0x1afe>
  41a83a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a83c:	2111      	movs	r1, #17
  41a83e:	4620      	mov	r0, r4
  41a840:	4b71      	ldr	r3, [pc, #452]	; (41aa08 <lv_theme_material_init+0x62c>)
  41a842:	4798      	blx	r3
    style_init_reset(&styles->cpicker_bg);
  41a844:	4c6f      	ldr	r4, [pc, #444]	; (41aa04 <lv_theme_material_init+0x628>)
  41a846:	6820      	ldr	r0, [r4, #0]
  41a848:	303c      	adds	r0, #60	; 0x3c
  41a84a:	4b72      	ldr	r3, [pc, #456]	; (41aa14 <lv_theme_material_init+0x638>)
  41a84c:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  41a84e:	6824      	ldr	r4, [r4, #0]
  41a850:	343c      	adds	r4, #60	; 0x3c
  41a852:	2000      	movs	r0, #0
  41a854:	4b6d      	ldr	r3, [pc, #436]	; (41aa0c <lv_theme_material_init+0x630>)
  41a856:	4798      	blx	r3
  41a858:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a85c:	0040      	lsls	r0, r0, #1
  41a85e:	3050      	adds	r0, #80	; 0x50
  41a860:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a864:	f281 8349 	bge.w	41befa <lv_theme_material_init+0x1b1e>
  41a868:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41a86a:	21c0      	movs	r1, #192	; 0xc0
  41a86c:	4620      	mov	r0, r4
  41a86e:	4b66      	ldr	r3, [pc, #408]	; (41aa08 <lv_theme_material_init+0x62c>)
  41a870:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a872:	4c64      	ldr	r4, [pc, #400]	; (41aa04 <lv_theme_material_init+0x628>)
  41a874:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a876:	22ff      	movs	r2, #255	; 0xff
  41a878:	212c      	movs	r1, #44	; 0x2c
  41a87a:	303c      	adds	r0, #60	; 0x3c
  41a87c:	4b66      	ldr	r3, [pc, #408]	; (41aa18 <lv_theme_material_init+0x63c>)
  41a87e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
  41a880:	6820      	ldr	r0, [r4, #0]
  41a882:	303c      	adds	r0, #60	; 0x3c
  41a884:	4b5e      	ldr	r3, [pc, #376]	; (41aa00 <lv_theme_material_init+0x624>)
  41a886:	6a1b      	ldr	r3, [r3, #32]
  41a888:	f013 0f02 	tst.w	r3, #2
  41a88c:	f041 8345 	bne.w	41bf1a <lv_theme_material_init+0x1b3e>
  41a890:	2302      	movs	r3, #2
  41a892:	210b      	movs	r1, #11
  41a894:	2408      	movs	r4, #8
  41a896:	461d      	mov	r5, r3
  41a898:	f04f 0200 	mov.w	r2, #0
  41a89c:	f365 0202 	bfi	r2, r5, #0, #3
  41a8a0:	f364 02c7 	bfi	r2, r4, #3, #5
  41a8a4:	f361 220c 	bfi	r2, r1, #8, #5
  41a8a8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a8ac:	2129      	movs	r1, #41	; 0x29
  41a8ae:	4b53      	ldr	r3, [pc, #332]	; (41a9fc <lv_theme_material_init+0x620>)
  41a8b0:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  41a8b2:	4b54      	ldr	r3, [pc, #336]	; (41aa04 <lv_theme_material_init+0x628>)
  41a8b4:	681c      	ldr	r4, [r3, #0]
  41a8b6:	343c      	adds	r4, #60	; 0x3c
  41a8b8:	2000      	movs	r0, #0
  41a8ba:	4b54      	ldr	r3, [pc, #336]	; (41aa0c <lv_theme_material_init+0x630>)
  41a8bc:	4798      	blx	r3
  41a8be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a8c2:	0080      	lsls	r0, r0, #2
  41a8c4:	3050      	adds	r0, #80	; 0x50
  41a8c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a8ca:	f281 832c 	bge.w	41bf26 <lv_theme_material_init+0x1b4a>
  41a8ce:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a8d0:	2114      	movs	r1, #20
  41a8d2:	4620      	mov	r0, r4
  41a8d4:	4e4c      	ldr	r6, [pc, #304]	; (41aa08 <lv_theme_material_init+0x62c>)
  41a8d6:	47b0      	blx	r6
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41a8d8:	4c4a      	ldr	r4, [pc, #296]	; (41aa04 <lv_theme_material_init+0x628>)
  41a8da:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a8dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a8e0:	2101      	movs	r1, #1
  41a8e2:	303c      	adds	r0, #60	; 0x3c
  41a8e4:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
  41a8e6:	6820      	ldr	r0, [r4, #0]
  41a8e8:	3040      	adds	r0, #64	; 0x40
  41a8ea:	4b4a      	ldr	r3, [pc, #296]	; (41aa14 <lv_theme_material_init+0x638>)
  41a8ec:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41a8ee:	6820      	ldr	r0, [r4, #0]
  41a8f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a8f4:	2101      	movs	r1, #1
  41a8f6:	3040      	adds	r0, #64	; 0x40
  41a8f8:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41a8fa:	6820      	ldr	r0, [r4, #0]
  41a8fc:	4f3e      	ldr	r7, [pc, #248]	; (41a9f8 <lv_theme_material_init+0x61c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a8fe:	883a      	ldrh	r2, [r7, #0]
  41a900:	2129      	movs	r1, #41	; 0x29
  41a902:	3040      	adds	r0, #64	; 0x40
  41a904:	4d3d      	ldr	r5, [pc, #244]	; (41a9fc <lv_theme_material_init+0x620>)
  41a906:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a908:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a90a:	22ff      	movs	r2, #255	; 0xff
  41a90c:	212c      	movs	r1, #44	; 0x2c
  41a90e:	3040      	adds	r0, #64	; 0x40
  41a910:	4b41      	ldr	r3, [pc, #260]	; (41aa18 <lv_theme_material_init+0x63c>)
  41a912:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
  41a914:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41a916:	2202      	movs	r2, #2
  41a918:	2130      	movs	r1, #48	; 0x30
  41a91a:	3040      	adds	r0, #64	; 0x40
  41a91c:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
  41a91e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41a920:	88ba      	ldrh	r2, [r7, #4]
  41a922:	2139      	movs	r1, #57	; 0x39
  41a924:	3040      	adds	r0, #64	; 0x40
  41a926:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
  41a928:	6820      	ldr	r0, [r4, #0]
  41a92a:	4e35      	ldr	r6, [pc, #212]	; (41aa00 <lv_theme_material_init+0x624>)
  41a92c:	89b2      	ldrh	r2, [r6, #12]
  41a92e:	f240 2139 	movw	r1, #569	; 0x239
  41a932:	3040      	adds	r0, #64	; 0x40
  41a934:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
  41a936:	6820      	ldr	r0, [r4, #0]
  41a938:	89f2      	ldrh	r2, [r6, #14]
  41a93a:	f240 4139 	movw	r1, #1081	; 0x439
  41a93e:	3040      	adds	r0, #64	; 0x40
  41a940:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a942:	6824      	ldr	r4, [r4, #0]
  41a944:	3440      	adds	r4, #64	; 0x40
  41a946:	2000      	movs	r0, #0
  41a948:	4b30      	ldr	r3, [pc, #192]	; (41aa0c <lv_theme_material_init+0x630>)
  41a94a:	4798      	blx	r3
  41a94c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41a950:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41a954:	3050      	adds	r0, #80	; 0x50
  41a956:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a95a:	f281 82f4 	bge.w	41bf46 <lv_theme_material_init+0x1b6a>
  41a95e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a960:	2112      	movs	r1, #18
  41a962:	4620      	mov	r0, r4
  41a964:	4b28      	ldr	r3, [pc, #160]	; (41aa08 <lv_theme_material_init+0x62c>)
  41a966:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a968:	4b26      	ldr	r3, [pc, #152]	; (41aa04 <lv_theme_material_init+0x628>)
  41a96a:	681c      	ldr	r4, [r3, #0]
  41a96c:	3440      	adds	r4, #64	; 0x40
  41a96e:	2000      	movs	r0, #0
  41a970:	4b26      	ldr	r3, [pc, #152]	; (41aa0c <lv_theme_material_init+0x630>)
  41a972:	4798      	blx	r3
  41a974:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41a978:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41a97c:	3050      	adds	r0, #80	; 0x50
  41a97e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a982:	f281 82f1 	bge.w	41bf68 <lv_theme_material_init+0x1b8c>
  41a986:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a988:	2113      	movs	r1, #19
  41a98a:	4620      	mov	r0, r4
  41a98c:	4b1e      	ldr	r3, [pc, #120]	; (41aa08 <lv_theme_material_init+0x62c>)
  41a98e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a990:	4b1c      	ldr	r3, [pc, #112]	; (41aa04 <lv_theme_material_init+0x628>)
  41a992:	681c      	ldr	r4, [r3, #0]
  41a994:	3440      	adds	r4, #64	; 0x40
  41a996:	2000      	movs	r0, #0
  41a998:	4b1c      	ldr	r3, [pc, #112]	; (41aa0c <lv_theme_material_init+0x630>)
  41a99a:	4798      	blx	r3
  41a99c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41a9a0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41a9a4:	3050      	adds	r0, #80	; 0x50
  41a9a6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a9aa:	f281 82ee 	bge.w	41bf8a <lv_theme_material_init+0x1bae>
  41a9ae:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a9b0:	2110      	movs	r1, #16
  41a9b2:	4620      	mov	r0, r4
  41a9b4:	4b14      	ldr	r3, [pc, #80]	; (41aa08 <lv_theme_material_init+0x62c>)
  41a9b6:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a9b8:	4b12      	ldr	r3, [pc, #72]	; (41aa04 <lv_theme_material_init+0x628>)
  41a9ba:	681c      	ldr	r4, [r3, #0]
  41a9bc:	3440      	adds	r4, #64	; 0x40
  41a9be:	2000      	movs	r0, #0
  41a9c0:	4b12      	ldr	r3, [pc, #72]	; (41aa0c <lv_theme_material_init+0x630>)
  41a9c2:	4798      	blx	r3
  41a9c4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41a9c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41a9cc:	3050      	adds	r0, #80	; 0x50
  41a9ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a9d2:	f281 82eb 	bge.w	41bfac <lv_theme_material_init+0x1bd0>
  41a9d6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a9d8:	2111      	movs	r1, #17
  41a9da:	4620      	mov	r0, r4
  41a9dc:	4b0a      	ldr	r3, [pc, #40]	; (41aa08 <lv_theme_material_init+0x62c>)
  41a9de:	4798      	blx	r3
    style_init_reset(&styles->cb_bg);
  41a9e0:	4c08      	ldr	r4, [pc, #32]	; (41aa04 <lv_theme_material_init+0x628>)
  41a9e2:	6820      	ldr	r0, [r4, #0]
  41a9e4:	3050      	adds	r0, #80	; 0x50
  41a9e6:	4b0b      	ldr	r3, [pc, #44]	; (41aa14 <lv_theme_material_init+0x638>)
  41a9e8:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41a9ea:	6824      	ldr	r4, [r4, #0]
  41a9ec:	3450      	adds	r4, #80	; 0x50
  41a9ee:	2000      	movs	r0, #0
  41a9f0:	4b06      	ldr	r3, [pc, #24]	; (41aa0c <lv_theme_material_init+0x630>)
  41a9f2:	4798      	blx	r3
  41a9f4:	e012      	b.n	41aa1c <lv_theme_material_init+0x640>
  41a9f6:	bf00      	nop
  41a9f8:	004306bc 	.word	0x004306bc
  41a9fc:	00409a45 	.word	0x00409a45
  41aa00:	2041475c 	.word	0x2041475c
  41aa04:	20414758 	.word	0x20414758
  41aa08:	004098e5 	.word	0x004098e5
  41aa0c:	004140fd 	.word	0x004140fd
  41aa10:	00414119 	.word	0x00414119
  41aa14:	00417d2d 	.word	0x00417d2d
  41aa18:	00409ba5 	.word	0x00409ba5
  41aa1c:	3014      	adds	r0, #20
  41aa1e:	0080      	lsls	r0, r0, #2
  41aa20:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aa24:	f281 82d3 	bge.w	41bfce <lv_theme_material_init+0x1bf2>
  41aa28:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41aa2a:	2101      	movs	r1, #1
  41aa2c:	4620      	mov	r0, r4
  41aa2e:	4bb8      	ldr	r3, [pc, #736]	; (41ad10 <lv_theme_material_init+0x934>)
  41aa30:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41aa32:	4bb8      	ldr	r3, [pc, #736]	; (41ad14 <lv_theme_material_init+0x938>)
  41aa34:	681c      	ldr	r4, [r3, #0]
  41aa36:	3450      	adds	r4, #80	; 0x50
  41aa38:	2000      	movs	r0, #0
  41aa3a:	4bb7      	ldr	r3, [pc, #732]	; (41ad18 <lv_theme_material_init+0x93c>)
  41aa3c:	4798      	blx	r3
  41aa3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41aa42:	0040      	lsls	r0, r0, #1
  41aa44:	3050      	adds	r0, #80	; 0x50
  41aa46:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aa4a:	f281 82ce 	bge.w	41bfea <lv_theme_material_init+0x1c0e>
  41aa4e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41aa50:	2114      	movs	r1, #20
  41aa52:	4620      	mov	r0, r4
  41aa54:	4bae      	ldr	r3, [pc, #696]	; (41ad10 <lv_theme_material_init+0x934>)
  41aa56:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
  41aa58:	4cae      	ldr	r4, [pc, #696]	; (41ad14 <lv_theme_material_init+0x938>)
  41aa5a:	6820      	ldr	r0, [r4, #0]
  41aa5c:	4eaf      	ldr	r6, [pc, #700]	; (41ad1c <lv_theme_material_init+0x940>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41aa5e:	89b2      	ldrh	r2, [r6, #12]
  41aa60:	2149      	movs	r1, #73	; 0x49
  41aa62:	3050      	adds	r0, #80	; 0x50
  41aa64:	4bae      	ldr	r3, [pc, #696]	; (41ad20 <lv_theme_material_init+0x944>)
  41aa66:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  41aa68:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41aa6a:	2200      	movs	r2, #0
  41aa6c:	214c      	movs	r1, #76	; 0x4c
  41aa6e:	3050      	adds	r0, #80	; 0x50
  41aa70:	4dac      	ldr	r5, [pc, #688]	; (41ad24 <lv_theme_material_init+0x948>)
  41aa72:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
  41aa74:	6820      	ldr	r0, [r4, #0]
  41aa76:	227f      	movs	r2, #127	; 0x7f
  41aa78:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41aa7c:	3050      	adds	r0, #80	; 0x50
  41aa7e:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41aa80:	6824      	ldr	r4, [r4, #0]
  41aa82:	3450      	adds	r4, #80	; 0x50
  41aa84:	6a33      	ldr	r3, [r6, #32]
  41aa86:	f013 0f20 	tst.w	r3, #32
  41aa8a:	f001 82c3 	beq.w	41c014 <lv_theme_material_init+0x1c38>
  41aa8e:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41aa90:	2140      	movs	r1, #64	; 0x40
  41aa92:	4620      	mov	r0, r4
  41aa94:	4b9e      	ldr	r3, [pc, #632]	; (41ad10 <lv_theme_material_init+0x934>)
  41aa96:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41aa98:	4b9e      	ldr	r3, [pc, #632]	; (41ad14 <lv_theme_material_init+0x938>)
  41aa9a:	681c      	ldr	r4, [r3, #0]
  41aa9c:	3450      	adds	r4, #80	; 0x50
  41aa9e:	2000      	movs	r0, #0
  41aaa0:	4b9d      	ldr	r3, [pc, #628]	; (41ad18 <lv_theme_material_init+0x93c>)
  41aaa2:	4798      	blx	r3
  41aaa4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41aaa8:	0040      	lsls	r0, r0, #1
  41aaaa:	3050      	adds	r0, #80	; 0x50
  41aaac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aab0:	f281 82c9 	bge.w	41c046 <lv_theme_material_init+0x1c6a>
  41aab4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  41aab6:	2141      	movs	r1, #65	; 0x41
  41aab8:	4620      	mov	r0, r4
  41aaba:	4d95      	ldr	r5, [pc, #596]	; (41ad10 <lv_theme_material_init+0x934>)
  41aabc:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41aabe:	4c95      	ldr	r4, [pc, #596]	; (41ad14 <lv_theme_material_init+0x938>)
  41aac0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41aac2:	2200      	movs	r2, #0
  41aac4:	21b0      	movs	r1, #176	; 0xb0
  41aac6:	3050      	adds	r0, #80	; 0x50
  41aac8:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41aaca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41aacc:	224c      	movs	r2, #76	; 0x4c
  41aace:	21b7      	movs	r1, #183	; 0xb7
  41aad0:	3050      	adds	r0, #80	; 0x50
  41aad2:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
  41aad4:	6820      	ldr	r0, [r4, #0]
  41aad6:	3054      	adds	r0, #84	; 0x54
  41aad8:	4b93      	ldr	r3, [pc, #588]	; (41ad28 <lv_theme_material_init+0x94c>)
  41aada:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
  41aadc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41aade:	2200      	movs	r2, #0
  41aae0:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41aae4:	3054      	adds	r0, #84	; 0x54
  41aae6:	4b8f      	ldr	r3, [pc, #572]	; (41ad24 <lv_theme_material_init+0x948>)
  41aae8:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  41aaea:	6824      	ldr	r4, [r4, #0]
  41aaec:	3454      	adds	r4, #84	; 0x54
  41aaee:	2000      	movs	r0, #0
  41aaf0:	4b89      	ldr	r3, [pc, #548]	; (41ad18 <lv_theme_material_init+0x93c>)
  41aaf2:	4798      	blx	r3
  41aaf4:	3014      	adds	r0, #20
  41aaf6:	0080      	lsls	r0, r0, #2
  41aaf8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aafc:	f281 82b3 	bge.w	41c066 <lv_theme_material_init+0x1c8a>
  41ab00:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41ab02:	2101      	movs	r1, #1
  41ab04:	4620      	mov	r0, r4
  41ab06:	4f82      	ldr	r7, [pc, #520]	; (41ad10 <lv_theme_material_init+0x934>)
  41ab08:	47b8      	blx	r7
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
  41ab0a:	4c82      	ldr	r4, [pc, #520]	; (41ad14 <lv_theme_material_init+0x938>)
  41ab0c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  41ab0e:	4a87      	ldr	r2, [pc, #540]	; (41ad2c <lv_theme_material_init+0x950>)
  41ab10:	f44f 71b7 	mov.w	r1, #366	; 0x16e
  41ab14:	3054      	adds	r0, #84	; 0x54
  41ab16:	4e86      	ldr	r6, [pc, #536]	; (41ad30 <lv_theme_material_init+0x954>)
  41ab18:	47b0      	blx	r6
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
  41ab1a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  41ab1c:	4b85      	ldr	r3, [pc, #532]	; (41ad34 <lv_theme_material_init+0x958>)
  41ab1e:	881a      	ldrh	r2, [r3, #0]
  41ab20:	f240 1169 	movw	r1, #361	; 0x169
  41ab24:	3054      	adds	r0, #84	; 0x54
  41ab26:	4b7e      	ldr	r3, [pc, #504]	; (41ad20 <lv_theme_material_init+0x944>)
  41ab28:	4798      	blx	r3
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  41ab2a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  41ab2c:	2200      	movs	r2, #0
  41ab2e:	216c      	movs	r1, #108	; 0x6c
  41ab30:	3054      	adds	r0, #84	; 0x54
  41ab32:	4d7c      	ldr	r5, [pc, #496]	; (41ad24 <lv_theme_material_init+0x948>)
  41ab34:	47a8      	blx	r5
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
  41ab36:	6820      	ldr	r0, [r4, #0]
  41ab38:	22ff      	movs	r2, #255	; 0xff
  41ab3a:	f44f 71b6 	mov.w	r1, #364	; 0x16c
  41ab3e:	3054      	adds	r0, #84	; 0x54
  41ab40:	47a8      	blx	r5
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
  41ab42:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  41ab44:	226c      	movs	r2, #108	; 0x6c
  41ab46:	21b4      	movs	r1, #180	; 0xb4
  41ab48:	3054      	adds	r0, #84	; 0x54
  41ab4a:	47b8      	blx	r7
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
  41ab4c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41ab4e:	4b73      	ldr	r3, [pc, #460]	; (41ad1c <lv_theme_material_init+0x940>)
  41ab50:	691a      	ldr	r2, [r3, #16]
  41ab52:	f248 118e 	movw	r1, #33166	; 0x818e
  41ab56:	3054      	adds	r0, #84	; 0x54
  41ab58:	47b0      	blx	r6
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41ab5a:	6824      	ldr	r4, [r4, #0]
  41ab5c:	3454      	adds	r4, #84	; 0x54
  41ab5e:	2000      	movs	r0, #0
  41ab60:	4b6d      	ldr	r3, [pc, #436]	; (41ad18 <lv_theme_material_init+0x93c>)
  41ab62:	4798      	blx	r3
  41ab64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41ab68:	3050      	adds	r0, #80	; 0x50
  41ab6a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ab6e:	f281 8288 	bge.w	41c082 <lv_theme_material_init+0x1ca6>
  41ab72:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ab74:	2112      	movs	r1, #18
  41ab76:	4620      	mov	r0, r4
  41ab78:	4b65      	ldr	r3, [pc, #404]	; (41ad10 <lv_theme_material_init+0x934>)
  41ab7a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41ab7c:	4b65      	ldr	r3, [pc, #404]	; (41ad14 <lv_theme_material_init+0x938>)
  41ab7e:	681c      	ldr	r4, [r3, #0]
  41ab80:	3454      	adds	r4, #84	; 0x54
  41ab82:	2000      	movs	r0, #0
  41ab84:	4b64      	ldr	r3, [pc, #400]	; (41ad18 <lv_theme_material_init+0x93c>)
  41ab86:	4798      	blx	r3
  41ab88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41ab8c:	3050      	adds	r0, #80	; 0x50
  41ab8e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ab92:	f281 8285 	bge.w	41c0a0 <lv_theme_material_init+0x1cc4>
  41ab96:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ab98:	2113      	movs	r1, #19
  41ab9a:	4620      	mov	r0, r4
  41ab9c:	4b5c      	ldr	r3, [pc, #368]	; (41ad10 <lv_theme_material_init+0x934>)
  41ab9e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41aba0:	4b5c      	ldr	r3, [pc, #368]	; (41ad14 <lv_theme_material_init+0x938>)
  41aba2:	681c      	ldr	r4, [r3, #0]
  41aba4:	3454      	adds	r4, #84	; 0x54
  41aba6:	2000      	movs	r0, #0
  41aba8:	4b5b      	ldr	r3, [pc, #364]	; (41ad18 <lv_theme_material_init+0x93c>)
  41abaa:	4798      	blx	r3
  41abac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41abb0:	3050      	adds	r0, #80	; 0x50
  41abb2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41abb6:	f281 8282 	bge.w	41c0be <lv_theme_material_init+0x1ce2>
  41abba:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41abbc:	2110      	movs	r1, #16
  41abbe:	4620      	mov	r0, r4
  41abc0:	4b53      	ldr	r3, [pc, #332]	; (41ad10 <lv_theme_material_init+0x934>)
  41abc2:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41abc4:	4b53      	ldr	r3, [pc, #332]	; (41ad14 <lv_theme_material_init+0x938>)
  41abc6:	681c      	ldr	r4, [r3, #0]
  41abc8:	3454      	adds	r4, #84	; 0x54
  41abca:	2000      	movs	r0, #0
  41abcc:	4b52      	ldr	r3, [pc, #328]	; (41ad18 <lv_theme_material_init+0x93c>)
  41abce:	4798      	blx	r3
  41abd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41abd4:	3050      	adds	r0, #80	; 0x50
  41abd6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41abda:	f281 827f 	bge.w	41c0dc <lv_theme_material_init+0x1d00>
  41abde:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41abe0:	2111      	movs	r1, #17
  41abe2:	4620      	mov	r0, r4
  41abe4:	4d4a      	ldr	r5, [pc, #296]	; (41ad10 <lv_theme_material_init+0x934>)
  41abe6:	47a8      	blx	r5
    style_init_reset(&styles->kb_bg);
  41abe8:	4c4a      	ldr	r4, [pc, #296]	; (41ad14 <lv_theme_material_init+0x938>)
  41abea:	6820      	ldr	r0, [r4, #0]
  41abec:	306c      	adds	r0, #108	; 0x6c
  41abee:	4b4e      	ldr	r3, [pc, #312]	; (41ad28 <lv_theme_material_init+0x94c>)
  41abf0:	4798      	blx	r3
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
  41abf2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41abf4:	2200      	movs	r2, #0
  41abf6:	2101      	movs	r1, #1
  41abf8:	306c      	adds	r0, #108	; 0x6c
  41abfa:	47a8      	blx	r5
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41abfc:	6824      	ldr	r4, [r4, #0]
  41abfe:	346c      	adds	r4, #108	; 0x6c
  41ac00:	2000      	movs	r0, #0
  41ac02:	4b45      	ldr	r3, [pc, #276]	; (41ad18 <lv_theme_material_init+0x93c>)
  41ac04:	4798      	blx	r3
  41ac06:	3014      	adds	r0, #20
  41ac08:	0080      	lsls	r0, r0, #2
  41ac0a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac0e:	f281 8274 	bge.w	41c0fa <lv_theme_material_init+0x1d1e>
  41ac12:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41ac14:	2130      	movs	r1, #48	; 0x30
  41ac16:	4620      	mov	r0, r4
  41ac18:	4d3d      	ldr	r5, [pc, #244]	; (41ad10 <lv_theme_material_init+0x934>)
  41ac1a:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
  41ac1c:	4c3d      	ldr	r4, [pc, #244]	; (41ad14 <lv_theme_material_init+0x938>)
  41ac1e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41ac20:	2202      	movs	r2, #2
  41ac22:	2131      	movs	r1, #49	; 0x31
  41ac24:	306c      	adds	r0, #108	; 0x6c
  41ac26:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  41ac28:	6820      	ldr	r0, [r4, #0]
  41ac2a:	306c      	adds	r0, #108	; 0x6c
  41ac2c:	4b3b      	ldr	r3, [pc, #236]	; (41ad1c <lv_theme_material_init+0x940>)
  41ac2e:	6a1b      	ldr	r3, [r3, #32]
  41ac30:	f013 0f02 	tst.w	r3, #2
  41ac34:	f041 826f 	bne.w	41c116 <lv_theme_material_init+0x1d3a>
  41ac38:	2300      	movs	r3, #0
  41ac3a:	4619      	mov	r1, r3
  41ac3c:	461c      	mov	r4, r3
  41ac3e:	461d      	mov	r5, r3
  41ac40:	f04f 0200 	mov.w	r2, #0
  41ac44:	f365 0202 	bfi	r2, r5, #0, #3
  41ac48:	f364 02c7 	bfi	r2, r4, #3, #5
  41ac4c:	f361 220c 	bfi	r2, r1, #8, #5
  41ac50:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41ac54:	2139      	movs	r1, #57	; 0x39
  41ac56:	4d32      	ldr	r5, [pc, #200]	; (41ad20 <lv_theme_material_init+0x944>)
  41ac58:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
  41ac5a:	4c2e      	ldr	r4, [pc, #184]	; (41ad14 <lv_theme_material_init+0x938>)
  41ac5c:	6820      	ldr	r0, [r4, #0]
  41ac5e:	4b2f      	ldr	r3, [pc, #188]	; (41ad1c <lv_theme_material_init+0x940>)
  41ac60:	89da      	ldrh	r2, [r3, #14]
  41ac62:	f240 4139 	movw	r1, #1081	; 0x439
  41ac66:	306c      	adds	r0, #108	; 0x6c
  41ac68:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41ac6a:	6824      	ldr	r4, [r4, #0]
  41ac6c:	346c      	adds	r4, #108	; 0x6c
  41ac6e:	2000      	movs	r0, #0
  41ac70:	4b29      	ldr	r3, [pc, #164]	; (41ad18 <lv_theme_material_init+0x93c>)
  41ac72:	4798      	blx	r3
  41ac74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ac78:	3050      	adds	r0, #80	; 0x50
  41ac7a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac7e:	f281 8250 	bge.w	41c122 <lv_theme_material_init+0x1d46>
  41ac82:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ac84:	2112      	movs	r1, #18
  41ac86:	4620      	mov	r0, r4
  41ac88:	4b21      	ldr	r3, [pc, #132]	; (41ad10 <lv_theme_material_init+0x934>)
  41ac8a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41ac8c:	4b21      	ldr	r3, [pc, #132]	; (41ad14 <lv_theme_material_init+0x938>)
  41ac8e:	681c      	ldr	r4, [r3, #0]
  41ac90:	346c      	adds	r4, #108	; 0x6c
  41ac92:	2000      	movs	r0, #0
  41ac94:	4b20      	ldr	r3, [pc, #128]	; (41ad18 <lv_theme_material_init+0x93c>)
  41ac96:	4798      	blx	r3
  41ac98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ac9c:	3050      	adds	r0, #80	; 0x50
  41ac9e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aca2:	f281 824d 	bge.w	41c140 <lv_theme_material_init+0x1d64>
  41aca6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41aca8:	2113      	movs	r1, #19
  41acaa:	4620      	mov	r0, r4
  41acac:	4b18      	ldr	r3, [pc, #96]	; (41ad10 <lv_theme_material_init+0x934>)
  41acae:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41acb0:	4b18      	ldr	r3, [pc, #96]	; (41ad14 <lv_theme_material_init+0x938>)
  41acb2:	681c      	ldr	r4, [r3, #0]
  41acb4:	346c      	adds	r4, #108	; 0x6c
  41acb6:	2000      	movs	r0, #0
  41acb8:	4b17      	ldr	r3, [pc, #92]	; (41ad18 <lv_theme_material_init+0x93c>)
  41acba:	4798      	blx	r3
  41acbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41acc0:	3050      	adds	r0, #80	; 0x50
  41acc2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41acc6:	f281 824a 	bge.w	41c15e <lv_theme_material_init+0x1d82>
  41acca:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41accc:	2110      	movs	r1, #16
  41acce:	4620      	mov	r0, r4
  41acd0:	4b0f      	ldr	r3, [pc, #60]	; (41ad10 <lv_theme_material_init+0x934>)
  41acd2:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41acd4:	4b0f      	ldr	r3, [pc, #60]	; (41ad14 <lv_theme_material_init+0x938>)
  41acd6:	681c      	ldr	r4, [r3, #0]
  41acd8:	346c      	adds	r4, #108	; 0x6c
  41acda:	2000      	movs	r0, #0
  41acdc:	4b0e      	ldr	r3, [pc, #56]	; (41ad18 <lv_theme_material_init+0x93c>)
  41acde:	4798      	blx	r3
  41ace0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ace4:	3050      	adds	r0, #80	; 0x50
  41ace6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41acea:	f281 8247 	bge.w	41c17c <lv_theme_material_init+0x1da0>
  41acee:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41acf0:	2111      	movs	r1, #17
  41acf2:	4620      	mov	r0, r4
  41acf4:	4b06      	ldr	r3, [pc, #24]	; (41ad10 <lv_theme_material_init+0x934>)
  41acf6:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  41acf8:	4b06      	ldr	r3, [pc, #24]	; (41ad14 <lv_theme_material_init+0x938>)
  41acfa:	681c      	ldr	r4, [r3, #0]
  41acfc:	346c      	adds	r4, #108	; 0x6c
  41acfe:	2000      	movs	r0, #0
  41ad00:	4b05      	ldr	r3, [pc, #20]	; (41ad18 <lv_theme_material_init+0x93c>)
  41ad02:	4798      	blx	r3
  41ad04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41ad08:	3050      	adds	r0, #80	; 0x50
  41ad0a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ad0e:	e013      	b.n	41ad38 <lv_theme_material_init+0x95c>
  41ad10:	004098e5 	.word	0x004098e5
  41ad14:	20414758 	.word	0x20414758
  41ad18:	004140fd 	.word	0x004140fd
  41ad1c:	2041475c 	.word	0x2041475c
  41ad20:	00409a45 	.word	0x00409a45
  41ad24:	00409ba5 	.word	0x00409ba5
  41ad28:	00417d2d 	.word	0x00417d2d
  41ad2c:	004306c4 	.word	0x004306c4
  41ad30:	00409cf1 	.word	0x00409cf1
  41ad34:	004306bc 	.word	0x004306bc
  41ad38:	f281 822f 	bge.w	41c19a <lv_theme_material_init+0x1dbe>
  41ad3c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41ad3e:	2114      	movs	r1, #20
  41ad40:	4620      	mov	r0, r4
  41ad42:	4bb1      	ldr	r3, [pc, #708]	; (41b008 <lv_theme_material_init+0xc2c>)
  41ad44:	4798      	blx	r3
    style_init_reset(&styles->mbox_bg);
  41ad46:	4cb1      	ldr	r4, [pc, #708]	; (41b00c <lv_theme_material_init+0xc30>)
  41ad48:	6820      	ldr	r0, [r4, #0]
  41ad4a:	3080      	adds	r0, #128	; 0x80
  41ad4c:	4bb0      	ldr	r3, [pc, #704]	; (41b010 <lv_theme_material_init+0xc34>)
  41ad4e:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  41ad50:	6824      	ldr	r4, [r4, #0]
  41ad52:	3480      	adds	r4, #128	; 0x80
  41ad54:	2000      	movs	r0, #0
  41ad56:	4baf      	ldr	r3, [pc, #700]	; (41b014 <lv_theme_material_init+0xc38>)
  41ad58:	4798      	blx	r3
  41ad5a:	2332      	movs	r3, #50	; 0x32
  41ad5c:	fb03 f000 	mul.w	r0, r3, r0
  41ad60:	3050      	adds	r0, #80	; 0x50
  41ad62:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ad66:	f281 8227 	bge.w	41c1b8 <lv_theme_material_init+0x1ddc>
  41ad6a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41ad6c:	2150      	movs	r1, #80	; 0x50
  41ad6e:	4620      	mov	r0, r4
  41ad70:	4ba5      	ldr	r3, [pc, #660]	; (41b008 <lv_theme_material_init+0xc2c>)
  41ad72:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  41ad74:	4ba5      	ldr	r3, [pc, #660]	; (41b00c <lv_theme_material_init+0xc30>)
  41ad76:	6818      	ldr	r0, [r3, #0]
  41ad78:	4ba7      	ldr	r3, [pc, #668]	; (41b018 <lv_theme_material_init+0xc3c>)
  41ad7a:	6a1b      	ldr	r3, [r3, #32]
  41ad7c:	f013 0302 	ands.w	r3, r3, #2
  41ad80:	bf0c      	ite	eq
  41ad82:	2406      	moveq	r4, #6
  41ad84:	2400      	movne	r4, #0
  41ad86:	2b00      	cmp	r3, #0
  41ad88:	bf0b      	itete	eq
  41ad8a:	2113      	moveq	r1, #19
  41ad8c:	2118      	movne	r1, #24
  41ad8e:	2304      	moveq	r3, #4
  41ad90:	2306      	movne	r3, #6
  41ad92:	f04f 0200 	mov.w	r2, #0
  41ad96:	f363 0202 	bfi	r2, r3, #0, #3
  41ad9a:	f361 02c7 	bfi	r2, r1, #3, #5
  41ad9e:	f361 220c 	bfi	r2, r1, #8, #5
  41ada2:	f364 324f 	bfi	r2, r4, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41ada6:	2159      	movs	r1, #89	; 0x59
  41ada8:	3080      	adds	r0, #128	; 0x80
  41adaa:	4b9c      	ldr	r3, [pc, #624]	; (41b01c <lv_theme_material_init+0xc40>)
  41adac:	4798      	blx	r3
    style_init_reset(&styles->sb);
  41adae:	4c97      	ldr	r4, [pc, #604]	; (41b00c <lv_theme_material_init+0xc30>)
  41adb0:	6820      	ldr	r0, [r4, #0]
  41adb2:	3084      	adds	r0, #132	; 0x84
  41adb4:	4b96      	ldr	r3, [pc, #600]	; (41b010 <lv_theme_material_init+0xc34>)
  41adb6:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
  41adb8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41adba:	22ff      	movs	r2, #255	; 0xff
  41adbc:	212c      	movs	r1, #44	; 0x2c
  41adbe:	3084      	adds	r0, #132	; 0x84
  41adc0:	4b97      	ldr	r3, [pc, #604]	; (41b020 <lv_theme_material_init+0xc44>)
  41adc2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
  41adc4:	6820      	ldr	r0, [r4, #0]
  41adc6:	4b94      	ldr	r3, [pc, #592]	; (41b018 <lv_theme_material_init+0xc3c>)
  41adc8:	6a1b      	ldr	r3, [r3, #32]
  41adca:	f013 0302 	ands.w	r3, r3, #2
  41adce:	bf14      	ite	ne
  41add0:	2103      	movne	r1, #3
  41add2:	2107      	moveq	r1, #7
  41add4:	2b00      	cmp	r3, #0
  41add6:	bf15      	itete	ne
  41add8:	241a      	movne	r4, #26
  41adda:	2410      	moveq	r4, #16
  41addc:	2519      	movne	r5, #25
  41adde:	250e      	moveq	r5, #14
  41ade0:	bf14      	ite	ne
  41ade2:	2306      	movne	r3, #6
  41ade4:	2303      	moveq	r3, #3
  41ade6:	f04f 0200 	mov.w	r2, #0
  41adea:	f363 0202 	bfi	r2, r3, #0, #3
  41adee:	f365 02c7 	bfi	r2, r5, #3, #5
  41adf2:	f364 220c 	bfi	r2, r4, #8, #5
  41adf6:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41adfa:	2129      	movs	r1, #41	; 0x29
  41adfc:	3084      	adds	r0, #132	; 0x84
  41adfe:	4b87      	ldr	r3, [pc, #540]	; (41b01c <lv_theme_material_init+0xc40>)
  41ae00:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41ae02:	4c82      	ldr	r4, [pc, #520]	; (41b00c <lv_theme_material_init+0xc30>)
  41ae04:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41ae06:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41ae0a:	2101      	movs	r1, #1
  41ae0c:	3084      	adds	r0, #132	; 0x84
  41ae0e:	4b7e      	ldr	r3, [pc, #504]	; (41b008 <lv_theme_material_init+0xc2c>)
  41ae10:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  41ae12:	6824      	ldr	r4, [r4, #0]
  41ae14:	3484      	adds	r4, #132	; 0x84
  41ae16:	2000      	movs	r0, #0
  41ae18:	4b7e      	ldr	r3, [pc, #504]	; (41b014 <lv_theme_material_init+0xc38>)
  41ae1a:	4798      	blx	r3
  41ae1c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ae20:	3050      	adds	r0, #80	; 0x50
  41ae22:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ae26:	f281 81d7 	bge.w	41c1d8 <lv_theme_material_init+0x1dfc>
  41ae2a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41ae2c:	2103      	movs	r1, #3
  41ae2e:	4620      	mov	r0, r4
  41ae30:	4b75      	ldr	r3, [pc, #468]	; (41b008 <lv_theme_material_init+0xc2c>)
  41ae32:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41ae34:	4b75      	ldr	r3, [pc, #468]	; (41b00c <lv_theme_material_init+0xc30>)
  41ae36:	681c      	ldr	r4, [r3, #0]
  41ae38:	3484      	adds	r4, #132	; 0x84
  41ae3a:	2000      	movs	r0, #0
  41ae3c:	4b75      	ldr	r3, [pc, #468]	; (41b014 <lv_theme_material_init+0xc38>)
  41ae3e:	4798      	blx	r3
  41ae40:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ae44:	3050      	adds	r0, #80	; 0x50
  41ae46:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ae4a:	f281 81d4 	bge.w	41c1f6 <lv_theme_material_init+0x1e1a>
  41ae4e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ae50:	2113      	movs	r1, #19
  41ae52:	4620      	mov	r0, r4
  41ae54:	4b6c      	ldr	r3, [pc, #432]	; (41b008 <lv_theme_material_init+0xc2c>)
  41ae56:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41ae58:	4b6c      	ldr	r3, [pc, #432]	; (41b00c <lv_theme_material_init+0xc30>)
  41ae5a:	681c      	ldr	r4, [r3, #0]
  41ae5c:	3484      	adds	r4, #132	; 0x84
  41ae5e:	2000      	movs	r0, #0
  41ae60:	4b6c      	ldr	r3, [pc, #432]	; (41b014 <lv_theme_material_init+0xc38>)
  41ae62:	4798      	blx	r3
  41ae64:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ae68:	3050      	adds	r0, #80	; 0x50
  41ae6a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ae6e:	f281 81d1 	bge.w	41c214 <lv_theme_material_init+0x1e38>
  41ae72:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ae74:	2111      	movs	r1, #17
  41ae76:	4620      	mov	r0, r4
  41ae78:	4b63      	ldr	r3, [pc, #396]	; (41b008 <lv_theme_material_init+0xc2c>)
  41ae7a:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
  41ae7c:	4c63      	ldr	r4, [pc, #396]	; (41b00c <lv_theme_material_init+0xc30>)
  41ae7e:	6820      	ldr	r0, [r4, #0]
  41ae80:	3088      	adds	r0, #136	; 0x88
  41ae82:	4d63      	ldr	r5, [pc, #396]	; (41b010 <lv_theme_material_init+0xc34>)
  41ae84:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
  41ae86:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41ae88:	22ff      	movs	r2, #255	; 0xff
  41ae8a:	212c      	movs	r1, #44	; 0x2c
  41ae8c:	3088      	adds	r0, #136	; 0x88
  41ae8e:	4b64      	ldr	r3, [pc, #400]	; (41b020 <lv_theme_material_init+0xc44>)
  41ae90:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
  41ae92:	6820      	ldr	r0, [r4, #0]
  41ae94:	f04f 0200 	mov.w	r2, #0
  41ae98:	2304      	movs	r3, #4
  41ae9a:	f363 0202 	bfi	r2, r3, #0, #3
  41ae9e:	2311      	movs	r3, #17
  41aea0:	f363 02c7 	bfi	r2, r3, #3, #5
  41aea4:	f363 220c 	bfi	r2, r3, #8, #5
  41aea8:	2302      	movs	r3, #2
  41aeaa:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41aeae:	2129      	movs	r1, #41	; 0x29
  41aeb0:	3088      	adds	r0, #136	; 0x88
  41aeb2:	4b5a      	ldr	r3, [pc, #360]	; (41b01c <lv_theme_material_init+0xc40>)
  41aeb4:	4798      	blx	r3
    style_init_reset(&styles->ta_cursor);
  41aeb6:	6820      	ldr	r0, [r4, #0]
  41aeb8:	30b8      	adds	r0, #184	; 0xb8
  41aeba:	47a8      	blx	r5
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41aebc:	6820      	ldr	r0, [r4, #0]
  41aebe:	4b56      	ldr	r3, [pc, #344]	; (41b018 <lv_theme_material_init+0xc3c>)
  41aec0:	6a1b      	ldr	r3, [r3, #32]
  41aec2:	f013 0302 	ands.w	r3, r3, #2
  41aec6:	bf14      	ite	ne
  41aec8:	2100      	movne	r1, #0
  41aeca:	2102      	moveq	r1, #2
  41aecc:	2b00      	cmp	r3, #0
  41aece:	bf15      	itete	ne
  41aed0:	2409      	movne	r4, #9
  41aed2:	2415      	moveq	r4, #21
  41aed4:	2506      	movne	r5, #6
  41aed6:	2514      	moveq	r5, #20
  41aed8:	bf14      	ite	ne
  41aeda:	2302      	movne	r3, #2
  41aedc:	2305      	moveq	r3, #5
  41aede:	f04f 0200 	mov.w	r2, #0
  41aee2:	f363 0202 	bfi	r2, r3, #0, #3
  41aee6:	f365 02c7 	bfi	r2, r5, #3, #5
  41aeea:	f364 220c 	bfi	r2, r4, #8, #5
  41aeee:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41aef2:	2139      	movs	r1, #57	; 0x39
  41aef4:	30b8      	adds	r0, #184	; 0xb8
  41aef6:	4b49      	ldr	r3, [pc, #292]	; (41b01c <lv_theme_material_init+0xc40>)
  41aef8:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  41aefa:	4b44      	ldr	r3, [pc, #272]	; (41b00c <lv_theme_material_init+0xc30>)
  41aefc:	681c      	ldr	r4, [r3, #0]
  41aefe:	34b8      	adds	r4, #184	; 0xb8
  41af00:	2000      	movs	r0, #0
  41af02:	4b44      	ldr	r3, [pc, #272]	; (41b014 <lv_theme_material_init+0xc38>)
  41af04:	4798      	blx	r3
  41af06:	3028      	adds	r0, #40	; 0x28
  41af08:	0040      	lsls	r0, r0, #1
  41af0a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41af0e:	f281 8190 	bge.w	41c232 <lv_theme_material_init+0x1e56>
  41af12:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41af14:	2130      	movs	r1, #48	; 0x30
  41af16:	4620      	mov	r0, r4
  41af18:	4b3b      	ldr	r3, [pc, #236]	; (41b008 <lv_theme_material_init+0xc2c>)
  41af1a:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  41af1c:	4b3b      	ldr	r3, [pc, #236]	; (41b00c <lv_theme_material_init+0xc30>)
  41af1e:	681c      	ldr	r4, [r3, #0]
  41af20:	34b8      	adds	r4, #184	; 0xb8
  41af22:	2000      	movs	r0, #0
  41af24:	4b3b      	ldr	r3, [pc, #236]	; (41b014 <lv_theme_material_init+0xc38>)
  41af26:	4798      	blx	r3
  41af28:	3050      	adds	r0, #80	; 0x50
  41af2a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41af2e:	f281 818e 	bge.w	41c24e <lv_theme_material_init+0x1e72>
  41af32:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41af34:	2112      	movs	r1, #18
  41af36:	4620      	mov	r0, r4
  41af38:	4d33      	ldr	r5, [pc, #204]	; (41b008 <lv_theme_material_init+0xc2c>)
  41af3a:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
  41af3c:	4c33      	ldr	r4, [pc, #204]	; (41b00c <lv_theme_material_init+0xc30>)
  41af3e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41af40:	2204      	movs	r2, #4
  41af42:	2131      	movs	r1, #49	; 0x31
  41af44:	30b8      	adds	r0, #184	; 0xb8
  41af46:	47a8      	blx	r5
    style_init_reset(&styles->ta_placeholder);
  41af48:	6820      	ldr	r0, [r4, #0]
  41af4a:	30bc      	adds	r0, #188	; 0xbc
  41af4c:	4b30      	ldr	r3, [pc, #192]	; (41b010 <lv_theme_material_init+0xc34>)
  41af4e:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  41af50:	6820      	ldr	r0, [r4, #0]
  41af52:	30bc      	adds	r0, #188	; 0xbc
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  41af54:	4b30      	ldr	r3, [pc, #192]	; (41b018 <lv_theme_material_init+0xc3c>)
  41af56:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  41af58:	f013 0f02 	tst.w	r3, #2
  41af5c:	f041 8184 	bne.w	41c268 <lv_theme_material_init+0x1e8c>
  41af60:	2103      	movs	r1, #3
  41af62:	2317      	movs	r3, #23
  41af64:	2414      	movs	r4, #20
  41af66:	f04f 0200 	mov.w	r2, #0
  41af6a:	2505      	movs	r5, #5
  41af6c:	f365 0202 	bfi	r2, r5, #0, #3
  41af70:	f364 02c7 	bfi	r2, r4, #3, #5
  41af74:	f363 220c 	bfi	r2, r3, #8, #5
  41af78:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41af7c:	f248 0189 	movw	r1, #32905	; 0x8089
  41af80:	4d26      	ldr	r5, [pc, #152]	; (41b01c <lv_theme_material_init+0xc40>)
  41af82:	47a8      	blx	r5
    style_init_reset(&styles->spinbox_cursor);
  41af84:	4c21      	ldr	r4, [pc, #132]	; (41b00c <lv_theme_material_init+0xc30>)
  41af86:	6820      	ldr	r0, [r4, #0]
  41af88:	309c      	adds	r0, #156	; 0x9c
  41af8a:	4b21      	ldr	r3, [pc, #132]	; (41b010 <lv_theme_material_init+0xc34>)
  41af8c:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
  41af8e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41af90:	22ff      	movs	r2, #255	; 0xff
  41af92:	212c      	movs	r1, #44	; 0x2c
  41af94:	309c      	adds	r0, #156	; 0x9c
  41af96:	4b22      	ldr	r3, [pc, #136]	; (41b020 <lv_theme_material_init+0xc44>)
  41af98:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
  41af9a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41af9c:	4b1e      	ldr	r3, [pc, #120]	; (41b018 <lv_theme_material_init+0xc3c>)
  41af9e:	899a      	ldrh	r2, [r3, #12]
  41afa0:	2129      	movs	r1, #41	; 0x29
  41afa2:	309c      	adds	r0, #156	; 0x9c
  41afa4:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41afa6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41afa8:	4b1e      	ldr	r3, [pc, #120]	; (41b024 <lv_theme_material_init+0xc48>)
  41afaa:	881a      	ldrh	r2, [r3, #0]
  41afac:	f248 0189 	movw	r1, #32905	; 0x8089
  41afb0:	309c      	adds	r0, #156	; 0x9c
  41afb2:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41afb4:	6824      	ldr	r4, [r4, #0]
  41afb6:	349c      	adds	r4, #156	; 0x9c
  41afb8:	2000      	movs	r0, #0
  41afba:	4b16      	ldr	r3, [pc, #88]	; (41b014 <lv_theme_material_init+0xc38>)
  41afbc:	4798      	blx	r3
  41afbe:	2364      	movs	r3, #100	; 0x64
  41afc0:	fb03 f000 	mul.w	r0, r3, r0
  41afc4:	3050      	adds	r0, #80	; 0x50
  41afc6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41afca:	f281 8152 	bge.w	41c272 <lv_theme_material_init+0x1e96>
  41afce:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41afd0:	2110      	movs	r1, #16
  41afd2:	4620      	mov	r0, r4
  41afd4:	4b0c      	ldr	r3, [pc, #48]	; (41b008 <lv_theme_material_init+0xc2c>)
  41afd6:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41afd8:	4b0c      	ldr	r3, [pc, #48]	; (41b00c <lv_theme_material_init+0xc30>)
  41afda:	681c      	ldr	r4, [r3, #0]
  41afdc:	349c      	adds	r4, #156	; 0x9c
  41afde:	2000      	movs	r0, #0
  41afe0:	4b0c      	ldr	r3, [pc, #48]	; (41b014 <lv_theme_material_init+0xc38>)
  41afe2:	4798      	blx	r3
  41afe4:	2364      	movs	r3, #100	; 0x64
  41afe6:	fb03 f000 	mul.w	r0, r3, r0
  41afea:	3050      	adds	r0, #80	; 0x50
  41afec:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aff0:	f281 814f 	bge.w	41c292 <lv_theme_material_init+0x1eb6>
  41aff4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41aff6:	2111      	movs	r1, #17
  41aff8:	4620      	mov	r0, r4
  41affa:	4d03      	ldr	r5, [pc, #12]	; (41b008 <lv_theme_material_init+0xc2c>)
  41affc:	47a8      	blx	r5
    style_init_reset(&styles->list_bg);
  41affe:	4c03      	ldr	r4, [pc, #12]	; (41b00c <lv_theme_material_init+0xc30>)
  41b000:	6820      	ldr	r0, [r4, #0]
  41b002:	3078      	adds	r0, #120	; 0x78
  41b004:	e010      	b.n	41b028 <lv_theme_material_init+0xc4c>
  41b006:	bf00      	nop
  41b008:	004098e5 	.word	0x004098e5
  41b00c:	20414758 	.word	0x20414758
  41b010:	00417d2d 	.word	0x00417d2d
  41b014:	004140fd 	.word	0x004140fd
  41b018:	2041475c 	.word	0x2041475c
  41b01c:	00409a45 	.word	0x00409a45
  41b020:	00409ba5 	.word	0x00409ba5
  41b024:	004306bc 	.word	0x004306bc
  41b028:	4eb8      	ldr	r6, [pc, #736]	; (41b30c <lv_theme_material_init+0xf30>)
  41b02a:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
  41b02c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41b02e:	2201      	movs	r2, #1
  41b030:	2102      	movs	r1, #2
  41b032:	3078      	adds	r0, #120	; 0x78
  41b034:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41b036:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b038:	2200      	movs	r2, #0
  41b03a:	2112      	movs	r1, #18
  41b03c:	3078      	adds	r0, #120	; 0x78
  41b03e:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41b040:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b042:	2200      	movs	r2, #0
  41b044:	2113      	movs	r1, #19
  41b046:	3078      	adds	r0, #120	; 0x78
  41b048:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41b04a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b04c:	2200      	movs	r2, #0
  41b04e:	2110      	movs	r1, #16
  41b050:	3078      	adds	r0, #120	; 0x78
  41b052:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41b054:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b056:	2200      	movs	r2, #0
  41b058:	2111      	movs	r1, #17
  41b05a:	3078      	adds	r0, #120	; 0x78
  41b05c:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41b05e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b060:	2200      	movs	r2, #0
  41b062:	2114      	movs	r1, #20
  41b064:	3078      	adds	r0, #120	; 0x78
  41b066:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
  41b068:	6820      	ldr	r0, [r4, #0]
  41b06a:	307c      	adds	r0, #124	; 0x7c
  41b06c:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b06e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b070:	22ff      	movs	r2, #255	; 0xff
  41b072:	212c      	movs	r1, #44	; 0x2c
  41b074:	307c      	adds	r0, #124	; 0x7c
  41b076:	4ba6      	ldr	r3, [pc, #664]	; (41b310 <lv_theme_material_init+0xf34>)
  41b078:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
  41b07a:	6820      	ldr	r0, [r4, #0]
  41b07c:	307c      	adds	r0, #124	; 0x7c
  41b07e:	4ba5      	ldr	r3, [pc, #660]	; (41b314 <lv_theme_material_init+0xf38>)
  41b080:	6a1b      	ldr	r3, [r3, #32]
  41b082:	f013 0f02 	tst.w	r3, #2
  41b086:	f041 8114 	bne.w	41c2b2 <lv_theme_material_init+0x1ed6>
  41b08a:	2300      	movs	r3, #0
  41b08c:	210e      	movs	r1, #14
  41b08e:	240b      	movs	r4, #11
  41b090:	2503      	movs	r5, #3
  41b092:	f04f 0200 	mov.w	r2, #0
  41b096:	f365 0202 	bfi	r2, r5, #0, #3
  41b09a:	f364 02c7 	bfi	r2, r4, #3, #5
  41b09e:	f361 220c 	bfi	r2, r1, #8, #5
  41b0a2:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b0a6:	2129      	movs	r1, #41	; 0x29
  41b0a8:	4b9b      	ldr	r3, [pc, #620]	; (41b318 <lv_theme_material_init+0xf3c>)
  41b0aa:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
  41b0ac:	4b9b      	ldr	r3, [pc, #620]	; (41b31c <lv_theme_material_init+0xf40>)
  41b0ae:	6818      	ldr	r0, [r3, #0]
  41b0b0:	307c      	adds	r0, #124	; 0x7c
  41b0b2:	4b98      	ldr	r3, [pc, #608]	; (41b314 <lv_theme_material_init+0xf38>)
  41b0b4:	6a1b      	ldr	r3, [r3, #32]
  41b0b6:	f013 0f02 	tst.w	r3, #2
  41b0ba:	f041 8100 	bne.w	41c2be <lv_theme_material_init+0x1ee2>
  41b0be:	230a      	movs	r3, #10
  41b0c0:	2109      	movs	r1, #9
  41b0c2:	2402      	movs	r4, #2
  41b0c4:	f04f 0200 	mov.w	r2, #0
  41b0c8:	f364 0202 	bfi	r2, r4, #0, #3
  41b0cc:	f361 02c7 	bfi	r2, r1, #3, #5
  41b0d0:	f363 220c 	bfi	r2, r3, #8, #5
  41b0d4:	2303      	movs	r3, #3
  41b0d6:	f363 324f 	bfi	r2, r3, #13, #3
  41b0da:	f241 0129 	movw	r1, #4137	; 0x1029
  41b0de:	4b8e      	ldr	r3, [pc, #568]	; (41b318 <lv_theme_material_init+0xf3c>)
  41b0e0:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
  41b0e2:	4b8e      	ldr	r3, [pc, #568]	; (41b31c <lv_theme_material_init+0xf40>)
  41b0e4:	6818      	ldr	r0, [r3, #0]
  41b0e6:	307c      	adds	r0, #124	; 0x7c
  41b0e8:	4b8a      	ldr	r3, [pc, #552]	; (41b314 <lv_theme_material_init+0xf38>)
  41b0ea:	6a1b      	ldr	r3, [r3, #32]
  41b0ec:	f013 0f02 	tst.w	r3, #2
  41b0f0:	f041 80ea 	bne.w	41c2c8 <lv_theme_material_init+0x1eec>
  41b0f4:	2300      	movs	r3, #0
  41b0f6:	210e      	movs	r1, #14
  41b0f8:	240b      	movs	r4, #11
  41b0fa:	2503      	movs	r5, #3
  41b0fc:	f04f 0200 	mov.w	r2, #0
  41b100:	f365 0202 	bfi	r2, r5, #0, #3
  41b104:	f364 02c7 	bfi	r2, r4, #3, #5
  41b108:	f361 220c 	bfi	r2, r1, #8, #5
  41b10c:	f363 324f 	bfi	r2, r3, #13, #3
  41b110:	f242 0129 	movw	r1, #8233	; 0x2029
  41b114:	4d80      	ldr	r5, [pc, #512]	; (41b318 <lv_theme_material_init+0xf3c>)
  41b116:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
  41b118:	4c80      	ldr	r4, [pc, #512]	; (41b31c <lv_theme_material_init+0xf40>)
  41b11a:	6820      	ldr	r0, [r4, #0]
  41b11c:	4f7d      	ldr	r7, [pc, #500]	; (41b314 <lv_theme_material_init+0xf38>)
  41b11e:	89ba      	ldrh	r2, [r7, #12]
  41b120:	f240 1129 	movw	r1, #297	; 0x129
  41b124:	307c      	adds	r0, #124	; 0x7c
  41b126:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
  41b128:	6826      	ldr	r6, [r4, #0]
  41b12a:	367c      	adds	r6, #124	; 0x7c
  41b12c:	2133      	movs	r1, #51	; 0x33
  41b12e:	89b8      	ldrh	r0, [r7, #12]
  41b130:	4b7b      	ldr	r3, [pc, #492]	; (41b320 <lv_theme_material_init+0xf44>)
  41b132:	4798      	blx	r3
  41b134:	4602      	mov	r2, r0
  41b136:	f241 1129 	movw	r1, #4393	; 0x1129
  41b13a:	4630      	mov	r0, r6
  41b13c:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41b13e:	6820      	ldr	r0, [r4, #0]
  41b140:	307c      	adds	r0, #124	; 0x7c
  41b142:	6a3b      	ldr	r3, [r7, #32]
  41b144:	f013 0f02 	tst.w	r3, #2
  41b148:	f041 80c4 	bne.w	41c2d4 <lv_theme_material_init+0x1ef8>
  41b14c:	231f      	movs	r3, #31
  41b14e:	4619      	mov	r1, r3
  41b150:	2407      	movs	r4, #7
  41b152:	f04f 0200 	mov.w	r2, #0
  41b156:	f364 0202 	bfi	r2, r4, #0, #3
  41b15a:	f361 02c7 	bfi	r2, r1, #3, #5
  41b15e:	f363 220c 	bfi	r2, r3, #8, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b162:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b166:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b16a:	f248 0189 	movw	r1, #32905	; 0x8089
  41b16e:	4d6a      	ldr	r5, [pc, #424]	; (41b318 <lv_theme_material_init+0xf3c>)
  41b170:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41b172:	4c6a      	ldr	r4, [pc, #424]	; (41b31c <lv_theme_material_init+0xf40>)
  41b174:	6820      	ldr	r0, [r4, #0]
  41b176:	f04f 32ff 	mov.w	r2, #4294967295
  41b17a:	f248 1189 	movw	r1, #33161	; 0x8189
  41b17e:	307c      	adds	r0, #124	; 0x7c
  41b180:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41b182:	6820      	ldr	r0, [r4, #0]
  41b184:	4b63      	ldr	r3, [pc, #396]	; (41b314 <lv_theme_material_init+0xf38>)
  41b186:	6a1b      	ldr	r3, [r3, #32]
  41b188:	f013 0302 	ands.w	r3, r3, #2
  41b18c:	bf14      	ite	ne
  41b18e:	2402      	movne	r4, #2
  41b190:	2406      	moveq	r4, #6
  41b192:	2b00      	cmp	r3, #0
  41b194:	bf15      	itete	ne
  41b196:	2115      	movne	r1, #21
  41b198:	2113      	moveq	r1, #19
  41b19a:	2305      	movne	r3, #5
  41b19c:	2304      	moveq	r3, #4
  41b19e:	f04f 0200 	mov.w	r2, #0
  41b1a2:	f363 0202 	bfi	r2, r3, #0, #3
  41b1a6:	f361 02c7 	bfi	r2, r1, #3, #5
  41b1aa:	f361 220c 	bfi	r2, r1, #8, #5
  41b1ae:	f364 324f 	bfi	r2, r4, #13, #3
  41b1b2:	f24a 0189 	movw	r1, #41097	; 0xa089
  41b1b6:	307c      	adds	r0, #124	; 0x7c
  41b1b8:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41b1ba:	4b58      	ldr	r3, [pc, #352]	; (41b31c <lv_theme_material_init+0xf40>)
  41b1bc:	6818      	ldr	r0, [r3, #0]
  41b1be:	307c      	adds	r0, #124	; 0x7c
  41b1c0:	4b54      	ldr	r3, [pc, #336]	; (41b314 <lv_theme_material_init+0xf38>)
  41b1c2:	6a1b      	ldr	r3, [r3, #32]
  41b1c4:	f013 0f02 	tst.w	r3, #2
  41b1c8:	f041 8089 	bne.w	41c2de <lv_theme_material_init+0x1f02>
  41b1cc:	231f      	movs	r3, #31
  41b1ce:	4619      	mov	r1, r3
  41b1d0:	2407      	movs	r4, #7
  41b1d2:	f04f 0200 	mov.w	r2, #0
  41b1d6:	f364 0202 	bfi	r2, r4, #0, #3
  41b1da:	f361 02c7 	bfi	r2, r1, #3, #5
  41b1de:	f363 220c 	bfi	r2, r3, #8, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b1e2:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b1e6:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b1ea:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41b1ee:	4d4a      	ldr	r5, [pc, #296]	; (41b318 <lv_theme_material_init+0xf3c>)
  41b1f0:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41b1f2:	4c4a      	ldr	r4, [pc, #296]	; (41b31c <lv_theme_material_init+0xf40>)
  41b1f4:	6820      	ldr	r0, [r4, #0]
  41b1f6:	f04f 32ff 	mov.w	r2, #4294967295
  41b1fa:	f248 11a9 	movw	r1, #33193	; 0x81a9
  41b1fe:	307c      	adds	r0, #124	; 0x7c
  41b200:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41b202:	6820      	ldr	r0, [r4, #0]
  41b204:	4b43      	ldr	r3, [pc, #268]	; (41b314 <lv_theme_material_init+0xf38>)
  41b206:	6a1b      	ldr	r3, [r3, #32]
  41b208:	f013 0302 	ands.w	r3, r3, #2
  41b20c:	bf14      	ite	ne
  41b20e:	2402      	movne	r4, #2
  41b210:	2406      	moveq	r4, #6
  41b212:	2b00      	cmp	r3, #0
  41b214:	bf15      	itete	ne
  41b216:	2115      	movne	r1, #21
  41b218:	2113      	moveq	r1, #19
  41b21a:	2305      	movne	r3, #5
  41b21c:	2304      	moveq	r3, #4
  41b21e:	f04f 0200 	mov.w	r2, #0
  41b222:	f363 0202 	bfi	r2, r3, #0, #3
  41b226:	f361 02c7 	bfi	r2, r1, #3, #5
  41b22a:	f361 220c 	bfi	r2, r1, #8, #5
  41b22e:	f364 324f 	bfi	r2, r4, #13, #3
  41b232:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41b236:	307c      	adds	r0, #124	; 0x7c
  41b238:	47a8      	blx	r5
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
  41b23a:	4c38      	ldr	r4, [pc, #224]	; (41b31c <lv_theme_material_init+0xf40>)
  41b23c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41b23e:	2201      	movs	r2, #1
  41b240:	2131      	movs	r1, #49	; 0x31
  41b242:	307c      	adds	r0, #124	; 0x7c
  41b244:	4b37      	ldr	r3, [pc, #220]	; (41b324 <lv_theme_material_init+0xf48>)
  41b246:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41b248:	6820      	ldr	r0, [r4, #0]
  41b24a:	4b32      	ldr	r3, [pc, #200]	; (41b314 <lv_theme_material_init+0xf38>)
  41b24c:	6a1b      	ldr	r3, [r3, #32]
  41b24e:	f013 0302 	ands.w	r3, r3, #2
  41b252:	bf14      	ite	ne
  41b254:	2107      	movne	r1, #7
  41b256:	2102      	moveq	r1, #2
  41b258:	2b00      	cmp	r3, #0
  41b25a:	bf15      	itete	ne
  41b25c:	241c      	movne	r4, #28
  41b25e:	2412      	moveq	r4, #18
  41b260:	251a      	movne	r5, #26
  41b262:	2510      	moveq	r5, #16
  41b264:	bf14      	ite	ne
  41b266:	2306      	movne	r3, #6
  41b268:	2304      	moveq	r3, #4
  41b26a:	f04f 0200 	mov.w	r2, #0
  41b26e:	f363 0202 	bfi	r2, r3, #0, #3
  41b272:	f365 02c7 	bfi	r2, r5, #3, #5
  41b276:	f364 220c 	bfi	r2, r4, #8, #5
  41b27a:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b27e:	2139      	movs	r1, #57	; 0x39
  41b280:	307c      	adds	r0, #124	; 0x7c
  41b282:	4d25      	ldr	r5, [pc, #148]	; (41b318 <lv_theme_material_init+0xf3c>)
  41b284:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
  41b286:	4c25      	ldr	r4, [pc, #148]	; (41b31c <lv_theme_material_init+0xf40>)
  41b288:	6820      	ldr	r0, [r4, #0]
  41b28a:	4e22      	ldr	r6, [pc, #136]	; (41b314 <lv_theme_material_init+0xf38>)
  41b28c:	89b2      	ldrh	r2, [r6, #12]
  41b28e:	f240 2139 	movw	r1, #569	; 0x239
  41b292:	307c      	adds	r0, #124	; 0x7c
  41b294:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
  41b296:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b298:	2201      	movs	r2, #1
  41b29a:	2130      	movs	r1, #48	; 0x30
  41b29c:	307c      	adds	r0, #124	; 0x7c
  41b29e:	4b21      	ldr	r3, [pc, #132]	; (41b324 <lv_theme_material_init+0xf48>)
  41b2a0:	4798      	blx	r3
    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
  41b2a2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41b2a4:	89f2      	ldrh	r2, [r6, #14]
  41b2a6:	f240 2149 	movw	r1, #585	; 0x249
  41b2aa:	307c      	adds	r0, #124	; 0x7c
  41b2ac:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  41b2ae:	6824      	ldr	r4, [r4, #0]
  41b2b0:	347c      	adds	r4, #124	; 0x7c
  41b2b2:	6a33      	ldr	r3, [r6, #32]
  41b2b4:	f013 0f20 	tst.w	r3, #32
  41b2b8:	f001 8016 	beq.w	41c2e8 <lv_theme_material_init+0x1f0c>
  41b2bc:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41b2be:	f44f 7110 	mov.w	r1, #576	; 0x240
  41b2c2:	4620      	mov	r0, r4
  41b2c4:	4b17      	ldr	r3, [pc, #92]	; (41b324 <lv_theme_material_init+0xf48>)
  41b2c6:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  41b2c8:	4b14      	ldr	r3, [pc, #80]	; (41b31c <lv_theme_material_init+0xf40>)
  41b2ca:	681c      	ldr	r4, [r3, #0]
  41b2cc:	347c      	adds	r4, #124	; 0x7c
  41b2ce:	2000      	movs	r0, #0
  41b2d0:	4b15      	ldr	r3, [pc, #84]	; (41b328 <lv_theme_material_init+0xf4c>)
  41b2d2:	4798      	blx	r3
  41b2d4:	3028      	adds	r0, #40	; 0x28
  41b2d6:	0040      	lsls	r0, r0, #1
  41b2d8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b2dc:	f281 801d 	bge.w	41c31a <lv_theme_material_init+0x1f3e>
  41b2e0:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  41b2e4:	f240 2141 	movw	r1, #577	; 0x241
  41b2e8:	4620      	mov	r0, r4
  41b2ea:	4b0e      	ldr	r3, [pc, #56]	; (41b324 <lv_theme_material_init+0xf48>)
  41b2ec:	4798      	blx	r3
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b2ee:	4b0b      	ldr	r3, [pc, #44]	; (41b31c <lv_theme_material_init+0xf40>)
  41b2f0:	681c      	ldr	r4, [r3, #0]
  41b2f2:	347c      	adds	r4, #124	; 0x7c
  41b2f4:	2000      	movs	r0, #0
  41b2f6:	4b0d      	ldr	r3, [pc, #52]	; (41b32c <lv_theme_material_init+0xf50>)
  41b2f8:	4798      	blx	r3
  41b2fa:	2801      	cmp	r0, #1
  41b2fc:	f241 8020 	bls.w	41c340 <lv_theme_material_init+0x1f64>
  41b300:	2000      	movs	r0, #0
  41b302:	4b09      	ldr	r3, [pc, #36]	; (41b328 <lv_theme_material_init+0xf4c>)
  41b304:	4798      	blx	r3
  41b306:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b30a:	e011      	b.n	41b330 <lv_theme_material_init+0xf54>
  41b30c:	00417d2d 	.word	0x00417d2d
  41b310:	00409ba5 	.word	0x00409ba5
  41b314:	2041475c 	.word	0x2041475c
  41b318:	00409a45 	.word	0x00409a45
  41b31c:	20414758 	.word	0x20414758
  41b320:	00415085 	.word	0x00415085
  41b324:	004098e5 	.word	0x004098e5
  41b328:	004140fd 	.word	0x004140fd
  41b32c:	00414119 	.word	0x00414119
  41b330:	0040      	lsls	r0, r0, #1
  41b332:	3050      	adds	r0, #80	; 0x50
  41b334:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b338:	f281 801d 	bge.w	41c376 <lv_theme_material_init+0x1f9a>
  41b33c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b33e:	2112      	movs	r1, #18
  41b340:	4620      	mov	r0, r4
  41b342:	4bbc      	ldr	r3, [pc, #752]	; (41b634 <lv_theme_material_init+0x1258>)
  41b344:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b346:	4bbc      	ldr	r3, [pc, #752]	; (41b638 <lv_theme_material_init+0x125c>)
  41b348:	681c      	ldr	r4, [r3, #0]
  41b34a:	347c      	adds	r4, #124	; 0x7c
  41b34c:	2000      	movs	r0, #0
  41b34e:	4bbb      	ldr	r3, [pc, #748]	; (41b63c <lv_theme_material_init+0x1260>)
  41b350:	4798      	blx	r3
  41b352:	2801      	cmp	r0, #1
  41b354:	f241 801f 	bls.w	41c396 <lv_theme_material_init+0x1fba>
  41b358:	2000      	movs	r0, #0
  41b35a:	4bb9      	ldr	r3, [pc, #740]	; (41b640 <lv_theme_material_init+0x1264>)
  41b35c:	4798      	blx	r3
  41b35e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b362:	0040      	lsls	r0, r0, #1
  41b364:	3050      	adds	r0, #80	; 0x50
  41b366:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b36a:	f281 802f 	bge.w	41c3cc <lv_theme_material_init+0x1ff0>
  41b36e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b370:	2113      	movs	r1, #19
  41b372:	4620      	mov	r0, r4
  41b374:	4baf      	ldr	r3, [pc, #700]	; (41b634 <lv_theme_material_init+0x1258>)
  41b376:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b378:	4baf      	ldr	r3, [pc, #700]	; (41b638 <lv_theme_material_init+0x125c>)
  41b37a:	681c      	ldr	r4, [r3, #0]
  41b37c:	347c      	adds	r4, #124	; 0x7c
  41b37e:	2000      	movs	r0, #0
  41b380:	4bae      	ldr	r3, [pc, #696]	; (41b63c <lv_theme_material_init+0x1260>)
  41b382:	4798      	blx	r3
  41b384:	2801      	cmp	r0, #1
  41b386:	f241 8031 	bls.w	41c3ec <lv_theme_material_init+0x2010>
  41b38a:	2000      	movs	r0, #0
  41b38c:	4bac      	ldr	r3, [pc, #688]	; (41b640 <lv_theme_material_init+0x1264>)
  41b38e:	4798      	blx	r3
  41b390:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b394:	0040      	lsls	r0, r0, #1
  41b396:	3050      	adds	r0, #80	; 0x50
  41b398:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b39c:	f281 8041 	bge.w	41c422 <lv_theme_material_init+0x2046>
  41b3a0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b3a2:	2110      	movs	r1, #16
  41b3a4:	4620      	mov	r0, r4
  41b3a6:	4ba3      	ldr	r3, [pc, #652]	; (41b634 <lv_theme_material_init+0x1258>)
  41b3a8:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b3aa:	4ba3      	ldr	r3, [pc, #652]	; (41b638 <lv_theme_material_init+0x125c>)
  41b3ac:	681c      	ldr	r4, [r3, #0]
  41b3ae:	347c      	adds	r4, #124	; 0x7c
  41b3b0:	2000      	movs	r0, #0
  41b3b2:	4ba2      	ldr	r3, [pc, #648]	; (41b63c <lv_theme_material_init+0x1260>)
  41b3b4:	4798      	blx	r3
  41b3b6:	2801      	cmp	r0, #1
  41b3b8:	f241 8043 	bls.w	41c442 <lv_theme_material_init+0x2066>
  41b3bc:	2000      	movs	r0, #0
  41b3be:	4ba0      	ldr	r3, [pc, #640]	; (41b640 <lv_theme_material_init+0x1264>)
  41b3c0:	4798      	blx	r3
  41b3c2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b3c6:	0040      	lsls	r0, r0, #1
  41b3c8:	3050      	adds	r0, #80	; 0x50
  41b3ca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b3ce:	f281 8053 	bge.w	41c478 <lv_theme_material_init+0x209c>
  41b3d2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b3d4:	2111      	movs	r1, #17
  41b3d6:	4620      	mov	r0, r4
  41b3d8:	4b96      	ldr	r3, [pc, #600]	; (41b634 <lv_theme_material_init+0x1258>)
  41b3da:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b3dc:	4b96      	ldr	r3, [pc, #600]	; (41b638 <lv_theme_material_init+0x125c>)
  41b3de:	681c      	ldr	r4, [r3, #0]
  41b3e0:	347c      	adds	r4, #124	; 0x7c
  41b3e2:	2000      	movs	r0, #0
  41b3e4:	4b95      	ldr	r3, [pc, #596]	; (41b63c <lv_theme_material_init+0x1260>)
  41b3e6:	4798      	blx	r3
  41b3e8:	2801      	cmp	r0, #1
  41b3ea:	f241 8055 	bls.w	41c498 <lv_theme_material_init+0x20bc>
  41b3ee:	2000      	movs	r0, #0
  41b3f0:	4b93      	ldr	r3, [pc, #588]	; (41b640 <lv_theme_material_init+0x1264>)
  41b3f2:	4798      	blx	r3
  41b3f4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b3f8:	0040      	lsls	r0, r0, #1
  41b3fa:	3050      	adds	r0, #80	; 0x50
  41b3fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b400:	f281 8065 	bge.w	41c4ce <lv_theme_material_init+0x20f2>
  41b404:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b406:	2114      	movs	r1, #20
  41b408:	4620      	mov	r0, r4
  41b40a:	4b8a      	ldr	r3, [pc, #552]	; (41b634 <lv_theme_material_init+0x1258>)
  41b40c:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41b40e:	4b8a      	ldr	r3, [pc, #552]	; (41b638 <lv_theme_material_init+0x125c>)
  41b410:	681c      	ldr	r4, [r3, #0]
  41b412:	347c      	adds	r4, #124	; 0x7c
  41b414:	2000      	movs	r0, #0
  41b416:	4b89      	ldr	r3, [pc, #548]	; (41b63c <lv_theme_material_init+0x1260>)
  41b418:	4798      	blx	r3
  41b41a:	2801      	cmp	r0, #1
  41b41c:	f241 8067 	bls.w	41c4ee <lv_theme_material_init+0x2112>
  41b420:	2000      	movs	r0, #0
  41b422:	4b87      	ldr	r3, [pc, #540]	; (41b640 <lv_theme_material_init+0x1264>)
  41b424:	4798      	blx	r3
  41b426:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b42a:	0040      	lsls	r0, r0, #1
  41b42c:	3050      	adds	r0, #80	; 0x50
  41b42e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b432:	f281 8078 	bge.w	41c526 <lv_theme_material_init+0x214a>
  41b436:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  41b43a:	2104      	movs	r1, #4
  41b43c:	4620      	mov	r0, r4
  41b43e:	4b7d      	ldr	r3, [pc, #500]	; (41b634 <lv_theme_material_init+0x1258>)
  41b440:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41b442:	4b7d      	ldr	r3, [pc, #500]	; (41b638 <lv_theme_material_init+0x125c>)
  41b444:	681c      	ldr	r4, [r3, #0]
  41b446:	347c      	adds	r4, #124	; 0x7c
  41b448:	2000      	movs	r0, #0
  41b44a:	4b7d      	ldr	r3, [pc, #500]	; (41b640 <lv_theme_material_init+0x1264>)
  41b44c:	4798      	blx	r3
  41b44e:	3028      	adds	r0, #40	; 0x28
  41b450:	0040      	lsls	r0, r0, #1
  41b452:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b456:	f281 8076 	bge.w	41c546 <lv_theme_material_init+0x216a>
  41b45a:	f04f 32ff 	mov.w	r2, #4294967295
  41b45e:	f241 0104 	movw	r1, #4100	; 0x1004
  41b462:	4620      	mov	r0, r4
  41b464:	4b73      	ldr	r3, [pc, #460]	; (41b634 <lv_theme_material_init+0x1258>)
  41b466:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41b468:	4b73      	ldr	r3, [pc, #460]	; (41b638 <lv_theme_material_init+0x125c>)
  41b46a:	681c      	ldr	r4, [r3, #0]
  41b46c:	347c      	adds	r4, #124	; 0x7c
  41b46e:	2000      	movs	r0, #0
  41b470:	4b73      	ldr	r3, [pc, #460]	; (41b640 <lv_theme_material_init+0x1264>)
  41b472:	4798      	blx	r3
  41b474:	3028      	adds	r0, #40	; 0x28
  41b476:	0040      	lsls	r0, r0, #1
  41b478:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b47c:	f281 8071 	bge.w	41c562 <lv_theme_material_init+0x2186>
  41b480:	f04f 32ff 	mov.w	r2, #4294967295
  41b484:	f44f 7182 	mov.w	r1, #260	; 0x104
  41b488:	4620      	mov	r0, r4
  41b48a:	4b6a      	ldr	r3, [pc, #424]	; (41b634 <lv_theme_material_init+0x1258>)
  41b48c:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41b48e:	4b6a      	ldr	r3, [pc, #424]	; (41b638 <lv_theme_material_init+0x125c>)
  41b490:	681c      	ldr	r4, [r3, #0]
  41b492:	347c      	adds	r4, #124	; 0x7c
  41b494:	2000      	movs	r0, #0
  41b496:	4b6a      	ldr	r3, [pc, #424]	; (41b640 <lv_theme_material_init+0x1264>)
  41b498:	4798      	blx	r3
  41b49a:	3028      	adds	r0, #40	; 0x28
  41b49c:	0040      	lsls	r0, r0, #1
  41b49e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b4a2:	f281 806c 	bge.w	41c57e <lv_theme_material_init+0x21a2>
  41b4a6:	f04f 32ff 	mov.w	r2, #4294967295
  41b4aa:	f242 0104 	movw	r1, #8196	; 0x2004
  41b4ae:	4620      	mov	r0, r4
  41b4b0:	4b60      	ldr	r3, [pc, #384]	; (41b634 <lv_theme_material_init+0x1258>)
  41b4b2:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41b4b4:	4b60      	ldr	r3, [pc, #384]	; (41b638 <lv_theme_material_init+0x125c>)
  41b4b6:	681c      	ldr	r4, [r3, #0]
  41b4b8:	347c      	adds	r4, #124	; 0x7c
  41b4ba:	2000      	movs	r0, #0
  41b4bc:	4b60      	ldr	r3, [pc, #384]	; (41b640 <lv_theme_material_init+0x1264>)
  41b4be:	4798      	blx	r3
  41b4c0:	3028      	adds	r0, #40	; 0x28
  41b4c2:	0040      	lsls	r0, r0, #1
  41b4c4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b4c8:	f281 8067 	bge.w	41c59a <lv_theme_material_init+0x21be>
  41b4cc:	f04f 32ff 	mov.w	r2, #4294967295
  41b4d0:	f44f 7101 	mov.w	r1, #516	; 0x204
  41b4d4:	4620      	mov	r0, r4
  41b4d6:	4d57      	ldr	r5, [pc, #348]	; (41b634 <lv_theme_material_init+0x1258>)
  41b4d8:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41b4da:	4c57      	ldr	r4, [pc, #348]	; (41b638 <lv_theme_material_init+0x125c>)
  41b4dc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41b4de:	2200      	movs	r2, #0
  41b4e0:	21b0      	movs	r1, #176	; 0xb0
  41b4e2:	307c      	adds	r0, #124	; 0x7c
  41b4e4:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41b4e6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41b4e8:	2229      	movs	r2, #41	; 0x29
  41b4ea:	21b7      	movs	r1, #183	; 0xb7
  41b4ec:	307c      	adds	r0, #124	; 0x7c
  41b4ee:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
  41b4f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41b4f2:	2204      	movs	r2, #4
  41b4f4:	21b6      	movs	r1, #182	; 0xb6
  41b4f6:	307c      	adds	r0, #124	; 0x7c
  41b4f8:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_page);
  41b4fa:	6820      	ldr	r0, [r4, #0]
  41b4fc:	3058      	adds	r0, #88	; 0x58
  41b4fe:	4b51      	ldr	r3, [pc, #324]	; (41b644 <lv_theme_material_init+0x1268>)
  41b500:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41b502:	6824      	ldr	r4, [r4, #0]
  41b504:	3458      	adds	r4, #88	; 0x58
  41b506:	2000      	movs	r0, #0
  41b508:	4b4d      	ldr	r3, [pc, #308]	; (41b640 <lv_theme_material_init+0x1264>)
  41b50a:	4798      	blx	r3
  41b50c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b510:	0080      	lsls	r0, r0, #2
  41b512:	3050      	adds	r0, #80	; 0x50
  41b514:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b518:	f281 804d 	bge.w	41c5b6 <lv_theme_material_init+0x21da>
  41b51c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41b51e:	f248 0181 	movw	r1, #32897	; 0x8081
  41b522:	4620      	mov	r0, r4
  41b524:	4d43      	ldr	r5, [pc, #268]	; (41b634 <lv_theme_material_init+0x1258>)
  41b526:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
  41b528:	4c43      	ldr	r4, [pc, #268]	; (41b638 <lv_theme_material_init+0x125c>)
  41b52a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41b52c:	2201      	movs	r2, #1
  41b52e:	2102      	movs	r1, #2
  41b530:	3058      	adds	r0, #88	; 0x58
  41b532:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
  41b534:	6820      	ldr	r0, [r4, #0]
  41b536:	305c      	adds	r0, #92	; 0x5c
  41b538:	4b42      	ldr	r3, [pc, #264]	; (41b644 <lv_theme_material_init+0x1268>)
  41b53a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b53c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b53e:	22ff      	movs	r2, #255	; 0xff
  41b540:	212c      	movs	r1, #44	; 0x2c
  41b542:	305c      	adds	r0, #92	; 0x5c
  41b544:	4b40      	ldr	r3, [pc, #256]	; (41b648 <lv_theme_material_init+0x126c>)
  41b546:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
  41b548:	6820      	ldr	r0, [r4, #0]
  41b54a:	4d40      	ldr	r5, [pc, #256]	; (41b64c <lv_theme_material_init+0x1270>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b54c:	89aa      	ldrh	r2, [r5, #12]
  41b54e:	2129      	movs	r1, #41	; 0x29
  41b550:	305c      	adds	r0, #92	; 0x5c
  41b552:	4e3f      	ldr	r6, [pc, #252]	; (41b650 <lv_theme_material_init+0x1274>)
  41b554:	47b0      	blx	r6
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
  41b556:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b558:	f04f 32ff 	mov.w	r2, #4294967295
  41b55c:	f248 0189 	movw	r1, #32905	; 0x8089
  41b560:	305c      	adds	r0, #92	; 0x5c
  41b562:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
  41b564:	6820      	ldr	r0, [r4, #0]
  41b566:	305c      	adds	r0, #92	; 0x5c
  41b568:	6a2b      	ldr	r3, [r5, #32]
  41b56a:	f013 0f02 	tst.w	r3, #2
  41b56e:	f041 8032 	bne.w	41c5d6 <lv_theme_material_init+0x21fa>
  41b572:	230a      	movs	r3, #10
  41b574:	2109      	movs	r1, #9
  41b576:	2402      	movs	r4, #2
  41b578:	f04f 0200 	mov.w	r2, #0
  41b57c:	f364 0202 	bfi	r2, r4, #0, #3
  41b580:	f361 02c7 	bfi	r2, r1, #3, #5
  41b584:	f363 220c 	bfi	r2, r3, #8, #5
  41b588:	2303      	movs	r3, #3
  41b58a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b58e:	f241 0129 	movw	r1, #4137	; 0x1029
  41b592:	4b2f      	ldr	r3, [pc, #188]	; (41b650 <lv_theme_material_init+0x1274>)
  41b594:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41b596:	4b28      	ldr	r3, [pc, #160]	; (41b638 <lv_theme_material_init+0x125c>)
  41b598:	6818      	ldr	r0, [r3, #0]
  41b59a:	305c      	adds	r0, #92	; 0x5c
  41b59c:	4b2b      	ldr	r3, [pc, #172]	; (41b64c <lv_theme_material_init+0x1270>)
  41b59e:	6a1b      	ldr	r3, [r3, #32]
  41b5a0:	f013 0f02 	tst.w	r3, #2
  41b5a4:	f041 801c 	bne.w	41c5e0 <lv_theme_material_init+0x2204>
  41b5a8:	231f      	movs	r3, #31
  41b5aa:	4619      	mov	r1, r3
  41b5ac:	2407      	movs	r4, #7
  41b5ae:	f04f 0200 	mov.w	r2, #0
  41b5b2:	f364 0202 	bfi	r2, r4, #0, #3
  41b5b6:	f361 02c7 	bfi	r2, r1, #3, #5
  41b5ba:	f363 220c 	bfi	r2, r3, #8, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b5be:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b5c2:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b5c6:	f249 0189 	movw	r1, #37001	; 0x9089
  41b5ca:	4b21      	ldr	r3, [pc, #132]	; (41b650 <lv_theme_material_init+0x1274>)
  41b5cc:	4798      	blx	r3
    style_init_reset(&styles->roller_bg);
  41b5ce:	4c1a      	ldr	r4, [pc, #104]	; (41b638 <lv_theme_material_init+0x125c>)
  41b5d0:	6820      	ldr	r0, [r4, #0]
  41b5d2:	308c      	adds	r0, #140	; 0x8c
  41b5d4:	4b1b      	ldr	r3, [pc, #108]	; (41b644 <lv_theme_material_init+0x1268>)
  41b5d6:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41b5d8:	6824      	ldr	r4, [r4, #0]
  41b5da:	348c      	adds	r4, #140	; 0x8c
  41b5dc:	2000      	movs	r0, #0
  41b5de:	4b18      	ldr	r3, [pc, #96]	; (41b640 <lv_theme_material_init+0x1264>)
  41b5e0:	4798      	blx	r3
  41b5e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b5e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b5ea:	3050      	adds	r0, #80	; 0x50
  41b5ec:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b5f0:	f280 87fb 	bge.w	41c5ea <lv_theme_material_init+0x220e>
  41b5f4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41b5f6:	f248 0181 	movw	r1, #32897	; 0x8081
  41b5fa:	4620      	mov	r0, r4
  41b5fc:	4b0d      	ldr	r3, [pc, #52]	; (41b634 <lv_theme_material_init+0x1258>)
  41b5fe:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
  41b600:	4c0d      	ldr	r4, [pc, #52]	; (41b638 <lv_theme_material_init+0x125c>)
  41b602:	6820      	ldr	r0, [r4, #0]
  41b604:	3090      	adds	r0, #144	; 0x90
  41b606:	4e0f      	ldr	r6, [pc, #60]	; (41b644 <lv_theme_material_init+0x1268>)
  41b608:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b60a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b60c:	22ff      	movs	r2, #255	; 0xff
  41b60e:	212c      	movs	r1, #44	; 0x2c
  41b610:	3090      	adds	r0, #144	; 0x90
  41b612:	4b0d      	ldr	r3, [pc, #52]	; (41b648 <lv_theme_material_init+0x126c>)
  41b614:	4798      	blx	r3
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
  41b616:	6820      	ldr	r0, [r4, #0]
  41b618:	4d0c      	ldr	r5, [pc, #48]	; (41b64c <lv_theme_material_init+0x1270>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b61a:	89aa      	ldrh	r2, [r5, #12]
  41b61c:	2129      	movs	r1, #41	; 0x29
  41b61e:	3090      	adds	r0, #144	; 0x90
  41b620:	4f0b      	ldr	r7, [pc, #44]	; (41b650 <lv_theme_material_init+0x1274>)
  41b622:	47b8      	blx	r7
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41b624:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b626:	4b0b      	ldr	r3, [pc, #44]	; (41b654 <lv_theme_material_init+0x1278>)
  41b628:	881a      	ldrh	r2, [r3, #0]
  41b62a:	f248 0189 	movw	r1, #32905	; 0x8089
  41b62e:	3090      	adds	r0, #144	; 0x90
  41b630:	47b8      	blx	r7
  41b632:	e011      	b.n	41b658 <lv_theme_material_init+0x127c>
  41b634:	004098e5 	.word	0x004098e5
  41b638:	20414758 	.word	0x20414758
  41b63c:	00414119 	.word	0x00414119
  41b640:	004140fd 	.word	0x004140fd
  41b644:	00417d2d 	.word	0x00417d2d
  41b648:	00409ba5 	.word	0x00409ba5
  41b64c:	2041475c 	.word	0x2041475c
  41b650:	00409a45 	.word	0x00409a45
  41b654:	004306bc 	.word	0x004306bc
    style_init_reset(&styles->table_cell);
  41b658:	6820      	ldr	r0, [r4, #0]
  41b65a:	30a4      	adds	r0, #164	; 0xa4
  41b65c:	47b0      	blx	r6
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41b65e:	6820      	ldr	r0, [r4, #0]
  41b660:	6a2b      	ldr	r3, [r5, #32]
  41b662:	f013 0302 	ands.w	r3, r3, #2
  41b666:	bf14      	ite	ne
  41b668:	2107      	movne	r1, #7
  41b66a:	2102      	moveq	r1, #2
  41b66c:	2b00      	cmp	r3, #0
  41b66e:	bf15      	itete	ne
  41b670:	241c      	movne	r4, #28
  41b672:	2412      	moveq	r4, #18
  41b674:	251a      	movne	r5, #26
  41b676:	2510      	moveq	r5, #16
  41b678:	bf14      	ite	ne
  41b67a:	2306      	movne	r3, #6
  41b67c:	2304      	moveq	r3, #4
  41b67e:	f04f 0200 	mov.w	r2, #0
  41b682:	f363 0202 	bfi	r2, r3, #0, #3
  41b686:	f365 02c7 	bfi	r2, r5, #3, #5
  41b68a:	f364 220c 	bfi	r2, r4, #8, #5
  41b68e:	f361 324f 	bfi	r2, r1, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b692:	2139      	movs	r1, #57	; 0x39
  41b694:	30a4      	adds	r0, #164	; 0xa4
  41b696:	47b8      	blx	r7
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
  41b698:	4cbe      	ldr	r4, [pc, #760]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b69a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b69c:	2201      	movs	r2, #1
  41b69e:	2130      	movs	r1, #48	; 0x30
  41b6a0:	30a4      	adds	r0, #164	; 0xa4
  41b6a2:	4dbd      	ldr	r5, [pc, #756]	; (41b998 <lv_theme_material_init+0x15bc>)
  41b6a4:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
  41b6a6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41b6a8:	2203      	movs	r2, #3
  41b6aa:	2131      	movs	r1, #49	; 0x31
  41b6ac:	30a4      	adds	r0, #164	; 0xa4
  41b6ae:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b6b0:	6824      	ldr	r4, [r4, #0]
  41b6b2:	34a4      	adds	r4, #164	; 0xa4
  41b6b4:	2000      	movs	r0, #0
  41b6b6:	4bb9      	ldr	r3, [pc, #740]	; (41b99c <lv_theme_material_init+0x15c0>)
  41b6b8:	4798      	blx	r3
  41b6ba:	2801      	cmp	r0, #1
  41b6bc:	f240 87a6 	bls.w	41c60c <lv_theme_material_init+0x2230>
  41b6c0:	2000      	movs	r0, #0
  41b6c2:	4bb7      	ldr	r3, [pc, #732]	; (41b9a0 <lv_theme_material_init+0x15c4>)
  41b6c4:	4798      	blx	r3
  41b6c6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b6ca:	0040      	lsls	r0, r0, #1
  41b6cc:	3050      	adds	r0, #80	; 0x50
  41b6ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b6d2:	f280 87b6 	bge.w	41c642 <lv_theme_material_init+0x2266>
  41b6d6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b6d8:	2112      	movs	r1, #18
  41b6da:	4620      	mov	r0, r4
  41b6dc:	4bae      	ldr	r3, [pc, #696]	; (41b998 <lv_theme_material_init+0x15bc>)
  41b6de:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b6e0:	4bac      	ldr	r3, [pc, #688]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b6e2:	681c      	ldr	r4, [r3, #0]
  41b6e4:	34a4      	adds	r4, #164	; 0xa4
  41b6e6:	2000      	movs	r0, #0
  41b6e8:	4bac      	ldr	r3, [pc, #688]	; (41b99c <lv_theme_material_init+0x15c0>)
  41b6ea:	4798      	blx	r3
  41b6ec:	2801      	cmp	r0, #1
  41b6ee:	f240 87bd 	bls.w	41c66c <lv_theme_material_init+0x2290>
  41b6f2:	2000      	movs	r0, #0
  41b6f4:	4baa      	ldr	r3, [pc, #680]	; (41b9a0 <lv_theme_material_init+0x15c4>)
  41b6f6:	4798      	blx	r3
  41b6f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b6fc:	0040      	lsls	r0, r0, #1
  41b6fe:	3050      	adds	r0, #80	; 0x50
  41b700:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b704:	f280 87cd 	bge.w	41c6a2 <lv_theme_material_init+0x22c6>
  41b708:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b70a:	2113      	movs	r1, #19
  41b70c:	4620      	mov	r0, r4
  41b70e:	4ba2      	ldr	r3, [pc, #648]	; (41b998 <lv_theme_material_init+0x15bc>)
  41b710:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b712:	4ba0      	ldr	r3, [pc, #640]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b714:	681c      	ldr	r4, [r3, #0]
  41b716:	34a4      	adds	r4, #164	; 0xa4
  41b718:	2000      	movs	r0, #0
  41b71a:	4ba0      	ldr	r3, [pc, #640]	; (41b99c <lv_theme_material_init+0x15c0>)
  41b71c:	4798      	blx	r3
  41b71e:	2801      	cmp	r0, #1
  41b720:	f240 87cf 	bls.w	41c6c2 <lv_theme_material_init+0x22e6>
  41b724:	2000      	movs	r0, #0
  41b726:	4b9e      	ldr	r3, [pc, #632]	; (41b9a0 <lv_theme_material_init+0x15c4>)
  41b728:	4798      	blx	r3
  41b72a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b72e:	0040      	lsls	r0, r0, #1
  41b730:	3050      	adds	r0, #80	; 0x50
  41b732:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b736:	f280 87df 	bge.w	41c6f8 <lv_theme_material_init+0x231c>
  41b73a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b73c:	2110      	movs	r1, #16
  41b73e:	4620      	mov	r0, r4
  41b740:	4b95      	ldr	r3, [pc, #596]	; (41b998 <lv_theme_material_init+0x15bc>)
  41b742:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b744:	4b93      	ldr	r3, [pc, #588]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b746:	681c      	ldr	r4, [r3, #0]
  41b748:	34a4      	adds	r4, #164	; 0xa4
  41b74a:	2000      	movs	r0, #0
  41b74c:	4b93      	ldr	r3, [pc, #588]	; (41b99c <lv_theme_material_init+0x15c0>)
  41b74e:	4798      	blx	r3
  41b750:	2801      	cmp	r0, #1
  41b752:	f240 87e1 	bls.w	41c718 <lv_theme_material_init+0x233c>
  41b756:	2000      	movs	r0, #0
  41b758:	4b91      	ldr	r3, [pc, #580]	; (41b9a0 <lv_theme_material_init+0x15c4>)
  41b75a:	4798      	blx	r3
  41b75c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b760:	0040      	lsls	r0, r0, #1
  41b762:	3050      	adds	r0, #80	; 0x50
  41b764:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b768:	f280 87f1 	bge.w	41c74e <lv_theme_material_init+0x2372>
  41b76c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b76e:	2111      	movs	r1, #17
  41b770:	4620      	mov	r0, r4
  41b772:	4b89      	ldr	r3, [pc, #548]	; (41b998 <lv_theme_material_init+0x15bc>)
  41b774:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns_bg);
  41b776:	4c87      	ldr	r4, [pc, #540]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b778:	6820      	ldr	r0, [r4, #0]
  41b77a:	30ac      	adds	r0, #172	; 0xac
  41b77c:	4b89      	ldr	r3, [pc, #548]	; (41b9a4 <lv_theme_material_init+0x15c8>)
  41b77e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b780:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b782:	22ff      	movs	r2, #255	; 0xff
  41b784:	212c      	movs	r1, #44	; 0x2c
  41b786:	30ac      	adds	r0, #172	; 0xac
  41b788:	4b87      	ldr	r3, [pc, #540]	; (41b9a8 <lv_theme_material_init+0x15cc>)
  41b78a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
  41b78c:	6820      	ldr	r0, [r4, #0]
  41b78e:	30ac      	adds	r0, #172	; 0xac
  41b790:	4b86      	ldr	r3, [pc, #536]	; (41b9ac <lv_theme_material_init+0x15d0>)
  41b792:	6a1b      	ldr	r3, [r3, #32]
  41b794:	f013 0f02 	tst.w	r3, #2
  41b798:	f040 87e9 	bne.w	41c76e <lv_theme_material_init+0x2392>
  41b79c:	2300      	movs	r3, #0
  41b79e:	210e      	movs	r1, #14
  41b7a0:	240b      	movs	r4, #11
  41b7a2:	2503      	movs	r5, #3
  41b7a4:	f04f 0200 	mov.w	r2, #0
  41b7a8:	f365 0202 	bfi	r2, r5, #0, #3
  41b7ac:	f364 02c7 	bfi	r2, r4, #3, #5
  41b7b0:	f361 220c 	bfi	r2, r1, #8, #5
  41b7b4:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b7b8:	2129      	movs	r1, #41	; 0x29
  41b7ba:	4b7d      	ldr	r3, [pc, #500]	; (41b9b0 <lv_theme_material_init+0x15d4>)
  41b7bc:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41b7be:	4b75      	ldr	r3, [pc, #468]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b7c0:	6818      	ldr	r0, [r3, #0]
  41b7c2:	30ac      	adds	r0, #172	; 0xac
  41b7c4:	4b79      	ldr	r3, [pc, #484]	; (41b9ac <lv_theme_material_init+0x15d0>)
  41b7c6:	6a1b      	ldr	r3, [r3, #32]
  41b7c8:	f013 0f02 	tst.w	r3, #2
  41b7cc:	f040 87d5 	bne.w	41c77a <lv_theme_material_init+0x239e>
  41b7d0:	2302      	movs	r3, #2
  41b7d2:	211d      	movs	r1, #29
  41b7d4:	241c      	movs	r4, #28
  41b7d6:	2507      	movs	r5, #7
  41b7d8:	f04f 0200 	mov.w	r2, #0
  41b7dc:	f365 0202 	bfi	r2, r5, #0, #3
  41b7e0:	f364 02c7 	bfi	r2, r4, #3, #5
  41b7e4:	f361 220c 	bfi	r2, r1, #8, #5
  41b7e8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b7ec:	f248 0189 	movw	r1, #32905	; 0x8089
  41b7f0:	4d6f      	ldr	r5, [pc, #444]	; (41b9b0 <lv_theme_material_init+0x15d4>)
  41b7f2:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
  41b7f4:	4c67      	ldr	r4, [pc, #412]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b7f6:	6820      	ldr	r0, [r4, #0]
  41b7f8:	f04f 0200 	mov.w	r2, #0
  41b7fc:	2304      	movs	r3, #4
  41b7fe:	f363 0202 	bfi	r2, r3, #0, #3
  41b802:	2312      	movs	r3, #18
  41b804:	f363 02c7 	bfi	r2, r3, #3, #5
  41b808:	2313      	movs	r3, #19
  41b80a:	f363 220c 	bfi	r2, r3, #8, #5
  41b80e:	2306      	movs	r3, #6
  41b810:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b814:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41b818:	30ac      	adds	r0, #172	; 0xac
  41b81a:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41b81c:	6824      	ldr	r4, [r4, #0]
  41b81e:	34ac      	adds	r4, #172	; 0xac
  41b820:	2000      	movs	r0, #0
  41b822:	4b5f      	ldr	r3, [pc, #380]	; (41b9a0 <lv_theme_material_init+0x15c4>)
  41b824:	4798      	blx	r3
  41b826:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41b82a:	3050      	adds	r0, #80	; 0x50
  41b82c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b830:	f280 87a9 	bge.w	41c786 <lv_theme_material_init+0x23aa>
  41b834:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b836:	2110      	movs	r1, #16
  41b838:	4620      	mov	r0, r4
  41b83a:	4b57      	ldr	r3, [pc, #348]	; (41b998 <lv_theme_material_init+0x15bc>)
  41b83c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41b83e:	4b55      	ldr	r3, [pc, #340]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b840:	681c      	ldr	r4, [r3, #0]
  41b842:	34ac      	adds	r4, #172	; 0xac
  41b844:	2000      	movs	r0, #0
  41b846:	4b56      	ldr	r3, [pc, #344]	; (41b9a0 <lv_theme_material_init+0x15c4>)
  41b848:	4798      	blx	r3
  41b84a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41b84e:	3050      	adds	r0, #80	; 0x50
  41b850:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b854:	f280 87a6 	bge.w	41c7a4 <lv_theme_material_init+0x23c8>
  41b858:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b85a:	2112      	movs	r1, #18
  41b85c:	4620      	mov	r0, r4
  41b85e:	4b4e      	ldr	r3, [pc, #312]	; (41b998 <lv_theme_material_init+0x15bc>)
  41b860:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41b862:	4b4c      	ldr	r3, [pc, #304]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b864:	681c      	ldr	r4, [r3, #0]
  41b866:	34ac      	adds	r4, #172	; 0xac
  41b868:	2000      	movs	r0, #0
  41b86a:	4b4d      	ldr	r3, [pc, #308]	; (41b9a0 <lv_theme_material_init+0x15c4>)
  41b86c:	4798      	blx	r3
  41b86e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41b872:	3050      	adds	r0, #80	; 0x50
  41b874:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b878:	f280 87a3 	bge.w	41c7c2 <lv_theme_material_init+0x23e6>
  41b87c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b87e:	2113      	movs	r1, #19
  41b880:	4620      	mov	r0, r4
  41b882:	4b45      	ldr	r3, [pc, #276]	; (41b998 <lv_theme_material_init+0x15bc>)
  41b884:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
  41b886:	4c43      	ldr	r4, [pc, #268]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b888:	6820      	ldr	r0, [r4, #0]
  41b88a:	30a8      	adds	r0, #168	; 0xa8
  41b88c:	4b45      	ldr	r3, [pc, #276]	; (41b9a4 <lv_theme_material_init+0x15c8>)
  41b88e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
  41b890:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b892:	227f      	movs	r2, #127	; 0x7f
  41b894:	f241 012c 	movw	r1, #4140	; 0x102c
  41b898:	30a8      	adds	r0, #168	; 0xa8
  41b89a:	4b43      	ldr	r3, [pc, #268]	; (41b9a8 <lv_theme_material_init+0x15cc>)
  41b89c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
  41b89e:	6820      	ldr	r0, [r4, #0]
  41b8a0:	f04f 0200 	mov.w	r2, #0
  41b8a4:	2304      	movs	r3, #4
  41b8a6:	f363 0202 	bfi	r2, r3, #0, #3
  41b8aa:	2311      	movs	r3, #17
  41b8ac:	f363 02c7 	bfi	r2, r3, #3, #5
  41b8b0:	f363 220c 	bfi	r2, r3, #8, #5
  41b8b4:	2302      	movs	r3, #2
  41b8b6:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b8ba:	f241 0129 	movw	r1, #4137	; 0x1029
  41b8be:	30a8      	adds	r0, #168	; 0xa8
  41b8c0:	4b3b      	ldr	r3, [pc, #236]	; (41b9b0 <lv_theme_material_init+0x15d4>)
  41b8c2:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
  41b8c4:	6820      	ldr	r0, [r4, #0]
  41b8c6:	30a8      	adds	r0, #168	; 0xa8
  41b8c8:	4b38      	ldr	r3, [pc, #224]	; (41b9ac <lv_theme_material_init+0x15d0>)
  41b8ca:	6a1b      	ldr	r3, [r3, #32]
  41b8cc:	f013 0f02 	tst.w	r3, #2
  41b8d0:	f040 8786 	bne.w	41c7e0 <lv_theme_material_init+0x2404>
  41b8d4:	2302      	movs	r3, #2
  41b8d6:	211d      	movs	r1, #29
  41b8d8:	241c      	movs	r4, #28
  41b8da:	2507      	movs	r5, #7
  41b8dc:	f04f 0200 	mov.w	r2, #0
  41b8e0:	f365 0202 	bfi	r2, r5, #0, #3
  41b8e4:	f364 02c7 	bfi	r2, r4, #3, #5
  41b8e8:	f361 220c 	bfi	r2, r1, #8, #5
  41b8ec:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b8f0:	f248 1189 	movw	r1, #33161	; 0x8189
  41b8f4:	4b2e      	ldr	r3, [pc, #184]	; (41b9b0 <lv_theme_material_init+0x15d4>)
  41b8f6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41b8f8:	4b26      	ldr	r3, [pc, #152]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b8fa:	681c      	ldr	r4, [r3, #0]
  41b8fc:	34a8      	adds	r4, #168	; 0xa8
  41b8fe:	2000      	movs	r0, #0
  41b900:	4b27      	ldr	r3, [pc, #156]	; (41b9a0 <lv_theme_material_init+0x15c4>)
  41b902:	4798      	blx	r3
  41b904:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b908:	0080      	lsls	r0, r0, #2
  41b90a:	3050      	adds	r0, #80	; 0x50
  41b90c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b910:	f280 876c 	bge.w	41c7ec <lv_theme_material_init+0x2410>
  41b914:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b916:	2110      	movs	r1, #16
  41b918:	4620      	mov	r0, r4
  41b91a:	4b1f      	ldr	r3, [pc, #124]	; (41b998 <lv_theme_material_init+0x15bc>)
  41b91c:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41b91e:	4b1d      	ldr	r3, [pc, #116]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b920:	681c      	ldr	r4, [r3, #0]
  41b922:	34a8      	adds	r4, #168	; 0xa8
  41b924:	2000      	movs	r0, #0
  41b926:	4b1e      	ldr	r3, [pc, #120]	; (41b9a0 <lv_theme_material_init+0x15c4>)
  41b928:	4798      	blx	r3
  41b92a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b92e:	0080      	lsls	r0, r0, #2
  41b930:	3050      	adds	r0, #80	; 0x50
  41b932:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b936:	f280 8769 	bge.w	41c80c <lv_theme_material_init+0x2430>
  41b93a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b93c:	2111      	movs	r1, #17
  41b93e:	4620      	mov	r0, r4
  41b940:	4b15      	ldr	r3, [pc, #84]	; (41b998 <lv_theme_material_init+0x15bc>)
  41b942:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
  41b944:	4c13      	ldr	r4, [pc, #76]	; (41b994 <lv_theme_material_init+0x15b8>)
  41b946:	6820      	ldr	r0, [r4, #0]
  41b948:	4e18      	ldr	r6, [pc, #96]	; (41b9ac <lv_theme_material_init+0x15d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b94a:	89b2      	ldrh	r2, [r6, #12]
  41b94c:	f248 2189 	movw	r1, #33417	; 0x8289
  41b950:	30a8      	adds	r0, #168	; 0xa8
  41b952:	4d17      	ldr	r5, [pc, #92]	; (41b9b0 <lv_theme_material_init+0x15d4>)
  41b954:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
  41b956:	6820      	ldr	r0, [r4, #0]
  41b958:	89f2      	ldrh	r2, [r6, #14]
  41b95a:	f248 4189 	movw	r1, #33929	; 0x8489
  41b95e:	30a8      	adds	r0, #168	; 0xa8
  41b960:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
  41b962:	6820      	ldr	r0, [r4, #0]
  41b964:	30b0      	adds	r0, #176	; 0xb0
  41b966:	4b0f      	ldr	r3, [pc, #60]	; (41b9a4 <lv_theme_material_init+0x15c8>)
  41b968:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b96a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b96c:	22ff      	movs	r2, #255	; 0xff
  41b96e:	212c      	movs	r1, #44	; 0x2c
  41b970:	30b0      	adds	r0, #176	; 0xb0
  41b972:	4b0d      	ldr	r3, [pc, #52]	; (41b9a8 <lv_theme_material_init+0x15cc>)
  41b974:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
  41b976:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b978:	89b2      	ldrh	r2, [r6, #12]
  41b97a:	2129      	movs	r1, #41	; 0x29
  41b97c:	30b0      	adds	r0, #176	; 0xb0
  41b97e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
  41b980:	6820      	ldr	r0, [r4, #0]
  41b982:	89f2      	ldrh	r2, [r6, #14]
  41b984:	f240 4129 	movw	r1, #1065	; 0x429
  41b988:	30b0      	adds	r0, #176	; 0xb0
  41b98a:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41b98c:	6824      	ldr	r4, [r4, #0]
  41b98e:	34b0      	adds	r4, #176	; 0xb0
  41b990:	2000      	movs	r0, #0
  41b992:	e00f      	b.n	41b9b4 <lv_theme_material_init+0x15d8>
  41b994:	20414758 	.word	0x20414758
  41b998:	004098e5 	.word	0x004098e5
  41b99c:	00414119 	.word	0x00414119
  41b9a0:	004140fd 	.word	0x004140fd
  41b9a4:	00417d2d 	.word	0x00417d2d
  41b9a8:	00409ba5 	.word	0x00409ba5
  41b9ac:	2041475c 	.word	0x2041475c
  41b9b0:	00409a45 	.word	0x00409a45
  41b9b4:	4bbd      	ldr	r3, [pc, #756]	; (41bcac <lv_theme_material_init+0x18d0>)
  41b9b6:	4798      	blx	r3
  41b9b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b9bc:	3050      	adds	r0, #80	; 0x50
  41b9be:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b9c2:	f280 8733 	bge.w	41c82c <lv_theme_material_init+0x2450>
  41b9c6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41b9c8:	2103      	movs	r1, #3
  41b9ca:	4620      	mov	r0, r4
  41b9cc:	4db8      	ldr	r5, [pc, #736]	; (41bcb0 <lv_theme_material_init+0x18d4>)
  41b9ce:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41b9d0:	4cb8      	ldr	r4, [pc, #736]	; (41bcb4 <lv_theme_material_init+0x18d8>)
  41b9d2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41b9d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41b9d8:	2101      	movs	r1, #1
  41b9da:	30b0      	adds	r0, #176	; 0xb0
  41b9dc:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
  41b9de:	6820      	ldr	r0, [r4, #0]
  41b9e0:	30b4      	adds	r0, #180	; 0xb4
  41b9e2:	4bb5      	ldr	r3, [pc, #724]	; (41bcb8 <lv_theme_material_init+0x18dc>)
  41b9e4:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41b9e6:	6824      	ldr	r4, [r4, #0]
  41b9e8:	34b4      	adds	r4, #180	; 0xb4
  41b9ea:	2000      	movs	r0, #0
  41b9ec:	4bb3      	ldr	r3, [pc, #716]	; (41bcbc <lv_theme_material_init+0x18e0>)
  41b9ee:	4798      	blx	r3
  41b9f0:	2801      	cmp	r0, #1
  41b9f2:	f240 872a 	bls.w	41c84a <lv_theme_material_init+0x246e>
  41b9f6:	2000      	movs	r0, #0
  41b9f8:	4bac      	ldr	r3, [pc, #688]	; (41bcac <lv_theme_material_init+0x18d0>)
  41b9fa:	4798      	blx	r3
  41b9fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba00:	0040      	lsls	r0, r0, #1
  41ba02:	3050      	adds	r0, #80	; 0x50
  41ba04:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba08:	f280 873a 	bge.w	41c880 <lv_theme_material_init+0x24a4>
  41ba0c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ba0e:	2110      	movs	r1, #16
  41ba10:	4620      	mov	r0, r4
  41ba12:	4ba7      	ldr	r3, [pc, #668]	; (41bcb0 <lv_theme_material_init+0x18d4>)
  41ba14:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ba16:	4ba7      	ldr	r3, [pc, #668]	; (41bcb4 <lv_theme_material_init+0x18d8>)
  41ba18:	681c      	ldr	r4, [r3, #0]
  41ba1a:	34b4      	adds	r4, #180	; 0xb4
  41ba1c:	2000      	movs	r0, #0
  41ba1e:	4ba7      	ldr	r3, [pc, #668]	; (41bcbc <lv_theme_material_init+0x18e0>)
  41ba20:	4798      	blx	r3
  41ba22:	2801      	cmp	r0, #1
  41ba24:	f240 873c 	bls.w	41c8a0 <lv_theme_material_init+0x24c4>
  41ba28:	2000      	movs	r0, #0
  41ba2a:	4ba0      	ldr	r3, [pc, #640]	; (41bcac <lv_theme_material_init+0x18d0>)
  41ba2c:	4798      	blx	r3
  41ba2e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba32:	0040      	lsls	r0, r0, #1
  41ba34:	3050      	adds	r0, #80	; 0x50
  41ba36:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba3a:	f280 874c 	bge.w	41c8d6 <lv_theme_material_init+0x24fa>
  41ba3e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ba40:	2111      	movs	r1, #17
  41ba42:	4620      	mov	r0, r4
  41ba44:	4b9a      	ldr	r3, [pc, #616]	; (41bcb0 <lv_theme_material_init+0x18d4>)
  41ba46:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ba48:	4b9a      	ldr	r3, [pc, #616]	; (41bcb4 <lv_theme_material_init+0x18d8>)
  41ba4a:	681c      	ldr	r4, [r3, #0]
  41ba4c:	34b4      	adds	r4, #180	; 0xb4
  41ba4e:	2000      	movs	r0, #0
  41ba50:	4b9a      	ldr	r3, [pc, #616]	; (41bcbc <lv_theme_material_init+0x18e0>)
  41ba52:	4798      	blx	r3
  41ba54:	2801      	cmp	r0, #1
  41ba56:	f240 874e 	bls.w	41c8f6 <lv_theme_material_init+0x251a>
  41ba5a:	2000      	movs	r0, #0
  41ba5c:	4b93      	ldr	r3, [pc, #588]	; (41bcac <lv_theme_material_init+0x18d0>)
  41ba5e:	4798      	blx	r3
  41ba60:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba64:	0040      	lsls	r0, r0, #1
  41ba66:	3050      	adds	r0, #80	; 0x50
  41ba68:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba6c:	f280 875e 	bge.w	41c92c <lv_theme_material_init+0x2550>
  41ba70:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ba72:	2112      	movs	r1, #18
  41ba74:	4620      	mov	r0, r4
  41ba76:	4b8e      	ldr	r3, [pc, #568]	; (41bcb0 <lv_theme_material_init+0x18d4>)
  41ba78:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ba7a:	4b8e      	ldr	r3, [pc, #568]	; (41bcb4 <lv_theme_material_init+0x18d8>)
  41ba7c:	681c      	ldr	r4, [r3, #0]
  41ba7e:	34b4      	adds	r4, #180	; 0xb4
  41ba80:	2000      	movs	r0, #0
  41ba82:	4b8e      	ldr	r3, [pc, #568]	; (41bcbc <lv_theme_material_init+0x18e0>)
  41ba84:	4798      	blx	r3
  41ba86:	2801      	cmp	r0, #1
  41ba88:	f240 8760 	bls.w	41c94c <lv_theme_material_init+0x2570>
  41ba8c:	2000      	movs	r0, #0
  41ba8e:	4b87      	ldr	r3, [pc, #540]	; (41bcac <lv_theme_material_init+0x18d0>)
  41ba90:	4798      	blx	r3
  41ba92:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba96:	0040      	lsls	r0, r0, #1
  41ba98:	3050      	adds	r0, #80	; 0x50
  41ba9a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba9e:	f280 8775 	bge.w	41c98c <lv_theme_material_init+0x25b0>
  41baa2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41baa4:	2113      	movs	r1, #19
  41baa6:	4620      	mov	r0, r4
  41baa8:	4b81      	ldr	r3, [pc, #516]	; (41bcb0 <lv_theme_material_init+0x18d4>)
  41baaa:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41baac:	4b81      	ldr	r3, [pc, #516]	; (41bcb4 <lv_theme_material_init+0x18d8>)
  41baae:	681c      	ldr	r4, [r3, #0]
  41bab0:	34b4      	adds	r4, #180	; 0xb4
  41bab2:	2000      	movs	r0, #0
  41bab4:	4b81      	ldr	r3, [pc, #516]	; (41bcbc <lv_theme_material_init+0x18e0>)
  41bab6:	4798      	blx	r3
  41bab8:	2801      	cmp	r0, #1
  41baba:	f240 8777 	bls.w	41c9ac <lv_theme_material_init+0x25d0>
  41babe:	2000      	movs	r0, #0
  41bac0:	4b7a      	ldr	r3, [pc, #488]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bac2:	4798      	blx	r3
  41bac4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bac8:	0040      	lsls	r0, r0, #1
  41baca:	3050      	adds	r0, #80	; 0x50
  41bacc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bad0:	f280 8787 	bge.w	41c9e2 <lv_theme_material_init+0x2606>
  41bad4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41bad6:	2114      	movs	r1, #20
  41bad8:	4620      	mov	r0, r4
  41bada:	4b75      	ldr	r3, [pc, #468]	; (41bcb0 <lv_theme_material_init+0x18d4>)
  41badc:	4798      	blx	r3
    theme.apply_xcb = NULL;
  41bade:	4c78      	ldr	r4, [pc, #480]	; (41bcc0 <lv_theme_material_init+0x18e4>)
  41bae0:	2000      	movs	r0, #0
  41bae2:	6060      	str	r0, [r4, #4]
    theme.apply_cb = theme_apply;
  41bae4:	4b77      	ldr	r3, [pc, #476]	; (41bcc4 <lv_theme_material_init+0x18e8>)
  41bae6:	6023      	str	r3, [r4, #0]
    inited = true;
  41bae8:	2201      	movs	r2, #1
  41baea:	4b77      	ldr	r3, [pc, #476]	; (41bcc8 <lv_theme_material_init+0x18ec>)
  41baec:	701a      	strb	r2, [r3, #0]
    lv_obj_report_style_mod(NULL);
  41baee:	4b77      	ldr	r3, [pc, #476]	; (41bccc <lv_theme_material_init+0x18f0>)
  41baf0:	4798      	blx	r3
}
  41baf2:	4620      	mov	r0, r4
  41baf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
  41baf6:	20c0      	movs	r0, #192	; 0xc0
  41baf8:	4b75      	ldr	r3, [pc, #468]	; (41bcd0 <lv_theme_material_init+0x18f4>)
  41bafa:	4798      	blx	r3
  41bafc:	4b75      	ldr	r3, [pc, #468]	; (41bcd4 <lv_theme_material_init+0x18f8>)
  41bafe:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
  41bb00:	4b6c      	ldr	r3, [pc, #432]	; (41bcb4 <lv_theme_material_init+0x18d8>)
  41bb02:	6018      	str	r0, [r3, #0]
  41bb04:	f7fe bc74 	b.w	41a3f0 <lv_theme_material_init+0x14>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41bb08:	2000      	movs	r0, #0
  41bb0a:	4b68      	ldr	r3, [pc, #416]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bb0c:	4798      	blx	r3
  41bb0e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb12:	3050      	adds	r0, #80	; 0x50
  41bb14:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bb18:	da02      	bge.n	41bb20 <lv_theme_material_init+0x1744>
  41bb1a:	2201      	movs	r2, #1
  41bb1c:	f7fe bca4 	b.w	41a468 <lv_theme_material_init+0x8c>
  41bb20:	2000      	movs	r0, #0
  41bb22:	4b62      	ldr	r3, [pc, #392]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bb24:	4798      	blx	r3
  41bb26:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb2a:	3050      	adds	r0, #80	; 0x50
  41bb2c:	4b6a      	ldr	r3, [pc, #424]	; (41bcd8 <lv_theme_material_init+0x18fc>)
  41bb2e:	fb83 2300 	smull	r2, r3, r3, r0
  41bb32:	17c2      	asrs	r2, r0, #31
  41bb34:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb38:	b212      	sxth	r2, r2
  41bb3a:	f7fe bc95 	b.w	41a468 <lv_theme_material_init+0x8c>
  41bb3e:	2000      	movs	r0, #0
  41bb40:	4b5a      	ldr	r3, [pc, #360]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bb42:	4798      	blx	r3
  41bb44:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb48:	0040      	lsls	r0, r0, #1
  41bb4a:	3050      	adds	r0, #80	; 0x50
  41bb4c:	4b62      	ldr	r3, [pc, #392]	; (41bcd8 <lv_theme_material_init+0x18fc>)
  41bb4e:	fb83 2300 	smull	r2, r3, r3, r0
  41bb52:	17c2      	asrs	r2, r0, #31
  41bb54:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb58:	b212      	sxth	r2, r2
  41bb5a:	f7fe bc85 	b.w	41a468 <lv_theme_material_init+0x8c>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41bb5e:	2000      	movs	r0, #0
  41bb60:	4b52      	ldr	r3, [pc, #328]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bb62:	4798      	blx	r3
  41bb64:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb68:	3050      	adds	r0, #80	; 0x50
  41bb6a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bb6e:	da02      	bge.n	41bb76 <lv_theme_material_init+0x179a>
  41bb70:	2201      	movs	r2, #1
  41bb72:	f7fe bc92 	b.w	41a49a <lv_theme_material_init+0xbe>
  41bb76:	2000      	movs	r0, #0
  41bb78:	4b4c      	ldr	r3, [pc, #304]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bb7a:	4798      	blx	r3
  41bb7c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb80:	3050      	adds	r0, #80	; 0x50
  41bb82:	4b55      	ldr	r3, [pc, #340]	; (41bcd8 <lv_theme_material_init+0x18fc>)
  41bb84:	fb83 2300 	smull	r2, r3, r3, r0
  41bb88:	17c2      	asrs	r2, r0, #31
  41bb8a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb8e:	b212      	sxth	r2, r2
  41bb90:	f7fe bc83 	b.w	41a49a <lv_theme_material_init+0xbe>
  41bb94:	2000      	movs	r0, #0
  41bb96:	4b45      	ldr	r3, [pc, #276]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bb98:	4798      	blx	r3
  41bb9a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb9e:	0040      	lsls	r0, r0, #1
  41bba0:	3050      	adds	r0, #80	; 0x50
  41bba2:	4b4d      	ldr	r3, [pc, #308]	; (41bcd8 <lv_theme_material_init+0x18fc>)
  41bba4:	fb83 2300 	smull	r2, r3, r3, r0
  41bba8:	17c2      	asrs	r2, r0, #31
  41bbaa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bbae:	b212      	sxth	r2, r2
  41bbb0:	f7fe bc73 	b.w	41a49a <lv_theme_material_init+0xbe>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41bbb4:	2000      	movs	r0, #0
  41bbb6:	4b3d      	ldr	r3, [pc, #244]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bbb8:	4798      	blx	r3
  41bbba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bbbe:	3050      	adds	r0, #80	; 0x50
  41bbc0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bbc4:	da02      	bge.n	41bbcc <lv_theme_material_init+0x17f0>
  41bbc6:	2201      	movs	r2, #1
  41bbc8:	f7fe bc85 	b.w	41a4d6 <lv_theme_material_init+0xfa>
  41bbcc:	2000      	movs	r0, #0
  41bbce:	4b37      	ldr	r3, [pc, #220]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bbd0:	4798      	blx	r3
  41bbd2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bbd6:	3050      	adds	r0, #80	; 0x50
  41bbd8:	4b3f      	ldr	r3, [pc, #252]	; (41bcd8 <lv_theme_material_init+0x18fc>)
  41bbda:	fb83 2300 	smull	r2, r3, r3, r0
  41bbde:	17c2      	asrs	r2, r0, #31
  41bbe0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bbe4:	b212      	sxth	r2, r2
  41bbe6:	f7fe bc76 	b.w	41a4d6 <lv_theme_material_init+0xfa>
  41bbea:	2000      	movs	r0, #0
  41bbec:	4b2f      	ldr	r3, [pc, #188]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bbee:	4798      	blx	r3
  41bbf0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bbf4:	0040      	lsls	r0, r0, #1
  41bbf6:	3050      	adds	r0, #80	; 0x50
  41bbf8:	4b37      	ldr	r3, [pc, #220]	; (41bcd8 <lv_theme_material_init+0x18fc>)
  41bbfa:	fb83 2300 	smull	r2, r3, r3, r0
  41bbfe:	17c2      	asrs	r2, r0, #31
  41bc00:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bc04:	b212      	sxth	r2, r2
  41bc06:	f7fe bc66 	b.w	41a4d6 <lv_theme_material_init+0xfa>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41bc0a:	2000      	movs	r0, #0
  41bc0c:	4b27      	ldr	r3, [pc, #156]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bc0e:	4798      	blx	r3
  41bc10:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bc14:	3050      	adds	r0, #80	; 0x50
  41bc16:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bc1a:	da02      	bge.n	41bc22 <lv_theme_material_init+0x1846>
  41bc1c:	2201      	movs	r2, #1
  41bc1e:	f7fe bc73 	b.w	41a508 <lv_theme_material_init+0x12c>
  41bc22:	2000      	movs	r0, #0
  41bc24:	4b21      	ldr	r3, [pc, #132]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bc26:	4798      	blx	r3
  41bc28:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bc2c:	3050      	adds	r0, #80	; 0x50
  41bc2e:	4b2a      	ldr	r3, [pc, #168]	; (41bcd8 <lv_theme_material_init+0x18fc>)
  41bc30:	fb83 2300 	smull	r2, r3, r3, r0
  41bc34:	17c2      	asrs	r2, r0, #31
  41bc36:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bc3a:	b212      	sxth	r2, r2
  41bc3c:	f7fe bc64 	b.w	41a508 <lv_theme_material_init+0x12c>
  41bc40:	2000      	movs	r0, #0
  41bc42:	4b1a      	ldr	r3, [pc, #104]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bc44:	4798      	blx	r3
  41bc46:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bc4a:	0040      	lsls	r0, r0, #1
  41bc4c:	3050      	adds	r0, #80	; 0x50
  41bc4e:	4b22      	ldr	r3, [pc, #136]	; (41bcd8 <lv_theme_material_init+0x18fc>)
  41bc50:	fb83 2300 	smull	r2, r3, r3, r0
  41bc54:	17c2      	asrs	r2, r0, #31
  41bc56:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bc5a:	b212      	sxth	r2, r2
  41bc5c:	f7fe bc54 	b.w	41a508 <lv_theme_material_init+0x12c>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  41bc60:	2102      	movs	r1, #2
  41bc62:	2311      	movs	r3, #17
  41bc64:	2404      	movs	r4, #4
  41bc66:	f7fe bc5f 	b.w	41a528 <lv_theme_material_init+0x14c>
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  41bc6a:	2100      	movs	r1, #0
  41bc6c:	2309      	movs	r3, #9
  41bc6e:	2406      	movs	r4, #6
  41bc70:	2502      	movs	r5, #2
  41bc72:	f7fe bc78 	b.w	41a566 <lv_theme_material_init+0x18a>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41bc76:	2000      	movs	r0, #0
  41bc78:	4b0c      	ldr	r3, [pc, #48]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bc7a:	4798      	blx	r3
  41bc7c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bc80:	3050      	adds	r0, #80	; 0x50
  41bc82:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bc86:	da02      	bge.n	41bc8e <lv_theme_material_init+0x18b2>
  41bc88:	2201      	movs	r2, #1
  41bc8a:	f7fe bc8f 	b.w	41a5ac <lv_theme_material_init+0x1d0>
  41bc8e:	2000      	movs	r0, #0
  41bc90:	4b06      	ldr	r3, [pc, #24]	; (41bcac <lv_theme_material_init+0x18d0>)
  41bc92:	4798      	blx	r3
  41bc94:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bc98:	3050      	adds	r0, #80	; 0x50
  41bc9a:	4b0f      	ldr	r3, [pc, #60]	; (41bcd8 <lv_theme_material_init+0x18fc>)
  41bc9c:	fb83 2300 	smull	r2, r3, r3, r0
  41bca0:	17c2      	asrs	r2, r0, #31
  41bca2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bca6:	b212      	sxth	r2, r2
  41bca8:	f7fe bc80 	b.w	41a5ac <lv_theme_material_init+0x1d0>
  41bcac:	004140fd 	.word	0x004140fd
  41bcb0:	004098e5 	.word	0x004098e5
  41bcb4:	20414758 	.word	0x20414758
  41bcb8:	00417d2d 	.word	0x00417d2d
  41bcbc:	00414119 	.word	0x00414119
  41bcc0:	2041475c 	.word	0x2041475c
  41bcc4:	00417705 	.word	0x00417705
  41bcc8:	20414754 	.word	0x20414754
  41bccc:	00407019 	.word	0x00407019
  41bcd0:	004157c9 	.word	0x004157c9
  41bcd4:	2043a210 	.word	0x2043a210
  41bcd8:	66666667 	.word	0x66666667
  41bcdc:	2000      	movs	r0, #0
  41bcde:	4bcb      	ldr	r3, [pc, #812]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bce0:	4798      	blx	r3
  41bce2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bce6:	0040      	lsls	r0, r0, #1
  41bce8:	3050      	adds	r0, #80	; 0x50
  41bcea:	4bc9      	ldr	r3, [pc, #804]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bcec:	fb83 2300 	smull	r2, r3, r3, r0
  41bcf0:	17c2      	asrs	r2, r0, #31
  41bcf2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bcf6:	b212      	sxth	r2, r2
  41bcf8:	f7fe bc58 	b.w	41a5ac <lv_theme_material_init+0x1d0>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41bcfc:	2000      	movs	r0, #0
  41bcfe:	4bc3      	ldr	r3, [pc, #780]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bd00:	4798      	blx	r3
  41bd02:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd06:	3050      	adds	r0, #80	; 0x50
  41bd08:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bd0c:	da02      	bge.n	41bd14 <lv_theme_material_init+0x1938>
  41bd0e:	2201      	movs	r2, #1
  41bd10:	f7fe bc65 	b.w	41a5de <lv_theme_material_init+0x202>
  41bd14:	2000      	movs	r0, #0
  41bd16:	4bbd      	ldr	r3, [pc, #756]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bd18:	4798      	blx	r3
  41bd1a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd1e:	3050      	adds	r0, #80	; 0x50
  41bd20:	4bbb      	ldr	r3, [pc, #748]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bd22:	fb83 2300 	smull	r2, r3, r3, r0
  41bd26:	17c2      	asrs	r2, r0, #31
  41bd28:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bd2c:	b212      	sxth	r2, r2
  41bd2e:	f7fe bc56 	b.w	41a5de <lv_theme_material_init+0x202>
  41bd32:	2000      	movs	r0, #0
  41bd34:	4bb5      	ldr	r3, [pc, #724]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bd36:	4798      	blx	r3
  41bd38:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd3c:	0040      	lsls	r0, r0, #1
  41bd3e:	3050      	adds	r0, #80	; 0x50
  41bd40:	4bb3      	ldr	r3, [pc, #716]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bd42:	fb83 2300 	smull	r2, r3, r3, r0
  41bd46:	17c2      	asrs	r2, r0, #31
  41bd48:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bd4c:	b212      	sxth	r2, r2
  41bd4e:	f7fe bc46 	b.w	41a5de <lv_theme_material_init+0x202>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41bd52:	2000      	movs	r0, #0
  41bd54:	4bad      	ldr	r3, [pc, #692]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bd56:	4798      	blx	r3
  41bd58:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd5c:	3050      	adds	r0, #80	; 0x50
  41bd5e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bd62:	da02      	bge.n	41bd6a <lv_theme_material_init+0x198e>
  41bd64:	2201      	movs	r2, #1
  41bd66:	f7fe bc53 	b.w	41a610 <lv_theme_material_init+0x234>
  41bd6a:	2000      	movs	r0, #0
  41bd6c:	4ba7      	ldr	r3, [pc, #668]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bd6e:	4798      	blx	r3
  41bd70:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd74:	3050      	adds	r0, #80	; 0x50
  41bd76:	4ba6      	ldr	r3, [pc, #664]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bd78:	fb83 2300 	smull	r2, r3, r3, r0
  41bd7c:	17c2      	asrs	r2, r0, #31
  41bd7e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bd82:	b212      	sxth	r2, r2
  41bd84:	f7fe bc44 	b.w	41a610 <lv_theme_material_init+0x234>
  41bd88:	2000      	movs	r0, #0
  41bd8a:	4ba0      	ldr	r3, [pc, #640]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bd8c:	4798      	blx	r3
  41bd8e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd92:	0040      	lsls	r0, r0, #1
  41bd94:	3050      	adds	r0, #80	; 0x50
  41bd96:	4b9e      	ldr	r3, [pc, #632]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bd98:	fb83 2300 	smull	r2, r3, r3, r0
  41bd9c:	17c2      	asrs	r2, r0, #31
  41bd9e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bda2:	b212      	sxth	r2, r2
  41bda4:	f7fe bc34 	b.w	41a610 <lv_theme_material_init+0x234>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  41bda8:	2000      	movs	r0, #0
  41bdaa:	4b98      	ldr	r3, [pc, #608]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bdac:	4798      	blx	r3
  41bdae:	3014      	adds	r0, #20
  41bdb0:	0080      	lsls	r0, r0, #2
  41bdb2:	4b97      	ldr	r3, [pc, #604]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bdb4:	fb83 2300 	smull	r2, r3, r3, r0
  41bdb8:	17c2      	asrs	r2, r0, #31
  41bdba:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bdbe:	b212      	sxth	r2, r2
  41bdc0:	f7fe bc3b 	b.w	41a63a <lv_theme_material_init+0x25e>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  41bdc4:	2300      	movs	r3, #0
  41bdc6:	2109      	movs	r1, #9
  41bdc8:	2406      	movs	r4, #6
  41bdca:	2502      	movs	r5, #2
  41bdcc:	f7fe bc46 	b.w	41a65c <lv_theme_material_init+0x280>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  41bdd0:	2101      	movs	r1, #1
  41bdd2:	230c      	movs	r3, #12
  41bdd4:	2403      	movs	r4, #3
  41bdd6:	f7fe bcb1 	b.w	41a73c <lv_theme_material_init+0x360>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  41bdda:	2000      	movs	r0, #0
  41bddc:	4b8b      	ldr	r3, [pc, #556]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bdde:	4798      	blx	r3
  41bde0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41bde4:	3050      	adds	r0, #80	; 0x50
  41bde6:	4b8a      	ldr	r3, [pc, #552]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bde8:	fb83 2300 	smull	r2, r3, r3, r0
  41bdec:	17c2      	asrs	r2, r0, #31
  41bdee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bdf2:	b212      	sxth	r2, r2
  41bdf4:	f7fe bcd7 	b.w	41a7a6 <lv_theme_material_init+0x3ca>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41bdf8:	2000      	movs	r0, #0
  41bdfa:	4b84      	ldr	r3, [pc, #528]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bdfc:	4798      	blx	r3
  41bdfe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be02:	3050      	adds	r0, #80	; 0x50
  41be04:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41be08:	da02      	bge.n	41be10 <lv_theme_material_init+0x1a34>
  41be0a:	2201      	movs	r2, #1
  41be0c:	f7fe bce4 	b.w	41a7d8 <lv_theme_material_init+0x3fc>
  41be10:	2000      	movs	r0, #0
  41be12:	4b7e      	ldr	r3, [pc, #504]	; (41c00c <lv_theme_material_init+0x1c30>)
  41be14:	4798      	blx	r3
  41be16:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be1a:	3050      	adds	r0, #80	; 0x50
  41be1c:	4b7c      	ldr	r3, [pc, #496]	; (41c010 <lv_theme_material_init+0x1c34>)
  41be1e:	fb83 2300 	smull	r2, r3, r3, r0
  41be22:	17c2      	asrs	r2, r0, #31
  41be24:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41be28:	b212      	sxth	r2, r2
  41be2a:	f7fe bcd5 	b.w	41a7d8 <lv_theme_material_init+0x3fc>
  41be2e:	2000      	movs	r0, #0
  41be30:	4b76      	ldr	r3, [pc, #472]	; (41c00c <lv_theme_material_init+0x1c30>)
  41be32:	4798      	blx	r3
  41be34:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be38:	0040      	lsls	r0, r0, #1
  41be3a:	3050      	adds	r0, #80	; 0x50
  41be3c:	4b74      	ldr	r3, [pc, #464]	; (41c010 <lv_theme_material_init+0x1c34>)
  41be3e:	fb83 2300 	smull	r2, r3, r3, r0
  41be42:	17c2      	asrs	r2, r0, #31
  41be44:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41be48:	b212      	sxth	r2, r2
  41be4a:	f7fe bcc5 	b.w	41a7d8 <lv_theme_material_init+0x3fc>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41be4e:	2000      	movs	r0, #0
  41be50:	4b6e      	ldr	r3, [pc, #440]	; (41c00c <lv_theme_material_init+0x1c30>)
  41be52:	4798      	blx	r3
  41be54:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be58:	3050      	adds	r0, #80	; 0x50
  41be5a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41be5e:	da02      	bge.n	41be66 <lv_theme_material_init+0x1a8a>
  41be60:	2201      	movs	r2, #1
  41be62:	f7fe bcd2 	b.w	41a80a <lv_theme_material_init+0x42e>
  41be66:	2000      	movs	r0, #0
  41be68:	4b68      	ldr	r3, [pc, #416]	; (41c00c <lv_theme_material_init+0x1c30>)
  41be6a:	4798      	blx	r3
  41be6c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be70:	3050      	adds	r0, #80	; 0x50
  41be72:	4b67      	ldr	r3, [pc, #412]	; (41c010 <lv_theme_material_init+0x1c34>)
  41be74:	fb83 2300 	smull	r2, r3, r3, r0
  41be78:	17c2      	asrs	r2, r0, #31
  41be7a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41be7e:	b212      	sxth	r2, r2
  41be80:	f7fe bcc3 	b.w	41a80a <lv_theme_material_init+0x42e>
  41be84:	2000      	movs	r0, #0
  41be86:	4b61      	ldr	r3, [pc, #388]	; (41c00c <lv_theme_material_init+0x1c30>)
  41be88:	4798      	blx	r3
  41be8a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be8e:	0040      	lsls	r0, r0, #1
  41be90:	3050      	adds	r0, #80	; 0x50
  41be92:	4b5f      	ldr	r3, [pc, #380]	; (41c010 <lv_theme_material_init+0x1c34>)
  41be94:	fb83 2300 	smull	r2, r3, r3, r0
  41be98:	17c2      	asrs	r2, r0, #31
  41be9a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41be9e:	b212      	sxth	r2, r2
  41bea0:	f7fe bcb3 	b.w	41a80a <lv_theme_material_init+0x42e>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41bea4:	2000      	movs	r0, #0
  41bea6:	4b59      	ldr	r3, [pc, #356]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bea8:	4798      	blx	r3
  41beaa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41beae:	3050      	adds	r0, #80	; 0x50
  41beb0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41beb4:	da02      	bge.n	41bebc <lv_theme_material_init+0x1ae0>
  41beb6:	2201      	movs	r2, #1
  41beb8:	f7fe bcc0 	b.w	41a83c <lv_theme_material_init+0x460>
  41bebc:	2000      	movs	r0, #0
  41bebe:	4b53      	ldr	r3, [pc, #332]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bec0:	4798      	blx	r3
  41bec2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bec6:	3050      	adds	r0, #80	; 0x50
  41bec8:	4b51      	ldr	r3, [pc, #324]	; (41c010 <lv_theme_material_init+0x1c34>)
  41beca:	fb83 2300 	smull	r2, r3, r3, r0
  41bece:	17c2      	asrs	r2, r0, #31
  41bed0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bed4:	b212      	sxth	r2, r2
  41bed6:	f7fe bcb1 	b.w	41a83c <lv_theme_material_init+0x460>
  41beda:	2000      	movs	r0, #0
  41bedc:	4b4b      	ldr	r3, [pc, #300]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bede:	4798      	blx	r3
  41bee0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bee4:	0040      	lsls	r0, r0, #1
  41bee6:	3050      	adds	r0, #80	; 0x50
  41bee8:	4b49      	ldr	r3, [pc, #292]	; (41c010 <lv_theme_material_init+0x1c34>)
  41beea:	fb83 2300 	smull	r2, r3, r3, r0
  41beee:	17c2      	asrs	r2, r0, #31
  41bef0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bef4:	b212      	sxth	r2, r2
  41bef6:	f7fe bca1 	b.w	41a83c <lv_theme_material_init+0x460>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  41befa:	2000      	movs	r0, #0
  41befc:	4b43      	ldr	r3, [pc, #268]	; (41c00c <lv_theme_material_init+0x1c30>)
  41befe:	4798      	blx	r3
  41bf00:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bf04:	0040      	lsls	r0, r0, #1
  41bf06:	3050      	adds	r0, #80	; 0x50
  41bf08:	4b41      	ldr	r3, [pc, #260]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bf0a:	fb83 2300 	smull	r2, r3, r3, r0
  41bf0e:	17c2      	asrs	r2, r0, #31
  41bf10:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf14:	b212      	sxth	r2, r2
  41bf16:	f7fe bca8 	b.w	41a86a <lv_theme_material_init+0x48e>
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
  41bf1a:	2303      	movs	r3, #3
  41bf1c:	211e      	movs	r1, #30
  41bf1e:	241d      	movs	r4, #29
  41bf20:	2507      	movs	r5, #7
  41bf22:	f7fe bcb9 	b.w	41a898 <lv_theme_material_init+0x4bc>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  41bf26:	2000      	movs	r0, #0
  41bf28:	4b38      	ldr	r3, [pc, #224]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bf2a:	4798      	blx	r3
  41bf2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bf30:	0080      	lsls	r0, r0, #2
  41bf32:	3050      	adds	r0, #80	; 0x50
  41bf34:	4b36      	ldr	r3, [pc, #216]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bf36:	fb83 2300 	smull	r2, r3, r3, r0
  41bf3a:	17c2      	asrs	r2, r0, #31
  41bf3c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf40:	b212      	sxth	r2, r2
  41bf42:	f7fe bcc5 	b.w	41a8d0 <lv_theme_material_init+0x4f4>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41bf46:	2000      	movs	r0, #0
  41bf48:	4b30      	ldr	r3, [pc, #192]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bf4a:	4798      	blx	r3
  41bf4c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41bf50:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41bf54:	3050      	adds	r0, #80	; 0x50
  41bf56:	4b2e      	ldr	r3, [pc, #184]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bf58:	fb83 2300 	smull	r2, r3, r3, r0
  41bf5c:	17c2      	asrs	r2, r0, #31
  41bf5e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf62:	b212      	sxth	r2, r2
  41bf64:	f7fe bcfc 	b.w	41a960 <lv_theme_material_init+0x584>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41bf68:	2000      	movs	r0, #0
  41bf6a:	4b28      	ldr	r3, [pc, #160]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bf6c:	4798      	blx	r3
  41bf6e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41bf72:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41bf76:	3050      	adds	r0, #80	; 0x50
  41bf78:	4b25      	ldr	r3, [pc, #148]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bf7a:	fb83 2300 	smull	r2, r3, r3, r0
  41bf7e:	17c2      	asrs	r2, r0, #31
  41bf80:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf84:	b212      	sxth	r2, r2
  41bf86:	f7fe bcff 	b.w	41a988 <lv_theme_material_init+0x5ac>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41bf8a:	2000      	movs	r0, #0
  41bf8c:	4b1f      	ldr	r3, [pc, #124]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bf8e:	4798      	blx	r3
  41bf90:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41bf94:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41bf98:	3050      	adds	r0, #80	; 0x50
  41bf9a:	4b1d      	ldr	r3, [pc, #116]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bf9c:	fb83 2300 	smull	r2, r3, r3, r0
  41bfa0:	17c2      	asrs	r2, r0, #31
  41bfa2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bfa6:	b212      	sxth	r2, r2
  41bfa8:	f7fe bd02 	b.w	41a9b0 <lv_theme_material_init+0x5d4>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41bfac:	2000      	movs	r0, #0
  41bfae:	4b17      	ldr	r3, [pc, #92]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bfb0:	4798      	blx	r3
  41bfb2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41bfb6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41bfba:	3050      	adds	r0, #80	; 0x50
  41bfbc:	4b14      	ldr	r3, [pc, #80]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bfbe:	fb83 2300 	smull	r2, r3, r3, r0
  41bfc2:	17c2      	asrs	r2, r0, #31
  41bfc4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bfc8:	b212      	sxth	r2, r2
  41bfca:	f7fe bd05 	b.w	41a9d8 <lv_theme_material_init+0x5fc>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41bfce:	2000      	movs	r0, #0
  41bfd0:	4b0e      	ldr	r3, [pc, #56]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bfd2:	4798      	blx	r3
  41bfd4:	3014      	adds	r0, #20
  41bfd6:	0080      	lsls	r0, r0, #2
  41bfd8:	4b0d      	ldr	r3, [pc, #52]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bfda:	fb83 2300 	smull	r2, r3, r3, r0
  41bfde:	17c2      	asrs	r2, r0, #31
  41bfe0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bfe4:	b212      	sxth	r2, r2
  41bfe6:	f7fe bd20 	b.w	41aa2a <lv_theme_material_init+0x64e>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41bfea:	2000      	movs	r0, #0
  41bfec:	4b07      	ldr	r3, [pc, #28]	; (41c00c <lv_theme_material_init+0x1c30>)
  41bfee:	4798      	blx	r3
  41bff0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bff4:	0040      	lsls	r0, r0, #1
  41bff6:	3050      	adds	r0, #80	; 0x50
  41bff8:	4b05      	ldr	r3, [pc, #20]	; (41c010 <lv_theme_material_init+0x1c34>)
  41bffa:	fb83 2300 	smull	r2, r3, r3, r0
  41bffe:	17c2      	asrs	r2, r0, #31
  41c000:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c004:	b212      	sxth	r2, r2
  41c006:	f7fe bd23 	b.w	41aa50 <lv_theme_material_init+0x674>
  41c00a:	bf00      	nop
  41c00c:	004140fd 	.word	0x004140fd
  41c010:	66666667 	.word	0x66666667
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41c014:	2000      	movs	r0, #0
  41c016:	4bc8      	ldr	r3, [pc, #800]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c018:	4798      	blx	r3
  41c01a:	3028      	adds	r0, #40	; 0x28
  41c01c:	0040      	lsls	r0, r0, #1
  41c01e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c022:	da02      	bge.n	41c02a <lv_theme_material_init+0x1c4e>
  41c024:	2201      	movs	r2, #1
  41c026:	f7fe bd33 	b.w	41aa90 <lv_theme_material_init+0x6b4>
  41c02a:	2000      	movs	r0, #0
  41c02c:	4bc2      	ldr	r3, [pc, #776]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c02e:	4798      	blx	r3
  41c030:	3028      	adds	r0, #40	; 0x28
  41c032:	0040      	lsls	r0, r0, #1
  41c034:	4bc1      	ldr	r3, [pc, #772]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c036:	fb83 2300 	smull	r2, r3, r3, r0
  41c03a:	17c2      	asrs	r2, r0, #31
  41c03c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c040:	b212      	sxth	r2, r2
  41c042:	f7fe bd25 	b.w	41aa90 <lv_theme_material_init+0x6b4>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41c046:	2000      	movs	r0, #0
  41c048:	4bbb      	ldr	r3, [pc, #748]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c04a:	4798      	blx	r3
  41c04c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c050:	0040      	lsls	r0, r0, #1
  41c052:	3050      	adds	r0, #80	; 0x50
  41c054:	4bb9      	ldr	r3, [pc, #740]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c056:	fb83 2300 	smull	r2, r3, r3, r0
  41c05a:	17c2      	asrs	r2, r0, #31
  41c05c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c060:	b212      	sxth	r2, r2
  41c062:	f7fe bd28 	b.w	41aab6 <lv_theme_material_init+0x6da>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  41c066:	2000      	movs	r0, #0
  41c068:	4bb3      	ldr	r3, [pc, #716]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c06a:	4798      	blx	r3
  41c06c:	3014      	adds	r0, #20
  41c06e:	0080      	lsls	r0, r0, #2
  41c070:	4bb2      	ldr	r3, [pc, #712]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c072:	fb83 2300 	smull	r2, r3, r3, r0
  41c076:	17c2      	asrs	r2, r0, #31
  41c078:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c07c:	b212      	sxth	r2, r2
  41c07e:	f7fe bd40 	b.w	41ab02 <lv_theme_material_init+0x726>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41c082:	2000      	movs	r0, #0
  41c084:	4bac      	ldr	r3, [pc, #688]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c086:	4798      	blx	r3
  41c088:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41c08c:	3050      	adds	r0, #80	; 0x50
  41c08e:	4bab      	ldr	r3, [pc, #684]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c090:	fb83 2300 	smull	r2, r3, r3, r0
  41c094:	17c2      	asrs	r2, r0, #31
  41c096:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c09a:	b212      	sxth	r2, r2
  41c09c:	f7fe bd6a 	b.w	41ab74 <lv_theme_material_init+0x798>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41c0a0:	2000      	movs	r0, #0
  41c0a2:	4ba5      	ldr	r3, [pc, #660]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c0a4:	4798      	blx	r3
  41c0a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41c0aa:	3050      	adds	r0, #80	; 0x50
  41c0ac:	4ba3      	ldr	r3, [pc, #652]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c0ae:	fb83 2300 	smull	r2, r3, r3, r0
  41c0b2:	17c2      	asrs	r2, r0, #31
  41c0b4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c0b8:	b212      	sxth	r2, r2
  41c0ba:	f7fe bd6d 	b.w	41ab98 <lv_theme_material_init+0x7bc>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41c0be:	2000      	movs	r0, #0
  41c0c0:	4b9d      	ldr	r3, [pc, #628]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c0c2:	4798      	blx	r3
  41c0c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41c0c8:	3050      	adds	r0, #80	; 0x50
  41c0ca:	4b9c      	ldr	r3, [pc, #624]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c0cc:	fb83 2300 	smull	r2, r3, r3, r0
  41c0d0:	17c2      	asrs	r2, r0, #31
  41c0d2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c0d6:	b212      	sxth	r2, r2
  41c0d8:	f7fe bd70 	b.w	41abbc <lv_theme_material_init+0x7e0>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41c0dc:	2000      	movs	r0, #0
  41c0de:	4b96      	ldr	r3, [pc, #600]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c0e0:	4798      	blx	r3
  41c0e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41c0e6:	3050      	adds	r0, #80	; 0x50
  41c0e8:	4b94      	ldr	r3, [pc, #592]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c0ea:	fb83 2300 	smull	r2, r3, r3, r0
  41c0ee:	17c2      	asrs	r2, r0, #31
  41c0f0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c0f4:	b212      	sxth	r2, r2
  41c0f6:	f7fe bd73 	b.w	41abe0 <lv_theme_material_init+0x804>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41c0fa:	2000      	movs	r0, #0
  41c0fc:	4b8e      	ldr	r3, [pc, #568]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c0fe:	4798      	blx	r3
  41c100:	3014      	adds	r0, #20
  41c102:	0080      	lsls	r0, r0, #2
  41c104:	4b8d      	ldr	r3, [pc, #564]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c106:	fb83 2300 	smull	r2, r3, r3, r0
  41c10a:	17c2      	asrs	r2, r0, #31
  41c10c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c110:	b212      	sxth	r2, r2
  41c112:	f7fe bd7f 	b.w	41ac14 <lv_theme_material_init+0x838>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  41c116:	2307      	movs	r3, #7
  41c118:	2108      	movs	r1, #8
  41c11a:	461c      	mov	r4, r3
  41c11c:	2501      	movs	r5, #1
  41c11e:	f7fe bd8f 	b.w	41ac40 <lv_theme_material_init+0x864>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41c122:	2000      	movs	r0, #0
  41c124:	4b84      	ldr	r3, [pc, #528]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c126:	4798      	blx	r3
  41c128:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c12c:	3050      	adds	r0, #80	; 0x50
  41c12e:	4b83      	ldr	r3, [pc, #524]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c130:	fb83 2300 	smull	r2, r3, r3, r0
  41c134:	17c2      	asrs	r2, r0, #31
  41c136:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c13a:	b212      	sxth	r2, r2
  41c13c:	f7fe bda2 	b.w	41ac84 <lv_theme_material_init+0x8a8>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41c140:	2000      	movs	r0, #0
  41c142:	4b7d      	ldr	r3, [pc, #500]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c144:	4798      	blx	r3
  41c146:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c14a:	3050      	adds	r0, #80	; 0x50
  41c14c:	4b7b      	ldr	r3, [pc, #492]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c14e:	fb83 2300 	smull	r2, r3, r3, r0
  41c152:	17c2      	asrs	r2, r0, #31
  41c154:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c158:	b212      	sxth	r2, r2
  41c15a:	f7fe bda5 	b.w	41aca8 <lv_theme_material_init+0x8cc>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41c15e:	2000      	movs	r0, #0
  41c160:	4b75      	ldr	r3, [pc, #468]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c162:	4798      	blx	r3
  41c164:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c168:	3050      	adds	r0, #80	; 0x50
  41c16a:	4b74      	ldr	r3, [pc, #464]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c16c:	fb83 2300 	smull	r2, r3, r3, r0
  41c170:	17c2      	asrs	r2, r0, #31
  41c172:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c176:	b212      	sxth	r2, r2
  41c178:	f7fe bda8 	b.w	41accc <lv_theme_material_init+0x8f0>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41c17c:	2000      	movs	r0, #0
  41c17e:	4b6e      	ldr	r3, [pc, #440]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c180:	4798      	blx	r3
  41c182:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c186:	3050      	adds	r0, #80	; 0x50
  41c188:	4b6c      	ldr	r3, [pc, #432]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c18a:	fb83 2300 	smull	r2, r3, r3, r0
  41c18e:	17c2      	asrs	r2, r0, #31
  41c190:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c194:	b212      	sxth	r2, r2
  41c196:	f7fe bdab 	b.w	41acf0 <lv_theme_material_init+0x914>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  41c19a:	2000      	movs	r0, #0
  41c19c:	4b66      	ldr	r3, [pc, #408]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c19e:	4798      	blx	r3
  41c1a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41c1a4:	3050      	adds	r0, #80	; 0x50
  41c1a6:	4b65      	ldr	r3, [pc, #404]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c1a8:	fb83 2300 	smull	r2, r3, r3, r0
  41c1ac:	17c2      	asrs	r2, r0, #31
  41c1ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c1b2:	b212      	sxth	r2, r2
  41c1b4:	f7fe bdc3 	b.w	41ad3e <lv_theme_material_init+0x962>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  41c1b8:	2000      	movs	r0, #0
  41c1ba:	4b5f      	ldr	r3, [pc, #380]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c1bc:	4798      	blx	r3
  41c1be:	2232      	movs	r2, #50	; 0x32
  41c1c0:	fb02 f000 	mul.w	r0, r2, r0
  41c1c4:	3050      	adds	r0, #80	; 0x50
  41c1c6:	4b5d      	ldr	r3, [pc, #372]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c1c8:	fb83 2300 	smull	r2, r3, r3, r0
  41c1cc:	17c2      	asrs	r2, r0, #31
  41c1ce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c1d2:	b212      	sxth	r2, r2
  41c1d4:	f7fe bdca 	b.w	41ad6c <lv_theme_material_init+0x990>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  41c1d8:	2000      	movs	r0, #0
  41c1da:	4b57      	ldr	r3, [pc, #348]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c1dc:	4798      	blx	r3
  41c1de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41c1e2:	3050      	adds	r0, #80	; 0x50
  41c1e4:	4b55      	ldr	r3, [pc, #340]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c1e6:	fb83 2300 	smull	r2, r3, r3, r0
  41c1ea:	17c2      	asrs	r2, r0, #31
  41c1ec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c1f0:	b212      	sxth	r2, r2
  41c1f2:	f7fe be1b 	b.w	41ae2c <lv_theme_material_init+0xa50>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41c1f6:	2000      	movs	r0, #0
  41c1f8:	4b4f      	ldr	r3, [pc, #316]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c1fa:	4798      	blx	r3
  41c1fc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41c200:	3050      	adds	r0, #80	; 0x50
  41c202:	4b4e      	ldr	r3, [pc, #312]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c204:	fb83 2300 	smull	r2, r3, r3, r0
  41c208:	17c2      	asrs	r2, r0, #31
  41c20a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c20e:	b212      	sxth	r2, r2
  41c210:	f7fe be1e 	b.w	41ae50 <lv_theme_material_init+0xa74>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41c214:	2000      	movs	r0, #0
  41c216:	4b48      	ldr	r3, [pc, #288]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c218:	4798      	blx	r3
  41c21a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41c21e:	3050      	adds	r0, #80	; 0x50
  41c220:	4b46      	ldr	r3, [pc, #280]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c222:	fb83 2300 	smull	r2, r3, r3, r0
  41c226:	17c2      	asrs	r2, r0, #31
  41c228:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c22c:	b212      	sxth	r2, r2
  41c22e:	f7fe be21 	b.w	41ae74 <lv_theme_material_init+0xa98>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  41c232:	2000      	movs	r0, #0
  41c234:	4b40      	ldr	r3, [pc, #256]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c236:	4798      	blx	r3
  41c238:	3028      	adds	r0, #40	; 0x28
  41c23a:	0040      	lsls	r0, r0, #1
  41c23c:	4b3f      	ldr	r3, [pc, #252]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c23e:	fb83 2300 	smull	r2, r3, r3, r0
  41c242:	17c2      	asrs	r2, r0, #31
  41c244:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c248:	b212      	sxth	r2, r2
  41c24a:	f7fe be63 	b.w	41af14 <lv_theme_material_init+0xb38>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  41c24e:	2000      	movs	r0, #0
  41c250:	4b39      	ldr	r3, [pc, #228]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c252:	4798      	blx	r3
  41c254:	3050      	adds	r0, #80	; 0x50
  41c256:	4b39      	ldr	r3, [pc, #228]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c258:	fb83 2300 	smull	r2, r3, r3, r0
  41c25c:	17c2      	asrs	r2, r0, #31
  41c25e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c262:	b212      	sxth	r2, r2
  41c264:	f7fe be66 	b.w	41af34 <lv_theme_material_init+0xb58>
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  41c268:	2102      	movs	r1, #2
  41c26a:	2315      	movs	r3, #21
  41c26c:	461c      	mov	r4, r3
  41c26e:	f7fe be7a 	b.w	41af66 <lv_theme_material_init+0xb8a>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41c272:	2000      	movs	r0, #0
  41c274:	4b30      	ldr	r3, [pc, #192]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c276:	4798      	blx	r3
  41c278:	2264      	movs	r2, #100	; 0x64
  41c27a:	fb02 f000 	mul.w	r0, r2, r0
  41c27e:	3050      	adds	r0, #80	; 0x50
  41c280:	4b2e      	ldr	r3, [pc, #184]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c282:	fb83 2300 	smull	r2, r3, r3, r0
  41c286:	17c2      	asrs	r2, r0, #31
  41c288:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c28c:	b212      	sxth	r2, r2
  41c28e:	f7fe be9f 	b.w	41afd0 <lv_theme_material_init+0xbf4>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41c292:	2000      	movs	r0, #0
  41c294:	4b28      	ldr	r3, [pc, #160]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c296:	4798      	blx	r3
  41c298:	2264      	movs	r2, #100	; 0x64
  41c29a:	fb02 f000 	mul.w	r0, r2, r0
  41c29e:	3050      	adds	r0, #80	; 0x50
  41c2a0:	4b26      	ldr	r3, [pc, #152]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c2a2:	fb83 2300 	smull	r2, r3, r3, r0
  41c2a6:	17c2      	asrs	r2, r0, #31
  41c2a8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c2ac:	b212      	sxth	r2, r2
  41c2ae:	f7fe bea2 	b.w	41aff6 <lv_theme_material_init+0xc1a>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
  41c2b2:	2307      	movs	r3, #7
  41c2b4:	211f      	movs	r1, #31
  41c2b6:	460c      	mov	r4, r1
  41c2b8:	461d      	mov	r5, r3
  41c2ba:	f7fe beea 	b.w	41b092 <lv_theme_material_init+0xcb6>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
  41c2be:	231d      	movs	r3, #29
  41c2c0:	4619      	mov	r1, r3
  41c2c2:	2407      	movs	r4, #7
  41c2c4:	f7fe befe 	b.w	41b0c4 <lv_theme_material_init+0xce8>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
  41c2c8:	2307      	movs	r3, #7
  41c2ca:	211f      	movs	r1, #31
  41c2cc:	460c      	mov	r4, r1
  41c2ce:	461d      	mov	r5, r3
  41c2d0:	f7fe bf14 	b.w	41b0fc <lv_theme_material_init+0xd20>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41c2d4:	2308      	movs	r3, #8
  41c2d6:	2107      	movs	r1, #7
  41c2d8:	2401      	movs	r4, #1
  41c2da:	f7fe bf3a 	b.w	41b152 <lv_theme_material_init+0xd76>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41c2de:	2308      	movs	r3, #8
  41c2e0:	2107      	movs	r1, #7
  41c2e2:	2401      	movs	r4, #1
  41c2e4:	f7fe bf75 	b.w	41b1d2 <lv_theme_material_init+0xdf6>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  41c2e8:	2000      	movs	r0, #0
  41c2ea:	4b13      	ldr	r3, [pc, #76]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c2ec:	4798      	blx	r3
  41c2ee:	3028      	adds	r0, #40	; 0x28
  41c2f0:	0040      	lsls	r0, r0, #1
  41c2f2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c2f6:	da02      	bge.n	41c2fe <lv_theme_material_init+0x1f22>
  41c2f8:	2201      	movs	r2, #1
  41c2fa:	f7fe bfe0 	b.w	41b2be <lv_theme_material_init+0xee2>
  41c2fe:	2000      	movs	r0, #0
  41c300:	4b0d      	ldr	r3, [pc, #52]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c302:	4798      	blx	r3
  41c304:	3028      	adds	r0, #40	; 0x28
  41c306:	0040      	lsls	r0, r0, #1
  41c308:	4b0c      	ldr	r3, [pc, #48]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c30a:	fb83 2300 	smull	r2, r3, r3, r0
  41c30e:	17c2      	asrs	r2, r0, #31
  41c310:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c314:	b212      	sxth	r2, r2
  41c316:	f7fe bfd2 	b.w	41b2be <lv_theme_material_init+0xee2>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  41c31a:	2000      	movs	r0, #0
  41c31c:	4b06      	ldr	r3, [pc, #24]	; (41c338 <lv_theme_material_init+0x1f5c>)
  41c31e:	4798      	blx	r3
  41c320:	3028      	adds	r0, #40	; 0x28
  41c322:	0040      	lsls	r0, r0, #1
  41c324:	4b05      	ldr	r3, [pc, #20]	; (41c33c <lv_theme_material_init+0x1f60>)
  41c326:	fb83 2300 	smull	r2, r3, r3, r0
  41c32a:	17c2      	asrs	r2, r0, #31
  41c32c:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c330:	b212      	sxth	r2, r2
  41c332:	f7fe bfd7 	b.w	41b2e4 <lv_theme_material_init+0xf08>
  41c336:	bf00      	nop
  41c338:	004140fd 	.word	0x004140fd
  41c33c:	66666667 	.word	0x66666667
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c340:	2000      	movs	r0, #0
  41c342:	4bc8      	ldr	r3, [pc, #800]	; (41c664 <lv_theme_material_init+0x2288>)
  41c344:	4798      	blx	r3
  41c346:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c34a:	3050      	adds	r0, #80	; 0x50
  41c34c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c350:	da02      	bge.n	41c358 <lv_theme_material_init+0x1f7c>
  41c352:	2201      	movs	r2, #1
  41c354:	f7fe bff3 	b.w	41b33e <lv_theme_material_init+0xf62>
  41c358:	2000      	movs	r0, #0
  41c35a:	4bc2      	ldr	r3, [pc, #776]	; (41c664 <lv_theme_material_init+0x2288>)
  41c35c:	4798      	blx	r3
  41c35e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c362:	3050      	adds	r0, #80	; 0x50
  41c364:	4bc0      	ldr	r3, [pc, #768]	; (41c668 <lv_theme_material_init+0x228c>)
  41c366:	fb83 2300 	smull	r2, r3, r3, r0
  41c36a:	17c2      	asrs	r2, r0, #31
  41c36c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c370:	b212      	sxth	r2, r2
  41c372:	f7fe bfe4 	b.w	41b33e <lv_theme_material_init+0xf62>
  41c376:	2000      	movs	r0, #0
  41c378:	4bba      	ldr	r3, [pc, #744]	; (41c664 <lv_theme_material_init+0x2288>)
  41c37a:	4798      	blx	r3
  41c37c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c380:	0040      	lsls	r0, r0, #1
  41c382:	3050      	adds	r0, #80	; 0x50
  41c384:	4bb8      	ldr	r3, [pc, #736]	; (41c668 <lv_theme_material_init+0x228c>)
  41c386:	fb83 2300 	smull	r2, r3, r3, r0
  41c38a:	17c2      	asrs	r2, r0, #31
  41c38c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c390:	b212      	sxth	r2, r2
  41c392:	f7fe bfd4 	b.w	41b33e <lv_theme_material_init+0xf62>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c396:	2000      	movs	r0, #0
  41c398:	4bb2      	ldr	r3, [pc, #712]	; (41c664 <lv_theme_material_init+0x2288>)
  41c39a:	4798      	blx	r3
  41c39c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c3a0:	3050      	adds	r0, #80	; 0x50
  41c3a2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c3a6:	da02      	bge.n	41c3ae <lv_theme_material_init+0x1fd2>
  41c3a8:	2201      	movs	r2, #1
  41c3aa:	f7fe bfe1 	b.w	41b370 <lv_theme_material_init+0xf94>
  41c3ae:	2000      	movs	r0, #0
  41c3b0:	4bac      	ldr	r3, [pc, #688]	; (41c664 <lv_theme_material_init+0x2288>)
  41c3b2:	4798      	blx	r3
  41c3b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c3b8:	3050      	adds	r0, #80	; 0x50
  41c3ba:	4bab      	ldr	r3, [pc, #684]	; (41c668 <lv_theme_material_init+0x228c>)
  41c3bc:	fb83 2300 	smull	r2, r3, r3, r0
  41c3c0:	17c2      	asrs	r2, r0, #31
  41c3c2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c3c6:	b212      	sxth	r2, r2
  41c3c8:	f7fe bfd2 	b.w	41b370 <lv_theme_material_init+0xf94>
  41c3cc:	2000      	movs	r0, #0
  41c3ce:	4ba5      	ldr	r3, [pc, #660]	; (41c664 <lv_theme_material_init+0x2288>)
  41c3d0:	4798      	blx	r3
  41c3d2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c3d6:	0040      	lsls	r0, r0, #1
  41c3d8:	3050      	adds	r0, #80	; 0x50
  41c3da:	4ba3      	ldr	r3, [pc, #652]	; (41c668 <lv_theme_material_init+0x228c>)
  41c3dc:	fb83 2300 	smull	r2, r3, r3, r0
  41c3e0:	17c2      	asrs	r2, r0, #31
  41c3e2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c3e6:	b212      	sxth	r2, r2
  41c3e8:	f7fe bfc2 	b.w	41b370 <lv_theme_material_init+0xf94>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c3ec:	2000      	movs	r0, #0
  41c3ee:	4b9d      	ldr	r3, [pc, #628]	; (41c664 <lv_theme_material_init+0x2288>)
  41c3f0:	4798      	blx	r3
  41c3f2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c3f6:	3050      	adds	r0, #80	; 0x50
  41c3f8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c3fc:	da02      	bge.n	41c404 <lv_theme_material_init+0x2028>
  41c3fe:	2201      	movs	r2, #1
  41c400:	f7fe bfcf 	b.w	41b3a2 <lv_theme_material_init+0xfc6>
  41c404:	2000      	movs	r0, #0
  41c406:	4b97      	ldr	r3, [pc, #604]	; (41c664 <lv_theme_material_init+0x2288>)
  41c408:	4798      	blx	r3
  41c40a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c40e:	3050      	adds	r0, #80	; 0x50
  41c410:	4b95      	ldr	r3, [pc, #596]	; (41c668 <lv_theme_material_init+0x228c>)
  41c412:	fb83 2300 	smull	r2, r3, r3, r0
  41c416:	17c2      	asrs	r2, r0, #31
  41c418:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c41c:	b212      	sxth	r2, r2
  41c41e:	f7fe bfc0 	b.w	41b3a2 <lv_theme_material_init+0xfc6>
  41c422:	2000      	movs	r0, #0
  41c424:	4b8f      	ldr	r3, [pc, #572]	; (41c664 <lv_theme_material_init+0x2288>)
  41c426:	4798      	blx	r3
  41c428:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c42c:	0040      	lsls	r0, r0, #1
  41c42e:	3050      	adds	r0, #80	; 0x50
  41c430:	4b8d      	ldr	r3, [pc, #564]	; (41c668 <lv_theme_material_init+0x228c>)
  41c432:	fb83 2300 	smull	r2, r3, r3, r0
  41c436:	17c2      	asrs	r2, r0, #31
  41c438:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c43c:	b212      	sxth	r2, r2
  41c43e:	f7fe bfb0 	b.w	41b3a2 <lv_theme_material_init+0xfc6>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c442:	2000      	movs	r0, #0
  41c444:	4b87      	ldr	r3, [pc, #540]	; (41c664 <lv_theme_material_init+0x2288>)
  41c446:	4798      	blx	r3
  41c448:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c44c:	3050      	adds	r0, #80	; 0x50
  41c44e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c452:	da02      	bge.n	41c45a <lv_theme_material_init+0x207e>
  41c454:	2201      	movs	r2, #1
  41c456:	f7fe bfbd 	b.w	41b3d4 <lv_theme_material_init+0xff8>
  41c45a:	2000      	movs	r0, #0
  41c45c:	4b81      	ldr	r3, [pc, #516]	; (41c664 <lv_theme_material_init+0x2288>)
  41c45e:	4798      	blx	r3
  41c460:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c464:	3050      	adds	r0, #80	; 0x50
  41c466:	4b80      	ldr	r3, [pc, #512]	; (41c668 <lv_theme_material_init+0x228c>)
  41c468:	fb83 2300 	smull	r2, r3, r3, r0
  41c46c:	17c2      	asrs	r2, r0, #31
  41c46e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c472:	b212      	sxth	r2, r2
  41c474:	f7fe bfae 	b.w	41b3d4 <lv_theme_material_init+0xff8>
  41c478:	2000      	movs	r0, #0
  41c47a:	4b7a      	ldr	r3, [pc, #488]	; (41c664 <lv_theme_material_init+0x2288>)
  41c47c:	4798      	blx	r3
  41c47e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c482:	0040      	lsls	r0, r0, #1
  41c484:	3050      	adds	r0, #80	; 0x50
  41c486:	4b78      	ldr	r3, [pc, #480]	; (41c668 <lv_theme_material_init+0x228c>)
  41c488:	fb83 2300 	smull	r2, r3, r3, r0
  41c48c:	17c2      	asrs	r2, r0, #31
  41c48e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c492:	b212      	sxth	r2, r2
  41c494:	f7fe bf9e 	b.w	41b3d4 <lv_theme_material_init+0xff8>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41c498:	2000      	movs	r0, #0
  41c49a:	4b72      	ldr	r3, [pc, #456]	; (41c664 <lv_theme_material_init+0x2288>)
  41c49c:	4798      	blx	r3
  41c49e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c4a2:	3050      	adds	r0, #80	; 0x50
  41c4a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c4a8:	da02      	bge.n	41c4b0 <lv_theme_material_init+0x20d4>
  41c4aa:	2201      	movs	r2, #1
  41c4ac:	f7fe bfab 	b.w	41b406 <lv_theme_material_init+0x102a>
  41c4b0:	2000      	movs	r0, #0
  41c4b2:	4b6c      	ldr	r3, [pc, #432]	; (41c664 <lv_theme_material_init+0x2288>)
  41c4b4:	4798      	blx	r3
  41c4b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c4ba:	3050      	adds	r0, #80	; 0x50
  41c4bc:	4b6a      	ldr	r3, [pc, #424]	; (41c668 <lv_theme_material_init+0x228c>)
  41c4be:	fb83 2300 	smull	r2, r3, r3, r0
  41c4c2:	17c2      	asrs	r2, r0, #31
  41c4c4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c4c8:	b212      	sxth	r2, r2
  41c4ca:	f7fe bf9c 	b.w	41b406 <lv_theme_material_init+0x102a>
  41c4ce:	2000      	movs	r0, #0
  41c4d0:	4b64      	ldr	r3, [pc, #400]	; (41c664 <lv_theme_material_init+0x2288>)
  41c4d2:	4798      	blx	r3
  41c4d4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c4d8:	0040      	lsls	r0, r0, #1
  41c4da:	3050      	adds	r0, #80	; 0x50
  41c4dc:	4b62      	ldr	r3, [pc, #392]	; (41c668 <lv_theme_material_init+0x228c>)
  41c4de:	fb83 2300 	smull	r2, r3, r3, r0
  41c4e2:	17c2      	asrs	r2, r0, #31
  41c4e4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c4e8:	b212      	sxth	r2, r2
  41c4ea:	f7fe bf8c 	b.w	41b406 <lv_theme_material_init+0x102a>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41c4ee:	2000      	movs	r0, #0
  41c4f0:	4b5c      	ldr	r3, [pc, #368]	; (41c664 <lv_theme_material_init+0x2288>)
  41c4f2:	4798      	blx	r3
  41c4f4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c4f8:	3050      	adds	r0, #80	; 0x50
  41c4fa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c4fe:	da03      	bge.n	41c508 <lv_theme_material_init+0x212c>
  41c500:	f04f 32ff 	mov.w	r2, #4294967295
  41c504:	f7fe bf99 	b.w	41b43a <lv_theme_material_init+0x105e>
  41c508:	2000      	movs	r0, #0
  41c50a:	4b56      	ldr	r3, [pc, #344]	; (41c664 <lv_theme_material_init+0x2288>)
  41c50c:	4798      	blx	r3
  41c50e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c512:	3050      	adds	r0, #80	; 0x50
  41c514:	4b54      	ldr	r3, [pc, #336]	; (41c668 <lv_theme_material_init+0x228c>)
  41c516:	fb83 2300 	smull	r2, r3, r3, r0
  41c51a:	17c2      	asrs	r2, r0, #31
  41c51c:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c520:	b212      	sxth	r2, r2
  41c522:	f7fe bf8a 	b.w	41b43a <lv_theme_material_init+0x105e>
  41c526:	2000      	movs	r0, #0
  41c528:	4b4e      	ldr	r3, [pc, #312]	; (41c664 <lv_theme_material_init+0x2288>)
  41c52a:	4798      	blx	r3
  41c52c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c530:	0040      	lsls	r0, r0, #1
  41c532:	3050      	adds	r0, #80	; 0x50
  41c534:	4b4c      	ldr	r3, [pc, #304]	; (41c668 <lv_theme_material_init+0x228c>)
  41c536:	fb83 2300 	smull	r2, r3, r3, r0
  41c53a:	17c2      	asrs	r2, r0, #31
  41c53c:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c540:	b212      	sxth	r2, r2
  41c542:	f7fe bf7a 	b.w	41b43a <lv_theme_material_init+0x105e>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41c546:	2000      	movs	r0, #0
  41c548:	4b46      	ldr	r3, [pc, #280]	; (41c664 <lv_theme_material_init+0x2288>)
  41c54a:	4798      	blx	r3
  41c54c:	3028      	adds	r0, #40	; 0x28
  41c54e:	0040      	lsls	r0, r0, #1
  41c550:	4b45      	ldr	r3, [pc, #276]	; (41c668 <lv_theme_material_init+0x228c>)
  41c552:	fb83 2300 	smull	r2, r3, r3, r0
  41c556:	17c2      	asrs	r2, r0, #31
  41c558:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c55c:	b212      	sxth	r2, r2
  41c55e:	f7fe bf7e 	b.w	41b45e <lv_theme_material_init+0x1082>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41c562:	2000      	movs	r0, #0
  41c564:	4b3f      	ldr	r3, [pc, #252]	; (41c664 <lv_theme_material_init+0x2288>)
  41c566:	4798      	blx	r3
  41c568:	3028      	adds	r0, #40	; 0x28
  41c56a:	0040      	lsls	r0, r0, #1
  41c56c:	4b3e      	ldr	r3, [pc, #248]	; (41c668 <lv_theme_material_init+0x228c>)
  41c56e:	fb83 2300 	smull	r2, r3, r3, r0
  41c572:	17c2      	asrs	r2, r0, #31
  41c574:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c578:	b212      	sxth	r2, r2
  41c57a:	f7fe bf83 	b.w	41b484 <lv_theme_material_init+0x10a8>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41c57e:	2000      	movs	r0, #0
  41c580:	4b38      	ldr	r3, [pc, #224]	; (41c664 <lv_theme_material_init+0x2288>)
  41c582:	4798      	blx	r3
  41c584:	3028      	adds	r0, #40	; 0x28
  41c586:	0040      	lsls	r0, r0, #1
  41c588:	4b37      	ldr	r3, [pc, #220]	; (41c668 <lv_theme_material_init+0x228c>)
  41c58a:	fb83 2300 	smull	r2, r3, r3, r0
  41c58e:	17c2      	asrs	r2, r0, #31
  41c590:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c594:	b212      	sxth	r2, r2
  41c596:	f7fe bf88 	b.w	41b4aa <lv_theme_material_init+0x10ce>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41c59a:	2000      	movs	r0, #0
  41c59c:	4b31      	ldr	r3, [pc, #196]	; (41c664 <lv_theme_material_init+0x2288>)
  41c59e:	4798      	blx	r3
  41c5a0:	3028      	adds	r0, #40	; 0x28
  41c5a2:	0040      	lsls	r0, r0, #1
  41c5a4:	4b30      	ldr	r3, [pc, #192]	; (41c668 <lv_theme_material_init+0x228c>)
  41c5a6:	fb83 2300 	smull	r2, r3, r3, r0
  41c5aa:	17c2      	asrs	r2, r0, #31
  41c5ac:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41c5b0:	b212      	sxth	r2, r2
  41c5b2:	f7fe bf8d 	b.w	41b4d0 <lv_theme_material_init+0x10f4>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41c5b6:	2000      	movs	r0, #0
  41c5b8:	4b2a      	ldr	r3, [pc, #168]	; (41c664 <lv_theme_material_init+0x2288>)
  41c5ba:	4798      	blx	r3
  41c5bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c5c0:	0080      	lsls	r0, r0, #2
  41c5c2:	3050      	adds	r0, #80	; 0x50
  41c5c4:	4b28      	ldr	r3, [pc, #160]	; (41c668 <lv_theme_material_init+0x228c>)
  41c5c6:	fb83 2300 	smull	r2, r3, r3, r0
  41c5ca:	17c2      	asrs	r2, r0, #31
  41c5cc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c5d0:	b212      	sxth	r2, r2
  41c5d2:	f7fe bfa4 	b.w	41b51e <lv_theme_material_init+0x1142>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
  41c5d6:	231d      	movs	r3, #29
  41c5d8:	4619      	mov	r1, r3
  41c5da:	2407      	movs	r4, #7
  41c5dc:	f7fe bfcc 	b.w	41b578 <lv_theme_material_init+0x119c>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41c5e0:	2308      	movs	r3, #8
  41c5e2:	2107      	movs	r1, #7
  41c5e4:	2401      	movs	r4, #1
  41c5e6:	f7fe bfe2 	b.w	41b5ae <lv_theme_material_init+0x11d2>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41c5ea:	2000      	movs	r0, #0
  41c5ec:	4b1d      	ldr	r3, [pc, #116]	; (41c664 <lv_theme_material_init+0x2288>)
  41c5ee:	4798      	blx	r3
  41c5f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c5f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c5f8:	3050      	adds	r0, #80	; 0x50
  41c5fa:	4b1b      	ldr	r3, [pc, #108]	; (41c668 <lv_theme_material_init+0x228c>)
  41c5fc:	fb83 2300 	smull	r2, r3, r3, r0
  41c600:	17c2      	asrs	r2, r0, #31
  41c602:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c606:	b212      	sxth	r2, r2
  41c608:	f7fe bff5 	b.w	41b5f6 <lv_theme_material_init+0x121a>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41c60c:	2000      	movs	r0, #0
  41c60e:	4b15      	ldr	r3, [pc, #84]	; (41c664 <lv_theme_material_init+0x2288>)
  41c610:	4798      	blx	r3
  41c612:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c616:	3050      	adds	r0, #80	; 0x50
  41c618:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c61c:	da02      	bge.n	41c624 <lv_theme_material_init+0x2248>
  41c61e:	2201      	movs	r2, #1
  41c620:	f7ff b85a 	b.w	41b6d8 <lv_theme_material_init+0x12fc>
  41c624:	2000      	movs	r0, #0
  41c626:	4b0f      	ldr	r3, [pc, #60]	; (41c664 <lv_theme_material_init+0x2288>)
  41c628:	4798      	blx	r3
  41c62a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c62e:	3050      	adds	r0, #80	; 0x50
  41c630:	4b0d      	ldr	r3, [pc, #52]	; (41c668 <lv_theme_material_init+0x228c>)
  41c632:	fb83 2300 	smull	r2, r3, r3, r0
  41c636:	17c2      	asrs	r2, r0, #31
  41c638:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c63c:	b212      	sxth	r2, r2
  41c63e:	f7ff b84b 	b.w	41b6d8 <lv_theme_material_init+0x12fc>
  41c642:	2000      	movs	r0, #0
  41c644:	4b07      	ldr	r3, [pc, #28]	; (41c664 <lv_theme_material_init+0x2288>)
  41c646:	4798      	blx	r3
  41c648:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c64c:	0040      	lsls	r0, r0, #1
  41c64e:	3050      	adds	r0, #80	; 0x50
  41c650:	4b05      	ldr	r3, [pc, #20]	; (41c668 <lv_theme_material_init+0x228c>)
  41c652:	fb83 2300 	smull	r2, r3, r3, r0
  41c656:	17c2      	asrs	r2, r0, #31
  41c658:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c65c:	b212      	sxth	r2, r2
  41c65e:	f7ff b83b 	b.w	41b6d8 <lv_theme_material_init+0x12fc>
  41c662:	bf00      	nop
  41c664:	004140fd 	.word	0x004140fd
  41c668:	66666667 	.word	0x66666667
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41c66c:	2000      	movs	r0, #0
  41c66e:	4bc5      	ldr	r3, [pc, #788]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c670:	4798      	blx	r3
  41c672:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c676:	3050      	adds	r0, #80	; 0x50
  41c678:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c67c:	da02      	bge.n	41c684 <lv_theme_material_init+0x22a8>
  41c67e:	2201      	movs	r2, #1
  41c680:	f7ff b843 	b.w	41b70a <lv_theme_material_init+0x132e>
  41c684:	2000      	movs	r0, #0
  41c686:	4bbf      	ldr	r3, [pc, #764]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c688:	4798      	blx	r3
  41c68a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c68e:	3050      	adds	r0, #80	; 0x50
  41c690:	4bbd      	ldr	r3, [pc, #756]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c692:	fb83 2300 	smull	r2, r3, r3, r0
  41c696:	17c2      	asrs	r2, r0, #31
  41c698:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c69c:	b212      	sxth	r2, r2
  41c69e:	f7ff b834 	b.w	41b70a <lv_theme_material_init+0x132e>
  41c6a2:	2000      	movs	r0, #0
  41c6a4:	4bb7      	ldr	r3, [pc, #732]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c6a6:	4798      	blx	r3
  41c6a8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c6ac:	0040      	lsls	r0, r0, #1
  41c6ae:	3050      	adds	r0, #80	; 0x50
  41c6b0:	4bb5      	ldr	r3, [pc, #724]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c6b2:	fb83 2300 	smull	r2, r3, r3, r0
  41c6b6:	17c2      	asrs	r2, r0, #31
  41c6b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c6bc:	b212      	sxth	r2, r2
  41c6be:	f7ff b824 	b.w	41b70a <lv_theme_material_init+0x132e>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41c6c2:	2000      	movs	r0, #0
  41c6c4:	4baf      	ldr	r3, [pc, #700]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c6c6:	4798      	blx	r3
  41c6c8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c6cc:	3050      	adds	r0, #80	; 0x50
  41c6ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c6d2:	da02      	bge.n	41c6da <lv_theme_material_init+0x22fe>
  41c6d4:	2201      	movs	r2, #1
  41c6d6:	f7ff b831 	b.w	41b73c <lv_theme_material_init+0x1360>
  41c6da:	2000      	movs	r0, #0
  41c6dc:	4ba9      	ldr	r3, [pc, #676]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c6de:	4798      	blx	r3
  41c6e0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c6e4:	3050      	adds	r0, #80	; 0x50
  41c6e6:	4ba8      	ldr	r3, [pc, #672]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c6e8:	fb83 2300 	smull	r2, r3, r3, r0
  41c6ec:	17c2      	asrs	r2, r0, #31
  41c6ee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c6f2:	b212      	sxth	r2, r2
  41c6f4:	f7ff b822 	b.w	41b73c <lv_theme_material_init+0x1360>
  41c6f8:	2000      	movs	r0, #0
  41c6fa:	4ba2      	ldr	r3, [pc, #648]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c6fc:	4798      	blx	r3
  41c6fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c702:	0040      	lsls	r0, r0, #1
  41c704:	3050      	adds	r0, #80	; 0x50
  41c706:	4ba0      	ldr	r3, [pc, #640]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c708:	fb83 2300 	smull	r2, r3, r3, r0
  41c70c:	17c2      	asrs	r2, r0, #31
  41c70e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c712:	b212      	sxth	r2, r2
  41c714:	f7ff b812 	b.w	41b73c <lv_theme_material_init+0x1360>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41c718:	2000      	movs	r0, #0
  41c71a:	4b9a      	ldr	r3, [pc, #616]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c71c:	4798      	blx	r3
  41c71e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c722:	3050      	adds	r0, #80	; 0x50
  41c724:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c728:	da02      	bge.n	41c730 <lv_theme_material_init+0x2354>
  41c72a:	2201      	movs	r2, #1
  41c72c:	f7ff b81f 	b.w	41b76e <lv_theme_material_init+0x1392>
  41c730:	2000      	movs	r0, #0
  41c732:	4b94      	ldr	r3, [pc, #592]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c734:	4798      	blx	r3
  41c736:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c73a:	3050      	adds	r0, #80	; 0x50
  41c73c:	4b92      	ldr	r3, [pc, #584]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c73e:	fb83 2300 	smull	r2, r3, r3, r0
  41c742:	17c2      	asrs	r2, r0, #31
  41c744:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c748:	b212      	sxth	r2, r2
  41c74a:	f7ff b810 	b.w	41b76e <lv_theme_material_init+0x1392>
  41c74e:	2000      	movs	r0, #0
  41c750:	4b8c      	ldr	r3, [pc, #560]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c752:	4798      	blx	r3
  41c754:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c758:	0040      	lsls	r0, r0, #1
  41c75a:	3050      	adds	r0, #80	; 0x50
  41c75c:	4b8a      	ldr	r3, [pc, #552]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c75e:	fb83 2300 	smull	r2, r3, r3, r0
  41c762:	17c2      	asrs	r2, r0, #31
  41c764:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c768:	b212      	sxth	r2, r2
  41c76a:	f7ff b800 	b.w	41b76e <lv_theme_material_init+0x1392>
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
  41c76e:	2307      	movs	r3, #7
  41c770:	211f      	movs	r1, #31
  41c772:	460c      	mov	r4, r1
  41c774:	461d      	mov	r5, r3
  41c776:	f7ff b815 	b.w	41b7a4 <lv_theme_material_init+0x13c8>
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41c77a:	2307      	movs	r3, #7
  41c77c:	2108      	movs	r1, #8
  41c77e:	461c      	mov	r4, r3
  41c780:	2501      	movs	r5, #1
  41c782:	f7ff b829 	b.w	41b7d8 <lv_theme_material_init+0x13fc>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41c786:	2000      	movs	r0, #0
  41c788:	4b7e      	ldr	r3, [pc, #504]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c78a:	4798      	blx	r3
  41c78c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41c790:	3050      	adds	r0, #80	; 0x50
  41c792:	4b7d      	ldr	r3, [pc, #500]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c794:	fb83 2300 	smull	r2, r3, r3, r0
  41c798:	17c2      	asrs	r2, r0, #31
  41c79a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c79e:	b212      	sxth	r2, r2
  41c7a0:	f7ff b849 	b.w	41b836 <lv_theme_material_init+0x145a>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41c7a4:	2000      	movs	r0, #0
  41c7a6:	4b77      	ldr	r3, [pc, #476]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c7a8:	4798      	blx	r3
  41c7aa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41c7ae:	3050      	adds	r0, #80	; 0x50
  41c7b0:	4b75      	ldr	r3, [pc, #468]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c7b2:	fb83 2300 	smull	r2, r3, r3, r0
  41c7b6:	17c2      	asrs	r2, r0, #31
  41c7b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c7bc:	b212      	sxth	r2, r2
  41c7be:	f7ff b84c 	b.w	41b85a <lv_theme_material_init+0x147e>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41c7c2:	2000      	movs	r0, #0
  41c7c4:	4b6f      	ldr	r3, [pc, #444]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c7c6:	4798      	blx	r3
  41c7c8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41c7cc:	3050      	adds	r0, #80	; 0x50
  41c7ce:	4b6e      	ldr	r3, [pc, #440]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c7d0:	fb83 2300 	smull	r2, r3, r3, r0
  41c7d4:	17c2      	asrs	r2, r0, #31
  41c7d6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c7da:	b212      	sxth	r2, r2
  41c7dc:	f7ff b84f 	b.w	41b87e <lv_theme_material_init+0x14a2>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
  41c7e0:	2307      	movs	r3, #7
  41c7e2:	2108      	movs	r1, #8
  41c7e4:	461c      	mov	r4, r3
  41c7e6:	2501      	movs	r5, #1
  41c7e8:	f7ff b878 	b.w	41b8dc <lv_theme_material_init+0x1500>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41c7ec:	2000      	movs	r0, #0
  41c7ee:	4b65      	ldr	r3, [pc, #404]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c7f0:	4798      	blx	r3
  41c7f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c7f6:	0080      	lsls	r0, r0, #2
  41c7f8:	3050      	adds	r0, #80	; 0x50
  41c7fa:	4b63      	ldr	r3, [pc, #396]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c7fc:	fb83 2300 	smull	r2, r3, r3, r0
  41c800:	17c2      	asrs	r2, r0, #31
  41c802:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c806:	b212      	sxth	r2, r2
  41c808:	f7ff b885 	b.w	41b916 <lv_theme_material_init+0x153a>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41c80c:	2000      	movs	r0, #0
  41c80e:	4b5d      	ldr	r3, [pc, #372]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c810:	4798      	blx	r3
  41c812:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c816:	0080      	lsls	r0, r0, #2
  41c818:	3050      	adds	r0, #80	; 0x50
  41c81a:	4b5b      	ldr	r3, [pc, #364]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c81c:	fb83 2300 	smull	r2, r3, r3, r0
  41c820:	17c2      	asrs	r2, r0, #31
  41c822:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c826:	b212      	sxth	r2, r2
  41c828:	f7ff b888 	b.w	41b93c <lv_theme_material_init+0x1560>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41c82c:	2000      	movs	r0, #0
  41c82e:	4b55      	ldr	r3, [pc, #340]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c830:	4798      	blx	r3
  41c832:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c836:	3050      	adds	r0, #80	; 0x50
  41c838:	4b53      	ldr	r3, [pc, #332]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c83a:	fb83 2300 	smull	r2, r3, r3, r0
  41c83e:	17c2      	asrs	r2, r0, #31
  41c840:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c844:	b212      	sxth	r2, r2
  41c846:	f7ff b8bf 	b.w	41b9c8 <lv_theme_material_init+0x15ec>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41c84a:	2000      	movs	r0, #0
  41c84c:	4b4d      	ldr	r3, [pc, #308]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c84e:	4798      	blx	r3
  41c850:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c854:	3050      	adds	r0, #80	; 0x50
  41c856:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c85a:	da02      	bge.n	41c862 <lv_theme_material_init+0x2486>
  41c85c:	2201      	movs	r2, #1
  41c85e:	f7ff b8d6 	b.w	41ba0e <lv_theme_material_init+0x1632>
  41c862:	2000      	movs	r0, #0
  41c864:	4b47      	ldr	r3, [pc, #284]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c866:	4798      	blx	r3
  41c868:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c86c:	3050      	adds	r0, #80	; 0x50
  41c86e:	4b46      	ldr	r3, [pc, #280]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c870:	fb83 2300 	smull	r2, r3, r3, r0
  41c874:	17c2      	asrs	r2, r0, #31
  41c876:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c87a:	b212      	sxth	r2, r2
  41c87c:	f7ff b8c7 	b.w	41ba0e <lv_theme_material_init+0x1632>
  41c880:	2000      	movs	r0, #0
  41c882:	4b40      	ldr	r3, [pc, #256]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c884:	4798      	blx	r3
  41c886:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c88a:	0040      	lsls	r0, r0, #1
  41c88c:	3050      	adds	r0, #80	; 0x50
  41c88e:	4b3e      	ldr	r3, [pc, #248]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c890:	fb83 2300 	smull	r2, r3, r3, r0
  41c894:	17c2      	asrs	r2, r0, #31
  41c896:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c89a:	b212      	sxth	r2, r2
  41c89c:	f7ff b8b7 	b.w	41ba0e <lv_theme_material_init+0x1632>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41c8a0:	2000      	movs	r0, #0
  41c8a2:	4b38      	ldr	r3, [pc, #224]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c8a4:	4798      	blx	r3
  41c8a6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c8aa:	3050      	adds	r0, #80	; 0x50
  41c8ac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c8b0:	da02      	bge.n	41c8b8 <lv_theme_material_init+0x24dc>
  41c8b2:	2201      	movs	r2, #1
  41c8b4:	f7ff b8c4 	b.w	41ba40 <lv_theme_material_init+0x1664>
  41c8b8:	2000      	movs	r0, #0
  41c8ba:	4b32      	ldr	r3, [pc, #200]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c8bc:	4798      	blx	r3
  41c8be:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c8c2:	3050      	adds	r0, #80	; 0x50
  41c8c4:	4b30      	ldr	r3, [pc, #192]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c8c6:	fb83 2300 	smull	r2, r3, r3, r0
  41c8ca:	17c2      	asrs	r2, r0, #31
  41c8cc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c8d0:	b212      	sxth	r2, r2
  41c8d2:	f7ff b8b5 	b.w	41ba40 <lv_theme_material_init+0x1664>
  41c8d6:	2000      	movs	r0, #0
  41c8d8:	4b2a      	ldr	r3, [pc, #168]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c8da:	4798      	blx	r3
  41c8dc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c8e0:	0040      	lsls	r0, r0, #1
  41c8e2:	3050      	adds	r0, #80	; 0x50
  41c8e4:	4b28      	ldr	r3, [pc, #160]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c8e6:	fb83 2300 	smull	r2, r3, r3, r0
  41c8ea:	17c2      	asrs	r2, r0, #31
  41c8ec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c8f0:	b212      	sxth	r2, r2
  41c8f2:	f7ff b8a5 	b.w	41ba40 <lv_theme_material_init+0x1664>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41c8f6:	2000      	movs	r0, #0
  41c8f8:	4b22      	ldr	r3, [pc, #136]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c8fa:	4798      	blx	r3
  41c8fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c900:	3050      	adds	r0, #80	; 0x50
  41c902:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c906:	da02      	bge.n	41c90e <lv_theme_material_init+0x2532>
  41c908:	2201      	movs	r2, #1
  41c90a:	f7ff b8b2 	b.w	41ba72 <lv_theme_material_init+0x1696>
  41c90e:	2000      	movs	r0, #0
  41c910:	4b1c      	ldr	r3, [pc, #112]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c912:	4798      	blx	r3
  41c914:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c918:	3050      	adds	r0, #80	; 0x50
  41c91a:	4b1b      	ldr	r3, [pc, #108]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c91c:	fb83 2300 	smull	r2, r3, r3, r0
  41c920:	17c2      	asrs	r2, r0, #31
  41c922:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c926:	b212      	sxth	r2, r2
  41c928:	f7ff b8a3 	b.w	41ba72 <lv_theme_material_init+0x1696>
  41c92c:	2000      	movs	r0, #0
  41c92e:	4b15      	ldr	r3, [pc, #84]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c930:	4798      	blx	r3
  41c932:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c936:	0040      	lsls	r0, r0, #1
  41c938:	3050      	adds	r0, #80	; 0x50
  41c93a:	4b13      	ldr	r3, [pc, #76]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c93c:	fb83 2300 	smull	r2, r3, r3, r0
  41c940:	17c2      	asrs	r2, r0, #31
  41c942:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c946:	b212      	sxth	r2, r2
  41c948:	f7ff b893 	b.w	41ba72 <lv_theme_material_init+0x1696>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41c94c:	2000      	movs	r0, #0
  41c94e:	4b0d      	ldr	r3, [pc, #52]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c950:	4798      	blx	r3
  41c952:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c956:	3050      	adds	r0, #80	; 0x50
  41c958:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c95c:	da02      	bge.n	41c964 <lv_theme_material_init+0x2588>
  41c95e:	2201      	movs	r2, #1
  41c960:	f7ff b8a0 	b.w	41baa4 <lv_theme_material_init+0x16c8>
  41c964:	2000      	movs	r0, #0
  41c966:	4b07      	ldr	r3, [pc, #28]	; (41c984 <lv_theme_material_init+0x25a8>)
  41c968:	4798      	blx	r3
  41c96a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c96e:	3050      	adds	r0, #80	; 0x50
  41c970:	4b05      	ldr	r3, [pc, #20]	; (41c988 <lv_theme_material_init+0x25ac>)
  41c972:	fb83 2300 	smull	r2, r3, r3, r0
  41c976:	17c2      	asrs	r2, r0, #31
  41c978:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c97c:	b212      	sxth	r2, r2
  41c97e:	f7ff b891 	b.w	41baa4 <lv_theme_material_init+0x16c8>
  41c982:	bf00      	nop
  41c984:	004140fd 	.word	0x004140fd
  41c988:	66666667 	.word	0x66666667
  41c98c:	2000      	movs	r0, #0
  41c98e:	4b1d      	ldr	r3, [pc, #116]	; (41ca04 <lv_theme_material_init+0x2628>)
  41c990:	4798      	blx	r3
  41c992:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c996:	0040      	lsls	r0, r0, #1
  41c998:	3050      	adds	r0, #80	; 0x50
  41c99a:	4b1b      	ldr	r3, [pc, #108]	; (41ca08 <lv_theme_material_init+0x262c>)
  41c99c:	fb83 2300 	smull	r2, r3, r3, r0
  41c9a0:	17c2      	asrs	r2, r0, #31
  41c9a2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c9a6:	b212      	sxth	r2, r2
  41c9a8:	f7ff b87c 	b.w	41baa4 <lv_theme_material_init+0x16c8>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41c9ac:	2000      	movs	r0, #0
  41c9ae:	4b15      	ldr	r3, [pc, #84]	; (41ca04 <lv_theme_material_init+0x2628>)
  41c9b0:	4798      	blx	r3
  41c9b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c9b6:	3050      	adds	r0, #80	; 0x50
  41c9b8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c9bc:	da02      	bge.n	41c9c4 <lv_theme_material_init+0x25e8>
  41c9be:	2201      	movs	r2, #1
  41c9c0:	f7ff b889 	b.w	41bad6 <lv_theme_material_init+0x16fa>
  41c9c4:	2000      	movs	r0, #0
  41c9c6:	4b0f      	ldr	r3, [pc, #60]	; (41ca04 <lv_theme_material_init+0x2628>)
  41c9c8:	4798      	blx	r3
  41c9ca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c9ce:	3050      	adds	r0, #80	; 0x50
  41c9d0:	4b0d      	ldr	r3, [pc, #52]	; (41ca08 <lv_theme_material_init+0x262c>)
  41c9d2:	fb83 2300 	smull	r2, r3, r3, r0
  41c9d6:	17c2      	asrs	r2, r0, #31
  41c9d8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c9dc:	b212      	sxth	r2, r2
  41c9de:	f7ff b87a 	b.w	41bad6 <lv_theme_material_init+0x16fa>
  41c9e2:	2000      	movs	r0, #0
  41c9e4:	4b07      	ldr	r3, [pc, #28]	; (41ca04 <lv_theme_material_init+0x2628>)
  41c9e6:	4798      	blx	r3
  41c9e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c9ec:	0040      	lsls	r0, r0, #1
  41c9ee:	3050      	adds	r0, #80	; 0x50
  41c9f0:	4b05      	ldr	r3, [pc, #20]	; (41ca08 <lv_theme_material_init+0x262c>)
  41c9f2:	fb83 2300 	smull	r2, r3, r3, r0
  41c9f6:	17c2      	asrs	r2, r0, #31
  41c9f8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c9fc:	b212      	sxth	r2, r2
  41c9fe:	f7ff b86a 	b.w	41bad6 <lv_theme_material_init+0x16fa>
  41ca02:	bf00      	nop
  41ca04:	004140fd 	.word	0x004140fd
  41ca08:	66666667 	.word	0x66666667

0041ca0c <lv_btn_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_btn_design(lv_obj_t * btn, const lv_area_t * clip_area, lv_design_mode_t mode)
{
  41ca0c:	b508      	push	{r3, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
  41ca0e:	2a02      	cmp	r2, #2
  41ca10:	d004      	beq.n	41ca1c <lv_btn_design+0x10>
        return ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41ca12:	b13a      	cbz	r2, 41ca24 <lv_btn_design+0x18>
        ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
  41ca14:	2a01      	cmp	r2, #1
  41ca16:	d00a      	beq.n	41ca2e <lv_btn_design+0x22>
        ancestor_design(btn, clip_area, mode);
    }

    return LV_DESIGN_RES_OK;
  41ca18:	2000      	movs	r0, #0
}
  41ca1a:	bd08      	pop	{r3, pc}
        return ancestor_design(btn, clip_area, mode);
  41ca1c:	4b06      	ldr	r3, [pc, #24]	; (41ca38 <lv_btn_design+0x2c>)
  41ca1e:	681b      	ldr	r3, [r3, #0]
  41ca20:	4798      	blx	r3
  41ca22:	bd08      	pop	{r3, pc}
        ancestor_design(btn, clip_area, mode);
  41ca24:	4b04      	ldr	r3, [pc, #16]	; (41ca38 <lv_btn_design+0x2c>)
  41ca26:	681b      	ldr	r3, [r3, #0]
  41ca28:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41ca2a:	2000      	movs	r0, #0
  41ca2c:	bd08      	pop	{r3, pc}
        ancestor_design(btn, clip_area, mode);
  41ca2e:	4b02      	ldr	r3, [pc, #8]	; (41ca38 <lv_btn_design+0x2c>)
  41ca30:	681b      	ldr	r3, [r3, #0]
  41ca32:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41ca34:	2000      	movs	r0, #0
  41ca36:	bd08      	pop	{r3, pc}
  41ca38:	20414784 	.word	0x20414784

0041ca3c <lv_btn_create>:
{
  41ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41ca3e:	4607      	mov	r7, r0
  41ca40:	460e      	mov	r6, r1
    btn = lv_cont_create(par, copy);
  41ca42:	4b31      	ldr	r3, [pc, #196]	; (41cb08 <lv_btn_create+0xcc>)
  41ca44:	4798      	blx	r3
  41ca46:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btn);
  41ca48:	4b30      	ldr	r3, [pc, #192]	; (41cb0c <lv_btn_create+0xd0>)
  41ca4a:	4798      	blx	r3
  41ca4c:	b1a8      	cbz	r0, 41ca7a <lv_btn_create+0x3e>
    if(btn == NULL) return NULL;
  41ca4e:	2c00      	cmp	r4, #0
  41ca50:	d045      	beq.n	41cade <lv_btn_create+0xa2>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
  41ca52:	4b2f      	ldr	r3, [pc, #188]	; (41cb10 <lv_btn_create+0xd4>)
  41ca54:	681b      	ldr	r3, [r3, #0]
  41ca56:	b1b3      	cbz	r3, 41ca86 <lv_btn_create+0x4a>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
  41ca58:	4b2e      	ldr	r3, [pc, #184]	; (41cb14 <lv_btn_create+0xd8>)
  41ca5a:	681b      	ldr	r3, [r3, #0]
  41ca5c:	b1cb      	cbz	r3, 41ca92 <lv_btn_create+0x56>
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(btn, sizeof(lv_btn_ext_t));
  41ca5e:	2103      	movs	r1, #3
  41ca60:	4620      	mov	r0, r4
  41ca62:	4b2d      	ldr	r3, [pc, #180]	; (41cb18 <lv_btn_create+0xdc>)
  41ca64:	4798      	blx	r3
  41ca66:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  41ca68:	4b28      	ldr	r3, [pc, #160]	; (41cb0c <lv_btn_create+0xd0>)
  41ca6a:	4798      	blx	r3
  41ca6c:	b9b8      	cbnz	r0, 41ca9e <lv_btn_create+0x62>
  41ca6e:	462a      	mov	r2, r5
  41ca70:	2300      	movs	r3, #0
  41ca72:	482a      	ldr	r0, [pc, #168]	; (41cb1c <lv_btn_create+0xe0>)
  41ca74:	492a      	ldr	r1, [pc, #168]	; (41cb20 <lv_btn_create+0xe4>)
  41ca76:	4788      	blx	r1
  41ca78:	e7fe      	b.n	41ca78 <lv_btn_create+0x3c>
    LV_ASSERT_MEM(btn);
  41ca7a:	4622      	mov	r2, r4
  41ca7c:	2300      	movs	r3, #0
  41ca7e:	4827      	ldr	r0, [pc, #156]	; (41cb1c <lv_btn_create+0xe0>)
  41ca80:	4927      	ldr	r1, [pc, #156]	; (41cb20 <lv_btn_create+0xe4>)
  41ca82:	4788      	blx	r1
  41ca84:	e7fe      	b.n	41ca84 <lv_btn_create+0x48>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
  41ca86:	4620      	mov	r0, r4
  41ca88:	4b26      	ldr	r3, [pc, #152]	; (41cb24 <lv_btn_create+0xe8>)
  41ca8a:	4798      	blx	r3
  41ca8c:	4b20      	ldr	r3, [pc, #128]	; (41cb10 <lv_btn_create+0xd4>)
  41ca8e:	6018      	str	r0, [r3, #0]
  41ca90:	e7e2      	b.n	41ca58 <lv_btn_create+0x1c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
  41ca92:	4620      	mov	r0, r4
  41ca94:	4b24      	ldr	r3, [pc, #144]	; (41cb28 <lv_btn_create+0xec>)
  41ca96:	4798      	blx	r3
  41ca98:	4b1e      	ldr	r3, [pc, #120]	; (41cb14 <lv_btn_create+0xd8>)
  41ca9a:	6018      	str	r0, [r3, #0]
  41ca9c:	e7df      	b.n	41ca5e <lv_btn_create+0x22>
    if(ext == NULL) {
  41ca9e:	b305      	cbz	r5, 41cae2 <lv_btn_create+0xa6>
    ext->checkable = 0;
  41caa0:	78ab      	ldrb	r3, [r5, #2]
  41caa2:	f36f 0300 	bfc	r3, #0, #1
  41caa6:	70ab      	strb	r3, [r5, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
  41caa8:	4920      	ldr	r1, [pc, #128]	; (41cb2c <lv_btn_create+0xf0>)
  41caaa:	4620      	mov	r0, r4
  41caac:	4b20      	ldr	r3, [pc, #128]	; (41cb30 <lv_btn_create+0xf4>)
  41caae:	4798      	blx	r3
    lv_obj_set_design_cb(btn, lv_btn_design);
  41cab0:	4920      	ldr	r1, [pc, #128]	; (41cb34 <lv_btn_create+0xf8>)
  41cab2:	4620      	mov	r0, r4
  41cab4:	4b20      	ldr	r3, [pc, #128]	; (41cb38 <lv_btn_create+0xfc>)
  41cab6:	4798      	blx	r3
    if(copy == NULL) {
  41cab8:	b9c6      	cbnz	r6, 41caec <lv_btn_create+0xb0>
        if(par) {
  41caba:	b147      	cbz	r7, 41cace <lv_btn_create+0x92>
            lv_obj_set_size(btn, LV_DPI, LV_DPI / 3);
  41cabc:	2231      	movs	r2, #49	; 0x31
  41cabe:	2194      	movs	r1, #148	; 0x94
  41cac0:	4620      	mov	r0, r4
  41cac2:	4b1e      	ldr	r3, [pc, #120]	; (41cb3c <lv_btn_create+0x100>)
  41cac4:	4798      	blx	r3
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
  41cac6:	2101      	movs	r1, #1
  41cac8:	4620      	mov	r0, r4
  41caca:	4b1d      	ldr	r3, [pc, #116]	; (41cb40 <lv_btn_create+0x104>)
  41cacc:	4798      	blx	r3
        lv_obj_set_click(btn, true); /*Be sure the button is clickable*/
  41cace:	2101      	movs	r1, #1
  41cad0:	4620      	mov	r0, r4
  41cad2:	4b1c      	ldr	r3, [pc, #112]	; (41cb44 <lv_btn_create+0x108>)
  41cad4:	4798      	blx	r3
        lv_theme_apply(btn, LV_THEME_BTN);
  41cad6:	2105      	movs	r1, #5
  41cad8:	4620      	mov	r0, r4
  41cada:	4b1b      	ldr	r3, [pc, #108]	; (41cb48 <lv_btn_create+0x10c>)
  41cadc:	4798      	blx	r3
}
  41cade:	4620      	mov	r0, r4
  41cae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_del(btn);
  41cae2:	4620      	mov	r0, r4
  41cae4:	4b19      	ldr	r3, [pc, #100]	; (41cb4c <lv_btn_create+0x110>)
  41cae6:	4798      	blx	r3
        return NULL;
  41cae8:	2400      	movs	r4, #0
  41caea:	e7f8      	b.n	41cade <lv_btn_create+0xa2>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41caec:	4630      	mov	r0, r6
  41caee:	4b18      	ldr	r3, [pc, #96]	; (41cb50 <lv_btn_create+0x114>)
  41caf0:	4798      	blx	r3
        ext->checkable             = copy_ext->checkable;
  41caf2:	7882      	ldrb	r2, [r0, #2]
  41caf4:	78ab      	ldrb	r3, [r5, #2]
  41caf6:	f362 0300 	bfi	r3, r2, #0, #1
  41cafa:	70ab      	strb	r3, [r5, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41cafc:	22ff      	movs	r2, #255	; 0xff
  41cafe:	4611      	mov	r1, r2
  41cb00:	4620      	mov	r0, r4
  41cb02:	4b14      	ldr	r3, [pc, #80]	; (41cb54 <lv_btn_create+0x118>)
  41cb04:	4798      	blx	r3
  41cb06:	e7ea      	b.n	41cade <lv_btn_create+0xa2>
  41cb08:	0041e515 	.word	0x0041e515
  41cb0c:	004150ef 	.word	0x004150ef
  41cb10:	20414788 	.word	0x20414788
  41cb14:	20414784 	.word	0x20414784
  41cb18:	00404f39 	.word	0x00404f39
  41cb1c:	00425a60 	.word	0x00425a60
  41cb20:	004150f9 	.word	0x004150f9
  41cb24:	00407231 	.word	0x00407231
  41cb28:	00407259 	.word	0x00407259
  41cb2c:	0041cc2d 	.word	0x0041cc2d
  41cb30:	00404ed5 	.word	0x00404ed5
  41cb34:	0041ca0d 	.word	0x0041ca0d
  41cb38:	00404f11 	.word	0x00404f11
  41cb3c:	004061cd 	.word	0x004061cd
  41cb40:	0041e645 	.word	0x0041e645
  41cb44:	00404d11 	.word	0x00404d11
  41cb48:	00417431 	.word	0x00417431
  41cb4c:	004073fd 	.word	0x004073fd
  41cb50:	00407281 	.word	0x00407281
  41cb54:	00406d55 	.word	0x00406d55

0041cb58 <lv_btn_set_state>:
{
  41cb58:	b538      	push	{r3, r4, r5, lr}
  41cb5a:	4604      	mov	r4, r0
  41cb5c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41cb5e:	4b21      	ldr	r3, [pc, #132]	; (41cbe4 <lv_btn_set_state+0x8c>)
  41cb60:	4798      	blx	r3
  41cb62:	b130      	cbz	r0, 41cb72 <lv_btn_set_state+0x1a>
    switch(state) {
  41cb64:	2d05      	cmp	r5, #5
  41cb66:	d83b      	bhi.n	41cbe0 <lv_btn_set_state+0x88>
  41cb68:	e8df f005 	tbb	[pc, r5]
  41cb6c:	17290e09 	.word	0x17290e09
  41cb70:	3220      	.short	0x3220
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41cb72:	4622      	mov	r2, r4
  41cb74:	2300      	movs	r3, #0
  41cb76:	481c      	ldr	r0, [pc, #112]	; (41cbe8 <lv_btn_set_state+0x90>)
  41cb78:	491c      	ldr	r1, [pc, #112]	; (41cbec <lv_btn_set_state+0x94>)
  41cb7a:	4788      	blx	r1
  41cb7c:	e7fe      	b.n	41cb7c <lv_btn_set_state+0x24>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED | LV_STATE_DISABLED);
  41cb7e:	2131      	movs	r1, #49	; 0x31
  41cb80:	4620      	mov	r0, r4
  41cb82:	4b1b      	ldr	r3, [pc, #108]	; (41cbf0 <lv_btn_set_state+0x98>)
  41cb84:	4798      	blx	r3
            break;
  41cb86:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_CHECKED | LV_STATE_DISABLED);
  41cb88:	2121      	movs	r1, #33	; 0x21
  41cb8a:	4620      	mov	r0, r4
  41cb8c:	4b18      	ldr	r3, [pc, #96]	; (41cbf0 <lv_btn_set_state+0x98>)
  41cb8e:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_PRESSED);
  41cb90:	2110      	movs	r1, #16
  41cb92:	4620      	mov	r0, r4
  41cb94:	4b17      	ldr	r3, [pc, #92]	; (41cbf4 <lv_btn_set_state+0x9c>)
  41cb96:	4798      	blx	r3
            break;
  41cb98:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_add_state(btn, LV_STATE_CHECKED);
  41cb9a:	2101      	movs	r1, #1
  41cb9c:	4620      	mov	r0, r4
  41cb9e:	4b15      	ldr	r3, [pc, #84]	; (41cbf4 <lv_btn_set_state+0x9c>)
  41cba0:	4798      	blx	r3
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
  41cba2:	2130      	movs	r1, #48	; 0x30
  41cba4:	4620      	mov	r0, r4
  41cba6:	4b12      	ldr	r3, [pc, #72]	; (41cbf0 <lv_btn_set_state+0x98>)
  41cba8:	4798      	blx	r3
            break;
  41cbaa:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_add_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
  41cbac:	2111      	movs	r1, #17
  41cbae:	4620      	mov	r0, r4
  41cbb0:	4b10      	ldr	r3, [pc, #64]	; (41cbf4 <lv_btn_set_state+0x9c>)
  41cbb2:	4798      	blx	r3
            lv_obj_clear_state(btn, LV_STATE_DISABLED);
  41cbb4:	2120      	movs	r1, #32
  41cbb6:	4620      	mov	r0, r4
  41cbb8:	4b0d      	ldr	r3, [pc, #52]	; (41cbf0 <lv_btn_set_state+0x98>)
  41cbba:	4798      	blx	r3
            break;
  41cbbc:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
  41cbbe:	2111      	movs	r1, #17
  41cbc0:	4620      	mov	r0, r4
  41cbc2:	4b0b      	ldr	r3, [pc, #44]	; (41cbf0 <lv_btn_set_state+0x98>)
  41cbc4:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_DISABLED);
  41cbc6:	2120      	movs	r1, #32
  41cbc8:	4620      	mov	r0, r4
  41cbca:	4b0a      	ldr	r3, [pc, #40]	; (41cbf4 <lv_btn_set_state+0x9c>)
  41cbcc:	4798      	blx	r3
            break;
  41cbce:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_PRESSED);
  41cbd0:	2110      	movs	r1, #16
  41cbd2:	4620      	mov	r0, r4
  41cbd4:	4b06      	ldr	r3, [pc, #24]	; (41cbf0 <lv_btn_set_state+0x98>)
  41cbd6:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
  41cbd8:	2121      	movs	r1, #33	; 0x21
  41cbda:	4620      	mov	r0, r4
  41cbdc:	4b05      	ldr	r3, [pc, #20]	; (41cbf4 <lv_btn_set_state+0x9c>)
  41cbde:	4798      	blx	r3
  41cbe0:	bd38      	pop	{r3, r4, r5, pc}
  41cbe2:	bf00      	nop
  41cbe4:	004150ef 	.word	0x004150ef
  41cbe8:	00425a74 	.word	0x00425a74
  41cbec:	004150f9 	.word	0x004150f9
  41cbf0:	00408675 	.word	0x00408675
  41cbf4:	00408639 	.word	0x00408639

0041cbf8 <lv_btn_get_checkable>:
{
  41cbf8:	b510      	push	{r4, lr}
  41cbfa:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41cbfc:	4b07      	ldr	r3, [pc, #28]	; (41cc1c <lv_btn_get_checkable+0x24>)
  41cbfe:	4798      	blx	r3
  41cc00:	b928      	cbnz	r0, 41cc0e <lv_btn_get_checkable+0x16>
  41cc02:	4622      	mov	r2, r4
  41cc04:	2300      	movs	r3, #0
  41cc06:	4806      	ldr	r0, [pc, #24]	; (41cc20 <lv_btn_get_checkable+0x28>)
  41cc08:	4906      	ldr	r1, [pc, #24]	; (41cc24 <lv_btn_get_checkable+0x2c>)
  41cc0a:	4788      	blx	r1
  41cc0c:	e7fe      	b.n	41cc0c <lv_btn_get_checkable+0x14>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
  41cc0e:	4620      	mov	r0, r4
  41cc10:	4b05      	ldr	r3, [pc, #20]	; (41cc28 <lv_btn_get_checkable+0x30>)
  41cc12:	4798      	blx	r3
    return ext->checkable != 0 ? true : false;
  41cc14:	7880      	ldrb	r0, [r0, #2]
}
  41cc16:	f000 0001 	and.w	r0, r0, #1
  41cc1a:	bd10      	pop	{r4, pc}
  41cc1c:	004150ef 	.word	0x004150ef
  41cc20:	00425a74 	.word	0x00425a74
  41cc24:	004150f9 	.word	0x004150f9
  41cc28:	00407281 	.word	0x00407281

0041cc2c <lv_btn_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
  41cc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41cc30:	b082      	sub	sp, #8
  41cc32:	4606      	mov	r6, r0
  41cc34:	460d      	mov	r5, r1
  41cc36:	4617      	mov	r7, r2
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
  41cc38:	4b37      	ldr	r3, [pc, #220]	; (41cd18 <lv_btn_signal+0xec>)
  41cc3a:	681b      	ldr	r3, [r3, #0]
  41cc3c:	4798      	blx	r3
  41cc3e:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
  41cc40:	2801      	cmp	r0, #1
  41cc42:	d003      	beq.n	41cc4c <lv_btn_signal+0x20>
        }
#endif
    }

    return res;
}
  41cc44:	4620      	mov	r0, r4
  41cc46:	b002      	add	sp, #8
  41cc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41cc4c:	2d07      	cmp	r5, #7
  41cc4e:	d023      	beq.n	41cc98 <lv_btn_signal+0x6c>
    bool tgl           = lv_btn_get_checkable(btn);
  41cc50:	4630      	mov	r0, r6
  41cc52:	4b32      	ldr	r3, [pc, #200]	; (41cd1c <lv_btn_signal+0xf0>)
  41cc54:	4798      	blx	r3
  41cc56:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_RELEASED) {
  41cc58:	2d0e      	cmp	r5, #14
  41cc5a:	d023      	beq.n	41cca4 <lv_btn_signal+0x78>
    else if(sign == LV_SIGNAL_CONTROL) {
  41cc5c:	2d18      	cmp	r5, #24
  41cc5e:	d1f1      	bne.n	41cc44 <lv_btn_signal+0x18>
        char c = *((char *)param);
  41cc60:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
  41cc62:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
  41cc66:	2a11      	cmp	r2, #17
  41cc68:	d043      	beq.n	41ccf2 <lv_btn_signal+0xc6>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
  41cc6a:	2b14      	cmp	r3, #20
  41cc6c:	d001      	beq.n	41cc72 <lv_btn_signal+0x46>
  41cc6e:	2b12      	cmp	r3, #18
  41cc70:	d1e8      	bne.n	41cc44 <lv_btn_signal+0x18>
            if(lv_btn_get_checkable(btn)) {
  41cc72:	4630      	mov	r0, r6
  41cc74:	4b29      	ldr	r3, [pc, #164]	; (41cd1c <lv_btn_signal+0xf0>)
  41cc76:	4798      	blx	r3
  41cc78:	2800      	cmp	r0, #0
  41cc7a:	d0e3      	beq.n	41cc44 <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
  41cc7c:	2100      	movs	r1, #0
  41cc7e:	4630      	mov	r0, r6
  41cc80:	4b27      	ldr	r3, [pc, #156]	; (41cd20 <lv_btn_signal+0xf4>)
  41cc82:	4798      	blx	r3
                uint32_t state = 0;
  41cc84:	aa02      	add	r2, sp, #8
  41cc86:	2300      	movs	r3, #0
  41cc88:	f842 3d04 	str.w	r3, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
  41cc8c:	2110      	movs	r1, #16
  41cc8e:	4630      	mov	r0, r6
  41cc90:	4b24      	ldr	r3, [pc, #144]	; (41cd24 <lv_btn_signal+0xf8>)
  41cc92:	4798      	blx	r3
  41cc94:	4604      	mov	r4, r0
  41cc96:	e7d5      	b.n	41cc44 <lv_btn_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41cc98:	4923      	ldr	r1, [pc, #140]	; (41cd28 <lv_btn_signal+0xfc>)
  41cc9a:	4638      	mov	r0, r7
  41cc9c:	4b23      	ldr	r3, [pc, #140]	; (41cd2c <lv_btn_signal+0x100>)
  41cc9e:	4798      	blx	r3
  41cca0:	4604      	mov	r4, r0
  41cca2:	e7cf      	b.n	41cc44 <lv_btn_signal+0x18>
        if(lv_indev_is_dragging(param) == false && tgl) {
  41cca4:	4638      	mov	r0, r7
  41cca6:	4b22      	ldr	r3, [pc, #136]	; (41cd30 <lv_btn_signal+0x104>)
  41cca8:	4798      	blx	r3
  41ccaa:	f080 0001 	eor.w	r0, r0, #1
  41ccae:	f010 0fff 	tst.w	r0, #255	; 0xff
  41ccb2:	d0c7      	beq.n	41cc44 <lv_btn_signal+0x18>
  41ccb4:	f1b8 0f00 	cmp.w	r8, #0
  41ccb8:	d0c4      	beq.n	41cc44 <lv_btn_signal+0x18>
            uint32_t toggled = 0;
  41ccba:	2100      	movs	r1, #0
  41ccbc:	9101      	str	r1, [sp, #4]
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
  41ccbe:	4630      	mov	r0, r6
  41ccc0:	4b1c      	ldr	r3, [pc, #112]	; (41cd34 <lv_btn_signal+0x108>)
  41ccc2:	4798      	blx	r3
  41ccc4:	f010 0f01 	tst.w	r0, #1
  41ccc8:	d00c      	beq.n	41cce4 <lv_btn_signal+0xb8>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
  41ccca:	2100      	movs	r1, #0
  41cccc:	4630      	mov	r0, r6
  41ccce:	4b14      	ldr	r3, [pc, #80]	; (41cd20 <lv_btn_signal+0xf4>)
  41ccd0:	4798      	blx	r3
                toggled = 0;
  41ccd2:	2300      	movs	r3, #0
  41ccd4:	9301      	str	r3, [sp, #4]
            res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
  41ccd6:	aa01      	add	r2, sp, #4
  41ccd8:	2110      	movs	r1, #16
  41ccda:	4630      	mov	r0, r6
  41ccdc:	4b11      	ldr	r3, [pc, #68]	; (41cd24 <lv_btn_signal+0xf8>)
  41ccde:	4798      	blx	r3
  41cce0:	4604      	mov	r4, r0
  41cce2:	e7af      	b.n	41cc44 <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
  41cce4:	2103      	movs	r1, #3
  41cce6:	4630      	mov	r0, r6
  41cce8:	4b0d      	ldr	r3, [pc, #52]	; (41cd20 <lv_btn_signal+0xf4>)
  41ccea:	4798      	blx	r3
                toggled = 1;
  41ccec:	2301      	movs	r3, #1
  41ccee:	9301      	str	r3, [sp, #4]
  41ccf0:	e7f1      	b.n	41ccd6 <lv_btn_signal+0xaa>
            if(lv_btn_get_checkable(btn)) {
  41ccf2:	4630      	mov	r0, r6
  41ccf4:	4b09      	ldr	r3, [pc, #36]	; (41cd1c <lv_btn_signal+0xf0>)
  41ccf6:	4798      	blx	r3
  41ccf8:	2800      	cmp	r0, #0
  41ccfa:	d0a3      	beq.n	41cc44 <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
  41ccfc:	2103      	movs	r1, #3
  41ccfe:	4630      	mov	r0, r6
  41cd00:	4b07      	ldr	r3, [pc, #28]	; (41cd20 <lv_btn_signal+0xf4>)
  41cd02:	4798      	blx	r3
                uint32_t state = 1;
  41cd04:	aa02      	add	r2, sp, #8
  41cd06:	2301      	movs	r3, #1
  41cd08:	f842 3d04 	str.w	r3, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
  41cd0c:	2110      	movs	r1, #16
  41cd0e:	4630      	mov	r0, r6
  41cd10:	4b04      	ldr	r3, [pc, #16]	; (41cd24 <lv_btn_signal+0xf8>)
  41cd12:	4798      	blx	r3
  41cd14:	4604      	mov	r4, r0
  41cd16:	e795      	b.n	41cc44 <lv_btn_signal+0x18>
  41cd18:	20414788 	.word	0x20414788
  41cd1c:	0041cbf9 	.word	0x0041cbf9
  41cd20:	0041cb59 	.word	0x0041cb59
  41cd24:	00404e95 	.word	0x00404e95
  41cd28:	004306c8 	.word	0x004306c8
  41cd2c:	0040751d 	.word	0x0040751d
  41cd30:	004037d9 	.word	0x004037d9
  41cd34:	00406379 	.word	0x00406379

0041cd38 <get_button_from_point>:
 * @param btnm pointer to a button matrix object
 * @param p a point with absolute coordinates
 * @return the id of the button or LV_BTNMATRIX_BTN_NONE.
 */
static uint16_t get_button_from_point(lv_obj_t * btnm, lv_point_t * p)
{
  41cd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41cd3c:	b089      	sub	sp, #36	; 0x24
  41cd3e:	4680      	mov	r8, r0
  41cd40:	9100      	str	r1, [sp, #0]
    lv_area_t btnm_cords;
    lv_area_t btn_area;
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41cd42:	4b69      	ldr	r3, [pc, #420]	; (41cee8 <get_button_from_point+0x1b0>)
  41cd44:	4798      	blx	r3
  41cd46:	4604      	mov	r4, r0
    uint16_t i;
    lv_obj_get_coords(btnm, &btnm_cords);
  41cd48:	a906      	add	r1, sp, #24
  41cd4a:	4640      	mov	r0, r8
  41cd4c:	4b67      	ldr	r3, [pc, #412]	; (41ceec <get_button_from_point+0x1b4>)
  41cd4e:	4798      	blx	r3

    lv_coord_t w = lv_obj_get_width(btnm);
  41cd50:	4640      	mov	r0, r8
  41cd52:	4b67      	ldr	r3, [pc, #412]	; (41cef0 <get_button_from_point+0x1b8>)
  41cd54:	4798      	blx	r3
  41cd56:	9002      	str	r0, [sp, #8]
    lv_coord_t h = lv_obj_get_height(btnm);
  41cd58:	4640      	mov	r0, r8
  41cd5a:	4b66      	ldr	r3, [pc, #408]	; (41cef4 <get_button_from_point+0x1bc>)
  41cd5c:	4798      	blx	r3
  41cd5e:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41cd60:	2212      	movs	r2, #18
  41cd62:	2100      	movs	r1, #0
  41cd64:	4640      	mov	r0, r8
  41cd66:	4f64      	ldr	r7, [pc, #400]	; (41cef8 <get_button_from_point+0x1c0>)
  41cd68:	47b8      	blx	r7
  41cd6a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41cd6c:	2213      	movs	r2, #19
  41cd6e:	2100      	movs	r1, #0
  41cd70:	4640      	mov	r0, r8
  41cd72:	47b8      	blx	r7
  41cd74:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41cd76:	2210      	movs	r2, #16
  41cd78:	2100      	movs	r1, #0
  41cd7a:	4640      	mov	r0, r8
  41cd7c:	47b8      	blx	r7
  41cd7e:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41cd80:	2211      	movs	r2, #17
  41cd82:	2100      	movs	r1, #0
  41cd84:	4640      	mov	r0, r8
  41cd86:	47b8      	blx	r7
  41cd88:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41cd8a:	2214      	movs	r2, #20
  41cd8c:	2100      	movs	r1, #0
  41cd8e:	4640      	mov	r0, r8
  41cd90:	47b8      	blx	r7
    lv_style_int_t ptop = lv_obj_get_style_pad_top(btnm, LV_BTNMATRIX_PART_BG);
    lv_style_int_t pbottom = lv_obj_get_style_pad_bottom(btnm, LV_BTNMATRIX_PART_BG);
    lv_style_int_t pinner = lv_obj_get_style_pad_inner(btnm, LV_BTNMATRIX_PART_BG);

    /*Get the half inner padding. Button look larger with this value. (+1 for rounding error)*/
    pinner = (pinner / 2) + 1 + (pinner & 1);
  41cd92:	4603      	mov	r3, r0
  41cd94:	2800      	cmp	r0, #0
  41cd96:	bfb8      	it	lt
  41cd98:	1c43      	addlt	r3, r0, #1
  41cd9a:	f000 0801 	and.w	r8, r0, #1
  41cd9e:	eb08 0863 	add.w	r8, r8, r3, asr #1
  41cda2:	f108 0801 	add.w	r8, r8, #1
  41cda6:	fa0f f888 	sxth.w	r8, r8

    pinner = LV_MATH_MIN(pinner, BTN_EXTRA_CLICK_AREA_MAX);
  41cdaa:	f1b8 0f25 	cmp.w	r8, #37	; 0x25
  41cdae:	bfa8      	it	ge
  41cdb0:	f04f 0825 	movge.w	r8, #37	; 0x25
    pright = LV_MATH_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
  41cdb4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
  41cdb8:	bfa8      	it	ge
  41cdba:	f04f 0a25 	movge.w	sl, #37	; 0x25
  41cdbe:	fa0f f28a 	sxth.w	r2, sl
    ptop = LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
  41cdc2:	2d25      	cmp	r5, #37	; 0x25
  41cdc4:	bfa8      	it	ge
  41cdc6:	2525      	movge	r5, #37	; 0x25
  41cdc8:	fa0f fa85 	sxth.w	sl, r5
    pbottom = LV_MATH_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
  41cdcc:	4633      	mov	r3, r6
  41cdce:	2e25      	cmp	r6, #37	; 0x25
  41cdd0:	bfa8      	it	ge
  41cdd2:	2325      	movge	r3, #37	; 0x25
  41cdd4:	b21b      	sxth	r3, r3

    for(i = 0; i < ext->btn_cnt; i++) {
  41cdd6:	8aa1      	ldrh	r1, [r4, #20]
  41cdd8:	2900      	cmp	r1, #0
  41cdda:	f000 8081 	beq.w	41cee0 <get_button_from_point+0x1a8>
  41cdde:	2500      	movs	r5, #0
        lv_area_copy(&btn_area, &ext->button_areas[i]);
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
  41cde0:	4649      	mov	r1, r9
  41cde2:	2925      	cmp	r1, #37	; 0x25
  41cde4:	bfa8      	it	ge
  41cde6:	2125      	movge	r1, #37	; 0x25
  41cde8:	9101      	str	r1, [sp, #4]
        else btn_area.x1 += btnm_cords.x1 - pinner;

        if(btn_area.y1 <= ptop) btn_area.y1 += btnm_cords.y1 - LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
  41cdea:	46d3      	mov	fp, sl
  41cdec:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
  41cdf0:	bfa8      	it	ge
  41cdf2:	f04f 0b25 	movge.w	fp, #37	; 0x25
        else btn_area.y1 += btnm_cords.y1 - pinner;

        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
  41cdf6:	9902      	ldr	r1, [sp, #8]
  41cdf8:	1a8f      	subs	r7, r1, r2
  41cdfa:	3f02      	subs	r7, #2
  41cdfc:	2a25      	cmp	r2, #37	; 0x25
  41cdfe:	bfa8      	it	ge
  41ce00:	2225      	movge	r2, #37	; 0x25
  41ce02:	9202      	str	r2, [sp, #8]
                                                                                         BTN_EXTRA_CLICK_AREA_MAX);  /*-2 for rounding error*/
        else btn_area.x2 += btnm_cords.x1 + pinner;

        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += btnm_cords.y1 + LV_MATH_MIN(pbottom,
  41ce04:	9a03      	ldr	r2, [sp, #12]
  41ce06:	1ad6      	subs	r6, r2, r3
  41ce08:	3e02      	subs	r6, #2
  41ce0a:	2b25      	cmp	r3, #37	; 0x25
  41ce0c:	bfa8      	it	ge
  41ce0e:	2325      	movge	r3, #37	; 0x25
  41ce10:	9303      	str	r3, [sp, #12]
  41ce12:	e020      	b.n	41ce56 <get_button_from_point+0x11e>
        else btn_area.x1 += btnm_cords.x1 - pinner;
  41ce14:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  41ce18:	4413      	add	r3, r2
  41ce1a:	eba3 0308 	sub.w	r3, r3, r8
  41ce1e:	f8ad 3010 	strh.w	r3, [sp, #16]
  41ce22:	e02f      	b.n	41ce84 <get_button_from_point+0x14c>
        else btn_area.x2 += btnm_cords.x1 + pinner;
  41ce24:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  41ce28:	4413      	add	r3, r2
  41ce2a:	4443      	add	r3, r8
  41ce2c:	f8ad 3014 	strh.w	r3, [sp, #20]
  41ce30:	e040      	b.n	41ceb4 <get_button_from_point+0x17c>
                                                                                          BTN_EXTRA_CLICK_AREA_MAX); /*-2 for rounding error*/
        else btn_area.y2 += btnm_cords.y1 + pinner;
  41ce32:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  41ce36:	4413      	add	r3, r2
  41ce38:	4443      	add	r3, r8
  41ce3a:	f8ad 3016 	strh.w	r3, [sp, #22]

        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
  41ce3e:	2200      	movs	r2, #0
  41ce40:	9900      	ldr	r1, [sp, #0]
  41ce42:	a804      	add	r0, sp, #16
  41ce44:	4b2d      	ldr	r3, [pc, #180]	; (41cefc <get_button_from_point+0x1c4>)
  41ce46:	4798      	blx	r3
  41ce48:	2800      	cmp	r0, #0
  41ce4a:	d13f      	bne.n	41cecc <get_button_from_point+0x194>
    for(i = 0; i < ext->btn_cnt; i++) {
  41ce4c:	3501      	adds	r5, #1
  41ce4e:	b2ad      	uxth	r5, r5
  41ce50:	8aa3      	ldrh	r3, [r4, #20]
  41ce52:	42ab      	cmp	r3, r5
  41ce54:	d93a      	bls.n	41cecc <get_button_from_point+0x194>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
  41ce56:	6860      	ldr	r0, [r4, #4]
  41ce58:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
  41ce5c:	1e43      	subs	r3, r0, #1
  41ce5e:	3007      	adds	r0, #7
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  41ce60:	aa04      	add	r2, sp, #16
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  41ce62:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  41ce66:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  41ce6a:	4283      	cmp	r3, r0
  41ce6c:	d1f9      	bne.n	41ce62 <get_button_from_point+0x12a>
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
  41ce6e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  41ce72:	454b      	cmp	r3, r9
  41ce74:	dcce      	bgt.n	41ce14 <get_button_from_point+0xdc>
  41ce76:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  41ce7a:	4413      	add	r3, r2
  41ce7c:	9a01      	ldr	r2, [sp, #4]
  41ce7e:	1a9b      	subs	r3, r3, r2
  41ce80:	f8ad 3010 	strh.w	r3, [sp, #16]
        if(btn_area.y1 <= ptop) btn_area.y1 += btnm_cords.y1 - LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
  41ce84:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41ce88:	459a      	cmp	sl, r3
  41ce8a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  41ce8e:	4413      	add	r3, r2
  41ce90:	bfac      	ite	ge
  41ce92:	eba3 030b 	subge.w	r3, r3, fp
        else btn_area.y1 += btnm_cords.y1 - pinner;
  41ce96:	eba3 0308 	sublt.w	r3, r3, r8
  41ce9a:	f8ad 3012 	strh.w	r3, [sp, #18]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
  41ce9e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  41cea2:	42bb      	cmp	r3, r7
  41cea4:	dbbe      	blt.n	41ce24 <get_button_from_point+0xec>
  41cea6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  41ceaa:	4413      	add	r3, r2
  41ceac:	9a02      	ldr	r2, [sp, #8]
  41ceae:	4413      	add	r3, r2
  41ceb0:	f8ad 3014 	strh.w	r3, [sp, #20]
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += btnm_cords.y1 + LV_MATH_MIN(pbottom,
  41ceb4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  41ceb8:	42b3      	cmp	r3, r6
  41ceba:	dbba      	blt.n	41ce32 <get_button_from_point+0xfa>
  41cebc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  41cec0:	4413      	add	r3, r2
  41cec2:	9a03      	ldr	r2, [sp, #12]
  41cec4:	4413      	add	r3, r2
  41cec6:	f8ad 3016 	strh.w	r3, [sp, #22]
  41ceca:	e7b8      	b.n	41ce3e <get_button_from_point+0x106>
            break;
        }
    }

    if(i == ext->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
  41cecc:	8aa2      	ldrh	r2, [r4, #20]
  41cece:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ced2:	42aa      	cmp	r2, r5
  41ced4:	bf08      	it	eq
  41ced6:	461d      	moveq	r5, r3

    return i;
}
  41ced8:	4628      	mov	r0, r5
  41ceda:	b009      	add	sp, #36	; 0x24
  41cedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(i == ext->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
  41cee0:	f64f 75ff 	movw	r5, #65535	; 0xffff
  41cee4:	e7f8      	b.n	41ced8 <get_button_from_point+0x1a0>
  41cee6:	bf00      	nop
  41cee8:	00407281 	.word	0x00407281
  41ceec:	004050d1 	.word	0x004050d1
  41cef0:	0040518d 	.word	0x0040518d
  41cef4:	004051bd 	.word	0x004051bd
  41cef8:	004069b5 	.word	0x004069b5
  41cefc:	004149f5 	.word	0x004149f5

0041cf00 <invalidate_button_area>:

static void invalidate_button_area(const lv_obj_t * btnm, uint16_t btn_idx)
{
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
  41cf00:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41cf04:	4299      	cmp	r1, r3
  41cf06:	d033      	beq.n	41cf70 <invalidate_button_area+0x70>
{
  41cf08:	b570      	push	{r4, r5, r6, lr}
  41cf0a:	b084      	sub	sp, #16
  41cf0c:	460e      	mov	r6, r1
  41cf0e:	4605      	mov	r5, r0

    lv_area_t btn_area;
    lv_area_t btnm_area;

    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41cf10:	4b18      	ldr	r3, [pc, #96]	; (41cf74 <invalidate_button_area+0x74>)
  41cf12:	4798      	blx	r3
    lv_area_copy(&btn_area, &ext->button_areas[btn_idx]);
  41cf14:	6844      	ldr	r4, [r0, #4]
  41cf16:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  41cf1a:	1e63      	subs	r3, r4, #1
  41cf1c:	3407      	adds	r4, #7
    uint8_t * d8 = (uint8_t *)dst;
  41cf1e:	aa02      	add	r2, sp, #8
        *d8 = *s8;
  41cf20:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  41cf24:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  41cf28:	42a3      	cmp	r3, r4
  41cf2a:	d1f9      	bne.n	41cf20 <invalidate_button_area+0x20>
    lv_obj_get_coords(btnm, &btnm_area);
  41cf2c:	4669      	mov	r1, sp
  41cf2e:	4628      	mov	r0, r5
  41cf30:	4b11      	ldr	r3, [pc, #68]	; (41cf78 <invalidate_button_area+0x78>)
  41cf32:	4798      	blx	r3

    /* Convert relative coordinates to absolute */
    btn_area.x1 += btnm_area.x1;
  41cf34:	f8bd 2000 	ldrh.w	r2, [sp]
  41cf38:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  41cf3c:	4413      	add	r3, r2
  41cf3e:	f8ad 3008 	strh.w	r3, [sp, #8]
    btn_area.y1 += btnm_area.y1;
  41cf42:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  41cf46:	f8bd 100a 	ldrh.w	r1, [sp, #10]
  41cf4a:	4419      	add	r1, r3
  41cf4c:	f8ad 100a 	strh.w	r1, [sp, #10]
    btn_area.x2 += btnm_area.x1;
  41cf50:	f8bd 100c 	ldrh.w	r1, [sp, #12]
  41cf54:	440a      	add	r2, r1
  41cf56:	f8ad 200c 	strh.w	r2, [sp, #12]
    btn_area.y2 += btnm_area.y1;
  41cf5a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  41cf5e:	4413      	add	r3, r2
  41cf60:	f8ad 300e 	strh.w	r3, [sp, #14]

    lv_obj_invalidate_area(btnm, &btn_area);
  41cf64:	a902      	add	r1, sp, #8
  41cf66:	4628      	mov	r0, r5
  41cf68:	4b04      	ldr	r3, [pc, #16]	; (41cf7c <invalidate_button_area+0x7c>)
  41cf6a:	4798      	blx	r3
}
  41cf6c:	b004      	add	sp, #16
  41cf6e:	bd70      	pop	{r4, r5, r6, pc}
  41cf70:	4770      	bx	lr
  41cf72:	bf00      	nop
  41cf74:	00407281 	.word	0x00407281
  41cf78:	004050d1 	.word	0x004050d1
  41cf7c:	00405505 	.word	0x00405505

0041cf80 <lv_btnmatrix_set_map>:
{
  41cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41cf84:	b095      	sub	sp, #84	; 0x54
  41cf86:	4604      	mov	r4, r0
  41cf88:	9002      	str	r0, [sp, #8]
  41cf8a:	4689      	mov	r9, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41cf8c:	4b88      	ldr	r3, [pc, #544]	; (41d1b0 <lv_btnmatrix_set_map+0x230>)
  41cf8e:	4798      	blx	r3
  41cf90:	b928      	cbnz	r0, 41cf9e <lv_btnmatrix_set_map+0x1e>
  41cf92:	4622      	mov	r2, r4
  41cf94:	2300      	movs	r3, #0
  41cf96:	4887      	ldr	r0, [pc, #540]	; (41d1b4 <lv_btnmatrix_set_map+0x234>)
  41cf98:	4987      	ldr	r1, [pc, #540]	; (41d1b8 <lv_btnmatrix_set_map+0x238>)
  41cf9a:	4788      	blx	r1
  41cf9c:	e7fe      	b.n	41cf9c <lv_btnmatrix_set_map+0x1c>
    LV_ASSERT_NULL(map);
  41cf9e:	4648      	mov	r0, r9
  41cfa0:	4b83      	ldr	r3, [pc, #524]	; (41d1b0 <lv_btnmatrix_set_map+0x230>)
  41cfa2:	4798      	blx	r3
  41cfa4:	b928      	cbnz	r0, 41cfb2 <lv_btnmatrix_set_map+0x32>
  41cfa6:	464a      	mov	r2, r9
  41cfa8:	2300      	movs	r3, #0
  41cfaa:	4882      	ldr	r0, [pc, #520]	; (41d1b4 <lv_btnmatrix_set_map+0x234>)
  41cfac:	4982      	ldr	r1, [pc, #520]	; (41d1b8 <lv_btnmatrix_set_map+0x238>)
  41cfae:	4788      	blx	r1
  41cfb0:	e7fe      	b.n	41cfb0 <lv_btnmatrix_set_map+0x30>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41cfb2:	9802      	ldr	r0, [sp, #8]
  41cfb4:	4b81      	ldr	r3, [pc, #516]	; (41d1bc <lv_btnmatrix_set_map+0x23c>)
  41cfb6:	4798      	blx	r3
  41cfb8:	4680      	mov	r8, r0
    while(strlen(map[i]) != 0) {
  41cfba:	f8d9 0000 	ldr.w	r0, [r9]
  41cfbe:	7803      	ldrb	r3, [r0, #0]
  41cfc0:	b18b      	cbz	r3, 41cfe6 <lv_btnmatrix_set_map+0x66>
  41cfc2:	2400      	movs	r4, #0
  41cfc4:	4625      	mov	r5, r4
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
  41cfc6:	4f7e      	ldr	r7, [pc, #504]	; (41d1c0 <lv_btnmatrix_set_map+0x240>)
  41cfc8:	4e7e      	ldr	r6, [pc, #504]	; (41d1c4 <lv_btnmatrix_set_map+0x244>)
  41cfca:	e005      	b.n	41cfd8 <lv_btnmatrix_set_map+0x58>
        i++;
  41cfcc:	3401      	adds	r4, #1
  41cfce:	b2a4      	uxth	r4, r4
    while(strlen(map[i]) != 0) {
  41cfd0:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
  41cfd4:	7803      	ldrb	r3, [r0, #0]
  41cfd6:	b13b      	cbz	r3, 41cfe8 <lv_btnmatrix_set_map+0x68>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
  41cfd8:	4639      	mov	r1, r7
  41cfda:	47b0      	blx	r6
  41cfdc:	2800      	cmp	r0, #0
  41cfde:	d0f5      	beq.n	41cfcc <lv_btnmatrix_set_map+0x4c>
            btn_cnt++;
  41cfe0:	3501      	adds	r5, #1
  41cfe2:	b2ad      	uxth	r5, r5
  41cfe4:	e7f2      	b.n	41cfcc <lv_btnmatrix_set_map+0x4c>
    uint16_t btn_cnt = 0;
  41cfe6:	2500      	movs	r5, #0
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41cfe8:	9802      	ldr	r0, [sp, #8]
  41cfea:	4b74      	ldr	r3, [pc, #464]	; (41d1bc <lv_btnmatrix_set_map+0x23c>)
  41cfec:	4798      	blx	r3
  41cfee:	4604      	mov	r4, r0
    if(btn_cnt == ext->btn_cnt) return;
  41cff0:	8a83      	ldrh	r3, [r0, #20]
  41cff2:	42ab      	cmp	r3, r5
  41cff4:	d031      	beq.n	41d05a <lv_btnmatrix_set_map+0xda>
    if(ext->button_areas != NULL) {
  41cff6:	6840      	ldr	r0, [r0, #4]
  41cff8:	b118      	cbz	r0, 41d002 <lv_btnmatrix_set_map+0x82>
        lv_mem_free(ext->button_areas);
  41cffa:	4b73      	ldr	r3, [pc, #460]	; (41d1c8 <lv_btnmatrix_set_map+0x248>)
  41cffc:	4798      	blx	r3
        ext->button_areas = NULL;
  41cffe:	2300      	movs	r3, #0
  41d000:	6063      	str	r3, [r4, #4]
    if(ext->ctrl_bits != NULL) {
  41d002:	68a0      	ldr	r0, [r4, #8]
  41d004:	b118      	cbz	r0, 41d00e <lv_btnmatrix_set_map+0x8e>
        lv_mem_free(ext->ctrl_bits);
  41d006:	4b70      	ldr	r3, [pc, #448]	; (41d1c8 <lv_btnmatrix_set_map+0x248>)
  41d008:	4798      	blx	r3
        ext->ctrl_bits = NULL;
  41d00a:	2300      	movs	r3, #0
  41d00c:	60a3      	str	r3, [r4, #8]
    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
  41d00e:	00e8      	lsls	r0, r5, #3
  41d010:	4b6e      	ldr	r3, [pc, #440]	; (41d1cc <lv_btnmatrix_set_map+0x24c>)
  41d012:	4798      	blx	r3
  41d014:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MEM(ext->button_areas);
  41d016:	4b66      	ldr	r3, [pc, #408]	; (41d1b0 <lv_btnmatrix_set_map+0x230>)
  41d018:	4798      	blx	r3
  41d01a:	b928      	cbnz	r0, 41d028 <lv_btnmatrix_set_map+0xa8>
  41d01c:	6862      	ldr	r2, [r4, #4]
  41d01e:	2300      	movs	r3, #0
  41d020:	486b      	ldr	r0, [pc, #428]	; (41d1d0 <lv_btnmatrix_set_map+0x250>)
  41d022:	4965      	ldr	r1, [pc, #404]	; (41d1b8 <lv_btnmatrix_set_map+0x238>)
  41d024:	4788      	blx	r1
  41d026:	e7fe      	b.n	41d026 <lv_btnmatrix_set_map+0xa6>
    ext->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
  41d028:	0068      	lsls	r0, r5, #1
  41d02a:	4b68      	ldr	r3, [pc, #416]	; (41d1cc <lv_btnmatrix_set_map+0x24c>)
  41d02c:	4798      	blx	r3
  41d02e:	60a0      	str	r0, [r4, #8]
    LV_ASSERT_MEM(ext->ctrl_bits);
  41d030:	4b5f      	ldr	r3, [pc, #380]	; (41d1b0 <lv_btnmatrix_set_map+0x230>)
  41d032:	4798      	blx	r3
  41d034:	b928      	cbnz	r0, 41d042 <lv_btnmatrix_set_map+0xc2>
  41d036:	68a2      	ldr	r2, [r4, #8]
  41d038:	2300      	movs	r3, #0
  41d03a:	4865      	ldr	r0, [pc, #404]	; (41d1d0 <lv_btnmatrix_set_map+0x250>)
  41d03c:	495e      	ldr	r1, [pc, #376]	; (41d1b8 <lv_btnmatrix_set_map+0x238>)
  41d03e:	4788      	blx	r1
  41d040:	e7fe      	b.n	41d040 <lv_btnmatrix_set_map+0xc0>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
  41d042:	6863      	ldr	r3, [r4, #4]
  41d044:	2b00      	cmp	r3, #0
  41d046:	d049      	beq.n	41d0dc <lv_btnmatrix_set_map+0x15c>
  41d048:	68a3      	ldr	r3, [r4, #8]
  41d04a:	2b00      	cmp	r3, #0
  41d04c:	bf08      	it	eq
  41d04e:	2500      	moveq	r5, #0
    _lv_memset_00(ext->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
  41d050:	0069      	lsls	r1, r5, #1
  41d052:	68a0      	ldr	r0, [r4, #8]
  41d054:	4b5f      	ldr	r3, [pc, #380]	; (41d1d4 <lv_btnmatrix_set_map+0x254>)
  41d056:	4798      	blx	r3
    ext->btn_cnt = btn_cnt;
  41d058:	82a5      	strh	r5, [r4, #20]
    ext->map_p = map;
  41d05a:	f8c8 9000 	str.w	r9, [r8]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41d05e:	2212      	movs	r2, #18
  41d060:	2100      	movs	r1, #0
  41d062:	9e02      	ldr	r6, [sp, #8]
  41d064:	4630      	mov	r0, r6
  41d066:	4d5c      	ldr	r5, [pc, #368]	; (41d1d8 <lv_btnmatrix_set_map+0x258>)
  41d068:	47a8      	blx	r5
  41d06a:	4683      	mov	fp, r0
  41d06c:	9012      	str	r0, [sp, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41d06e:	2213      	movs	r2, #19
  41d070:	2100      	movs	r1, #0
  41d072:	4630      	mov	r0, r6
  41d074:	47a8      	blx	r5
  41d076:	4682      	mov	sl, r0
  41d078:	9011      	str	r0, [sp, #68]	; 0x44
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41d07a:	2210      	movs	r2, #16
  41d07c:	2100      	movs	r1, #0
  41d07e:	4630      	mov	r0, r6
  41d080:	47a8      	blx	r5
  41d082:	4607      	mov	r7, r0
  41d084:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41d086:	2211      	movs	r2, #17
  41d088:	2100      	movs	r1, #0
  41d08a:	4630      	mov	r0, r6
  41d08c:	47a8      	blx	r5
  41d08e:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41d090:	2214      	movs	r2, #20
  41d092:	2100      	movs	r1, #0
  41d094:	4630      	mov	r0, r6
  41d096:	47a8      	blx	r5
  41d098:	9008      	str	r0, [sp, #32]
    lv_coord_t max_w            = lv_obj_get_width(btnm) - left - right;
  41d09a:	4630      	mov	r0, r6
  41d09c:	4b4f      	ldr	r3, [pc, #316]	; (41d1dc <lv_btnmatrix_set_map+0x25c>)
  41d09e:	4798      	blx	r3
  41d0a0:	fa1f f38b 	uxth.w	r3, fp
  41d0a4:	930c      	str	r3, [sp, #48]	; 0x30
  41d0a6:	fa1f f28a 	uxth.w	r2, sl
  41d0aa:	920d      	str	r2, [sp, #52]	; 0x34
  41d0ac:	1ac3      	subs	r3, r0, r3
  41d0ae:	1a9b      	subs	r3, r3, r2
  41d0b0:	b29b      	uxth	r3, r3
  41d0b2:	930e      	str	r3, [sp, #56]	; 0x38
  41d0b4:	b21b      	sxth	r3, r3
  41d0b6:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_coord_t max_h            = lv_obj_get_height(btnm) - top - bottom;
  41d0b8:	4630      	mov	r0, r6
  41d0ba:	4b49      	ldr	r3, [pc, #292]	; (41d1e0 <lv_btnmatrix_set_map+0x260>)
  41d0bc:	4798      	blx	r3
  41d0be:	b2a3      	uxth	r3, r4
  41d0c0:	9310      	str	r3, [sp, #64]	; 0x40
  41d0c2:	1bc6      	subs	r6, r0, r7
  41d0c4:	1af6      	subs	r6, r6, r3
  41d0c6:	b2b6      	uxth	r6, r6
    for(li = 0; strlen(map[li]) != 0; li++) {
  41d0c8:	f8d9 0000 	ldr.w	r0, [r9]
  41d0cc:	7803      	ldrb	r3, [r0, #0]
  41d0ce:	b1a3      	cbz	r3, 41d0fa <lv_btnmatrix_set_map+0x17a>
  41d0d0:	2500      	movs	r5, #0
  41d0d2:	2401      	movs	r4, #1
        if(strcmp(map[li], "\n") == 0) line_cnt++;
  41d0d4:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 41d1c0 <lv_btnmatrix_set_map+0x240>
  41d0d8:	4f3a      	ldr	r7, [pc, #232]	; (41d1c4 <lv_btnmatrix_set_map+0x244>)
  41d0da:	e007      	b.n	41d0ec <lv_btnmatrix_set_map+0x16c>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
  41d0dc:	2500      	movs	r5, #0
  41d0de:	e7b7      	b.n	41d050 <lv_btnmatrix_set_map+0xd0>
    for(li = 0; strlen(map[li]) != 0; li++) {
  41d0e0:	3501      	adds	r5, #1
  41d0e2:	b2ed      	uxtb	r5, r5
  41d0e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
  41d0e8:	7803      	ldrb	r3, [r0, #0]
  41d0ea:	b13b      	cbz	r3, 41d0fc <lv_btnmatrix_set_map+0x17c>
        if(strcmp(map[li], "\n") == 0) line_cnt++;
  41d0ec:	4651      	mov	r1, sl
  41d0ee:	47b8      	blx	r7
  41d0f0:	2800      	cmp	r0, #0
  41d0f2:	d1f5      	bne.n	41d0e0 <lv_btnmatrix_set_map+0x160>
  41d0f4:	3401      	adds	r4, #1
  41d0f6:	b2e4      	uxtb	r4, r4
  41d0f8:	e7f2      	b.n	41d0e0 <lv_btnmatrix_set_map+0x160>
    uint8_t line_cnt = 1;
  41d0fa:	2401      	movs	r4, #1
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * inner);
  41d0fc:	f8bd a020 	ldrh.w	sl, [sp, #32]
  41d100:	1e63      	subs	r3, r4, #1
  41d102:	fb13 f30a 	smulbb	r3, r3, sl
  41d106:	1af3      	subs	r3, r6, r3
    btn_h            = (btn_h + line_cnt / 2) / line_cnt;
  41d108:	0862      	lsrs	r2, r4, #1
  41d10a:	fa02 f383 	sxtah	r3, r2, r3
  41d10e:	fb93 f3f4 	sdiv	r3, r3, r4
    btn_h--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
  41d112:	3b01      	subs	r3, #1
  41d114:	b21b      	sxth	r3, r3
  41d116:	9304      	str	r3, [sp, #16]
    uint16_t btn_i          = 0; /*Act. index of button areas*/
  41d118:	f04f 0b00 	mov.w	fp, #0
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
  41d11c:	465f      	mov	r7, fp
  41d11e:	e0dd      	b.n	41d2dc <lv_btnmatrix_set_map+0x35c>
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
  41d120:	fa17 f286 	uxtah	r2, r7, r6
  41d124:	f8d8 3008 	ldr.w	r3, [r8, #8]
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
  41d128:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
  41d12c:	f003 0307 	and.w	r3, r3, #7
    return w != 0 ? w : 1;
  41d130:	2b00      	cmp	r3, #0
  41d132:	bf08      	it	eq
  41d134:	2301      	moveq	r3, #1
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
  41d136:	441c      	add	r4, r3
  41d138:	b2a4      	uxth	r4, r4
  41d13a:	3601      	adds	r6, #1
  41d13c:	b2b5      	uxth	r5, r6
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
  41d13e:	9505      	str	r5, [sp, #20]
  41d140:	eb09 0385 	add.w	r3, r9, r5, lsl #2
  41d144:	9306      	str	r3, [sp, #24]
  41d146:	f859 b025 	ldr.w	fp, [r9, r5, lsl #2]
  41d14a:	491d      	ldr	r1, [pc, #116]	; (41d1c0 <lv_btnmatrix_set_map+0x240>)
  41d14c:	4658      	mov	r0, fp
  41d14e:	4b1d      	ldr	r3, [pc, #116]	; (41d1c4 <lv_btnmatrix_set_map+0x244>)
  41d150:	4798      	blx	r3
  41d152:	b170      	cbz	r0, 41d172 <lv_btnmatrix_set_map+0x1f2>
  41d154:	f89b 3000 	ldrb.w	r3, [fp]
  41d158:	2b00      	cmp	r3, #0
  41d15a:	d1e1      	bne.n	41d120 <lv_btnmatrix_set_map+0x1a0>
            btn_h = lv_obj_get_height(btnm) - act_y - bottom - 1;
  41d15c:	9802      	ldr	r0, [sp, #8]
  41d15e:	4b20      	ldr	r3, [pc, #128]	; (41d1e0 <lv_btnmatrix_set_map+0x260>)
  41d160:	4798      	blx	r3
  41d162:	9b10      	ldr	r3, [sp, #64]	; 0x40
  41d164:	43db      	mvns	r3, r3
  41d166:	9a03      	ldr	r2, [sp, #12]
  41d168:	1a9b      	subs	r3, r3, r2
  41d16a:	4403      	add	r3, r0
  41d16c:	b21b      	sxth	r3, r3
  41d16e:	9304      	str	r3, [sp, #16]
  41d170:	e003      	b.n	41d17a <lv_btnmatrix_set_map+0x1fa>
        if(map_p_tmp[btn_cnt][0] == '\0') { /*Last row?*/
  41d172:	f89b 3000 	ldrb.w	r3, [fp]
  41d176:	2b00      	cmp	r3, #0
  41d178:	d0f0      	beq.n	41d15c <lv_btnmatrix_set_map+0x1dc>
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(btnm);
  41d17a:	9802      	ldr	r0, [sp, #8]
  41d17c:	4b19      	ldr	r3, [pc, #100]	; (41d1e4 <lv_btnmatrix_set_map+0x264>)
  41d17e:	4798      	blx	r3
  41d180:	9009      	str	r0, [sp, #36]	; 0x24
        if(btn_cnt != 0) {
  41d182:	2d00      	cmp	r5, #0
  41d184:	f000 809a 	beq.w	41d2bc <lv_btnmatrix_set_map+0x33c>
            lv_coord_t all_unit_w = max_w - ((unit_cnt - 1) * inner);
  41d188:	9407      	str	r4, [sp, #28]
  41d18a:	1e63      	subs	r3, r4, #1
  41d18c:	fb13 f30a 	smulbb	r3, r3, sl
  41d190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41d192:	1ad3      	subs	r3, r2, r3
  41d194:	fa0f fb83 	sxth.w	fp, r3
  41d198:	443d      	add	r5, r7
  41d19a:	b2ab      	uxth	r3, r5
  41d19c:	930a      	str	r3, [sp, #40]	; 0x28
  41d19e:	2500      	movs	r5, #0
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
  41d1a0:	9b03      	ldr	r3, [sp, #12]
  41d1a2:	9a04      	ldr	r2, [sp, #16]
  41d1a4:	4413      	add	r3, r2
  41d1a6:	b21b      	sxth	r3, r3
  41d1a8:	930b      	str	r3, [sp, #44]	; 0x2c
  41d1aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  41d1ae:	e04b      	b.n	41d248 <lv_btnmatrix_set_map+0x2c8>
  41d1b0:	004150ef 	.word	0x004150ef
  41d1b4:	00425a74 	.word	0x00425a74
  41d1b8:	004150f9 	.word	0x004150f9
  41d1bc:	00407281 	.word	0x00407281
  41d1c0:	004306d0 	.word	0x004306d0
  41d1c4:	004233c9 	.word	0x004233c9
  41d1c8:	004158b9 	.word	0x004158b9
  41d1cc:	004157c9 	.word	0x004157c9
  41d1d0:	00425a60 	.word	0x00425a60
  41d1d4:	00415ead 	.word	0x00415ead
  41d1d8:	004069b5 	.word	0x004069b5
  41d1dc:	0040518d 	.word	0x0040518d
  41d1e0:	004051bd 	.word	0x004051bd
  41d1e4:	00405d6d 	.word	0x00405d6d
                    act_x = lv_obj_get_width(btnm) - right - act_x - act_unit_w - 1;
  41d1e8:	9802      	ldr	r0, [sp, #8]
  41d1ea:	4b41      	ldr	r3, [pc, #260]	; (41d2f0 <lv_btnmatrix_set_map+0x370>)
  41d1ec:	4798      	blx	r3
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner;
  41d1ee:	fb1a f305 	smulbb	r3, sl, r5
                    act_x = lv_obj_get_width(btnm) - right - act_x - act_unit_w - 1;
  41d1f2:	43db      	mvns	r3, r3
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner;
  41d1f4:	fb0b f205 	mul.w	r2, fp, r5
  41d1f8:	9907      	ldr	r1, [sp, #28]
  41d1fa:	fb92 f2f1 	sdiv	r2, r2, r1
                    act_x = lv_obj_get_width(btnm) - right - act_x - act_unit_w - 1;
  41d1fe:	1a9b      	subs	r3, r3, r2
  41d200:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  41d202:	1a9b      	subs	r3, r3, r2
  41d204:	1b1b      	subs	r3, r3, r4
  41d206:	4403      	add	r3, r0
  41d208:	b219      	sxth	r1, r3
                if(btn_i != 0 && inner == 0 && ((act_x != left && base_dir != LV_BIDI_DIR_RTL) ||
  41d20a:	b15f      	cbz	r7, 41d224 <lv_btnmatrix_set_map+0x2a4>
  41d20c:	9b08      	ldr	r3, [sp, #32]
  41d20e:	b94b      	cbnz	r3, 41d224 <lv_btnmatrix_set_map+0x2a4>
                                                (act_x + act_unit_w == max_w - right && base_dir == LV_BIDI_DIR_RTL))) {
  41d210:	fa01 f384 	sxtah	r3, r1, r4
  41d214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  41d216:	9811      	ldr	r0, [sp, #68]	; 0x44
  41d218:	1a12      	subs	r2, r2, r0
  41d21a:	4293      	cmp	r3, r2
  41d21c:	d102      	bne.n	41d224 <lv_btnmatrix_set_map+0x2a4>
  41d21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41d220:	2b01      	cmp	r3, #1
  41d222:	d03a      	beq.n	41d29a <lv_btnmatrix_set_map+0x31a>
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
  41d224:	1863      	adds	r3, r4, r1
  41d226:	f8d8 0004 	ldr.w	r0, [r8, #4]
  41d22a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  41d22c:	9200      	str	r2, [sp, #0]
  41d22e:	b21b      	sxth	r3, r3
  41d230:	9a03      	ldr	r2, [sp, #12]
  41d232:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
  41d236:	4c2f      	ldr	r4, [pc, #188]	; (41d2f4 <lv_btnmatrix_set_map+0x374>)
  41d238:	47a0      	blx	r4
                unit_act_cnt += btn_unit_w;
  41d23a:	4435      	add	r5, r6
  41d23c:	b2ad      	uxth	r5, r5
                btn_i++;
  41d23e:	3701      	adds	r7, #1
  41d240:	b2bf      	uxth	r7, r7
            for(i = 0; i < btn_cnt; i++) {
  41d242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41d244:	429f      	cmp	r7, r3
  41d246:	d036      	beq.n	41d2b6 <lv_btnmatrix_set_map+0x336>
                uint8_t btn_unit_w = get_button_width(ext->ctrl_bits[btn_i]);
  41d248:	46b9      	mov	r9, r7
  41d24a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
  41d24e:	f813 6017 	ldrb.w	r6, [r3, r7, lsl #1]
  41d252:	f006 0607 	and.w	r6, r6, #7
    return w != 0 ? w : 1;
  41d256:	2e00      	cmp	r6, #0
  41d258:	bf08      	it	eq
  41d25a:	2601      	moveq	r6, #1
                lv_coord_t act_unit_w = (all_unit_w * btn_unit_w) / unit_cnt + inner * (btn_unit_w - 1);
  41d25c:	fb06 f30b 	mul.w	r3, r6, fp
  41d260:	9a07      	ldr	r2, [sp, #28]
  41d262:	fb93 f3f2 	sdiv	r3, r3, r2
  41d266:	1e74      	subs	r4, r6, #1
  41d268:	fb14 340a 	smlabb	r4, r4, sl, r3
                act_unit_w--; /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
  41d26c:	3c01      	subs	r4, #1
  41d26e:	b2a4      	uxth	r4, r4
                if(base_dir == LV_BIDI_DIR_RTL)  {
  41d270:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41d272:	2b01      	cmp	r3, #1
  41d274:	d0b8      	beq.n	41d1e8 <lv_btnmatrix_set_map+0x268>
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner +
  41d276:	fb0b f105 	mul.w	r1, fp, r5
  41d27a:	9b07      	ldr	r3, [sp, #28]
  41d27c:	fb91 f1f3 	sdiv	r1, r1, r3
  41d280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41d282:	fb1a 3305 	smlabb	r3, sl, r5, r3
  41d286:	4419      	add	r1, r3
  41d288:	b209      	sxth	r1, r1
                if(btn_i != 0 && inner == 0 && ((act_x != left && base_dir != LV_BIDI_DIR_RTL) ||
  41d28a:	2f00      	cmp	r7, #0
  41d28c:	d0ca      	beq.n	41d224 <lv_btnmatrix_set_map+0x2a4>
  41d28e:	9b08      	ldr	r3, [sp, #32]
  41d290:	2b00      	cmp	r3, #0
  41d292:	d1c7      	bne.n	41d224 <lv_btnmatrix_set_map+0x2a4>
  41d294:	9b12      	ldr	r3, [sp, #72]	; 0x48
  41d296:	4299      	cmp	r1, r3
  41d298:	d0c4      	beq.n	41d224 <lv_btnmatrix_set_map+0x2a4>
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
  41d29a:	f8d8 0004 	ldr.w	r0, [r8, #4]
  41d29e:	1863      	adds	r3, r4, r1
  41d2a0:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
  41d2a4:	f930 1c04 	ldrsh.w	r1, [r0, #-4]
  41d2a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  41d2aa:	9200      	str	r2, [sp, #0]
  41d2ac:	b21b      	sxth	r3, r3
  41d2ae:	9a03      	ldr	r2, [sp, #12]
  41d2b0:	4c10      	ldr	r4, [pc, #64]	; (41d2f4 <lv_btnmatrix_set_map+0x374>)
  41d2b2:	47a0      	blx	r4
  41d2b4:	e7c1      	b.n	41d23a <lv_btnmatrix_set_map+0x2ba>
  41d2b6:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
                btn_i++;
  41d2ba:	461f      	mov	r7, r3
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
  41d2bc:	9b06      	ldr	r3, [sp, #24]
  41d2be:	681b      	ldr	r3, [r3, #0]
  41d2c0:	781b      	ldrb	r3, [r3, #0]
  41d2c2:	b173      	cbz	r3, 41d2e2 <lv_btnmatrix_set_map+0x362>
        act_y += btn_h + inner + 1;
  41d2c4:	f10a 0301 	add.w	r3, sl, #1
  41d2c8:	9a03      	ldr	r2, [sp, #12]
  41d2ca:	4413      	add	r3, r2
  41d2cc:	9a04      	ldr	r2, [sp, #16]
  41d2ce:	4413      	add	r3, r2
  41d2d0:	b21b      	sxth	r3, r3
  41d2d2:	9303      	str	r3, [sp, #12]
        map_p_tmp = &map_p_tmp[btn_cnt + 1];       /*Set the map to the next line*/
  41d2d4:	9b05      	ldr	r3, [sp, #20]
  41d2d6:	3301      	adds	r3, #1
  41d2d8:	eb09 0983 	add.w	r9, r9, r3, lsl #2
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
  41d2dc:	2600      	movs	r6, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
  41d2de:	4634      	mov	r4, r6
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
  41d2e0:	e72c      	b.n	41d13c <lv_btnmatrix_set_map+0x1bc>
    lv_obj_invalidate(btnm);
  41d2e2:	9802      	ldr	r0, [sp, #8]
  41d2e4:	4b04      	ldr	r3, [pc, #16]	; (41d2f8 <lv_btnmatrix_set_map+0x378>)
  41d2e6:	4798      	blx	r3
}
  41d2e8:	b015      	add	sp, #84	; 0x54
  41d2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41d2ee:	bf00      	nop
  41d2f0:	0040518d 	.word	0x0040518d
  41d2f4:	00414923 	.word	0x00414923
  41d2f8:	00405565 	.word	0x00405565

0041d2fc <lv_btnmatrix_set_ctrl_map>:
{
  41d2fc:	b570      	push	{r4, r5, r6, lr}
  41d2fe:	4604      	mov	r4, r0
  41d300:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41d302:	4b0c      	ldr	r3, [pc, #48]	; (41d334 <lv_btnmatrix_set_ctrl_map+0x38>)
  41d304:	4798      	blx	r3
  41d306:	b928      	cbnz	r0, 41d314 <lv_btnmatrix_set_ctrl_map+0x18>
  41d308:	4622      	mov	r2, r4
  41d30a:	2300      	movs	r3, #0
  41d30c:	480a      	ldr	r0, [pc, #40]	; (41d338 <lv_btnmatrix_set_ctrl_map+0x3c>)
  41d30e:	490b      	ldr	r1, [pc, #44]	; (41d33c <lv_btnmatrix_set_ctrl_map+0x40>)
  41d310:	4788      	blx	r1
  41d312:	e7fe      	b.n	41d312 <lv_btnmatrix_set_ctrl_map+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41d314:	4620      	mov	r0, r4
  41d316:	4b0a      	ldr	r3, [pc, #40]	; (41d340 <lv_btnmatrix_set_ctrl_map+0x44>)
  41d318:	4798      	blx	r3
  41d31a:	4605      	mov	r5, r0
    _lv_memcpy(ext->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * ext->btn_cnt);
  41d31c:	8a82      	ldrh	r2, [r0, #20]
  41d31e:	0052      	lsls	r2, r2, #1
  41d320:	4631      	mov	r1, r6
  41d322:	6880      	ldr	r0, [r0, #8]
  41d324:	4b07      	ldr	r3, [pc, #28]	; (41d344 <lv_btnmatrix_set_ctrl_map+0x48>)
  41d326:	4798      	blx	r3
    lv_btnmatrix_set_map(btnm, ext->map_p);
  41d328:	6829      	ldr	r1, [r5, #0]
  41d32a:	4620      	mov	r0, r4
  41d32c:	4b06      	ldr	r3, [pc, #24]	; (41d348 <lv_btnmatrix_set_ctrl_map+0x4c>)
  41d32e:	4798      	blx	r3
  41d330:	bd70      	pop	{r4, r5, r6, pc}
  41d332:	bf00      	nop
  41d334:	004150ef 	.word	0x004150ef
  41d338:	00425a74 	.word	0x00425a74
  41d33c:	004150f9 	.word	0x004150f9
  41d340:	00407281 	.word	0x00407281
  41d344:	00415a1d 	.word	0x00415a1d
  41d348:	0041cf81 	.word	0x0041cf81

0041d34c <lv_btnmatrix_create>:
{
  41d34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41d34e:	460e      	mov	r6, r1
    lv_obj_t * btnm = lv_obj_create(par, copy);
  41d350:	4b3c      	ldr	r3, [pc, #240]	; (41d444 <lv_btnmatrix_create+0xf8>)
  41d352:	4798      	blx	r3
  41d354:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btnm);
  41d356:	4b3c      	ldr	r3, [pc, #240]	; (41d448 <lv_btnmatrix_create+0xfc>)
  41d358:	4798      	blx	r3
  41d35a:	b190      	cbz	r0, 41d382 <lv_btnmatrix_create+0x36>
    if(btnm == NULL) return NULL;
  41d35c:	2c00      	cmp	r4, #0
  41d35e:	d054      	beq.n	41d40a <lv_btnmatrix_create+0xbe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btnm);
  41d360:	4b3a      	ldr	r3, [pc, #232]	; (41d44c <lv_btnmatrix_create+0x100>)
  41d362:	681b      	ldr	r3, [r3, #0]
  41d364:	b19b      	cbz	r3, 41d38e <lv_btnmatrix_create+0x42>
    lv_btnmatrix_ext_t * ext = lv_obj_allocate_ext_attr(btnm, sizeof(lv_btnmatrix_ext_t));
  41d366:	2120      	movs	r1, #32
  41d368:	4620      	mov	r0, r4
  41d36a:	4b39      	ldr	r3, [pc, #228]	; (41d450 <lv_btnmatrix_create+0x104>)
  41d36c:	4798      	blx	r3
  41d36e:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  41d370:	4b35      	ldr	r3, [pc, #212]	; (41d448 <lv_btnmatrix_create+0xfc>)
  41d372:	4798      	blx	r3
  41d374:	b988      	cbnz	r0, 41d39a <lv_btnmatrix_create+0x4e>
  41d376:	462a      	mov	r2, r5
  41d378:	2300      	movs	r3, #0
  41d37a:	4836      	ldr	r0, [pc, #216]	; (41d454 <lv_btnmatrix_create+0x108>)
  41d37c:	4936      	ldr	r1, [pc, #216]	; (41d458 <lv_btnmatrix_create+0x10c>)
  41d37e:	4788      	blx	r1
  41d380:	e7fe      	b.n	41d380 <lv_btnmatrix_create+0x34>
    LV_ASSERT_MEM(btnm);
  41d382:	4622      	mov	r2, r4
  41d384:	2300      	movs	r3, #0
  41d386:	4833      	ldr	r0, [pc, #204]	; (41d454 <lv_btnmatrix_create+0x108>)
  41d388:	4933      	ldr	r1, [pc, #204]	; (41d458 <lv_btnmatrix_create+0x10c>)
  41d38a:	4788      	blx	r1
  41d38c:	e7fe      	b.n	41d38c <lv_btnmatrix_create+0x40>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btnm);
  41d38e:	4620      	mov	r0, r4
  41d390:	4b32      	ldr	r3, [pc, #200]	; (41d45c <lv_btnmatrix_create+0x110>)
  41d392:	4798      	blx	r3
  41d394:	4b2d      	ldr	r3, [pc, #180]	; (41d44c <lv_btnmatrix_create+0x100>)
  41d396:	6018      	str	r0, [r3, #0]
  41d398:	e7e5      	b.n	41d366 <lv_btnmatrix_create+0x1a>
    if(ext == NULL) {
  41d39a:	2d00      	cmp	r5, #0
  41d39c:	d037      	beq.n	41d40e <lv_btnmatrix_create+0xc2>
    ext->btn_cnt        = 0;
  41d39e:	2300      	movs	r3, #0
  41d3a0:	82ab      	strh	r3, [r5, #20]
    ext->btn_id_pr      = LV_BTNMATRIX_BTN_NONE;
  41d3a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41d3a6:	82ea      	strh	r2, [r5, #22]
    ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
  41d3a8:	832a      	strh	r2, [r5, #24]
    ext->btn_id_act     = LV_BTNMATRIX_BTN_NONE;
  41d3aa:	836a      	strh	r2, [r5, #26]
    ext->button_areas   = NULL;
  41d3ac:	606b      	str	r3, [r5, #4]
    ext->ctrl_bits      = NULL;
  41d3ae:	60ab      	str	r3, [r5, #8]
    ext->map_p          = NULL;
  41d3b0:	602b      	str	r3, [r5, #0]
    ext->recolor        = 0;
  41d3b2:	7f2a      	ldrb	r2, [r5, #28]
    ext->one_check      = 0;
  41d3b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  41d3b8:	f363 0241 	bfi	r2, r3, #1, #1
  41d3bc:	772a      	strb	r2, [r5, #28]
    lv_style_list_init(&ext->style_btn);
  41d3be:	f105 070c 	add.w	r7, r5, #12
  41d3c2:	4638      	mov	r0, r7
  41d3c4:	4b26      	ldr	r3, [pc, #152]	; (41d460 <lv_btnmatrix_create+0x114>)
  41d3c6:	4798      	blx	r3
    ext->style_btn.ignore_trans = 1;
  41d3c8:	7c6b      	ldrb	r3, [r5, #17]
  41d3ca:	f043 0302 	orr.w	r3, r3, #2
  41d3ce:	746b      	strb	r3, [r5, #17]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(btnm);
  41d3d0:	4b24      	ldr	r3, [pc, #144]	; (41d464 <lv_btnmatrix_create+0x118>)
  41d3d2:	681b      	ldr	r3, [r3, #0]
  41d3d4:	b303      	cbz	r3, 41d418 <lv_btnmatrix_create+0xcc>
    lv_obj_set_signal_cb(btnm, lv_btnmatrix_signal);
  41d3d6:	4924      	ldr	r1, [pc, #144]	; (41d468 <lv_btnmatrix_create+0x11c>)
  41d3d8:	4620      	mov	r0, r4
  41d3da:	4b24      	ldr	r3, [pc, #144]	; (41d46c <lv_btnmatrix_create+0x120>)
  41d3dc:	4798      	blx	r3
    lv_obj_set_design_cb(btnm, lv_btnmatrix_design);
  41d3de:	4924      	ldr	r1, [pc, #144]	; (41d470 <lv_btnmatrix_create+0x124>)
  41d3e0:	4620      	mov	r0, r4
  41d3e2:	4b24      	ldr	r3, [pc, #144]	; (41d474 <lv_btnmatrix_create+0x128>)
  41d3e4:	4798      	blx	r3
    if(copy == NULL) {
  41d3e6:	b1ee      	cbz	r6, 41d424 <lv_btnmatrix_create+0xd8>
        lv_btnmatrix_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41d3e8:	4630      	mov	r0, r6
  41d3ea:	4b23      	ldr	r3, [pc, #140]	; (41d478 <lv_btnmatrix_create+0x12c>)
  41d3ec:	4798      	blx	r3
  41d3ee:	4605      	mov	r5, r0
        lv_btnmatrix_set_map(btnm, copy_ext->map_p);
  41d3f0:	6801      	ldr	r1, [r0, #0]
  41d3f2:	4620      	mov	r0, r4
  41d3f4:	4b21      	ldr	r3, [pc, #132]	; (41d47c <lv_btnmatrix_create+0x130>)
  41d3f6:	4798      	blx	r3
        lv_btnmatrix_set_ctrl_map(btnm, copy_ext->ctrl_bits);
  41d3f8:	68a9      	ldr	r1, [r5, #8]
  41d3fa:	4620      	mov	r0, r4
  41d3fc:	4b20      	ldr	r3, [pc, #128]	; (41d480 <lv_btnmatrix_create+0x134>)
  41d3fe:	4798      	blx	r3
        lv_style_list_copy(&ext->style_btn, &copy_ext->style_btn);
  41d400:	f105 010c 	add.w	r1, r5, #12
  41d404:	4638      	mov	r0, r7
  41d406:	4b1f      	ldr	r3, [pc, #124]	; (41d484 <lv_btnmatrix_create+0x138>)
  41d408:	4798      	blx	r3
}
  41d40a:	4620      	mov	r0, r4
  41d40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_del(btnm);
  41d40e:	4620      	mov	r0, r4
  41d410:	4b1d      	ldr	r3, [pc, #116]	; (41d488 <lv_btnmatrix_create+0x13c>)
  41d412:	4798      	blx	r3
        return NULL;
  41d414:	2400      	movs	r4, #0
  41d416:	e7f8      	b.n	41d40a <lv_btnmatrix_create+0xbe>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(btnm);
  41d418:	4620      	mov	r0, r4
  41d41a:	4b1c      	ldr	r3, [pc, #112]	; (41d48c <lv_btnmatrix_create+0x140>)
  41d41c:	4798      	blx	r3
  41d41e:	4b11      	ldr	r3, [pc, #68]	; (41d464 <lv_btnmatrix_create+0x118>)
  41d420:	6018      	str	r0, [r3, #0]
  41d422:	e7d8      	b.n	41d3d6 <lv_btnmatrix_create+0x8a>
        lv_btnmatrix_set_map(btnm, lv_btnmatrix_def_map);
  41d424:	491a      	ldr	r1, [pc, #104]	; (41d490 <lv_btnmatrix_create+0x144>)
  41d426:	4620      	mov	r0, r4
  41d428:	4b14      	ldr	r3, [pc, #80]	; (41d47c <lv_btnmatrix_create+0x130>)
  41d42a:	4798      	blx	r3
        lv_obj_set_size(btnm, LV_DPI * 2, LV_DPI * 1);
  41d42c:	2294      	movs	r2, #148	; 0x94
  41d42e:	f44f 7194 	mov.w	r1, #296	; 0x128
  41d432:	4620      	mov	r0, r4
  41d434:	4b17      	ldr	r3, [pc, #92]	; (41d494 <lv_btnmatrix_create+0x148>)
  41d436:	4798      	blx	r3
        lv_theme_apply(btnm, LV_THEME_BTNMATRIX);
  41d438:	2106      	movs	r1, #6
  41d43a:	4620      	mov	r0, r4
  41d43c:	4b16      	ldr	r3, [pc, #88]	; (41d498 <lv_btnmatrix_create+0x14c>)
  41d43e:	4798      	blx	r3
  41d440:	e7e3      	b.n	41d40a <lv_btnmatrix_create+0xbe>
  41d442:	bf00      	nop
  41d444:	00405d95 	.word	0x00405d95
  41d448:	004150ef 	.word	0x004150ef
  41d44c:	20414790 	.word	0x20414790
  41d450:	00404f39 	.word	0x00404f39
  41d454:	00425a60 	.word	0x00425a60
  41d458:	004150f9 	.word	0x004150f9
  41d45c:	00407231 	.word	0x00407231
  41d460:	00409511 	.word	0x00409511
  41d464:	2041478c 	.word	0x2041478c
  41d468:	0041d725 	.word	0x0041d725
  41d46c:	00404ed5 	.word	0x00404ed5
  41d470:	0041dcd9 	.word	0x0041dcd9
  41d474:	00404f11 	.word	0x00404f11
  41d478:	00407281 	.word	0x00407281
  41d47c:	0041cf81 	.word	0x0041cf81
  41d480:	0041d2fd 	.word	0x0041d2fd
  41d484:	0040a2dd 	.word	0x0040a2dd
  41d488:	004073fd 	.word	0x004073fd
  41d48c:	00407259 	.word	0x00407259
  41d490:	20400098 	.word	0x20400098
  41d494:	004061cd 	.word	0x004061cd
  41d498:	00417431 	.word	0x00417431

0041d49c <lv_btnmatrix_set_focused_btn>:
{
  41d49c:	b538      	push	{r3, r4, r5, lr}
  41d49e:	4605      	mov	r5, r0
  41d4a0:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41d4a2:	4b11      	ldr	r3, [pc, #68]	; (41d4e8 <lv_btnmatrix_set_focused_btn+0x4c>)
  41d4a4:	4798      	blx	r3
  41d4a6:	b928      	cbnz	r0, 41d4b4 <lv_btnmatrix_set_focused_btn+0x18>
  41d4a8:	462a      	mov	r2, r5
  41d4aa:	2300      	movs	r3, #0
  41d4ac:	480f      	ldr	r0, [pc, #60]	; (41d4ec <lv_btnmatrix_set_focused_btn+0x50>)
  41d4ae:	4910      	ldr	r1, [pc, #64]	; (41d4f0 <lv_btnmatrix_set_focused_btn+0x54>)
  41d4b0:	4788      	blx	r1
  41d4b2:	e7fe      	b.n	41d4b2 <lv_btnmatrix_set_focused_btn+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41d4b4:	4628      	mov	r0, r5
  41d4b6:	4b0f      	ldr	r3, [pc, #60]	; (41d4f4 <lv_btnmatrix_set_focused_btn+0x58>)
  41d4b8:	4798      	blx	r3
    if(id >= ext->btn_cnt && id != LV_BTNMATRIX_BTN_NONE) return;
  41d4ba:	8a83      	ldrh	r3, [r0, #20]
  41d4bc:	42a3      	cmp	r3, r4
  41d4be:	d804      	bhi.n	41d4ca <lv_btnmatrix_set_focused_btn+0x2e>
  41d4c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41d4c4:	429c      	cmp	r4, r3
  41d4c6:	d000      	beq.n	41d4ca <lv_btnmatrix_set_focused_btn+0x2e>
  41d4c8:	bd38      	pop	{r3, r4, r5, pc}
    if(ext->btn_id_act == LV_BTNMATRIX_BTN_NONE) ext->btn_id_act = id;
  41d4ca:	8b42      	ldrh	r2, [r0, #26]
  41d4cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41d4d0:	429a      	cmp	r2, r3
  41d4d2:	bf08      	it	eq
  41d4d4:	8344      	strheq	r4, [r0, #26]
    if(id == ext->btn_id_focused) return;
  41d4d6:	8b03      	ldrh	r3, [r0, #24]
  41d4d8:	42a3      	cmp	r3, r4
  41d4da:	d0f5      	beq.n	41d4c8 <lv_btnmatrix_set_focused_btn+0x2c>
    ext->btn_id_focused = id;
  41d4dc:	8304      	strh	r4, [r0, #24]
    lv_obj_invalidate(btnm);
  41d4de:	4628      	mov	r0, r5
  41d4e0:	4b05      	ldr	r3, [pc, #20]	; (41d4f8 <lv_btnmatrix_set_focused_btn+0x5c>)
  41d4e2:	4798      	blx	r3
  41d4e4:	e7f0      	b.n	41d4c8 <lv_btnmatrix_set_focused_btn+0x2c>
  41d4e6:	bf00      	nop
  41d4e8:	004150ef 	.word	0x004150ef
  41d4ec:	00425a74 	.word	0x00425a74
  41d4f0:	004150f9 	.word	0x004150f9
  41d4f4:	00407281 	.word	0x00407281
  41d4f8:	00405565 	.word	0x00405565

0041d4fc <lv_btnmatrix_clear_btn_ctrl>:
{
  41d4fc:	b570      	push	{r4, r5, r6, lr}
  41d4fe:	4605      	mov	r5, r0
  41d500:	460c      	mov	r4, r1
  41d502:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41d504:	4b0d      	ldr	r3, [pc, #52]	; (41d53c <lv_btnmatrix_clear_btn_ctrl+0x40>)
  41d506:	4798      	blx	r3
  41d508:	b928      	cbnz	r0, 41d516 <lv_btnmatrix_clear_btn_ctrl+0x1a>
  41d50a:	462a      	mov	r2, r5
  41d50c:	2300      	movs	r3, #0
  41d50e:	480c      	ldr	r0, [pc, #48]	; (41d540 <lv_btnmatrix_clear_btn_ctrl+0x44>)
  41d510:	490c      	ldr	r1, [pc, #48]	; (41d544 <lv_btnmatrix_clear_btn_ctrl+0x48>)
  41d512:	4788      	blx	r1
  41d514:	e7fe      	b.n	41d514 <lv_btnmatrix_clear_btn_ctrl+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41d516:	4628      	mov	r0, r5
  41d518:	4b0b      	ldr	r3, [pc, #44]	; (41d548 <lv_btnmatrix_clear_btn_ctrl+0x4c>)
  41d51a:	4798      	blx	r3
    if(btn_id >= ext->btn_cnt) return;
  41d51c:	8a83      	ldrh	r3, [r0, #20]
  41d51e:	42a3      	cmp	r3, r4
  41d520:	d800      	bhi.n	41d524 <lv_btnmatrix_clear_btn_ctrl+0x28>
  41d522:	bd70      	pop	{r4, r5, r6, pc}
    ext->ctrl_bits[btn_id] &= (~ctrl);
  41d524:	6882      	ldr	r2, [r0, #8]
  41d526:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
  41d52a:	ea23 0306 	bic.w	r3, r3, r6
  41d52e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    invalidate_button_area(btnm, btn_id);
  41d532:	4621      	mov	r1, r4
  41d534:	4628      	mov	r0, r5
  41d536:	4b05      	ldr	r3, [pc, #20]	; (41d54c <lv_btnmatrix_clear_btn_ctrl+0x50>)
  41d538:	4798      	blx	r3
  41d53a:	e7f2      	b.n	41d522 <lv_btnmatrix_clear_btn_ctrl+0x26>
  41d53c:	004150ef 	.word	0x004150ef
  41d540:	00425a74 	.word	0x00425a74
  41d544:	004150f9 	.word	0x004150f9
  41d548:	00407281 	.word	0x00407281
  41d54c:	0041cf01 	.word	0x0041cf01

0041d550 <lv_btnmatrix_clear_btn_ctrl_all>:
{
  41d550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41d554:	4605      	mov	r5, r0
  41d556:	4688      	mov	r8, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41d558:	4b0d      	ldr	r3, [pc, #52]	; (41d590 <lv_btnmatrix_clear_btn_ctrl_all+0x40>)
  41d55a:	4798      	blx	r3
  41d55c:	b928      	cbnz	r0, 41d56a <lv_btnmatrix_clear_btn_ctrl_all+0x1a>
  41d55e:	462a      	mov	r2, r5
  41d560:	2300      	movs	r3, #0
  41d562:	480c      	ldr	r0, [pc, #48]	; (41d594 <lv_btnmatrix_clear_btn_ctrl_all+0x44>)
  41d564:	490c      	ldr	r1, [pc, #48]	; (41d598 <lv_btnmatrix_clear_btn_ctrl_all+0x48>)
  41d566:	4788      	blx	r1
  41d568:	e7fe      	b.n	41d568 <lv_btnmatrix_clear_btn_ctrl_all+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41d56a:	4628      	mov	r0, r5
  41d56c:	4b0b      	ldr	r3, [pc, #44]	; (41d59c <lv_btnmatrix_clear_btn_ctrl_all+0x4c>)
  41d56e:	4798      	blx	r3
  41d570:	4606      	mov	r6, r0
    for(i = 0; i < ext->btn_cnt; i++) {
  41d572:	8a83      	ldrh	r3, [r0, #20]
  41d574:	b153      	cbz	r3, 41d58c <lv_btnmatrix_clear_btn_ctrl_all+0x3c>
  41d576:	2400      	movs	r4, #0
        lv_btnmatrix_clear_btn_ctrl(btnm, i, ctrl);
  41d578:	4f09      	ldr	r7, [pc, #36]	; (41d5a0 <lv_btnmatrix_clear_btn_ctrl_all+0x50>)
  41d57a:	4642      	mov	r2, r8
  41d57c:	4621      	mov	r1, r4
  41d57e:	4628      	mov	r0, r5
  41d580:	47b8      	blx	r7
    for(i = 0; i < ext->btn_cnt; i++) {
  41d582:	3401      	adds	r4, #1
  41d584:	b2a4      	uxth	r4, r4
  41d586:	8ab3      	ldrh	r3, [r6, #20]
  41d588:	42a3      	cmp	r3, r4
  41d58a:	d8f6      	bhi.n	41d57a <lv_btnmatrix_clear_btn_ctrl_all+0x2a>
  41d58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41d590:	004150ef 	.word	0x004150ef
  41d594:	00425a74 	.word	0x00425a74
  41d598:	004150f9 	.word	0x004150f9
  41d59c:	00407281 	.word	0x00407281
  41d5a0:	0041d4fd 	.word	0x0041d4fd

0041d5a4 <lv_btnmatrix_set_btn_ctrl>:
{
  41d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41d5a6:	4605      	mov	r5, r0
  41d5a8:	460c      	mov	r4, r1
  41d5aa:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41d5ac:	4b13      	ldr	r3, [pc, #76]	; (41d5fc <lv_btnmatrix_set_btn_ctrl+0x58>)
  41d5ae:	4798      	blx	r3
  41d5b0:	b928      	cbnz	r0, 41d5be <lv_btnmatrix_set_btn_ctrl+0x1a>
  41d5b2:	462a      	mov	r2, r5
  41d5b4:	2300      	movs	r3, #0
  41d5b6:	4812      	ldr	r0, [pc, #72]	; (41d600 <lv_btnmatrix_set_btn_ctrl+0x5c>)
  41d5b8:	4912      	ldr	r1, [pc, #72]	; (41d604 <lv_btnmatrix_set_btn_ctrl+0x60>)
  41d5ba:	4788      	blx	r1
  41d5bc:	e7fe      	b.n	41d5bc <lv_btnmatrix_set_btn_ctrl+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41d5be:	4628      	mov	r0, r5
  41d5c0:	4b11      	ldr	r3, [pc, #68]	; (41d608 <lv_btnmatrix_set_btn_ctrl+0x64>)
  41d5c2:	4798      	blx	r3
  41d5c4:	4607      	mov	r7, r0
    if(btn_id >= ext->btn_cnt) return;
  41d5c6:	8a83      	ldrh	r3, [r0, #20]
  41d5c8:	42a3      	cmp	r3, r4
  41d5ca:	d915      	bls.n	41d5f8 <lv_btnmatrix_set_btn_ctrl+0x54>
    if(ext->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECK_STATE)) {
  41d5cc:	7f03      	ldrb	r3, [r0, #28]
  41d5ce:	f013 0f02 	tst.w	r3, #2
  41d5d2:	d007      	beq.n	41d5e4 <lv_btnmatrix_set_btn_ctrl+0x40>
  41d5d4:	f016 0f80 	tst.w	r6, #128	; 0x80
  41d5d8:	d004      	beq.n	41d5e4 <lv_btnmatrix_set_btn_ctrl+0x40>
        lv_btnmatrix_clear_btn_ctrl_all(btnm, LV_BTNMATRIX_CTRL_CHECK_STATE);
  41d5da:	2180      	movs	r1, #128	; 0x80
  41d5dc:	4628      	mov	r0, r5
  41d5de:	4b0b      	ldr	r3, [pc, #44]	; (41d60c <lv_btnmatrix_set_btn_ctrl+0x68>)
  41d5e0:	4798      	blx	r3
        ext->btn_id_act = btn_id;
  41d5e2:	837c      	strh	r4, [r7, #26]
    ext->ctrl_bits[btn_id] |= ctrl;
  41d5e4:	68bb      	ldr	r3, [r7, #8]
  41d5e6:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
  41d5ea:	4316      	orrs	r6, r2
  41d5ec:	f823 6014 	strh.w	r6, [r3, r4, lsl #1]
    invalidate_button_area(btnm, btn_id);
  41d5f0:	4621      	mov	r1, r4
  41d5f2:	4628      	mov	r0, r5
  41d5f4:	4b06      	ldr	r3, [pc, #24]	; (41d610 <lv_btnmatrix_set_btn_ctrl+0x6c>)
  41d5f6:	4798      	blx	r3
  41d5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41d5fa:	bf00      	nop
  41d5fc:	004150ef 	.word	0x004150ef
  41d600:	00425a74 	.word	0x00425a74
  41d604:	004150f9 	.word	0x004150f9
  41d608:	00407281 	.word	0x00407281
  41d60c:	0041d551 	.word	0x0041d551
  41d610:	0041cf01 	.word	0x0041cf01

0041d614 <lv_btnmatrix_get_map_array>:
{
  41d614:	b510      	push	{r4, lr}
  41d616:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41d618:	4b06      	ldr	r3, [pc, #24]	; (41d634 <lv_btnmatrix_get_map_array+0x20>)
  41d61a:	4798      	blx	r3
  41d61c:	b928      	cbnz	r0, 41d62a <lv_btnmatrix_get_map_array+0x16>
  41d61e:	4622      	mov	r2, r4
  41d620:	2300      	movs	r3, #0
  41d622:	4805      	ldr	r0, [pc, #20]	; (41d638 <lv_btnmatrix_get_map_array+0x24>)
  41d624:	4905      	ldr	r1, [pc, #20]	; (41d63c <lv_btnmatrix_get_map_array+0x28>)
  41d626:	4788      	blx	r1
  41d628:	e7fe      	b.n	41d628 <lv_btnmatrix_get_map_array+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41d62a:	4620      	mov	r0, r4
  41d62c:	4b04      	ldr	r3, [pc, #16]	; (41d640 <lv_btnmatrix_get_map_array+0x2c>)
  41d62e:	4798      	blx	r3
}
  41d630:	6800      	ldr	r0, [r0, #0]
  41d632:	bd10      	pop	{r4, pc}
  41d634:	004150ef 	.word	0x004150ef
  41d638:	00425a74 	.word	0x00425a74
  41d63c:	004150f9 	.word	0x004150f9
  41d640:	00407281 	.word	0x00407281

0041d644 <lv_btnmatrix_get_active_btn>:
{
  41d644:	b510      	push	{r4, lr}
  41d646:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41d648:	4b06      	ldr	r3, [pc, #24]	; (41d664 <lv_btnmatrix_get_active_btn+0x20>)
  41d64a:	4798      	blx	r3
  41d64c:	b928      	cbnz	r0, 41d65a <lv_btnmatrix_get_active_btn+0x16>
  41d64e:	4622      	mov	r2, r4
  41d650:	2300      	movs	r3, #0
  41d652:	4805      	ldr	r0, [pc, #20]	; (41d668 <lv_btnmatrix_get_active_btn+0x24>)
  41d654:	4905      	ldr	r1, [pc, #20]	; (41d66c <lv_btnmatrix_get_active_btn+0x28>)
  41d656:	4788      	blx	r1
  41d658:	e7fe      	b.n	41d658 <lv_btnmatrix_get_active_btn+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41d65a:	4620      	mov	r0, r4
  41d65c:	4b04      	ldr	r3, [pc, #16]	; (41d670 <lv_btnmatrix_get_active_btn+0x2c>)
  41d65e:	4798      	blx	r3
}
  41d660:	8b40      	ldrh	r0, [r0, #26]
  41d662:	bd10      	pop	{r4, pc}
  41d664:	004150ef 	.word	0x004150ef
  41d668:	00425a74 	.word	0x00425a74
  41d66c:	004150f9 	.word	0x004150f9
  41d670:	00407281 	.word	0x00407281

0041d674 <lv_btnmatrix_get_focused_btn>:
{
  41d674:	b510      	push	{r4, lr}
  41d676:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41d678:	4b06      	ldr	r3, [pc, #24]	; (41d694 <lv_btnmatrix_get_focused_btn+0x20>)
  41d67a:	4798      	blx	r3
  41d67c:	b928      	cbnz	r0, 41d68a <lv_btnmatrix_get_focused_btn+0x16>
  41d67e:	4622      	mov	r2, r4
  41d680:	2300      	movs	r3, #0
  41d682:	4805      	ldr	r0, [pc, #20]	; (41d698 <lv_btnmatrix_get_focused_btn+0x24>)
  41d684:	4905      	ldr	r1, [pc, #20]	; (41d69c <lv_btnmatrix_get_focused_btn+0x28>)
  41d686:	4788      	blx	r1
  41d688:	e7fe      	b.n	41d688 <lv_btnmatrix_get_focused_btn+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41d68a:	4620      	mov	r0, r4
  41d68c:	4b04      	ldr	r3, [pc, #16]	; (41d6a0 <lv_btnmatrix_get_focused_btn+0x2c>)
  41d68e:	4798      	blx	r3
}
  41d690:	8b00      	ldrh	r0, [r0, #24]
  41d692:	bd10      	pop	{r4, pc}
  41d694:	004150ef 	.word	0x004150ef
  41d698:	00425a74 	.word	0x00425a74
  41d69c:	004150f9 	.word	0x004150f9
  41d6a0:	00407281 	.word	0x00407281

0041d6a4 <lv_btnmatrix_get_btn_ctrl>:
{
  41d6a4:	b570      	push	{r4, r5, r6, lr}
  41d6a6:	4605      	mov	r5, r0
  41d6a8:	460c      	mov	r4, r1
  41d6aa:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41d6ac:	4b0c      	ldr	r3, [pc, #48]	; (41d6e0 <lv_btnmatrix_get_btn_ctrl+0x3c>)
  41d6ae:	4798      	blx	r3
  41d6b0:	b928      	cbnz	r0, 41d6be <lv_btnmatrix_get_btn_ctrl+0x1a>
  41d6b2:	462a      	mov	r2, r5
  41d6b4:	2300      	movs	r3, #0
  41d6b6:	480b      	ldr	r0, [pc, #44]	; (41d6e4 <lv_btnmatrix_get_btn_ctrl+0x40>)
  41d6b8:	490b      	ldr	r1, [pc, #44]	; (41d6e8 <lv_btnmatrix_get_btn_ctrl+0x44>)
  41d6ba:	4788      	blx	r1
  41d6bc:	e7fe      	b.n	41d6bc <lv_btnmatrix_get_btn_ctrl+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41d6be:	4628      	mov	r0, r5
  41d6c0:	4b0a      	ldr	r3, [pc, #40]	; (41d6ec <lv_btnmatrix_get_btn_ctrl+0x48>)
  41d6c2:	4798      	blx	r3
    if(btn_id >= ext->btn_cnt) return false;
  41d6c4:	8a83      	ldrh	r3, [r0, #20]
  41d6c6:	42a3      	cmp	r3, r4
  41d6c8:	d907      	bls.n	41d6da <lv_btnmatrix_get_btn_ctrl+0x36>
    return (ext->ctrl_bits[btn_id] & ctrl) ? true : false;
  41d6ca:	6883      	ldr	r3, [r0, #8]
  41d6cc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  41d6d0:	421e      	tst	r6, r3
  41d6d2:	bf14      	ite	ne
  41d6d4:	2001      	movne	r0, #1
  41d6d6:	2000      	moveq	r0, #0
  41d6d8:	bd70      	pop	{r4, r5, r6, pc}
    if(btn_id >= ext->btn_cnt) return false;
  41d6da:	2000      	movs	r0, #0
}
  41d6dc:	bd70      	pop	{r4, r5, r6, pc}
  41d6de:	bf00      	nop
  41d6e0:	004150ef 	.word	0x004150ef
  41d6e4:	00425a74 	.word	0x00425a74
  41d6e8:	004150f9 	.word	0x004150f9
  41d6ec:	00407281 	.word	0x00407281

0041d6f0 <make_one_button_toggled>:
 * It simply clears the toggle flag on other buttons.
 * @param btnm Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_toggled(lv_obj_t * btnm, uint16_t btn_idx)
{
  41d6f0:	b570      	push	{r4, r5, r6, lr}
  41d6f2:	4604      	mov	r4, r0
  41d6f4:	460e      	mov	r6, r1
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnmatrix_get_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
  41d6f6:	2280      	movs	r2, #128	; 0x80
  41d6f8:	4b07      	ldr	r3, [pc, #28]	; (41d718 <make_one_button_toggled+0x28>)
  41d6fa:	4798      	blx	r3
  41d6fc:	4605      	mov	r5, r0

    lv_btnmatrix_clear_btn_ctrl_all(btnm, LV_BTNMATRIX_CTRL_CHECK_STATE);
  41d6fe:	2180      	movs	r1, #128	; 0x80
  41d700:	4620      	mov	r0, r4
  41d702:	4b06      	ldr	r3, [pc, #24]	; (41d71c <make_one_button_toggled+0x2c>)
  41d704:	4798      	blx	r3

    if(was_toggled) lv_btnmatrix_set_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
  41d706:	b905      	cbnz	r5, 41d70a <make_one_button_toggled+0x1a>
  41d708:	bd70      	pop	{r4, r5, r6, pc}
  41d70a:	2280      	movs	r2, #128	; 0x80
  41d70c:	4631      	mov	r1, r6
  41d70e:	4620      	mov	r0, r4
  41d710:	4b03      	ldr	r3, [pc, #12]	; (41d720 <make_one_button_toggled+0x30>)
  41d712:	4798      	blx	r3
}
  41d714:	e7f8      	b.n	41d708 <make_one_button_toggled+0x18>
  41d716:	bf00      	nop
  41d718:	0041d6a5 	.word	0x0041d6a5
  41d71c:	0041d551 	.word	0x0041d551
  41d720:	0041d5a5 	.word	0x0041d5a5

0041d724 <lv_btnmatrix_signal>:
{
  41d724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41d728:	b083      	sub	sp, #12
  41d72a:	4605      	mov	r5, r0
  41d72c:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  41d72e:	2908      	cmp	r1, #8
  41d730:	d00a      	beq.n	41d748 <lv_btnmatrix_signal+0x24>
  41d732:	460e      	mov	r6, r1
    res = ancestor_signal(btnm, sign, param);
  41d734:	4b87      	ldr	r3, [pc, #540]	; (41d954 <lv_btnmatrix_signal+0x230>)
  41d736:	681b      	ldr	r3, [r3, #0]
  41d738:	4798      	blx	r3
  41d73a:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
  41d73c:	2801      	cmp	r0, #1
  41d73e:	d026      	beq.n	41d78e <lv_btnmatrix_signal+0x6a>
}
  41d740:	4640      	mov	r0, r8
  41d742:	b003      	add	sp, #12
  41d744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        info->result = lv_btnmatrix_get_style(btnm, info->part);
  41d748:	7814      	ldrb	r4, [r2, #0]
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41d74a:	4b83      	ldr	r3, [pc, #524]	; (41d958 <lv_btnmatrix_signal+0x234>)
  41d74c:	4798      	blx	r3
  41d74e:	b928      	cbnz	r0, 41d75c <lv_btnmatrix_signal+0x38>
  41d750:	462a      	mov	r2, r5
  41d752:	2300      	movs	r3, #0
  41d754:	4881      	ldr	r0, [pc, #516]	; (41d95c <lv_btnmatrix_signal+0x238>)
  41d756:	4982      	ldr	r1, [pc, #520]	; (41d960 <lv_btnmatrix_signal+0x23c>)
  41d758:	4788      	blx	r1
  41d75a:	e7fe      	b.n	41d75a <lv_btnmatrix_signal+0x36>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41d75c:	4628      	mov	r0, r5
  41d75e:	4b81      	ldr	r3, [pc, #516]	; (41d964 <lv_btnmatrix_signal+0x240>)
  41d760:	4798      	blx	r3
    switch(part) {
  41d762:	b11c      	cbz	r4, 41d76c <lv_btnmatrix_signal+0x48>
  41d764:	2c01      	cmp	r4, #1
  41d766:	d008      	beq.n	41d77a <lv_btnmatrix_signal+0x56>
            style_dsc_p = NULL;
  41d768:	2000      	movs	r0, #0
  41d76a:	e001      	b.n	41d770 <lv_btnmatrix_signal+0x4c>
            style_dsc_p = &btnm->style_list;
  41d76c:	f105 0028 	add.w	r0, r5, #40	; 0x28
        info->result = lv_btnmatrix_get_style(btnm, info->part);
  41d770:	6078      	str	r0, [r7, #4]
        if(info->result != NULL) return LV_RES_OK;
  41d772:	b120      	cbz	r0, 41d77e <lv_btnmatrix_signal+0x5a>
  41d774:	f04f 0801 	mov.w	r8, #1
  41d778:	e7e2      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
            style_dsc_p = &ext->style_btn;
  41d77a:	300c      	adds	r0, #12
  41d77c:	e7f8      	b.n	41d770 <lv_btnmatrix_signal+0x4c>
        else return ancestor_signal(btnm, sign, param);
  41d77e:	4b75      	ldr	r3, [pc, #468]	; (41d954 <lv_btnmatrix_signal+0x230>)
  41d780:	681b      	ldr	r3, [r3, #0]
  41d782:	463a      	mov	r2, r7
  41d784:	2108      	movs	r1, #8
  41d786:	4628      	mov	r0, r5
  41d788:	4798      	blx	r3
  41d78a:	4680      	mov	r8, r0
  41d78c:	e7d8      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41d78e:	2e07      	cmp	r6, #7
  41d790:	d01e      	beq.n	41d7d0 <lv_btnmatrix_signal+0xac>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41d792:	4628      	mov	r0, r5
  41d794:	4b73      	ldr	r3, [pc, #460]	; (41d964 <lv_btnmatrix_signal+0x240>)
  41d796:	4798      	blx	r3
  41d798:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  41d79a:	b1fe      	cbz	r6, 41d7dc <lv_btnmatrix_signal+0xb8>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  41d79c:	2e04      	cmp	r6, #4
  41d79e:	d027      	beq.n	41d7f0 <lv_btnmatrix_signal+0xcc>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  41d7a0:	2e02      	cmp	r6, #2
  41d7a2:	d02a      	beq.n	41d7fa <lv_btnmatrix_signal+0xd6>
    else if(sign == LV_SIGNAL_PRESSED) {
  41d7a4:	2e0b      	cmp	r6, #11
  41d7a6:	d041      	beq.n	41d82c <lv_btnmatrix_signal+0x108>
    else if(sign == LV_SIGNAL_PRESSING) {
  41d7a8:	2e0c      	cmp	r6, #12
  41d7aa:	f000 808f 	beq.w	41d8cc <lv_btnmatrix_signal+0x1a8>
    else if(sign == LV_SIGNAL_RELEASED) {
  41d7ae:	2e0e      	cmp	r6, #14
  41d7b0:	f000 80fc 	beq.w	41d9ac <lv_btnmatrix_signal+0x288>
    else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
  41d7b4:	2e10      	cmp	r6, #16
  41d7b6:	f000 8149 	beq.w	41da4c <lv_btnmatrix_signal+0x328>
    else if(sign == LV_SIGNAL_PRESS_LOST) {
  41d7ba:	2e0d      	cmp	r6, #13
  41d7bc:	f040 815d 	bne.w	41da7a <lv_btnmatrix_signal+0x356>
        ext->btn_id_pr  = LV_BTNMATRIX_BTN_NONE;
  41d7c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41d7c4:	82c3      	strh	r3, [r0, #22]
        ext->btn_id_act = LV_BTNMATRIX_BTN_NONE;
  41d7c6:	8343      	strh	r3, [r0, #26]
        lv_obj_invalidate(btnm);
  41d7c8:	4628      	mov	r0, r5
  41d7ca:	4b67      	ldr	r3, [pc, #412]	; (41d968 <lv_btnmatrix_signal+0x244>)
  41d7cc:	4798      	blx	r3
  41d7ce:	e7b7      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41d7d0:	4966      	ldr	r1, [pc, #408]	; (41d96c <lv_btnmatrix_signal+0x248>)
  41d7d2:	4638      	mov	r0, r7
  41d7d4:	4b66      	ldr	r3, [pc, #408]	; (41d970 <lv_btnmatrix_signal+0x24c>)
  41d7d6:	4798      	blx	r3
  41d7d8:	4680      	mov	r8, r0
  41d7da:	e7b1      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
        lv_obj_clean_style_list(btnm, LV_BTNMATRIX_PART_BTN);
  41d7dc:	2101      	movs	r1, #1
  41d7de:	4628      	mov	r0, r5
  41d7e0:	4b64      	ldr	r3, [pc, #400]	; (41d974 <lv_btnmatrix_signal+0x250>)
  41d7e2:	4798      	blx	r3
        lv_mem_free(ext->button_areas);
  41d7e4:	6860      	ldr	r0, [r4, #4]
  41d7e6:	4d64      	ldr	r5, [pc, #400]	; (41d978 <lv_btnmatrix_signal+0x254>)
  41d7e8:	47a8      	blx	r5
        lv_mem_free(ext->ctrl_bits);
  41d7ea:	68a0      	ldr	r0, [r4, #8]
  41d7ec:	47a8      	blx	r5
  41d7ee:	e7a7      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
        lv_btnmatrix_set_map(btnm, ext->map_p);
  41d7f0:	6801      	ldr	r1, [r0, #0]
  41d7f2:	4628      	mov	r0, r5
  41d7f4:	4b61      	ldr	r3, [pc, #388]	; (41d97c <lv_btnmatrix_signal+0x258>)
  41d7f6:	4798      	blx	r3
  41d7f8:	e7a2      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
        if(lv_obj_get_width(btnm) != lv_area_get_width(param) || lv_obj_get_height(btnm) != lv_area_get_height(param)) {
  41d7fa:	4628      	mov	r0, r5
  41d7fc:	4b60      	ldr	r3, [pc, #384]	; (41d980 <lv_btnmatrix_signal+0x25c>)
  41d7fe:	4798      	blx	r3
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41d800:	88bb      	ldrh	r3, [r7, #4]
  41d802:	3301      	adds	r3, #1
  41d804:	883a      	ldrh	r2, [r7, #0]
  41d806:	1a9b      	subs	r3, r3, r2
  41d808:	b21b      	sxth	r3, r3
  41d80a:	4283      	cmp	r3, r0
  41d80c:	d109      	bne.n	41d822 <lv_btnmatrix_signal+0xfe>
  41d80e:	4628      	mov	r0, r5
  41d810:	4b5c      	ldr	r3, [pc, #368]	; (41d984 <lv_btnmatrix_signal+0x260>)
  41d812:	4798      	blx	r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41d814:	88fb      	ldrh	r3, [r7, #6]
  41d816:	3301      	adds	r3, #1
  41d818:	887a      	ldrh	r2, [r7, #2]
  41d81a:	1a9b      	subs	r3, r3, r2
  41d81c:	b21b      	sxth	r3, r3
  41d81e:	4283      	cmp	r3, r0
  41d820:	d08e      	beq.n	41d740 <lv_btnmatrix_signal+0x1c>
            lv_btnmatrix_set_map(btnm, ext->map_p);
  41d822:	6821      	ldr	r1, [r4, #0]
  41d824:	4628      	mov	r0, r5
  41d826:	4b55      	ldr	r3, [pc, #340]	; (41d97c <lv_btnmatrix_signal+0x258>)
  41d828:	4798      	blx	r3
  41d82a:	e789      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
        invalidate_button_area(btnm, ext->btn_id_pr);
  41d82c:	8ac1      	ldrh	r1, [r0, #22]
  41d82e:	4628      	mov	r0, r5
  41d830:	4b55      	ldr	r3, [pc, #340]	; (41d988 <lv_btnmatrix_signal+0x264>)
  41d832:	4798      	blx	r3
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
  41d834:	4b55      	ldr	r3, [pc, #340]	; (41d98c <lv_btnmatrix_signal+0x268>)
  41d836:	4798      	blx	r3
  41d838:	4b55      	ldr	r3, [pc, #340]	; (41d990 <lv_btnmatrix_signal+0x26c>)
  41d83a:	4798      	blx	r3
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
  41d83c:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  41d840:	2b01      	cmp	r3, #1
  41d842:	d132      	bne.n	41d8aa <lv_btnmatrix_signal+0x186>
            lv_indev_get_point(param, &p);
  41d844:	a901      	add	r1, sp, #4
  41d846:	4638      	mov	r0, r7
  41d848:	4b52      	ldr	r3, [pc, #328]	; (41d994 <lv_btnmatrix_signal+0x270>)
  41d84a:	4798      	blx	r3
            btn_pr = get_button_from_point(btnm, &p);
  41d84c:	a901      	add	r1, sp, #4
  41d84e:	4628      	mov	r0, r5
  41d850:	4b51      	ldr	r3, [pc, #324]	; (41d998 <lv_btnmatrix_signal+0x274>)
  41d852:	4798      	blx	r3
  41d854:	4606      	mov	r6, r0
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
  41d856:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41d85a:	4298      	cmp	r0, r3
  41d85c:	d00e      	beq.n	41d87c <lv_btnmatrix_signal+0x158>
                if(button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
  41d85e:	68a3      	ldr	r3, [r4, #8]
  41d860:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
  41d864:	f003 0328 	and.w	r3, r3, #40	; 0x28
  41d868:	b943      	cbnz	r3, 41d87c <lv_btnmatrix_signal+0x158>
                    invalidate_button_area(btnm, ext->btn_id_pr) /*Invalidate the old area*/;
  41d86a:	8ae1      	ldrh	r1, [r4, #22]
  41d86c:	4628      	mov	r0, r5
  41d86e:	4f46      	ldr	r7, [pc, #280]	; (41d988 <lv_btnmatrix_signal+0x264>)
  41d870:	47b8      	blx	r7
                    ext->btn_id_pr = btn_pr;
  41d872:	82e6      	strh	r6, [r4, #22]
                    ext->btn_id_act = btn_pr;
  41d874:	8366      	strh	r6, [r4, #26]
                    invalidate_button_area(btnm, ext->btn_id_pr); /*Invalidate the new area*/
  41d876:	4631      	mov	r1, r6
  41d878:	4628      	mov	r0, r5
  41d87a:	47b8      	blx	r7
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
  41d87c:	8ae3      	ldrh	r3, [r4, #22]
  41d87e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41d882:	4293      	cmp	r3, r2
  41d884:	f43f af5c 	beq.w	41d740 <lv_btnmatrix_signal+0x1c>
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_pr]) == false &&
  41d888:	68a2      	ldr	r2, [r4, #8]
               button_is_inactive(ext->ctrl_bits[ext->btn_id_pr]) == false &&
  41d88a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  41d88e:	f402 7294 	and.w	r2, r2, #296	; 0x128
  41d892:	2a00      	cmp	r2, #0
  41d894:	f47f af54 	bne.w	41d740 <lv_btnmatrix_signal+0x1c>
                uint32_t b = ext->btn_id_pr;
  41d898:	aa02      	add	r2, sp, #8
  41d89a:	f842 3d08 	str.w	r3, [r2, #-8]!
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
  41d89e:	2110      	movs	r1, #16
  41d8a0:	4628      	mov	r0, r5
  41d8a2:	4b3e      	ldr	r3, [pc, #248]	; (41d99c <lv_btnmatrix_signal+0x278>)
  41d8a4:	4798      	blx	r3
  41d8a6:	4680      	mov	r8, r0
  41d8a8:	e74a      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
        else if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER &&
  41d8aa:	2802      	cmp	r0, #2
  41d8ac:	d008      	beq.n	41d8c0 <lv_btnmatrix_signal+0x19c>
  41d8ae:	2804      	cmp	r0, #4
  41d8b0:	d1e4      	bne.n	41d87c <lv_btnmatrix_signal+0x158>
                                                       lv_group_get_editing(lv_obj_get_group(btnm)))) {
  41d8b2:	4628      	mov	r0, r5
  41d8b4:	4b3a      	ldr	r3, [pc, #232]	; (41d9a0 <lv_btnmatrix_signal+0x27c>)
  41d8b6:	4798      	blx	r3
  41d8b8:	4b3a      	ldr	r3, [pc, #232]	; (41d9a4 <lv_btnmatrix_signal+0x280>)
  41d8ba:	4798      	blx	r3
        else if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER &&
  41d8bc:	2800      	cmp	r0, #0
  41d8be:	d0dd      	beq.n	41d87c <lv_btnmatrix_signal+0x158>
            ext->btn_id_pr = ext->btn_id_focused;
  41d8c0:	8b21      	ldrh	r1, [r4, #24]
  41d8c2:	82e1      	strh	r1, [r4, #22]
            invalidate_button_area(btnm, ext->btn_id_focused);
  41d8c4:	4628      	mov	r0, r5
  41d8c6:	4b30      	ldr	r3, [pc, #192]	; (41d988 <lv_btnmatrix_signal+0x264>)
  41d8c8:	4798      	blx	r3
  41d8ca:	e7d7      	b.n	41d87c <lv_btnmatrix_signal+0x158>
        lv_indev_t * indev = lv_indev_get_act();
  41d8cc:	4b2f      	ldr	r3, [pc, #188]	; (41d98c <lv_btnmatrix_signal+0x268>)
  41d8ce:	4798      	blx	r3
  41d8d0:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
  41d8d2:	4b2f      	ldr	r3, [pc, #188]	; (41d990 <lv_btnmatrix_signal+0x26c>)
  41d8d4:	4798      	blx	r3
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return LV_RES_OK;
  41d8d6:	2804      	cmp	r0, #4
  41d8d8:	f43f af32 	beq.w	41d740 <lv_btnmatrix_signal+0x1c>
  41d8dc:	2802      	cmp	r0, #2
  41d8de:	f43f af2f 	beq.w	41d740 <lv_btnmatrix_signal+0x1c>
        lv_indev_get_point(indev, &p);
  41d8e2:	a901      	add	r1, sp, #4
  41d8e4:	4630      	mov	r0, r6
  41d8e6:	4b2b      	ldr	r3, [pc, #172]	; (41d994 <lv_btnmatrix_signal+0x270>)
  41d8e8:	4798      	blx	r3
        btn_pr = get_button_from_point(btnm, &p);
  41d8ea:	a901      	add	r1, sp, #4
  41d8ec:	4628      	mov	r0, r5
  41d8ee:	4b2a      	ldr	r3, [pc, #168]	; (41d998 <lv_btnmatrix_signal+0x274>)
  41d8f0:	4798      	blx	r3
  41d8f2:	4606      	mov	r6, r0
        if(btn_pr != ext->btn_id_pr) {
  41d8f4:	8ae1      	ldrh	r1, [r4, #22]
  41d8f6:	4288      	cmp	r0, r1
  41d8f8:	f43f af22 	beq.w	41d740 <lv_btnmatrix_signal+0x1c>
            if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
  41d8fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41d900:	4299      	cmp	r1, r3
  41d902:	d002      	beq.n	41d90a <lv_btnmatrix_signal+0x1e6>
                invalidate_button_area(btnm, ext->btn_id_pr);
  41d904:	4628      	mov	r0, r5
  41d906:	4b20      	ldr	r3, [pc, #128]	; (41d988 <lv_btnmatrix_signal+0x264>)
  41d908:	4798      	blx	r3
            ext->btn_id_pr  = btn_pr;
  41d90a:	82e6      	strh	r6, [r4, #22]
            ext->btn_id_act = btn_pr;
  41d90c:	8366      	strh	r6, [r4, #26]
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
  41d90e:	4638      	mov	r0, r7
  41d910:	4b25      	ldr	r3, [pc, #148]	; (41d9a8 <lv_btnmatrix_signal+0x284>)
  41d912:	4798      	blx	r3
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
  41d914:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41d918:	429e      	cmp	r6, r3
  41d91a:	f43f af11 	beq.w	41d740 <lv_btnmatrix_signal+0x1c>
               button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
  41d91e:	68a3      	ldr	r3, [r4, #8]
  41d920:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
  41d924:	f003 0328 	and.w	r3, r3, #40	; 0x28
  41d928:	2b00      	cmp	r3, #0
  41d92a:	f47f af09 	bne.w	41d740 <lv_btnmatrix_signal+0x1c>
                invalidate_button_area(btnm, btn_pr);
  41d92e:	4631      	mov	r1, r6
  41d930:	4628      	mov	r0, r5
  41d932:	4b15      	ldr	r3, [pc, #84]	; (41d988 <lv_btnmatrix_signal+0x264>)
  41d934:	4798      	blx	r3
                if(button_is_click_trig(ext->ctrl_bits[btn_pr]) == false) {
  41d936:	68a3      	ldr	r3, [r4, #8]
  41d938:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
  41d93c:	f413 7f80 	tst.w	r3, #256	; 0x100
  41d940:	f47f aefe 	bne.w	41d740 <lv_btnmatrix_signal+0x1c>
                    uint32_t b = btn_pr;
  41d944:	aa02      	add	r2, sp, #8
  41d946:	f842 6d08 	str.w	r6, [r2, #-8]!
                    lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
  41d94a:	2110      	movs	r1, #16
  41d94c:	4628      	mov	r0, r5
  41d94e:	4b13      	ldr	r3, [pc, #76]	; (41d99c <lv_btnmatrix_signal+0x278>)
  41d950:	4798      	blx	r3
  41d952:	e6f5      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
  41d954:	20414790 	.word	0x20414790
  41d958:	004150ef 	.word	0x004150ef
  41d95c:	00425a74 	.word	0x00425a74
  41d960:	004150f9 	.word	0x004150f9
  41d964:	00407281 	.word	0x00407281
  41d968:	00405565 	.word	0x00405565
  41d96c:	004306d4 	.word	0x004306d4
  41d970:	0040751d 	.word	0x0040751d
  41d974:	004052e1 	.word	0x004052e1
  41d978:	004158b9 	.word	0x004158b9
  41d97c:	0041cf81 	.word	0x0041cf81
  41d980:	0040518d 	.word	0x0040518d
  41d984:	004051bd 	.word	0x004051bd
  41d988:	0041cf01 	.word	0x0041cf01
  41d98c:	004036dd 	.word	0x004036dd
  41d990:	004036e9 	.word	0x004036e9
  41d994:	004037ad 	.word	0x004037ad
  41d998:	0041cd39 	.word	0x0041cd39
  41d99c:	00404e95 	.word	0x00404e95
  41d9a0:	004072a9 	.word	0x004072a9
  41d9a4:	004032a9 	.word	0x004032a9
  41d9a8:	0040378d 	.word	0x0040378d
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
  41d9ac:	8ac2      	ldrh	r2, [r0, #22]
  41d9ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41d9b2:	429a      	cmp	r2, r3
  41d9b4:	f43f aec4 	beq.w	41d740 <lv_btnmatrix_signal+0x1c>
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr]) &&
  41d9b8:	6881      	ldr	r1, [r0, #8]
  41d9ba:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
  41d9be:	f013 0f40 	tst.w	r3, #64	; 0x40
  41d9c2:	d015      	beq.n	41d9f0 <lv_btnmatrix_signal+0x2cc>
  41d9c4:	f013 0f20 	tst.w	r3, #32
  41d9c8:	d112      	bne.n	41d9f0 <lv_btnmatrix_signal+0x2cc>
                if(button_get_tgl_state(ext->ctrl_bits[ext->btn_id_pr]) && !ext->one_check) {
  41d9ca:	f013 0f80 	tst.w	r3, #128	; 0x80
  41d9ce:	d038      	beq.n	41da42 <lv_btnmatrix_signal+0x31e>
  41d9d0:	7f00      	ldrb	r0, [r0, #28]
  41d9d2:	f010 0f02 	tst.w	r0, #2
  41d9d6:	d134      	bne.n	41da42 <lv_btnmatrix_signal+0x31e>
                    ext->ctrl_bits[ext->btn_id_pr] &= (~LV_BTNMATRIX_CTRL_CHECK_STATE);
  41d9d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  41d9dc:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
                if(ext->one_check) make_one_button_toggled(btnm, ext->btn_id_pr);
  41d9e0:	7f23      	ldrb	r3, [r4, #28]
  41d9e2:	f013 0f02 	tst.w	r3, #2
  41d9e6:	d003      	beq.n	41d9f0 <lv_btnmatrix_signal+0x2cc>
  41d9e8:	8ae1      	ldrh	r1, [r4, #22]
  41d9ea:	4628      	mov	r0, r5
  41d9ec:	4ba1      	ldr	r3, [pc, #644]	; (41dc74 <lv_btnmatrix_signal+0x550>)
  41d9ee:	4798      	blx	r3
            invalidate_button_area(btnm, ext->btn_id_pr);
  41d9f0:	8ae1      	ldrh	r1, [r4, #22]
  41d9f2:	4628      	mov	r0, r5
  41d9f4:	4ea0      	ldr	r6, [pc, #640]	; (41dc78 <lv_btnmatrix_signal+0x554>)
  41d9f6:	47b0      	blx	r6
            invalidate_button_area(btnm, ext->btn_id_focused);
  41d9f8:	8b21      	ldrh	r1, [r4, #24]
  41d9fa:	4628      	mov	r0, r5
  41d9fc:	47b0      	blx	r6
            lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
  41d9fe:	4b9f      	ldr	r3, [pc, #636]	; (41dc7c <lv_btnmatrix_signal+0x558>)
  41da00:	4798      	blx	r3
  41da02:	4b9f      	ldr	r3, [pc, #636]	; (41dc80 <lv_btnmatrix_signal+0x55c>)
  41da04:	4798      	blx	r3
            if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) {
  41da06:	2802      	cmp	r0, #2
  41da08:	d001      	beq.n	41da0e <lv_btnmatrix_signal+0x2ea>
  41da0a:	2804      	cmp	r0, #4
  41da0c:	d101      	bne.n	41da12 <lv_btnmatrix_signal+0x2ee>
                ext->btn_id_focused = ext->btn_id_pr;
  41da0e:	8ae3      	ldrh	r3, [r4, #22]
  41da10:	8323      	strh	r3, [r4, #24]
            ext->btn_id_pr = LV_BTNMATRIX_BTN_NONE;
  41da12:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41da16:	82e3      	strh	r3, [r4, #22]
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
  41da18:	8b63      	ldrh	r3, [r4, #26]
  41da1a:	68a2      	ldr	r2, [r4, #8]
  41da1c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  41da20:	f412 7f80 	tst.w	r2, #256	; 0x100
  41da24:	f43f ae8c 	beq.w	41d740 <lv_btnmatrix_signal+0x1c>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41da28:	f012 0f28 	tst.w	r2, #40	; 0x28
  41da2c:	f47f ae88 	bne.w	41d740 <lv_btnmatrix_signal+0x1c>
                uint32_t b = ext->btn_id_act;
  41da30:	aa02      	add	r2, sp, #8
  41da32:	f842 3d08 	str.w	r3, [r2, #-8]!
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
  41da36:	2110      	movs	r1, #16
  41da38:	4628      	mov	r0, r5
  41da3a:	4b92      	ldr	r3, [pc, #584]	; (41dc84 <lv_btnmatrix_signal+0x560>)
  41da3c:	4798      	blx	r3
  41da3e:	4680      	mov	r8, r0
  41da40:	e67e      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNMATRIX_CTRL_CHECK_STATE;
  41da42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  41da46:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
  41da4a:	e7c9      	b.n	41d9e0 <lv_btnmatrix_signal+0x2bc>
        if(ext->btn_id_act != LV_BTNMATRIX_BTN_NONE) {
  41da4c:	8b43      	ldrh	r3, [r0, #26]
  41da4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41da52:	4293      	cmp	r3, r2
  41da54:	f43f ae74 	beq.w	41d740 <lv_btnmatrix_signal+0x1c>
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41da58:	6882      	ldr	r2, [r0, #8]
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41da5a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  41da5e:	f002 0238 	and.w	r2, r2, #56	; 0x38
  41da62:	2a00      	cmp	r2, #0
  41da64:	f47f ae6c 	bne.w	41d740 <lv_btnmatrix_signal+0x1c>
                uint32_t b = ext->btn_id_act;
  41da68:	aa02      	add	r2, sp, #8
  41da6a:	f842 3d08 	str.w	r3, [r2, #-8]!
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
  41da6e:	2110      	movs	r1, #16
  41da70:	4628      	mov	r0, r5
  41da72:	4b84      	ldr	r3, [pc, #528]	; (41dc84 <lv_btnmatrix_signal+0x560>)
  41da74:	4798      	blx	r3
  41da76:	4680      	mov	r8, r0
  41da78:	e662      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
    else if(sign == LV_SIGNAL_FOCUS) {
  41da7a:	2e16      	cmp	r6, #22
  41da7c:	d121      	bne.n	41dac2 <lv_btnmatrix_signal+0x39e>
        lv_indev_t * indev         = lv_indev_get_act();
  41da7e:	4b7f      	ldr	r3, [pc, #508]	; (41dc7c <lv_btnmatrix_signal+0x558>)
  41da80:	4798      	blx	r3
  41da82:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
  41da84:	4b7e      	ldr	r3, [pc, #504]	; (41dc80 <lv_btnmatrix_signal+0x55c>)
  41da86:	4798      	blx	r3
        if(indev == NULL) {
  41da88:	b926      	cbnz	r6, 41da94 <lv_btnmatrix_signal+0x370>
            indev = lv_indev_get_next(NULL);
  41da8a:	2000      	movs	r0, #0
  41da8c:	4b7e      	ldr	r3, [pc, #504]	; (41dc88 <lv_btnmatrix_signal+0x564>)
  41da8e:	4798      	blx	r3
            indev_type = lv_indev_get_type(indev);
  41da90:	4b7b      	ldr	r3, [pc, #492]	; (41dc80 <lv_btnmatrix_signal+0x55c>)
  41da92:	4798      	blx	r3
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
  41da94:	2804      	cmp	r0, #4
  41da96:	d10d      	bne.n	41dab4 <lv_btnmatrix_signal+0x390>
            if(lv_group_get_editing(lv_obj_get_group(btnm))) {
  41da98:	4628      	mov	r0, r5
  41da9a:	4b7c      	ldr	r3, [pc, #496]	; (41dc8c <lv_btnmatrix_signal+0x568>)
  41da9c:	4798      	blx	r3
  41da9e:	4b7c      	ldr	r3, [pc, #496]	; (41dc90 <lv_btnmatrix_signal+0x56c>)
  41daa0:	4798      	blx	r3
  41daa2:	b118      	cbz	r0, 41daac <lv_btnmatrix_signal+0x388>
                ext->btn_id_focused = 0;
  41daa4:	2300      	movs	r3, #0
  41daa6:	8323      	strh	r3, [r4, #24]
                ext->btn_id_act = ext->btn_id_focused;
  41daa8:	8363      	strh	r3, [r4, #26]
  41daaa:	e649      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
                ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
  41daac:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41dab0:	8323      	strh	r3, [r4, #24]
  41dab2:	e645      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
        else if(indev_type == LV_INDEV_TYPE_KEYPAD) {
  41dab4:	2802      	cmp	r0, #2
  41dab6:	f47f ae43 	bne.w	41d740 <lv_btnmatrix_signal+0x1c>
            ext->btn_id_focused = 0;
  41daba:	2300      	movs	r3, #0
  41dabc:	8323      	strh	r3, [r4, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41dabe:	8363      	strh	r3, [r4, #26]
  41dac0:	e63e      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
    else if(sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_LEAVE) {
  41dac2:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
  41dac6:	2b15      	cmp	r3, #21
  41dac8:	d115      	bne.n	41daf6 <lv_btnmatrix_signal+0x3d2>
        if(ext->btn_id_focused != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(btnm, ext->btn_id_focused);
  41daca:	8b01      	ldrh	r1, [r0, #24]
  41dacc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41dad0:	4299      	cmp	r1, r3
  41dad2:	d002      	beq.n	41dada <lv_btnmatrix_signal+0x3b6>
  41dad4:	4628      	mov	r0, r5
  41dad6:	4b68      	ldr	r3, [pc, #416]	; (41dc78 <lv_btnmatrix_signal+0x554>)
  41dad8:	4798      	blx	r3
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(btnm, ext->btn_id_pr);
  41dada:	8ae1      	ldrh	r1, [r4, #22]
  41dadc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41dae0:	4299      	cmp	r1, r3
  41dae2:	d002      	beq.n	41daea <lv_btnmatrix_signal+0x3c6>
  41dae4:	4628      	mov	r0, r5
  41dae6:	4b64      	ldr	r3, [pc, #400]	; (41dc78 <lv_btnmatrix_signal+0x554>)
  41dae8:	4798      	blx	r3
        ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
  41daea:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41daee:	8323      	strh	r3, [r4, #24]
        ext->btn_id_pr = LV_BTNMATRIX_BTN_NONE;
  41daf0:	82e3      	strh	r3, [r4, #22]
        ext->btn_id_act = LV_BTNMATRIX_BTN_NONE;
  41daf2:	8363      	strh	r3, [r4, #26]
  41daf4:	e624      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
    else if(sign == LV_SIGNAL_CONTROL) {
  41daf6:	2e18      	cmp	r6, #24
  41daf8:	f040 80b6 	bne.w	41dc68 <lv_btnmatrix_signal+0x544>
        char c = *((char *)param);
  41dafc:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT) {
  41dafe:	2b13      	cmp	r3, #19
  41db00:	d113      	bne.n	41db2a <lv_btnmatrix_signal+0x406>
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE)
  41db02:	8b03      	ldrh	r3, [r0, #24]
  41db04:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41db08:	4293      	cmp	r3, r2
                ext->btn_id_focused = 0;
  41db0a:	bf0c      	ite	eq
  41db0c:	2300      	moveq	r3, #0
                ext->btn_id_focused++;
  41db0e:	3301      	addne	r3, #1
  41db10:	8303      	strh	r3, [r0, #24]
            if(ext->btn_id_focused >= ext->btn_cnt - 1) ext->btn_id_focused = ext->btn_cnt - 1;
  41db12:	8a83      	ldrh	r3, [r0, #20]
  41db14:	8b01      	ldrh	r1, [r0, #24]
  41db16:	1e5a      	subs	r2, r3, #1
  41db18:	4291      	cmp	r1, r2
  41db1a:	db00      	blt.n	41db1e <lv_btnmatrix_signal+0x3fa>
  41db1c:	8322      	strh	r2, [r4, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41db1e:	8b23      	ldrh	r3, [r4, #24]
  41db20:	8363      	strh	r3, [r4, #26]
            lv_obj_invalidate(btnm);
  41db22:	4628      	mov	r0, r5
  41db24:	4b5b      	ldr	r3, [pc, #364]	; (41dc94 <lv_btnmatrix_signal+0x570>)
  41db26:	4798      	blx	r3
  41db28:	e60a      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
        else if(c == LV_KEY_LEFT) {
  41db2a:	2b14      	cmp	r3, #20
  41db2c:	d111      	bne.n	41db52 <lv_btnmatrix_signal+0x42e>
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) ext->btn_id_focused = 0;
  41db2e:	8b03      	ldrh	r3, [r0, #24]
  41db30:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41db34:	4293      	cmp	r3, r2
  41db36:	d107      	bne.n	41db48 <lv_btnmatrix_signal+0x424>
  41db38:	2300      	movs	r3, #0
  41db3a:	8303      	strh	r3, [r0, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41db3c:	8b23      	ldrh	r3, [r4, #24]
  41db3e:	8363      	strh	r3, [r4, #26]
            lv_obj_invalidate(btnm);
  41db40:	4628      	mov	r0, r5
  41db42:	4b54      	ldr	r3, [pc, #336]	; (41dc94 <lv_btnmatrix_signal+0x570>)
  41db44:	4798      	blx	r3
  41db46:	e5fb      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
            if(ext->btn_id_focused > 0) ext->btn_id_focused--;
  41db48:	2b00      	cmp	r3, #0
  41db4a:	d0f7      	beq.n	41db3c <lv_btnmatrix_signal+0x418>
  41db4c:	3b01      	subs	r3, #1
  41db4e:	8303      	strh	r3, [r0, #24]
  41db50:	e7f4      	b.n	41db3c <lv_btnmatrix_signal+0x418>
        else if(c == LV_KEY_DOWN) {
  41db52:	2b12      	cmp	r3, #18
  41db54:	d143      	bne.n	41dbde <lv_btnmatrix_signal+0x4ba>
  41db56:	2214      	movs	r2, #20
  41db58:	2100      	movs	r1, #0
  41db5a:	4628      	mov	r0, r5
  41db5c:	4b4e      	ldr	r3, [pc, #312]	; (41dc98 <lv_btnmatrix_signal+0x574>)
  41db5e:	4798      	blx	r3
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) {
  41db60:	8b22      	ldrh	r2, [r4, #24]
  41db62:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41db66:	429a      	cmp	r2, r3
  41db68:	d107      	bne.n	41db7a <lv_btnmatrix_signal+0x456>
                ext->btn_id_focused = 0;
  41db6a:	2300      	movs	r3, #0
  41db6c:	8323      	strh	r3, [r4, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41db6e:	8b23      	ldrh	r3, [r4, #24]
  41db70:	8363      	strh	r3, [r4, #26]
            lv_obj_invalidate(btnm);
  41db72:	4628      	mov	r0, r5
  41db74:	4b47      	ldr	r3, [pc, #284]	; (41dc94 <lv_btnmatrix_signal+0x570>)
  41db76:	4798      	blx	r3
  41db78:	e5e2      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
                    ext->button_areas[ext->btn_id_focused].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_focused]) >> 1);
  41db7a:	6863      	ldr	r3, [r4, #4]
  41db7c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
  41db80:	f833 6032 	ldrh.w	r6, [r3, r2, lsl #3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41db84:	888b      	ldrh	r3, [r1, #4]
  41db86:	3301      	adds	r3, #1
  41db88:	1b9b      	subs	r3, r3, r6
  41db8a:	f343 034e 	sbfx	r3, r3, #1, #15
  41db8e:	4433      	add	r3, r6
                lv_coord_t pr_center =
  41db90:	b21b      	sxth	r3, r3
                for(area_below = ext->btn_id_focused; area_below < ext->btn_cnt; area_below++) {
  41db92:	8aa7      	ldrh	r7, [r4, #20]
  41db94:	42ba      	cmp	r2, r7
  41db96:	d2ea      	bcs.n	41db6e <lv_btnmatrix_signal+0x44a>
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_focused].y1 &&
  41db98:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
  41db9c:	ea4f 0e42 	mov.w	lr, r2, lsl #1
  41dba0:	f9b1 9002 	ldrsh.w	r9, [r1, #2]
  41dba4:	45e1      	cmp	r9, ip
  41dba6:	dd0e      	ble.n	41dbc6 <lv_btnmatrix_signal+0x4a2>
  41dba8:	f9b1 9000 	ldrsh.w	r9, [r1]
  41dbac:	4599      	cmp	r9, r3
  41dbae:	dc0a      	bgt.n	41dbc6 <lv_btnmatrix_signal+0x4a2>
                       pr_center <= ext->button_areas[area_below].x2 + pad_inner &&
  41dbb0:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
  41dbb4:	4406      	add	r6, r0
                       pr_center >= ext->button_areas[area_below].x1 &&
  41dbb6:	42b3      	cmp	r3, r6
  41dbb8:	dc05      	bgt.n	41dbc6 <lv_btnmatrix_signal+0x4a2>
                       button_is_inactive(ext->ctrl_bits[area_below]) == false &&
  41dbba:	68a6      	ldr	r6, [r4, #8]
  41dbbc:	f836 600e 	ldrh.w	r6, [r6, lr]
  41dbc0:	f006 0628 	and.w	r6, r6, #40	; 0x28
  41dbc4:	b13e      	cbz	r6, 41dbd6 <lv_btnmatrix_signal+0x4b2>
                for(area_below = ext->btn_id_focused; area_below < ext->btn_cnt; area_below++) {
  41dbc6:	3201      	adds	r2, #1
  41dbc8:	b292      	uxth	r2, r2
  41dbca:	3108      	adds	r1, #8
  41dbcc:	f10e 0e02 	add.w	lr, lr, #2
  41dbd0:	42ba      	cmp	r2, r7
  41dbd2:	d3e5      	bcc.n	41dba0 <lv_btnmatrix_signal+0x47c>
  41dbd4:	e7cb      	b.n	41db6e <lv_btnmatrix_signal+0x44a>
                if(area_below < ext->btn_cnt) ext->btn_id_focused = area_below;
  41dbd6:	4297      	cmp	r7, r2
  41dbd8:	bf88      	it	hi
  41dbda:	8322      	strhhi	r2, [r4, #24]
  41dbdc:	e7c7      	b.n	41db6e <lv_btnmatrix_signal+0x44a>
        else if(c == LV_KEY_UP) {
  41dbde:	2b11      	cmp	r3, #17
  41dbe0:	f47f adae 	bne.w	41d740 <lv_btnmatrix_signal+0x1c>
  41dbe4:	2214      	movs	r2, #20
  41dbe6:	2100      	movs	r1, #0
  41dbe8:	4628      	mov	r0, r5
  41dbea:	4b2b      	ldr	r3, [pc, #172]	; (41dc98 <lv_btnmatrix_signal+0x574>)
  41dbec:	4798      	blx	r3
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) {
  41dbee:	8b23      	ldrh	r3, [r4, #24]
  41dbf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41dbf4:	4293      	cmp	r3, r2
  41dbf6:	d107      	bne.n	41dc08 <lv_btnmatrix_signal+0x4e4>
                ext->btn_id_focused = 0;
  41dbf8:	2300      	movs	r3, #0
  41dbfa:	8323      	strh	r3, [r4, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41dbfc:	8b23      	ldrh	r3, [r4, #24]
  41dbfe:	8363      	strh	r3, [r4, #26]
            lv_obj_invalidate(btnm);
  41dc00:	4628      	mov	r0, r5
  41dc02:	4b24      	ldr	r3, [pc, #144]	; (41dc94 <lv_btnmatrix_signal+0x570>)
  41dc04:	4798      	blx	r3
  41dc06:	e59b      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
                    ext->button_areas[ext->btn_id_focused].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_focused]) >> 1);
  41dc08:	6866      	ldr	r6, [r4, #4]
  41dc0a:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
  41dc0e:	f836 1033 	ldrh.w	r1, [r6, r3, lsl #3]
  41dc12:	88ba      	ldrh	r2, [r7, #4]
  41dc14:	3201      	adds	r2, #1
  41dc16:	1a52      	subs	r2, r2, r1
  41dc18:	f342 024e 	sbfx	r2, r2, #1, #15
  41dc1c:	440a      	add	r2, r1
                lv_coord_t pr_center =
  41dc1e:	b212      	sxth	r2, r2
                for(area_above = ext->btn_id_focused; area_above >= 0; area_above--) {
  41dc20:	b21b      	sxth	r3, r3
  41dc22:	2b00      	cmp	r3, #0
  41dc24:	dbea      	blt.n	41dbfc <lv_btnmatrix_signal+0x4d8>
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_focused].y1 &&
  41dc26:	f9b7 e002 	ldrsh.w	lr, [r7, #2]
  41dc2a:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
  41dc2e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
  41dc32:	4571      	cmp	r1, lr
  41dc34:	da0e      	bge.n	41dc54 <lv_btnmatrix_signal+0x530>
                       pr_center >= ext->button_areas[area_above].x1 - pad_inner &&
  41dc36:	f936 1033 	ldrsh.w	r1, [r6, r3, lsl #3]
  41dc3a:	1a09      	subs	r1, r1, r0
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_focused].y1 &&
  41dc3c:	428a      	cmp	r2, r1
  41dc3e:	db09      	blt.n	41dc54 <lv_btnmatrix_signal+0x530>
                       pr_center >= ext->button_areas[area_above].x1 - pad_inner &&
  41dc40:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
  41dc44:	4291      	cmp	r1, r2
  41dc46:	db05      	blt.n	41dc54 <lv_btnmatrix_signal+0x530>
                       button_is_inactive(ext->ctrl_bits[area_above]) == false &&
  41dc48:	68a1      	ldr	r1, [r4, #8]
  41dc4a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
  41dc4e:	f001 0128 	and.w	r1, r1, #40	; 0x28
  41dc52:	b129      	cbz	r1, 41dc60 <lv_btnmatrix_signal+0x53c>
  41dc54:	3b01      	subs	r3, #1
  41dc56:	b21b      	sxth	r3, r3
                for(area_above = ext->btn_id_focused; area_above >= 0; area_above--) {
  41dc58:	f1b3 3fff 	cmp.w	r3, #4294967295
  41dc5c:	d1e5      	bne.n	41dc2a <lv_btnmatrix_signal+0x506>
  41dc5e:	e7cd      	b.n	41dbfc <lv_btnmatrix_signal+0x4d8>
                if(area_above >= 0) ext->btn_id_focused = area_above;
  41dc60:	2b00      	cmp	r3, #0
  41dc62:	bfa8      	it	ge
  41dc64:	8323      	strhge	r3, [r4, #24]
  41dc66:	e7c9      	b.n	41dbfc <lv_btnmatrix_signal+0x4d8>
    else if(sign == LV_SIGNAL_GET_EDITABLE) {
  41dc68:	2e19      	cmp	r6, #25
  41dc6a:	f47f ad69 	bne.w	41d740 <lv_btnmatrix_signal+0x1c>
        *editable       = true;
  41dc6e:	2301      	movs	r3, #1
  41dc70:	703b      	strb	r3, [r7, #0]
  41dc72:	e565      	b.n	41d740 <lv_btnmatrix_signal+0x1c>
  41dc74:	0041d6f1 	.word	0x0041d6f1
  41dc78:	0041cf01 	.word	0x0041cf01
  41dc7c:	004036dd 	.word	0x004036dd
  41dc80:	004036e9 	.word	0x004036e9
  41dc84:	00404e95 	.word	0x00404e95
  41dc88:	00414409 	.word	0x00414409
  41dc8c:	004072a9 	.word	0x004072a9
  41dc90:	004032a9 	.word	0x004032a9
  41dc94:	00405565 	.word	0x00405565
  41dc98:	004069b5 	.word	0x004069b5

0041dc9c <lv_btnmatrix_get_align>:
{
  41dc9c:	b510      	push	{r4, lr}
  41dc9e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41dca0:	4b09      	ldr	r3, [pc, #36]	; (41dcc8 <lv_btnmatrix_get_align+0x2c>)
  41dca2:	4798      	blx	r3
  41dca4:	b928      	cbnz	r0, 41dcb2 <lv_btnmatrix_get_align+0x16>
  41dca6:	4622      	mov	r2, r4
  41dca8:	2300      	movs	r3, #0
  41dcaa:	4808      	ldr	r0, [pc, #32]	; (41dccc <lv_btnmatrix_get_align+0x30>)
  41dcac:	4908      	ldr	r1, [pc, #32]	; (41dcd0 <lv_btnmatrix_get_align+0x34>)
  41dcae:	4788      	blx	r1
  41dcb0:	e7fe      	b.n	41dcb0 <lv_btnmatrix_get_align+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41dcb2:	4620      	mov	r0, r4
  41dcb4:	4b07      	ldr	r3, [pc, #28]	; (41dcd4 <lv_btnmatrix_get_align+0x38>)
  41dcb6:	4798      	blx	r3
    lv_label_align_t align = ext->align;
  41dcb8:	7f00      	ldrb	r0, [r0, #28]
  41dcba:	f3c0 0081 	ubfx	r0, r0, #2, #2
        align = LV_LABEL_ALIGN_LEFT;
  41dcbe:	2803      	cmp	r0, #3
}
  41dcc0:	bf08      	it	eq
  41dcc2:	2000      	moveq	r0, #0
  41dcc4:	bd10      	pop	{r4, pc}
  41dcc6:	bf00      	nop
  41dcc8:	004150ef 	.word	0x004150ef
  41dccc:	00425a74 	.word	0x00425a74
  41dcd0:	004150f9 	.word	0x004150f9
  41dcd4:	00407281 	.word	0x00407281

0041dcd8 <lv_btnmatrix_design>:
{
  41dcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41dcdc:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  41dce0:	9006      	str	r0, [sp, #24]
  41dce2:	9105      	str	r1, [sp, #20]
    if(mode == LV_DESIGN_COVER_CHK) {
  41dce4:	2a02      	cmp	r2, #2
  41dce6:	d008      	beq.n	41dcfa <lv_btnmatrix_design+0x22>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41dce8:	b15a      	cbz	r2, 41dd02 <lv_btnmatrix_design+0x2a>
    else if(mode == LV_DESIGN_DRAW_POST) {
  41dcea:	2a01      	cmp	r2, #1
  41dcec:	f000 8215 	beq.w	41e11a <lv_btnmatrix_design+0x442>
    return LV_DESIGN_RES_OK;
  41dcf0:	2000      	movs	r0, #0
}
  41dcf2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  41dcf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ancestor_design_f(btnm, clip_area, mode);
  41dcfa:	4bac      	ldr	r3, [pc, #688]	; (41dfac <lv_btnmatrix_design+0x2d4>)
  41dcfc:	681b      	ldr	r3, [r3, #0]
  41dcfe:	4798      	blx	r3
  41dd00:	e7f7      	b.n	41dcf2 <lv_btnmatrix_design+0x1a>
        ancestor_design_f(btnm, clip_area, mode);
  41dd02:	4baa      	ldr	r3, [pc, #680]	; (41dfac <lv_btnmatrix_design+0x2d4>)
  41dd04:	681b      	ldr	r3, [r3, #0]
  41dd06:	9905      	ldr	r1, [sp, #20]
  41dd08:	9c06      	ldr	r4, [sp, #24]
  41dd0a:	4620      	mov	r0, r4
  41dd0c:	4798      	blx	r3
        lv_btnmatrix_ext_t * ext         = lv_obj_get_ext_attr(btnm);
  41dd0e:	4620      	mov	r0, r4
  41dd10:	4ba7      	ldr	r3, [pc, #668]	; (41dfb0 <lv_btnmatrix_design+0x2d8>)
  41dd12:	4798      	blx	r3
  41dd14:	4682      	mov	sl, r0
        if(ext->btn_cnt == 0) return LV_DESIGN_RES_OK;
  41dd16:	8a83      	ldrh	r3, [r0, #20]
  41dd18:	b90b      	cbnz	r3, 41dd1e <lv_btnmatrix_design+0x46>
  41dd1a:	2000      	movs	r0, #0
  41dd1c:	e7e9      	b.n	41dcf2 <lv_btnmatrix_design+0x1a>
        lv_obj_get_coords(btnm, &area_btnm);
  41dd1e:	a912      	add	r1, sp, #72	; 0x48
  41dd20:	9c06      	ldr	r4, [sp, #24]
  41dd22:	4620      	mov	r0, r4
  41dd24:	4ba3      	ldr	r3, [pc, #652]	; (41dfb4 <lv_btnmatrix_design+0x2dc>)
  41dd26:	4798      	blx	r3
        if(ext->recolor) txt_flag |= LV_TXT_FLAG_RECOLOR;
  41dd28:	f89a 301c 	ldrb.w	r3, [sl, #28]
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
  41dd2c:	f003 0301 	and.w	r3, r3, #1
  41dd30:	930a      	str	r3, [sp, #40]	; 0x28
        lv_label_align_t align = lv_btnmatrix_get_align(btnm);
  41dd32:	4620      	mov	r0, r4
  41dd34:	4ba0      	ldr	r3, [pc, #640]	; (41dfb8 <lv_btnmatrix_design+0x2e0>)
  41dd36:	4798      	blx	r3
        if(align == LV_LABEL_ALIGN_CENTER) txt_flag |= LV_TXT_FLAG_CENTER;
  41dd38:	2801      	cmp	r0, #1
  41dd3a:	d03e      	beq.n	41ddba <lv_btnmatrix_design+0xe2>
        if(align == LV_LABEL_ALIGN_RIGHT) txt_flag |= LV_TXT_FLAG_RIGHT;
  41dd3c:	2802      	cmp	r0, #2
  41dd3e:	d041      	beq.n	41ddc4 <lv_btnmatrix_design+0xec>
        lv_state_t state_ori = btnm->state;
  41dd40:	9f06      	ldr	r7, [sp, #24]
  41dd42:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
  41dd46:	461e      	mov	r6, r3
  41dd48:	930b      	str	r3, [sp, #44]	; 0x2c
        _lv_obj_disable_style_caching(btnm, true);
  41dd4a:	2101      	movs	r1, #1
  41dd4c:	4638      	mov	r0, r7
  41dd4e:	4d9b      	ldr	r5, [pc, #620]	; (41dfbc <lv_btnmatrix_design+0x2e4>)
  41dd50:	47a8      	blx	r5
        btnm->state = LV_STATE_DEFAULT;
  41dd52:	2400      	movs	r4, #0
  41dd54:	f887 403d 	strb.w	r4, [r7, #61]	; 0x3d
        lv_draw_rect_dsc_init(&draw_rect_rel_dsc);
  41dd58:	a83a      	add	r0, sp, #232	; 0xe8
  41dd5a:	4b99      	ldr	r3, [pc, #612]	; (41dfc0 <lv_btnmatrix_design+0x2e8>)
  41dd5c:	4798      	blx	r3
        lv_draw_label_dsc_init(&draw_label_rel_dsc);
  41dd5e:	a816      	add	r0, sp, #88	; 0x58
  41dd60:	4b98      	ldr	r3, [pc, #608]	; (41dfc4 <lv_btnmatrix_design+0x2ec>)
  41dd62:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_rel_dsc);
  41dd64:	aa3a      	add	r2, sp, #232	; 0xe8
  41dd66:	2101      	movs	r1, #1
  41dd68:	4638      	mov	r0, r7
  41dd6a:	4b97      	ldr	r3, [pc, #604]	; (41dfc8 <lv_btnmatrix_design+0x2f0>)
  41dd6c:	4798      	blx	r3
        lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_rel_dsc);
  41dd6e:	aa16      	add	r2, sp, #88	; 0x58
  41dd70:	2101      	movs	r1, #1
  41dd72:	4638      	mov	r0, r7
  41dd74:	4b95      	ldr	r3, [pc, #596]	; (41dfcc <lv_btnmatrix_design+0x2f4>)
  41dd76:	4798      	blx	r3
        draw_label_rel_dsc.flag = txt_flag;
  41dd78:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  41dd7c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
        btnm->state = state_ori;
  41dd80:	463a      	mov	r2, r7
  41dd82:	f882 603d 	strb.w	r6, [r2, #61]	; 0x3d
        _lv_obj_disable_style_caching(btnm, false);
  41dd86:	4621      	mov	r1, r4
  41dd88:	4638      	mov	r0, r7
  41dd8a:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41dd8c:	2210      	movs	r2, #16
  41dd8e:	4621      	mov	r1, r4
  41dd90:	4638      	mov	r0, r7
  41dd92:	4d8f      	ldr	r5, [pc, #572]	; (41dfd0 <lv_btnmatrix_design+0x2f8>)
  41dd94:	47a8      	blx	r5
  41dd96:	900c      	str	r0, [sp, #48]	; 0x30
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41dd98:	2211      	movs	r2, #17
  41dd9a:	4621      	mov	r1, r4
  41dd9c:	4638      	mov	r0, r7
  41dd9e:	47a8      	blx	r5
  41dda0:	900d      	str	r0, [sp, #52]	; 0x34
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
  41dda2:	f8ba 3014 	ldrh.w	r3, [sl, #20]
  41dda6:	2b00      	cmp	r3, #0
  41dda8:	f000 81b5 	beq.w	41e116 <lv_btnmatrix_design+0x43e>
  41ddac:	2300      	movs	r3, #0
  41ddae:	930e      	str	r3, [sp, #56]	; 0x38
  41ddb0:	930f      	str	r3, [sp, #60]	; 0x3c
  41ddb2:	469b      	mov	fp, r3
  41ddb4:	461c      	mov	r4, r3
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
  41ddb6:	4f87      	ldr	r7, [pc, #540]	; (41dfd4 <lv_btnmatrix_design+0x2fc>)
  41ddb8:	e190      	b.n	41e0dc <lv_btnmatrix_design+0x404>
        if(align == LV_LABEL_ALIGN_CENTER) txt_flag |= LV_TXT_FLAG_CENTER;
  41ddba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41ddbc:	f043 0304 	orr.w	r3, r3, #4
  41ddc0:	930a      	str	r3, [sp, #40]	; 0x28
  41ddc2:	e7bd      	b.n	41dd40 <lv_btnmatrix_design+0x68>
        if(align == LV_LABEL_ALIGN_RIGHT) txt_flag |= LV_TXT_FLAG_RIGHT;
  41ddc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41ddc6:	f043 0308 	orr.w	r3, r3, #8
  41ddca:	930a      	str	r3, [sp, #40]	; 0x28
  41ddcc:	e7b8      	b.n	41dd40 <lv_btnmatrix_design+0x68>
                txt_i++;
  41ddce:	3401      	adds	r4, #1
  41ddd0:	b2a4      	uxth	r4, r4
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
  41ddd2:	00a5      	lsls	r5, r4, #2
  41ddd4:	4980      	ldr	r1, [pc, #512]	; (41dfd8 <lv_btnmatrix_design+0x300>)
  41ddd6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  41ddda:	47b8      	blx	r7
  41dddc:	2800      	cmp	r0, #0
  41ddde:	d0f6      	beq.n	41ddce <lv_btnmatrix_design+0xf6>
  41dde0:	9407      	str	r4, [sp, #28]
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
  41dde2:	ea4f 064b 	mov.w	r6, fp, lsl #1
  41dde6:	f8da 3008 	ldr.w	r3, [sl, #8]
  41ddea:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
  41ddee:	f013 0f08 	tst.w	r3, #8
  41ddf2:	f040 8169 	bne.w	41e0c8 <lv_btnmatrix_design+0x3f0>
            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
  41ddf6:	f8da 0004 	ldr.w	r0, [sl, #4]
  41ddfa:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
  41ddfe:	1e43      	subs	r3, r0, #1
  41de00:	3007      	adds	r0, #7
    uint8_t * d8 = (uint8_t *)dst;
  41de02:	aa14      	add	r2, sp, #80	; 0x50
        *d8 = *s8;
  41de04:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  41de08:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  41de0c:	4283      	cmp	r3, r0
  41de0e:	d1f9      	bne.n	41de04 <lv_btnmatrix_design+0x12c>
            area_tmp.x1 += area_btnm.x1;
  41de10:	f8bd c048 	ldrh.w	ip, [sp, #72]	; 0x48
  41de14:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
  41de18:	4462      	add	r2, ip
  41de1a:	b290      	uxth	r0, r2
  41de1c:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
            area_tmp.y1 += area_btnm.y1;
  41de20:	f8bd e04a 	ldrh.w	lr, [sp, #74]	; 0x4a
  41de24:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  41de28:	4473      	add	r3, lr
  41de2a:	b299      	uxth	r1, r3
  41de2c:	f8ad 1052 	strh.w	r1, [sp, #82]	; 0x52
            area_tmp.x2 += area_btnm.x1;
  41de30:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
  41de34:	4462      	add	r2, ip
  41de36:	b292      	uxth	r2, r2
  41de38:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
            area_tmp.y2 += area_btnm.y1;
  41de3c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
  41de40:	4473      	add	r3, lr
  41de42:	b29b      	uxth	r3, r3
  41de44:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
  41de48:	3201      	adds	r2, #1
  41de4a:	1a12      	subs	r2, r2, r0
  41de4c:	b212      	sxth	r2, r2
  41de4e:	9209      	str	r2, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41de50:	3301      	adds	r3, #1
  41de52:	1a5b      	subs	r3, r3, r1
  41de54:	b21b      	sxth	r3, r3
  41de56:	9308      	str	r3, [sp, #32]
            if(button_get_tgl_state(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
  41de58:	f8da 3008 	ldr.w	r3, [sl, #8]
  41de5c:	5b9a      	ldrh	r2, [r3, r6]
            lv_state_t btn_state = LV_STATE_DEFAULT;
  41de5e:	f3c2 13c0 	ubfx	r3, r2, #7, #1
            if(button_is_inactive(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
  41de62:	f012 0f20 	tst.w	r2, #32
  41de66:	bf18      	it	ne
  41de68:	f043 0320 	orrne.w	r3, r3, #32
            if(btn_i == ext->btn_id_pr) btn_state |= LV_STATE_PRESSED;
  41de6c:	f8ba 2016 	ldrh.w	r2, [sl, #22]
  41de70:	455a      	cmp	r2, fp
  41de72:	bf08      	it	eq
  41de74:	f043 0310 	orreq.w	r3, r3, #16
            if(btn_i == ext->btn_id_focused) {
  41de78:	f8ba 2018 	ldrh.w	r2, [sl, #24]
  41de7c:	455a      	cmp	r2, fp
  41de7e:	d02c      	beq.n	41deda <lv_btnmatrix_design+0x202>
            if(btn_state == LV_STATE_DEFAULT) {
  41de80:	2b00      	cmp	r3, #0
  41de82:	f000 80ab 	beq.w	41dfdc <lv_btnmatrix_design+0x304>
            else if(btn_state == LV_STATE_CHECKED) {
  41de86:	2b01      	cmp	r3, #1
  41de88:	d030      	beq.n	41deec <lv_btnmatrix_design+0x214>
            else if(btn_state == LV_STATE_DISABLED) {
  41de8a:	2b20      	cmp	r3, #32
  41de8c:	d05f      	beq.n	41df4e <lv_btnmatrix_design+0x276>
                btnm->state = btn_state;
  41de8e:	9806      	ldr	r0, [sp, #24]
  41de90:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
                _lv_obj_disable_style_caching(btnm, true);
  41de94:	2101      	movs	r1, #1
  41de96:	4680      	mov	r8, r0
  41de98:	4e48      	ldr	r6, [pc, #288]	; (41dfbc <lv_btnmatrix_design+0x2e4>)
  41de9a:	47b0      	blx	r6
                lv_draw_rect_dsc_init(&draw_rect_tmp_dsc);
  41de9c:	a879      	add	r0, sp, #484	; 0x1e4
  41de9e:	4b48      	ldr	r3, [pc, #288]	; (41dfc0 <lv_btnmatrix_design+0x2e8>)
  41dea0:	4798      	blx	r3
                lv_draw_label_dsc_init(&draw_label_tmp_dsc);
  41dea2:	a831      	add	r0, sp, #196	; 0xc4
  41dea4:	4b47      	ldr	r3, [pc, #284]	; (41dfc4 <lv_btnmatrix_design+0x2ec>)
  41dea6:	4798      	blx	r3
                lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_tmp_dsc);
  41dea8:	aa79      	add	r2, sp, #484	; 0x1e4
  41deaa:	2101      	movs	r1, #1
  41deac:	4640      	mov	r0, r8
  41deae:	4b46      	ldr	r3, [pc, #280]	; (41dfc8 <lv_btnmatrix_design+0x2f0>)
  41deb0:	4798      	blx	r3
                lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_tmp_dsc);
  41deb2:	aa31      	add	r2, sp, #196	; 0xc4
  41deb4:	2101      	movs	r1, #1
  41deb6:	4640      	mov	r0, r8
  41deb8:	4b44      	ldr	r3, [pc, #272]	; (41dfcc <lv_btnmatrix_design+0x2f4>)
  41deba:	4798      	blx	r3
                draw_label_tmp_dsc.flag = txt_flag;
  41debc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  41dec0:	f88d 30e5 	strb.w	r3, [sp, #229]	; 0xe5
                btnm->state = state_ori;
  41dec4:	4640      	mov	r0, r8
  41dec6:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  41deca:	f888 203d 	strb.w	r2, [r8, #61]	; 0x3d
                _lv_obj_disable_style_caching(btnm, false);
  41dece:	2100      	movs	r1, #0
  41ded0:	47b0      	blx	r6
                draw_label_dsc_act = &draw_label_tmp_dsc;
  41ded2:	f10d 08c4 	add.w	r8, sp, #196	; 0xc4
                draw_rect_dsc_act = &draw_rect_tmp_dsc;
  41ded6:	ae79      	add	r6, sp, #484	; 0x1e4
  41ded8:	e083      	b.n	41dfe2 <lv_btnmatrix_design+0x30a>
                if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
  41deda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  41dedc:	f012 0f04 	tst.w	r2, #4
                btn_state |= LV_STATE_FOCUSED;
  41dee0:	bf0c      	ite	eq
  41dee2:	f043 0302 	orreq.w	r3, r3, #2
                if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
  41dee6:	f043 0306 	orrne.w	r3, r3, #6
  41deea:	e7c9      	b.n	41de80 <lv_btnmatrix_design+0x1a8>
                if(!chk_inited) {
  41deec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41deee:	b11b      	cbz	r3, 41def8 <lv_btnmatrix_design+0x220>
                draw_label_dsc_act = &draw_label_chk_dsc;
  41def0:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
                draw_rect_dsc_act = &draw_rect_chk_dsc;
  41def4:	ae4f      	add	r6, sp, #316	; 0x13c
  41def6:	e074      	b.n	41dfe2 <lv_btnmatrix_design+0x30a>
                    btnm->state = LV_STATE_CHECKED;
  41def8:	f04f 0901 	mov.w	r9, #1
  41defc:	9a06      	ldr	r2, [sp, #24]
  41defe:	f882 903d 	strb.w	r9, [r2, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, true);
  41df02:	4649      	mov	r1, r9
  41df04:	4690      	mov	r8, r2
  41df06:	4610      	mov	r0, r2
  41df08:	4e2c      	ldr	r6, [pc, #176]	; (41dfbc <lv_btnmatrix_design+0x2e4>)
  41df0a:	47b0      	blx	r6
                    lv_draw_rect_dsc_init(&draw_rect_chk_dsc);
  41df0c:	a84f      	add	r0, sp, #316	; 0x13c
  41df0e:	4b2c      	ldr	r3, [pc, #176]	; (41dfc0 <lv_btnmatrix_design+0x2e8>)
  41df10:	4798      	blx	r3
                    lv_draw_label_dsc_init(&draw_label_chk_dsc);
  41df12:	a81f      	add	r0, sp, #124	; 0x7c
  41df14:	4b2b      	ldr	r3, [pc, #172]	; (41dfc4 <lv_btnmatrix_design+0x2ec>)
  41df16:	4798      	blx	r3
                    lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_chk_dsc);
  41df18:	aa4f      	add	r2, sp, #316	; 0x13c
  41df1a:	4649      	mov	r1, r9
  41df1c:	4640      	mov	r0, r8
  41df1e:	4b2a      	ldr	r3, [pc, #168]	; (41dfc8 <lv_btnmatrix_design+0x2f0>)
  41df20:	4798      	blx	r3
                    lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_chk_dsc);
  41df22:	aa1f      	add	r2, sp, #124	; 0x7c
  41df24:	4649      	mov	r1, r9
  41df26:	4640      	mov	r0, r8
  41df28:	4b28      	ldr	r3, [pc, #160]	; (41dfcc <lv_btnmatrix_design+0x2f4>)
  41df2a:	4798      	blx	r3
                    draw_label_chk_dsc.flag = txt_flag;
  41df2c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  41df30:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
                    btnm->state = state_ori;
  41df34:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
  41df38:	f888 103d 	strb.w	r1, [r8, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, false);
  41df3c:	2100      	movs	r1, #0
  41df3e:	4640      	mov	r0, r8
  41df40:	47b0      	blx	r6
                draw_label_dsc_act = &draw_label_chk_dsc;
  41df42:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
                draw_rect_dsc_act = &draw_rect_chk_dsc;
  41df46:	ae4f      	add	r6, sp, #316	; 0x13c
                    chk_inited = true;
  41df48:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  41df4c:	e049      	b.n	41dfe2 <lv_btnmatrix_design+0x30a>
                if(!disabled_inited) {
  41df4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41df50:	b11b      	cbz	r3, 41df5a <lv_btnmatrix_design+0x282>
                draw_label_dsc_act = &draw_label_ina_dsc;
  41df52:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
                draw_rect_dsc_act = &draw_rect_ina_dsc;
  41df56:	ae64      	add	r6, sp, #400	; 0x190
  41df58:	e043      	b.n	41dfe2 <lv_btnmatrix_design+0x30a>
                    btnm->state = LV_STATE_DISABLED;
  41df5a:	2320      	movs	r3, #32
  41df5c:	9806      	ldr	r0, [sp, #24]
  41df5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, true);
  41df62:	2101      	movs	r1, #1
  41df64:	4680      	mov	r8, r0
  41df66:	4e15      	ldr	r6, [pc, #84]	; (41dfbc <lv_btnmatrix_design+0x2e4>)
  41df68:	47b0      	blx	r6
                    lv_draw_rect_dsc_init(&draw_rect_ina_dsc);
  41df6a:	a864      	add	r0, sp, #400	; 0x190
  41df6c:	4b14      	ldr	r3, [pc, #80]	; (41dfc0 <lv_btnmatrix_design+0x2e8>)
  41df6e:	4798      	blx	r3
                    lv_draw_label_dsc_init(&draw_label_ina_dsc);
  41df70:	a828      	add	r0, sp, #160	; 0xa0
  41df72:	4b14      	ldr	r3, [pc, #80]	; (41dfc4 <lv_btnmatrix_design+0x2ec>)
  41df74:	4798      	blx	r3
                    lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_ina_dsc);
  41df76:	aa64      	add	r2, sp, #400	; 0x190
  41df78:	2101      	movs	r1, #1
  41df7a:	4640      	mov	r0, r8
  41df7c:	4b12      	ldr	r3, [pc, #72]	; (41dfc8 <lv_btnmatrix_design+0x2f0>)
  41df7e:	4798      	blx	r3
                    lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_ina_dsc);
  41df80:	aa28      	add	r2, sp, #160	; 0xa0
  41df82:	2101      	movs	r1, #1
  41df84:	4640      	mov	r0, r8
  41df86:	4b11      	ldr	r3, [pc, #68]	; (41dfcc <lv_btnmatrix_design+0x2f4>)
  41df88:	4798      	blx	r3
                    draw_label_ina_dsc.flag = txt_flag;
  41df8a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  41df8e:	f88d 30c1 	strb.w	r3, [sp, #193]	; 0xc1
                    btnm->state = state_ori;
  41df92:	4640      	mov	r0, r8
  41df94:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  41df98:	f888 203d 	strb.w	r2, [r8, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, false);
  41df9c:	2100      	movs	r1, #0
  41df9e:	47b0      	blx	r6
                draw_label_dsc_act = &draw_label_ina_dsc;
  41dfa0:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
                draw_rect_dsc_act = &draw_rect_ina_dsc;
  41dfa4:	ae64      	add	r6, sp, #400	; 0x190
                    disabled_inited = true;
  41dfa6:	2301      	movs	r3, #1
  41dfa8:	930e      	str	r3, [sp, #56]	; 0x38
  41dfaa:	e01a      	b.n	41dfe2 <lv_btnmatrix_design+0x30a>
  41dfac:	2041478c 	.word	0x2041478c
  41dfb0:	00407281 	.word	0x00407281
  41dfb4:	004050d1 	.word	0x004050d1
  41dfb8:	0041dc9d 	.word	0x0041dc9d
  41dfbc:	0040530d 	.word	0x0040530d
  41dfc0:	0040fa91 	.word	0x0040fa91
  41dfc4:	0040cd3d 	.word	0x0040cd3d
  41dfc8:	0040754d 	.word	0x0040754d
  41dfcc:	00407b79 	.word	0x00407b79
  41dfd0:	004069b5 	.word	0x004069b5
  41dfd4:	004233c9 	.word	0x004233c9
  41dfd8:	004306d0 	.word	0x004306d0
                draw_label_dsc_act = &draw_label_rel_dsc;
  41dfdc:	f10d 0858 	add.w	r8, sp, #88	; 0x58
                draw_rect_dsc_act = &draw_rect_rel_dsc;
  41dfe0:	ae3a      	add	r6, sp, #232	; 0xe8
            lv_style_int_t border_part_ori = draw_rect_dsc_act->border_side;
  41dfe2:	f9b6 9012 	ldrsh.w	r9, [r6, #18]
            if(border_part_ori & LV_BORDER_SIDE_INTERNAL) {
  41dfe6:	f019 0f10 	tst.w	r9, #16
  41dfea:	d026      	beq.n	41e03a <lv_btnmatrix_design+0x362>
                if(area_tmp.y1 == btnm->coords.y1 + padding_top) {
  41dfec:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  41dff0:	9b06      	ldr	r3, [sp, #24]
  41dff2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  41dff6:	990c      	ldr	r1, [sp, #48]	; 0x30
  41dff8:	440b      	add	r3, r1
  41dffa:	429a      	cmp	r2, r3
  41dffc:	d071      	beq.n	41e0e2 <lv_btnmatrix_design+0x40a>
                if(area_tmp.y2 == btnm->coords.y2 - padding_bottom) {
  41dffe:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
  41e002:	9b06      	ldr	r3, [sp, #24]
  41e004:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
  41e008:	990d      	ldr	r1, [sp, #52]	; 0x34
  41e00a:	1a5b      	subs	r3, r3, r1
  41e00c:	429a      	cmp	r2, r3
  41e00e:	d06c      	beq.n	41e0ea <lv_btnmatrix_design+0x412>
                if(txt_i == 0) { /*First button*/
  41e010:	2c00      	cmp	r4, #0
  41e012:	d16f      	bne.n	41e0f4 <lv_btnmatrix_design+0x41c>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_LEFT;
  41e014:	8a73      	ldrh	r3, [r6, #18]
  41e016:	f023 0304 	bic.w	r3, r3, #4
  41e01a:	8273      	strh	r3, [r6, #18]
                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
  41e01c:	9b07      	ldr	r3, [sp, #28]
  41e01e:	3301      	adds	r3, #1
  41e020:	f8da 2000 	ldr.w	r2, [sl]
  41e024:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  41e028:	7803      	ldrb	r3, [r0, #0]
  41e02a:	b113      	cbz	r3, 41e032 <lv_btnmatrix_design+0x35a>
  41e02c:	493e      	ldr	r1, [pc, #248]	; (41e128 <lv_btnmatrix_design+0x450>)
  41e02e:	47b8      	blx	r7
  41e030:	b918      	cbnz	r0, 41e03a <lv_btnmatrix_design+0x362>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_RIGHT;
  41e032:	8a73      	ldrh	r3, [r6, #18]
  41e034:	f023 0308 	bic.w	r3, r3, #8
  41e038:	8273      	strh	r3, [r6, #18]
            lv_draw_rect(&area_tmp, clip_area, draw_rect_dsc_act);
  41e03a:	4632      	mov	r2, r6
  41e03c:	9905      	ldr	r1, [sp, #20]
  41e03e:	a814      	add	r0, sp, #80	; 0x50
  41e040:	4b3a      	ldr	r3, [pc, #232]	; (41e12c <lv_btnmatrix_design+0x454>)
  41e042:	4798      	blx	r3
            draw_rect_dsc_act->border_side = border_part_ori;
  41e044:	f8a6 9012 	strh.w	r9, [r6, #18]
            const char * txt = ext->map_p[txt_i];
  41e048:	f8da 3000 	ldr.w	r3, [sl]
  41e04c:	595d      	ldr	r5, [r3, r5]
            _lv_txt_get_size(&txt_size, txt, font, letter_space,
  41e04e:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  41e052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  41e054:	9202      	str	r2, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41e056:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  41e05a:	3201      	adds	r2, #1
  41e05c:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
  41e060:	1a52      	subs	r2, r2, r1
  41e062:	b212      	sxth	r2, r2
  41e064:	9201      	str	r2, [sp, #4]
  41e066:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
  41e06a:	9200      	str	r2, [sp, #0]
  41e06c:	f8d8 2008 	ldr.w	r2, [r8, #8]
  41e070:	4629      	mov	r1, r5
  41e072:	a811      	add	r0, sp, #68	; 0x44
  41e074:	4e2e      	ldr	r6, [pc, #184]	; (41e130 <lv_btnmatrix_design+0x458>)
  41e076:	47b0      	blx	r6
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
  41e078:	f9bd 0044 	ldrsh.w	r0, [sp, #68]	; 0x44
  41e07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41e07e:	1a1b      	subs	r3, r3, r0
  41e080:	bf48      	it	mi
  41e082:	3301      	addmi	r3, #1
  41e084:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
  41e088:	eb02 0263 	add.w	r2, r2, r3, asr #1
  41e08c:	b292      	uxth	r2, r2
  41e08e:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
  41e092:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
  41e096:	9b08      	ldr	r3, [sp, #32]
  41e098:	1a5e      	subs	r6, r3, r1
  41e09a:	bf48      	it	mi
  41e09c:	3601      	addmi	r6, #1
  41e09e:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  41e0a2:	eb03 0366 	add.w	r3, r3, r6, asr #1
  41e0a6:	b29b      	uxth	r3, r3
  41e0a8:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
  41e0ac:	4402      	add	r2, r0
  41e0ae:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
  41e0b2:	440b      	add	r3, r1
  41e0b4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            lv_draw_label(&area_tmp, clip_area, draw_label_dsc_act, txt, NULL);
  41e0b8:	2300      	movs	r3, #0
  41e0ba:	9300      	str	r3, [sp, #0]
  41e0bc:	462b      	mov	r3, r5
  41e0be:	4642      	mov	r2, r8
  41e0c0:	9905      	ldr	r1, [sp, #20]
  41e0c2:	a814      	add	r0, sp, #80	; 0x50
  41e0c4:	4d1b      	ldr	r5, [pc, #108]	; (41e134 <lv_btnmatrix_design+0x45c>)
  41e0c6:	47a8      	blx	r5
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
  41e0c8:	f10b 0b01 	add.w	fp, fp, #1
  41e0cc:	fa1f fb8b 	uxth.w	fp, fp
  41e0d0:	3401      	adds	r4, #1
  41e0d2:	b2a4      	uxth	r4, r4
  41e0d4:	f8ba 3014 	ldrh.w	r3, [sl, #20]
  41e0d8:	455b      	cmp	r3, fp
  41e0da:	d91c      	bls.n	41e116 <lv_btnmatrix_design+0x43e>
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
  41e0dc:	f8da 6000 	ldr.w	r6, [sl]
  41e0e0:	e677      	b.n	41ddd2 <lv_btnmatrix_design+0xfa>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_TOP;
  41e0e2:	f029 0302 	bic.w	r3, r9, #2
  41e0e6:	8273      	strh	r3, [r6, #18]
  41e0e8:	e789      	b.n	41dffe <lv_btnmatrix_design+0x326>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_BOTTOM;
  41e0ea:	8a73      	ldrh	r3, [r6, #18]
  41e0ec:	f023 0301 	bic.w	r3, r3, #1
  41e0f0:	8273      	strh	r3, [r6, #18]
  41e0f2:	e78d      	b.n	41e010 <lv_btnmatrix_design+0x338>
                else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
  41e0f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  41e0f8:	9a07      	ldr	r2, [sp, #28]
  41e0fa:	4413      	add	r3, r2
  41e0fc:	f8da 2000 	ldr.w	r2, [sl]
  41e100:	4909      	ldr	r1, [pc, #36]	; (41e128 <lv_btnmatrix_design+0x450>)
  41e102:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  41e106:	47b8      	blx	r7
  41e108:	2800      	cmp	r0, #0
  41e10a:	d187      	bne.n	41e01c <lv_btnmatrix_design+0x344>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_LEFT;
  41e10c:	8a73      	ldrh	r3, [r6, #18]
  41e10e:	f023 0304 	bic.w	r3, r3, #4
  41e112:	8273      	strh	r3, [r6, #18]
  41e114:	e782      	b.n	41e01c <lv_btnmatrix_design+0x344>
    return LV_DESIGN_RES_OK;
  41e116:	2000      	movs	r0, #0
  41e118:	e5eb      	b.n	41dcf2 <lv_btnmatrix_design+0x1a>
        ancestor_design_f(btnm, clip_area, mode);
  41e11a:	4b07      	ldr	r3, [pc, #28]	; (41e138 <lv_btnmatrix_design+0x460>)
  41e11c:	681b      	ldr	r3, [r3, #0]
  41e11e:	9905      	ldr	r1, [sp, #20]
  41e120:	9806      	ldr	r0, [sp, #24]
  41e122:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41e124:	2000      	movs	r0, #0
  41e126:	e5e4      	b.n	41dcf2 <lv_btnmatrix_design+0x1a>
  41e128:	004306d0 	.word	0x004306d0
  41e12c:	0040fadd 	.word	0x0040fadd
  41e130:	0041725d 	.word	0x0041725d
  41e134:	0040cd85 	.word	0x0040cd85
  41e138:	2041478c 	.word	0x2041478c

0041e13c <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
  41e13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e140:	b08b      	sub	sp, #44	; 0x2c
  41e142:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
  41e144:	2101      	movs	r1, #1
  41e146:	4bc0      	ldr	r3, [pc, #768]	; (41e448 <lv_cont_refr_autofit+0x30c>)
  41e148:	4798      	blx	r3
  41e14a:	b110      	cbz	r0, 41e152 <lv_cont_refr_autofit+0x16>
    else {
        LV_LOG_ERROR("LV_LAYOUT_MAX_RECURSION reached! You may have encountered issue #1539.");
    }

    recursion_level--;
}
  41e14c:	b00b      	add	sp, #44	; 0x2c
  41e14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41e152:	4620      	mov	r0, r4
  41e154:	4bbd      	ldr	r3, [pc, #756]	; (41e44c <lv_cont_refr_autofit+0x310>)
  41e156:	4798      	blx	r3
  41e158:	4605      	mov	r5, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
  41e15a:	7803      	ldrb	r3, [r0, #0]
  41e15c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  41e160:	d103      	bne.n	41e16a <lv_cont_refr_autofit+0x2e>
  41e162:	7843      	ldrb	r3, [r0, #1]
  41e164:	f013 0f0f 	tst.w	r3, #15
  41e168:	d0f0      	beq.n	41e14c <lv_cont_refr_autofit+0x10>
    recursion_level++;
  41e16a:	4ab9      	ldr	r2, [pc, #740]	; (41e450 <lv_cont_refr_autofit+0x314>)
  41e16c:	6813      	ldr	r3, [r2, #0]
  41e16e:	3301      	adds	r3, #1
  41e170:	6013      	str	r3, [r2, #0]
    if(recursion_level <= LV_LAYOUT_MAX_RECURSION) {
  41e172:	2b0a      	cmp	r3, #10
  41e174:	dd04      	ble.n	41e180 <lv_cont_refr_autofit+0x44>
    recursion_level--;
  41e176:	4ab6      	ldr	r2, [pc, #728]	; (41e450 <lv_cont_refr_autofit+0x314>)
  41e178:	6813      	ldr	r3, [r2, #0]
  41e17a:	3b01      	subs	r3, #1
  41e17c:	6013      	str	r3, [r2, #0]
  41e17e:	e7e5      	b.n	41e14c <lv_cont_refr_autofit+0x10>
        lv_obj_t * par               = lv_obj_get_parent(cont);
  41e180:	4620      	mov	r0, r4
  41e182:	4bb4      	ldr	r3, [pc, #720]	; (41e454 <lv_cont_refr_autofit+0x318>)
  41e184:	4798      	blx	r3
  41e186:	4607      	mov	r7, r0
  41e188:	f100 030f 	add.w	r3, r0, #15
  41e18c:	3017      	adds	r0, #23
    uint8_t * d8 = (uint8_t *)dst;
  41e18e:	aa06      	add	r2, sp, #24
        *d8 = *s8;
  41e190:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  41e194:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  41e198:	4298      	cmp	r0, r3
  41e19a:	d1f9      	bne.n	41e190 <lv_cont_refr_autofit+0x54>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e19c:	2212      	movs	r2, #18
  41e19e:	2100      	movs	r1, #0
  41e1a0:	4638      	mov	r0, r7
  41e1a2:	4ead      	ldr	r6, [pc, #692]	; (41e458 <lv_cont_refr_autofit+0x31c>)
  41e1a4:	47b0      	blx	r6
        parent_area.x1 += lv_obj_get_style_pad_left(par, LV_OBJ_PART_MAIN);
  41e1a6:	f8bd 8018 	ldrh.w	r8, [sp, #24]
  41e1aa:	4480      	add	r8, r0
  41e1ac:	fa0f f888 	sxth.w	r8, r8
  41e1b0:	f8ad 8018 	strh.w	r8, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41e1b4:	2213      	movs	r2, #19
  41e1b6:	2100      	movs	r1, #0
  41e1b8:	4638      	mov	r0, r7
  41e1ba:	47b0      	blx	r6
        parent_area.x2 -= lv_obj_get_style_pad_right(par, LV_OBJ_PART_MAIN);
  41e1bc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  41e1c0:	1a18      	subs	r0, r3, r0
  41e1c2:	fa0f fa80 	sxth.w	sl, r0
  41e1c6:	f8ad a01c 	strh.w	sl, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e1ca:	2210      	movs	r2, #16
  41e1cc:	2100      	movs	r1, #0
  41e1ce:	4638      	mov	r0, r7
  41e1d0:	47b0      	blx	r6
        parent_area.y1 += lv_obj_get_style_pad_top(par, LV_OBJ_PART_MAIN);
  41e1d2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  41e1d6:	4418      	add	r0, r3
  41e1d8:	fa0f f980 	sxth.w	r9, r0
  41e1dc:	f8ad 901a 	strh.w	r9, [sp, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41e1e0:	2211      	movs	r2, #17
  41e1e2:	2100      	movs	r1, #0
  41e1e4:	4638      	mov	r0, r7
  41e1e6:	47b0      	blx	r6
        parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
  41e1e8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  41e1ec:	1a18      	subs	r0, r3, r0
  41e1ee:	fa0f fb80 	sxth.w	fp, r0
  41e1f2:	f8ad b01e 	strh.w	fp, [sp, #30]
        lv_obj_get_coords(cont, &ori);
  41e1f6:	a904      	add	r1, sp, #16
  41e1f8:	4620      	mov	r0, r4
  41e1fa:	4e98      	ldr	r6, [pc, #608]	; (41e45c <lv_cont_refr_autofit+0x320>)
  41e1fc:	47b0      	blx	r6
        lv_obj_get_coords(cont, &tight_area);
  41e1fe:	a902      	add	r1, sp, #8
  41e200:	4620      	mov	r0, r4
  41e202:	47b0      	blx	r6
        bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
  41e204:	1d23      	adds	r3, r4, #4
  41e206:	9300      	str	r3, [sp, #0]
  41e208:	4618      	mov	r0, r3
  41e20a:	4b95      	ldr	r3, [pc, #596]	; (41e460 <lv_cont_refr_autofit+0x324>)
  41e20c:	4798      	blx	r3
  41e20e:	f080 0001 	eor.w	r0, r0, #1
        if(has_children) {
  41e212:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
  41e216:	9301      	str	r3, [sp, #4]
  41e218:	d17f      	bne.n	41e31a <lv_cont_refr_autofit+0x1de>
  41e21a:	f10d 020f 	add.w	r2, sp, #15
    uint8_t * d8 = (uint8_t *)dst;
  41e21e:	ab08      	add	r3, sp, #32
        *d8 = *s8;
  41e220:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  41e224:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  41e228:	a90a      	add	r1, sp, #40	; 0x28
  41e22a:	428b      	cmp	r3, r1
  41e22c:	d1f8      	bne.n	41e220 <lv_cont_refr_autofit+0xe4>
        switch(ext->fit_left) {
  41e22e:	782b      	ldrb	r3, [r5, #0]
  41e230:	f3c3 1301 	ubfx	r3, r3, #4, #2
  41e234:	2b02      	cmp	r3, #2
  41e236:	f000 8104 	beq.w	41e442 <lv_cont_refr_autofit+0x306>
  41e23a:	f200 811d 	bhi.w	41e478 <lv_cont_refr_autofit+0x33c>
  41e23e:	2b01      	cmp	r3, #1
  41e240:	d103      	bne.n	41e24a <lv_cont_refr_autofit+0x10e>
                new_area.x1 = tight_area.x1;
  41e242:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  41e246:	f8ad 3020 	strh.w	r3, [sp, #32]
        switch(ext->fit_right) {
  41e24a:	782b      	ldrb	r3, [r5, #0]
  41e24c:	099b      	lsrs	r3, r3, #6
  41e24e:	2b02      	cmp	r3, #2
  41e250:	f000 811c 	beq.w	41e48c <lv_cont_refr_autofit+0x350>
  41e254:	f200 811d 	bhi.w	41e492 <lv_cont_refr_autofit+0x356>
  41e258:	2b01      	cmp	r3, #1
  41e25a:	d103      	bne.n	41e264 <lv_cont_refr_autofit+0x128>
                new_area.x2 = tight_area.x2;
  41e25c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  41e260:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        switch(ext->fit_top) {
  41e264:	786b      	ldrb	r3, [r5, #1]
  41e266:	f003 0303 	and.w	r3, r3, #3
  41e26a:	2b02      	cmp	r3, #2
  41e26c:	f000 811b 	beq.w	41e4a6 <lv_cont_refr_autofit+0x36a>
  41e270:	f200 811c 	bhi.w	41e4ac <lv_cont_refr_autofit+0x370>
  41e274:	2b01      	cmp	r3, #1
  41e276:	d103      	bne.n	41e280 <lv_cont_refr_autofit+0x144>
                new_area.y1 = tight_area.y1;
  41e278:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  41e27c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        switch(ext->fit_bottom) {
  41e280:	786b      	ldrb	r3, [r5, #1]
  41e282:	f3c3 0381 	ubfx	r3, r3, #2, #2
  41e286:	2b02      	cmp	r3, #2
  41e288:	f000 811a 	beq.w	41e4c0 <lv_cont_refr_autofit+0x384>
  41e28c:	f200 811b 	bhi.w	41e4c6 <lv_cont_refr_autofit+0x38a>
  41e290:	2b01      	cmp	r3, #1
  41e292:	d103      	bne.n	41e29c <lv_cont_refr_autofit+0x160>
                new_area.y2 = tight_area.y2;
  41e294:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  41e298:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  41e29c:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  41e2a0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  41e2a4:	429a      	cmp	r2, r3
  41e2a6:	f000 8118 	beq.w	41e4da <lv_cont_refr_autofit+0x39e>
            lv_obj_invalidate(cont);
  41e2aa:	4620      	mov	r0, r4
  41e2ac:	4b6d      	ldr	r3, [pc, #436]	; (41e464 <lv_cont_refr_autofit+0x328>)
  41e2ae:	4798      	blx	r3
  41e2b0:	f10d 021f 	add.w	r2, sp, #31
  41e2b4:	f104 0018 	add.w	r0, r4, #24
    uint8_t * d8 = (uint8_t *)dst;
  41e2b8:	f104 0310 	add.w	r3, r4, #16
        *d8 = *s8;
  41e2bc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  41e2c0:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  41e2c4:	4283      	cmp	r3, r0
  41e2c6:	d1f9      	bne.n	41e2bc <lv_cont_refr_autofit+0x180>
            lv_obj_invalidate(cont);
  41e2c8:	4620      	mov	r0, r4
  41e2ca:	4b66      	ldr	r3, [pc, #408]	; (41e464 <lv_cont_refr_autofit+0x328>)
  41e2cc:	4798      	blx	r3
            cont->signal_cb(cont, LV_SIGNAL_COORD_CHG, &ori);
  41e2ce:	69e3      	ldr	r3, [r4, #28]
  41e2d0:	aa04      	add	r2, sp, #16
  41e2d2:	2102      	movs	r1, #2
  41e2d4:	4620      	mov	r0, r4
  41e2d6:	4798      	blx	r3
            par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
  41e2d8:	69fb      	ldr	r3, [r7, #28]
  41e2da:	4622      	mov	r2, r4
  41e2dc:	2101      	movs	r1, #1
  41e2de:	4638      	mov	r0, r7
  41e2e0:	4798      	blx	r3
            if(lv_obj_get_auto_realign(cont)) {
  41e2e2:	4620      	mov	r0, r4
  41e2e4:	4b60      	ldr	r3, [pc, #384]	; (41e468 <lv_cont_refr_autofit+0x32c>)
  41e2e6:	4798      	blx	r3
  41e2e8:	2800      	cmp	r0, #0
  41e2ea:	f040 810c 	bne.w	41e506 <lv_cont_refr_autofit+0x3ca>
            _LV_LL_READ(cont->child_ll, child_i) {
  41e2ee:	9f00      	ldr	r7, [sp, #0]
  41e2f0:	4638      	mov	r0, r7
  41e2f2:	4b5e      	ldr	r3, [pc, #376]	; (41e46c <lv_cont_refr_autofit+0x330>)
  41e2f4:	4798      	blx	r3
  41e2f6:	4604      	mov	r4, r0
  41e2f8:	2800      	cmp	r0, #0
  41e2fa:	f43f af3c 	beq.w	41e176 <lv_cont_refr_autofit+0x3a>
                child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
  41e2fe:	2603      	movs	r6, #3
            _LV_LL_READ(cont->child_ll, child_i) {
  41e300:	4d5b      	ldr	r5, [pc, #364]	; (41e470 <lv_cont_refr_autofit+0x334>)
                child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
  41e302:	69e3      	ldr	r3, [r4, #28]
  41e304:	aa04      	add	r2, sp, #16
  41e306:	4631      	mov	r1, r6
  41e308:	4620      	mov	r0, r4
  41e30a:	4798      	blx	r3
            _LV_LL_READ(cont->child_ll, child_i) {
  41e30c:	4621      	mov	r1, r4
  41e30e:	4638      	mov	r0, r7
  41e310:	47a8      	blx	r5
  41e312:	4604      	mov	r4, r0
  41e314:	2800      	cmp	r0, #0
  41e316:	d1f4      	bne.n	41e302 <lv_cont_refr_autofit+0x1c6>
  41e318:	e72d      	b.n	41e176 <lv_cont_refr_autofit+0x3a>
            tight_area.x1 = LV_COORD_MAX;
  41e31a:	f647 4318 	movw	r3, #31768	; 0x7c18
  41e31e:	f8ad 3008 	strh.w	r3, [sp, #8]
            tight_area.y1 = LV_COORD_MAX;
  41e322:	f8ad 300a 	strh.w	r3, [sp, #10]
            tight_area.x2 = LV_COORD_MIN;
  41e326:	f248 33e8 	movw	r3, #33768	; 0x83e8
  41e32a:	f8ad 300c 	strh.w	r3, [sp, #12]
            tight_area.y2 = LV_COORD_MIN;
  41e32e:	f8ad 300e 	strh.w	r3, [sp, #14]
            _LV_LL_READ(cont->child_ll, child_i) {
  41e332:	9800      	ldr	r0, [sp, #0]
  41e334:	4b4d      	ldr	r3, [pc, #308]	; (41e46c <lv_cont_refr_autofit+0x330>)
  41e336:	4798      	blx	r3
  41e338:	4606      	mov	r6, r0
  41e33a:	bb60      	cbnz	r0, 41e396 <lv_cont_refr_autofit+0x25a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e33c:	2212      	movs	r2, #18
  41e33e:	2100      	movs	r1, #0
  41e340:	4620      	mov	r0, r4
  41e342:	4e45      	ldr	r6, [pc, #276]	; (41e458 <lv_cont_refr_autofit+0x31c>)
  41e344:	47b0      	blx	r6
            tight_area.x1 -= lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
  41e346:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  41e34a:	1a18      	subs	r0, r3, r0
  41e34c:	f8ad 0008 	strh.w	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41e350:	2213      	movs	r2, #19
  41e352:	2100      	movs	r1, #0
  41e354:	4620      	mov	r0, r4
  41e356:	47b0      	blx	r6
            tight_area.x2 += lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
  41e358:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  41e35c:	4418      	add	r0, r3
  41e35e:	f8ad 000c 	strh.w	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e362:	2210      	movs	r2, #16
  41e364:	2100      	movs	r1, #0
  41e366:	4620      	mov	r0, r4
  41e368:	47b0      	blx	r6
            tight_area.y1 -= lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
  41e36a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  41e36e:	1a18      	subs	r0, r3, r0
  41e370:	f8ad 000a 	strh.w	r0, [sp, #10]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41e374:	2211      	movs	r2, #17
  41e376:	2100      	movs	r1, #0
  41e378:	4620      	mov	r0, r4
  41e37a:	47b0      	blx	r6
            tight_area.y2 += lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
  41e37c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  41e380:	4418      	add	r0, r3
  41e382:	f8ad 000e 	strh.w	r0, [sp, #14]
  41e386:	e748      	b.n	41e21a <lv_cont_refr_autofit+0xde>
            _LV_LL_READ(cont->child_ll, child_i) {
  41e388:	4631      	mov	r1, r6
  41e38a:	9800      	ldr	r0, [sp, #0]
  41e38c:	4b38      	ldr	r3, [pc, #224]	; (41e470 <lv_cont_refr_autofit+0x334>)
  41e38e:	4798      	blx	r3
  41e390:	4606      	mov	r6, r0
  41e392:	2800      	cmp	r0, #0
  41e394:	d0d2      	beq.n	41e33c <lv_cont_refr_autofit+0x200>
                if(lv_obj_get_hidden(child_i) != false) continue;
  41e396:	4630      	mov	r0, r6
  41e398:	4b36      	ldr	r3, [pc, #216]	; (41e474 <lv_cont_refr_autofit+0x338>)
  41e39a:	4798      	blx	r3
  41e39c:	2800      	cmp	r0, #0
  41e39e:	d1f3      	bne.n	41e388 <lv_cont_refr_autofit+0x24c>
                if(ext->fit_left != LV_FIT_PARENT) {
  41e3a0:	782b      	ldrb	r3, [r5, #0]
  41e3a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
  41e3a6:	2b20      	cmp	r3, #32
  41e3a8:	d00e      	beq.n	41e3c8 <lv_cont_refr_autofit+0x28c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41e3aa:	2217      	movs	r2, #23
  41e3ac:	2100      	movs	r1, #0
  41e3ae:	4630      	mov	r0, r6
  41e3b0:	4b29      	ldr	r3, [pc, #164]	; (41e458 <lv_cont_refr_autofit+0x31c>)
  41e3b2:	4798      	blx	r3
                    tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1 - mleft);
  41e3b4:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  41e3b8:	1a18      	subs	r0, r3, r0
  41e3ba:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  41e3be:	4298      	cmp	r0, r3
  41e3c0:	bfa8      	it	ge
  41e3c2:	4618      	movge	r0, r3
  41e3c4:	f8ad 0008 	strh.w	r0, [sp, #8]
                if(ext->fit_right != LV_FIT_PARENT) {
  41e3c8:	782b      	ldrb	r3, [r5, #0]
  41e3ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  41e3ce:	2b80      	cmp	r3, #128	; 0x80
  41e3d0:	d00e      	beq.n	41e3f0 <lv_cont_refr_autofit+0x2b4>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  41e3d2:	2218      	movs	r2, #24
  41e3d4:	2100      	movs	r1, #0
  41e3d6:	4630      	mov	r0, r6
  41e3d8:	4b1f      	ldr	r3, [pc, #124]	; (41e458 <lv_cont_refr_autofit+0x31c>)
  41e3da:	4798      	blx	r3
                    tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2 + mright);
  41e3dc:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  41e3e0:	4418      	add	r0, r3
  41e3e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
  41e3e6:	4298      	cmp	r0, r3
  41e3e8:	bfb8      	it	lt
  41e3ea:	4618      	movlt	r0, r3
  41e3ec:	f8ad 000c 	strh.w	r0, [sp, #12]
                if(ext->fit_top != LV_FIT_PARENT) {
  41e3f0:	786b      	ldrb	r3, [r5, #1]
  41e3f2:	f003 0303 	and.w	r3, r3, #3
  41e3f6:	2b02      	cmp	r3, #2
  41e3f8:	d00e      	beq.n	41e418 <lv_cont_refr_autofit+0x2dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41e3fa:	2215      	movs	r2, #21
  41e3fc:	2100      	movs	r1, #0
  41e3fe:	4630      	mov	r0, r6
  41e400:	4b15      	ldr	r3, [pc, #84]	; (41e458 <lv_cont_refr_autofit+0x31c>)
  41e402:	4798      	blx	r3
                    tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1 - mtop);
  41e404:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  41e408:	1a18      	subs	r0, r3, r0
  41e40a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  41e40e:	4298      	cmp	r0, r3
  41e410:	bfa8      	it	ge
  41e412:	4618      	movge	r0, r3
  41e414:	f8ad 000a 	strh.w	r0, [sp, #10]
                if(ext->fit_bottom != LV_FIT_PARENT) {
  41e418:	786b      	ldrb	r3, [r5, #1]
  41e41a:	f003 030c 	and.w	r3, r3, #12
  41e41e:	2b08      	cmp	r3, #8
  41e420:	d0b2      	beq.n	41e388 <lv_cont_refr_autofit+0x24c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41e422:	2216      	movs	r2, #22
  41e424:	2100      	movs	r1, #0
  41e426:	4630      	mov	r0, r6
  41e428:	4b0b      	ldr	r3, [pc, #44]	; (41e458 <lv_cont_refr_autofit+0x31c>)
  41e42a:	4798      	blx	r3
                    tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
  41e42c:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
  41e430:	4418      	add	r0, r3
  41e432:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
  41e436:	4298      	cmp	r0, r3
  41e438:	bfb8      	it	lt
  41e43a:	4618      	movlt	r0, r3
  41e43c:	f8ad 000e 	strh.w	r0, [sp, #14]
  41e440:	e7a2      	b.n	41e388 <lv_cont_refr_autofit+0x24c>
                new_area.x1 = parent_area.x1;
  41e442:	f8ad 8020 	strh.w	r8, [sp, #32]
                break;
  41e446:	e700      	b.n	41e24a <lv_cont_refr_autofit+0x10e>
  41e448:	00406345 	.word	0x00406345
  41e44c:	00407281 	.word	0x00407281
  41e450:	2041479c 	.word	0x2041479c
  41e454:	00404fa5 	.word	0x00404fa5
  41e458:	004069b5 	.word	0x004069b5
  41e45c:	004050d1 	.word	0x004050d1
  41e460:	00415681 	.word	0x00415681
  41e464:	00405565 	.word	0x00405565
  41e468:	004051ed 	.word	0x004051ed
  41e46c:	004153ed 	.word	0x004153ed
  41e470:	00415401 	.word	0x00415401
  41e474:	004053d5 	.word	0x004053d5
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
  41e478:	9b01      	ldr	r3, [sp, #4]
  41e47a:	b123      	cbz	r3, 41e486 <lv_cont_refr_autofit+0x34a>
  41e47c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  41e480:	4598      	cmp	r8, r3
  41e482:	bfa8      	it	ge
  41e484:	4698      	movge	r8, r3
  41e486:	f8ad 8020 	strh.w	r8, [sp, #32]
                break;
  41e48a:	e6de      	b.n	41e24a <lv_cont_refr_autofit+0x10e>
                new_area.x2 = parent_area.x2;
  41e48c:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
                break;
  41e490:	e6e8      	b.n	41e264 <lv_cont_refr_autofit+0x128>
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
  41e492:	9b01      	ldr	r3, [sp, #4]
  41e494:	b123      	cbz	r3, 41e4a0 <lv_cont_refr_autofit+0x364>
  41e496:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
  41e49a:	459a      	cmp	sl, r3
  41e49c:	bfb8      	it	lt
  41e49e:	469a      	movlt	sl, r3
  41e4a0:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
                break;
  41e4a4:	e6de      	b.n	41e264 <lv_cont_refr_autofit+0x128>
                new_area.y1 = parent_area.y1;
  41e4a6:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
                break;
  41e4aa:	e6e9      	b.n	41e280 <lv_cont_refr_autofit+0x144>
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
  41e4ac:	9b01      	ldr	r3, [sp, #4]
  41e4ae:	b123      	cbz	r3, 41e4ba <lv_cont_refr_autofit+0x37e>
  41e4b0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  41e4b4:	4599      	cmp	r9, r3
  41e4b6:	bfa8      	it	ge
  41e4b8:	4699      	movge	r9, r3
  41e4ba:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
                break;
  41e4be:	e6df      	b.n	41e280 <lv_cont_refr_autofit+0x144>
                new_area.y2 = parent_area.y2;
  41e4c0:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
                break;
  41e4c4:	e6ea      	b.n	41e29c <lv_cont_refr_autofit+0x160>
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
  41e4c6:	9b01      	ldr	r3, [sp, #4]
  41e4c8:	b123      	cbz	r3, 41e4d4 <lv_cont_refr_autofit+0x398>
  41e4ca:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
  41e4ce:	459b      	cmp	fp, r3
  41e4d0:	bfb8      	it	lt
  41e4d2:	469b      	movlt	fp, r3
  41e4d4:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
                break;
  41e4d8:	e6e0      	b.n	41e29c <lv_cont_refr_autofit+0x160>
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  41e4da:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
  41e4de:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
  41e4e2:	429a      	cmp	r2, r3
  41e4e4:	f47f aee1 	bne.w	41e2aa <lv_cont_refr_autofit+0x16e>
  41e4e8:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  41e4ec:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  41e4f0:	429a      	cmp	r2, r3
  41e4f2:	f47f aeda 	bne.w	41e2aa <lv_cont_refr_autofit+0x16e>
  41e4f6:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
  41e4fa:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  41e4fe:	429a      	cmp	r2, r3
  41e500:	f47f aed3 	bne.w	41e2aa <lv_cont_refr_autofit+0x16e>
  41e504:	e637      	b.n	41e176 <lv_cont_refr_autofit+0x3a>
                lv_obj_realign(cont);
  41e506:	4620      	mov	r0, r4
  41e508:	4b01      	ldr	r3, [pc, #4]	; (41e510 <lv_cont_refr_autofit+0x3d4>)
  41e50a:	4798      	blx	r3
  41e50c:	e6ef      	b.n	41e2ee <lv_cont_refr_autofit+0x1b2>
  41e50e:	bf00      	nop
  41e510:	00405c0d 	.word	0x00405c0d

0041e514 <lv_cont_create>:
{
  41e514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e516:	4607      	mov	r7, r0
  41e518:	460e      	mov	r6, r1
    lv_obj_t * cont = lv_obj_create(par, copy);
  41e51a:	4b3b      	ldr	r3, [pc, #236]	; (41e608 <lv_cont_create+0xf4>)
  41e51c:	4798      	blx	r3
  41e51e:	4605      	mov	r5, r0
    LV_ASSERT_MEM(cont);
  41e520:	4b3a      	ldr	r3, [pc, #232]	; (41e60c <lv_cont_create+0xf8>)
  41e522:	4798      	blx	r3
  41e524:	b1c8      	cbz	r0, 41e55a <lv_cont_create+0x46>
    if(cont == NULL) return NULL;
  41e526:	2d00      	cmp	r5, #0
  41e528:	d065      	beq.n	41e5f6 <lv_cont_create+0xe2>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
  41e52a:	4b39      	ldr	r3, [pc, #228]	; (41e610 <lv_cont_create+0xfc>)
  41e52c:	681b      	ldr	r3, [r3, #0]
  41e52e:	b1d3      	cbz	r3, 41e566 <lv_cont_create+0x52>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
  41e530:	4b38      	ldr	r3, [pc, #224]	; (41e614 <lv_cont_create+0x100>)
  41e532:	681b      	ldr	r3, [r3, #0]
  41e534:	b1eb      	cbz	r3, 41e572 <lv_cont_create+0x5e>
    lv_obj_allocate_ext_attr(cont, sizeof(lv_cont_ext_t));
  41e536:	2102      	movs	r1, #2
  41e538:	4628      	mov	r0, r5
  41e53a:	4b37      	ldr	r3, [pc, #220]	; (41e618 <lv_cont_create+0x104>)
  41e53c:	4798      	blx	r3
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41e53e:	4628      	mov	r0, r5
  41e540:	4b36      	ldr	r3, [pc, #216]	; (41e61c <lv_cont_create+0x108>)
  41e542:	4798      	blx	r3
    if(ext == NULL) {
  41e544:	4604      	mov	r4, r0
  41e546:	b1d0      	cbz	r0, 41e57e <lv_cont_create+0x6a>
    LV_ASSERT_MEM(ext);
  41e548:	4b30      	ldr	r3, [pc, #192]	; (41e60c <lv_cont_create+0xf8>)
  41e54a:	4798      	blx	r3
  41e54c:	b9e0      	cbnz	r0, 41e588 <lv_cont_create+0x74>
  41e54e:	4622      	mov	r2, r4
  41e550:	2300      	movs	r3, #0
  41e552:	4833      	ldr	r0, [pc, #204]	; (41e620 <lv_cont_create+0x10c>)
  41e554:	4933      	ldr	r1, [pc, #204]	; (41e624 <lv_cont_create+0x110>)
  41e556:	4788      	blx	r1
  41e558:	e7fe      	b.n	41e558 <lv_cont_create+0x44>
    LV_ASSERT_MEM(cont);
  41e55a:	462a      	mov	r2, r5
  41e55c:	2300      	movs	r3, #0
  41e55e:	4830      	ldr	r0, [pc, #192]	; (41e620 <lv_cont_create+0x10c>)
  41e560:	4930      	ldr	r1, [pc, #192]	; (41e624 <lv_cont_create+0x110>)
  41e562:	4788      	blx	r1
  41e564:	e7fe      	b.n	41e564 <lv_cont_create+0x50>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
  41e566:	4628      	mov	r0, r5
  41e568:	4b2f      	ldr	r3, [pc, #188]	; (41e628 <lv_cont_create+0x114>)
  41e56a:	4798      	blx	r3
  41e56c:	4b28      	ldr	r3, [pc, #160]	; (41e610 <lv_cont_create+0xfc>)
  41e56e:	6018      	str	r0, [r3, #0]
  41e570:	e7de      	b.n	41e530 <lv_cont_create+0x1c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
  41e572:	4628      	mov	r0, r5
  41e574:	4b2d      	ldr	r3, [pc, #180]	; (41e62c <lv_cont_create+0x118>)
  41e576:	4798      	blx	r3
  41e578:	4b26      	ldr	r3, [pc, #152]	; (41e614 <lv_cont_create+0x100>)
  41e57a:	6018      	str	r0, [r3, #0]
  41e57c:	e7db      	b.n	41e536 <lv_cont_create+0x22>
        lv_obj_del(cont);
  41e57e:	4628      	mov	r0, r5
  41e580:	4b2b      	ldr	r3, [pc, #172]	; (41e630 <lv_cont_create+0x11c>)
  41e582:	4798      	blx	r3
        return NULL;
  41e584:	2500      	movs	r5, #0
  41e586:	e036      	b.n	41e5f6 <lv_cont_create+0xe2>
    ext->fit_left   = LV_FIT_NONE;
  41e588:	7823      	ldrb	r3, [r4, #0]
    ext->fit_top    = LV_FIT_NONE;
  41e58a:	7862      	ldrb	r2, [r4, #1]
    ext->fit_bottom = LV_FIT_NONE;
  41e58c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  41e590:	f36f 0283 	bfc	r2, #2, #2
  41e594:	7062      	strb	r2, [r4, #1]
    ext->layout     = LV_LAYOUT_OFF;
  41e596:	f003 030f 	and.w	r3, r3, #15
  41e59a:	f36f 0303 	bfc	r3, #0, #4
  41e59e:	7023      	strb	r3, [r4, #0]
    lv_obj_set_signal_cb(cont, lv_cont_signal);
  41e5a0:	4924      	ldr	r1, [pc, #144]	; (41e634 <lv_cont_create+0x120>)
  41e5a2:	4628      	mov	r0, r5
  41e5a4:	4b24      	ldr	r3, [pc, #144]	; (41e638 <lv_cont_create+0x124>)
  41e5a6:	4798      	blx	r3
    if(copy == NULL) {
  41e5a8:	b33e      	cbz	r6, 41e5fa <lv_cont_create+0xe6>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41e5aa:	4630      	mov	r0, r6
  41e5ac:	4b1b      	ldr	r3, [pc, #108]	; (41e61c <lv_cont_create+0x108>)
  41e5ae:	4798      	blx	r3
        ext->fit_left            = copy_ext->fit_left;
  41e5b0:	7803      	ldrb	r3, [r0, #0]
  41e5b2:	f3c3 1301 	ubfx	r3, r3, #4, #2
  41e5b6:	7822      	ldrb	r2, [r4, #0]
  41e5b8:	f363 1205 	bfi	r2, r3, #4, #2
  41e5bc:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
  41e5be:	7803      	ldrb	r3, [r0, #0]
  41e5c0:	099b      	lsrs	r3, r3, #6
  41e5c2:	b2d2      	uxtb	r2, r2
  41e5c4:	f363 1287 	bfi	r2, r3, #6, #2
  41e5c8:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
  41e5ca:	7842      	ldrb	r2, [r0, #1]
  41e5cc:	7863      	ldrb	r3, [r4, #1]
  41e5ce:	f362 0301 	bfi	r3, r2, #0, #2
  41e5d2:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
  41e5d4:	7843      	ldrb	r3, [r0, #1]
  41e5d6:	f3c3 0381 	ubfx	r3, r3, #2, #2
  41e5da:	7862      	ldrb	r2, [r4, #1]
  41e5dc:	f363 0283 	bfi	r2, r3, #2, #2
  41e5e0:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
  41e5e2:	7802      	ldrb	r2, [r0, #0]
  41e5e4:	7823      	ldrb	r3, [r4, #0]
  41e5e6:	f362 0303 	bfi	r3, r2, #0, #4
  41e5ea:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41e5ec:	22ff      	movs	r2, #255	; 0xff
  41e5ee:	4611      	mov	r1, r2
  41e5f0:	4628      	mov	r0, r5
  41e5f2:	4b12      	ldr	r3, [pc, #72]	; (41e63c <lv_cont_create+0x128>)
  41e5f4:	4798      	blx	r3
}
  41e5f6:	4628      	mov	r0, r5
  41e5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(par != NULL) {
  41e5fa:	2f00      	cmp	r7, #0
  41e5fc:	d0fb      	beq.n	41e5f6 <lv_cont_create+0xe2>
            lv_theme_apply(cont, LV_THEME_CONT);
  41e5fe:	210b      	movs	r1, #11
  41e600:	4628      	mov	r0, r5
  41e602:	4b0f      	ldr	r3, [pc, #60]	; (41e640 <lv_cont_create+0x12c>)
  41e604:	4798      	blx	r3
  41e606:	e7f6      	b.n	41e5f6 <lv_cont_create+0xe2>
  41e608:	00405d95 	.word	0x00405d95
  41e60c:	004150ef 	.word	0x004150ef
  41e610:	20414798 	.word	0x20414798
  41e614:	20414794 	.word	0x20414794
  41e618:	00404f39 	.word	0x00404f39
  41e61c:	00407281 	.word	0x00407281
  41e620:	00425a60 	.word	0x00425a60
  41e624:	004150f9 	.word	0x004150f9
  41e628:	00407231 	.word	0x00407231
  41e62c:	00407259 	.word	0x00407259
  41e630:	004073fd 	.word	0x004073fd
  41e634:	0041ef31 	.word	0x0041ef31
  41e638:	00404ed5 	.word	0x00404ed5
  41e63c:	00406d55 	.word	0x00406d55
  41e640:	00417431 	.word	0x00417431

0041e644 <lv_cont_set_layout>:
{
  41e644:	b538      	push	{r3, r4, r5, lr}
  41e646:	4604      	mov	r4, r0
  41e648:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  41e64a:	4b0d      	ldr	r3, [pc, #52]	; (41e680 <lv_cont_set_layout+0x3c>)
  41e64c:	4798      	blx	r3
  41e64e:	b928      	cbnz	r0, 41e65c <lv_cont_set_layout+0x18>
  41e650:	4622      	mov	r2, r4
  41e652:	2300      	movs	r3, #0
  41e654:	480b      	ldr	r0, [pc, #44]	; (41e684 <lv_cont_set_layout+0x40>)
  41e656:	490c      	ldr	r1, [pc, #48]	; (41e688 <lv_cont_set_layout+0x44>)
  41e658:	4788      	blx	r1
  41e65a:	e7fe      	b.n	41e65a <lv_cont_set_layout+0x16>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41e65c:	4620      	mov	r0, r4
  41e65e:	4b0b      	ldr	r3, [pc, #44]	; (41e68c <lv_cont_set_layout+0x48>)
  41e660:	4798      	blx	r3
    if(ext->layout == layout) return;
  41e662:	7803      	ldrb	r3, [r0, #0]
  41e664:	f003 030f 	and.w	r3, r3, #15
  41e668:	42ab      	cmp	r3, r5
  41e66a:	d008      	beq.n	41e67e <lv_cont_set_layout+0x3a>
    ext->layout = layout;
  41e66c:	7803      	ldrb	r3, [r0, #0]
  41e66e:	f365 0303 	bfi	r3, r5, #0, #4
  41e672:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
  41e674:	69e3      	ldr	r3, [r4, #28]
  41e676:	2200      	movs	r2, #0
  41e678:	2101      	movs	r1, #1
  41e67a:	4620      	mov	r0, r4
  41e67c:	4798      	blx	r3
  41e67e:	bd38      	pop	{r3, r4, r5, pc}
  41e680:	004150ef 	.word	0x004150ef
  41e684:	00425a74 	.word	0x00425a74
  41e688:	004150f9 	.word	0x004150f9
  41e68c:	00407281 	.word	0x00407281

0041e690 <lv_cont_set_fit4>:
{
  41e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41e694:	4604      	mov	r4, r0
  41e696:	4688      	mov	r8, r1
  41e698:	4617      	mov	r7, r2
  41e69a:	461e      	mov	r6, r3
  41e69c:	f89d 5018 	ldrb.w	r5, [sp, #24]
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  41e6a0:	4b1a      	ldr	r3, [pc, #104]	; (41e70c <lv_cont_set_fit4+0x7c>)
  41e6a2:	4798      	blx	r3
  41e6a4:	b928      	cbnz	r0, 41e6b2 <lv_cont_set_fit4+0x22>
  41e6a6:	4622      	mov	r2, r4
  41e6a8:	2300      	movs	r3, #0
  41e6aa:	4819      	ldr	r0, [pc, #100]	; (41e710 <lv_cont_set_fit4+0x80>)
  41e6ac:	4919      	ldr	r1, [pc, #100]	; (41e714 <lv_cont_set_fit4+0x84>)
  41e6ae:	4788      	blx	r1
  41e6b0:	e7fe      	b.n	41e6b0 <lv_cont_set_fit4+0x20>
    lv_obj_invalidate(cont);
  41e6b2:	4620      	mov	r0, r4
  41e6b4:	4b18      	ldr	r3, [pc, #96]	; (41e718 <lv_cont_set_fit4+0x88>)
  41e6b6:	4798      	blx	r3
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41e6b8:	4620      	mov	r0, r4
  41e6ba:	4b18      	ldr	r3, [pc, #96]	; (41e71c <lv_cont_set_fit4+0x8c>)
  41e6bc:	4798      	blx	r3
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
  41e6be:	7803      	ldrb	r3, [r0, #0]
  41e6c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
  41e6c4:	4543      	cmp	r3, r8
  41e6c6:	d012      	beq.n	41e6ee <lv_cont_set_fit4+0x5e>
    ext->fit_left   = left;
  41e6c8:	7803      	ldrb	r3, [r0, #0]
  41e6ca:	f368 1305 	bfi	r3, r8, #4, #2
    ext->fit_right  = right;
  41e6ce:	f367 1387 	bfi	r3, r7, #6, #2
  41e6d2:	7003      	strb	r3, [r0, #0]
    ext->fit_top    = top;
  41e6d4:	7843      	ldrb	r3, [r0, #1]
  41e6d6:	f366 0301 	bfi	r3, r6, #0, #2
    ext->fit_bottom = bottom;
  41e6da:	f365 0383 	bfi	r3, r5, #2, #2
  41e6de:	7043      	strb	r3, [r0, #1]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
  41e6e0:	69e3      	ldr	r3, [r4, #28]
  41e6e2:	2200      	movs	r2, #0
  41e6e4:	2101      	movs	r1, #1
  41e6e6:	4620      	mov	r0, r4
  41e6e8:	4798      	blx	r3
  41e6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
  41e6ee:	7803      	ldrb	r3, [r0, #0]
  41e6f0:	ebb7 1f93 	cmp.w	r7, r3, lsr #6
  41e6f4:	d1e8      	bne.n	41e6c8 <lv_cont_set_fit4+0x38>
  41e6f6:	7843      	ldrb	r3, [r0, #1]
  41e6f8:	f003 0303 	and.w	r3, r3, #3
  41e6fc:	42b3      	cmp	r3, r6
  41e6fe:	d1e3      	bne.n	41e6c8 <lv_cont_set_fit4+0x38>
  41e700:	7843      	ldrb	r3, [r0, #1]
  41e702:	f3c3 0381 	ubfx	r3, r3, #2, #2
  41e706:	42ab      	cmp	r3, r5
  41e708:	d1de      	bne.n	41e6c8 <lv_cont_set_fit4+0x38>
  41e70a:	e7ee      	b.n	41e6ea <lv_cont_set_fit4+0x5a>
  41e70c:	004150ef 	.word	0x004150ef
  41e710:	00425a74 	.word	0x00425a74
  41e714:	004150f9 	.word	0x004150f9
  41e718:	00405565 	.word	0x00405565
  41e71c:	00407281 	.word	0x00407281

0041e720 <lv_cont_get_layout>:
{
  41e720:	b510      	push	{r4, lr}
  41e722:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  41e724:	4b07      	ldr	r3, [pc, #28]	; (41e744 <lv_cont_get_layout+0x24>)
  41e726:	4798      	blx	r3
  41e728:	b928      	cbnz	r0, 41e736 <lv_cont_get_layout+0x16>
  41e72a:	4622      	mov	r2, r4
  41e72c:	2300      	movs	r3, #0
  41e72e:	4806      	ldr	r0, [pc, #24]	; (41e748 <lv_cont_get_layout+0x28>)
  41e730:	4906      	ldr	r1, [pc, #24]	; (41e74c <lv_cont_get_layout+0x2c>)
  41e732:	4788      	blx	r1
  41e734:	e7fe      	b.n	41e734 <lv_cont_get_layout+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41e736:	4620      	mov	r0, r4
  41e738:	4b05      	ldr	r3, [pc, #20]	; (41e750 <lv_cont_get_layout+0x30>)
  41e73a:	4798      	blx	r3
    return ext->layout;
  41e73c:	7800      	ldrb	r0, [r0, #0]
}
  41e73e:	f000 000f 	and.w	r0, r0, #15
  41e742:	bd10      	pop	{r4, pc}
  41e744:	004150ef 	.word	0x004150ef
  41e748:	00425a74 	.word	0x00425a74
  41e74c:	004150f9 	.word	0x004150f9
  41e750:	00407281 	.word	0x00407281

0041e754 <lv_cont_refr_layout>:
{
  41e754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e758:	b091      	sub	sp, #68	; 0x44
  41e75a:	9005      	str	r0, [sp, #20]
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
  41e75c:	2101      	movs	r1, #1
  41e75e:	4ba6      	ldr	r3, [pc, #664]	; (41e9f8 <lv_cont_refr_layout+0x2a4>)
  41e760:	4798      	blx	r3
  41e762:	b110      	cbz	r0, 41e76a <lv_cont_refr_layout+0x16>
}
  41e764:	b011      	add	sp, #68	; 0x44
  41e766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_layout_t type = lv_cont_get_layout(cont);
  41e76a:	9d05      	ldr	r5, [sp, #20]
  41e76c:	4628      	mov	r0, r5
  41e76e:	4ba3      	ldr	r3, [pc, #652]	; (41e9fc <lv_cont_refr_layout+0x2a8>)
  41e770:	4798      	blx	r3
  41e772:	4604      	mov	r4, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
  41e774:	2100      	movs	r1, #0
  41e776:	4628      	mov	r0, r5
  41e778:	4ba1      	ldr	r3, [pc, #644]	; (41ea00 <lv_cont_refr_layout+0x2ac>)
  41e77a:	4798      	blx	r3
    if(type == LV_LAYOUT_OFF) return;
  41e77c:	2c00      	cmp	r4, #0
  41e77e:	d0f1      	beq.n	41e764 <lv_cont_refr_layout+0x10>
  41e780:	2800      	cmp	r0, #0
  41e782:	d0ef      	beq.n	41e764 <lv_cont_refr_layout+0x10>
    if(type == LV_LAYOUT_CENTER) {
  41e784:	2c01      	cmp	r4, #1
  41e786:	d042      	beq.n	41e80e <lv_cont_refr_layout+0xba>
    else if(type == LV_LAYOUT_COLUMN_LEFT || type == LV_LAYOUT_COLUMN_MID || type == LV_LAYOUT_COLUMN_RIGHT) {
  41e788:	1ea3      	subs	r3, r4, #2
  41e78a:	b2db      	uxtb	r3, r3
  41e78c:	2b02      	cmp	r3, #2
  41e78e:	f240 80b5 	bls.w	41e8fc <lv_cont_refr_layout+0x1a8>
    else if(type == LV_LAYOUT_ROW_TOP || type == LV_LAYOUT_ROW_MID || type == LV_LAYOUT_ROW_BOTTOM) {
  41e792:	1f63      	subs	r3, r4, #5
  41e794:	b2db      	uxtb	r3, r3
  41e796:	2b02      	cmp	r3, #2
  41e798:	f240 814a 	bls.w	41ea30 <lv_cont_refr_layout+0x2dc>
    else if(type == LV_LAYOUT_PRETTY_MID || type == LV_LAYOUT_PRETTY_TOP || type == LV_LAYOUT_PRETTY_BOTTOM) {
  41e79c:	f1a4 0308 	sub.w	r3, r4, #8
  41e7a0:	b2db      	uxtb	r3, r3
  41e7a2:	2b02      	cmp	r3, #2
  41e7a4:	f240 81cb 	bls.w	41eb3e <lv_cont_refr_layout+0x3ea>
    else if(type == LV_LAYOUT_GRID) {
  41e7a8:	2c0b      	cmp	r4, #11
  41e7aa:	d1db      	bne.n	41e764 <lv_cont_refr_layout+0x10>
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
  41e7ac:	9d05      	ldr	r5, [sp, #20]
  41e7ae:	4628      	mov	r0, r5
  41e7b0:	4b94      	ldr	r3, [pc, #592]	; (41ea04 <lv_cont_refr_layout+0x2b0>)
  41e7b2:	4798      	blx	r3
  41e7b4:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41e7b6:	2214      	movs	r2, #20
  41e7b8:	2100      	movs	r1, #0
  41e7ba:	4628      	mov	r0, r5
  41e7bc:	4c92      	ldr	r4, [pc, #584]	; (41ea08 <lv_cont_refr_layout+0x2b4>)
  41e7be:	47a0      	blx	r4
  41e7c0:	4681      	mov	r9, r0
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
  41e7c2:	2100      	movs	r1, #0
  41e7c4:	4628      	mov	r0, r5
  41e7c6:	4b8e      	ldr	r3, [pc, #568]	; (41ea00 <lv_cont_refr_layout+0x2ac>)
  41e7c8:	4798      	blx	r3
  41e7ca:	4b90      	ldr	r3, [pc, #576]	; (41ea0c <lv_cont_refr_layout+0x2b8>)
  41e7cc:	4798      	blx	r3
  41e7ce:	fa1f f989 	uxth.w	r9, r9
  41e7d2:	4448      	add	r0, r9
  41e7d4:	fa1f fb80 	uxth.w	fp, r0
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41e7d8:	2101      	movs	r1, #1
  41e7da:	4628      	mov	r0, r5
  41e7dc:	4b8c      	ldr	r3, [pc, #560]	; (41ea10 <lv_cont_refr_layout+0x2bc>)
  41e7de:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e7e0:	2212      	movs	r2, #18
  41e7e2:	2100      	movs	r1, #0
  41e7e4:	4628      	mov	r0, r5
  41e7e6:	47a0      	blx	r4
  41e7e8:	4607      	mov	r7, r0
  41e7ea:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e7ec:	2210      	movs	r2, #16
  41e7ee:	2100      	movs	r1, #0
  41e7f0:	4628      	mov	r0, r5
  41e7f2:	47a0      	blx	r4
  41e7f4:	9003      	str	r0, [sp, #12]
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41e7f6:	3504      	adds	r5, #4
  41e7f8:	4628      	mov	r0, r5
  41e7fa:	4b86      	ldr	r3, [pc, #536]	; (41ea14 <lv_cont_refr_layout+0x2c0>)
  41e7fc:	4798      	blx	r3
  41e7fe:	4604      	mov	r4, r0
  41e800:	2800      	cmp	r0, #0
  41e802:	f000 8340 	beq.w	41ee86 <lv_cont_refr_layout+0x732>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41e806:	4e84      	ldr	r6, [pc, #528]	; (41ea18 <lv_cont_refr_layout+0x2c4>)
  41e808:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 41e9f8 <lv_cont_refr_layout+0x2a4>
  41e80c:	e322      	b.n	41ee54 <lv_cont_refr_layout+0x700>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41e80e:	2214      	movs	r2, #20
  41e810:	2100      	movs	r1, #0
  41e812:	9c05      	ldr	r4, [sp, #20]
  41e814:	4620      	mov	r0, r4
  41e816:	4b7c      	ldr	r3, [pc, #496]	; (41ea08 <lv_cont_refr_layout+0x2b4>)
  41e818:	4798      	blx	r3
  41e81a:	4681      	mov	r9, r0
    _LV_LL_READ(cont->child_ll, child) {
  41e81c:	1d25      	adds	r5, r4, #4
  41e81e:	4628      	mov	r0, r5
  41e820:	4b7e      	ldr	r3, [pc, #504]	; (41ea1c <lv_cont_refr_layout+0x2c8>)
  41e822:	4798      	blx	r3
  41e824:	4604      	mov	r4, r0
  41e826:	2800      	cmp	r0, #0
  41e828:	d09c      	beq.n	41e764 <lv_cont_refr_layout+0x10>
  41e82a:	f04f 0800 	mov.w	r8, #0
  41e82e:	4646      	mov	r6, r8
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41e830:	4f79      	ldr	r7, [pc, #484]	; (41ea18 <lv_cont_refr_layout+0x2c4>)
  41e832:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 41e9f8 <lv_cont_refr_layout+0x2a4>
        h_tot += lv_obj_get_height(child) + inner;
  41e836:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 41ea0c <lv_cont_refr_layout+0x2b8>
  41e83a:	e005      	b.n	41e848 <lv_cont_refr_layout+0xf4>
    _LV_LL_READ(cont->child_ll, child) {
  41e83c:	4621      	mov	r1, r4
  41e83e:	4628      	mov	r0, r5
  41e840:	4b77      	ldr	r3, [pc, #476]	; (41ea20 <lv_cont_refr_layout+0x2cc>)
  41e842:	4798      	blx	r3
  41e844:	4604      	mov	r4, r0
  41e846:	b180      	cbz	r0, 41e86a <lv_cont_refr_layout+0x116>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41e848:	4620      	mov	r0, r4
  41e84a:	47b8      	blx	r7
  41e84c:	2800      	cmp	r0, #0
  41e84e:	d1f5      	bne.n	41e83c <lv_cont_refr_layout+0xe8>
  41e850:	2104      	movs	r1, #4
  41e852:	4620      	mov	r0, r4
  41e854:	47d0      	blx	sl
  41e856:	2800      	cmp	r0, #0
  41e858:	d1f0      	bne.n	41e83c <lv_cont_refr_layout+0xe8>
        h_tot += lv_obj_get_height(child) + inner;
  41e85a:	4620      	mov	r0, r4
  41e85c:	47d8      	blx	fp
  41e85e:	4448      	add	r0, r9
  41e860:	4406      	add	r6, r0
  41e862:	b236      	sxth	r6, r6
        obj_num++;
  41e864:	f108 0801 	add.w	r8, r8, #1
  41e868:	e7e8      	b.n	41e83c <lv_cont_refr_layout+0xe8>
    if(obj_num == 0) return;
  41e86a:	f1b8 0f00 	cmp.w	r8, #0
  41e86e:	f43f af79 	beq.w	41e764 <lv_cont_refr_layout+0x10>
    h_tot -= inner;
  41e872:	eba6 0309 	sub.w	r3, r6, r9
  41e876:	b29c      	uxth	r4, r3
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41e878:	2101      	movs	r1, #1
  41e87a:	9805      	ldr	r0, [sp, #20]
  41e87c:	4b64      	ldr	r3, [pc, #400]	; (41ea10 <lv_cont_refr_layout+0x2bc>)
  41e87e:	4798      	blx	r3
    lv_coord_t last_cord = -(h_tot / 2);
  41e880:	b223      	sxth	r3, r4
  41e882:	2b00      	cmp	r3, #0
  41e884:	bfb8      	it	lt
  41e886:	3301      	addlt	r3, #1
  41e888:	105e      	asrs	r6, r3, #1
  41e88a:	4276      	negs	r6, r6
  41e88c:	b236      	sxth	r6, r6
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41e88e:	4628      	mov	r0, r5
  41e890:	4b60      	ldr	r3, [pc, #384]	; (41ea14 <lv_cont_refr_layout+0x2c0>)
  41e892:	4798      	blx	r3
  41e894:	4604      	mov	r4, r0
  41e896:	b360      	cbz	r0, 41e8f2 <lv_cont_refr_layout+0x19e>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41e898:	4f5f      	ldr	r7, [pc, #380]	; (41ea18 <lv_cont_refr_layout+0x2c4>)
  41e89a:	f8df 815c 	ldr.w	r8, [pc, #348]	; 41e9f8 <lv_cont_refr_layout+0x2a4>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
  41e89e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 41ea0c <lv_cont_refr_layout+0x2b8>
  41e8a2:	e005      	b.n	41e8b0 <lv_cont_refr_layout+0x15c>
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41e8a4:	4621      	mov	r1, r4
  41e8a6:	4628      	mov	r0, r5
  41e8a8:	4b5e      	ldr	r3, [pc, #376]	; (41ea24 <lv_cont_refr_layout+0x2d0>)
  41e8aa:	4798      	blx	r3
  41e8ac:	4604      	mov	r4, r0
  41e8ae:	b300      	cbz	r0, 41e8f2 <lv_cont_refr_layout+0x19e>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41e8b0:	4620      	mov	r0, r4
  41e8b2:	47b8      	blx	r7
  41e8b4:	2800      	cmp	r0, #0
  41e8b6:	d1f5      	bne.n	41e8a4 <lv_cont_refr_layout+0x150>
  41e8b8:	2104      	movs	r1, #4
  41e8ba:	4620      	mov	r0, r4
  41e8bc:	47c0      	blx	r8
  41e8be:	2800      	cmp	r0, #0
  41e8c0:	d1f0      	bne.n	41e8a4 <lv_cont_refr_layout+0x150>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
  41e8c2:	4620      	mov	r0, r4
  41e8c4:	47d0      	blx	sl
  41e8c6:	b2b6      	uxth	r6, r6
  41e8c8:	4603      	mov	r3, r0
  41e8ca:	2800      	cmp	r0, #0
  41e8cc:	bfb8      	it	lt
  41e8ce:	1c43      	addlt	r3, r0, #1
  41e8d0:	eb06 0363 	add.w	r3, r6, r3, asr #1
  41e8d4:	b21b      	sxth	r3, r3
  41e8d6:	9300      	str	r3, [sp, #0]
  41e8d8:	2300      	movs	r3, #0
  41e8da:	461a      	mov	r2, r3
  41e8dc:	9905      	ldr	r1, [sp, #20]
  41e8de:	4620      	mov	r0, r4
  41e8e0:	f8df b148 	ldr.w	fp, [pc, #328]	; 41ea2c <lv_cont_refr_layout+0x2d8>
  41e8e4:	47d8      	blx	fp
        last_cord += lv_obj_get_height(child) + inner;
  41e8e6:	4620      	mov	r0, r4
  41e8e8:	47d0      	blx	sl
  41e8ea:	4448      	add	r0, r9
  41e8ec:	4406      	add	r6, r0
  41e8ee:	b236      	sxth	r6, r6
  41e8f0:	e7d8      	b.n	41e8a4 <lv_cont_refr_layout+0x150>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41e8f2:	2101      	movs	r1, #1
  41e8f4:	9805      	ldr	r0, [sp, #20]
  41e8f6:	4b4c      	ldr	r3, [pc, #304]	; (41ea28 <lv_cont_refr_layout+0x2d4>)
  41e8f8:	4798      	blx	r3
  41e8fa:	e733      	b.n	41e764 <lv_cont_refr_layout+0x10>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e8fc:	2212      	movs	r2, #18
  41e8fe:	2100      	movs	r1, #0
  41e900:	9f05      	ldr	r7, [sp, #20]
  41e902:	4638      	mov	r0, r7
  41e904:	4c40      	ldr	r4, [pc, #256]	; (41ea08 <lv_cont_refr_layout+0x2b4>)
  41e906:	47a0      	blx	r4
  41e908:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41e90a:	2213      	movs	r2, #19
  41e90c:	2100      	movs	r1, #0
  41e90e:	4638      	mov	r0, r7
  41e910:	47a0      	blx	r4
  41e912:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e914:	2210      	movs	r2, #16
  41e916:	2100      	movs	r1, #0
  41e918:	4638      	mov	r0, r7
  41e91a:	47a0      	blx	r4
  41e91c:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41e91e:	2214      	movs	r2, #20
  41e920:	2100      	movs	r1, #0
  41e922:	4638      	mov	r0, r7
  41e924:	47a0      	blx	r4
  41e926:	9003      	str	r0, [sp, #12]
    lv_layout_t type = lv_cont_get_layout(cont);
  41e928:	4638      	mov	r0, r7
  41e92a:	4b34      	ldr	r3, [pc, #208]	; (41e9fc <lv_cont_refr_layout+0x2a8>)
  41e92c:	4798      	blx	r3
    switch(type) {
  41e92e:	2803      	cmp	r0, #3
  41e930:	d01d      	beq.n	41e96e <lv_cont_refr_layout+0x21a>
  41e932:	2804      	cmp	r0, #4
  41e934:	d020      	beq.n	41e978 <lv_cont_refr_layout+0x224>
            hpad_corr = 0;
  41e936:	2802      	cmp	r0, #2
  41e938:	4643      	mov	r3, r8
  41e93a:	bf0c      	ite	eq
  41e93c:	4643      	moveq	r3, r8
  41e93e:	2300      	movne	r3, #0
  41e940:	9306      	str	r3, [sp, #24]
  41e942:	2301      	movs	r3, #1
  41e944:	9307      	str	r3, [sp, #28]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41e946:	2101      	movs	r1, #1
  41e948:	9c05      	ldr	r4, [sp, #20]
  41e94a:	4620      	mov	r0, r4
  41e94c:	4b30      	ldr	r3, [pc, #192]	; (41ea10 <lv_cont_refr_layout+0x2bc>)
  41e94e:	4798      	blx	r3
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41e950:	f104 0b04 	add.w	fp, r4, #4
  41e954:	4658      	mov	r0, fp
  41e956:	4b2f      	ldr	r3, [pc, #188]	; (41ea14 <lv_cont_refr_layout+0x2c0>)
  41e958:	4798      	blx	r3
  41e95a:	4604      	mov	r4, r0
  41e95c:	2800      	cmp	r0, #0
  41e95e:	d046      	beq.n	41e9ee <lv_cont_refr_layout+0x29a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41e960:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 41ea18 <lv_cont_refr_layout+0x2c4>
  41e964:	f8df 9090 	ldr.w	r9, [pc, #144]	; 41e9f8 <lv_cont_refr_layout+0x2a4>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41e968:	f8df a09c 	ldr.w	sl, [pc, #156]	; 41ea08 <lv_cont_refr_layout+0x2b4>
  41e96c:	e011      	b.n	41e992 <lv_cont_refr_layout+0x23e>
            hpad_corr = 0;
  41e96e:	2300      	movs	r3, #0
  41e970:	9306      	str	r3, [sp, #24]
            align     = LV_ALIGN_IN_TOP_MID;
  41e972:	2302      	movs	r3, #2
  41e974:	9307      	str	r3, [sp, #28]
  41e976:	e7e6      	b.n	41e946 <lv_cont_refr_layout+0x1f2>
            hpad_corr = -right;
  41e978:	4276      	negs	r6, r6
  41e97a:	b233      	sxth	r3, r6
  41e97c:	9306      	str	r3, [sp, #24]
            align     = LV_ALIGN_IN_TOP_RIGHT;
  41e97e:	2303      	movs	r3, #3
  41e980:	9307      	str	r3, [sp, #28]
  41e982:	e7e0      	b.n	41e946 <lv_cont_refr_layout+0x1f2>
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41e984:	4621      	mov	r1, r4
  41e986:	4658      	mov	r0, fp
  41e988:	4b26      	ldr	r3, [pc, #152]	; (41ea24 <lv_cont_refr_layout+0x2d0>)
  41e98a:	4798      	blx	r3
  41e98c:	4604      	mov	r4, r0
  41e98e:	2800      	cmp	r0, #0
  41e990:	d02d      	beq.n	41e9ee <lv_cont_refr_layout+0x29a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41e992:	4620      	mov	r0, r4
  41e994:	47c0      	blx	r8
  41e996:	2800      	cmp	r0, #0
  41e998:	d1f4      	bne.n	41e984 <lv_cont_refr_layout+0x230>
  41e99a:	2104      	movs	r1, #4
  41e99c:	4620      	mov	r0, r4
  41e99e:	47c8      	blx	r9
  41e9a0:	2800      	cmp	r0, #0
  41e9a2:	d1ef      	bne.n	41e984 <lv_cont_refr_layout+0x230>
  41e9a4:	2215      	movs	r2, #21
  41e9a6:	2100      	movs	r1, #0
  41e9a8:	4620      	mov	r0, r4
  41e9aa:	47d0      	blx	sl
  41e9ac:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41e9ae:	2216      	movs	r2, #22
  41e9b0:	2100      	movs	r1, #0
  41e9b2:	4620      	mov	r0, r4
  41e9b4:	47d0      	blx	sl
  41e9b6:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41e9b8:	2217      	movs	r2, #23
  41e9ba:	2100      	movs	r1, #0
  41e9bc:	4620      	mov	r0, r4
  41e9be:	47d0      	blx	sl
        lv_obj_align(child, cont, align, hpad_corr + mleft, last_cord + mtop);
  41e9c0:	b2ad      	uxth	r5, r5
  41e9c2:	9b06      	ldr	r3, [sp, #24]
  41e9c4:	4403      	add	r3, r0
  41e9c6:	19aa      	adds	r2, r5, r6
  41e9c8:	b212      	sxth	r2, r2
  41e9ca:	9200      	str	r2, [sp, #0]
  41e9cc:	b21b      	sxth	r3, r3
  41e9ce:	9a07      	ldr	r2, [sp, #28]
  41e9d0:	9905      	ldr	r1, [sp, #20]
  41e9d2:	4620      	mov	r0, r4
  41e9d4:	4f15      	ldr	r7, [pc, #84]	; (41ea2c <lv_cont_refr_layout+0x2d8>)
  41e9d6:	47b8      	blx	r7
        last_cord += lv_obj_get_height(child) + inner + mtop + mbottom;
  41e9d8:	4620      	mov	r0, r4
  41e9da:	4b0c      	ldr	r3, [pc, #48]	; (41ea0c <lv_cont_refr_layout+0x2b8>)
  41e9dc:	4798      	blx	r3
  41e9de:	9b03      	ldr	r3, [sp, #12]
  41e9e0:	18c3      	adds	r3, r0, r3
  41e9e2:	4433      	add	r3, r6
  41e9e4:	9a04      	ldr	r2, [sp, #16]
  41e9e6:	4413      	add	r3, r2
  41e9e8:	441d      	add	r5, r3
  41e9ea:	b22d      	sxth	r5, r5
  41e9ec:	e7ca      	b.n	41e984 <lv_cont_refr_layout+0x230>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41e9ee:	2101      	movs	r1, #1
  41e9f0:	9805      	ldr	r0, [sp, #20]
  41e9f2:	4b0d      	ldr	r3, [pc, #52]	; (41ea28 <lv_cont_refr_layout+0x2d4>)
  41e9f4:	4798      	blx	r3
  41e9f6:	e6b5      	b.n	41e764 <lv_cont_refr_layout+0x10>
  41e9f8:	00406345 	.word	0x00406345
  41e9fc:	0041e721 	.word	0x0041e721
  41ea00:	00405091 	.word	0x00405091
  41ea04:	00406b7d 	.word	0x00406b7d
  41ea08:	004069b5 	.word	0x004069b5
  41ea0c:	004051bd 	.word	0x004051bd
  41ea10:	00404d45 	.word	0x00404d45
  41ea14:	004153f7 	.word	0x004153f7
  41ea18:	004053d5 	.word	0x004053d5
  41ea1c:	004153ed 	.word	0x004153ed
  41ea20:	00415401 	.word	0x00415401
  41ea24:	0041540f 	.word	0x0041540f
  41ea28:	00404d75 	.word	0x00404d75
  41ea2c:	00405801 	.word	0x00405801
    lv_layout_t type = lv_cont_get_layout(cont);
  41ea30:	9d05      	ldr	r5, [sp, #20]
  41ea32:	4628      	mov	r0, r5
  41ea34:	4b9a      	ldr	r3, [pc, #616]	; (41eca0 <lv_cont_refr_layout+0x54c>)
  41ea36:	4798      	blx	r3
  41ea38:	4604      	mov	r4, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
  41ea3a:	4628      	mov	r0, r5
  41ea3c:	4b99      	ldr	r3, [pc, #612]	; (41eca4 <lv_cont_refr_layout+0x550>)
  41ea3e:	4798      	blx	r3
  41ea40:	4681      	mov	r9, r0
    switch(type) {
  41ea42:	2c06      	cmp	r4, #6
  41ea44:	d035      	beq.n	41eab2 <lv_cont_refr_layout+0x35e>
  41ea46:	2c07      	cmp	r4, #7
  41ea48:	d03b      	beq.n	41eac2 <lv_cont_refr_layout+0x36e>
  41ea4a:	2c05      	cmp	r4, #5
  41ea4c:	d007      	beq.n	41ea5e <lv_cont_refr_layout+0x30a>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41ea4e:	2801      	cmp	r0, #1
  41ea50:	f000 8234 	beq.w	41eebc <lv_cont_refr_layout+0x768>
            vpad_corr = 0;
  41ea54:	f04f 0a00 	mov.w	sl, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41ea58:	2301      	movs	r3, #1
  41ea5a:	9304      	str	r3, [sp, #16]
  41ea5c:	e00b      	b.n	41ea76 <lv_cont_refr_layout+0x322>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ea5e:	2210      	movs	r2, #16
  41ea60:	2100      	movs	r1, #0
  41ea62:	9805      	ldr	r0, [sp, #20]
  41ea64:	4b90      	ldr	r3, [pc, #576]	; (41eca8 <lv_cont_refr_layout+0x554>)
  41ea66:	4798      	blx	r3
  41ea68:	4682      	mov	sl, r0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41ea6a:	f1b9 0f01 	cmp.w	r9, #1
  41ea6e:	f000 820f 	beq.w	41ee90 <lv_cont_refr_layout+0x73c>
  41ea72:	2301      	movs	r3, #1
  41ea74:	9304      	str	r3, [sp, #16]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41ea76:	2101      	movs	r1, #1
  41ea78:	9c05      	ldr	r4, [sp, #20]
  41ea7a:	4620      	mov	r0, r4
  41ea7c:	4b8b      	ldr	r3, [pc, #556]	; (41ecac <lv_cont_refr_layout+0x558>)
  41ea7e:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ea80:	2212      	movs	r2, #18
  41ea82:	2100      	movs	r1, #0
  41ea84:	4620      	mov	r0, r4
  41ea86:	4b88      	ldr	r3, [pc, #544]	; (41eca8 <lv_cont_refr_layout+0x554>)
  41ea88:	4798      	blx	r3
  41ea8a:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41ea8c:	2214      	movs	r2, #20
  41ea8e:	2100      	movs	r1, #0
  41ea90:	9c05      	ldr	r4, [sp, #20]
  41ea92:	4620      	mov	r0, r4
  41ea94:	4b84      	ldr	r3, [pc, #528]	; (41eca8 <lv_cont_refr_layout+0x554>)
  41ea96:	4798      	blx	r3
  41ea98:	4683      	mov	fp, r0
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41ea9a:	1d25      	adds	r5, r4, #4
  41ea9c:	4628      	mov	r0, r5
  41ea9e:	4b84      	ldr	r3, [pc, #528]	; (41ecb0 <lv_cont_refr_layout+0x55c>)
  41eaa0:	4798      	blx	r3
  41eaa2:	4604      	mov	r4, r0
  41eaa4:	2800      	cmp	r0, #0
  41eaa6:	d045      	beq.n	41eb34 <lv_cont_refr_layout+0x3e0>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41eaa8:	4e82      	ldr	r6, [pc, #520]	; (41ecb4 <lv_cont_refr_layout+0x560>)
  41eaaa:	f8df 8224 	ldr.w	r8, [pc, #548]	; 41ecd0 <lv_cont_refr_layout+0x57c>
        last_cord += lv_obj_get_width(child) + inner;
  41eaae:	9503      	str	r5, [sp, #12]
  41eab0:	e02b      	b.n	41eb0a <lv_cont_refr_layout+0x3b6>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  41eab2:	2801      	cmp	r0, #1
  41eab4:	f000 81fa 	beq.w	41eeac <lv_cont_refr_layout+0x758>
            vpad_corr = 0;
  41eab8:	f04f 0a00 	mov.w	sl, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  41eabc:	2307      	movs	r3, #7
  41eabe:	9304      	str	r3, [sp, #16]
  41eac0:	e7d9      	b.n	41ea76 <lv_cont_refr_layout+0x322>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41eac2:	2211      	movs	r2, #17
  41eac4:	2100      	movs	r1, #0
  41eac6:	9805      	ldr	r0, [sp, #20]
  41eac8:	4b77      	ldr	r3, [pc, #476]	; (41eca8 <lv_cont_refr_layout+0x554>)
  41eaca:	4798      	blx	r3
            vpad_corr = -lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
  41eacc:	4240      	negs	r0, r0
  41eace:	fa0f fa80 	sxth.w	sl, r0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
  41ead2:	f1b9 0f01 	cmp.w	r9, #1
  41ead6:	f000 81ee 	beq.w	41eeb6 <lv_cont_refr_layout+0x762>
  41eada:	2304      	movs	r3, #4
  41eadc:	9304      	str	r3, [sp, #16]
  41eade:	e7ca      	b.n	41ea76 <lv_cont_refr_layout+0x322>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
  41eae0:	427b      	negs	r3, r7
  41eae2:	f8cd a000 	str.w	sl, [sp]
  41eae6:	b21b      	sxth	r3, r3
  41eae8:	9a04      	ldr	r2, [sp, #16]
  41eaea:	9905      	ldr	r1, [sp, #20]
  41eaec:	4620      	mov	r0, r4
  41eaee:	4d72      	ldr	r5, [pc, #456]	; (41ecb8 <lv_cont_refr_layout+0x564>)
  41eaf0:	47a8      	blx	r5
        last_cord += lv_obj_get_width(child) + inner;
  41eaf2:	4620      	mov	r0, r4
  41eaf4:	4b71      	ldr	r3, [pc, #452]	; (41ecbc <lv_cont_refr_layout+0x568>)
  41eaf6:	4798      	blx	r3
  41eaf8:	4458      	add	r0, fp
  41eafa:	4407      	add	r7, r0
  41eafc:	b23f      	sxth	r7, r7
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41eafe:	4621      	mov	r1, r4
  41eb00:	9803      	ldr	r0, [sp, #12]
  41eb02:	4b6f      	ldr	r3, [pc, #444]	; (41ecc0 <lv_cont_refr_layout+0x56c>)
  41eb04:	4798      	blx	r3
  41eb06:	4604      	mov	r4, r0
  41eb08:	b1a0      	cbz	r0, 41eb34 <lv_cont_refr_layout+0x3e0>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41eb0a:	4620      	mov	r0, r4
  41eb0c:	47b0      	blx	r6
  41eb0e:	2800      	cmp	r0, #0
  41eb10:	d1f5      	bne.n	41eafe <lv_cont_refr_layout+0x3aa>
  41eb12:	2104      	movs	r1, #4
  41eb14:	4620      	mov	r0, r4
  41eb16:	47c0      	blx	r8
  41eb18:	2800      	cmp	r0, #0
  41eb1a:	d1f0      	bne.n	41eafe <lv_cont_refr_layout+0x3aa>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
  41eb1c:	f1b9 0f01 	cmp.w	r9, #1
  41eb20:	d0de      	beq.n	41eae0 <lv_cont_refr_layout+0x38c>
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
  41eb22:	f8cd a000 	str.w	sl, [sp]
  41eb26:	463b      	mov	r3, r7
  41eb28:	9a04      	ldr	r2, [sp, #16]
  41eb2a:	9905      	ldr	r1, [sp, #20]
  41eb2c:	4620      	mov	r0, r4
  41eb2e:	4d62      	ldr	r5, [pc, #392]	; (41ecb8 <lv_cont_refr_layout+0x564>)
  41eb30:	47a8      	blx	r5
  41eb32:	e7de      	b.n	41eaf2 <lv_cont_refr_layout+0x39e>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41eb34:	2101      	movs	r1, #1
  41eb36:	9805      	ldr	r0, [sp, #20]
  41eb38:	4b62      	ldr	r3, [pc, #392]	; (41ecc4 <lv_cont_refr_layout+0x570>)
  41eb3a:	4798      	blx	r3
  41eb3c:	e612      	b.n	41e764 <lv_cont_refr_layout+0x10>
    lv_layout_t type = lv_cont_get_layout(cont);
  41eb3e:	9c05      	ldr	r4, [sp, #20]
  41eb40:	4620      	mov	r0, r4
  41eb42:	4b57      	ldr	r3, [pc, #348]	; (41eca0 <lv_cont_refr_layout+0x54c>)
  41eb44:	4798      	blx	r3
  41eb46:	900e      	str	r0, [sp, #56]	; 0x38
    lv_coord_t w_obj         = lv_obj_get_width(cont);
  41eb48:	4620      	mov	r0, r4
  41eb4a:	4b5c      	ldr	r3, [pc, #368]	; (41ecbc <lv_cont_refr_layout+0x568>)
  41eb4c:	4798      	blx	r3
  41eb4e:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41eb50:	2210      	movs	r2, #16
  41eb52:	2100      	movs	r1, #0
  41eb54:	4620      	mov	r0, r4
  41eb56:	4b54      	ldr	r3, [pc, #336]	; (41eca8 <lv_cont_refr_layout+0x554>)
  41eb58:	4798      	blx	r3
  41eb5a:	9008      	str	r0, [sp, #32]
    child_rs = _lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
  41eb5c:	4627      	mov	r7, r4
  41eb5e:	4623      	mov	r3, r4
  41eb60:	3304      	adds	r3, #4
  41eb62:	9303      	str	r3, [sp, #12]
  41eb64:	4618      	mov	r0, r3
  41eb66:	4b52      	ldr	r3, [pc, #328]	; (41ecb0 <lv_cont_refr_layout+0x55c>)
  41eb68:	4798      	blx	r3
    if(child_rs == NULL) return;                /*Return if no child*/
  41eb6a:	4606      	mov	r6, r0
  41eb6c:	2800      	cmp	r0, #0
  41eb6e:	f43f adf9 	beq.w	41e764 <lv_cont_refr_layout+0x10>
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41eb72:	2101      	movs	r1, #1
  41eb74:	4620      	mov	r0, r4
  41eb76:	4b4d      	ldr	r3, [pc, #308]	; (41ecac <lv_cont_refr_layout+0x558>)
  41eb78:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41eb7a:	2212      	movs	r2, #18
  41eb7c:	2100      	movs	r1, #0
  41eb7e:	4620      	mov	r0, r4
  41eb80:	4d49      	ldr	r5, [pc, #292]	; (41eca8 <lv_cont_refr_layout+0x554>)
  41eb82:	47a8      	blx	r5
  41eb84:	4680      	mov	r8, r0
  41eb86:	900f      	str	r0, [sp, #60]	; 0x3c
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41eb88:	2213      	movs	r2, #19
  41eb8a:	2100      	movs	r1, #0
  41eb8c:	4620      	mov	r0, r4
  41eb8e:	47a8      	blx	r5
  41eb90:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41eb92:	2214      	movs	r2, #20
  41eb94:	2100      	movs	r1, #0
  41eb96:	4638      	mov	r0, r7
  41eb98:	47a8      	blx	r5
  41eb9a:	9006      	str	r0, [sp, #24]
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
  41eb9c:	4444      	add	r4, r8
  41eb9e:	b223      	sxth	r3, r4
  41eba0:	9309      	str	r3, [sp, #36]	; 0x24
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
  41eba2:	f8df 9110 	ldr.w	r9, [pc, #272]	; 41ecb4 <lv_cont_refr_layout+0x560>
  41eba6:	f8df b128 	ldr.w	fp, [pc, #296]	; 41ecd0 <lv_cont_refr_layout+0x57c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41ebaa:	46aa      	mov	sl, r5
  41ebac:	e0b2      	b.n	41ed14 <lv_cont_refr_layout+0x5c0>
                    if(child_rc != NULL && obj_num != 0) {
  41ebae:	2c00      	cmp	r4, #0
  41ebb0:	d052      	beq.n	41ec58 <lv_cont_refr_layout+0x504>
  41ebb2:	f1b8 0f00 	cmp.w	r8, #0
  41ebb6:	d04f      	beq.n	41ec58 <lv_cont_refr_layout+0x504>
                        child_rc = _lv_ll_get_next(&cont->child_ll, child_rc);
  41ebb8:	4621      	mov	r1, r4
  41ebba:	9803      	ldr	r0, [sp, #12]
  41ebbc:	4b42      	ldr	r3, [pc, #264]	; (41ecc8 <lv_cont_refr_layout+0x574>)
  41ebbe:	4798      	blx	r3
  41ebc0:	4604      	mov	r4, r0
  41ebc2:	e049      	b.n	41ec58 <lv_cont_refr_layout+0x504>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
  41ebc4:	4621      	mov	r1, r4
  41ebc6:	9803      	ldr	r0, [sp, #12]
  41ebc8:	4b3d      	ldr	r3, [pc, #244]	; (41ecc0 <lv_cont_refr_layout+0x56c>)
  41ebca:	4798      	blx	r3
  41ebcc:	4604      	mov	r4, r0
                child_rs = child_rc; /*If the first object was hidden (or too long) then set the
  41ebce:	f1b8 0f00 	cmp.w	r8, #0
  41ebd2:	bf08      	it	eq
  41ebd4:	4606      	moveq	r6, r0
        } while(child_rc != NULL);
  41ebd6:	2800      	cmp	r0, #0
  41ebd8:	f000 8175 	beq.w	41eec6 <lv_cont_refr_layout+0x772>
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
  41ebdc:	4620      	mov	r0, r4
  41ebde:	47c8      	blx	r9
  41ebe0:	2800      	cmp	r0, #0
  41ebe2:	d1ef      	bne.n	41ebc4 <lv_cont_refr_layout+0x470>
  41ebe4:	2104      	movs	r1, #4
  41ebe6:	4620      	mov	r0, r4
  41ebe8:	47d8      	blx	fp
  41ebea:	2800      	cmp	r0, #0
  41ebec:	d1ea      	bne.n	41ebc4 <lv_cont_refr_layout+0x470>
                lv_coord_t w = lv_obj_get_width(child_rc);
  41ebee:	4620      	mov	r0, r4
  41ebf0:	4b32      	ldr	r3, [pc, #200]	; (41ecbc <lv_cont_refr_layout+0x568>)
  41ebf2:	4798      	blx	r3
  41ebf4:	4607      	mov	r7, r0
  41ebf6:	2217      	movs	r2, #23
  41ebf8:	2100      	movs	r1, #0
  41ebfa:	4620      	mov	r0, r4
  41ebfc:	47d0      	blx	sl
                w += lv_obj_get_style_margin_left(child_rc, LV_OBJ_PART_MAIN);
  41ebfe:	4407      	add	r7, r0
  41ec00:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  41ec02:	2218      	movs	r2, #24
  41ec04:	2100      	movs	r1, #0
  41ec06:	4620      	mov	r0, r4
  41ec08:	47d0      	blx	sl
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
  41ec0a:	4438      	add	r0, r7
  41ec0c:	b280      	uxth	r0, r0
                if(w_row + w > w_obj) {
  41ec0e:	fa05 f380 	sxtah	r3, r5, r0
  41ec12:	9a07      	ldr	r2, [sp, #28]
  41ec14:	4293      	cmp	r3, r2
  41ec16:	dcca      	bgt.n	41ebae <lv_cont_refr_layout+0x45a>
                w_row += w + pinner; /*Add the object width + inner padding*/
  41ec18:	9b06      	ldr	r3, [sp, #24]
  41ec1a:	441d      	add	r5, r3
  41ec1c:	4405      	add	r5, r0
  41ec1e:	b22d      	sxth	r5, r5
                lv_coord_t h = lv_obj_get_height(child_rc);
  41ec20:	4620      	mov	r0, r4
  41ec22:	4b2a      	ldr	r3, [pc, #168]	; (41eccc <lv_cont_refr_layout+0x578>)
  41ec24:	4798      	blx	r3
  41ec26:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41ec28:	2215      	movs	r2, #21
  41ec2a:	2100      	movs	r1, #0
  41ec2c:	4620      	mov	r0, r4
  41ec2e:	47d0      	blx	sl
                h += lv_obj_get_style_margin_top(child_rc, LV_OBJ_PART_MAIN);
  41ec30:	4407      	add	r7, r0
  41ec32:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41ec34:	2216      	movs	r2, #22
  41ec36:	2100      	movs	r1, #0
  41ec38:	4620      	mov	r0, r4
  41ec3a:	47d0      	blx	sl
                h += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
  41ec3c:	4438      	add	r0, r7
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
  41ec3e:	b200      	sxth	r0, r0
  41ec40:	9b04      	ldr	r3, [sp, #16]
  41ec42:	4283      	cmp	r3, r0
  41ec44:	bfb8      	it	lt
  41ec46:	4603      	movlt	r3, r0
  41ec48:	9304      	str	r3, [sp, #16]
                obj_num++;
  41ec4a:	f108 0801 	add.w	r8, r8, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
  41ec4e:	2108      	movs	r1, #8
  41ec50:	4620      	mov	r0, r4
  41ec52:	47d8      	blx	fp
  41ec54:	2800      	cmp	r0, #0
  41ec56:	d0b5      	beq.n	41ebc4 <lv_cont_refr_layout+0x470>
        if(obj_num == 0) {
  41ec58:	f1b8 0f00 	cmp.w	r8, #0
  41ec5c:	f040 8136 	bne.w	41eecc <lv_cont_refr_layout+0x778>
            if(child_rc != NULL) {
  41ec60:	2c00      	cmp	r4, #0
  41ec62:	f000 80e4 	beq.w	41ee2e <lv_cont_refr_layout+0x6da>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41ec66:	2215      	movs	r2, #21
  41ec68:	2100      	movs	r1, #0
  41ec6a:	4620      	mov	r0, r4
  41ec6c:	47d0      	blx	sl
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y + mtop);
  41ec6e:	b285      	uxth	r5, r0
  41ec70:	9b08      	ldr	r3, [sp, #32]
  41ec72:	18eb      	adds	r3, r5, r3
  41ec74:	b21b      	sxth	r3, r3
  41ec76:	9300      	str	r3, [sp, #0]
  41ec78:	2300      	movs	r3, #0
  41ec7a:	2202      	movs	r2, #2
  41ec7c:	9905      	ldr	r1, [sp, #20]
  41ec7e:	4620      	mov	r0, r4
  41ec80:	4e0d      	ldr	r6, [pc, #52]	; (41ecb8 <lv_cont_refr_layout+0x564>)
  41ec82:	47b0      	blx	r6
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
  41ec84:	4620      	mov	r0, r4
  41ec86:	4b11      	ldr	r3, [pc, #68]	; (41eccc <lv_cont_refr_layout+0x578>)
  41ec88:	4798      	blx	r3
                h_row += mtop;
  41ec8a:	4405      	add	r5, r0
  41ec8c:	b2ad      	uxth	r5, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41ec8e:	2216      	movs	r2, #22
  41ec90:	2100      	movs	r1, #0
  41ec92:	4620      	mov	r0, r4
  41ec94:	47d0      	blx	sl
                h_row += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
  41ec96:	4428      	add	r0, r5
  41ec98:	b203      	sxth	r3, r0
  41ec9a:	9304      	str	r3, [sp, #16]
  41ec9c:	e02b      	b.n	41ecf6 <lv_cont_refr_layout+0x5a2>
  41ec9e:	bf00      	nop
  41eca0:	0041e721 	.word	0x0041e721
  41eca4:	00405d6d 	.word	0x00405d6d
  41eca8:	004069b5 	.word	0x004069b5
  41ecac:	00404d45 	.word	0x00404d45
  41ecb0:	004153f7 	.word	0x004153f7
  41ecb4:	004053d5 	.word	0x004053d5
  41ecb8:	00405801 	.word	0x00405801
  41ecbc:	0040518d 	.word	0x0040518d
  41ecc0:	0041540f 	.word	0x0041540f
  41ecc4:	00404d75 	.word	0x00404d75
  41ecc8:	00415401 	.word	0x00415401
  41eccc:	004051bd 	.word	0x004051bd
  41ecd0:	00406345 	.word	0x00406345
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41ecd4:	2215      	movs	r2, #21
  41ecd6:	2100      	movs	r1, #0
  41ecd8:	4630      	mov	r0, r6
  41ecda:	47d0      	blx	sl
                         act_y + lv_obj_get_style_margin_top(child_rs, LV_OBJ_PART_MAIN));
  41ecdc:	9b08      	ldr	r3, [sp, #32]
  41ecde:	18c3      	adds	r3, r0, r3
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID,
  41ece0:	b21b      	sxth	r3, r3
  41ece2:	9300      	str	r3, [sp, #0]
  41ece4:	2300      	movs	r3, #0
  41ece6:	2202      	movs	r2, #2
  41ece8:	9905      	ldr	r1, [sp, #20]
  41ecea:	4630      	mov	r0, r6
  41ecec:	4d87      	ldr	r5, [pc, #540]	; (41ef0c <lv_cont_refr_layout+0x7b8>)
  41ecee:	47a8      	blx	r5
        if(child_rc == NULL) break;
  41ecf0:	2c00      	cmp	r4, #0
  41ecf2:	f000 809c 	beq.w	41ee2e <lv_cont_refr_layout+0x6da>
        act_y += pinner + h_row;           /*y increment*/
  41ecf6:	9b08      	ldr	r3, [sp, #32]
  41ecf8:	9a06      	ldr	r2, [sp, #24]
  41ecfa:	4413      	add	r3, r2
  41ecfc:	9a04      	ldr	r2, [sp, #16]
  41ecfe:	4413      	add	r3, r2
  41ed00:	b21b      	sxth	r3, r3
  41ed02:	9308      	str	r3, [sp, #32]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
  41ed04:	4621      	mov	r1, r4
  41ed06:	9803      	ldr	r0, [sp, #12]
  41ed08:	4b81      	ldr	r3, [pc, #516]	; (41ef10 <lv_cont_refr_layout+0x7bc>)
  41ed0a:	4798      	blx	r3
    while(child_rs != NULL) {
  41ed0c:	4606      	mov	r6, r0
  41ed0e:	2800      	cmp	r0, #0
  41ed10:	f000 808d 	beq.w	41ee2e <lv_cont_refr_layout+0x6da>
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
  41ed14:	9d09      	ldr	r5, [sp, #36]	; 0x24
  41ed16:	4634      	mov	r4, r6
        uint32_t obj_num = 0;
  41ed18:	f04f 0800 	mov.w	r8, #0
        lv_coord_t h_row = 0;
  41ed1c:	f8cd 8010 	str.w	r8, [sp, #16]
  41ed20:	e75c      	b.n	41ebdc <lv_cont_refr_layout+0x488>
                inv = -1;
  41ed22:	f04f 33ff 	mov.w	r3, #4294967295
  41ed26:	930d      	str	r3, [sp, #52]	; 0x34
                align = LV_ALIGN_IN_TOP_RIGHT;
  41ed28:	2303      	movs	r3, #3
  41ed2a:	930c      	str	r3, [sp, #48]	; 0x30
  41ed2c:	e0e8      	b.n	41ef00 <lv_cont_refr_layout+0x7ac>
  41ed2e:	2215      	movs	r2, #21
  41ed30:	2100      	movs	r1, #0
  41ed32:	4630      	mov	r0, r6
  41ed34:	47d0      	blx	sl
                                         inv * (act_x + mleft),
  41ed36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41ed38:	18fb      	adds	r3, r7, r3
                            lv_obj_align(child_tmp, cont, align,
  41ed3a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
  41ed3e:	fb13 f302 	smulbb	r3, r3, r2
                                         act_y + lv_obj_get_style_margin_top(child_tmp, LV_OBJ_PART_MAIN));
  41ed42:	9a08      	ldr	r2, [sp, #32]
  41ed44:	1882      	adds	r2, r0, r2
                            lv_obj_align(child_tmp, cont, align,
  41ed46:	b212      	sxth	r2, r2
  41ed48:	9200      	str	r2, [sp, #0]
  41ed4a:	b21b      	sxth	r3, r3
  41ed4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41ed4e:	9905      	ldr	r1, [sp, #20]
  41ed50:	4630      	mov	r0, r6
  41ed52:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 41ef0c <lv_cont_refr_layout+0x7b8>
  41ed56:	47c0      	blx	r8
                    act_x += lv_obj_get_width(child_tmp) + new_pinner + mleft + mright;
  41ed58:	4630      	mov	r0, r6
  41ed5a:	4b6e      	ldr	r3, [pc, #440]	; (41ef14 <lv_cont_refr_layout+0x7c0>)
  41ed5c:	4798      	blx	r3
  41ed5e:	1943      	adds	r3, r0, r5
  41ed60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  41ed62:	4413      	add	r3, r2
  41ed64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  41ed66:	4413      	add	r3, r2
  41ed68:	441f      	add	r7, r3
  41ed6a:	b23f      	sxth	r7, r7
                if(child_tmp == child_rc) break;
  41ed6c:	42a6      	cmp	r6, r4
  41ed6e:	d0bf      	beq.n	41ecf0 <lv_cont_refr_layout+0x59c>
                child_tmp = _lv_ll_get_prev(&cont->child_ll, child_tmp);
  41ed70:	4631      	mov	r1, r6
  41ed72:	9803      	ldr	r0, [sp, #12]
  41ed74:	4b66      	ldr	r3, [pc, #408]	; (41ef10 <lv_cont_refr_layout+0x7bc>)
  41ed76:	4798      	blx	r3
            while(child_tmp != NULL) {
  41ed78:	4606      	mov	r6, r0
  41ed7a:	2800      	cmp	r0, #0
  41ed7c:	d0b8      	beq.n	41ecf0 <lv_cont_refr_layout+0x59c>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
  41ed7e:	4630      	mov	r0, r6
  41ed80:	47c8      	blx	r9
  41ed82:	2800      	cmp	r0, #0
  41ed84:	d1f2      	bne.n	41ed6c <lv_cont_refr_layout+0x618>
  41ed86:	2104      	movs	r1, #4
  41ed88:	4630      	mov	r0, r6
  41ed8a:	47d8      	blx	fp
  41ed8c:	2800      	cmp	r0, #0
  41ed8e:	d1ed      	bne.n	41ed6c <lv_cont_refr_layout+0x618>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41ed90:	2217      	movs	r2, #23
  41ed92:	2100      	movs	r1, #0
  41ed94:	4630      	mov	r0, r6
  41ed96:	47d0      	blx	sl
  41ed98:	900a      	str	r0, [sp, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  41ed9a:	2218      	movs	r2, #24
  41ed9c:	2100      	movs	r1, #0
  41ed9e:	4630      	mov	r0, r6
  41eda0:	47d0      	blx	sl
  41eda2:	900b      	str	r0, [sp, #44]	; 0x2c
                    switch(type) {
  41eda4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41eda6:	2b09      	cmp	r3, #9
  41eda8:	d004      	beq.n	41edb4 <lv_cont_refr_layout+0x660>
  41edaa:	2b0a      	cmp	r3, #10
  41edac:	d01c      	beq.n	41ede8 <lv_cont_refr_layout+0x694>
  41edae:	2b08      	cmp	r3, #8
  41edb0:	d1d2      	bne.n	41ed58 <lv_cont_refr_layout+0x604>
  41edb2:	e7bc      	b.n	41ed2e <lv_cont_refr_layout+0x5da>
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
  41edb4:	4630      	mov	r0, r6
  41edb6:	4b58      	ldr	r3, [pc, #352]	; (41ef18 <lv_cont_refr_layout+0x7c4>)
  41edb8:	4798      	blx	r3
                                         inv * (act_x + mleft),
  41edba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41edbc:	18fb      	adds	r3, r7, r3
                            lv_obj_align(child_tmp, cont, align,
  41edbe:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
  41edc2:	fb13 f302 	smulbb	r3, r3, r2
  41edc6:	b21b      	sxth	r3, r3
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
  41edc8:	9a04      	ldr	r2, [sp, #16]
  41edca:	1a10      	subs	r0, r2, r0
  41edcc:	bf48      	it	mi
  41edce:	3001      	addmi	r0, #1
  41edd0:	9a08      	ldr	r2, [sp, #32]
  41edd2:	eb02 0260 	add.w	r2, r2, r0, asr #1
                            lv_obj_align(child_tmp, cont, align,
  41edd6:	b212      	sxth	r2, r2
  41edd8:	9200      	str	r2, [sp, #0]
  41edda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41eddc:	9905      	ldr	r1, [sp, #20]
  41edde:	4630      	mov	r0, r6
  41ede0:	f8df 8128 	ldr.w	r8, [pc, #296]	; 41ef0c <lv_cont_refr_layout+0x7b8>
  41ede4:	47c0      	blx	r8
  41ede6:	e7b7      	b.n	41ed58 <lv_cont_refr_layout+0x604>
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
  41ede8:	9b08      	ldr	r3, [sp, #32]
  41edea:	9a04      	ldr	r2, [sp, #16]
  41edec:	eb03 0802 	add.w	r8, r3, r2
  41edf0:	fa1f f888 	uxth.w	r8, r8
  41edf4:	4630      	mov	r0, r6
  41edf6:	4b48      	ldr	r3, [pc, #288]	; (41ef18 <lv_cont_refr_layout+0x7c4>)
  41edf8:	4798      	blx	r3
  41edfa:	eba8 0800 	sub.w	r8, r8, r0
  41edfe:	fa1f f888 	uxth.w	r8, r8
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41ee02:	2216      	movs	r2, #22
  41ee04:	2100      	movs	r1, #0
  41ee06:	4630      	mov	r0, r6
  41ee08:	47d0      	blx	sl
                                         inv * (act_x + mleft),
  41ee0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41ee0c:	18fb      	adds	r3, r7, r3
                            lv_obj_align(child_tmp, cont, align,
  41ee0e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
  41ee12:	fb13 f302 	smulbb	r3, r3, r2
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
  41ee16:	eba8 0200 	sub.w	r2, r8, r0
                            lv_obj_align(child_tmp, cont, align,
  41ee1a:	b212      	sxth	r2, r2
  41ee1c:	9200      	str	r2, [sp, #0]
  41ee1e:	b21b      	sxth	r3, r3
  41ee20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41ee22:	9905      	ldr	r1, [sp, #20]
  41ee24:	4630      	mov	r0, r6
  41ee26:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 41ef0c <lv_cont_refr_layout+0x7b8>
  41ee2a:	47c0      	blx	r8
  41ee2c:	e794      	b.n	41ed58 <lv_cont_refr_layout+0x604>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41ee2e:	2101      	movs	r1, #1
  41ee30:	9805      	ldr	r0, [sp, #20]
  41ee32:	4b3a      	ldr	r3, [pc, #232]	; (41ef1c <lv_cont_refr_layout+0x7c8>)
  41ee34:	4798      	blx	r3
  41ee36:	e495      	b.n	41e764 <lv_cont_refr_layout+0x10>
        lv_obj_set_pos(child, act_x, act_y);
  41ee38:	9a03      	ldr	r2, [sp, #12]
  41ee3a:	4639      	mov	r1, r7
  41ee3c:	4620      	mov	r0, r4
  41ee3e:	4b38      	ldr	r3, [pc, #224]	; (41ef20 <lv_cont_refr_layout+0x7cc>)
  41ee40:	4798      	blx	r3
        act_x += inner + obj_w;
  41ee42:	44c8      	add	r8, r9
  41ee44:	4447      	add	r7, r8
  41ee46:	b23f      	sxth	r7, r7
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41ee48:	4621      	mov	r1, r4
  41ee4a:	4628      	mov	r0, r5
  41ee4c:	4b30      	ldr	r3, [pc, #192]	; (41ef10 <lv_cont_refr_layout+0x7bc>)
  41ee4e:	4798      	blx	r3
  41ee50:	4604      	mov	r4, r0
  41ee52:	b1c0      	cbz	r0, 41ee86 <lv_cont_refr_layout+0x732>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41ee54:	4620      	mov	r0, r4
  41ee56:	47b0      	blx	r6
  41ee58:	2800      	cmp	r0, #0
  41ee5a:	d1f5      	bne.n	41ee48 <lv_cont_refr_layout+0x6f4>
  41ee5c:	2104      	movs	r1, #4
  41ee5e:	4620      	mov	r0, r4
  41ee60:	47d0      	blx	sl
  41ee62:	2800      	cmp	r0, #0
  41ee64:	d1f0      	bne.n	41ee48 <lv_cont_refr_layout+0x6f4>
        lv_coord_t obj_w = lv_obj_get_width(child);
  41ee66:	4620      	mov	r0, r4
  41ee68:	4b2a      	ldr	r3, [pc, #168]	; (41ef14 <lv_cont_refr_layout+0x7c0>)
  41ee6a:	4798      	blx	r3
  41ee6c:	4680      	mov	r8, r0
        if(act_x + obj_w > w_fit + left) {
  41ee6e:	183a      	adds	r2, r7, r0
  41ee70:	9804      	ldr	r0, [sp, #16]
  41ee72:	9906      	ldr	r1, [sp, #24]
  41ee74:	1843      	adds	r3, r0, r1
  41ee76:	429a      	cmp	r2, r3
  41ee78:	ddde      	ble.n	41ee38 <lv_cont_refr_layout+0x6e4>
            act_y += y_ofs;
  41ee7a:	9b03      	ldr	r3, [sp, #12]
  41ee7c:	445b      	add	r3, fp
  41ee7e:	b21b      	sxth	r3, r3
  41ee80:	9303      	str	r3, [sp, #12]
            act_x = left;
  41ee82:	460f      	mov	r7, r1
  41ee84:	e7d8      	b.n	41ee38 <lv_cont_refr_layout+0x6e4>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41ee86:	2101      	movs	r1, #1
  41ee88:	9805      	ldr	r0, [sp, #20]
  41ee8a:	4b24      	ldr	r3, [pc, #144]	; (41ef1c <lv_cont_refr_layout+0x7c8>)
  41ee8c:	4798      	blx	r3
  41ee8e:	e469      	b.n	41e764 <lv_cont_refr_layout+0x10>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41ee90:	2303      	movs	r3, #3
  41ee92:	9304      	str	r3, [sp, #16]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41ee94:	2101      	movs	r1, #1
  41ee96:	9c05      	ldr	r4, [sp, #20]
  41ee98:	4620      	mov	r0, r4
  41ee9a:	4b22      	ldr	r3, [pc, #136]	; (41ef24 <lv_cont_refr_layout+0x7d0>)
  41ee9c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ee9e:	2213      	movs	r2, #19
  41eea0:	2100      	movs	r1, #0
  41eea2:	4620      	mov	r0, r4
  41eea4:	4b20      	ldr	r3, [pc, #128]	; (41ef28 <lv_cont_refr_layout+0x7d4>)
  41eea6:	4798      	blx	r3
  41eea8:	4607      	mov	r7, r0
  41eeaa:	e5ef      	b.n	41ea8c <lv_cont_refr_layout+0x338>
            vpad_corr = 0;
  41eeac:	f04f 0a00 	mov.w	sl, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  41eeb0:	2308      	movs	r3, #8
  41eeb2:	9304      	str	r3, [sp, #16]
  41eeb4:	e7ee      	b.n	41ee94 <lv_cont_refr_layout+0x740>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
  41eeb6:	2306      	movs	r3, #6
  41eeb8:	9304      	str	r3, [sp, #16]
  41eeba:	e7eb      	b.n	41ee94 <lv_cont_refr_layout+0x740>
            vpad_corr = 0;
  41eebc:	f04f 0a00 	mov.w	sl, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41eec0:	2303      	movs	r3, #3
  41eec2:	9304      	str	r3, [sp, #16]
  41eec4:	e7e6      	b.n	41ee94 <lv_cont_refr_layout+0x740>
        if(obj_num == 0) {
  41eec6:	f1b8 0f00 	cmp.w	r8, #0
  41eeca:	d0b0      	beq.n	41ee2e <lv_cont_refr_layout+0x6da>
        else if(obj_num == 1) {
  41eecc:	f1b8 0f01 	cmp.w	r8, #1
  41eed0:	f43f af00 	beq.w	41ecd4 <lv_cont_refr_layout+0x580>
            w_row -= pinner * obj_num;
  41eed4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  41eed8:	fb13 f308 	smulbb	r3, r3, r8
  41eedc:	1aeb      	subs	r3, r5, r3
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
  41eede:	b21b      	sxth	r3, r3
  41eee0:	9a07      	ldr	r2, [sp, #28]
  41eee2:	1ad3      	subs	r3, r2, r3
  41eee4:	f108 38ff 	add.w	r8, r8, #4294967295
  41eee8:	fbb3 f3f8 	udiv	r3, r3, r8
  41eeec:	b21d      	sxth	r5, r3
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
  41eeee:	9805      	ldr	r0, [sp, #20]
  41eef0:	4b0e      	ldr	r3, [pc, #56]	; (41ef2c <lv_cont_refr_layout+0x7d8>)
  41eef2:	4798      	blx	r3
  41eef4:	2801      	cmp	r0, #1
  41eef6:	f43f af14 	beq.w	41ed22 <lv_cont_refr_layout+0x5ce>
                inv = 1;
  41eefa:	2301      	movs	r3, #1
  41eefc:	930d      	str	r3, [sp, #52]	; 0x34
                align = LV_ALIGN_IN_TOP_LEFT;
  41eefe:	930c      	str	r3, [sp, #48]	; 0x30
            while(child_tmp != NULL) {
  41ef00:	2e00      	cmp	r6, #0
  41ef02:	f43f aef5 	beq.w	41ecf0 <lv_cont_refr_layout+0x59c>
  41ef06:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  41ef08:	e739      	b.n	41ed7e <lv_cont_refr_layout+0x62a>
  41ef0a:	bf00      	nop
  41ef0c:	00405801 	.word	0x00405801
  41ef10:	0041540f 	.word	0x0041540f
  41ef14:	0040518d 	.word	0x0040518d
  41ef18:	004051bd 	.word	0x004051bd
  41ef1c:	00404d75 	.word	0x00404d75
  41ef20:	00405645 	.word	0x00405645
  41ef24:	00404d45 	.word	0x00404d45
  41ef28:	004069b5 	.word	0x004069b5
  41ef2c:	00405d6d 	.word	0x00405d6d

0041ef30 <lv_cont_signal>:
{
  41ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41ef32:	4607      	mov	r7, r0
  41ef34:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  41ef36:	2908      	cmp	r1, #8
  41ef38:	d014      	beq.n	41ef64 <lv_cont_signal+0x34>
  41ef3a:	460c      	mov	r4, r1
    res = ancestor_signal(cont, sign, param);
  41ef3c:	4b2b      	ldr	r3, [pc, #172]	; (41efec <lv_cont_signal+0xbc>)
  41ef3e:	681b      	ldr	r3, [r3, #0]
  41ef40:	4798      	blx	r3
  41ef42:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  41ef44:	2801      	cmp	r0, #1
  41ef46:	d114      	bne.n	41ef72 <lv_cont_signal+0x42>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41ef48:	2c07      	cmp	r4, #7
  41ef4a:	d01e      	beq.n	41ef8a <lv_cont_signal+0x5a>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
  41ef4c:	2c04      	cmp	r4, #4
  41ef4e:	d022      	beq.n	41ef96 <lv_cont_signal+0x66>
    else if(sign == LV_SIGNAL_CHILD_CHG) {
  41ef50:	2c01      	cmp	r4, #1
  41ef52:	d027      	beq.n	41efa4 <lv_cont_signal+0x74>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  41ef54:	2c02      	cmp	r4, #2
  41ef56:	d02c      	beq.n	41efb2 <lv_cont_signal+0x82>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  41ef58:	2c03      	cmp	r4, #3
  41ef5a:	d10a      	bne.n	41ef72 <lv_cont_signal+0x42>
        lv_cont_refr_autofit(cont);
  41ef5c:	4638      	mov	r0, r7
  41ef5e:	4b24      	ldr	r3, [pc, #144]	; (41eff0 <lv_cont_signal+0xc0>)
  41ef60:	4798      	blx	r3
  41ef62:	e006      	b.n	41ef72 <lv_cont_signal+0x42>
    switch(type) {
  41ef64:	7813      	ldrb	r3, [r2, #0]
  41ef66:	b933      	cbnz	r3, 41ef76 <lv_cont_signal+0x46>
            style_dsc_p = &cont->style_list;
  41ef68:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_cont_get_style(cont, info->part);
  41ef6c:	606b      	str	r3, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  41ef6e:	b123      	cbz	r3, 41ef7a <lv_cont_signal+0x4a>
  41ef70:	2601      	movs	r6, #1
}
  41ef72:	4630      	mov	r0, r6
  41ef74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            style_dsc_p = NULL;
  41ef76:	2300      	movs	r3, #0
  41ef78:	e7f8      	b.n	41ef6c <lv_cont_signal+0x3c>
        else return ancestor_signal(cont, sign, param);
  41ef7a:	4b1c      	ldr	r3, [pc, #112]	; (41efec <lv_cont_signal+0xbc>)
  41ef7c:	681b      	ldr	r3, [r3, #0]
  41ef7e:	462a      	mov	r2, r5
  41ef80:	2108      	movs	r1, #8
  41ef82:	4638      	mov	r0, r7
  41ef84:	4798      	blx	r3
  41ef86:	4606      	mov	r6, r0
  41ef88:	e7f3      	b.n	41ef72 <lv_cont_signal+0x42>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41ef8a:	491a      	ldr	r1, [pc, #104]	; (41eff4 <lv_cont_signal+0xc4>)
  41ef8c:	4628      	mov	r0, r5
  41ef8e:	4b1a      	ldr	r3, [pc, #104]	; (41eff8 <lv_cont_signal+0xc8>)
  41ef90:	4798      	blx	r3
  41ef92:	4606      	mov	r6, r0
  41ef94:	e7ed      	b.n	41ef72 <lv_cont_signal+0x42>
        lv_cont_refr_layout(cont);
  41ef96:	4638      	mov	r0, r7
  41ef98:	4b18      	ldr	r3, [pc, #96]	; (41effc <lv_cont_signal+0xcc>)
  41ef9a:	4798      	blx	r3
        lv_cont_refr_autofit(cont);
  41ef9c:	4638      	mov	r0, r7
  41ef9e:	4b14      	ldr	r3, [pc, #80]	; (41eff0 <lv_cont_signal+0xc0>)
  41efa0:	4798      	blx	r3
  41efa2:	e7e6      	b.n	41ef72 <lv_cont_signal+0x42>
        lv_cont_refr_layout(cont);
  41efa4:	4638      	mov	r0, r7
  41efa6:	4b15      	ldr	r3, [pc, #84]	; (41effc <lv_cont_signal+0xcc>)
  41efa8:	4798      	blx	r3
        lv_cont_refr_autofit(cont);
  41efaa:	4638      	mov	r0, r7
  41efac:	4b10      	ldr	r3, [pc, #64]	; (41eff0 <lv_cont_signal+0xc0>)
  41efae:	4798      	blx	r3
  41efb0:	e7df      	b.n	41ef72 <lv_cont_signal+0x42>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
  41efb2:	4638      	mov	r0, r7
  41efb4:	4b12      	ldr	r3, [pc, #72]	; (41f000 <lv_cont_signal+0xd0>)
  41efb6:	4798      	blx	r3
  41efb8:	88ab      	ldrh	r3, [r5, #4]
  41efba:	3301      	adds	r3, #1
  41efbc:	882a      	ldrh	r2, [r5, #0]
  41efbe:	1a9b      	subs	r3, r3, r2
  41efc0:	b21b      	sxth	r3, r3
  41efc2:	4298      	cmp	r0, r3
  41efc4:	d006      	beq.n	41efd4 <lv_cont_signal+0xa4>
            lv_cont_refr_layout(cont);
  41efc6:	4638      	mov	r0, r7
  41efc8:	4b0c      	ldr	r3, [pc, #48]	; (41effc <lv_cont_signal+0xcc>)
  41efca:	4798      	blx	r3
            lv_cont_refr_autofit(cont);
  41efcc:	4638      	mov	r0, r7
  41efce:	4b08      	ldr	r3, [pc, #32]	; (41eff0 <lv_cont_signal+0xc0>)
  41efd0:	4798      	blx	r3
  41efd2:	e7ce      	b.n	41ef72 <lv_cont_signal+0x42>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
  41efd4:	4638      	mov	r0, r7
  41efd6:	4b0b      	ldr	r3, [pc, #44]	; (41f004 <lv_cont_signal+0xd4>)
  41efd8:	4798      	blx	r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41efda:	88eb      	ldrh	r3, [r5, #6]
  41efdc:	3301      	adds	r3, #1
  41efde:	886a      	ldrh	r2, [r5, #2]
  41efe0:	1a9b      	subs	r3, r3, r2
  41efe2:	b21b      	sxth	r3, r3
  41efe4:	4298      	cmp	r0, r3
  41efe6:	d1ee      	bne.n	41efc6 <lv_cont_signal+0x96>
  41efe8:	e7c3      	b.n	41ef72 <lv_cont_signal+0x42>
  41efea:	bf00      	nop
  41efec:	20414798 	.word	0x20414798
  41eff0:	0041e13d 	.word	0x0041e13d
  41eff4:	0043070c 	.word	0x0043070c
  41eff8:	0040751d 	.word	0x0040751d
  41effc:	0041e755 	.word	0x0041e755
  41f000:	0040518d 	.word	0x0040518d
  41f004:	004051bd 	.word	0x004051bd

0041f008 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
  41f008:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f00a:	4b09      	ldr	r3, [pc, #36]	; (41f030 <lv_label_dot_tmp_free+0x28>)
  41f00c:	4798      	blx	r3
  41f00e:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
  41f010:	7cc3      	ldrb	r3, [r0, #19]
  41f012:	f013 0f01 	tst.w	r3, #1
  41f016:	d003      	beq.n	41f020 <lv_label_dot_tmp_free+0x18>
  41f018:	6840      	ldr	r0, [r0, #4]
  41f01a:	b108      	cbz	r0, 41f020 <lv_label_dot_tmp_free+0x18>
        lv_mem_free(ext->dot.tmp_ptr);
  41f01c:	4b05      	ldr	r3, [pc, #20]	; (41f034 <lv_label_dot_tmp_free+0x2c>)
  41f01e:	4798      	blx	r3
    }
    ext->dot_tmp_alloc = false;
  41f020:	7ce3      	ldrb	r3, [r4, #19]
  41f022:	f36f 0300 	bfc	r3, #0, #1
  41f026:	74e3      	strb	r3, [r4, #19]
    ext->dot.tmp_ptr   = NULL;
  41f028:	2300      	movs	r3, #0
  41f02a:	6063      	str	r3, [r4, #4]
  41f02c:	bd10      	pop	{r4, pc}
  41f02e:	bf00      	nop
  41f030:	00407281 	.word	0x00407281
  41f034:	004158b9 	.word	0x004158b9

0041f038 <lv_label_revert_dots>:
{
  41f038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41f03a:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f03c:	4b1e      	ldr	r3, [pc, #120]	; (41f0b8 <lv_label_revert_dots+0x80>)
  41f03e:	4798      	blx	r3
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
  41f040:	7c83      	ldrb	r3, [r0, #18]
  41f042:	f003 0307 	and.w	r3, r3, #7
  41f046:	2b02      	cmp	r3, #2
  41f048:	d000      	beq.n	41f04c <lv_label_revert_dots+0x14>
  41f04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41f04c:	4604      	mov	r4, r0
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
  41f04e:	6881      	ldr	r1, [r0, #8]
  41f050:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41f054:	4299      	cmp	r1, r3
  41f056:	d0f8      	beq.n	41f04a <lv_label_revert_dots+0x12>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
  41f058:	4b18      	ldr	r3, [pc, #96]	; (41f0bc <lv_label_revert_dots+0x84>)
  41f05a:	681b      	ldr	r3, [r3, #0]
  41f05c:	3903      	subs	r1, #3
  41f05e:	6800      	ldr	r0, [r0, #0]
  41f060:	4798      	blx	r3
  41f062:	4606      	mov	r6, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f064:	4638      	mov	r0, r7
  41f066:	4b14      	ldr	r3, [pc, #80]	; (41f0b8 <lv_label_revert_dots+0x80>)
  41f068:	4798      	blx	r3
    if(ext->dot_tmp_alloc) {
  41f06a:	7cc3      	ldrb	r3, [r0, #19]
  41f06c:	f013 0f01 	tst.w	r3, #1
        return ext->dot.tmp_ptr;
  41f070:	bf14      	ite	ne
  41f072:	6840      	ldrne	r0, [r0, #4]
        return ext->dot.tmp;
  41f074:	3004      	addeq	r0, #4
    while(ext->text[byte_i + i] != '\0') {
  41f076:	6823      	ldr	r3, [r4, #0]
  41f078:	eb03 0e06 	add.w	lr, r3, r6
  41f07c:	5d9b      	ldrb	r3, [r3, r6]
  41f07e:	b1c3      	cbz	r3, 41f0b2 <lv_label_revert_dots+0x7a>
  41f080:	2500      	movs	r5, #0
  41f082:	462b      	mov	r3, r5
        ext->text[byte_i + i] = dot_tmp[i];
  41f084:	5d42      	ldrb	r2, [r0, r5]
  41f086:	f88e 2000 	strb.w	r2, [lr]
        i++;
  41f08a:	3301      	adds	r3, #1
  41f08c:	b2db      	uxtb	r3, r3
    while(ext->text[byte_i + i] != '\0') {
  41f08e:	461d      	mov	r5, r3
  41f090:	18f2      	adds	r2, r6, r3
  41f092:	6821      	ldr	r1, [r4, #0]
  41f094:	eb01 0e02 	add.w	lr, r1, r2
  41f098:	5c8a      	ldrb	r2, [r1, r2]
  41f09a:	2a00      	cmp	r2, #0
  41f09c:	d1f2      	bne.n	41f084 <lv_label_revert_dots+0x4c>
    ext->text[byte_i + i] = dot_tmp[i];
  41f09e:	5d43      	ldrb	r3, [r0, r5]
  41f0a0:	f88e 3000 	strb.w	r3, [lr]
    lv_label_dot_tmp_free(label);
  41f0a4:	4638      	mov	r0, r7
  41f0a6:	4b06      	ldr	r3, [pc, #24]	; (41f0c0 <lv_label_revert_dots+0x88>)
  41f0a8:	4798      	blx	r3
    ext->dot_end = LV_LABEL_DOT_END_INV;
  41f0aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41f0ae:	60a3      	str	r3, [r4, #8]
  41f0b0:	e7cb      	b.n	41f04a <lv_label_revert_dots+0x12>
    while(ext->text[byte_i + i] != '\0') {
  41f0b2:	2500      	movs	r5, #0
  41f0b4:	e7f3      	b.n	41f09e <lv_label_revert_dots+0x66>
  41f0b6:	bf00      	nop
  41f0b8:	00407281 	.word	0x00407281
  41f0bc:	20400080 	.word	0x20400080
  41f0c0:	0041f009 	.word	0x0041f009

0041f0c4 <get_txt_coords>:
}

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
  41f0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41f0c8:	4606      	mov	r6, r0
  41f0ca:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
  41f0cc:	4b12      	ldr	r3, [pc, #72]	; (41f118 <get_txt_coords+0x54>)
  41f0ce:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41f0d0:	2212      	movs	r2, #18
  41f0d2:	2100      	movs	r1, #0
  41f0d4:	4630      	mov	r0, r6
  41f0d6:	4d11      	ldr	r5, [pc, #68]	; (41f11c <get_txt_coords+0x58>)
  41f0d8:	47a8      	blx	r5
  41f0da:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41f0dc:	2213      	movs	r2, #19
  41f0de:	2100      	movs	r1, #0
  41f0e0:	4630      	mov	r0, r6
  41f0e2:	47a8      	blx	r5
  41f0e4:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41f0e6:	2210      	movs	r2, #16
  41f0e8:	2100      	movs	r1, #0
  41f0ea:	4630      	mov	r0, r6
  41f0ec:	47a8      	blx	r5
  41f0ee:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41f0f0:	2211      	movs	r2, #17
  41f0f2:	2100      	movs	r1, #0
  41f0f4:	4630      	mov	r0, r6
  41f0f6:	47a8      	blx	r5

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
  41f0f8:	8823      	ldrh	r3, [r4, #0]
  41f0fa:	4498      	add	r8, r3
  41f0fc:	f8a4 8000 	strh.w	r8, [r4]
    area->x2 -= right;
  41f100:	88a3      	ldrh	r3, [r4, #4]
  41f102:	eba3 0309 	sub.w	r3, r3, r9
  41f106:	80a3      	strh	r3, [r4, #4]
    area->y1 += top;
  41f108:	8863      	ldrh	r3, [r4, #2]
  41f10a:	441f      	add	r7, r3
  41f10c:	8067      	strh	r7, [r4, #2]
    area->y2 -= bottom;
  41f10e:	88e3      	ldrh	r3, [r4, #6]
  41f110:	1a18      	subs	r0, r3, r0
  41f112:	80e0      	strh	r0, [r4, #6]
  41f114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41f118:	004050d1 	.word	0x004050d1
  41f11c:	004069b5 	.word	0x004069b5

0041f120 <lv_label_set_dot_tmp>:
{
  41f120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41f122:	4606      	mov	r6, r0
  41f124:	460f      	mov	r7, r1
  41f126:	4615      	mov	r5, r2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f128:	4b13      	ldr	r3, [pc, #76]	; (41f178 <lv_label_set_dot_tmp+0x58>)
  41f12a:	4798      	blx	r3
  41f12c:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
  41f12e:	4630      	mov	r0, r6
  41f130:	4b12      	ldr	r3, [pc, #72]	; (41f17c <lv_label_set_dot_tmp+0x5c>)
  41f132:	4798      	blx	r3
    if(len > sizeof(char *)) {
  41f134:	2d04      	cmp	r5, #4
  41f136:	d911      	bls.n	41f15c <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
  41f138:	1c68      	adds	r0, r5, #1
  41f13a:	4b11      	ldr	r3, [pc, #68]	; (41f180 <lv_label_set_dot_tmp+0x60>)
  41f13c:	4798      	blx	r3
  41f13e:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
  41f140:	b1b8      	cbz	r0, 41f172 <lv_label_set_dot_tmp+0x52>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
  41f142:	462a      	mov	r2, r5
  41f144:	4639      	mov	r1, r7
  41f146:	4b0f      	ldr	r3, [pc, #60]	; (41f184 <lv_label_set_dot_tmp+0x64>)
  41f148:	4798      	blx	r3
        ext->dot.tmp_ptr[len] = '\0';
  41f14a:	6863      	ldr	r3, [r4, #4]
  41f14c:	2200      	movs	r2, #0
  41f14e:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
  41f150:	7ce3      	ldrb	r3, [r4, #19]
  41f152:	f043 0301 	orr.w	r3, r3, #1
  41f156:	74e3      	strb	r3, [r4, #19]
    return true;
  41f158:	2001      	movs	r0, #1
  41f15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
  41f15c:	7ce3      	ldrb	r3, [r4, #19]
  41f15e:	f36f 0300 	bfc	r3, #0, #1
  41f162:	74e3      	strb	r3, [r4, #19]
        _lv_memcpy(ext->dot.tmp, data, len);
  41f164:	462a      	mov	r2, r5
  41f166:	4639      	mov	r1, r7
  41f168:	1d20      	adds	r0, r4, #4
  41f16a:	4b06      	ldr	r3, [pc, #24]	; (41f184 <lv_label_set_dot_tmp+0x64>)
  41f16c:	4798      	blx	r3
    return true;
  41f16e:	2001      	movs	r0, #1
  41f170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return false;
  41f172:	2000      	movs	r0, #0
}
  41f174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41f176:	bf00      	nop
  41f178:	00407281 	.word	0x00407281
  41f17c:	0041f009 	.word	0x0041f009
  41f180:	004157c9 	.word	0x004157c9
  41f184:	00415a1d 	.word	0x00415a1d

0041f188 <lv_label_set_offset_y>:
{
  41f188:	b538      	push	{r3, r4, r5, lr}
  41f18a:	4604      	mov	r4, r0
  41f18c:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f18e:	4b03      	ldr	r3, [pc, #12]	; (41f19c <lv_label_set_offset_y+0x14>)
  41f190:	4798      	blx	r3
    ext->offset.y        = y;
  41f192:	8205      	strh	r5, [r0, #16]
    lv_obj_invalidate(label);
  41f194:	4620      	mov	r0, r4
  41f196:	4b02      	ldr	r3, [pc, #8]	; (41f1a0 <lv_label_set_offset_y+0x18>)
  41f198:	4798      	blx	r3
  41f19a:	bd38      	pop	{r3, r4, r5, pc}
  41f19c:	00407281 	.word	0x00407281
  41f1a0:	00405565 	.word	0x00405565

0041f1a4 <lv_label_set_offset_x>:
{
  41f1a4:	b538      	push	{r3, r4, r5, lr}
  41f1a6:	4604      	mov	r4, r0
  41f1a8:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f1aa:	4b03      	ldr	r3, [pc, #12]	; (41f1b8 <lv_label_set_offset_x+0x14>)
  41f1ac:	4798      	blx	r3
    ext->offset.x        = x;
  41f1ae:	81c5      	strh	r5, [r0, #14]
    lv_obj_invalidate(label);
  41f1b0:	4620      	mov	r0, r4
  41f1b2:	4b02      	ldr	r3, [pc, #8]	; (41f1bc <lv_label_set_offset_x+0x18>)
  41f1b4:	4798      	blx	r3
  41f1b6:	bd38      	pop	{r3, r4, r5, pc}
  41f1b8:	00407281 	.word	0x00407281
  41f1bc:	00405565 	.word	0x00405565

0041f1c0 <lv_label_set_align>:
{
  41f1c0:	b538      	push	{r3, r4, r5, lr}
  41f1c2:	4604      	mov	r4, r0
  41f1c4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f1c6:	4b0c      	ldr	r3, [pc, #48]	; (41f1f8 <lv_label_set_align+0x38>)
  41f1c8:	4798      	blx	r3
  41f1ca:	b928      	cbnz	r0, 41f1d8 <lv_label_set_align+0x18>
  41f1cc:	4622      	mov	r2, r4
  41f1ce:	2300      	movs	r3, #0
  41f1d0:	480a      	ldr	r0, [pc, #40]	; (41f1fc <lv_label_set_align+0x3c>)
  41f1d2:	490b      	ldr	r1, [pc, #44]	; (41f200 <lv_label_set_align+0x40>)
  41f1d4:	4788      	blx	r1
  41f1d6:	e7fe      	b.n	41f1d6 <lv_label_set_align+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f1d8:	4620      	mov	r0, r4
  41f1da:	4b0a      	ldr	r3, [pc, #40]	; (41f204 <lv_label_set_align+0x44>)
  41f1dc:	4798      	blx	r3
    if(ext->align == align) return;
  41f1de:	7c83      	ldrb	r3, [r0, #18]
  41f1e0:	f3c3 1301 	ubfx	r3, r3, #4, #2
  41f1e4:	42ab      	cmp	r3, r5
  41f1e6:	d006      	beq.n	41f1f6 <lv_label_set_align+0x36>
    ext->align = align;
  41f1e8:	7c83      	ldrb	r3, [r0, #18]
  41f1ea:	f365 1305 	bfi	r3, r5, #4, #2
  41f1ee:	7483      	strb	r3, [r0, #18]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
  41f1f0:	4620      	mov	r0, r4
  41f1f2:	4b05      	ldr	r3, [pc, #20]	; (41f208 <lv_label_set_align+0x48>)
  41f1f4:	4798      	blx	r3
  41f1f6:	bd38      	pop	{r3, r4, r5, pc}
  41f1f8:	004150ef 	.word	0x004150ef
  41f1fc:	00425a74 	.word	0x00425a74
  41f200:	004150f9 	.word	0x004150f9
  41f204:	00407281 	.word	0x00407281
  41f208:	00405565 	.word	0x00405565

0041f20c <lv_label_get_text>:
{
  41f20c:	b510      	push	{r4, lr}
  41f20e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f210:	4b06      	ldr	r3, [pc, #24]	; (41f22c <lv_label_get_text+0x20>)
  41f212:	4798      	blx	r3
  41f214:	b928      	cbnz	r0, 41f222 <lv_label_get_text+0x16>
  41f216:	4622      	mov	r2, r4
  41f218:	2300      	movs	r3, #0
  41f21a:	4805      	ldr	r0, [pc, #20]	; (41f230 <lv_label_get_text+0x24>)
  41f21c:	4905      	ldr	r1, [pc, #20]	; (41f234 <lv_label_get_text+0x28>)
  41f21e:	4788      	blx	r1
  41f220:	e7fe      	b.n	41f220 <lv_label_get_text+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f222:	4620      	mov	r0, r4
  41f224:	4b04      	ldr	r3, [pc, #16]	; (41f238 <lv_label_get_text+0x2c>)
  41f226:	4798      	blx	r3
}
  41f228:	6800      	ldr	r0, [r0, #0]
  41f22a:	bd10      	pop	{r4, pc}
  41f22c:	004150ef 	.word	0x004150ef
  41f230:	00425a74 	.word	0x00425a74
  41f234:	004150f9 	.word	0x004150f9
  41f238:	00407281 	.word	0x00407281

0041f23c <lv_label_get_long_mode>:
{
  41f23c:	b510      	push	{r4, lr}
  41f23e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f240:	4b07      	ldr	r3, [pc, #28]	; (41f260 <lv_label_get_long_mode+0x24>)
  41f242:	4798      	blx	r3
  41f244:	b928      	cbnz	r0, 41f252 <lv_label_get_long_mode+0x16>
  41f246:	4622      	mov	r2, r4
  41f248:	2300      	movs	r3, #0
  41f24a:	4806      	ldr	r0, [pc, #24]	; (41f264 <lv_label_get_long_mode+0x28>)
  41f24c:	4906      	ldr	r1, [pc, #24]	; (41f268 <lv_label_get_long_mode+0x2c>)
  41f24e:	4788      	blx	r1
  41f250:	e7fe      	b.n	41f250 <lv_label_get_long_mode+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f252:	4620      	mov	r0, r4
  41f254:	4b05      	ldr	r3, [pc, #20]	; (41f26c <lv_label_get_long_mode+0x30>)
  41f256:	4798      	blx	r3
    return ext->long_mode;
  41f258:	7c80      	ldrb	r0, [r0, #18]
}
  41f25a:	f000 0007 	and.w	r0, r0, #7
  41f25e:	bd10      	pop	{r4, pc}
  41f260:	004150ef 	.word	0x004150ef
  41f264:	00425a74 	.word	0x00425a74
  41f268:	004150f9 	.word	0x004150f9
  41f26c:	00407281 	.word	0x00407281

0041f270 <lv_label_get_align>:
{
  41f270:	b510      	push	{r4, lr}
  41f272:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f274:	4b09      	ldr	r3, [pc, #36]	; (41f29c <lv_label_get_align+0x2c>)
  41f276:	4798      	blx	r3
  41f278:	b928      	cbnz	r0, 41f286 <lv_label_get_align+0x16>
  41f27a:	4622      	mov	r2, r4
  41f27c:	2300      	movs	r3, #0
  41f27e:	4808      	ldr	r0, [pc, #32]	; (41f2a0 <lv_label_get_align+0x30>)
  41f280:	4908      	ldr	r1, [pc, #32]	; (41f2a4 <lv_label_get_align+0x34>)
  41f282:	4788      	blx	r1
  41f284:	e7fe      	b.n	41f284 <lv_label_get_align+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f286:	4620      	mov	r0, r4
  41f288:	4b07      	ldr	r3, [pc, #28]	; (41f2a8 <lv_label_get_align+0x38>)
  41f28a:	4798      	blx	r3
    lv_label_align_t align = ext->align;
  41f28c:	7c80      	ldrb	r0, [r0, #18]
  41f28e:	f3c0 1001 	ubfx	r0, r0, #4, #2
        align = LV_LABEL_ALIGN_LEFT;
  41f292:	2803      	cmp	r0, #3
}
  41f294:	bf08      	it	eq
  41f296:	2000      	moveq	r0, #0
  41f298:	bd10      	pop	{r4, pc}
  41f29a:	bf00      	nop
  41f29c:	004150ef 	.word	0x004150ef
  41f2a0:	00425a74 	.word	0x00425a74
  41f2a4:	004150f9 	.word	0x004150f9
  41f2a8:	00407281 	.word	0x00407281

0041f2ac <lv_label_get_recolor>:
{
  41f2ac:	b510      	push	{r4, lr}
  41f2ae:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f2b0:	4b07      	ldr	r3, [pc, #28]	; (41f2d0 <lv_label_get_recolor+0x24>)
  41f2b2:	4798      	blx	r3
  41f2b4:	b928      	cbnz	r0, 41f2c2 <lv_label_get_recolor+0x16>
  41f2b6:	4622      	mov	r2, r4
  41f2b8:	2300      	movs	r3, #0
  41f2ba:	4806      	ldr	r0, [pc, #24]	; (41f2d4 <lv_label_get_recolor+0x28>)
  41f2bc:	4906      	ldr	r1, [pc, #24]	; (41f2d8 <lv_label_get_recolor+0x2c>)
  41f2be:	4788      	blx	r1
  41f2c0:	e7fe      	b.n	41f2c0 <lv_label_get_recolor+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f2c2:	4620      	mov	r0, r4
  41f2c4:	4b05      	ldr	r3, [pc, #20]	; (41f2dc <lv_label_get_recolor+0x30>)
  41f2c6:	4798      	blx	r3
    return ext->recolor == 0 ? false : true;
  41f2c8:	7c80      	ldrb	r0, [r0, #18]
}
  41f2ca:	f3c0 1080 	ubfx	r0, r0, #6, #1
  41f2ce:	bd10      	pop	{r4, pc}
  41f2d0:	004150ef 	.word	0x004150ef
  41f2d4:	00425a74 	.word	0x00425a74
  41f2d8:	004150f9 	.word	0x004150f9
  41f2dc:	00407281 	.word	0x00407281

0041f2e0 <lv_label_get_letter_on>:
{
  41f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f2e4:	b08f      	sub	sp, #60	; 0x3c
  41f2e6:	4604      	mov	r4, r0
  41f2e8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f2ea:	4b99      	ldr	r3, [pc, #612]	; (41f550 <lv_label_get_letter_on+0x270>)
  41f2ec:	4798      	blx	r3
  41f2ee:	b928      	cbnz	r0, 41f2fc <lv_label_get_letter_on+0x1c>
  41f2f0:	4622      	mov	r2, r4
  41f2f2:	2300      	movs	r3, #0
  41f2f4:	4897      	ldr	r0, [pc, #604]	; (41f554 <lv_label_get_letter_on+0x274>)
  41f2f6:	4998      	ldr	r1, [pc, #608]	; (41f558 <lv_label_get_letter_on+0x278>)
  41f2f8:	4788      	blx	r1
  41f2fa:	e7fe      	b.n	41f2fa <lv_label_get_letter_on+0x1a>
    LV_ASSERT_NULL(pos_in);
  41f2fc:	4628      	mov	r0, r5
  41f2fe:	4b94      	ldr	r3, [pc, #592]	; (41f550 <lv_label_get_letter_on+0x270>)
  41f300:	4798      	blx	r3
  41f302:	b928      	cbnz	r0, 41f310 <lv_label_get_letter_on+0x30>
  41f304:	462a      	mov	r2, r5
  41f306:	2300      	movs	r3, #0
  41f308:	4892      	ldr	r0, [pc, #584]	; (41f554 <lv_label_get_letter_on+0x274>)
  41f30a:	4993      	ldr	r1, [pc, #588]	; (41f558 <lv_label_get_letter_on+0x278>)
  41f30c:	4788      	blx	r1
  41f30e:	e7fe      	b.n	41f30e <lv_label_get_letter_on+0x2e>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
  41f310:	882e      	ldrh	r6, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41f312:	2212      	movs	r2, #18
  41f314:	2100      	movs	r1, #0
  41f316:	4620      	mov	r0, r4
  41f318:	f8df 826c 	ldr.w	r8, [pc, #620]	; 41f588 <lv_label_get_letter_on+0x2a8>
  41f31c:	47c0      	blx	r8
  41f31e:	1a30      	subs	r0, r6, r0
  41f320:	b203      	sxth	r3, r0
  41f322:	9304      	str	r3, [sp, #16]
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
  41f324:	886d      	ldrh	r5, [r5, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41f326:	2210      	movs	r2, #16
  41f328:	2100      	movs	r1, #0
  41f32a:	4620      	mov	r0, r4
  41f32c:	47c0      	blx	r8
  41f32e:	1a28      	subs	r0, r5, r0
  41f330:	b203      	sxth	r3, r0
  41f332:	9305      	str	r3, [sp, #20]
    get_txt_coords(label, &txt_coords);
  41f334:	a90c      	add	r1, sp, #48	; 0x30
  41f336:	4620      	mov	r0, r4
  41f338:	4b88      	ldr	r3, [pc, #544]	; (41f55c <lv_label_get_letter_on+0x27c>)
  41f33a:	4798      	blx	r3
    const char * txt         = lv_label_get_text(label);
  41f33c:	4620      	mov	r0, r4
  41f33e:	4b88      	ldr	r3, [pc, #544]	; (41f560 <lv_label_get_letter_on+0x280>)
  41f340:	4798      	blx	r3
  41f342:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
  41f344:	4620      	mov	r0, r4
  41f346:	4b87      	ldr	r3, [pc, #540]	; (41f564 <lv_label_get_letter_on+0x284>)
  41f348:	4798      	blx	r3
  41f34a:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f34c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  41f350:	3301      	adds	r3, #1
  41f352:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  41f356:	1a9b      	subs	r3, r3, r2
  41f358:	b21b      	sxth	r3, r3
  41f35a:	9306      	str	r3, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41f35c:	f248 028e 	movw	r2, #32910	; 0x808e
  41f360:	2100      	movs	r1, #0
  41f362:	4620      	mov	r0, r4
  41f364:	4b80      	ldr	r3, [pc, #512]	; (41f568 <lv_label_get_letter_on+0x288>)
  41f366:	4798      	blx	r3
  41f368:	4681      	mov	r9, r0
  41f36a:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41f36c:	f248 0281 	movw	r2, #32897	; 0x8081
  41f370:	2100      	movs	r1, #0
  41f372:	4620      	mov	r0, r4
  41f374:	47c0      	blx	r8
  41f376:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  41f378:	f248 0280 	movw	r2, #32896	; 0x8080
  41f37c:	2100      	movs	r1, #0
  41f37e:	4620      	mov	r0, r4
  41f380:	47c0      	blx	r8
  41f382:	9003      	str	r0, [sp, #12]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  41f384:	f9b9 b008 	ldrsh.w	fp, [r9, #8]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41f388:	7cab      	ldrb	r3, [r5, #18]
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
  41f38a:	f3c3 1a80 	ubfx	sl, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41f38e:	f013 0f80 	tst.w	r3, #128	; 0x80
  41f392:	bf18      	it	ne
  41f394:	f04a 0a02 	orrne.w	sl, sl, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  41f398:	f013 0f07 	tst.w	r3, #7
  41f39c:	bf08      	it	eq
  41f39e:	f04a 0a10 	orreq.w	sl, sl, #16
    lv_label_align_t align = lv_label_get_align(label);
  41f3a2:	4620      	mov	r0, r4
  41f3a4:	4b71      	ldr	r3, [pc, #452]	; (41f56c <lv_label_get_letter_on+0x28c>)
  41f3a6:	4798      	blx	r3
  41f3a8:	4681      	mov	r9, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  41f3aa:	2801      	cmp	r0, #1
  41f3ac:	d136      	bne.n	41f41c <lv_label_get_letter_on+0x13c>
  41f3ae:	f04a 0a04 	orr.w	sl, sl, #4
    while(txt[line_start] != '\0') {
  41f3b2:	783b      	ldrb	r3, [r7, #0]
  41f3b4:	2b00      	cmp	r3, #0
  41f3b6:	d139      	bne.n	41f42c <lv_label_get_letter_on+0x14c>
  41f3b8:	46b8      	mov	r8, r7
  41f3ba:	2500      	movs	r5, #0
  41f3bc:	462e      	mov	r6, r5
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  41f3be:	f8cd a000 	str.w	sl, [sp]
  41f3c2:	9b03      	ldr	r3, [sp, #12]
  41f3c4:	9a02      	ldr	r2, [sp, #8]
  41f3c6:	1b71      	subs	r1, r6, r5
  41f3c8:	4640      	mov	r0, r8
  41f3ca:	4c69      	ldr	r4, [pc, #420]	; (41f570 <lv_label_get_letter_on+0x290>)
  41f3cc:	47a0      	blx	r4
  41f3ce:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  41f3d2:	3301      	adds	r3, #1
  41f3d4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  41f3d8:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
  41f3da:	b21b      	sxth	r3, r3
  41f3dc:	2b00      	cmp	r3, #0
  41f3de:	bfb8      	it	lt
  41f3e0:	3301      	addlt	r3, #1
  41f3e2:	105c      	asrs	r4, r3, #1
  41f3e4:	4603      	mov	r3, r0
  41f3e6:	2800      	cmp	r0, #0
  41f3e8:	bfb8      	it	lt
  41f3ea:	1c43      	addlt	r3, r0, #1
  41f3ec:	eba4 0463 	sub.w	r4, r4, r3, asr #1
  41f3f0:	b224      	sxth	r4, r4
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  41f3f2:	2300      	movs	r3, #0
  41f3f4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i = 0;
  41f3f8:	930a      	str	r3, [sp, #40]	; 0x28
    if(new_line_start > 0) {
  41f3fa:	2e00      	cmp	r6, #0
  41f3fc:	f040 8098 	bne.w	41f530 <lv_label_get_letter_on+0x250>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
  41f400:	4e5c      	ldr	r6, [pc, #368]	; (41f574 <lv_label_get_letter_on+0x294>)
  41f402:	6833      	ldr	r3, [r6, #0]
  41f404:	990a      	ldr	r1, [sp, #40]	; 0x28
  41f406:	4640      	mov	r0, r8
  41f408:	4798      	blx	r3
  41f40a:	4604      	mov	r4, r0
    return logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
  41f40c:	6833      	ldr	r3, [r6, #0]
  41f40e:	4629      	mov	r1, r5
  41f410:	4638      	mov	r0, r7
  41f412:	4798      	blx	r3
  41f414:	4420      	add	r0, r4
}
  41f416:	b00f      	add	sp, #60	; 0x3c
  41f418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  41f41c:	2802      	cmp	r0, #2
  41f41e:	f040 808e 	bne.w	41f53e <lv_label_get_letter_on+0x25e>
  41f422:	f04a 0a08 	orr.w	sl, sl, #8
    while(txt[line_start] != '\0') {
  41f426:	783b      	ldrb	r3, [r7, #0]
  41f428:	2b00      	cmp	r3, #0
  41f42a:	d043      	beq.n	41f4b4 <lv_label_get_letter_on+0x1d4>
{
  41f42c:	46b8      	mov	r8, r7
  41f42e:	2400      	movs	r4, #0
  41f430:	4625      	mov	r5, r4
        y += letter_height + line_space;
  41f432:	eb0b 0306 	add.w	r3, fp, r6
  41f436:	9307      	str	r3, [sp, #28]
  41f438:	e008      	b.n	41f44c <lv_label_get_letter_on+0x16c>
  41f43a:	9b07      	ldr	r3, [sp, #28]
  41f43c:	441c      	add	r4, r3
  41f43e:	b224      	sxth	r4, r4
    while(txt[line_start] != '\0') {
  41f440:	eb07 0800 	add.w	r8, r7, r0
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
  41f444:	4605      	mov	r5, r0
    while(txt[line_start] != '\0') {
  41f446:	5c3b      	ldrb	r3, [r7, r0]
  41f448:	2b00      	cmp	r3, #0
  41f44a:	d031      	beq.n	41f4b0 <lv_label_get_letter_on+0x1d0>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
  41f44c:	f8cd a000 	str.w	sl, [sp]
  41f450:	9b06      	ldr	r3, [sp, #24]
  41f452:	9a03      	ldr	r2, [sp, #12]
  41f454:	9902      	ldr	r1, [sp, #8]
  41f456:	4640      	mov	r0, r8
  41f458:	4e47      	ldr	r6, [pc, #284]	; (41f578 <lv_label_get_letter_on+0x298>)
  41f45a:	47b0      	blx	r6
  41f45c:	4428      	add	r0, r5
        if(pos.y <= y + letter_height) {
  41f45e:	eb04 030b 	add.w	r3, r4, fp
  41f462:	9a05      	ldr	r2, [sp, #20]
  41f464:	429a      	cmp	r2, r3
  41f466:	dce8      	bgt.n	41f43a <lv_label_get_letter_on+0x15a>
  41f468:	4606      	mov	r6, r0
            uint32_t tmp = new_line_start;
  41f46a:	a90e      	add	r1, sp, #56	; 0x38
  41f46c:	f841 0d14 	str.w	r0, [r1, #-20]!
            letter = _lv_txt_encoded_prev(txt, &tmp);
  41f470:	4b42      	ldr	r3, [pc, #264]	; (41f57c <lv_label_get_letter_on+0x29c>)
  41f472:	681b      	ldr	r3, [r3, #0]
  41f474:	4638      	mov	r0, r7
  41f476:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
  41f478:	280a      	cmp	r0, #10
  41f47a:	d002      	beq.n	41f482 <lv_label_get_letter_on+0x1a2>
  41f47c:	5dbb      	ldrb	r3, [r7, r6]
  41f47e:	b903      	cbnz	r3, 41f482 <lv_label_get_letter_on+0x1a2>
  41f480:	3601      	adds	r6, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
  41f482:	f1b9 0f01 	cmp.w	r9, #1
  41f486:	d09a      	beq.n	41f3be <lv_label_get_letter_on+0xde>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
  41f488:	f1b9 0f02 	cmp.w	r9, #2
  41f48c:	d116      	bne.n	41f4bc <lv_label_get_letter_on+0x1dc>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  41f48e:	f8cd a000 	str.w	sl, [sp]
  41f492:	9b03      	ldr	r3, [sp, #12]
  41f494:	9a02      	ldr	r2, [sp, #8]
  41f496:	1b71      	subs	r1, r6, r5
  41f498:	4640      	mov	r0, r8
  41f49a:	4c35      	ldr	r4, [pc, #212]	; (41f570 <lv_label_get_letter_on+0x290>)
  41f49c:	47a0      	blx	r4
  41f49e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  41f4a2:	3301      	adds	r3, #1
  41f4a4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  41f4a8:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
  41f4aa:	1a1b      	subs	r3, r3, r0
  41f4ac:	b21c      	sxth	r4, r3
  41f4ae:	e7a0      	b.n	41f3f2 <lv_label_get_letter_on+0x112>
  41f4b0:	4606      	mov	r6, r0
  41f4b2:	e7e6      	b.n	41f482 <lv_label_get_letter_on+0x1a2>
    while(txt[line_start] != '\0') {
  41f4b4:	46b8      	mov	r8, r7
  41f4b6:	2500      	movs	r5, #0
  41f4b8:	462e      	mov	r6, r5
  41f4ba:	e7e8      	b.n	41f48e <lv_label_get_letter_on+0x1ae>
    lv_coord_t x = 0;
  41f4bc:	2400      	movs	r4, #0
  41f4be:	e798      	b.n	41f3f2 <lv_label_get_letter_on+0x112>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
  41f4c0:	9a06      	ldr	r2, [sp, #24]
  41f4c2:	9905      	ldr	r1, [sp, #20]
  41f4c4:	9802      	ldr	r0, [sp, #8]
  41f4c6:	4b2e      	ldr	r3, [pc, #184]	; (41f580 <lv_label_get_letter_on+0x2a0>)
  41f4c8:	4798      	blx	r3
            if(pos.x < x + gw || i + line_start == new_line_start || txt[i_act + line_start] == '\0') {
  41f4ca:	fa04 f380 	sxtah	r3, r4, r0
  41f4ce:	9a04      	ldr	r2, [sp, #16]
  41f4d0:	429a      	cmp	r2, r3
  41f4d2:	db2a      	blt.n	41f52a <lv_label_get_letter_on+0x24a>
  41f4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41f4d6:	195a      	adds	r2, r3, r5
  41f4d8:	42b2      	cmp	r2, r6
  41f4da:	d026      	beq.n	41f52a <lv_label_get_letter_on+0x24a>
  41f4dc:	eb07 020b 	add.w	r2, r7, fp
  41f4e0:	5d52      	ldrb	r2, [r2, r5]
  41f4e2:	b312      	cbz	r2, 41f52a <lv_label_get_letter_on+0x24a>
            x += letter_space;
  41f4e4:	9a03      	ldr	r2, [sp, #12]
  41f4e6:	4414      	add	r4, r2
  41f4e8:	4420      	add	r0, r4
  41f4ea:	b204      	sxth	r4, r0
            i_act = i;
  41f4ec:	469b      	mov	fp, r3
        while(i + line_start < new_line_start) {
  41f4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41f4f0:	442b      	add	r3, r5
  41f4f2:	42b3      	cmp	r3, r6
  41f4f4:	d284      	bcs.n	41f400 <lv_label_get_letter_on+0x120>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
  41f4f6:	f8d9 3000 	ldr.w	r3, [r9]
  41f4fa:	a90a      	add	r1, sp, #40	; 0x28
  41f4fc:	4640      	mov	r0, r8
  41f4fe:	4798      	blx	r3
  41f500:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  41f502:	f8d9 3000 	ldr.w	r3, [r9]
  41f506:	2100      	movs	r1, #0
  41f508:	980a      	ldr	r0, [sp, #40]	; 0x28
  41f50a:	4440      	add	r0, r8
  41f50c:	4798      	blx	r3
  41f50e:	9006      	str	r0, [sp, #24]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  41f510:	f1ba 0f00 	cmp.w	sl, #0
  41f514:	d0d4      	beq.n	41f4c0 <lv_label_get_letter_on+0x1e0>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
  41f516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41f518:	f818 1003 	ldrb.w	r1, [r8, r3]
  41f51c:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
  41f520:	4b18      	ldr	r3, [pc, #96]	; (41f584 <lv_label_get_letter_on+0x2a4>)
  41f522:	4798      	blx	r3
  41f524:	2800      	cmp	r0, #0
  41f526:	d1e2      	bne.n	41f4ee <lv_label_get_letter_on+0x20e>
  41f528:	e7ca      	b.n	41f4c0 <lv_label_get_letter_on+0x1e0>
                i = i_act;
  41f52a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
                break;
  41f52e:	e767      	b.n	41f400 <lv_label_get_letter_on+0x120>
  41f530:	f04f 0b00 	mov.w	fp, #0
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
  41f534:	f8df 9054 	ldr.w	r9, [pc, #84]	; 41f58c <lv_label_get_letter_on+0x2ac>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  41f538:	f00a 0a01 	and.w	sl, sl, #1
  41f53c:	e7d7      	b.n	41f4ee <lv_label_get_letter_on+0x20e>
    while(txt[line_start] != '\0') {
  41f53e:	783b      	ldrb	r3, [r7, #0]
  41f540:	2b00      	cmp	r3, #0
  41f542:	f47f af73 	bne.w	41f42c <lv_label_get_letter_on+0x14c>
  41f546:	46b8      	mov	r8, r7
  41f548:	2500      	movs	r5, #0
  41f54a:	462e      	mov	r6, r5
    lv_coord_t x = 0;
  41f54c:	462c      	mov	r4, r5
  41f54e:	e750      	b.n	41f3f2 <lv_label_get_letter_on+0x112>
  41f550:	004150ef 	.word	0x004150ef
  41f554:	00425a74 	.word	0x00425a74
  41f558:	004150f9 	.word	0x004150f9
  41f55c:	0041f0c5 	.word	0x0041f0c5
  41f560:	0041f20d 	.word	0x0041f20d
  41f564:	00407281 	.word	0x00407281
  41f568:	004068c1 	.word	0x004068c1
  41f56c:	0041f271 	.word	0x0041f271
  41f570:	004171bd 	.word	0x004171bd
  41f574:	20400084 	.word	0x20400084
  41f578:	00416f95 	.word	0x00416f95
  41f57c:	2040008c 	.word	0x2040008c
  41f580:	00412f7d 	.word	0x00412f7d
  41f584:	00416f4d 	.word	0x00416f4d
  41f588:	004069b5 	.word	0x004069b5
  41f58c:	20400088 	.word	0x20400088

0041f590 <lv_label_get_text_sel_start>:
{
  41f590:	b510      	push	{r4, lr}
  41f592:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f594:	4b05      	ldr	r3, [pc, #20]	; (41f5ac <lv_label_get_text_sel_start+0x1c>)
  41f596:	4798      	blx	r3
  41f598:	b110      	cbz	r0, 41f5a0 <lv_label_get_text_sel_start+0x10>
}
  41f59a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  41f59e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f5a0:	4622      	mov	r2, r4
  41f5a2:	2300      	movs	r3, #0
  41f5a4:	4802      	ldr	r0, [pc, #8]	; (41f5b0 <lv_label_get_text_sel_start+0x20>)
  41f5a6:	4903      	ldr	r1, [pc, #12]	; (41f5b4 <lv_label_get_text_sel_start+0x24>)
  41f5a8:	4788      	blx	r1
  41f5aa:	e7fe      	b.n	41f5aa <lv_label_get_text_sel_start+0x1a>
  41f5ac:	004150ef 	.word	0x004150ef
  41f5b0:	00425a74 	.word	0x00425a74
  41f5b4:	004150f9 	.word	0x004150f9

0041f5b8 <lv_label_get_text_sel_end>:
{
  41f5b8:	b510      	push	{r4, lr}
  41f5ba:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f5bc:	4b05      	ldr	r3, [pc, #20]	; (41f5d4 <lv_label_get_text_sel_end+0x1c>)
  41f5be:	4798      	blx	r3
  41f5c0:	b110      	cbz	r0, 41f5c8 <lv_label_get_text_sel_end+0x10>
}
  41f5c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  41f5c6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f5c8:	4622      	mov	r2, r4
  41f5ca:	2300      	movs	r3, #0
  41f5cc:	4802      	ldr	r0, [pc, #8]	; (41f5d8 <lv_label_get_text_sel_end+0x20>)
  41f5ce:	4903      	ldr	r1, [pc, #12]	; (41f5dc <lv_label_get_text_sel_end+0x24>)
  41f5d0:	4788      	blx	r1
  41f5d2:	e7fe      	b.n	41f5d2 <lv_label_get_text_sel_end+0x1a>
  41f5d4:	004150ef 	.word	0x004150ef
  41f5d8:	00425a74 	.word	0x00425a74
  41f5dc:	004150f9 	.word	0x004150f9

0041f5e0 <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK)
  41f5e0:	2a02      	cmp	r2, #2
  41f5e2:	f000 811c 	beq.w	41f81e <lv_label_design+0x23e>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41f5e6:	b10a      	cbz	r2, 41f5ec <lv_label_design+0xc>
    return LV_DESIGN_RES_OK;
  41f5e8:	2000      	movs	r0, #0
  41f5ea:	4770      	bx	lr
{
  41f5ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41f5f0:	b0ab      	sub	sp, #172	; 0xac
  41f5f2:	460f      	mov	r7, r1
  41f5f4:	4605      	mov	r5, r0
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f5f6:	4b8b      	ldr	r3, [pc, #556]	; (41f824 <lv_label_design+0x244>)
  41f5f8:	4798      	blx	r3
  41f5fa:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  41f5fc:	2204      	movs	r2, #4
  41f5fe:	2100      	movs	r1, #0
  41f600:	4628      	mov	r0, r5
  41f602:	4c89      	ldr	r4, [pc, #548]	; (41f828 <lv_label_design+0x248>)
  41f604:	47a0      	blx	r4
  41f606:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  41f608:	2205      	movs	r2, #5
  41f60a:	2100      	movs	r1, #0
  41f60c:	4628      	mov	r0, r5
  41f60e:	47a0      	blx	r4
  41f610:	f105 030f 	add.w	r3, r5, #15
  41f614:	f105 0617 	add.w	r6, r5, #23
    uint8_t * d8 = (uint8_t *)dst;
  41f618:	aa06      	add	r2, sp, #24
        *d8 = *s8;
  41f61a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
  41f61e:	f802 4b01 	strb.w	r4, [r2], #1
    while(len) {
  41f622:	42b3      	cmp	r3, r6
  41f624:	d1f9      	bne.n	41f61a <lv_label_design+0x3a>
        bg_coords.x1 -= w;
  41f626:	fa1f f989 	uxth.w	r9, r9
  41f62a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  41f62e:	eba3 0309 	sub.w	r3, r3, r9
  41f632:	f8ad 3018 	strh.w	r3, [sp, #24]
        bg_coords.x2 += w;
  41f636:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  41f63a:	4499      	add	r9, r3
  41f63c:	f8ad 901c 	strh.w	r9, [sp, #28]
        bg_coords.y1 -= h;
  41f640:	b280      	uxth	r0, r0
  41f642:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  41f646:	1a1b      	subs	r3, r3, r0
  41f648:	f8ad 301a 	strh.w	r3, [sp, #26]
        bg_coords.y2 += h;
  41f64c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  41f650:	4418      	add	r0, r3
  41f652:	f8ad 001e 	strh.w	r0, [sp, #30]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
  41f656:	a815      	add	r0, sp, #84	; 0x54
  41f658:	4b74      	ldr	r3, [pc, #464]	; (41f82c <lv_label_design+0x24c>)
  41f65a:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
  41f65c:	aa15      	add	r2, sp, #84	; 0x54
  41f65e:	2100      	movs	r1, #0
  41f660:	4628      	mov	r0, r5
  41f662:	4b73      	ldr	r3, [pc, #460]	; (41f830 <lv_label_design+0x250>)
  41f664:	4798      	blx	r3
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
  41f666:	aa15      	add	r2, sp, #84	; 0x54
  41f668:	4639      	mov	r1, r7
  41f66a:	a806      	add	r0, sp, #24
  41f66c:	4b71      	ldr	r3, [pc, #452]	; (41f834 <lv_label_design+0x254>)
  41f66e:	4798      	blx	r3
        get_txt_coords(label, &txt_coords);
  41f670:	a908      	add	r1, sp, #32
  41f672:	4628      	mov	r0, r5
  41f674:	4b70      	ldr	r3, [pc, #448]	; (41f838 <lv_label_design+0x258>)
  41f676:	4798      	blx	r3
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
  41f678:	aa08      	add	r2, sp, #32
  41f67a:	4639      	mov	r1, r7
  41f67c:	a80a      	add	r0, sp, #40	; 0x28
  41f67e:	4b6f      	ldr	r3, [pc, #444]	; (41f83c <lv_label_design+0x25c>)
  41f680:	4798      	blx	r3
        if(!is_common) return LV_DESIGN_RES_OK;
  41f682:	b910      	cbnz	r0, 41f68a <lv_label_design+0xaa>
}
  41f684:	b02b      	add	sp, #172	; 0xac
  41f686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_label_align_t align = lv_label_get_align(label);
  41f68a:	4628      	mov	r0, r5
  41f68c:	4b6c      	ldr	r3, [pc, #432]	; (41f840 <lv_label_design+0x260>)
  41f68e:	4798      	blx	r3
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41f690:	f898 3012 	ldrb.w	r3, [r8, #18]
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
  41f694:	f3c3 1480 	ubfx	r4, r3, #6, #1
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41f698:	f013 0f80 	tst.w	r3, #128	; 0x80
  41f69c:	bf18      	it	ne
  41f69e:	f044 0402 	orrne.w	r4, r4, #2
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  41f6a2:	f013 0f07 	tst.w	r3, #7
  41f6a6:	bf08      	it	eq
  41f6a8:	f044 0410 	orreq.w	r4, r4, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  41f6ac:	2801      	cmp	r0, #1
  41f6ae:	d036      	beq.n	41f71e <lv_label_design+0x13e>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  41f6b0:	2802      	cmp	r0, #2
  41f6b2:	bf08      	it	eq
  41f6b4:	f044 0408 	orreq.w	r4, r4, #8
        lv_draw_label_dsc_init(&label_draw_dsc);
  41f6b8:	a80c      	add	r0, sp, #48	; 0x30
  41f6ba:	4b62      	ldr	r3, [pc, #392]	; (41f844 <lv_label_design+0x264>)
  41f6bc:	4798      	blx	r3
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
  41f6be:	4628      	mov	r0, r5
  41f6c0:	4b61      	ldr	r3, [pc, #388]	; (41f848 <lv_label_design+0x268>)
  41f6c2:	4798      	blx	r3
  41f6c4:	9011      	str	r0, [sp, #68]	; 0x44
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
  41f6c6:	4628      	mov	r0, r5
  41f6c8:	4b60      	ldr	r3, [pc, #384]	; (41f84c <lv_label_design+0x26c>)
  41f6ca:	4798      	blx	r3
  41f6cc:	9012      	str	r0, [sp, #72]	; 0x48
        label_draw_dsc.ofs_x = ext->offset.x;
  41f6ce:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  41f6d2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        label_draw_dsc.ofs_y = ext->offset.y;
  41f6d6:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  41f6da:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        label_draw_dsc.flag = flag;
  41f6de:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
  41f6e2:	aa0c      	add	r2, sp, #48	; 0x30
  41f6e4:	2100      	movs	r1, #0
  41f6e6:	4628      	mov	r0, r5
  41f6e8:	4b59      	ldr	r3, [pc, #356]	; (41f850 <lv_label_design+0x270>)
  41f6ea:	4798      	blx	r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
  41f6ec:	f898 2012 	ldrb.w	r2, [r8, #18]
  41f6f0:	f002 0307 	and.w	r3, r2, #7
  41f6f4:	3b03      	subs	r3, #3
  41f6f6:	b2db      	uxtb	r3, r3
  41f6f8:	2b01      	cmp	r3, #1
  41f6fa:	d913      	bls.n	41f724 <lv_label_design+0x144>
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  41f6fc:	f8d8 3000 	ldr.w	r3, [r8]
  41f700:	2200      	movs	r2, #0
  41f702:	9200      	str	r2, [sp, #0]
  41f704:	aa0c      	add	r2, sp, #48	; 0x30
  41f706:	a90a      	add	r1, sp, #40	; 0x28
  41f708:	a808      	add	r0, sp, #32
  41f70a:	4d52      	ldr	r5, [pc, #328]	; (41f854 <lv_label_design+0x274>)
  41f70c:	47a8      	blx	r5
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
  41f70e:	f898 3012 	ldrb.w	r3, [r8, #18]
  41f712:	f003 0307 	and.w	r3, r3, #7
  41f716:	2b04      	cmp	r3, #4
  41f718:	d02b      	beq.n	41f772 <lv_label_design+0x192>
    return LV_DESIGN_RES_OK;
  41f71a:	2000      	movs	r0, #0
  41f71c:	e7b2      	b.n	41f684 <lv_label_design+0xa4>
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  41f71e:	f044 0404 	orr.w	r4, r4, #4
  41f722:	e7c9      	b.n	41f6b8 <lv_label_design+0xd8>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
  41f724:	f002 0230 	and.w	r2, r2, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
  41f728:	2a10      	cmp	r2, #16
  41f72a:	d001      	beq.n	41f730 <lv_label_design+0x150>
  41f72c:	2a20      	cmp	r2, #32
  41f72e:	d1e5      	bne.n	41f6fc <lv_label_design+0x11c>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  41f730:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  41f734:	f8d8 1000 	ldr.w	r1, [r8]
  41f738:	9402      	str	r4, [sp, #8]
  41f73a:	f647 4218 	movw	r2, #31768	; 0x7c18
  41f73e:	9201      	str	r2, [sp, #4]
  41f740:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  41f744:	9200      	str	r2, [sp, #0]
  41f746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41f748:	a805      	add	r0, sp, #20
  41f74a:	4d43      	ldr	r5, [pc, #268]	; (41f858 <lv_label_design+0x278>)
  41f74c:	47a8      	blx	r5
  41f74e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  41f752:	3301      	adds	r3, #1
  41f754:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  41f758:	1a9b      	subs	r3, r3, r2
            if(size.x > lv_area_get_width(&txt_coords)) {
  41f75a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  41f75e:	b21b      	sxth	r3, r3
  41f760:	429a      	cmp	r2, r3
  41f762:	ddcb      	ble.n	41f6fc <lv_label_design+0x11c>
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
  41f764:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
  41f768:	f023 030c 	bic.w	r3, r3, #12
  41f76c:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  41f770:	e7c4      	b.n	41f6fc <lv_label_design+0x11c>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  41f772:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  41f776:	f8d8 1000 	ldr.w	r1, [r8]
  41f77a:	9402      	str	r4, [sp, #8]
  41f77c:	f647 4218 	movw	r2, #31768	; 0x7c18
  41f780:	9201      	str	r2, [sp, #4]
  41f782:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  41f786:	9200      	str	r2, [sp, #0]
  41f788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41f78a:	a805      	add	r0, sp, #20
  41f78c:	4c32      	ldr	r4, [pc, #200]	; (41f858 <lv_label_design+0x278>)
  41f78e:	47a0      	blx	r4
            if(size.x > lv_area_get_width(&txt_coords)) {
  41f790:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  41f794:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  41f798:	3301      	adds	r3, #1
  41f79a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
  41f79e:	1a5b      	subs	r3, r3, r1
  41f7a0:	b21b      	sxth	r3, r3
  41f7a2:	429a      	cmp	r2, r3
  41f7a4:	dc20      	bgt.n	41f7e8 <lv_label_design+0x208>
            if(size.y > lv_area_get_height(&txt_coords)) {
  41f7a6:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f7aa:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  41f7ae:	3301      	adds	r3, #1
  41f7b0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  41f7b4:	1a5b      	subs	r3, r3, r1
  41f7b6:	b21b      	sxth	r3, r3
  41f7b8:	429a      	cmp	r2, r3
  41f7ba:	ddae      	ble.n	41f71a <lv_label_design+0x13a>
                label_draw_dsc.ofs_x = ext->offset.x;
  41f7bc:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  41f7c0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  41f7c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
  41f7c6:	891b      	ldrh	r3, [r3, #8]
  41f7c8:	4413      	add	r3, r2
  41f7ca:	f8b8 2010 	ldrh.w	r2, [r8, #16]
  41f7ce:	4413      	add	r3, r2
  41f7d0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  41f7d4:	f8d8 3000 	ldr.w	r3, [r8]
  41f7d8:	2200      	movs	r2, #0
  41f7da:	9200      	str	r2, [sp, #0]
  41f7dc:	aa0c      	add	r2, sp, #48	; 0x30
  41f7de:	a90a      	add	r1, sp, #40	; 0x28
  41f7e0:	a808      	add	r0, sp, #32
  41f7e2:	4c1c      	ldr	r4, [pc, #112]	; (41f854 <lv_label_design+0x274>)
  41f7e4:	47a0      	blx	r4
  41f7e6:	e798      	b.n	41f71a <lv_label_design+0x13a>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
  41f7e8:	f8b8 400e 	ldrh.w	r4, [r8, #14]
  41f7ec:	4422      	add	r2, r4
  41f7ee:	b294      	uxth	r4, r2
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
  41f7f0:	2220      	movs	r2, #32
  41f7f2:	4611      	mov	r1, r2
  41f7f4:	980e      	ldr	r0, [sp, #56]	; 0x38
  41f7f6:	4b19      	ldr	r3, [pc, #100]	; (41f85c <lv_label_design+0x27c>)
  41f7f8:	4798      	blx	r3
  41f7fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
  41f7fe:	4404      	add	r4, r0
  41f800:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y;
  41f804:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  41f808:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  41f80c:	f8d8 3000 	ldr.w	r3, [r8]
  41f810:	2200      	movs	r2, #0
  41f812:	9200      	str	r2, [sp, #0]
  41f814:	aa0c      	add	r2, sp, #48	; 0x30
  41f816:	a90a      	add	r1, sp, #40	; 0x28
  41f818:	a808      	add	r0, sp, #32
  41f81a:	47a8      	blx	r5
  41f81c:	e7c3      	b.n	41f7a6 <lv_label_design+0x1c6>
        return LV_DESIGN_RES_NOT_COVER;
  41f81e:	2002      	movs	r0, #2
  41f820:	4770      	bx	lr
  41f822:	bf00      	nop
  41f824:	00407281 	.word	0x00407281
  41f828:	004069b5 	.word	0x004069b5
  41f82c:	0040fa91 	.word	0x0040fa91
  41f830:	0040754d 	.word	0x0040754d
  41f834:	0040fadd 	.word	0x0040fadd
  41f838:	0041f0c5 	.word	0x0041f0c5
  41f83c:	00414957 	.word	0x00414957
  41f840:	0041f271 	.word	0x0041f271
  41f844:	0040cd3d 	.word	0x0040cd3d
  41f848:	0041f591 	.word	0x0041f591
  41f84c:	0041f5b9 	.word	0x0041f5b9
  41f850:	00407b79 	.word	0x00407b79
  41f854:	0040cd85 	.word	0x0040cd85
  41f858:	0041725d 	.word	0x0041725d
  41f85c:	00412f7d 	.word	0x00412f7d

0041f860 <lv_label_refr_text>:
{
  41f860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f864:	b09b      	sub	sp, #108	; 0x6c
  41f866:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f868:	4b8e      	ldr	r3, [pc, #568]	; (41faa4 <lv_label_refr_text+0x244>)
  41f86a:	4798      	blx	r3
    if(ext->text == NULL) return;
  41f86c:	6803      	ldr	r3, [r0, #0]
  41f86e:	2b00      	cmp	r3, #0
  41f870:	d048      	beq.n	41f904 <lv_label_refr_text+0xa4>
  41f872:	4605      	mov	r5, r0
    get_txt_coords(label, &txt_coords);
  41f874:	a918      	add	r1, sp, #96	; 0x60
  41f876:	4620      	mov	r0, r4
  41f878:	4b8b      	ldr	r3, [pc, #556]	; (41faa8 <lv_label_refr_text+0x248>)
  41f87a:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f87c:	f8bd 6064 	ldrh.w	r6, [sp, #100]	; 0x64
  41f880:	3601      	adds	r6, #1
  41f882:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  41f886:	1af6      	subs	r6, r6, r3
  41f888:	b236      	sxth	r6, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41f88a:	f248 028e 	movw	r2, #32910	; 0x808e
  41f88e:	2100      	movs	r1, #0
  41f890:	4620      	mov	r0, r4
  41f892:	4b86      	ldr	r3, [pc, #536]	; (41faac <lv_label_refr_text+0x24c>)
  41f894:	4798      	blx	r3
  41f896:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41f898:	f248 0281 	movw	r2, #32897	; 0x8081
  41f89c:	2100      	movs	r1, #0
  41f89e:	4620      	mov	r0, r4
  41f8a0:	4f83      	ldr	r7, [pc, #524]	; (41fab0 <lv_label_refr_text+0x250>)
  41f8a2:	47b8      	blx	r7
  41f8a4:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  41f8a6:	f248 0280 	movw	r2, #32896	; 0x8080
  41f8aa:	2100      	movs	r1, #0
  41f8ac:	4620      	mov	r0, r4
  41f8ae:	47b8      	blx	r7
  41f8b0:	4607      	mov	r7, r0
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41f8b2:	7cab      	ldrb	r3, [r5, #18]
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
  41f8b4:	f3c3 1280 	ubfx	r2, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41f8b8:	f013 0f80 	tst.w	r3, #128	; 0x80
  41f8bc:	bf18      	it	ne
  41f8be:	f042 0202 	orrne.w	r2, r2, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  41f8c2:	f013 0f07 	tst.w	r3, #7
  41f8c6:	bf08      	it	eq
  41f8c8:	f042 0210 	orreq.w	r2, r2, #16
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
  41f8cc:	6829      	ldr	r1, [r5, #0]
  41f8ce:	9202      	str	r2, [sp, #8]
  41f8d0:	9601      	str	r6, [sp, #4]
  41f8d2:	f8cd 9000 	str.w	r9, [sp]
  41f8d6:	4603      	mov	r3, r0
  41f8d8:	4642      	mov	r2, r8
  41f8da:	a817      	add	r0, sp, #92	; 0x5c
  41f8dc:	4e75      	ldr	r6, [pc, #468]	; (41fab4 <lv_label_refr_text+0x254>)
  41f8de:	47b0      	blx	r6
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
  41f8e0:	7cab      	ldrb	r3, [r5, #18]
  41f8e2:	f013 0307 	ands.w	r3, r3, #7
  41f8e6:	d010      	beq.n	41f90a <lv_label_refr_text+0xaa>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
  41f8e8:	2b03      	cmp	r3, #3
  41f8ea:	d034      	beq.n	41f956 <lv_label_refr_text+0xf6>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
  41f8ec:	2b04      	cmp	r3, #4
  41f8ee:	f000 80f7 	beq.w	41fae0 <lv_label_refr_text+0x280>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
  41f8f2:	2b02      	cmp	r3, #2
  41f8f4:	f000 8170 	beq.w	41fbd8 <lv_label_refr_text+0x378>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
  41f8f8:	2b01      	cmp	r3, #1
  41f8fa:	f000 8209 	beq.w	41fd10 <lv_label_refr_text+0x4b0>
    lv_obj_invalidate(label);
  41f8fe:	4620      	mov	r0, r4
  41f900:	4b6d      	ldr	r3, [pc, #436]	; (41fab8 <lv_label_refr_text+0x258>)
  41f902:	4798      	blx	r3
}
  41f904:	b01b      	add	sp, #108	; 0x6c
  41f906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41f90a:	2212      	movs	r2, #18
  41f90c:	2100      	movs	r1, #0
  41f90e:	4620      	mov	r0, r4
  41f910:	4e67      	ldr	r6, [pc, #412]	; (41fab0 <lv_label_refr_text+0x250>)
  41f912:	47b0      	blx	r6
  41f914:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41f916:	2213      	movs	r2, #19
  41f918:	2100      	movs	r1, #0
  41f91a:	4620      	mov	r0, r4
  41f91c:	47b0      	blx	r6
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
  41f91e:	4428      	add	r0, r5
  41f920:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
  41f924:	4428      	add	r0, r5
  41f926:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41f92a:	2210      	movs	r2, #16
  41f92c:	2100      	movs	r1, #0
  41f92e:	4620      	mov	r0, r4
  41f930:	47b0      	blx	r6
  41f932:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41f934:	2211      	movs	r2, #17
  41f936:	2100      	movs	r1, #0
  41f938:	4620      	mov	r0, r4
  41f93a:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
  41f93c:	182a      	adds	r2, r5, r0
  41f93e:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
  41f942:	4402      	add	r2, r0
  41f944:	b212      	sxth	r2, r2
  41f946:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
        lv_obj_set_size(label, size.x, size.y);
  41f94a:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
  41f94e:	4620      	mov	r0, r4
  41f950:	4b5a      	ldr	r3, [pc, #360]	; (41fabc <lv_label_refr_text+0x25c>)
  41f952:	4798      	blx	r3
  41f954:	e7d3      	b.n	41f8fe <lv_label_refr_text+0x9e>
        lv_anim_init(&a);
  41f956:	a806      	add	r0, sp, #24
  41f958:	4b59      	ldr	r3, [pc, #356]	; (41fac0 <lv_label_refr_text+0x260>)
  41f95a:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  41f95c:	9406      	str	r4, [sp, #24]
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt       = cnt;
  41f95e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41f962:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
  41f966:	2220      	movs	r2, #32
  41f968:	4611      	mov	r1, r2
  41f96a:	4640      	mov	r0, r8
  41f96c:	4b55      	ldr	r3, [pc, #340]	; (41fac4 <lv_label_refr_text+0x264>)
  41f96e:	4798      	blx	r3
  41f970:	4438      	add	r0, r7
  41f972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  41f976:	fb03 f300 	mul.w	r3, r3, r0
                                        ext->anim_speed) *
  41f97a:	89a8      	ldrh	r0, [r5, #12]
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
  41f97c:	fb93 f3f0 	sdiv	r3, r3, r0
  41f980:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a->playback_delay = delay;
  41f984:	b29b      	uxth	r3, r3
  41f986:	9311      	str	r3, [sp, #68]	; 0x44
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint16_t delay)
{
    a->repeat_delay = delay;
  41f988:	9313      	str	r3, [sp, #76]	; 0x4c
        if(size.x > lv_area_get_width(&txt_coords)) {
  41f98a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
  41f98e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  41f992:	3301      	adds	r3, #1
  41f994:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
  41f998:	1a5b      	subs	r3, r3, r1
  41f99a:	b29b      	uxth	r3, r3
  41f99c:	b219      	sxth	r1, r3
  41f99e:	428a      	cmp	r2, r1
  41f9a0:	dd38      	ble.n	41fa14 <lv_label_refr_text+0x1b4>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
  41f9a2:	1a9b      	subs	r3, r3, r2
  41f9a4:	b21a      	sxth	r2, r3
    a->start = start;
  41f9a6:	2100      	movs	r1, #0
  41f9a8:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  41f9aa:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  41f9ac:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  41f9ae:	4e46      	ldr	r6, [pc, #280]	; (41fac8 <lv_label_refr_text+0x268>)
  41f9b0:	9607      	str	r6, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  41f9b2:	89a8      	ldrh	r0, [r5, #12]
  41f9b4:	4b45      	ldr	r3, [pc, #276]	; (41facc <lv_label_refr_text+0x26c>)
  41f9b6:	4798      	blx	r3
    a->time     = duration;
  41f9b8:	900f      	str	r0, [sp, #60]	; 0x3c
  41f9ba:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  41f9bc:	4631      	mov	r1, r6
  41f9be:	4620      	mov	r0, r4
  41f9c0:	4b43      	ldr	r3, [pc, #268]	; (41fad0 <lv_label_refr_text+0x270>)
  41f9c2:	4798      	blx	r3
            if(anim_cur) {
  41f9c4:	b318      	cbz	r0, 41fa0e <lv_label_refr_text+0x1ae>
                act_time = anim_cur->act_time;
  41f9c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
  41f9c8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  41f9cc:	f003 0301 	and.w	r3, r3, #1
            if(act_time < a.time) {
  41f9d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  41f9d2:	428a      	cmp	r2, r1
  41f9d4:	da11      	bge.n	41f9fa <lv_label_refr_text+0x19a>
                a.act_time = act_time;      /*To keep the old position*/
  41f9d6:	9210      	str	r2, [sp, #64]	; 0x40
                a.early_apply = 0;
  41f9d8:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
  41f9dc:	f36f 0200 	bfc	r2, #0, #1
  41f9e0:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
                if(playback_now) {
  41f9e4:	b14b      	cbz	r3, 41f9fa <lv_label_refr_text+0x19a>
                    a.playback_now = 1;
  41f9e6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  41f9ea:	f043 0301 	orr.w	r3, r3, #1
  41f9ee:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tmp      = a.start;
  41f9f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    a.start = a.end;
  41f9f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41f9f6:	920c      	str	r2, [sp, #48]	; 0x30
                    a.end   = tmp;
  41f9f8:	930e      	str	r3, [sp, #56]	; 0x38
            lv_anim_start(&a);
  41f9fa:	a806      	add	r0, sp, #24
  41f9fc:	4b35      	ldr	r3, [pc, #212]	; (41fad4 <lv_label_refr_text+0x274>)
  41f9fe:	4798      	blx	r3
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  41fa00:	4935      	ldr	r1, [pc, #212]	; (41fad8 <lv_label_refr_text+0x278>)
  41fa02:	4620      	mov	r0, r4
  41fa04:	4b35      	ldr	r3, [pc, #212]	; (41fadc <lv_label_refr_text+0x27c>)
  41fa06:	4798      	blx	r3
            ext->offset.y = 0;
  41fa08:	2300      	movs	r3, #0
  41fa0a:	822b      	strh	r3, [r5, #16]
  41fa0c:	e777      	b.n	41f8fe <lv_label_refr_text+0x9e>
            bool playback_now = false;
  41fa0e:	2300      	movs	r3, #0
            int32_t act_time = 0;
  41fa10:	461a      	mov	r2, r3
  41fa12:	e7dd      	b.n	41f9d0 <lv_label_refr_text+0x170>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  41fa14:	492c      	ldr	r1, [pc, #176]	; (41fac8 <lv_label_refr_text+0x268>)
  41fa16:	4620      	mov	r0, r4
  41fa18:	4b30      	ldr	r3, [pc, #192]	; (41fadc <lv_label_refr_text+0x27c>)
  41fa1a:	4798      	blx	r3
            ext->offset.x = 0;
  41fa1c:	2300      	movs	r3, #0
  41fa1e:	81eb      	strh	r3, [r5, #14]
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  41fa20:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41fa24:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  41fa28:	3301      	adds	r3, #1
  41fa2a:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  41fa2e:	1a5b      	subs	r3, r3, r1
  41fa30:	b29b      	uxth	r3, r3
  41fa32:	b219      	sxth	r1, r3
  41fa34:	428a      	cmp	r2, r1
  41fa36:	dde3      	ble.n	41fa00 <lv_label_refr_text+0x1a0>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
  41fa38:	1a9a      	subs	r2, r3, r2
  41fa3a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  41fa3e:	1ad2      	subs	r2, r2, r3
  41fa40:	b212      	sxth	r2, r2
    a->start = start;
  41fa42:	2100      	movs	r1, #0
  41fa44:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  41fa46:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  41fa48:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  41fa4a:	4e23      	ldr	r6, [pc, #140]	; (41fad8 <lv_label_refr_text+0x278>)
  41fa4c:	9607      	str	r6, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  41fa4e:	89a8      	ldrh	r0, [r5, #12]
  41fa50:	4b1e      	ldr	r3, [pc, #120]	; (41facc <lv_label_refr_text+0x26c>)
  41fa52:	4798      	blx	r3
    a->time     = duration;
  41fa54:	900f      	str	r0, [sp, #60]	; 0x3c
  41fa56:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  41fa58:	4631      	mov	r1, r6
  41fa5a:	4620      	mov	r0, r4
  41fa5c:	4b1c      	ldr	r3, [pc, #112]	; (41fad0 <lv_label_refr_text+0x270>)
  41fa5e:	4798      	blx	r3
            if(anim_cur) {
  41fa60:	b1e8      	cbz	r0, 41fa9e <lv_label_refr_text+0x23e>
                act_time = anim_cur->act_time;
  41fa62:	6a82      	ldr	r2, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
  41fa64:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  41fa68:	f003 0301 	and.w	r3, r3, #1
            if(act_time < a.time) {
  41fa6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  41fa6e:	428a      	cmp	r2, r1
  41fa70:	da11      	bge.n	41fa96 <lv_label_refr_text+0x236>
                a.act_time = act_time;      /*To keep the old position*/
  41fa72:	9210      	str	r2, [sp, #64]	; 0x40
                a.early_apply = 0;
  41fa74:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
  41fa78:	f36f 0200 	bfc	r2, #0, #1
  41fa7c:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
                if(playback_now) {
  41fa80:	b14b      	cbz	r3, 41fa96 <lv_label_refr_text+0x236>
                    a.playback_now = 1;
  41fa82:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  41fa86:	f043 0301 	orr.w	r3, r3, #1
  41fa8a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tmp      = a.start;
  41fa8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    a.start = a.end;
  41fa90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41fa92:	920c      	str	r2, [sp, #48]	; 0x30
                    a.end   = tmp;
  41fa94:	930e      	str	r3, [sp, #56]	; 0x38
            lv_anim_start(&a);
  41fa96:	a806      	add	r0, sp, #24
  41fa98:	4b0e      	ldr	r3, [pc, #56]	; (41fad4 <lv_label_refr_text+0x274>)
  41fa9a:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  41fa9c:	e72f      	b.n	41f8fe <lv_label_refr_text+0x9e>
            bool playback_now = false;
  41fa9e:	2300      	movs	r3, #0
            int32_t act_time = 0;
  41faa0:	461a      	mov	r2, r3
  41faa2:	e7e3      	b.n	41fa6c <lv_label_refr_text+0x20c>
  41faa4:	00407281 	.word	0x00407281
  41faa8:	0041f0c5 	.word	0x0041f0c5
  41faac:	004068c1 	.word	0x004068c1
  41fab0:	004069b5 	.word	0x004069b5
  41fab4:	0041725d 	.word	0x0041725d
  41fab8:	00405565 	.word	0x00405565
  41fabc:	004061cd 	.word	0x004061cd
  41fac0:	00414729 	.word	0x00414729
  41fac4:	00412f7d 	.word	0x00412f7d
  41fac8:	0041f1a5 	.word	0x0041f1a5
  41facc:	004148c1 	.word	0x004148c1
  41fad0:	00414885 	.word	0x00414885
  41fad4:	004147ed 	.word	0x004147ed
  41fad8:	0041f189 	.word	0x0041f189
  41fadc:	0041476d 	.word	0x0041476d
        lv_anim_init(&a);
  41fae0:	a806      	add	r0, sp, #24
  41fae2:	4b96      	ldr	r3, [pc, #600]	; (41fd3c <lv_label_refr_text+0x4dc>)
  41fae4:	4798      	blx	r3
    a->var     = var;
  41fae6:	9406      	str	r4, [sp, #24]
    a->repeat_cnt       = cnt;
  41fae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41faec:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41faf0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  41faf4:	3301      	adds	r3, #1
  41faf6:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
  41fafa:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
  41fafc:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
  41fb00:	b21b      	sxth	r3, r3
  41fb02:	429a      	cmp	r2, r3
  41fb04:	dd32      	ble.n	41fb6c <lv_label_refr_text+0x30c>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
  41fb06:	2220      	movs	r2, #32
  41fb08:	4611      	mov	r1, r2
  41fb0a:	4640      	mov	r0, r8
  41fb0c:	4b8c      	ldr	r3, [pc, #560]	; (41fd40 <lv_label_refr_text+0x4e0>)
  41fb0e:	4798      	blx	r3
  41fb10:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
  41fb14:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  41fb18:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
  41fb1c:	1ad2      	subs	r2, r2, r3
  41fb1e:	b212      	sxth	r2, r2
    a->start = start;
  41fb20:	2100      	movs	r1, #0
  41fb22:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  41fb24:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  41fb26:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  41fb28:	4e86      	ldr	r6, [pc, #536]	; (41fd44 <lv_label_refr_text+0x4e4>)
  41fb2a:	9607      	str	r6, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  41fb2c:	89a8      	ldrh	r0, [r5, #12]
  41fb2e:	4b86      	ldr	r3, [pc, #536]	; (41fd48 <lv_label_refr_text+0x4e8>)
  41fb30:	4798      	blx	r3
    a->time     = duration;
  41fb32:	900f      	str	r0, [sp, #60]	; 0x3c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  41fb34:	4631      	mov	r1, r6
  41fb36:	4620      	mov	r0, r4
  41fb38:	4b84      	ldr	r3, [pc, #528]	; (41fd4c <lv_label_refr_text+0x4ec>)
  41fb3a:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  41fb3c:	b1a0      	cbz	r0, 41fb68 <lv_label_refr_text+0x308>
  41fb3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if(act_time < a.time) {
  41fb40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  41fb42:	4293      	cmp	r3, r2
  41fb44:	da06      	bge.n	41fb54 <lv_label_refr_text+0x2f4>
                a.act_time = act_time;      /*To keep the old position*/
  41fb46:	9310      	str	r3, [sp, #64]	; 0x40
                a.early_apply = 0;
  41fb48:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  41fb4c:	f36f 0300 	bfc	r3, #0, #1
  41fb50:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
            lv_anim_start(&a);
  41fb54:	a806      	add	r0, sp, #24
  41fb56:	4b7e      	ldr	r3, [pc, #504]	; (41fd50 <lv_label_refr_text+0x4f0>)
  41fb58:	4798      	blx	r3
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  41fb5a:	497e      	ldr	r1, [pc, #504]	; (41fd54 <lv_label_refr_text+0x4f4>)
  41fb5c:	4620      	mov	r0, r4
  41fb5e:	4b7e      	ldr	r3, [pc, #504]	; (41fd58 <lv_label_refr_text+0x4f8>)
  41fb60:	4798      	blx	r3
            ext->offset.y = 0;
  41fb62:	2300      	movs	r3, #0
  41fb64:	822b      	strh	r3, [r5, #16]
  41fb66:	e6ca      	b.n	41f8fe <lv_label_refr_text+0x9e>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  41fb68:	2300      	movs	r3, #0
  41fb6a:	e7e9      	b.n	41fb40 <lv_label_refr_text+0x2e0>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  41fb6c:	4975      	ldr	r1, [pc, #468]	; (41fd44 <lv_label_refr_text+0x4e4>)
  41fb6e:	4620      	mov	r0, r4
  41fb70:	4b79      	ldr	r3, [pc, #484]	; (41fd58 <lv_label_refr_text+0x4f8>)
  41fb72:	4798      	blx	r3
            ext->offset.x = 0;
  41fb74:	2300      	movs	r3, #0
  41fb76:	81eb      	strh	r3, [r5, #14]
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  41fb78:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41fb7c:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  41fb80:	3301      	adds	r3, #1
  41fb82:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  41fb86:	1a5b      	subs	r3, r3, r1
  41fb88:	b21b      	sxth	r3, r3
  41fb8a:	429a      	cmp	r2, r3
  41fb8c:	dde5      	ble.n	41fb5a <lv_label_refr_text+0x2fa>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
  41fb8e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  41fb92:	441a      	add	r2, r3
  41fb94:	4252      	negs	r2, r2
  41fb96:	b212      	sxth	r2, r2
    a->start = start;
  41fb98:	2100      	movs	r1, #0
  41fb9a:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  41fb9c:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  41fb9e:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  41fba0:	4e6c      	ldr	r6, [pc, #432]	; (41fd54 <lv_label_refr_text+0x4f4>)
  41fba2:	9607      	str	r6, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  41fba4:	89a8      	ldrh	r0, [r5, #12]
  41fba6:	4b68      	ldr	r3, [pc, #416]	; (41fd48 <lv_label_refr_text+0x4e8>)
  41fba8:	4798      	blx	r3
    a->time     = duration;
  41fbaa:	900f      	str	r0, [sp, #60]	; 0x3c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  41fbac:	4631      	mov	r1, r6
  41fbae:	4620      	mov	r0, r4
  41fbb0:	4b66      	ldr	r3, [pc, #408]	; (41fd4c <lv_label_refr_text+0x4ec>)
  41fbb2:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  41fbb4:	b170      	cbz	r0, 41fbd4 <lv_label_refr_text+0x374>
  41fbb6:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if(act_time < a.time) {
  41fbb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  41fbba:	4293      	cmp	r3, r2
  41fbbc:	da06      	bge.n	41fbcc <lv_label_refr_text+0x36c>
                a.act_time = act_time;      /*To keep the old position*/
  41fbbe:	9310      	str	r3, [sp, #64]	; 0x40
                a.early_apply = 0;
  41fbc0:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  41fbc4:	f36f 0300 	bfc	r3, #0, #1
  41fbc8:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
            lv_anim_start(&a);
  41fbcc:	a806      	add	r0, sp, #24
  41fbce:	4b60      	ldr	r3, [pc, #384]	; (41fd50 <lv_label_refr_text+0x4f0>)
  41fbd0:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  41fbd2:	e694      	b.n	41f8fe <lv_label_refr_text+0x9e>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  41fbd4:	2300      	movs	r3, #0
  41fbd6:	e7ef      	b.n	41fbb8 <lv_label_refr_text+0x358>
  41fbd8:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  41fbdc:	3301      	adds	r3, #1
  41fbde:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
  41fbe2:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
  41fbe4:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
  41fbe8:	b21b      	sxth	r3, r3
  41fbea:	429a      	cmp	r2, r3
  41fbec:	dc03      	bgt.n	41fbf6 <lv_label_refr_text+0x396>
            ext->dot_end = LV_LABEL_DOT_END_INV;
  41fbee:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41fbf2:	60ab      	str	r3, [r5, #8]
  41fbf4:	e683      	b.n	41f8fe <lv_label_refr_text+0x9e>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
  41fbf6:	4b59      	ldr	r3, [pc, #356]	; (41fd5c <lv_label_refr_text+0x4fc>)
  41fbf8:	681b      	ldr	r3, [r3, #0]
  41fbfa:	6828      	ldr	r0, [r5, #0]
  41fbfc:	4798      	blx	r3
  41fbfe:	2803      	cmp	r0, #3
  41fc00:	d803      	bhi.n	41fc0a <lv_label_refr_text+0x3aa>
            ext->dot_end = LV_LABEL_DOT_END_INV;
  41fc02:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41fc06:	60ab      	str	r3, [r5, #8]
  41fc08:	e679      	b.n	41f8fe <lv_label_refr_text+0x9e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41fc0a:	f8bd 6064 	ldrh.w	r6, [sp, #100]	; 0x64
  41fc0e:	3601      	adds	r6, #1
  41fc10:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  41fc14:	1af6      	subs	r6, r6, r3
  41fc16:	b2b6      	uxth	r6, r6
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
  41fc18:	222e      	movs	r2, #46	; 0x2e
  41fc1a:	4611      	mov	r1, r2
  41fc1c:	4640      	mov	r0, r8
  41fc1e:	4b48      	ldr	r3, [pc, #288]	; (41fd40 <lv_label_refr_text+0x4e0>)
  41fc20:	4798      	blx	r3
  41fc22:	4438      	add	r0, r7
            p.x = lv_area_get_width(&txt_coords) -
  41fc24:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
  41fc28:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41fc2c:	4430      	add	r0, r6
  41fc2e:	f8ad 0014 	strh.w	r0, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41fc32:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  41fc36:	3301      	adds	r3, #1
  41fc38:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
  41fc3c:	1a9b      	subs	r3, r3, r2
  41fc3e:	b29b      	uxth	r3, r3
  41fc40:	b219      	sxth	r1, r3
            p.y = lv_area_get_height(&txt_coords);
  41fc42:	f8ad 1016 	strh.w	r1, [sp, #22]
  41fc46:	f9b8 0008 	ldrsh.w	r0, [r8, #8]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
  41fc4a:	eb00 0609 	add.w	r6, r0, r9
            y_overed = p.y %
  41fc4e:	fb91 f2f6 	sdiv	r2, r1, r6
  41fc52:	fb06 1212 	mls	r2, r6, r2, r1
            if(y_overed >= lv_font_get_line_height(font)) {
  41fc56:	b211      	sxth	r1, r2
  41fc58:	4281      	cmp	r1, r0
  41fc5a:	db53      	blt.n	41fd04 <lv_label_refr_text+0x4a4>
                p.y += lv_font_get_line_height(font);
  41fc5c:	4403      	add	r3, r0
  41fc5e:	1a9b      	subs	r3, r3, r2
  41fc60:	f8ad 3016 	strh.w	r3, [sp, #22]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
  41fc64:	a905      	add	r1, sp, #20
  41fc66:	4620      	mov	r0, r4
  41fc68:	4b3d      	ldr	r3, [pc, #244]	; (41fd60 <lv_label_refr_text+0x500>)
  41fc6a:	4798      	blx	r3
  41fc6c:	4607      	mov	r7, r0
            size_t txt_len = strlen(ext->text);
  41fc6e:	682e      	ldr	r6, [r5, #0]
  41fc70:	4630      	mov	r0, r6
  41fc72:	4b3c      	ldr	r3, [pc, #240]	; (41fd64 <lv_label_refr_text+0x504>)
  41fc74:	4798      	blx	r3
  41fc76:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
  41fc78:	4b3b      	ldr	r3, [pc, #236]	; (41fd68 <lv_label_refr_text+0x508>)
  41fc7a:	681b      	ldr	r3, [r3, #0]
  41fc7c:	4639      	mov	r1, r7
  41fc7e:	4630      	mov	r0, r6
  41fc80:	4798      	blx	r3
  41fc82:	4606      	mov	r6, r0
  41fc84:	9006      	str	r0, [sp, #24]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  41fc86:	f100 0803 	add.w	r8, r0, #3
  41fc8a:	45c1      	cmp	r9, r8
  41fc8c:	d20c      	bcs.n	41fca8 <lv_label_refr_text+0x448>
                _lv_txt_encoded_prev(ext->text, &byte_id);
  41fc8e:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 41fd7c <lv_label_refr_text+0x51c>
  41fc92:	a906      	add	r1, sp, #24
  41fc94:	6828      	ldr	r0, [r5, #0]
  41fc96:	f8da 3000 	ldr.w	r3, [sl]
  41fc9a:	4798      	blx	r3
                letter_id--;
  41fc9c:	3f01      	subs	r7, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  41fc9e:	9e06      	ldr	r6, [sp, #24]
  41fca0:	f106 0803 	add.w	r8, r6, #3
  41fca4:	45c1      	cmp	r9, r8
  41fca6:	d3f4      	bcc.n	41fc92 <lv_label_refr_text+0x432>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  41fca8:	f04f 0a04 	mov.w	sl, #4
  41fcac:	f04f 0900 	mov.w	r9, #0
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
  41fcb0:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 41fd80 <lv_label_refr_text+0x520>
  41fcb4:	6828      	ldr	r0, [r5, #0]
  41fcb6:	9b06      	ldr	r3, [sp, #24]
  41fcb8:	4418      	add	r0, r3
  41fcba:	f8db 3000 	ldr.w	r3, [fp]
  41fcbe:	4798      	blx	r3
  41fcc0:	4481      	add	r9, r0
  41fcc2:	fa5f f989 	uxtb.w	r9, r9
                _lv_txt_encoded_next(ext->text, &byte_id);
  41fcc6:	a906      	add	r1, sp, #24
  41fcc8:	6828      	ldr	r0, [r5, #0]
  41fcca:	4b28      	ldr	r3, [pc, #160]	; (41fd6c <lv_label_refr_text+0x50c>)
  41fccc:	681b      	ldr	r3, [r3, #0]
  41fcce:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
  41fcd0:	f1ba 0a01 	subs.w	sl, sl, #1
  41fcd4:	d1ee      	bne.n	41fcb4 <lv_label_refr_text+0x454>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
  41fcd6:	6829      	ldr	r1, [r5, #0]
  41fcd8:	464a      	mov	r2, r9
  41fcda:	4431      	add	r1, r6
  41fcdc:	4620      	mov	r0, r4
  41fcde:	4b24      	ldr	r3, [pc, #144]	; (41fd70 <lv_label_refr_text+0x510>)
  41fce0:	4798      	blx	r3
  41fce2:	2800      	cmp	r0, #0
  41fce4:	f43f ae0b 	beq.w	41f8fe <lv_label_refr_text+0x9e>
  41fce8:	1cf1      	adds	r1, r6, #3
                    ext->text[byte_id_ori + i] = '.';
  41fcea:	222e      	movs	r2, #46	; 0x2e
  41fcec:	682b      	ldr	r3, [r5, #0]
  41fcee:	559a      	strb	r2, [r3, r6]
  41fcf0:	3601      	adds	r6, #1
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
  41fcf2:	42b1      	cmp	r1, r6
  41fcf4:	d1fa      	bne.n	41fcec <lv_label_refr_text+0x48c>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
  41fcf6:	682b      	ldr	r3, [r5, #0]
  41fcf8:	2200      	movs	r2, #0
  41fcfa:	f803 2008 	strb.w	r2, [r3, r8]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
  41fcfe:	3703      	adds	r7, #3
  41fd00:	60af      	str	r7, [r5, #8]
  41fd02:	e5fc      	b.n	41f8fe <lv_label_refr_text+0x9e>
                p.y -= y_overed;
  41fd04:	1a9b      	subs	r3, r3, r2
                p.y -= line_space;
  41fd06:	eba3 0909 	sub.w	r9, r3, r9
  41fd0a:	f8ad 9016 	strh.w	r9, [sp, #22]
  41fd0e:	e7a9      	b.n	41fc64 <lv_label_refr_text+0x404>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41fd10:	2210      	movs	r2, #16
  41fd12:	2100      	movs	r1, #0
  41fd14:	4620      	mov	r0, r4
  41fd16:	4e17      	ldr	r6, [pc, #92]	; (41fd74 <lv_label_refr_text+0x514>)
  41fd18:	47b0      	blx	r6
  41fd1a:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41fd1c:	2211      	movs	r2, #17
  41fd1e:	2100      	movs	r1, #0
  41fd20:	4620      	mov	r0, r4
  41fd22:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
  41fd24:	1829      	adds	r1, r5, r0
  41fd26:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
  41fd2a:	4401      	add	r1, r0
  41fd2c:	b209      	sxth	r1, r1
  41fd2e:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
        lv_obj_set_height(label, size.y);
  41fd32:	4620      	mov	r0, r4
  41fd34:	4b10      	ldr	r3, [pc, #64]	; (41fd78 <lv_label_refr_text+0x518>)
  41fd36:	4798      	blx	r3
  41fd38:	e5e1      	b.n	41f8fe <lv_label_refr_text+0x9e>
  41fd3a:	bf00      	nop
  41fd3c:	00414729 	.word	0x00414729
  41fd40:	00412f7d 	.word	0x00412f7d
  41fd44:	0041f1a5 	.word	0x0041f1a5
  41fd48:	004148c1 	.word	0x004148c1
  41fd4c:	00414885 	.word	0x00414885
  41fd50:	004147ed 	.word	0x004147ed
  41fd54:	0041f189 	.word	0x0041f189
  41fd58:	0041476d 	.word	0x0041476d
  41fd5c:	20400094 	.word	0x20400094
  41fd60:	0041f2e1 	.word	0x0041f2e1
  41fd64:	00423781 	.word	0x00423781
  41fd68:	20400080 	.word	0x20400080
  41fd6c:	20400088 	.word	0x20400088
  41fd70:	0041f121 	.word	0x0041f121
  41fd74:	004069b5 	.word	0x004069b5
  41fd78:	00406305 	.word	0x00406305
  41fd7c:	2040008c 	.word	0x2040008c
  41fd80:	20400090 	.word	0x20400090

0041fd84 <lv_label_signal>:
{
  41fd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41fd88:	4607      	mov	r7, r0
  41fd8a:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  41fd8c:	2908      	cmp	r1, #8
  41fd8e:	d015      	beq.n	41fdbc <lv_label_signal+0x38>
  41fd90:	460c      	mov	r4, r1
    res = ancestor_signal(label, sign, param);
  41fd92:	4b30      	ldr	r3, [pc, #192]	; (41fe54 <lv_label_signal+0xd0>)
  41fd94:	681b      	ldr	r3, [r3, #0]
  41fd96:	4798      	blx	r3
  41fd98:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  41fd9a:	2801      	cmp	r0, #1
  41fd9c:	d115      	bne.n	41fdca <lv_label_signal+0x46>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41fd9e:	2c07      	cmp	r4, #7
  41fda0:	d020      	beq.n	41fde4 <lv_label_signal+0x60>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41fda2:	4638      	mov	r0, r7
  41fda4:	4b2c      	ldr	r3, [pc, #176]	; (41fe58 <lv_label_signal+0xd4>)
  41fda6:	4798      	blx	r3
  41fda8:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  41fdaa:	bb44      	cbnz	r4, 41fdfe <lv_label_signal+0x7a>
        if(ext->static_txt == 0) {
  41fdac:	7c83      	ldrb	r3, [r0, #18]
  41fdae:	f013 0f08 	tst.w	r3, #8
  41fdb2:	d01d      	beq.n	41fdf0 <lv_label_signal+0x6c>
        lv_label_dot_tmp_free(label);
  41fdb4:	4638      	mov	r0, r7
  41fdb6:	4b29      	ldr	r3, [pc, #164]	; (41fe5c <lv_label_signal+0xd8>)
  41fdb8:	4798      	blx	r3
  41fdba:	e006      	b.n	41fdca <lv_label_signal+0x46>
    switch(type) {
  41fdbc:	7813      	ldrb	r3, [r2, #0]
  41fdbe:	b93b      	cbnz	r3, 41fdd0 <lv_label_signal+0x4c>
            style_dsc_p = &label->style_list;
  41fdc0:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_label_get_style(label, info->part);
  41fdc4:	606b      	str	r3, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  41fdc6:	b12b      	cbz	r3, 41fdd4 <lv_label_signal+0x50>
  41fdc8:	2601      	movs	r6, #1
}
  41fdca:	4630      	mov	r0, r6
  41fdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            style_dsc_p = NULL;
  41fdd0:	2300      	movs	r3, #0
  41fdd2:	e7f7      	b.n	41fdc4 <lv_label_signal+0x40>
        else return ancestor_signal(label, sign, param);
  41fdd4:	4b1f      	ldr	r3, [pc, #124]	; (41fe54 <lv_label_signal+0xd0>)
  41fdd6:	681b      	ldr	r3, [r3, #0]
  41fdd8:	462a      	mov	r2, r5
  41fdda:	2108      	movs	r1, #8
  41fddc:	4638      	mov	r0, r7
  41fdde:	4798      	blx	r3
  41fde0:	4606      	mov	r6, r0
  41fde2:	e7f2      	b.n	41fdca <lv_label_signal+0x46>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41fde4:	491e      	ldr	r1, [pc, #120]	; (41fe60 <lv_label_signal+0xdc>)
  41fde6:	4628      	mov	r0, r5
  41fde8:	4b1e      	ldr	r3, [pc, #120]	; (41fe64 <lv_label_signal+0xe0>)
  41fdea:	4798      	blx	r3
  41fdec:	4606      	mov	r6, r0
  41fdee:	e7ec      	b.n	41fdca <lv_label_signal+0x46>
            lv_mem_free(ext->text);
  41fdf0:	6800      	ldr	r0, [r0, #0]
  41fdf2:	4b1d      	ldr	r3, [pc, #116]	; (41fe68 <lv_label_signal+0xe4>)
  41fdf4:	4798      	blx	r3
            ext->text = NULL;
  41fdf6:	2300      	movs	r3, #0
  41fdf8:	f8c8 3000 	str.w	r3, [r8]
  41fdfc:	e7da      	b.n	41fdb4 <lv_label_signal+0x30>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  41fdfe:	2c04      	cmp	r4, #4
  41fe00:	d014      	beq.n	41fe2c <lv_label_signal+0xa8>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  41fe02:	2c02      	cmp	r4, #2
  41fe04:	d1e1      	bne.n	41fdca <lv_label_signal+0x46>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41fe06:	88aa      	ldrh	r2, [r5, #4]
  41fe08:	3201      	adds	r2, #1
  41fe0a:	882b      	ldrh	r3, [r5, #0]
  41fe0c:	1ad2      	subs	r2, r2, r3
  41fe0e:	8abb      	ldrh	r3, [r7, #20]
  41fe10:	3301      	adds	r3, #1
  41fe12:	8a39      	ldrh	r1, [r7, #16]
  41fe14:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
  41fe16:	b292      	uxth	r2, r2
  41fe18:	b29b      	uxth	r3, r3
  41fe1a:	429a      	cmp	r2, r3
  41fe1c:	d00d      	beq.n	41fe3a <lv_label_signal+0xb6>
            lv_label_revert_dots(label);
  41fe1e:	4638      	mov	r0, r7
  41fe20:	4b12      	ldr	r3, [pc, #72]	; (41fe6c <lv_label_signal+0xe8>)
  41fe22:	4798      	blx	r3
            lv_label_refr_text(label);
  41fe24:	4638      	mov	r0, r7
  41fe26:	4b12      	ldr	r3, [pc, #72]	; (41fe70 <lv_label_signal+0xec>)
  41fe28:	4798      	blx	r3
  41fe2a:	e7ce      	b.n	41fdca <lv_label_signal+0x46>
        lv_label_revert_dots(label);
  41fe2c:	4638      	mov	r0, r7
  41fe2e:	4b0f      	ldr	r3, [pc, #60]	; (41fe6c <lv_label_signal+0xe8>)
  41fe30:	4798      	blx	r3
        lv_label_refr_text(label);
  41fe32:	4638      	mov	r0, r7
  41fe34:	4b0e      	ldr	r3, [pc, #56]	; (41fe70 <lv_label_signal+0xec>)
  41fe36:	4798      	blx	r3
  41fe38:	e7c7      	b.n	41fdca <lv_label_signal+0x46>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41fe3a:	88ea      	ldrh	r2, [r5, #6]
  41fe3c:	3201      	adds	r2, #1
  41fe3e:	886b      	ldrh	r3, [r5, #2]
  41fe40:	1ad2      	subs	r2, r2, r3
  41fe42:	8afb      	ldrh	r3, [r7, #22]
  41fe44:	3301      	adds	r3, #1
  41fe46:	8a79      	ldrh	r1, [r7, #18]
  41fe48:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
  41fe4a:	b292      	uxth	r2, r2
  41fe4c:	b29b      	uxth	r3, r3
  41fe4e:	429a      	cmp	r2, r3
  41fe50:	d1e5      	bne.n	41fe1e <lv_label_signal+0x9a>
  41fe52:	e7ba      	b.n	41fdca <lv_label_signal+0x46>
  41fe54:	204147a0 	.word	0x204147a0
  41fe58:	00407281 	.word	0x00407281
  41fe5c:	0041f009 	.word	0x0041f009
  41fe60:	0043071c 	.word	0x0043071c
  41fe64:	0040751d 	.word	0x0040751d
  41fe68:	004158b9 	.word	0x004158b9
  41fe6c:	0041f039 	.word	0x0041f039
  41fe70:	0041f861 	.word	0x0041f861

0041fe74 <lv_label_set_text>:
{
  41fe74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41fe76:	4607      	mov	r7, r0
  41fe78:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41fe7a:	4b31      	ldr	r3, [pc, #196]	; (41ff40 <lv_label_set_text+0xcc>)
  41fe7c:	4798      	blx	r3
  41fe7e:	b928      	cbnz	r0, 41fe8c <lv_label_set_text+0x18>
  41fe80:	463a      	mov	r2, r7
  41fe82:	2300      	movs	r3, #0
  41fe84:	482f      	ldr	r0, [pc, #188]	; (41ff44 <lv_label_set_text+0xd0>)
  41fe86:	4930      	ldr	r1, [pc, #192]	; (41ff48 <lv_label_set_text+0xd4>)
  41fe88:	4788      	blx	r1
  41fe8a:	e7fe      	b.n	41fe8a <lv_label_set_text+0x16>
    lv_obj_invalidate(label);
  41fe8c:	4638      	mov	r0, r7
  41fe8e:	4b2f      	ldr	r3, [pc, #188]	; (41ff4c <lv_label_set_text+0xd8>)
  41fe90:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41fe92:	4638      	mov	r0, r7
  41fe94:	4b2e      	ldr	r3, [pc, #184]	; (41ff50 <lv_label_set_text+0xdc>)
  41fe96:	4798      	blx	r3
  41fe98:	4604      	mov	r4, r0
    if(text == NULL) text = ext->text;
  41fe9a:	b31d      	cbz	r5, 41fee4 <lv_label_set_text+0x70>
    LV_ASSERT_STR(text);
  41fe9c:	4628      	mov	r0, r5
  41fe9e:	4b28      	ldr	r3, [pc, #160]	; (41ff40 <lv_label_set_text+0xcc>)
  41fea0:	4798      	blx	r3
  41fea2:	b308      	cbz	r0, 41fee8 <lv_label_set_text+0x74>
    if(ext->text == text && ext->static_txt == 0) {
  41fea4:	6826      	ldr	r6, [r4, #0]
  41fea6:	42b5      	cmp	r5, r6
  41fea8:	d024      	beq.n	41fef4 <lv_label_set_text+0x80>
        if(ext->text != NULL && ext->static_txt == 0) {
  41feaa:	b11e      	cbz	r6, 41feb4 <lv_label_set_text+0x40>
  41feac:	7ca3      	ldrb	r3, [r4, #18]
  41feae:	f013 0f08 	tst.w	r3, #8
  41feb2:	d038      	beq.n	41ff26 <lv_label_set_text+0xb2>
        size_t len = strlen(text) + 1;
  41feb4:	4628      	mov	r0, r5
  41feb6:	4b27      	ldr	r3, [pc, #156]	; (41ff54 <lv_label_set_text+0xe0>)
  41feb8:	4798      	blx	r3
        ext->text = lv_mem_alloc(len);
  41feba:	3001      	adds	r0, #1
  41febc:	4b26      	ldr	r3, [pc, #152]	; (41ff58 <lv_label_set_text+0xe4>)
  41febe:	4798      	blx	r3
  41fec0:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
  41fec2:	4b1f      	ldr	r3, [pc, #124]	; (41ff40 <lv_label_set_text+0xcc>)
  41fec4:	4798      	blx	r3
  41fec6:	2800      	cmp	r0, #0
  41fec8:	d033      	beq.n	41ff32 <lv_label_set_text+0xbe>
        if(ext->text == NULL) return;
  41feca:	6820      	ldr	r0, [r4, #0]
  41fecc:	b148      	cbz	r0, 41fee2 <lv_label_set_text+0x6e>
        strcpy(ext->text, text);
  41fece:	4629      	mov	r1, r5
  41fed0:	4b22      	ldr	r3, [pc, #136]	; (41ff5c <lv_label_set_text+0xe8>)
  41fed2:	4798      	blx	r3
        ext->static_txt = 0;
  41fed4:	7ca3      	ldrb	r3, [r4, #18]
  41fed6:	f36f 03c3 	bfc	r3, #3, #1
  41feda:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  41fedc:	4638      	mov	r0, r7
  41fede:	4b20      	ldr	r3, [pc, #128]	; (41ff60 <lv_label_set_text+0xec>)
  41fee0:	4798      	blx	r3
  41fee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(text == NULL) text = ext->text;
  41fee4:	6805      	ldr	r5, [r0, #0]
  41fee6:	e7d9      	b.n	41fe9c <lv_label_set_text+0x28>
    LV_ASSERT_STR(text);
  41fee8:	462a      	mov	r2, r5
  41feea:	2300      	movs	r3, #0
  41feec:	4815      	ldr	r0, [pc, #84]	; (41ff44 <lv_label_set_text+0xd0>)
  41feee:	4916      	ldr	r1, [pc, #88]	; (41ff48 <lv_label_set_text+0xd4>)
  41fef0:	4788      	blx	r1
  41fef2:	e7fe      	b.n	41fef2 <lv_label_set_text+0x7e>
    if(ext->text == text && ext->static_txt == 0) {
  41fef4:	7ca3      	ldrb	r3, [r4, #18]
  41fef6:	f013 0f08 	tst.w	r3, #8
  41fefa:	d1db      	bne.n	41feb4 <lv_label_set_text+0x40>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
  41fefc:	4630      	mov	r0, r6
  41fefe:	4b15      	ldr	r3, [pc, #84]	; (41ff54 <lv_label_set_text+0xe0>)
  41ff00:	4798      	blx	r3
  41ff02:	1c41      	adds	r1, r0, #1
  41ff04:	4630      	mov	r0, r6
  41ff06:	4b17      	ldr	r3, [pc, #92]	; (41ff64 <lv_label_set_text+0xf0>)
  41ff08:	4798      	blx	r3
  41ff0a:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
  41ff0c:	4b0c      	ldr	r3, [pc, #48]	; (41ff40 <lv_label_set_text+0xcc>)
  41ff0e:	4798      	blx	r3
  41ff10:	b928      	cbnz	r0, 41ff1e <lv_label_set_text+0xaa>
  41ff12:	6822      	ldr	r2, [r4, #0]
  41ff14:	2300      	movs	r3, #0
  41ff16:	4814      	ldr	r0, [pc, #80]	; (41ff68 <lv_label_set_text+0xf4>)
  41ff18:	490b      	ldr	r1, [pc, #44]	; (41ff48 <lv_label_set_text+0xd4>)
  41ff1a:	4788      	blx	r1
  41ff1c:	e7fe      	b.n	41ff1c <lv_label_set_text+0xa8>
        if(ext->text == NULL) return;
  41ff1e:	6823      	ldr	r3, [r4, #0]
  41ff20:	2b00      	cmp	r3, #0
  41ff22:	d1db      	bne.n	41fedc <lv_label_set_text+0x68>
  41ff24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_mem_free(ext->text);
  41ff26:	4630      	mov	r0, r6
  41ff28:	4b10      	ldr	r3, [pc, #64]	; (41ff6c <lv_label_set_text+0xf8>)
  41ff2a:	4798      	blx	r3
            ext->text = NULL;
  41ff2c:	2300      	movs	r3, #0
  41ff2e:	6023      	str	r3, [r4, #0]
  41ff30:	e7c0      	b.n	41feb4 <lv_label_set_text+0x40>
        LV_ASSERT_MEM(ext->text);
  41ff32:	6822      	ldr	r2, [r4, #0]
  41ff34:	2300      	movs	r3, #0
  41ff36:	480c      	ldr	r0, [pc, #48]	; (41ff68 <lv_label_set_text+0xf4>)
  41ff38:	4903      	ldr	r1, [pc, #12]	; (41ff48 <lv_label_set_text+0xd4>)
  41ff3a:	4788      	blx	r1
  41ff3c:	e7fe      	b.n	41ff3c <lv_label_set_text+0xc8>
  41ff3e:	bf00      	nop
  41ff40:	004150ef 	.word	0x004150ef
  41ff44:	00425a74 	.word	0x00425a74
  41ff48:	004150f9 	.word	0x004150f9
  41ff4c:	00405565 	.word	0x00405565
  41ff50:	00407281 	.word	0x00407281
  41ff54:	00423781 	.word	0x00423781
  41ff58:	004157c9 	.word	0x004157c9
  41ff5c:	0042369d 	.word	0x0042369d
  41ff60:	0041f861 	.word	0x0041f861
  41ff64:	00415c61 	.word	0x00415c61
  41ff68:	00425a60 	.word	0x00425a60
  41ff6c:	004158b9 	.word	0x004158b9

0041ff70 <lv_label_set_text_fmt>:
{
  41ff70:	b40e      	push	{r1, r2, r3}
  41ff72:	b570      	push	{r4, r5, r6, lr}
  41ff74:	b083      	sub	sp, #12
  41ff76:	4605      	mov	r5, r0
  41ff78:	9e07      	ldr	r6, [sp, #28]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41ff7a:	4b1d      	ldr	r3, [pc, #116]	; (41fff0 <lv_label_set_text_fmt+0x80>)
  41ff7c:	4798      	blx	r3
  41ff7e:	b928      	cbnz	r0, 41ff8c <lv_label_set_text_fmt+0x1c>
  41ff80:	462a      	mov	r2, r5
  41ff82:	2300      	movs	r3, #0
  41ff84:	481b      	ldr	r0, [pc, #108]	; (41fff4 <lv_label_set_text_fmt+0x84>)
  41ff86:	491c      	ldr	r1, [pc, #112]	; (41fff8 <lv_label_set_text_fmt+0x88>)
  41ff88:	4788      	blx	r1
  41ff8a:	e7fe      	b.n	41ff8a <lv_label_set_text_fmt+0x1a>
    LV_ASSERT_STR(fmt);
  41ff8c:	4630      	mov	r0, r6
  41ff8e:	4b18      	ldr	r3, [pc, #96]	; (41fff0 <lv_label_set_text_fmt+0x80>)
  41ff90:	4798      	blx	r3
  41ff92:	b928      	cbnz	r0, 41ffa0 <lv_label_set_text_fmt+0x30>
  41ff94:	4632      	mov	r2, r6
  41ff96:	2300      	movs	r3, #0
  41ff98:	4816      	ldr	r0, [pc, #88]	; (41fff4 <lv_label_set_text_fmt+0x84>)
  41ff9a:	4917      	ldr	r1, [pc, #92]	; (41fff8 <lv_label_set_text_fmt+0x88>)
  41ff9c:	4788      	blx	r1
  41ff9e:	e7fe      	b.n	41ff9e <lv_label_set_text_fmt+0x2e>
    lv_obj_invalidate(label);
  41ffa0:	4628      	mov	r0, r5
  41ffa2:	4b16      	ldr	r3, [pc, #88]	; (41fffc <lv_label_set_text_fmt+0x8c>)
  41ffa4:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41ffa6:	4628      	mov	r0, r5
  41ffa8:	4b15      	ldr	r3, [pc, #84]	; (420000 <lv_label_set_text_fmt+0x90>)
  41ffaa:	4798      	blx	r3
  41ffac:	4604      	mov	r4, r0
    if(fmt == NULL) {
  41ffae:	b93e      	cbnz	r6, 41ffc0 <lv_label_set_text_fmt+0x50>
        lv_label_refr_text(label);
  41ffb0:	4628      	mov	r0, r5
  41ffb2:	4b14      	ldr	r3, [pc, #80]	; (420004 <lv_label_set_text_fmt+0x94>)
  41ffb4:	4798      	blx	r3
}
  41ffb6:	b003      	add	sp, #12
  41ffb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  41ffbc:	b003      	add	sp, #12
  41ffbe:	4770      	bx	lr
    if(ext->text != NULL && ext->static_txt == 0) {
  41ffc0:	6800      	ldr	r0, [r0, #0]
  41ffc2:	b138      	cbz	r0, 41ffd4 <lv_label_set_text_fmt+0x64>
  41ffc4:	7ca3      	ldrb	r3, [r4, #18]
  41ffc6:	f013 0f08 	tst.w	r3, #8
  41ffca:	d103      	bne.n	41ffd4 <lv_label_set_text_fmt+0x64>
        lv_mem_free(ext->text);
  41ffcc:	4b0e      	ldr	r3, [pc, #56]	; (420008 <lv_label_set_text_fmt+0x98>)
  41ffce:	4798      	blx	r3
        ext->text = NULL;
  41ffd0:	2300      	movs	r3, #0
  41ffd2:	6023      	str	r3, [r4, #0]
    va_start(args, fmt);
  41ffd4:	a908      	add	r1, sp, #32
  41ffd6:	9101      	str	r1, [sp, #4]
    ext->text = _lv_txt_set_text_vfmt(fmt, args);
  41ffd8:	4630      	mov	r0, r6
  41ffda:	4b0c      	ldr	r3, [pc, #48]	; (42000c <lv_label_set_text_fmt+0x9c>)
  41ffdc:	4798      	blx	r3
  41ffde:	6020      	str	r0, [r4, #0]
    ext->static_txt = 0; /*Now the text is dynamically allocated*/
  41ffe0:	7ca3      	ldrb	r3, [r4, #18]
  41ffe2:	f36f 03c3 	bfc	r3, #3, #1
  41ffe6:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  41ffe8:	4628      	mov	r0, r5
  41ffea:	4b06      	ldr	r3, [pc, #24]	; (420004 <lv_label_set_text_fmt+0x94>)
  41ffec:	4798      	blx	r3
  41ffee:	e7e2      	b.n	41ffb6 <lv_label_set_text_fmt+0x46>
  41fff0:	004150ef 	.word	0x004150ef
  41fff4:	00425a74 	.word	0x00425a74
  41fff8:	004150f9 	.word	0x004150f9
  41fffc:	00405565 	.word	0x00405565
  420000:	00407281 	.word	0x00407281
  420004:	0041f861 	.word	0x0041f861
  420008:	004158b9 	.word	0x004158b9
  42000c:	00417341 	.word	0x00417341

00420010 <lv_label_set_text_static>:
{
  420010:	b570      	push	{r4, r5, r6, lr}
  420012:	4605      	mov	r5, r0
  420014:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  420016:	4b10      	ldr	r3, [pc, #64]	; (420058 <lv_label_set_text_static+0x48>)
  420018:	4798      	blx	r3
  42001a:	b928      	cbnz	r0, 420028 <lv_label_set_text_static+0x18>
  42001c:	462a      	mov	r2, r5
  42001e:	2300      	movs	r3, #0
  420020:	480e      	ldr	r0, [pc, #56]	; (42005c <lv_label_set_text_static+0x4c>)
  420022:	490f      	ldr	r1, [pc, #60]	; (420060 <lv_label_set_text_static+0x50>)
  420024:	4788      	blx	r1
  420026:	e7fe      	b.n	420026 <lv_label_set_text_static+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  420028:	4628      	mov	r0, r5
  42002a:	4b0e      	ldr	r3, [pc, #56]	; (420064 <lv_label_set_text_static+0x54>)
  42002c:	4798      	blx	r3
  42002e:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
  420030:	7c83      	ldrb	r3, [r0, #18]
  420032:	f013 0f08 	tst.w	r3, #8
  420036:	d105      	bne.n	420044 <lv_label_set_text_static+0x34>
  420038:	6800      	ldr	r0, [r0, #0]
  42003a:	b118      	cbz	r0, 420044 <lv_label_set_text_static+0x34>
        lv_mem_free(ext->text);
  42003c:	4b0a      	ldr	r3, [pc, #40]	; (420068 <lv_label_set_text_static+0x58>)
  42003e:	4798      	blx	r3
        ext->text = NULL;
  420040:	2300      	movs	r3, #0
  420042:	6023      	str	r3, [r4, #0]
    if(text != NULL) {
  420044:	b126      	cbz	r6, 420050 <lv_label_set_text_static+0x40>
        ext->static_txt = 1;
  420046:	7ca3      	ldrb	r3, [r4, #18]
  420048:	f043 0308 	orr.w	r3, r3, #8
  42004c:	74a3      	strb	r3, [r4, #18]
        ext->text       = (char *)text;
  42004e:	6026      	str	r6, [r4, #0]
    lv_label_refr_text(label);
  420050:	4628      	mov	r0, r5
  420052:	4b06      	ldr	r3, [pc, #24]	; (42006c <lv_label_set_text_static+0x5c>)
  420054:	4798      	blx	r3
  420056:	bd70      	pop	{r4, r5, r6, pc}
  420058:	004150ef 	.word	0x004150ef
  42005c:	00425a74 	.word	0x00425a74
  420060:	004150f9 	.word	0x004150f9
  420064:	00407281 	.word	0x00407281
  420068:	004158b9 	.word	0x004158b9
  42006c:	0041f861 	.word	0x0041f861

00420070 <lv_label_set_long_mode>:
{
  420070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  420072:	4605      	mov	r5, r0
  420074:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  420076:	4b1e      	ldr	r3, [pc, #120]	; (4200f0 <lv_label_set_long_mode+0x80>)
  420078:	4798      	blx	r3
  42007a:	b928      	cbnz	r0, 420088 <lv_label_set_long_mode+0x18>
  42007c:	462a      	mov	r2, r5
  42007e:	2300      	movs	r3, #0
  420080:	481c      	ldr	r0, [pc, #112]	; (4200f4 <lv_label_set_long_mode+0x84>)
  420082:	491d      	ldr	r1, [pc, #116]	; (4200f8 <lv_label_set_long_mode+0x88>)
  420084:	4788      	blx	r1
  420086:	e7fe      	b.n	420086 <lv_label_set_long_mode+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  420088:	4628      	mov	r0, r5
  42008a:	4b1c      	ldr	r3, [pc, #112]	; (4200fc <lv_label_set_long_mode+0x8c>)
  42008c:	4798      	blx	r3
  42008e:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
  420090:	491b      	ldr	r1, [pc, #108]	; (420100 <lv_label_set_long_mode+0x90>)
  420092:	4628      	mov	r0, r5
  420094:	4e1b      	ldr	r6, [pc, #108]	; (420104 <lv_label_set_long_mode+0x94>)
  420096:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
  420098:	491b      	ldr	r1, [pc, #108]	; (420108 <lv_label_set_long_mode+0x98>)
  42009a:	4628      	mov	r0, r5
  42009c:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  42009e:	491b      	ldr	r1, [pc, #108]	; (42010c <lv_label_set_long_mode+0x9c>)
  4200a0:	4628      	mov	r0, r5
  4200a2:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  4200a4:	491a      	ldr	r1, [pc, #104]	; (420110 <lv_label_set_long_mode+0xa0>)
  4200a6:	4628      	mov	r0, r5
  4200a8:	47b0      	blx	r6
    ext->offset.x = 0;
  4200aa:	2300      	movs	r3, #0
  4200ac:	81e3      	strh	r3, [r4, #14]
    ext->offset.y = 0;
  4200ae:	8223      	strh	r3, [r4, #16]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
  4200b0:	1efb      	subs	r3, r7, #3
  4200b2:	b2db      	uxtb	r3, r3
  4200b4:	2b02      	cmp	r3, #2
        ext->expand = 1;
  4200b6:	7ca3      	ldrb	r3, [r4, #18]
  4200b8:	bf94      	ite	ls
  4200ba:	f043 0380 	orrls.w	r3, r3, #128	; 0x80
        ext->expand = 0;
  4200be:	f36f 13c7 	bfchi	r3, #7, #1
  4200c2:	74a3      	strb	r3, [r4, #18]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
  4200c4:	7ca3      	ldrb	r3, [r4, #18]
  4200c6:	f003 0307 	and.w	r3, r3, #7
  4200ca:	2b02      	cmp	r3, #2
  4200cc:	d007      	beq.n	4200de <lv_label_set_long_mode+0x6e>
    ext->long_mode = long_mode;
  4200ce:	7ca3      	ldrb	r3, [r4, #18]
  4200d0:	f367 0302 	bfi	r3, r7, #0, #3
  4200d4:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  4200d6:	4628      	mov	r0, r5
  4200d8:	4b0e      	ldr	r3, [pc, #56]	; (420114 <lv_label_set_long_mode+0xa4>)
  4200da:	4798      	blx	r3
  4200dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
  4200de:	68a2      	ldr	r2, [r4, #8]
  4200e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4200e4:	429a      	cmp	r2, r3
  4200e6:	d0f2      	beq.n	4200ce <lv_label_set_long_mode+0x5e>
        lv_label_revert_dots(label);
  4200e8:	4628      	mov	r0, r5
  4200ea:	4b0b      	ldr	r3, [pc, #44]	; (420118 <lv_label_set_long_mode+0xa8>)
  4200ec:	4798      	blx	r3
  4200ee:	e7ee      	b.n	4200ce <lv_label_set_long_mode+0x5e>
  4200f0:	004150ef 	.word	0x004150ef
  4200f4:	00425a74 	.word	0x00425a74
  4200f8:	004150f9 	.word	0x004150f9
  4200fc:	00407281 	.word	0x00407281
  420100:	004056fd 	.word	0x004056fd
  420104:	0041476d 	.word	0x0041476d
  420108:	0040573d 	.word	0x0040573d
  42010c:	0041f1a5 	.word	0x0041f1a5
  420110:	0041f189 	.word	0x0041f189
  420114:	0041f861 	.word	0x0041f861
  420118:	0041f039 	.word	0x0041f039

0042011c <lv_label_set_recolor>:
{
  42011c:	b538      	push	{r3, r4, r5, lr}
  42011e:	4604      	mov	r4, r0
  420120:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  420122:	4b0c      	ldr	r3, [pc, #48]	; (420154 <lv_label_set_recolor+0x38>)
  420124:	4798      	blx	r3
  420126:	b928      	cbnz	r0, 420134 <lv_label_set_recolor+0x18>
  420128:	4622      	mov	r2, r4
  42012a:	2300      	movs	r3, #0
  42012c:	480a      	ldr	r0, [pc, #40]	; (420158 <lv_label_set_recolor+0x3c>)
  42012e:	490b      	ldr	r1, [pc, #44]	; (42015c <lv_label_set_recolor+0x40>)
  420130:	4788      	blx	r1
  420132:	e7fe      	b.n	420132 <lv_label_set_recolor+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  420134:	4620      	mov	r0, r4
  420136:	4b0a      	ldr	r3, [pc, #40]	; (420160 <lv_label_set_recolor+0x44>)
  420138:	4798      	blx	r3
    if(ext->recolor == en) return;
  42013a:	7c83      	ldrb	r3, [r0, #18]
  42013c:	f3c3 1380 	ubfx	r3, r3, #6, #1
  420140:	42ab      	cmp	r3, r5
  420142:	d006      	beq.n	420152 <lv_label_set_recolor+0x36>
    ext->recolor = en == false ? 0 : 1;
  420144:	7c83      	ldrb	r3, [r0, #18]
  420146:	f365 1386 	bfi	r3, r5, #6, #1
  42014a:	7483      	strb	r3, [r0, #18]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
  42014c:	4620      	mov	r0, r4
  42014e:	4b05      	ldr	r3, [pc, #20]	; (420164 <lv_label_set_recolor+0x48>)
  420150:	4798      	blx	r3
  420152:	bd38      	pop	{r3, r4, r5, pc}
  420154:	004150ef 	.word	0x004150ef
  420158:	00425a74 	.word	0x00425a74
  42015c:	004150f9 	.word	0x004150f9
  420160:	00407281 	.word	0x00407281
  420164:	0041f861 	.word	0x0041f861

00420168 <lv_label_create>:
{
  420168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42016c:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
  42016e:	4b6b      	ldr	r3, [pc, #428]	; (42031c <lv_label_create+0x1b4>)
  420170:	4798      	blx	r3
  420172:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_label);
  420174:	4b6a      	ldr	r3, [pc, #424]	; (420320 <lv_label_create+0x1b8>)
  420176:	4798      	blx	r3
  420178:	b1b0      	cbz	r0, 4201a8 <lv_label_create+0x40>
    if(new_label == NULL) return NULL;
  42017a:	2c00      	cmp	r4, #0
  42017c:	f000 8085 	beq.w	42028a <lv_label_create+0x122>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
  420180:	4b68      	ldr	r3, [pc, #416]	; (420324 <lv_label_create+0x1bc>)
  420182:	681b      	ldr	r3, [r3, #0]
  420184:	b1b3      	cbz	r3, 4201b4 <lv_label_create+0x4c>
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
  420186:	2114      	movs	r1, #20
  420188:	4620      	mov	r0, r4
  42018a:	4b67      	ldr	r3, [pc, #412]	; (420328 <lv_label_create+0x1c0>)
  42018c:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
  42018e:	4620      	mov	r0, r4
  420190:	4b66      	ldr	r3, [pc, #408]	; (42032c <lv_label_create+0x1c4>)
  420192:	4798      	blx	r3
  420194:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  420196:	4b62      	ldr	r3, [pc, #392]	; (420320 <lv_label_create+0x1b8>)
  420198:	4798      	blx	r3
  42019a:	b988      	cbnz	r0, 4201c0 <lv_label_create+0x58>
  42019c:	462a      	mov	r2, r5
  42019e:	2300      	movs	r3, #0
  4201a0:	4863      	ldr	r0, [pc, #396]	; (420330 <lv_label_create+0x1c8>)
  4201a2:	4964      	ldr	r1, [pc, #400]	; (420334 <lv_label_create+0x1cc>)
  4201a4:	4788      	blx	r1
  4201a6:	e7fe      	b.n	4201a6 <lv_label_create+0x3e>
    LV_ASSERT_MEM(new_label);
  4201a8:	4622      	mov	r2, r4
  4201aa:	2300      	movs	r3, #0
  4201ac:	4860      	ldr	r0, [pc, #384]	; (420330 <lv_label_create+0x1c8>)
  4201ae:	4961      	ldr	r1, [pc, #388]	; (420334 <lv_label_create+0x1cc>)
  4201b0:	4788      	blx	r1
  4201b2:	e7fe      	b.n	4201b2 <lv_label_create+0x4a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
  4201b4:	4620      	mov	r0, r4
  4201b6:	4b60      	ldr	r3, [pc, #384]	; (420338 <lv_label_create+0x1d0>)
  4201b8:	4798      	blx	r3
  4201ba:	4b5a      	ldr	r3, [pc, #360]	; (420324 <lv_label_create+0x1bc>)
  4201bc:	6018      	str	r0, [r3, #0]
  4201be:	e7e2      	b.n	420186 <lv_label_create+0x1e>
    if(ext == NULL) {
  4201c0:	2d00      	cmp	r5, #0
  4201c2:	d065      	beq.n	420290 <lv_label_create+0x128>
    ext->text       = NULL;
  4201c4:	2300      	movs	r3, #0
  4201c6:	602b      	str	r3, [r5, #0]
    ext->static_txt = 0;
  4201c8:	7caa      	ldrb	r2, [r5, #18]
    ext->align      = LV_LABEL_ALIGN_AUTO;
  4201ca:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
    ext->dot_end    = LV_LABEL_DOT_END_INV;
  4201ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4201d2:	60a9      	str	r1, [r5, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
  4201d4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  4201d8:	f363 0202 	bfi	r2, r3, #0, #3
  4201dc:	74aa      	strb	r2, [r5, #18]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
  4201de:	2219      	movs	r2, #25
  4201e0:	81aa      	strh	r2, [r5, #12]
    ext->offset.x = 0;
  4201e2:	81eb      	strh	r3, [r5, #14]
    ext->offset.y = 0;
  4201e4:	822b      	strh	r3, [r5, #16]
    ext->dot.tmp_ptr   = NULL;
  4201e6:	606b      	str	r3, [r5, #4]
    ext->dot_tmp_alloc = 0;
  4201e8:	7cea      	ldrb	r2, [r5, #19]
  4201ea:	f363 0200 	bfi	r2, r3, #0, #1
  4201ee:	74ea      	strb	r2, [r5, #19]
    lv_obj_set_design_cb(new_label, lv_label_design);
  4201f0:	4952      	ldr	r1, [pc, #328]	; (42033c <lv_label_create+0x1d4>)
  4201f2:	4620      	mov	r0, r4
  4201f4:	4b52      	ldr	r3, [pc, #328]	; (420340 <lv_label_create+0x1d8>)
  4201f6:	4798      	blx	r3
    lv_obj_set_signal_cb(new_label, lv_label_signal);
  4201f8:	4952      	ldr	r1, [pc, #328]	; (420344 <lv_label_create+0x1dc>)
  4201fa:	4620      	mov	r0, r4
  4201fc:	4b52      	ldr	r3, [pc, #328]	; (420348 <lv_label_create+0x1e0>)
  4201fe:	4798      	blx	r3
    if(copy == NULL) {
  420200:	2f00      	cmp	r7, #0
  420202:	d04a      	beq.n	42029a <lv_label_create+0x132>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  420204:	4638      	mov	r0, r7
  420206:	4b49      	ldr	r3, [pc, #292]	; (42032c <lv_label_create+0x1c4>)
  420208:	4798      	blx	r3
  42020a:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
  42020c:	4638      	mov	r0, r7
  42020e:	4b4f      	ldr	r3, [pc, #316]	; (42034c <lv_label_create+0x1e4>)
  420210:	4798      	blx	r3
  420212:	4601      	mov	r1, r0
  420214:	4620      	mov	r0, r4
  420216:	4b4e      	ldr	r3, [pc, #312]	; (420350 <lv_label_create+0x1e8>)
  420218:	4798      	blx	r3
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
  42021a:	4638      	mov	r0, r7
  42021c:	4b4d      	ldr	r3, [pc, #308]	; (420354 <lv_label_create+0x1ec>)
  42021e:	4798      	blx	r3
  420220:	4601      	mov	r1, r0
  420222:	4620      	mov	r0, r4
  420224:	4b4c      	ldr	r3, [pc, #304]	; (420358 <lv_label_create+0x1f0>)
  420226:	4798      	blx	r3
        lv_label_set_align(new_label, lv_label_get_align(copy));
  420228:	4638      	mov	r0, r7
  42022a:	4b4c      	ldr	r3, [pc, #304]	; (42035c <lv_label_create+0x1f4>)
  42022c:	4798      	blx	r3
  42022e:	4601      	mov	r1, r0
  420230:	4620      	mov	r0, r4
  420232:	4b4b      	ldr	r3, [pc, #300]	; (420360 <lv_label_create+0x1f8>)
  420234:	4798      	blx	r3
        if(copy_ext->static_txt == 0)
  420236:	7cb3      	ldrb	r3, [r6, #18]
  420238:	f013 0f08 	tst.w	r3, #8
  42023c:	d13e      	bne.n	4202bc <lv_label_create+0x154>
            lv_label_set_text(new_label, lv_label_get_text(copy));
  42023e:	4638      	mov	r0, r7
  420240:	4b48      	ldr	r3, [pc, #288]	; (420364 <lv_label_create+0x1fc>)
  420242:	4798      	blx	r3
  420244:	4601      	mov	r1, r0
  420246:	4620      	mov	r0, r4
  420248:	4b47      	ldr	r3, [pc, #284]	; (420368 <lv_label_create+0x200>)
  42024a:	4798      	blx	r3
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
  42024c:	7cb3      	ldrb	r3, [r6, #18]
  42024e:	f003 0307 	and.w	r3, r3, #7
  420252:	2b02      	cmp	r3, #2
  420254:	d03a      	beq.n	4202cc <lv_label_create+0x164>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
  420256:	7cf3      	ldrb	r3, [r6, #19]
  420258:	f013 0f01 	tst.w	r3, #1
  42025c:	d055      	beq.n	42030a <lv_label_create+0x1a2>
  42025e:	6870      	ldr	r0, [r6, #4]
  420260:	2800      	cmp	r0, #0
  420262:	d052      	beq.n	42030a <lv_label_create+0x1a2>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
  420264:	4b41      	ldr	r3, [pc, #260]	; (42036c <lv_label_create+0x204>)
  420266:	4798      	blx	r3
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
  420268:	4602      	mov	r2, r0
  42026a:	6869      	ldr	r1, [r5, #4]
  42026c:	4620      	mov	r0, r4
  42026e:	4b40      	ldr	r3, [pc, #256]	; (420370 <lv_label_create+0x208>)
  420270:	4798      	blx	r3
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
  420272:	7cf2      	ldrb	r2, [r6, #19]
  420274:	7ceb      	ldrb	r3, [r5, #19]
  420276:	f362 0300 	bfi	r3, r2, #0, #1
  42027a:	74eb      	strb	r3, [r5, #19]
        ext->dot_end       = copy_ext->dot_end;
  42027c:	68b3      	ldr	r3, [r6, #8]
  42027e:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  420280:	22ff      	movs	r2, #255	; 0xff
  420282:	4611      	mov	r1, r2
  420284:	4620      	mov	r0, r4
  420286:	4b3b      	ldr	r3, [pc, #236]	; (420374 <lv_label_create+0x20c>)
  420288:	4798      	blx	r3
}
  42028a:	4620      	mov	r0, r4
  42028c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(new_label);
  420290:	4620      	mov	r0, r4
  420292:	4b39      	ldr	r3, [pc, #228]	; (420378 <lv_label_create+0x210>)
  420294:	4798      	blx	r3
        return NULL;
  420296:	2400      	movs	r4, #0
  420298:	e7f7      	b.n	42028a <lv_label_create+0x122>
        lv_theme_apply(new_label, LV_THEME_LABEL);
  42029a:	2112      	movs	r1, #18
  42029c:	4620      	mov	r0, r4
  42029e:	4b37      	ldr	r3, [pc, #220]	; (42037c <lv_label_create+0x214>)
  4202a0:	4798      	blx	r3
        lv_obj_set_click(new_label, false);
  4202a2:	2100      	movs	r1, #0
  4202a4:	4620      	mov	r0, r4
  4202a6:	4b36      	ldr	r3, [pc, #216]	; (420380 <lv_label_create+0x218>)
  4202a8:	4798      	blx	r3
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
  4202aa:	2100      	movs	r1, #0
  4202ac:	4620      	mov	r0, r4
  4202ae:	4b28      	ldr	r3, [pc, #160]	; (420350 <lv_label_create+0x1e8>)
  4202b0:	4798      	blx	r3
        lv_label_set_text(new_label, "Text");
  4202b2:	4934      	ldr	r1, [pc, #208]	; (420384 <lv_label_create+0x21c>)
  4202b4:	4620      	mov	r0, r4
  4202b6:	4b2c      	ldr	r3, [pc, #176]	; (420368 <lv_label_create+0x200>)
  4202b8:	4798      	blx	r3
  4202ba:	e7e6      	b.n	42028a <lv_label_create+0x122>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
  4202bc:	4638      	mov	r0, r7
  4202be:	4b29      	ldr	r3, [pc, #164]	; (420364 <lv_label_create+0x1fc>)
  4202c0:	4798      	blx	r3
  4202c2:	4601      	mov	r1, r0
  4202c4:	4620      	mov	r0, r4
  4202c6:	4b30      	ldr	r3, [pc, #192]	; (420388 <lv_label_create+0x220>)
  4202c8:	4798      	blx	r3
  4202ca:	e7bf      	b.n	42024c <lv_label_create+0xe4>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
  4202cc:	682f      	ldr	r7, [r5, #0]
  4202ce:	6830      	ldr	r0, [r6, #0]
  4202d0:	4b2e      	ldr	r3, [pc, #184]	; (42038c <lv_label_create+0x224>)
  4202d2:	4798      	blx	r3
  4202d4:	4601      	mov	r1, r0
  4202d6:	4638      	mov	r0, r7
  4202d8:	4b2d      	ldr	r3, [pc, #180]	; (420390 <lv_label_create+0x228>)
  4202da:	4798      	blx	r3
  4202dc:	6028      	str	r0, [r5, #0]
            LV_ASSERT_MEM(ext->text);
  4202de:	4b10      	ldr	r3, [pc, #64]	; (420320 <lv_label_create+0x1b8>)
  4202e0:	4798      	blx	r3
  4202e2:	b928      	cbnz	r0, 4202f0 <lv_label_create+0x188>
  4202e4:	682a      	ldr	r2, [r5, #0]
  4202e6:	2300      	movs	r3, #0
  4202e8:	4811      	ldr	r0, [pc, #68]	; (420330 <lv_label_create+0x1c8>)
  4202ea:	4912      	ldr	r1, [pc, #72]	; (420334 <lv_label_create+0x1cc>)
  4202ec:	4788      	blx	r1
  4202ee:	e7fe      	b.n	4202ee <lv_label_create+0x186>
            if(ext->text == NULL) return NULL;
  4202f0:	682f      	ldr	r7, [r5, #0]
  4202f2:	b187      	cbz	r7, 420316 <lv_label_create+0x1ae>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
  4202f4:	f8d6 8000 	ldr.w	r8, [r6]
  4202f8:	4640      	mov	r0, r8
  4202fa:	4b24      	ldr	r3, [pc, #144]	; (42038c <lv_label_create+0x224>)
  4202fc:	4798      	blx	r3
  4202fe:	4602      	mov	r2, r0
  420300:	4641      	mov	r1, r8
  420302:	4638      	mov	r0, r7
  420304:	4b23      	ldr	r3, [pc, #140]	; (420394 <lv_label_create+0x22c>)
  420306:	4798      	blx	r3
  420308:	e7a5      	b.n	420256 <lv_label_create+0xee>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
  42030a:	2204      	movs	r2, #4
  42030c:	18b1      	adds	r1, r6, r2
  42030e:	18a8      	adds	r0, r5, r2
  420310:	4b20      	ldr	r3, [pc, #128]	; (420394 <lv_label_create+0x22c>)
  420312:	4798      	blx	r3
  420314:	e7ad      	b.n	420272 <lv_label_create+0x10a>
            if(ext->text == NULL) return NULL;
  420316:	2400      	movs	r4, #0
  420318:	e7b7      	b.n	42028a <lv_label_create+0x122>
  42031a:	bf00      	nop
  42031c:	00405d95 	.word	0x00405d95
  420320:	004150ef 	.word	0x004150ef
  420324:	204147a0 	.word	0x204147a0
  420328:	00404f39 	.word	0x00404f39
  42032c:	00407281 	.word	0x00407281
  420330:	00425a60 	.word	0x00425a60
  420334:	004150f9 	.word	0x004150f9
  420338:	00407231 	.word	0x00407231
  42033c:	0041f5e1 	.word	0x0041f5e1
  420340:	00404f11 	.word	0x00404f11
  420344:	0041fd85 	.word	0x0041fd85
  420348:	00404ed5 	.word	0x00404ed5
  42034c:	0041f23d 	.word	0x0041f23d
  420350:	00420071 	.word	0x00420071
  420354:	0041f2ad 	.word	0x0041f2ad
  420358:	0042011d 	.word	0x0042011d
  42035c:	0041f271 	.word	0x0041f271
  420360:	0041f1c1 	.word	0x0041f1c1
  420364:	0041f20d 	.word	0x0041f20d
  420368:	0041fe75 	.word	0x0041fe75
  42036c:	00423781 	.word	0x00423781
  420370:	0041f121 	.word	0x0041f121
  420374:	00406d55 	.word	0x00406d55
  420378:	004073fd 	.word	0x004073fd
  42037c:	00417431 	.word	0x00417431
  420380:	00404d11 	.word	0x00404d11
  420384:	00430714 	.word	0x00430714
  420388:	00420011 	.word	0x00420011
  42038c:	00415941 	.word	0x00415941
  420390:	00415c61 	.word	0x00415c61
  420394:	00415a1d 	.word	0x00415a1d

00420398 <lv_msgbox_close_ready_cb>:
    }
}

#if LV_USE_ANIMATION
static void lv_msgbox_close_ready_cb(lv_anim_t * a)
{
  420398:	b508      	push	{r3, lr}
    lv_obj_del(a->var);
  42039a:	6800      	ldr	r0, [r0, #0]
  42039c:	4b01      	ldr	r3, [pc, #4]	; (4203a4 <lv_msgbox_close_ready_cb+0xc>)
  42039e:	4798      	blx	r3
  4203a0:	bd08      	pop	{r3, pc}
  4203a2:	bf00      	nop
  4203a4:	004073fd 	.word	0x004073fd

004203a8 <mbox_realign>:
{
  4203a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4203ac:	b083      	sub	sp, #12
  4203ae:	4682      	mov	sl, r0
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  4203b0:	4b2b      	ldr	r3, [pc, #172]	; (420460 <mbox_realign+0xb8>)
  4203b2:	4798      	blx	r3
  4203b4:	4605      	mov	r5, r0
    lv_coord_t w = lv_obj_get_width_fit(mbox);
  4203b6:	4650      	mov	r0, sl
  4203b8:	4b2a      	ldr	r3, [pc, #168]	; (420464 <mbox_realign+0xbc>)
  4203ba:	4798      	blx	r3
  4203bc:	9001      	str	r0, [sp, #4]
    if(ext->text) {
  4203be:	6868      	ldr	r0, [r5, #4]
  4203c0:	b110      	cbz	r0, 4203c8 <mbox_realign+0x20>
        lv_obj_set_width(ext->text, w);
  4203c2:	9901      	ldr	r1, [sp, #4]
  4203c4:	4b28      	ldr	r3, [pc, #160]	; (420468 <mbox_realign+0xc0>)
  4203c6:	4798      	blx	r3
    if(ext->btnm) {
  4203c8:	68ab      	ldr	r3, [r5, #8]
  4203ca:	2b00      	cmp	r3, #0
  4203cc:	d045      	beq.n	42045a <mbox_realign+0xb2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4203ce:	2210      	movs	r2, #16
  4203d0:	2140      	movs	r1, #64	; 0x40
  4203d2:	4650      	mov	r0, sl
  4203d4:	4f25      	ldr	r7, [pc, #148]	; (42046c <mbox_realign+0xc4>)
  4203d6:	47b8      	blx	r7
  4203d8:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4203da:	2211      	movs	r2, #17
  4203dc:	2140      	movs	r1, #64	; 0x40
  4203de:	4650      	mov	r0, sl
  4203e0:	47b8      	blx	r7
  4203e2:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4203e4:	2214      	movs	r2, #20
  4203e6:	2140      	movs	r1, #64	; 0x40
  4203e8:	4650      	mov	r0, sl
  4203ea:	47b8      	blx	r7
  4203ec:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4203ee:	2210      	movs	r2, #16
  4203f0:	2141      	movs	r1, #65	; 0x41
  4203f2:	4650      	mov	r0, sl
  4203f4:	47b8      	blx	r7
  4203f6:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4203f8:	2211      	movs	r2, #17
  4203fa:	2141      	movs	r1, #65	; 0x41
  4203fc:	4650      	mov	r0, sl
  4203fe:	47b8      	blx	r7
  420400:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  420402:	f248 028e 	movw	r2, #32910	; 0x808e
  420406:	2141      	movs	r1, #65	; 0x41
  420408:	4650      	mov	r0, sl
  42040a:	4b19      	ldr	r3, [pc, #100]	; (420470 <mbox_realign+0xc8>)
  42040c:	4798      	blx	r3
  42040e:	4682      	mov	sl, r0
        const char ** btnm_map = lv_btnmatrix_get_map_array(ext->btnm);
  420410:	68a8      	ldr	r0, [r5, #8]
  420412:	4b18      	ldr	r3, [pc, #96]	; (420474 <mbox_realign+0xcc>)
  420414:	4798      	blx	r3
        for(i = 0; btnm_map[i][0] != '\0'; i++) {
  420416:	6803      	ldr	r3, [r0, #0]
  420418:	781a      	ldrb	r2, [r3, #0]
  42041a:	b16a      	cbz	r2, 420438 <mbox_realign+0x90>
  42041c:	2300      	movs	r3, #0
  42041e:	2101      	movs	r1, #1
  420420:	e005      	b.n	42042e <mbox_realign+0x86>
  420422:	3301      	adds	r3, #1
  420424:	b29b      	uxth	r3, r3
  420426:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
  42042a:	7812      	ldrb	r2, [r2, #0]
  42042c:	b12a      	cbz	r2, 42043a <mbox_realign+0x92>
            if(btnm_map[i][0] == '\n') btnm_lines++;
  42042e:	2a0a      	cmp	r2, #10
  420430:	d1f7      	bne.n	420422 <mbox_realign+0x7a>
  420432:	3101      	adds	r1, #1
  420434:	b289      	uxth	r1, r1
  420436:	e7f4      	b.n	420422 <mbox_realign+0x7a>
        uint16_t btnm_lines = 1;
  420438:	2101      	movs	r1, #1
        lv_coord_t btn_h = font_h + btn_top + btn_bottom;
  42043a:	eb04 020b 	add.w	r2, r4, fp
  42043e:	f8ba 4008 	ldrh.w	r4, [sl, #8]
  420442:	4422      	add	r2, r4
        lv_obj_set_size(ext->btnm, w, btn_h * btnm_lines + bg_inner * (btnm_lines - 1) + bg_top + bg_bottom);
  420444:	444e      	add	r6, r9
  420446:	fb12 6201 	smlabb	r2, r2, r1, r6
  42044a:	3901      	subs	r1, #1
  42044c:	fb11 2208 	smlabb	r2, r1, r8, r2
  420450:	b212      	sxth	r2, r2
  420452:	9901      	ldr	r1, [sp, #4]
  420454:	68a8      	ldr	r0, [r5, #8]
  420456:	4b08      	ldr	r3, [pc, #32]	; (420478 <mbox_realign+0xd0>)
  420458:	4798      	blx	r3
}
  42045a:	b003      	add	sp, #12
  42045c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  420460:	00407281 	.word	0x00407281
  420464:	00406b7d 	.word	0x00406b7d
  420468:	004062c5 	.word	0x004062c5
  42046c:	004069b5 	.word	0x004069b5
  420470:	004068c1 	.word	0x004068c1
  420474:	0041d615 	.word	0x0041d615
  420478:	004061cd 	.word	0x004061cd

0042047c <lv_msgbox_signal>:
{
  42047c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  420480:	b082      	sub	sp, #8
  420482:	4605      	mov	r5, r0
  420484:	460e      	mov	r6, r1
  420486:	4614      	mov	r4, r2
    char c_trans = 0;
  420488:	2300      	movs	r3, #0
  42048a:	f88d 3007 	strb.w	r3, [sp, #7]
    if(sign == LV_SIGNAL_CONTROL) {
  42048e:	2918      	cmp	r1, #24
  420490:	d00e      	beq.n	4204b0 <lv_msgbox_signal+0x34>
    if(sign == LV_SIGNAL_GET_STYLE) {
  420492:	2908      	cmp	r1, #8
  420494:	d043      	beq.n	42051e <lv_msgbox_signal+0xa2>
    else if(sign == LV_SIGNAL_GET_STATE_DSC) {
  420496:	2909      	cmp	r1, #9
  420498:	d06d      	beq.n	420576 <lv_msgbox_signal+0xfa>
    res = ancestor_signal(mbox, sign, param);
  42049a:	4b80      	ldr	r3, [pc, #512]	; (42069c <lv_msgbox_signal+0x220>)
  42049c:	681b      	ldr	r3, [r3, #0]
  42049e:	4622      	mov	r2, r4
  4204a0:	4631      	mov	r1, r6
  4204a2:	4628      	mov	r0, r5
  4204a4:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
  4204a6:	2801      	cmp	r0, #1
  4204a8:	d07d      	beq.n	4205a6 <lv_msgbox_signal+0x12a>
}
  4204aa:	b002      	add	sp, #8
  4204ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        c_trans = *((char *)param);
  4204b0:	7813      	ldrb	r3, [r2, #0]
  4204b2:	f88d 3007 	strb.w	r3, [sp, #7]
        if(c_trans == LV_KEY_DOWN) c_trans = LV_KEY_LEFT;
  4204b6:	2b12      	cmp	r3, #18
  4204b8:	d028      	beq.n	42050c <lv_msgbox_signal+0x90>
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
  4204ba:	2b11      	cmp	r3, #17
  4204bc:	d02b      	beq.n	420516 <lv_msgbox_signal+0x9a>
    res = ancestor_signal(mbox, sign, param);
  4204be:	4b77      	ldr	r3, [pc, #476]	; (42069c <lv_msgbox_signal+0x220>)
  4204c0:	681b      	ldr	r3, [r3, #0]
  4204c2:	f10d 0207 	add.w	r2, sp, #7
  4204c6:	4631      	mov	r1, r6
  4204c8:	4628      	mov	r0, r5
  4204ca:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
  4204cc:	2801      	cmp	r0, #1
  4204ce:	d1ec      	bne.n	4204aa <lv_msgbox_signal+0x2e>
  4204d0:	f10d 0407 	add.w	r4, sp, #7
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  4204d4:	4628      	mov	r0, r5
  4204d6:	4b72      	ldr	r3, [pc, #456]	; (4206a0 <lv_msgbox_signal+0x224>)
  4204d8:	4798      	blx	r3
  4204da:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_COORD_CHG) {
  4204dc:	2e02      	cmp	r6, #2
  4204de:	d069      	beq.n	4205b4 <lv_msgbox_signal+0x138>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  4204e0:	2e04      	cmp	r6, #4
  4204e2:	d076      	beq.n	4205d2 <lv_msgbox_signal+0x156>
    else if(sign == LV_SIGNAL_RELEASED) {
  4204e4:	2e0e      	cmp	r6, #14
  4204e6:	d179      	bne.n	4205dc <lv_msgbox_signal+0x160>
        if(ext->btnm) {
  4204e8:	6880      	ldr	r0, [r0, #8]
  4204ea:	2800      	cmp	r0, #0
  4204ec:	f000 80c2 	beq.w	420674 <lv_msgbox_signal+0x1f8>
            uint32_t btn_id = lv_btnmatrix_get_focused_btn(ext->btnm);
  4204f0:	4b6c      	ldr	r3, [pc, #432]	; (4206a4 <lv_msgbox_signal+0x228>)
  4204f2:	4798      	blx	r3
  4204f4:	9000      	str	r0, [sp, #0]
            if(btn_id != LV_BTNMATRIX_BTN_NONE) lv_event_send(mbox, LV_EVENT_VALUE_CHANGED, &btn_id);
  4204f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4204fa:	4298      	cmp	r0, r3
  4204fc:	d004      	beq.n	420508 <lv_msgbox_signal+0x8c>
  4204fe:	466a      	mov	r2, sp
  420500:	2110      	movs	r1, #16
  420502:	4628      	mov	r0, r5
  420504:	4b68      	ldr	r3, [pc, #416]	; (4206a8 <lv_msgbox_signal+0x22c>)
  420506:	4798      	blx	r3
    return res;
  420508:	2001      	movs	r0, #1
  42050a:	e7ce      	b.n	4204aa <lv_msgbox_signal+0x2e>
        if(c_trans == LV_KEY_DOWN) c_trans = LV_KEY_LEFT;
  42050c:	ac02      	add	r4, sp, #8
  42050e:	2314      	movs	r3, #20
  420510:	f804 3d01 	strb.w	r3, [r4, #-1]!
  420514:	e7c1      	b.n	42049a <lv_msgbox_signal+0x1e>
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
  420516:	2313      	movs	r3, #19
  420518:	f88d 3007 	strb.w	r3, [sp, #7]
  42051c:	e7cf      	b.n	4204be <lv_msgbox_signal+0x42>
        info->result = lv_msgbox_get_style(mbox, info->part);
  42051e:	7816      	ldrb	r6, [r2, #0]
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  420520:	4b62      	ldr	r3, [pc, #392]	; (4206ac <lv_msgbox_signal+0x230>)
  420522:	4798      	blx	r3
  420524:	b928      	cbnz	r0, 420532 <lv_msgbox_signal+0xb6>
  420526:	462a      	mov	r2, r5
  420528:	2300      	movs	r3, #0
  42052a:	4861      	ldr	r0, [pc, #388]	; (4206b0 <lv_msgbox_signal+0x234>)
  42052c:	4961      	ldr	r1, [pc, #388]	; (4206b4 <lv_msgbox_signal+0x238>)
  42052e:	4788      	blx	r1
  420530:	e7fe      	b.n	420530 <lv_msgbox_signal+0xb4>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  420532:	4628      	mov	r0, r5
  420534:	4b5a      	ldr	r3, [pc, #360]	; (4206a0 <lv_msgbox_signal+0x224>)
  420536:	4798      	blx	r3
    switch(part) {
  420538:	2e40      	cmp	r6, #64	; 0x40
  42053a:	d00c      	beq.n	420556 <lv_msgbox_signal+0xda>
  42053c:	2e41      	cmp	r6, #65	; 0x41
  42053e:	d012      	beq.n	420566 <lv_msgbox_signal+0xea>
  420540:	b10e      	cbz	r6, 420546 <lv_msgbox_signal+0xca>
            style_dsc_p = NULL;
  420542:	2000      	movs	r0, #0
  420544:	e001      	b.n	42054a <lv_msgbox_signal+0xce>
            style_dsc_p = &mbox->style_list;
  420546:	f105 0028 	add.w	r0, r5, #40	; 0x28
        info->result = lv_msgbox_get_style(mbox, info->part);
  42054a:	6060      	str	r0, [r4, #4]
        if(info->result != NULL) return LV_RES_OK;
  42054c:	2800      	cmp	r0, #0
  42054e:	f000 8099 	beq.w	420684 <lv_msgbox_signal+0x208>
  420552:	2001      	movs	r0, #1
  420554:	e7a9      	b.n	4204aa <lv_msgbox_signal+0x2e>
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BG) : NULL;
  420556:	6880      	ldr	r0, [r0, #8]
  420558:	2800      	cmp	r0, #0
  42055a:	f000 8091 	beq.w	420680 <lv_msgbox_signal+0x204>
  42055e:	2100      	movs	r1, #0
  420560:	4b55      	ldr	r3, [pc, #340]	; (4206b8 <lv_msgbox_signal+0x23c>)
  420562:	4798      	blx	r3
  420564:	e7f1      	b.n	42054a <lv_msgbox_signal+0xce>
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BTN) : NULL;
  420566:	6880      	ldr	r0, [r0, #8]
  420568:	2800      	cmp	r0, #0
  42056a:	f000 8089 	beq.w	420680 <lv_msgbox_signal+0x204>
  42056e:	2101      	movs	r1, #1
  420570:	4b51      	ldr	r3, [pc, #324]	; (4206b8 <lv_msgbox_signal+0x23c>)
  420572:	4798      	blx	r3
  420574:	e7e9      	b.n	42054a <lv_msgbox_signal+0xce>
        lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  420576:	4b4a      	ldr	r3, [pc, #296]	; (4206a0 <lv_msgbox_signal+0x224>)
  420578:	4798      	blx	r3
        if(ext->btnm && info->part == LV_MSGBOX_PART_BTN_BG) {
  42057a:	6880      	ldr	r0, [r0, #8]
  42057c:	2800      	cmp	r0, #0
  42057e:	d075      	beq.n	42066c <lv_msgbox_signal+0x1f0>
  420580:	7823      	ldrb	r3, [r4, #0]
  420582:	2b40      	cmp	r3, #64	; 0x40
  420584:	d003      	beq.n	42058e <lv_msgbox_signal+0x112>
        else if(ext->btnm && info->part == LV_MSGBOX_PART_BTN) {
  420586:	2b41      	cmp	r3, #65	; 0x41
  420588:	d007      	beq.n	42059a <lv_msgbox_signal+0x11e>
        return LV_RES_OK;
  42058a:	2001      	movs	r0, #1
  42058c:	e78d      	b.n	4204aa <lv_msgbox_signal+0x2e>
            info->result = lv_obj_get_state(ext->btnm, LV_BTNMATRIX_PART_BG);
  42058e:	2100      	movs	r1, #0
  420590:	4b4a      	ldr	r3, [pc, #296]	; (4206bc <lv_msgbox_signal+0x240>)
  420592:	4798      	blx	r3
  420594:	7060      	strb	r0, [r4, #1]
        return LV_RES_OK;
  420596:	2001      	movs	r0, #1
            info->result = lv_obj_get_state(ext->btnm, LV_BTNMATRIX_PART_BG);
  420598:	e787      	b.n	4204aa <lv_msgbox_signal+0x2e>
            info->result = lv_obj_get_state(ext->btnm, LV_BTNMATRIX_PART_BTN);
  42059a:	2101      	movs	r1, #1
  42059c:	4b47      	ldr	r3, [pc, #284]	; (4206bc <lv_msgbox_signal+0x240>)
  42059e:	4798      	blx	r3
  4205a0:	7060      	strb	r0, [r4, #1]
        return LV_RES_OK;
  4205a2:	2001      	movs	r0, #1
  4205a4:	e781      	b.n	4204aa <lv_msgbox_signal+0x2e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4205a6:	2e07      	cmp	r6, #7
  4205a8:	d194      	bne.n	4204d4 <lv_msgbox_signal+0x58>
  4205aa:	4945      	ldr	r1, [pc, #276]	; (4206c0 <lv_msgbox_signal+0x244>)
  4205ac:	4620      	mov	r0, r4
  4205ae:	4b45      	ldr	r3, [pc, #276]	; (4206c4 <lv_msgbox_signal+0x248>)
  4205b0:	4798      	blx	r3
  4205b2:	e77a      	b.n	4204aa <lv_msgbox_signal+0x2e>
        if(lv_obj_get_width(mbox) != lv_area_get_width(param)) {
  4205b4:	4628      	mov	r0, r5
  4205b6:	4b44      	ldr	r3, [pc, #272]	; (4206c8 <lv_msgbox_signal+0x24c>)
  4205b8:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4205ba:	88a3      	ldrh	r3, [r4, #4]
  4205bc:	3301      	adds	r3, #1
  4205be:	8822      	ldrh	r2, [r4, #0]
  4205c0:	1a9b      	subs	r3, r3, r2
  4205c2:	b21b      	sxth	r3, r3
  4205c4:	4298      	cmp	r0, r3
  4205c6:	d053      	beq.n	420670 <lv_msgbox_signal+0x1f4>
            mbox_realign(mbox);
  4205c8:	4628      	mov	r0, r5
  4205ca:	4b40      	ldr	r3, [pc, #256]	; (4206cc <lv_msgbox_signal+0x250>)
  4205cc:	4798      	blx	r3
    return res;
  4205ce:	2001      	movs	r0, #1
  4205d0:	e76b      	b.n	4204aa <lv_msgbox_signal+0x2e>
        mbox_realign(mbox);
  4205d2:	4628      	mov	r0, r5
  4205d4:	4b3d      	ldr	r3, [pc, #244]	; (4206cc <lv_msgbox_signal+0x250>)
  4205d6:	4798      	blx	r3
    return res;
  4205d8:	2001      	movs	r0, #1
  4205da:	e766      	b.n	4204aa <lv_msgbox_signal+0x2e>
        sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS) {
  4205dc:	f1a6 0816 	sub.w	r8, r6, #22
  4205e0:	fa5f f888 	uxtb.w	r8, r8
  4205e4:	f1b8 0f03 	cmp.w	r8, #3
  4205e8:	d846      	bhi.n	420678 <lv_msgbox_signal+0x1fc>
        if(ext->btnm) {
  4205ea:	6880      	ldr	r0, [r0, #8]
  4205ec:	2800      	cmp	r0, #0
  4205ee:	d050      	beq.n	420692 <lv_msgbox_signal+0x216>
            ext->btnm->signal_cb(ext->btnm, sign, param);
  4205f0:	69c3      	ldr	r3, [r0, #28]
  4205f2:	4622      	mov	r2, r4
  4205f4:	4631      	mov	r1, r6
  4205f6:	4798      	blx	r3
        if(sign == LV_SIGNAL_FOCUS) {
  4205f8:	2e16      	cmp	r6, #22
  4205fa:	d007      	beq.n	42060c <lv_msgbox_signal+0x190>
        if(ext->btnm && (sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS)) {
  4205fc:	68bb      	ldr	r3, [r7, #8]
  4205fe:	2b00      	cmp	r3, #0
  420600:	d03c      	beq.n	42067c <lv_msgbox_signal+0x200>
  420602:	f1b8 0f01 	cmp.w	r8, #1
  420606:	d918      	bls.n	42063a <lv_msgbox_signal+0x1be>
    return res;
  420608:	2001      	movs	r0, #1
  42060a:	e74e      	b.n	4204aa <lv_msgbox_signal+0x2e>
            lv_indev_t * indev         = lv_indev_get_act();
  42060c:	4b30      	ldr	r3, [pc, #192]	; (4206d0 <lv_msgbox_signal+0x254>)
  42060e:	4798      	blx	r3
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
  420610:	4b30      	ldr	r3, [pc, #192]	; (4206d4 <lv_msgbox_signal+0x258>)
  420612:	4798      	blx	r3
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
  420614:	2804      	cmp	r0, #4
  420616:	d1f1      	bne.n	4205fc <lv_msgbox_signal+0x180>
                if(lv_group_get_editing(lv_obj_get_group(mbox))) lv_btnmatrix_set_focused_btn(ext->btnm, 0);
  420618:	4628      	mov	r0, r5
  42061a:	4b2f      	ldr	r3, [pc, #188]	; (4206d8 <lv_msgbox_signal+0x25c>)
  42061c:	4798      	blx	r3
  42061e:	4b2f      	ldr	r3, [pc, #188]	; (4206dc <lv_msgbox_signal+0x260>)
  420620:	4798      	blx	r3
  420622:	b120      	cbz	r0, 42062e <lv_msgbox_signal+0x1b2>
  420624:	2100      	movs	r1, #0
  420626:	68b8      	ldr	r0, [r7, #8]
  420628:	4b2d      	ldr	r3, [pc, #180]	; (4206e0 <lv_msgbox_signal+0x264>)
  42062a:	4798      	blx	r3
  42062c:	e7e6      	b.n	4205fc <lv_msgbox_signal+0x180>
                else lv_btnmatrix_set_focused_btn(ext->btnm, LV_BTNMATRIX_BTN_NONE);
  42062e:	f64f 71ff 	movw	r1, #65535	; 0xffff
  420632:	68b8      	ldr	r0, [r7, #8]
  420634:	4b2a      	ldr	r3, [pc, #168]	; (4206e0 <lv_msgbox_signal+0x264>)
  420636:	4798      	blx	r3
  420638:	e7e0      	b.n	4205fc <lv_msgbox_signal+0x180>
            lv_state_t state = lv_obj_get_state(mbox, LV_MSGBOX_PART_BG);
  42063a:	2100      	movs	r1, #0
  42063c:	4628      	mov	r0, r5
  42063e:	4b1f      	ldr	r3, [pc, #124]	; (4206bc <lv_msgbox_signal+0x240>)
  420640:	4798      	blx	r3
  420642:	4604      	mov	r4, r0
            if(state & LV_STATE_FOCUSED) {
  420644:	f010 0f02 	tst.w	r0, #2
                lv_obj_set_state(ext->btnm, LV_STATE_FOCUSED);
  420648:	f04f 0102 	mov.w	r1, #2
  42064c:	68b8      	ldr	r0, [r7, #8]
  42064e:	bf14      	ite	ne
  420650:	4b24      	ldrne	r3, [pc, #144]	; (4206e4 <lv_msgbox_signal+0x268>)
                lv_obj_clear_state(ext->btnm, LV_STATE_FOCUSED);
  420652:	4b25      	ldreq	r3, [pc, #148]	; (4206e8 <lv_msgbox_signal+0x26c>)
  420654:	4798      	blx	r3
            if(state & LV_STATE_EDITED) {
  420656:	f014 0f04 	tst.w	r4, #4
                lv_obj_set_state(ext->btnm, LV_STATE_EDITED);
  42065a:	f04f 0104 	mov.w	r1, #4
  42065e:	68b8      	ldr	r0, [r7, #8]
  420660:	bf14      	ite	ne
  420662:	4b20      	ldrne	r3, [pc, #128]	; (4206e4 <lv_msgbox_signal+0x268>)
                lv_obj_clear_state(ext->btnm, LV_STATE_EDITED);
  420664:	4b20      	ldreq	r3, [pc, #128]	; (4206e8 <lv_msgbox_signal+0x26c>)
  420666:	4798      	blx	r3
    return res;
  420668:	2001      	movs	r0, #1
  42066a:	e71e      	b.n	4204aa <lv_msgbox_signal+0x2e>
        return LV_RES_OK;
  42066c:	2001      	movs	r0, #1
  42066e:	e71c      	b.n	4204aa <lv_msgbox_signal+0x2e>
    return res;
  420670:	2001      	movs	r0, #1
  420672:	e71a      	b.n	4204aa <lv_msgbox_signal+0x2e>
  420674:	2001      	movs	r0, #1
  420676:	e718      	b.n	4204aa <lv_msgbox_signal+0x2e>
  420678:	2001      	movs	r0, #1
  42067a:	e716      	b.n	4204aa <lv_msgbox_signal+0x2e>
  42067c:	2001      	movs	r0, #1
  42067e:	e714      	b.n	4204aa <lv_msgbox_signal+0x2e>
        info->result = lv_msgbox_get_style(mbox, info->part);
  420680:	2300      	movs	r3, #0
  420682:	6063      	str	r3, [r4, #4]
        else return ancestor_signal(mbox, sign, param);
  420684:	4b05      	ldr	r3, [pc, #20]	; (42069c <lv_msgbox_signal+0x220>)
  420686:	681b      	ldr	r3, [r3, #0]
  420688:	4622      	mov	r2, r4
  42068a:	2108      	movs	r1, #8
  42068c:	4628      	mov	r0, r5
  42068e:	4798      	blx	r3
  420690:	e70b      	b.n	4204aa <lv_msgbox_signal+0x2e>
        if(sign == LV_SIGNAL_FOCUS) {
  420692:	2e16      	cmp	r6, #22
  420694:	d0ba      	beq.n	42060c <lv_msgbox_signal+0x190>
    return res;
  420696:	2001      	movs	r0, #1
  420698:	e707      	b.n	4204aa <lv_msgbox_signal+0x2e>
  42069a:	bf00      	nop
  42069c:	204147a4 	.word	0x204147a4
  4206a0:	00407281 	.word	0x00407281
  4206a4:	0041d675 	.word	0x0041d675
  4206a8:	00404e95 	.word	0x00404e95
  4206ac:	004150ef 	.word	0x004150ef
  4206b0:	00425a74 	.word	0x00425a74
  4206b4:	004150f9 	.word	0x004150f9
  4206b8:	00405219 	.word	0x00405219
  4206bc:	00406379 	.word	0x00406379
  4206c0:	00430730 	.word	0x00430730
  4206c4:	0040751d 	.word	0x0040751d
  4206c8:	0040518d 	.word	0x0040518d
  4206cc:	004203a9 	.word	0x004203a9
  4206d0:	004036dd 	.word	0x004036dd
  4206d4:	004036e9 	.word	0x004036e9
  4206d8:	004072a9 	.word	0x004072a9
  4206dc:	004032a9 	.word	0x004032a9
  4206e0:	0041d49d 	.word	0x0041d49d
  4206e4:	00407f99 	.word	0x00407f99
  4206e8:	00408675 	.word	0x00408675

004206ec <lv_msgbox_create>:
{
  4206ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4206ee:	b083      	sub	sp, #12
  4206f0:	4607      	mov	r7, r0
  4206f2:	460e      	mov	r6, r1
    lv_obj_t * mbox = lv_cont_create(par, copy);
  4206f4:	4b60      	ldr	r3, [pc, #384]	; (420878 <lv_msgbox_create+0x18c>)
  4206f6:	4798      	blx	r3
  4206f8:	4604      	mov	r4, r0
    LV_ASSERT_MEM(mbox);
  4206fa:	4b60      	ldr	r3, [pc, #384]	; (42087c <lv_msgbox_create+0x190>)
  4206fc:	4798      	blx	r3
  4206fe:	b190      	cbz	r0, 420726 <lv_msgbox_create+0x3a>
    if(mbox == NULL) return NULL;
  420700:	2c00      	cmp	r4, #0
  420702:	d03b      	beq.n	42077c <lv_msgbox_create+0x90>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(mbox);
  420704:	4b5e      	ldr	r3, [pc, #376]	; (420880 <lv_msgbox_create+0x194>)
  420706:	681b      	ldr	r3, [r3, #0]
  420708:	b19b      	cbz	r3, 420732 <lv_msgbox_create+0x46>
    lv_msgbox_ext_t * ext = lv_obj_allocate_ext_attr(mbox, sizeof(lv_msgbox_ext_t));
  42070a:	2110      	movs	r1, #16
  42070c:	4620      	mov	r0, r4
  42070e:	4b5d      	ldr	r3, [pc, #372]	; (420884 <lv_msgbox_create+0x198>)
  420710:	4798      	blx	r3
  420712:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  420714:	4b59      	ldr	r3, [pc, #356]	; (42087c <lv_msgbox_create+0x190>)
  420716:	4798      	blx	r3
  420718:	b988      	cbnz	r0, 42073e <lv_msgbox_create+0x52>
  42071a:	462a      	mov	r2, r5
  42071c:	2300      	movs	r3, #0
  42071e:	485a      	ldr	r0, [pc, #360]	; (420888 <lv_msgbox_create+0x19c>)
  420720:	495a      	ldr	r1, [pc, #360]	; (42088c <lv_msgbox_create+0x1a0>)
  420722:	4788      	blx	r1
  420724:	e7fe      	b.n	420724 <lv_msgbox_create+0x38>
    LV_ASSERT_MEM(mbox);
  420726:	4622      	mov	r2, r4
  420728:	2300      	movs	r3, #0
  42072a:	4857      	ldr	r0, [pc, #348]	; (420888 <lv_msgbox_create+0x19c>)
  42072c:	4957      	ldr	r1, [pc, #348]	; (42088c <lv_msgbox_create+0x1a0>)
  42072e:	4788      	blx	r1
  420730:	e7fe      	b.n	420730 <lv_msgbox_create+0x44>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(mbox);
  420732:	4620      	mov	r0, r4
  420734:	4b56      	ldr	r3, [pc, #344]	; (420890 <lv_msgbox_create+0x1a4>)
  420736:	4798      	blx	r3
  420738:	4b51      	ldr	r3, [pc, #324]	; (420880 <lv_msgbox_create+0x194>)
  42073a:	6018      	str	r0, [r3, #0]
  42073c:	e7e5      	b.n	42070a <lv_msgbox_create+0x1e>
    if(ext == NULL) {
  42073e:	b305      	cbz	r5, 420782 <lv_msgbox_create+0x96>
    ext->text = NULL;
  420740:	2300      	movs	r3, #0
  420742:	606b      	str	r3, [r5, #4]
    ext->btnm = NULL;
  420744:	60ab      	str	r3, [r5, #8]
    ext->anim_time = LV_MSGBOX_CLOSE_ANIM_TIME;
  420746:	23c8      	movs	r3, #200	; 0xc8
  420748:	81ab      	strh	r3, [r5, #12]
    lv_obj_set_signal_cb(mbox, lv_msgbox_signal);
  42074a:	4952      	ldr	r1, [pc, #328]	; (420894 <lv_msgbox_create+0x1a8>)
  42074c:	4620      	mov	r0, r4
  42074e:	4b52      	ldr	r3, [pc, #328]	; (420898 <lv_msgbox_create+0x1ac>)
  420750:	4798      	blx	r3
    if(copy == NULL) {
  420752:	b1de      	cbz	r6, 42078c <lv_msgbox_create+0xa0>
        lv_msgbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  420754:	4630      	mov	r0, r6
  420756:	4b51      	ldr	r3, [pc, #324]	; (42089c <lv_msgbox_create+0x1b0>)
  420758:	4798      	blx	r3
  42075a:	4606      	mov	r6, r0
        ext->text = lv_label_create(mbox, copy_ext->text);
  42075c:	6841      	ldr	r1, [r0, #4]
  42075e:	4620      	mov	r0, r4
  420760:	4b4f      	ldr	r3, [pc, #316]	; (4208a0 <lv_msgbox_create+0x1b4>)
  420762:	4798      	blx	r3
  420764:	6068      	str	r0, [r5, #4]
        if(copy_ext->btnm) ext->btnm = lv_btnmatrix_create(mbox, copy_ext->btnm);
  420766:	68b1      	ldr	r1, [r6, #8]
  420768:	b119      	cbz	r1, 420772 <lv_msgbox_create+0x86>
  42076a:	4620      	mov	r0, r4
  42076c:	4b4d      	ldr	r3, [pc, #308]	; (4208a4 <lv_msgbox_create+0x1b8>)
  42076e:	4798      	blx	r3
  420770:	60a8      	str	r0, [r5, #8]
        lv_obj_refresh_style(mbox, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  420772:	22ff      	movs	r2, #255	; 0xff
  420774:	4611      	mov	r1, r2
  420776:	4620      	mov	r0, r4
  420778:	4b4b      	ldr	r3, [pc, #300]	; (4208a8 <lv_msgbox_create+0x1bc>)
  42077a:	4798      	blx	r3
}
  42077c:	4620      	mov	r0, r4
  42077e:	b003      	add	sp, #12
  420780:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_del(mbox);
  420782:	4620      	mov	r0, r4
  420784:	4b49      	ldr	r3, [pc, #292]	; (4208ac <lv_msgbox_create+0x1c0>)
  420786:	4798      	blx	r3
        return NULL;
  420788:	2400      	movs	r4, #0
  42078a:	e7f7      	b.n	42077c <lv_msgbox_create+0x90>
        ext->text = lv_label_create(mbox, NULL);
  42078c:	2100      	movs	r1, #0
  42078e:	4620      	mov	r0, r4
  420790:	4b43      	ldr	r3, [pc, #268]	; (4208a0 <lv_msgbox_create+0x1b4>)
  420792:	4798      	blx	r3
  420794:	6068      	str	r0, [r5, #4]
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
  420796:	2101      	movs	r1, #1
  420798:	4b45      	ldr	r3, [pc, #276]	; (4208b0 <lv_msgbox_create+0x1c4>)
  42079a:	4798      	blx	r3
        lv_label_set_long_mode(ext->text, LV_LABEL_LONG_BREAK);
  42079c:	2101      	movs	r1, #1
  42079e:	6868      	ldr	r0, [r5, #4]
  4207a0:	4b44      	ldr	r3, [pc, #272]	; (4208b4 <lv_msgbox_create+0x1c8>)
  4207a2:	4798      	blx	r3
        lv_label_set_text(ext->text, "Message");
  4207a4:	4944      	ldr	r1, [pc, #272]	; (4208b8 <lv_msgbox_create+0x1cc>)
  4207a6:	6868      	ldr	r0, [r5, #4]
  4207a8:	4b44      	ldr	r3, [pc, #272]	; (4208bc <lv_msgbox_create+0x1d0>)
  4207aa:	4798      	blx	r3
        lv_cont_set_layout(mbox, LV_LAYOUT_COLUMN_MID);
  4207ac:	2103      	movs	r1, #3
  4207ae:	4620      	mov	r0, r4
  4207b0:	4b43      	ldr	r3, [pc, #268]	; (4208c0 <lv_msgbox_create+0x1d4>)
  4207b2:	4798      	blx	r3
 * @param hor horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
  4207b4:	2301      	movs	r3, #1
  4207b6:	9300      	str	r3, [sp, #0]
  4207b8:	2200      	movs	r2, #0
  4207ba:	4611      	mov	r1, r2
  4207bc:	4620      	mov	r0, r4
  4207be:	4d41      	ldr	r5, [pc, #260]	; (4208c4 <lv_msgbox_create+0x1d8>)
  4207c0:	47a8      	blx	r5
        lv_coord_t fit_w = lv_obj_get_width_fit(par);
  4207c2:	4638      	mov	r0, r7
  4207c4:	4b40      	ldr	r3, [pc, #256]	; (4208c8 <lv_msgbox_create+0x1dc>)
  4207c6:	4798      	blx	r3
  4207c8:	4605      	mov	r5, r0
        if(lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_SMALL) {
  4207ca:	2000      	movs	r0, #0
  4207cc:	4b3f      	ldr	r3, [pc, #252]	; (4208cc <lv_msgbox_create+0x1e0>)
  4207ce:	4798      	blx	r3
  4207d0:	b998      	cbnz	r0, 4207fa <lv_msgbox_create+0x10e>
            lv_obj_set_width(mbox, fit_w);
  4207d2:	4629      	mov	r1, r5
  4207d4:	4620      	mov	r0, r4
  4207d6:	4b3e      	ldr	r3, [pc, #248]	; (4208d0 <lv_msgbox_create+0x1e4>)
  4207d8:	4798      	blx	r3
        lv_obj_align(mbox, NULL, LV_ALIGN_CENTER, 0, 0);
  4207da:	2100      	movs	r1, #0
  4207dc:	9100      	str	r1, [sp, #0]
  4207de:	460b      	mov	r3, r1
  4207e0:	460a      	mov	r2, r1
  4207e2:	4620      	mov	r0, r4
  4207e4:	4d3b      	ldr	r5, [pc, #236]	; (4208d4 <lv_msgbox_create+0x1e8>)
  4207e6:	47a8      	blx	r5
        lv_obj_set_event_cb(mbox, lv_msgbox_default_event_cb);
  4207e8:	493b      	ldr	r1, [pc, #236]	; (4208d8 <lv_msgbox_create+0x1ec>)
  4207ea:	4620      	mov	r0, r4
  4207ec:	4b3b      	ldr	r3, [pc, #236]	; (4208dc <lv_msgbox_create+0x1f0>)
  4207ee:	4798      	blx	r3
        lv_theme_apply(mbox, LV_THEME_MSGBOX);
  4207f0:	2118      	movs	r1, #24
  4207f2:	4620      	mov	r0, r4
  4207f4:	4b3a      	ldr	r3, [pc, #232]	; (4208e0 <lv_msgbox_create+0x1f4>)
  4207f6:	4798      	blx	r3
  4207f8:	e7c0      	b.n	42077c <lv_msgbox_create+0x90>
            lv_obj_set_width(mbox, LV_MATH_MIN(fit_w, LV_DPX(400)));
  4207fa:	462e      	mov	r6, r5
  4207fc:	2000      	movs	r0, #0
  4207fe:	4b39      	ldr	r3, [pc, #228]	; (4208e4 <lv_msgbox_create+0x1f8>)
  420800:	4798      	blx	r3
  420802:	f44f 73c8 	mov.w	r3, #400	; 0x190
  420806:	fb03 f300 	mul.w	r3, r3, r0
  42080a:	3350      	adds	r3, #80	; 0x50
  42080c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  420810:	db2e      	blt.n	420870 <lv_msgbox_create+0x184>
  420812:	2000      	movs	r0, #0
  420814:	4b33      	ldr	r3, [pc, #204]	; (4208e4 <lv_msgbox_create+0x1f8>)
  420816:	4798      	blx	r3
  420818:	f44f 73c8 	mov.w	r3, #400	; 0x190
  42081c:	fb03 f300 	mul.w	r3, r3, r0
  420820:	3350      	adds	r3, #80	; 0x50
  420822:	4a31      	ldr	r2, [pc, #196]	; (4208e8 <lv_msgbox_create+0x1fc>)
  420824:	fb82 1203 	smull	r1, r2, r2, r3
  420828:	17db      	asrs	r3, r3, #31
  42082a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  42082e:	42b3      	cmp	r3, r6
  420830:	dc19      	bgt.n	420866 <lv_msgbox_create+0x17a>
  420832:	2000      	movs	r0, #0
  420834:	4b2b      	ldr	r3, [pc, #172]	; (4208e4 <lv_msgbox_create+0x1f8>)
  420836:	4798      	blx	r3
  420838:	f44f 73c8 	mov.w	r3, #400	; 0x190
  42083c:	fb03 f300 	mul.w	r3, r3, r0
  420840:	3350      	adds	r3, #80	; 0x50
  420842:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  420846:	db15      	blt.n	420874 <lv_msgbox_create+0x188>
  420848:	2000      	movs	r0, #0
  42084a:	4b26      	ldr	r3, [pc, #152]	; (4208e4 <lv_msgbox_create+0x1f8>)
  42084c:	4798      	blx	r3
  42084e:	f44f 73c8 	mov.w	r3, #400	; 0x190
  420852:	fb03 f300 	mul.w	r3, r3, r0
  420856:	3350      	adds	r3, #80	; 0x50
  420858:	4a23      	ldr	r2, [pc, #140]	; (4208e8 <lv_msgbox_create+0x1fc>)
  42085a:	fb82 1203 	smull	r1, r2, r2, r3
  42085e:	17dd      	asrs	r5, r3, #31
  420860:	ebc5 15a2 	rsb	r5, r5, r2, asr #6
  420864:	b22d      	sxth	r5, r5
  420866:	4629      	mov	r1, r5
  420868:	4620      	mov	r0, r4
  42086a:	4b19      	ldr	r3, [pc, #100]	; (4208d0 <lv_msgbox_create+0x1e4>)
  42086c:	4798      	blx	r3
  42086e:	e7b4      	b.n	4207da <lv_msgbox_create+0xee>
  420870:	2301      	movs	r3, #1
  420872:	e7dc      	b.n	42082e <lv_msgbox_create+0x142>
  420874:	2501      	movs	r5, #1
  420876:	e7f6      	b.n	420866 <lv_msgbox_create+0x17a>
  420878:	0041e515 	.word	0x0041e515
  42087c:	004150ef 	.word	0x004150ef
  420880:	204147a4 	.word	0x204147a4
  420884:	00404f39 	.word	0x00404f39
  420888:	00425a60 	.word	0x00425a60
  42088c:	004150f9 	.word	0x004150f9
  420890:	00407231 	.word	0x00407231
  420894:	0042047d 	.word	0x0042047d
  420898:	00404ed5 	.word	0x00404ed5
  42089c:	00407281 	.word	0x00407281
  4208a0:	00420169 	.word	0x00420169
  4208a4:	0041d34d 	.word	0x0041d34d
  4208a8:	00406d55 	.word	0x00406d55
  4208ac:	004073fd 	.word	0x004073fd
  4208b0:	0041f1c1 	.word	0x0041f1c1
  4208b4:	00420071 	.word	0x00420071
  4208b8:	00430728 	.word	0x00430728
  4208bc:	0041fe75 	.word	0x0041fe75
  4208c0:	0041e645 	.word	0x0041e645
  4208c4:	0041e691 	.word	0x0041e691
  4208c8:	00406b7d 	.word	0x00406b7d
  4208cc:	00414119 	.word	0x00414119
  4208d0:	004062c5 	.word	0x004062c5
  4208d4:	00405801 	.word	0x00405801
  4208d8:	00420aa5 	.word	0x00420aa5
  4208dc:	00404da9 	.word	0x00404da9
  4208e0:	00417431 	.word	0x00417431
  4208e4:	004140fd 	.word	0x004140fd
  4208e8:	66666667 	.word	0x66666667

004208ec <lv_msgbox_set_text>:
{
  4208ec:	b538      	push	{r3, r4, r5, lr}
  4208ee:	4604      	mov	r4, r0
  4208f0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  4208f2:	4b0f      	ldr	r3, [pc, #60]	; (420930 <lv_msgbox_set_text+0x44>)
  4208f4:	4798      	blx	r3
  4208f6:	b928      	cbnz	r0, 420904 <lv_msgbox_set_text+0x18>
  4208f8:	4622      	mov	r2, r4
  4208fa:	2300      	movs	r3, #0
  4208fc:	480d      	ldr	r0, [pc, #52]	; (420934 <lv_msgbox_set_text+0x48>)
  4208fe:	490e      	ldr	r1, [pc, #56]	; (420938 <lv_msgbox_set_text+0x4c>)
  420900:	4788      	blx	r1
  420902:	e7fe      	b.n	420902 <lv_msgbox_set_text+0x16>
    LV_ASSERT_STR(txt);
  420904:	4628      	mov	r0, r5
  420906:	4b0a      	ldr	r3, [pc, #40]	; (420930 <lv_msgbox_set_text+0x44>)
  420908:	4798      	blx	r3
  42090a:	b928      	cbnz	r0, 420918 <lv_msgbox_set_text+0x2c>
  42090c:	462a      	mov	r2, r5
  42090e:	2300      	movs	r3, #0
  420910:	4808      	ldr	r0, [pc, #32]	; (420934 <lv_msgbox_set_text+0x48>)
  420912:	4909      	ldr	r1, [pc, #36]	; (420938 <lv_msgbox_set_text+0x4c>)
  420914:	4788      	blx	r1
  420916:	e7fe      	b.n	420916 <lv_msgbox_set_text+0x2a>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  420918:	4620      	mov	r0, r4
  42091a:	4b08      	ldr	r3, [pc, #32]	; (42093c <lv_msgbox_set_text+0x50>)
  42091c:	4798      	blx	r3
    lv_label_set_text(ext->text, txt);
  42091e:	4629      	mov	r1, r5
  420920:	6840      	ldr	r0, [r0, #4]
  420922:	4b07      	ldr	r3, [pc, #28]	; (420940 <lv_msgbox_set_text+0x54>)
  420924:	4798      	blx	r3
    mbox_realign(mbox);
  420926:	4620      	mov	r0, r4
  420928:	4b06      	ldr	r3, [pc, #24]	; (420944 <lv_msgbox_set_text+0x58>)
  42092a:	4798      	blx	r3
  42092c:	bd38      	pop	{r3, r4, r5, pc}
  42092e:	bf00      	nop
  420930:	004150ef 	.word	0x004150ef
  420934:	00425a74 	.word	0x00425a74
  420938:	004150f9 	.word	0x004150f9
  42093c:	00407281 	.word	0x00407281
  420940:	0041fe75 	.word	0x0041fe75
  420944:	004203a9 	.word	0x004203a9

00420948 <lv_msgbox_get_active_btn>:
{
  420948:	b510      	push	{r4, lr}
  42094a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  42094c:	4b0e      	ldr	r3, [pc, #56]	; (420988 <lv_msgbox_get_active_btn+0x40>)
  42094e:	4798      	blx	r3
  420950:	b928      	cbnz	r0, 42095e <lv_msgbox_get_active_btn+0x16>
  420952:	4622      	mov	r2, r4
  420954:	2300      	movs	r3, #0
  420956:	480d      	ldr	r0, [pc, #52]	; (42098c <lv_msgbox_get_active_btn+0x44>)
  420958:	490d      	ldr	r1, [pc, #52]	; (420990 <lv_msgbox_get_active_btn+0x48>)
  42095a:	4788      	blx	r1
  42095c:	e7fe      	b.n	42095c <lv_msgbox_get_active_btn+0x14>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  42095e:	4620      	mov	r0, r4
  420960:	4b0c      	ldr	r3, [pc, #48]	; (420994 <lv_msgbox_get_active_btn+0x4c>)
  420962:	4798      	blx	r3
  420964:	4604      	mov	r4, r0
    if(ext->btnm == NULL) return LV_BTNMATRIX_BTN_NONE;
  420966:	6880      	ldr	r0, [r0, #8]
  420968:	b150      	cbz	r0, 420980 <lv_msgbox_get_active_btn+0x38>
    uint16_t id = lv_btnmatrix_get_active_btn(ext->btnm);
  42096a:	4b0b      	ldr	r3, [pc, #44]	; (420998 <lv_msgbox_get_active_btn+0x50>)
  42096c:	4798      	blx	r3
    if(id == LV_BTNMATRIX_BTN_NONE) {
  42096e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  420972:	4298      	cmp	r0, r3
  420974:	d000      	beq.n	420978 <lv_msgbox_get_active_btn+0x30>
}
  420976:	bd10      	pop	{r4, pc}
        id = lv_btnmatrix_get_focused_btn(ext->btnm);
  420978:	68a0      	ldr	r0, [r4, #8]
  42097a:	4b08      	ldr	r3, [pc, #32]	; (42099c <lv_msgbox_get_active_btn+0x54>)
  42097c:	4798      	blx	r3
  42097e:	bd10      	pop	{r4, pc}
    if(ext->btnm == NULL) return LV_BTNMATRIX_BTN_NONE;
  420980:	f64f 70ff 	movw	r0, #65535	; 0xffff
  420984:	e7f7      	b.n	420976 <lv_msgbox_get_active_btn+0x2e>
  420986:	bf00      	nop
  420988:	004150ef 	.word	0x004150ef
  42098c:	00425a74 	.word	0x00425a74
  420990:	004150f9 	.word	0x004150f9
  420994:	00407281 	.word	0x00407281
  420998:	0041d645 	.word	0x0041d645
  42099c:	0041d675 	.word	0x0041d675

004209a0 <lv_msgbox_get_anim_time>:
{
  4209a0:	b510      	push	{r4, lr}
  4209a2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  4209a4:	4b06      	ldr	r3, [pc, #24]	; (4209c0 <lv_msgbox_get_anim_time+0x20>)
  4209a6:	4798      	blx	r3
  4209a8:	b928      	cbnz	r0, 4209b6 <lv_msgbox_get_anim_time+0x16>
  4209aa:	4622      	mov	r2, r4
  4209ac:	2300      	movs	r3, #0
  4209ae:	4805      	ldr	r0, [pc, #20]	; (4209c4 <lv_msgbox_get_anim_time+0x24>)
  4209b0:	4905      	ldr	r1, [pc, #20]	; (4209c8 <lv_msgbox_get_anim_time+0x28>)
  4209b2:	4788      	blx	r1
  4209b4:	e7fe      	b.n	4209b4 <lv_msgbox_get_anim_time+0x14>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  4209b6:	4620      	mov	r0, r4
  4209b8:	4b04      	ldr	r3, [pc, #16]	; (4209cc <lv_msgbox_get_anim_time+0x2c>)
  4209ba:	4798      	blx	r3
}
  4209bc:	8980      	ldrh	r0, [r0, #12]
  4209be:	bd10      	pop	{r4, pc}
  4209c0:	004150ef 	.word	0x004150ef
  4209c4:	00425a74 	.word	0x00425a74
  4209c8:	004150f9 	.word	0x004150f9
  4209cc:	00407281 	.word	0x00407281

004209d0 <lv_msgbox_start_auto_close>:
{
  4209d0:	b570      	push	{r4, r5, r6, lr}
  4209d2:	b094      	sub	sp, #80	; 0x50
  4209d4:	4604      	mov	r4, r0
  4209d6:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  4209d8:	4b26      	ldr	r3, [pc, #152]	; (420a74 <lv_msgbox_start_auto_close+0xa4>)
  4209da:	4798      	blx	r3
  4209dc:	b928      	cbnz	r0, 4209ea <lv_msgbox_start_auto_close+0x1a>
  4209de:	4622      	mov	r2, r4
  4209e0:	2300      	movs	r3, #0
  4209e2:	4825      	ldr	r0, [pc, #148]	; (420a78 <lv_msgbox_start_auto_close+0xa8>)
  4209e4:	4925      	ldr	r1, [pc, #148]	; (420a7c <lv_msgbox_start_auto_close+0xac>)
  4209e6:	4788      	blx	r1
  4209e8:	e7fe      	b.n	4209e8 <lv_msgbox_start_auto_close+0x18>
    if(lv_msgbox_get_anim_time(mbox) != 0) {
  4209ea:	4620      	mov	r0, r4
  4209ec:	4b24      	ldr	r3, [pc, #144]	; (420a80 <lv_msgbox_start_auto_close+0xb0>)
  4209ee:	4798      	blx	r3
  4209f0:	b9b0      	cbnz	r0, 420a20 <lv_msgbox_start_auto_close+0x50>
        lv_anim_init(&a);
  4209f2:	a803      	add	r0, sp, #12
  4209f4:	4b23      	ldr	r3, [pc, #140]	; (420a84 <lv_msgbox_start_auto_close+0xb4>)
  4209f6:	4798      	blx	r3
    a->var     = var;
  4209f8:	9403      	str	r4, [sp, #12]
    a->exec_cb = exec_cb;
  4209fa:	2300      	movs	r3, #0
  4209fc:	9304      	str	r3, [sp, #16]
    a->start = start;
  4209fe:	9309      	str	r3, [sp, #36]	; 0x24
    a->current = start;
  420a00:	930a      	str	r3, [sp, #40]	; 0x28
    a->end   = end;
  420a02:	2301      	movs	r3, #1
  420a04:	930b      	str	r3, [sp, #44]	; 0x2c
    a->ready_cb = ready_cb;
  420a06:	4b20      	ldr	r3, [pc, #128]	; (420a88 <lv_msgbox_start_auto_close+0xb8>)
  420a08:	9306      	str	r3, [sp, #24]
        lv_anim_set_time(&a, lv_msgbox_get_anim_time(mbox));
  420a0a:	4620      	mov	r0, r4
  420a0c:	4b1c      	ldr	r3, [pc, #112]	; (420a80 <lv_msgbox_start_auto_close+0xb0>)
  420a0e:	4798      	blx	r3
    a->time     = duration;
  420a10:	900c      	str	r0, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
  420a12:	426d      	negs	r5, r5
  420a14:	950d      	str	r5, [sp, #52]	; 0x34
        lv_anim_start(&a);
  420a16:	a803      	add	r0, sp, #12
  420a18:	4b1c      	ldr	r3, [pc, #112]	; (420a8c <lv_msgbox_start_auto_close+0xbc>)
  420a1a:	4798      	blx	r3
}
  420a1c:	b014      	add	sp, #80	; 0x50
  420a1e:	bd70      	pop	{r4, r5, r6, pc}
        lv_anim_init(&a);
  420a20:	a803      	add	r0, sp, #12
  420a22:	4b18      	ldr	r3, [pc, #96]	; (420a84 <lv_msgbox_start_auto_close+0xb4>)
  420a24:	4798      	blx	r3
    a->var     = var;
  420a26:	9403      	str	r4, [sp, #12]
    a->exec_cb = exec_cb;
  420a28:	4b19      	ldr	r3, [pc, #100]	; (420a90 <lv_msgbox_start_auto_close+0xc0>)
  420a2a:	9304      	str	r3, [sp, #16]
        lv_anim_set_values(&a, lv_obj_get_height(mbox), 0);
  420a2c:	4620      	mov	r0, r4
  420a2e:	4b19      	ldr	r3, [pc, #100]	; (420a94 <lv_msgbox_start_auto_close+0xc4>)
  420a30:	4798      	blx	r3
    a->start = start;
  420a32:	9009      	str	r0, [sp, #36]	; 0x24
    a->current = start;
  420a34:	900a      	str	r0, [sp, #40]	; 0x28
    a->end   = end;
  420a36:	2600      	movs	r6, #0
  420a38:	960b      	str	r6, [sp, #44]	; 0x2c
        lv_anim_set_time(&a, lv_msgbox_get_anim_time(mbox));
  420a3a:	4620      	mov	r0, r4
  420a3c:	4b10      	ldr	r3, [pc, #64]	; (420a80 <lv_msgbox_start_auto_close+0xb0>)
  420a3e:	4798      	blx	r3
    a->time     = duration;
  420a40:	900c      	str	r0, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
  420a42:	426d      	negs	r5, r5
  420a44:	950d      	str	r5, [sp, #52]	; 0x34
        lv_anim_start(&a);
  420a46:	a803      	add	r0, sp, #12
  420a48:	4d10      	ldr	r5, [pc, #64]	; (420a8c <lv_msgbox_start_auto_close+0xbc>)
  420a4a:	47a8      	blx	r5
    a->exec_cb = exec_cb;
  420a4c:	4b12      	ldr	r3, [pc, #72]	; (420a98 <lv_msgbox_start_auto_close+0xc8>)
  420a4e:	9304      	str	r3, [sp, #16]
        lv_anim_set_values(&a, lv_obj_get_width(mbox), 0);
  420a50:	4620      	mov	r0, r4
  420a52:	4b12      	ldr	r3, [pc, #72]	; (420a9c <lv_msgbox_start_auto_close+0xcc>)
  420a54:	4798      	blx	r3
    a->start = start;
  420a56:	9009      	str	r0, [sp, #36]	; 0x24
    a->current = start;
  420a58:	900a      	str	r0, [sp, #40]	; 0x28
    a->end   = end;
  420a5a:	960b      	str	r6, [sp, #44]	; 0x2c
    a->ready_cb = ready_cb;
  420a5c:	4b0a      	ldr	r3, [pc, #40]	; (420a88 <lv_msgbox_start_auto_close+0xb8>)
  420a5e:	9306      	str	r3, [sp, #24]
        lv_anim_start(&a);
  420a60:	a803      	add	r0, sp, #12
  420a62:	47a8      	blx	r5
 * @param cont pointer to a container object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
  420a64:	9600      	str	r6, [sp, #0]
  420a66:	4633      	mov	r3, r6
  420a68:	4632      	mov	r2, r6
  420a6a:	4631      	mov	r1, r6
  420a6c:	4620      	mov	r0, r4
  420a6e:	4c0c      	ldr	r4, [pc, #48]	; (420aa0 <lv_msgbox_start_auto_close+0xd0>)
  420a70:	47a0      	blx	r4
  420a72:	e7d3      	b.n	420a1c <lv_msgbox_start_auto_close+0x4c>
  420a74:	004150ef 	.word	0x004150ef
  420a78:	00425a74 	.word	0x00425a74
  420a7c:	004150f9 	.word	0x004150f9
  420a80:	004209a1 	.word	0x004209a1
  420a84:	00414729 	.word	0x00414729
  420a88:	00420399 	.word	0x00420399
  420a8c:	004147ed 	.word	0x004147ed
  420a90:	00406305 	.word	0x00406305
  420a94:	004051bd 	.word	0x004051bd
  420a98:	004062c5 	.word	0x004062c5
  420a9c:	0040518d 	.word	0x0040518d
  420aa0:	0041e691 	.word	0x0041e691

00420aa4 <lv_msgbox_default_event_cb>:
}
#endif

static void lv_msgbox_default_event_cb(lv_obj_t * mbox, lv_event_t event)
{
    if(event != LV_EVENT_VALUE_CHANGED) return;
  420aa4:	2910      	cmp	r1, #16
  420aa6:	d000      	beq.n	420aaa <lv_msgbox_default_event_cb+0x6>
  420aa8:	4770      	bx	lr
{
  420aaa:	b510      	push	{r4, lr}
  420aac:	4604      	mov	r4, r0

    uint32_t btn_id = lv_msgbox_get_active_btn(mbox);
  420aae:	4b05      	ldr	r3, [pc, #20]	; (420ac4 <lv_msgbox_default_event_cb+0x20>)
  420ab0:	4798      	blx	r3
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
  420ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  420ab6:	4298      	cmp	r0, r3
  420ab8:	d003      	beq.n	420ac2 <lv_msgbox_default_event_cb+0x1e>

    lv_msgbox_start_auto_close(mbox, 0);
  420aba:	2100      	movs	r1, #0
  420abc:	4620      	mov	r0, r4
  420abe:	4b02      	ldr	r3, [pc, #8]	; (420ac8 <lv_msgbox_default_event_cb+0x24>)
  420ac0:	4798      	blx	r3
  420ac2:	bd10      	pop	{r4, pc}
  420ac4:	00420949 	.word	0x00420949
  420ac8:	004209d1 	.word	0x004209d1

00420acc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  420acc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  420ace:	4810      	ldr	r0, [pc, #64]	; (420b10 <sysclk_init+0x44>)
  420ad0:	4b10      	ldr	r3, [pc, #64]	; (420b14 <sysclk_init+0x48>)
  420ad2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  420ad4:	213e      	movs	r1, #62	; 0x3e
  420ad6:	2000      	movs	r0, #0
  420ad8:	4b0f      	ldr	r3, [pc, #60]	; (420b18 <sysclk_init+0x4c>)
  420ada:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  420adc:	4c0f      	ldr	r4, [pc, #60]	; (420b1c <sysclk_init+0x50>)
  420ade:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  420ae0:	2800      	cmp	r0, #0
  420ae2:	d0fc      	beq.n	420ade <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  420ae4:	4b0e      	ldr	r3, [pc, #56]	; (420b20 <sysclk_init+0x54>)
  420ae6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  420ae8:	4a0e      	ldr	r2, [pc, #56]	; (420b24 <sysclk_init+0x58>)
  420aea:	4b0f      	ldr	r3, [pc, #60]	; (420b28 <sysclk_init+0x5c>)
  420aec:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  420aee:	4c0f      	ldr	r4, [pc, #60]	; (420b2c <sysclk_init+0x60>)
  420af0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  420af2:	2800      	cmp	r0, #0
  420af4:	d0fc      	beq.n	420af0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  420af6:	2002      	movs	r0, #2
  420af8:	4b0d      	ldr	r3, [pc, #52]	; (420b30 <sysclk_init+0x64>)
  420afa:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  420afc:	2000      	movs	r0, #0
  420afe:	4b0d      	ldr	r3, [pc, #52]	; (420b34 <sysclk_init+0x68>)
  420b00:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  420b02:	4b0d      	ldr	r3, [pc, #52]	; (420b38 <sysclk_init+0x6c>)
  420b04:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  420b06:	480d      	ldr	r0, [pc, #52]	; (420b3c <sysclk_init+0x70>)
  420b08:	4b02      	ldr	r3, [pc, #8]	; (420b14 <sysclk_init+0x48>)
  420b0a:	4798      	blx	r3
  420b0c:	bd10      	pop	{r4, pc}
  420b0e:	bf00      	nop
  420b10:	07270e00 	.word	0x07270e00
  420b14:	004218b5 	.word	0x004218b5
  420b18:	004213b5 	.word	0x004213b5
  420b1c:	00421409 	.word	0x00421409
  420b20:	00421419 	.word	0x00421419
  420b24:	20183f01 	.word	0x20183f01
  420b28:	400e0600 	.word	0x400e0600
  420b2c:	00421429 	.word	0x00421429
  420b30:	00421319 	.word	0x00421319
  420b34:	00421351 	.word	0x00421351
  420b38:	004217a9 	.word	0x004217a9
  420b3c:	11e1a300 	.word	0x11e1a300

00420b40 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  420b40:	b510      	push	{r4, lr}
  420b42:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  420b44:	4b10      	ldr	r3, [pc, #64]	; (420b88 <spi_master_init+0x48>)
  420b46:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  420b48:	2380      	movs	r3, #128	; 0x80
  420b4a:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  420b4c:	6863      	ldr	r3, [r4, #4]
  420b4e:	f043 0301 	orr.w	r3, r3, #1
  420b52:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  420b54:	6863      	ldr	r3, [r4, #4]
  420b56:	f043 0310 	orr.w	r3, r3, #16
  420b5a:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  420b5c:	6863      	ldr	r3, [r4, #4]
  420b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  420b62:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  420b64:	2100      	movs	r1, #0
  420b66:	4620      	mov	r0, r4
  420b68:	4b08      	ldr	r3, [pc, #32]	; (420b8c <spi_master_init+0x4c>)
  420b6a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  420b6c:	6863      	ldr	r3, [r4, #4]
  420b6e:	f023 0302 	bic.w	r3, r3, #2
  420b72:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  420b74:	6863      	ldr	r3, [r4, #4]
  420b76:	f023 0304 	bic.w	r3, r3, #4
  420b7a:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  420b7c:	2100      	movs	r1, #0
  420b7e:	4620      	mov	r0, r4
  420b80:	4b03      	ldr	r3, [pc, #12]	; (420b90 <spi_master_init+0x50>)
  420b82:	4798      	blx	r3
  420b84:	bd10      	pop	{r4, pc}
  420b86:	bf00      	nop
  420b88:	00421459 	.word	0x00421459
  420b8c:	00421485 	.word	0x00421485
  420b90:	0042149b 	.word	0x0042149b

00420b94 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  420b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  420b98:	4604      	mov	r4, r0
  420b9a:	460d      	mov	r5, r1
  420b9c:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  420b9e:	4915      	ldr	r1, [pc, #84]	; (420bf4 <spi_master_setup_device+0x60>)
  420ba0:	4618      	mov	r0, r3
  420ba2:	4b15      	ldr	r3, [pc, #84]	; (420bf8 <spi_master_setup_device+0x64>)
  420ba4:	4798      	blx	r3
  420ba6:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  420ba8:	2300      	movs	r3, #0
  420baa:	461a      	mov	r2, r3
  420bac:	6829      	ldr	r1, [r5, #0]
  420bae:	4620      	mov	r0, r4
  420bb0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 420c10 <spi_master_setup_device+0x7c>
  420bb4:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  420bb6:	2208      	movs	r2, #8
  420bb8:	6829      	ldr	r1, [r5, #0]
  420bba:	4620      	mov	r0, r4
  420bbc:	4b0f      	ldr	r3, [pc, #60]	; (420bfc <spi_master_setup_device+0x68>)
  420bbe:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  420bc0:	b2fa      	uxtb	r2, r7
  420bc2:	6829      	ldr	r1, [r5, #0]
  420bc4:	4620      	mov	r0, r4
  420bc6:	4b0e      	ldr	r3, [pc, #56]	; (420c00 <spi_master_setup_device+0x6c>)
  420bc8:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  420bca:	2208      	movs	r2, #8
  420bcc:	6829      	ldr	r1, [r5, #0]
  420bce:	4620      	mov	r0, r4
  420bd0:	4b0c      	ldr	r3, [pc, #48]	; (420c04 <spi_master_setup_device+0x70>)
  420bd2:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  420bd4:	0872      	lsrs	r2, r6, #1
  420bd6:	6829      	ldr	r1, [r5, #0]
  420bd8:	4620      	mov	r0, r4
  420bda:	4b0b      	ldr	r3, [pc, #44]	; (420c08 <spi_master_setup_device+0x74>)
  420bdc:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  420bde:	f086 0201 	eor.w	r2, r6, #1
  420be2:	f002 0201 	and.w	r2, r2, #1
  420be6:	6829      	ldr	r1, [r5, #0]
  420be8:	4620      	mov	r0, r4
  420bea:	4b08      	ldr	r3, [pc, #32]	; (420c0c <spi_master_setup_device+0x78>)
  420bec:	4798      	blx	r3
  420bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  420bf2:	bf00      	nop
  420bf4:	08f0d180 	.word	0x08f0d180
  420bf8:	00421543 	.word	0x00421543
  420bfc:	0042152f 	.word	0x0042152f
  420c00:	00421559 	.word	0x00421559
  420c04:	004214e9 	.word	0x004214e9
  420c08:	004214ad 	.word	0x004214ad
  420c0c:	004214cb 	.word	0x004214cb
  420c10:	00421581 	.word	0x00421581

00420c14 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  420c14:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  420c16:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  420c18:	f013 0f04 	tst.w	r3, #4
  420c1c:	d006      	beq.n	420c2c <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  420c1e:	6809      	ldr	r1, [r1, #0]
  420c20:	290f      	cmp	r1, #15
  420c22:	d900      	bls.n	420c26 <spi_select_device+0x12>
  420c24:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  420c26:	4b06      	ldr	r3, [pc, #24]	; (420c40 <spi_select_device+0x2c>)
  420c28:	4798      	blx	r3
  420c2a:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  420c2c:	6809      	ldr	r1, [r1, #0]
  420c2e:	2903      	cmp	r1, #3
  420c30:	d8f8      	bhi.n	420c24 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  420c32:	2301      	movs	r3, #1
  420c34:	fa03 f101 	lsl.w	r1, r3, r1
  420c38:	43c9      	mvns	r1, r1
  420c3a:	4b01      	ldr	r3, [pc, #4]	; (420c40 <spi_select_device+0x2c>)
  420c3c:	4798      	blx	r3
		}
	}
}
  420c3e:	e7f1      	b.n	420c24 <spi_select_device+0x10>
  420c40:	00421485 	.word	0x00421485

00420c44 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  420c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  420c48:	b980      	cbnz	r0, 420c6c <_read+0x28>
  420c4a:	460c      	mov	r4, r1
  420c4c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  420c4e:	2a00      	cmp	r2, #0
  420c50:	dd0f      	ble.n	420c72 <_read+0x2e>
  420c52:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  420c54:	4e08      	ldr	r6, [pc, #32]	; (420c78 <_read+0x34>)
  420c56:	4d09      	ldr	r5, [pc, #36]	; (420c7c <_read+0x38>)
  420c58:	6830      	ldr	r0, [r6, #0]
  420c5a:	4621      	mov	r1, r4
  420c5c:	682b      	ldr	r3, [r5, #0]
  420c5e:	4798      	blx	r3
		ptr++;
  420c60:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  420c62:	42bc      	cmp	r4, r7
  420c64:	d1f8      	bne.n	420c58 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  420c66:	4640      	mov	r0, r8
  420c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  420c6c:	f04f 38ff 	mov.w	r8, #4294967295
  420c70:	e7f9      	b.n	420c66 <_read+0x22>
	for (; len > 0; --len) {
  420c72:	4680      	mov	r8, r0
  420c74:	e7f7      	b.n	420c66 <_read+0x22>
  420c76:	bf00      	nop
  420c78:	2043a2d4 	.word	0x2043a2d4
  420c7c:	2043a2cc 	.word	0x2043a2cc

00420c80 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  420c80:	3801      	subs	r0, #1
  420c82:	2802      	cmp	r0, #2
  420c84:	d815      	bhi.n	420cb2 <_write+0x32>
{
  420c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  420c8a:	460e      	mov	r6, r1
  420c8c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  420c8e:	b19a      	cbz	r2, 420cb8 <_write+0x38>
  420c90:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  420c92:	f8df 8038 	ldr.w	r8, [pc, #56]	; 420ccc <_write+0x4c>
  420c96:	4f0c      	ldr	r7, [pc, #48]	; (420cc8 <_write+0x48>)
  420c98:	f8d8 0000 	ldr.w	r0, [r8]
  420c9c:	f815 1b01 	ldrb.w	r1, [r5], #1
  420ca0:	683b      	ldr	r3, [r7, #0]
  420ca2:	4798      	blx	r3
  420ca4:	2800      	cmp	r0, #0
  420ca6:	db0a      	blt.n	420cbe <_write+0x3e>
  420ca8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  420caa:	3c01      	subs	r4, #1
  420cac:	d1f4      	bne.n	420c98 <_write+0x18>
  420cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  420cb2:	f04f 30ff 	mov.w	r0, #4294967295
  420cb6:	4770      	bx	lr
	for (; len != 0; --len) {
  420cb8:	4610      	mov	r0, r2
  420cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  420cbe:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  420cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  420cc6:	bf00      	nop
  420cc8:	2043a2d0 	.word	0x2043a2d0
  420ccc:	2043a2d4 	.word	0x2043a2d4

00420cd0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  420cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  420cd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  420cd8:	4b9e      	ldr	r3, [pc, #632]	; (420f54 <board_init+0x284>)
  420cda:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  420cdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  420ce0:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  420ce4:	4b9c      	ldr	r3, [pc, #624]	; (420f58 <board_init+0x288>)
  420ce6:	2200      	movs	r2, #0
  420ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  420cec:	695a      	ldr	r2, [r3, #20]
  420cee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  420cf2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  420cf4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  420cf8:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  420cfc:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  420d00:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  420d04:	f007 0007 	and.w	r0, r7, #7
  420d08:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  420d0a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  420d0e:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  420d12:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  420d16:	f3bf 8f4f 	dsb	sy
  420d1a:	f04f 34ff 	mov.w	r4, #4294967295
  420d1e:	fa04 fc00 	lsl.w	ip, r4, r0
  420d22:	fa06 f000 	lsl.w	r0, r6, r0
  420d26:	fa04 f40e 	lsl.w	r4, r4, lr
  420d2a:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  420d2e:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  420d30:	463a      	mov	r2, r7
  420d32:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  420d34:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  420d38:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  420d3c:	3a01      	subs	r2, #1
  420d3e:	4423      	add	r3, r4
  420d40:	f1b2 3fff 	cmp.w	r2, #4294967295
  420d44:	d1f6      	bne.n	420d34 <board_init+0x64>
        } while(sets--);
  420d46:	3e01      	subs	r6, #1
  420d48:	4460      	add	r0, ip
  420d4a:	f1b6 3fff 	cmp.w	r6, #4294967295
  420d4e:	d1ef      	bne.n	420d30 <board_init+0x60>
  420d50:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  420d54:	4b80      	ldr	r3, [pc, #512]	; (420f58 <board_init+0x288>)
  420d56:	695a      	ldr	r2, [r3, #20]
  420d58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  420d5c:	615a      	str	r2, [r3, #20]
  420d5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  420d62:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  420d66:	4a7d      	ldr	r2, [pc, #500]	; (420f5c <board_init+0x28c>)
  420d68:	497d      	ldr	r1, [pc, #500]	; (420f60 <board_init+0x290>)
  420d6a:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  420d6c:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  420d70:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  420d72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  420d76:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  420d7a:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  420d7e:	f022 0201 	bic.w	r2, r2, #1
  420d82:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  420d86:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  420d8a:	f022 0201 	bic.w	r2, r2, #1
  420d8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  420d92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  420d96:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  420d9a:	200a      	movs	r0, #10
  420d9c:	4c71      	ldr	r4, [pc, #452]	; (420f64 <board_init+0x294>)
  420d9e:	47a0      	blx	r4
  420da0:	200b      	movs	r0, #11
  420da2:	47a0      	blx	r4
  420da4:	200c      	movs	r0, #12
  420da6:	47a0      	blx	r4
  420da8:	2010      	movs	r0, #16
  420daa:	47a0      	blx	r4
  420dac:	2011      	movs	r0, #17
  420dae:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  420db0:	4e6d      	ldr	r6, [pc, #436]	; (420f68 <board_init+0x298>)
  420db2:	f44f 7880 	mov.w	r8, #256	; 0x100
  420db6:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  420dba:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  420dbe:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  420dc2:	4c6a      	ldr	r4, [pc, #424]	; (420f6c <board_init+0x29c>)
  420dc4:	f44f 6500 	mov.w	r5, #2048	; 0x800
  420dc8:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  420dca:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  420dce:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  420dd0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  420dd4:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  420dd6:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  420dd8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  420ddc:	6f23      	ldr	r3, [r4, #112]	; 0x70
  420dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  420de2:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  420de4:	6f63      	ldr	r3, [r4, #116]	; 0x74
  420de6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  420dea:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  420dec:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  420df0:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  420df4:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  420df8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  420dfc:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  420dfe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  420e02:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  420e04:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  420e06:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  420e0a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  420e0c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  420e10:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  420e12:	6f62      	ldr	r2, [r4, #116]	; 0x74
  420e14:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  420e18:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  420e1a:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  420e1c:	4a54      	ldr	r2, [pc, #336]	; (420f70 <board_init+0x2a0>)
  420e1e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  420e22:	f043 0310 	orr.w	r3, r3, #16
  420e26:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  420e2a:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  420e2e:	2310      	movs	r3, #16
  420e30:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  420e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  420e36:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  420e38:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  420e3a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  420e3e:	6f11      	ldr	r1, [r2, #112]	; 0x70
  420e40:	4319      	orrs	r1, r3
  420e42:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  420e44:	6f51      	ldr	r1, [r2, #116]	; 0x74
  420e46:	4319      	orrs	r1, r3
  420e48:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  420e4a:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  420e4c:	2208      	movs	r2, #8
  420e4e:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  420e50:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  420e54:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  420e56:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  420e58:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  420e5c:	6f21      	ldr	r1, [r4, #112]	; 0x70
  420e5e:	f021 0108 	bic.w	r1, r1, #8
  420e62:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  420e64:	6f61      	ldr	r1, [r4, #116]	; 0x74
  420e66:	f021 0108 	bic.w	r1, r1, #8
  420e6a:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  420e6c:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  420e6e:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  420e70:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  420e74:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  420e76:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  420e78:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  420e7c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  420e7e:	f022 0210 	bic.w	r2, r2, #16
  420e82:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  420e84:	6f62      	ldr	r2, [r4, #116]	; 0x74
  420e86:	f022 0210 	bic.w	r2, r2, #16
  420e8a:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  420e8c:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  420e8e:	2300      	movs	r3, #0
  420e90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  420e94:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420e98:	4630      	mov	r0, r6
  420e9a:	4f36      	ldr	r7, [pc, #216]	; (420f74 <board_init+0x2a4>)
  420e9c:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  420e9e:	2300      	movs	r3, #0
  420ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  420ea4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420ea8:	4630      	mov	r0, r6
  420eaa:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  420eac:	2301      	movs	r3, #1
  420eae:	22ff      	movs	r2, #255	; 0xff
  420eb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420eb4:	4630      	mov	r0, r6
  420eb6:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  420eb8:	2301      	movs	r3, #1
  420eba:	223f      	movs	r2, #63	; 0x3f
  420ebc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420ec0:	482d      	ldr	r0, [pc, #180]	; (420f78 <board_init+0x2a8>)
  420ec2:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  420ec4:	2301      	movs	r3, #1
  420ec6:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  420eca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420ece:	4620      	mov	r0, r4
  420ed0:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  420ed2:	2301      	movs	r3, #1
  420ed4:	4642      	mov	r2, r8
  420ed6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420eda:	4630      	mov	r0, r6
  420edc:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  420ede:	2301      	movs	r3, #1
  420ee0:	462a      	mov	r2, r5
  420ee2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420ee6:	4630      	mov	r0, r6
  420ee8:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  420eea:	2301      	movs	r3, #1
  420eec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  420ef0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420ef4:	4821      	ldr	r0, [pc, #132]	; (420f7c <board_init+0x2ac>)
  420ef6:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  420ef8:	2300      	movs	r3, #0
  420efa:	f44f 7200 	mov.w	r2, #512	; 0x200
  420efe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420f02:	4630      	mov	r0, r6
  420f04:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  420f06:	f44f 7100 	mov.w	r1, #512	; 0x200
  420f0a:	4630      	mov	r0, r6
  420f0c:	4b1c      	ldr	r3, [pc, #112]	; (420f80 <board_init+0x2b0>)
  420f0e:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  420f10:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420f14:	2074      	movs	r0, #116	; 0x74
  420f16:	4c1b      	ldr	r4, [pc, #108]	; (420f84 <board_init+0x2b4>)
  420f18:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  420f1a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420f1e:	2075      	movs	r0, #117	; 0x75
  420f20:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  420f22:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420f26:	2076      	movs	r0, #118	; 0x76
  420f28:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  420f2a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420f2e:	207b      	movs	r0, #123	; 0x7b
  420f30:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  420f32:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420f36:	2018      	movs	r0, #24
  420f38:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  420f3a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420f3e:	2006      	movs	r0, #6
  420f40:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  420f42:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420f46:	2053      	movs	r0, #83	; 0x53
  420f48:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  420f4a:	2053      	movs	r0, #83	; 0x53
  420f4c:	4b0e      	ldr	r3, [pc, #56]	; (420f88 <board_init+0x2b8>)
  420f4e:	4798      	blx	r3
  420f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  420f54:	400e1850 	.word	0x400e1850
  420f58:	e000ed00 	.word	0xe000ed00
  420f5c:	400e0c00 	.word	0x400e0c00
  420f60:	5a00080c 	.word	0x5a00080c
  420f64:	00421439 	.word	0x00421439
  420f68:	400e1200 	.word	0x400e1200
  420f6c:	400e0e00 	.word	0x400e0e00
  420f70:	40088000 	.word	0x40088000
  420f74:	00421081 	.word	0x00421081
  420f78:	400e1600 	.word	0x400e1600
  420f7c:	400e1400 	.word	0x400e1400
  420f80:	00420f8d 	.word	0x00420f8d
  420f84:	00421135 	.word	0x00421135
  420f88:	00421119 	.word	0x00421119

00420f8c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  420f8c:	6301      	str	r1, [r0, #48]	; 0x30
  420f8e:	4770      	bx	lr

00420f90 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  420f90:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  420f92:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  420f96:	d03a      	beq.n	42100e <pio_set_peripheral+0x7e>
  420f98:	d813      	bhi.n	420fc2 <pio_set_peripheral+0x32>
  420f9a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  420f9e:	d025      	beq.n	420fec <pio_set_peripheral+0x5c>
  420fa0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  420fa4:	d10a      	bne.n	420fbc <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  420fa6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  420fa8:	4313      	orrs	r3, r2
  420faa:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  420fac:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  420fae:	6f41      	ldr	r1, [r0, #116]	; 0x74
  420fb0:	400b      	ands	r3, r1
  420fb2:	ea23 0302 	bic.w	r3, r3, r2
  420fb6:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  420fb8:	6042      	str	r2, [r0, #4]
  420fba:	4770      	bx	lr
	switch (ul_type) {
  420fbc:	2900      	cmp	r1, #0
  420fbe:	d1fb      	bne.n	420fb8 <pio_set_peripheral+0x28>
  420fc0:	4770      	bx	lr
  420fc2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  420fc6:	d021      	beq.n	42100c <pio_set_peripheral+0x7c>
  420fc8:	d809      	bhi.n	420fde <pio_set_peripheral+0x4e>
  420fca:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  420fce:	d1f3      	bne.n	420fb8 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  420fd0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  420fd2:	4313      	orrs	r3, r2
  420fd4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  420fd6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  420fd8:	4313      	orrs	r3, r2
  420fda:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  420fdc:	e7ec      	b.n	420fb8 <pio_set_peripheral+0x28>
	switch (ul_type) {
  420fde:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  420fe2:	d013      	beq.n	42100c <pio_set_peripheral+0x7c>
  420fe4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  420fe8:	d010      	beq.n	42100c <pio_set_peripheral+0x7c>
  420fea:	e7e5      	b.n	420fb8 <pio_set_peripheral+0x28>
{
  420fec:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  420fee:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  420ff0:	6f04      	ldr	r4, [r0, #112]	; 0x70
  420ff2:	43d3      	mvns	r3, r2
  420ff4:	4021      	ands	r1, r4
  420ff6:	461c      	mov	r4, r3
  420ff8:	4019      	ands	r1, r3
  420ffa:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  420ffc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  420ffe:	6f41      	ldr	r1, [r0, #116]	; 0x74
  421000:	400b      	ands	r3, r1
  421002:	4023      	ands	r3, r4
  421004:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  421006:	6042      	str	r2, [r0, #4]
}
  421008:	f85d 4b04 	ldr.w	r4, [sp], #4
  42100c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  42100e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  421010:	6f01      	ldr	r1, [r0, #112]	; 0x70
  421012:	400b      	ands	r3, r1
  421014:	ea23 0302 	bic.w	r3, r3, r2
  421018:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  42101a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  42101c:	4313      	orrs	r3, r2
  42101e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  421020:	e7ca      	b.n	420fb8 <pio_set_peripheral+0x28>

00421022 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  421022:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  421024:	f012 0f01 	tst.w	r2, #1
  421028:	d10d      	bne.n	421046 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  42102a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  42102c:	f012 0f0a 	tst.w	r2, #10
  421030:	d00b      	beq.n	42104a <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  421032:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  421034:	f012 0f02 	tst.w	r2, #2
  421038:	d109      	bne.n	42104e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  42103a:	f012 0f08 	tst.w	r2, #8
  42103e:	d008      	beq.n	421052 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  421040:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  421044:	e005      	b.n	421052 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  421046:	6641      	str	r1, [r0, #100]	; 0x64
  421048:	e7f0      	b.n	42102c <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  42104a:	6241      	str	r1, [r0, #36]	; 0x24
  42104c:	e7f2      	b.n	421034 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  42104e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  421052:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  421054:	6001      	str	r1, [r0, #0]
  421056:	4770      	bx	lr

00421058 <pio_set_output>:
{
  421058:	b410      	push	{r4}
  42105a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  42105c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  42105e:	b94c      	cbnz	r4, 421074 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  421060:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  421062:	b14b      	cbz	r3, 421078 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  421064:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  421066:	b94a      	cbnz	r2, 42107c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  421068:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  42106a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  42106c:	6001      	str	r1, [r0, #0]
}
  42106e:	f85d 4b04 	ldr.w	r4, [sp], #4
  421072:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  421074:	6641      	str	r1, [r0, #100]	; 0x64
  421076:	e7f4      	b.n	421062 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  421078:	6541      	str	r1, [r0, #84]	; 0x54
  42107a:	e7f4      	b.n	421066 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  42107c:	6301      	str	r1, [r0, #48]	; 0x30
  42107e:	e7f4      	b.n	42106a <pio_set_output+0x12>

00421080 <pio_configure>:
{
  421080:	b570      	push	{r4, r5, r6, lr}
  421082:	b082      	sub	sp, #8
  421084:	4605      	mov	r5, r0
  421086:	4616      	mov	r6, r2
  421088:	461c      	mov	r4, r3
	switch (ul_type) {
  42108a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  42108e:	d014      	beq.n	4210ba <pio_configure+0x3a>
  421090:	d90a      	bls.n	4210a8 <pio_configure+0x28>
  421092:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  421096:	d024      	beq.n	4210e2 <pio_configure+0x62>
  421098:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  42109c:	d021      	beq.n	4210e2 <pio_configure+0x62>
  42109e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4210a2:	d017      	beq.n	4210d4 <pio_configure+0x54>
		return 0;
  4210a4:	2000      	movs	r0, #0
  4210a6:	e01a      	b.n	4210de <pio_configure+0x5e>
	switch (ul_type) {
  4210a8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4210ac:	d005      	beq.n	4210ba <pio_configure+0x3a>
  4210ae:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4210b2:	d002      	beq.n	4210ba <pio_configure+0x3a>
  4210b4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4210b8:	d1f4      	bne.n	4210a4 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4210ba:	4632      	mov	r2, r6
  4210bc:	4628      	mov	r0, r5
  4210be:	4b11      	ldr	r3, [pc, #68]	; (421104 <pio_configure+0x84>)
  4210c0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4210c2:	f014 0f01 	tst.w	r4, #1
  4210c6:	d102      	bne.n	4210ce <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4210c8:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4210ca:	2001      	movs	r0, #1
  4210cc:	e007      	b.n	4210de <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4210ce:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4210d0:	2001      	movs	r0, #1
  4210d2:	e004      	b.n	4210de <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4210d4:	461a      	mov	r2, r3
  4210d6:	4631      	mov	r1, r6
  4210d8:	4b0b      	ldr	r3, [pc, #44]	; (421108 <pio_configure+0x88>)
  4210da:	4798      	blx	r3
	return 1;
  4210dc:	2001      	movs	r0, #1
}
  4210de:	b002      	add	sp, #8
  4210e0:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4210e2:	f004 0301 	and.w	r3, r4, #1
  4210e6:	9300      	str	r3, [sp, #0]
  4210e8:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4210ec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4210f0:	bf14      	ite	ne
  4210f2:	2200      	movne	r2, #0
  4210f4:	2201      	moveq	r2, #1
  4210f6:	4631      	mov	r1, r6
  4210f8:	4628      	mov	r0, r5
  4210fa:	4c04      	ldr	r4, [pc, #16]	; (42110c <pio_configure+0x8c>)
  4210fc:	47a0      	blx	r4
	return 1;
  4210fe:	2001      	movs	r0, #1
		break;
  421100:	e7ed      	b.n	4210de <pio_configure+0x5e>
  421102:	bf00      	nop
  421104:	00420f91 	.word	0x00420f91
  421108:	00421023 	.word	0x00421023
  42110c:	00421059 	.word	0x00421059

00421110 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  421110:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  421112:	4770      	bx	lr

00421114 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  421114:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  421116:	4770      	bx	lr

00421118 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  421118:	4b05      	ldr	r3, [pc, #20]	; (421130 <pio_set_pin_high+0x18>)
  42111a:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  42111e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  421120:	f000 001f 	and.w	r0, r0, #31
  421124:	2201      	movs	r2, #1
  421126:	fa02 f000 	lsl.w	r0, r2, r0
  42112a:	6318      	str	r0, [r3, #48]	; 0x30
  42112c:	4770      	bx	lr
  42112e:	bf00      	nop
  421130:	00200707 	.word	0x00200707

00421134 <pio_configure_pin>:
{
  421134:	b570      	push	{r4, r5, r6, lr}
  421136:	b082      	sub	sp, #8
  421138:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  42113a:	4c46      	ldr	r4, [pc, #280]	; (421254 <pio_configure_pin+0x120>)
  42113c:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  421140:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  421142:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  421146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  42114a:	d059      	beq.n	421200 <pio_configure_pin+0xcc>
  42114c:	d80a      	bhi.n	421164 <pio_configure_pin+0x30>
  42114e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  421152:	d02f      	beq.n	4211b4 <pio_configure_pin+0x80>
  421154:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  421158:	d03f      	beq.n	4211da <pio_configure_pin+0xa6>
  42115a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  42115e:	d016      	beq.n	42118e <pio_configure_pin+0x5a>
		return 0;
  421160:	2000      	movs	r0, #0
  421162:	e012      	b.n	42118a <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  421164:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  421168:	d05d      	beq.n	421226 <pio_configure_pin+0xf2>
  42116a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  42116e:	d05a      	beq.n	421226 <pio_configure_pin+0xf2>
  421170:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  421174:	d1f4      	bne.n	421160 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  421176:	f000 011f 	and.w	r1, r0, #31
  42117a:	2601      	movs	r6, #1
  42117c:	462a      	mov	r2, r5
  42117e:	fa06 f101 	lsl.w	r1, r6, r1
  421182:	4620      	mov	r0, r4
  421184:	4b34      	ldr	r3, [pc, #208]	; (421258 <pio_configure_pin+0x124>)
  421186:	4798      	blx	r3
	return 1;
  421188:	4630      	mov	r0, r6
}
  42118a:	b002      	add	sp, #8
  42118c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  42118e:	f000 001f 	and.w	r0, r0, #31
  421192:	2601      	movs	r6, #1
  421194:	4086      	lsls	r6, r0
  421196:	4632      	mov	r2, r6
  421198:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  42119c:	4620      	mov	r0, r4
  42119e:	4b2f      	ldr	r3, [pc, #188]	; (42125c <pio_configure_pin+0x128>)
  4211a0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4211a2:	f015 0f01 	tst.w	r5, #1
  4211a6:	d102      	bne.n	4211ae <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4211a8:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4211aa:	2001      	movs	r0, #1
  4211ac:	e7ed      	b.n	42118a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4211ae:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4211b0:	2001      	movs	r0, #1
  4211b2:	e7ea      	b.n	42118a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4211b4:	f000 001f 	and.w	r0, r0, #31
  4211b8:	2601      	movs	r6, #1
  4211ba:	4086      	lsls	r6, r0
  4211bc:	4632      	mov	r2, r6
  4211be:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4211c2:	4620      	mov	r0, r4
  4211c4:	4b25      	ldr	r3, [pc, #148]	; (42125c <pio_configure_pin+0x128>)
  4211c6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4211c8:	f015 0f01 	tst.w	r5, #1
  4211cc:	d102      	bne.n	4211d4 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4211ce:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4211d0:	2001      	movs	r0, #1
  4211d2:	e7da      	b.n	42118a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4211d4:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4211d6:	2001      	movs	r0, #1
  4211d8:	e7d7      	b.n	42118a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4211da:	f000 001f 	and.w	r0, r0, #31
  4211de:	2601      	movs	r6, #1
  4211e0:	4086      	lsls	r6, r0
  4211e2:	4632      	mov	r2, r6
  4211e4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4211e8:	4620      	mov	r0, r4
  4211ea:	4b1c      	ldr	r3, [pc, #112]	; (42125c <pio_configure_pin+0x128>)
  4211ec:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4211ee:	f015 0f01 	tst.w	r5, #1
  4211f2:	d102      	bne.n	4211fa <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4211f4:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4211f6:	2001      	movs	r0, #1
  4211f8:	e7c7      	b.n	42118a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4211fa:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4211fc:	2001      	movs	r0, #1
  4211fe:	e7c4      	b.n	42118a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  421200:	f000 001f 	and.w	r0, r0, #31
  421204:	2601      	movs	r6, #1
  421206:	4086      	lsls	r6, r0
  421208:	4632      	mov	r2, r6
  42120a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  42120e:	4620      	mov	r0, r4
  421210:	4b12      	ldr	r3, [pc, #72]	; (42125c <pio_configure_pin+0x128>)
  421212:	4798      	blx	r3
	if (ul_pull_up_enable) {
  421214:	f015 0f01 	tst.w	r5, #1
  421218:	d102      	bne.n	421220 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  42121a:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  42121c:	2001      	movs	r0, #1
  42121e:	e7b4      	b.n	42118a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  421220:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  421222:	2001      	movs	r0, #1
  421224:	e7b1      	b.n	42118a <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  421226:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  42122a:	f000 011f 	and.w	r1, r0, #31
  42122e:	2601      	movs	r6, #1
  421230:	ea05 0306 	and.w	r3, r5, r6
  421234:	9300      	str	r3, [sp, #0]
  421236:	f3c5 0380 	ubfx	r3, r5, #2, #1
  42123a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  42123e:	bf14      	ite	ne
  421240:	2200      	movne	r2, #0
  421242:	2201      	moveq	r2, #1
  421244:	fa06 f101 	lsl.w	r1, r6, r1
  421248:	4620      	mov	r0, r4
  42124a:	4c05      	ldr	r4, [pc, #20]	; (421260 <pio_configure_pin+0x12c>)
  42124c:	47a0      	blx	r4
	return 1;
  42124e:	4630      	mov	r0, r6
		break;
  421250:	e79b      	b.n	42118a <pio_configure_pin+0x56>
  421252:	bf00      	nop
  421254:	00200707 	.word	0x00200707
  421258:	00421023 	.word	0x00421023
  42125c:	00420f91 	.word	0x00420f91
  421260:	00421059 	.word	0x00421059

00421264 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  421264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  421268:	4604      	mov	r4, r0
  42126a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  42126c:	4b0e      	ldr	r3, [pc, #56]	; (4212a8 <pio_handler_process+0x44>)
  42126e:	4798      	blx	r3
  421270:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  421272:	4620      	mov	r0, r4
  421274:	4b0d      	ldr	r3, [pc, #52]	; (4212ac <pio_handler_process+0x48>)
  421276:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  421278:	4005      	ands	r5, r0
  42127a:	d013      	beq.n	4212a4 <pio_handler_process+0x40>
  42127c:	4c0c      	ldr	r4, [pc, #48]	; (4212b0 <pio_handler_process+0x4c>)
  42127e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  421282:	e003      	b.n	42128c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  421284:	42b4      	cmp	r4, r6
  421286:	d00d      	beq.n	4212a4 <pio_handler_process+0x40>
  421288:	3410      	adds	r4, #16
		while (status != 0) {
  42128a:	b15d      	cbz	r5, 4212a4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  42128c:	6820      	ldr	r0, [r4, #0]
  42128e:	4540      	cmp	r0, r8
  421290:	d1f8      	bne.n	421284 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  421292:	6861      	ldr	r1, [r4, #4]
  421294:	4229      	tst	r1, r5
  421296:	d0f5      	beq.n	421284 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  421298:	68e3      	ldr	r3, [r4, #12]
  42129a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  42129c:	6863      	ldr	r3, [r4, #4]
  42129e:	ea25 0503 	bic.w	r5, r5, r3
  4212a2:	e7ef      	b.n	421284 <pio_handler_process+0x20>
  4212a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4212a8:	00421111 	.word	0x00421111
  4212ac:	00421115 	.word	0x00421115
  4212b0:	204147a8 	.word	0x204147a8

004212b4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4212b4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4212b6:	210a      	movs	r1, #10
  4212b8:	4801      	ldr	r0, [pc, #4]	; (4212c0 <PIOA_Handler+0xc>)
  4212ba:	4b02      	ldr	r3, [pc, #8]	; (4212c4 <PIOA_Handler+0x10>)
  4212bc:	4798      	blx	r3
  4212be:	bd08      	pop	{r3, pc}
  4212c0:	400e0e00 	.word	0x400e0e00
  4212c4:	00421265 	.word	0x00421265

004212c8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4212c8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4212ca:	210b      	movs	r1, #11
  4212cc:	4801      	ldr	r0, [pc, #4]	; (4212d4 <PIOB_Handler+0xc>)
  4212ce:	4b02      	ldr	r3, [pc, #8]	; (4212d8 <PIOB_Handler+0x10>)
  4212d0:	4798      	blx	r3
  4212d2:	bd08      	pop	{r3, pc}
  4212d4:	400e1000 	.word	0x400e1000
  4212d8:	00421265 	.word	0x00421265

004212dc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4212dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4212de:	210c      	movs	r1, #12
  4212e0:	4801      	ldr	r0, [pc, #4]	; (4212e8 <PIOC_Handler+0xc>)
  4212e2:	4b02      	ldr	r3, [pc, #8]	; (4212ec <PIOC_Handler+0x10>)
  4212e4:	4798      	blx	r3
  4212e6:	bd08      	pop	{r3, pc}
  4212e8:	400e1200 	.word	0x400e1200
  4212ec:	00421265 	.word	0x00421265

004212f0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4212f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4212f2:	2110      	movs	r1, #16
  4212f4:	4801      	ldr	r0, [pc, #4]	; (4212fc <PIOD_Handler+0xc>)
  4212f6:	4b02      	ldr	r3, [pc, #8]	; (421300 <PIOD_Handler+0x10>)
  4212f8:	4798      	blx	r3
  4212fa:	bd08      	pop	{r3, pc}
  4212fc:	400e1400 	.word	0x400e1400
  421300:	00421265 	.word	0x00421265

00421304 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  421304:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  421306:	2111      	movs	r1, #17
  421308:	4801      	ldr	r0, [pc, #4]	; (421310 <PIOE_Handler+0xc>)
  42130a:	4b02      	ldr	r3, [pc, #8]	; (421314 <PIOE_Handler+0x10>)
  42130c:	4798      	blx	r3
  42130e:	bd08      	pop	{r3, pc}
  421310:	400e1600 	.word	0x400e1600
  421314:	00421265 	.word	0x00421265

00421318 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  421318:	2803      	cmp	r0, #3
  42131a:	d011      	beq.n	421340 <pmc_mck_set_division+0x28>
  42131c:	2804      	cmp	r0, #4
  42131e:	d012      	beq.n	421346 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  421320:	2802      	cmp	r0, #2
  421322:	bf0c      	ite	eq
  421324:	f44f 7180 	moveq.w	r1, #256	; 0x100
  421328:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  42132a:	4a08      	ldr	r2, [pc, #32]	; (42134c <pmc_mck_set_division+0x34>)
  42132c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  42132e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  421332:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  421334:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  421336:	6e93      	ldr	r3, [r2, #104]	; 0x68
  421338:	f013 0f08 	tst.w	r3, #8
  42133c:	d0fb      	beq.n	421336 <pmc_mck_set_division+0x1e>
}
  42133e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  421340:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  421344:	e7f1      	b.n	42132a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  421346:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  42134a:	e7ee      	b.n	42132a <pmc_mck_set_division+0x12>
  42134c:	400e0600 	.word	0x400e0600

00421350 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  421350:	4a17      	ldr	r2, [pc, #92]	; (4213b0 <pmc_switch_mck_to_pllack+0x60>)
  421352:	6b13      	ldr	r3, [r2, #48]	; 0x30
  421354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  421358:	4318      	orrs	r0, r3
  42135a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  42135c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  42135e:	f013 0f08 	tst.w	r3, #8
  421362:	d10a      	bne.n	42137a <pmc_switch_mck_to_pllack+0x2a>
  421364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  421368:	4911      	ldr	r1, [pc, #68]	; (4213b0 <pmc_switch_mck_to_pllack+0x60>)
  42136a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  42136c:	f012 0f08 	tst.w	r2, #8
  421370:	d103      	bne.n	42137a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  421372:	3b01      	subs	r3, #1
  421374:	d1f9      	bne.n	42136a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  421376:	2001      	movs	r0, #1
  421378:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  42137a:	4a0d      	ldr	r2, [pc, #52]	; (4213b0 <pmc_switch_mck_to_pllack+0x60>)
  42137c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  42137e:	f023 0303 	bic.w	r3, r3, #3
  421382:	f043 0302 	orr.w	r3, r3, #2
  421386:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  421388:	6e93      	ldr	r3, [r2, #104]	; 0x68
  42138a:	f013 0f08 	tst.w	r3, #8
  42138e:	d10a      	bne.n	4213a6 <pmc_switch_mck_to_pllack+0x56>
  421390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  421394:	4906      	ldr	r1, [pc, #24]	; (4213b0 <pmc_switch_mck_to_pllack+0x60>)
  421396:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  421398:	f012 0f08 	tst.w	r2, #8
  42139c:	d105      	bne.n	4213aa <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  42139e:	3b01      	subs	r3, #1
  4213a0:	d1f9      	bne.n	421396 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4213a2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4213a4:	4770      	bx	lr
	return 0;
  4213a6:	2000      	movs	r0, #0
  4213a8:	4770      	bx	lr
  4213aa:	2000      	movs	r0, #0
  4213ac:	4770      	bx	lr
  4213ae:	bf00      	nop
  4213b0:	400e0600 	.word	0x400e0600

004213b4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4213b4:	b9a0      	cbnz	r0, 4213e0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4213b6:	480e      	ldr	r0, [pc, #56]	; (4213f0 <pmc_switch_mainck_to_xtal+0x3c>)
  4213b8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4213ba:	0209      	lsls	r1, r1, #8
  4213bc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4213be:	4a0d      	ldr	r2, [pc, #52]	; (4213f4 <pmc_switch_mainck_to_xtal+0x40>)
  4213c0:	401a      	ands	r2, r3
  4213c2:	4b0d      	ldr	r3, [pc, #52]	; (4213f8 <pmc_switch_mainck_to_xtal+0x44>)
  4213c4:	4313      	orrs	r3, r2
  4213c6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4213c8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4213ca:	4602      	mov	r2, r0
  4213cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4213ce:	f013 0f01 	tst.w	r3, #1
  4213d2:	d0fb      	beq.n	4213cc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4213d4:	4a06      	ldr	r2, [pc, #24]	; (4213f0 <pmc_switch_mainck_to_xtal+0x3c>)
  4213d6:	6a11      	ldr	r1, [r2, #32]
  4213d8:	4b08      	ldr	r3, [pc, #32]	; (4213fc <pmc_switch_mainck_to_xtal+0x48>)
  4213da:	430b      	orrs	r3, r1
  4213dc:	6213      	str	r3, [r2, #32]
  4213de:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4213e0:	4903      	ldr	r1, [pc, #12]	; (4213f0 <pmc_switch_mainck_to_xtal+0x3c>)
  4213e2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4213e4:	4a06      	ldr	r2, [pc, #24]	; (421400 <pmc_switch_mainck_to_xtal+0x4c>)
  4213e6:	401a      	ands	r2, r3
  4213e8:	4b06      	ldr	r3, [pc, #24]	; (421404 <pmc_switch_mainck_to_xtal+0x50>)
  4213ea:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4213ec:	620b      	str	r3, [r1, #32]
  4213ee:	4770      	bx	lr
  4213f0:	400e0600 	.word	0x400e0600
  4213f4:	ffc8fffc 	.word	0xffc8fffc
  4213f8:	00370001 	.word	0x00370001
  4213fc:	01370000 	.word	0x01370000
  421400:	fec8fffc 	.word	0xfec8fffc
  421404:	01370002 	.word	0x01370002

00421408 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  421408:	4b02      	ldr	r3, [pc, #8]	; (421414 <pmc_osc_is_ready_mainck+0xc>)
  42140a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  42140c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  421410:	4770      	bx	lr
  421412:	bf00      	nop
  421414:	400e0600 	.word	0x400e0600

00421418 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  421418:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  42141c:	4b01      	ldr	r3, [pc, #4]	; (421424 <pmc_disable_pllack+0xc>)
  42141e:	629a      	str	r2, [r3, #40]	; 0x28
  421420:	4770      	bx	lr
  421422:	bf00      	nop
  421424:	400e0600 	.word	0x400e0600

00421428 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  421428:	4b02      	ldr	r3, [pc, #8]	; (421434 <pmc_is_locked_pllack+0xc>)
  42142a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  42142c:	f000 0002 	and.w	r0, r0, #2
  421430:	4770      	bx	lr
  421432:	bf00      	nop
  421434:	400e0600 	.word	0x400e0600

00421438 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  421438:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  42143c:	4b05      	ldr	r3, [pc, #20]	; (421454 <pmc_enable_periph_clk+0x1c>)
  42143e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  421442:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  421446:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  42144a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  42144e:	2000      	movs	r0, #0
  421450:	4770      	bx	lr
  421452:	bf00      	nop
  421454:	400e0600 	.word	0x400e0600

00421458 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  421458:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  42145a:	4b07      	ldr	r3, [pc, #28]	; (421478 <spi_enable_clock+0x20>)
  42145c:	4298      	cmp	r0, r3
  42145e:	d003      	beq.n	421468 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  421460:	4b06      	ldr	r3, [pc, #24]	; (42147c <spi_enable_clock+0x24>)
  421462:	4298      	cmp	r0, r3
  421464:	d004      	beq.n	421470 <spi_enable_clock+0x18>
  421466:	bd08      	pop	{r3, pc}
  421468:	2015      	movs	r0, #21
  42146a:	4b05      	ldr	r3, [pc, #20]	; (421480 <spi_enable_clock+0x28>)
  42146c:	4798      	blx	r3
  42146e:	bd08      	pop	{r3, pc}
  421470:	202a      	movs	r0, #42	; 0x2a
  421472:	4b03      	ldr	r3, [pc, #12]	; (421480 <spi_enable_clock+0x28>)
  421474:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  421476:	e7f6      	b.n	421466 <spi_enable_clock+0xe>
  421478:	40008000 	.word	0x40008000
  42147c:	40058000 	.word	0x40058000
  421480:	00421439 	.word	0x00421439

00421484 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  421484:	6843      	ldr	r3, [r0, #4]
  421486:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  42148a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  42148c:	6843      	ldr	r3, [r0, #4]
  42148e:	0409      	lsls	r1, r1, #16
  421490:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  421494:	4319      	orrs	r1, r3
  421496:	6041      	str	r1, [r0, #4]
  421498:	4770      	bx	lr

0042149a <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  42149a:	6843      	ldr	r3, [r0, #4]
  42149c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4214a0:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  4214a2:	6843      	ldr	r3, [r0, #4]
  4214a4:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  4214a8:	6041      	str	r1, [r0, #4]
  4214aa:	4770      	bx	lr

004214ac <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4214ac:	b932      	cbnz	r2, 4214bc <spi_set_clock_polarity+0x10>
  4214ae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4214b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4214b4:	f023 0301 	bic.w	r3, r3, #1
  4214b8:	6303      	str	r3, [r0, #48]	; 0x30
  4214ba:	4770      	bx	lr
  4214bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4214c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4214c2:	f043 0301 	orr.w	r3, r3, #1
  4214c6:	6303      	str	r3, [r0, #48]	; 0x30
  4214c8:	4770      	bx	lr

004214ca <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4214ca:	b932      	cbnz	r2, 4214da <spi_set_clock_phase+0x10>
  4214cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4214d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4214d2:	f023 0302 	bic.w	r3, r3, #2
  4214d6:	6303      	str	r3, [r0, #48]	; 0x30
  4214d8:	4770      	bx	lr
  4214da:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4214de:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4214e0:	f043 0302 	orr.w	r3, r3, #2
  4214e4:	6303      	str	r3, [r0, #48]	; 0x30
  4214e6:	4770      	bx	lr

004214e8 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4214e8:	2a04      	cmp	r2, #4
  4214ea:	d003      	beq.n	4214f4 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4214ec:	b16a      	cbz	r2, 42150a <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4214ee:	2a08      	cmp	r2, #8
  4214f0:	d016      	beq.n	421520 <spi_configure_cs_behavior+0x38>
  4214f2:	4770      	bx	lr
  4214f4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4214f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4214fa:	f023 0308 	bic.w	r3, r3, #8
  4214fe:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  421500:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421502:	f043 0304 	orr.w	r3, r3, #4
  421506:	6303      	str	r3, [r0, #48]	; 0x30
  421508:	4770      	bx	lr
  42150a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  42150e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421510:	f023 0308 	bic.w	r3, r3, #8
  421514:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  421516:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421518:	f023 0304 	bic.w	r3, r3, #4
  42151c:	6303      	str	r3, [r0, #48]	; 0x30
  42151e:	4770      	bx	lr
  421520:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  421524:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421526:	f043 0308 	orr.w	r3, r3, #8
  42152a:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  42152c:	e7e1      	b.n	4214f2 <spi_configure_cs_behavior+0xa>

0042152e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  42152e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  421532:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  421534:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  421538:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  42153a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  42153c:	431a      	orrs	r2, r3
  42153e:	630a      	str	r2, [r1, #48]	; 0x30
  421540:	4770      	bx	lr

00421542 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  421542:	1e43      	subs	r3, r0, #1
  421544:	4419      	add	r1, r3
  421546:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  42154a:	1e43      	subs	r3, r0, #1
  42154c:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  42154e:	bf94      	ite	ls
  421550:	b200      	sxthls	r0, r0
		return -1;
  421552:	f04f 30ff 	movhi.w	r0, #4294967295
}
  421556:	4770      	bx	lr

00421558 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  421558:	b17a      	cbz	r2, 42157a <spi_set_baudrate_div+0x22>
{
  42155a:	b410      	push	{r4}
  42155c:	4614      	mov	r4, r2
  42155e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  421562:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  421564:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  421568:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  42156a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  42156c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  421570:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  421572:	2000      	movs	r0, #0
}
  421574:	f85d 4b04 	ldr.w	r4, [sp], #4
  421578:	4770      	bx	lr
        return -1;
  42157a:	f04f 30ff 	mov.w	r0, #4294967295
  42157e:	4770      	bx	lr

00421580 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  421580:	b410      	push	{r4}
  421582:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  421586:	6b08      	ldr	r0, [r1, #48]	; 0x30
  421588:	b280      	uxth	r0, r0
  42158a:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  42158c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  42158e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  421592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  421596:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  421598:	f85d 4b04 	ldr.w	r4, [sp], #4
  42159c:	4770      	bx	lr

0042159e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  42159e:	6943      	ldr	r3, [r0, #20]
  4215a0:	f013 0f02 	tst.w	r3, #2
  4215a4:	d002      	beq.n	4215ac <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4215a6:	61c1      	str	r1, [r0, #28]
	return 0;
  4215a8:	2000      	movs	r0, #0
  4215aa:	4770      	bx	lr
		return 1;
  4215ac:	2001      	movs	r0, #1
}
  4215ae:	4770      	bx	lr

004215b0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4215b0:	6943      	ldr	r3, [r0, #20]
  4215b2:	f013 0f01 	tst.w	r3, #1
  4215b6:	d003      	beq.n	4215c0 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4215b8:	6983      	ldr	r3, [r0, #24]
  4215ba:	700b      	strb	r3, [r1, #0]
	return 0;
  4215bc:	2000      	movs	r0, #0
  4215be:	4770      	bx	lr
		return 1;
  4215c0:	2001      	movs	r0, #1
}
  4215c2:	4770      	bx	lr

004215c4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4215c4:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4215c6:	010b      	lsls	r3, r1, #4
  4215c8:	4293      	cmp	r3, r2
  4215ca:	d914      	bls.n	4215f6 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4215cc:	00c9      	lsls	r1, r1, #3
  4215ce:	084b      	lsrs	r3, r1, #1
  4215d0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4215d4:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4215d8:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4215da:	1e5c      	subs	r4, r3, #1
  4215dc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4215e0:	428c      	cmp	r4, r1
  4215e2:	d901      	bls.n	4215e8 <usart_set_async_baudrate+0x24>
		return 1;
  4215e4:	2001      	movs	r0, #1
  4215e6:	e017      	b.n	421618 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4215e8:	6841      	ldr	r1, [r0, #4]
  4215ea:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4215ee:	6041      	str	r1, [r0, #4]
  4215f0:	e00c      	b.n	42160c <usart_set_async_baudrate+0x48>
		return 1;
  4215f2:	2001      	movs	r0, #1
  4215f4:	e010      	b.n	421618 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4215f6:	0859      	lsrs	r1, r3, #1
  4215f8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4215fc:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  421600:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  421602:	1e5c      	subs	r4, r3, #1
  421604:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  421608:	428c      	cmp	r4, r1
  42160a:	d8f2      	bhi.n	4215f2 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  42160c:	0412      	lsls	r2, r2, #16
  42160e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  421612:	431a      	orrs	r2, r3
  421614:	6202      	str	r2, [r0, #32]

	return 0;
  421616:	2000      	movs	r0, #0
}
  421618:	f85d 4b04 	ldr.w	r4, [sp], #4
  42161c:	4770      	bx	lr
	...

00421620 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  421620:	4b08      	ldr	r3, [pc, #32]	; (421644 <usart_reset+0x24>)
  421622:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  421626:	2300      	movs	r3, #0
  421628:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  42162a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  42162c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  42162e:	2388      	movs	r3, #136	; 0x88
  421630:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  421632:	2324      	movs	r3, #36	; 0x24
  421634:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  421636:	f44f 7380 	mov.w	r3, #256	; 0x100
  42163a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  42163c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  421640:	6003      	str	r3, [r0, #0]
  421642:	4770      	bx	lr
  421644:	55534100 	.word	0x55534100

00421648 <usart_init_rs232>:
{
  421648:	b570      	push	{r4, r5, r6, lr}
  42164a:	4605      	mov	r5, r0
  42164c:	460c      	mov	r4, r1
  42164e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  421650:	4b0f      	ldr	r3, [pc, #60]	; (421690 <usart_init_rs232+0x48>)
  421652:	4798      	blx	r3
	ul_reg_val = 0;
  421654:	2200      	movs	r2, #0
  421656:	4b0f      	ldr	r3, [pc, #60]	; (421694 <usart_init_rs232+0x4c>)
  421658:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  42165a:	b1a4      	cbz	r4, 421686 <usart_init_rs232+0x3e>
  42165c:	4632      	mov	r2, r6
  42165e:	6821      	ldr	r1, [r4, #0]
  421660:	4628      	mov	r0, r5
  421662:	4b0d      	ldr	r3, [pc, #52]	; (421698 <usart_init_rs232+0x50>)
  421664:	4798      	blx	r3
  421666:	4602      	mov	r2, r0
  421668:	b978      	cbnz	r0, 42168a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  42166a:	6863      	ldr	r3, [r4, #4]
  42166c:	68a1      	ldr	r1, [r4, #8]
  42166e:	430b      	orrs	r3, r1
  421670:	6921      	ldr	r1, [r4, #16]
  421672:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  421674:	68e1      	ldr	r1, [r4, #12]
  421676:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  421678:	4906      	ldr	r1, [pc, #24]	; (421694 <usart_init_rs232+0x4c>)
  42167a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  42167c:	6869      	ldr	r1, [r5, #4]
  42167e:	430b      	orrs	r3, r1
  421680:	606b      	str	r3, [r5, #4]
}
  421682:	4610      	mov	r0, r2
  421684:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  421686:	2201      	movs	r2, #1
  421688:	e7fb      	b.n	421682 <usart_init_rs232+0x3a>
  42168a:	2201      	movs	r2, #1
  42168c:	e7f9      	b.n	421682 <usart_init_rs232+0x3a>
  42168e:	bf00      	nop
  421690:	00421621 	.word	0x00421621
  421694:	20414818 	.word	0x20414818
  421698:	004215c5 	.word	0x004215c5

0042169c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  42169c:	2340      	movs	r3, #64	; 0x40
  42169e:	6003      	str	r3, [r0, #0]
  4216a0:	4770      	bx	lr

004216a2 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4216a2:	2310      	movs	r3, #16
  4216a4:	6003      	str	r3, [r0, #0]
  4216a6:	4770      	bx	lr

004216a8 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  4216a8:	6081      	str	r1, [r0, #8]
  4216aa:	4770      	bx	lr

004216ac <usart_get_status>:
	return p_usart->US_CSR;
  4216ac:	6940      	ldr	r0, [r0, #20]
}
  4216ae:	4770      	bx	lr

004216b0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4216b0:	6943      	ldr	r3, [r0, #20]
  4216b2:	f013 0f02 	tst.w	r3, #2
  4216b6:	d004      	beq.n	4216c2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4216b8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4216bc:	61c1      	str	r1, [r0, #28]
	return 0;
  4216be:	2000      	movs	r0, #0
  4216c0:	4770      	bx	lr
		return 1;
  4216c2:	2001      	movs	r0, #1
}
  4216c4:	4770      	bx	lr

004216c6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4216c6:	6943      	ldr	r3, [r0, #20]
  4216c8:	f013 0f01 	tst.w	r3, #1
  4216cc:	d005      	beq.n	4216da <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4216ce:	6983      	ldr	r3, [r0, #24]
  4216d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4216d4:	600b      	str	r3, [r1, #0]
	return 0;
  4216d6:	2000      	movs	r0, #0
  4216d8:	4770      	bx	lr
		return 1;
  4216da:	2001      	movs	r0, #1
}
  4216dc:	4770      	bx	lr

004216de <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4216de:	e7fe      	b.n	4216de <Dummy_Handler>

004216e0 <Reset_Handler>:
{
  4216e0:	b500      	push	{lr}
  4216e2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4216e4:	4b25      	ldr	r3, [pc, #148]	; (42177c <Reset_Handler+0x9c>)
  4216e6:	4a26      	ldr	r2, [pc, #152]	; (421780 <Reset_Handler+0xa0>)
  4216e8:	429a      	cmp	r2, r3
  4216ea:	d010      	beq.n	42170e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4216ec:	4b25      	ldr	r3, [pc, #148]	; (421784 <Reset_Handler+0xa4>)
  4216ee:	4a23      	ldr	r2, [pc, #140]	; (42177c <Reset_Handler+0x9c>)
  4216f0:	429a      	cmp	r2, r3
  4216f2:	d20c      	bcs.n	42170e <Reset_Handler+0x2e>
  4216f4:	3b01      	subs	r3, #1
  4216f6:	1a9b      	subs	r3, r3, r2
  4216f8:	f023 0303 	bic.w	r3, r3, #3
  4216fc:	3304      	adds	r3, #4
  4216fe:	4413      	add	r3, r2
  421700:	491f      	ldr	r1, [pc, #124]	; (421780 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  421702:	f851 0b04 	ldr.w	r0, [r1], #4
  421706:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  42170a:	429a      	cmp	r2, r3
  42170c:	d1f9      	bne.n	421702 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  42170e:	4b1e      	ldr	r3, [pc, #120]	; (421788 <Reset_Handler+0xa8>)
  421710:	4a1e      	ldr	r2, [pc, #120]	; (42178c <Reset_Handler+0xac>)
  421712:	429a      	cmp	r2, r3
  421714:	d20a      	bcs.n	42172c <Reset_Handler+0x4c>
  421716:	3b01      	subs	r3, #1
  421718:	1a9b      	subs	r3, r3, r2
  42171a:	f023 0303 	bic.w	r3, r3, #3
  42171e:	3304      	adds	r3, #4
  421720:	4413      	add	r3, r2
                *pDest++ = 0;
  421722:	2100      	movs	r1, #0
  421724:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  421728:	4293      	cmp	r3, r2
  42172a:	d1fb      	bne.n	421724 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  42172c:	4a18      	ldr	r2, [pc, #96]	; (421790 <Reset_Handler+0xb0>)
  42172e:	4b19      	ldr	r3, [pc, #100]	; (421794 <Reset_Handler+0xb4>)
  421730:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  421734:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  421736:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  42173a:	fab3 f383 	clz	r3, r3
  42173e:	095b      	lsrs	r3, r3, #5
  421740:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  421742:	b672      	cpsid	i
  __ASM volatile ("dmb");
  421744:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  421748:	2200      	movs	r2, #0
  42174a:	4b13      	ldr	r3, [pc, #76]	; (421798 <Reset_Handler+0xb8>)
  42174c:	701a      	strb	r2, [r3, #0]
	return flags;
  42174e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  421750:	4a12      	ldr	r2, [pc, #72]	; (42179c <Reset_Handler+0xbc>)
  421752:	6813      	ldr	r3, [r2, #0]
  421754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  421758:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  42175a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  42175e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  421762:	b129      	cbz	r1, 421770 <Reset_Handler+0x90>
		cpu_irq_enable();
  421764:	2201      	movs	r2, #1
  421766:	4b0c      	ldr	r3, [pc, #48]	; (421798 <Reset_Handler+0xb8>)
  421768:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  42176a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  42176e:	b662      	cpsie	i
        __libc_init_array();
  421770:	4b0b      	ldr	r3, [pc, #44]	; (4217a0 <Reset_Handler+0xc0>)
  421772:	4798      	blx	r3
        main();
  421774:	4b0b      	ldr	r3, [pc, #44]	; (4217a4 <Reset_Handler+0xc4>)
  421776:	4798      	blx	r3
  421778:	e7fe      	b.n	421778 <Reset_Handler+0x98>
  42177a:	bf00      	nop
  42177c:	20400000 	.word	0x20400000
  421780:	00430a18 	.word	0x00430a18
  421784:	20400a70 	.word	0x20400a70
  421788:	2043a338 	.word	0x2043a338
  42178c:	20400a70 	.word	0x20400a70
  421790:	e000ed00 	.word	0xe000ed00
  421794:	00400000 	.word	0x00400000
  421798:	204000b4 	.word	0x204000b4
  42179c:	e000ed88 	.word	0xe000ed88
  4217a0:	004229bd 	.word	0x004229bd
  4217a4:	004223b1 	.word	0x004223b1

004217a8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4217a8:	4b3b      	ldr	r3, [pc, #236]	; (421898 <SystemCoreClockUpdate+0xf0>)
  4217aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4217ac:	f003 0303 	and.w	r3, r3, #3
  4217b0:	2b01      	cmp	r3, #1
  4217b2:	d01d      	beq.n	4217f0 <SystemCoreClockUpdate+0x48>
  4217b4:	b183      	cbz	r3, 4217d8 <SystemCoreClockUpdate+0x30>
  4217b6:	2b02      	cmp	r3, #2
  4217b8:	d036      	beq.n	421828 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4217ba:	4b37      	ldr	r3, [pc, #220]	; (421898 <SystemCoreClockUpdate+0xf0>)
  4217bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4217be:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4217c2:	2b70      	cmp	r3, #112	; 0x70
  4217c4:	d05f      	beq.n	421886 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4217c6:	4b34      	ldr	r3, [pc, #208]	; (421898 <SystemCoreClockUpdate+0xf0>)
  4217c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4217ca:	4934      	ldr	r1, [pc, #208]	; (42189c <SystemCoreClockUpdate+0xf4>)
  4217cc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4217d0:	680b      	ldr	r3, [r1, #0]
  4217d2:	40d3      	lsrs	r3, r2
  4217d4:	600b      	str	r3, [r1, #0]
  4217d6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4217d8:	4b31      	ldr	r3, [pc, #196]	; (4218a0 <SystemCoreClockUpdate+0xf8>)
  4217da:	695b      	ldr	r3, [r3, #20]
  4217dc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4217e0:	bf14      	ite	ne
  4217e2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4217e6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4217ea:	4b2c      	ldr	r3, [pc, #176]	; (42189c <SystemCoreClockUpdate+0xf4>)
  4217ec:	601a      	str	r2, [r3, #0]
  4217ee:	e7e4      	b.n	4217ba <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4217f0:	4b29      	ldr	r3, [pc, #164]	; (421898 <SystemCoreClockUpdate+0xf0>)
  4217f2:	6a1b      	ldr	r3, [r3, #32]
  4217f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4217f8:	d003      	beq.n	421802 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4217fa:	4a2a      	ldr	r2, [pc, #168]	; (4218a4 <SystemCoreClockUpdate+0xfc>)
  4217fc:	4b27      	ldr	r3, [pc, #156]	; (42189c <SystemCoreClockUpdate+0xf4>)
  4217fe:	601a      	str	r2, [r3, #0]
  421800:	e7db      	b.n	4217ba <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  421802:	4a29      	ldr	r2, [pc, #164]	; (4218a8 <SystemCoreClockUpdate+0x100>)
  421804:	4b25      	ldr	r3, [pc, #148]	; (42189c <SystemCoreClockUpdate+0xf4>)
  421806:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  421808:	4b23      	ldr	r3, [pc, #140]	; (421898 <SystemCoreClockUpdate+0xf0>)
  42180a:	6a1b      	ldr	r3, [r3, #32]
  42180c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  421810:	2b10      	cmp	r3, #16
  421812:	d005      	beq.n	421820 <SystemCoreClockUpdate+0x78>
  421814:	2b20      	cmp	r3, #32
  421816:	d1d0      	bne.n	4217ba <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  421818:	4a22      	ldr	r2, [pc, #136]	; (4218a4 <SystemCoreClockUpdate+0xfc>)
  42181a:	4b20      	ldr	r3, [pc, #128]	; (42189c <SystemCoreClockUpdate+0xf4>)
  42181c:	601a      	str	r2, [r3, #0]
          break;
  42181e:	e7cc      	b.n	4217ba <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  421820:	4a22      	ldr	r2, [pc, #136]	; (4218ac <SystemCoreClockUpdate+0x104>)
  421822:	4b1e      	ldr	r3, [pc, #120]	; (42189c <SystemCoreClockUpdate+0xf4>)
  421824:	601a      	str	r2, [r3, #0]
          break;
  421826:	e7c8      	b.n	4217ba <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  421828:	4b1b      	ldr	r3, [pc, #108]	; (421898 <SystemCoreClockUpdate+0xf0>)
  42182a:	6a1b      	ldr	r3, [r3, #32]
  42182c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  421830:	d016      	beq.n	421860 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  421832:	4a1c      	ldr	r2, [pc, #112]	; (4218a4 <SystemCoreClockUpdate+0xfc>)
  421834:	4b19      	ldr	r3, [pc, #100]	; (42189c <SystemCoreClockUpdate+0xf4>)
  421836:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  421838:	4b17      	ldr	r3, [pc, #92]	; (421898 <SystemCoreClockUpdate+0xf0>)
  42183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  42183c:	f003 0303 	and.w	r3, r3, #3
  421840:	2b02      	cmp	r3, #2
  421842:	d1ba      	bne.n	4217ba <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  421844:	4a14      	ldr	r2, [pc, #80]	; (421898 <SystemCoreClockUpdate+0xf0>)
  421846:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  421848:	6a92      	ldr	r2, [r2, #40]	; 0x28
  42184a:	4814      	ldr	r0, [pc, #80]	; (42189c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  42184c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  421850:	6803      	ldr	r3, [r0, #0]
  421852:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  421856:	b2d2      	uxtb	r2, r2
  421858:	fbb3 f3f2 	udiv	r3, r3, r2
  42185c:	6003      	str	r3, [r0, #0]
  42185e:	e7ac      	b.n	4217ba <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  421860:	4a11      	ldr	r2, [pc, #68]	; (4218a8 <SystemCoreClockUpdate+0x100>)
  421862:	4b0e      	ldr	r3, [pc, #56]	; (42189c <SystemCoreClockUpdate+0xf4>)
  421864:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  421866:	4b0c      	ldr	r3, [pc, #48]	; (421898 <SystemCoreClockUpdate+0xf0>)
  421868:	6a1b      	ldr	r3, [r3, #32]
  42186a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  42186e:	2b10      	cmp	r3, #16
  421870:	d005      	beq.n	42187e <SystemCoreClockUpdate+0xd6>
  421872:	2b20      	cmp	r3, #32
  421874:	d1e0      	bne.n	421838 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  421876:	4a0b      	ldr	r2, [pc, #44]	; (4218a4 <SystemCoreClockUpdate+0xfc>)
  421878:	4b08      	ldr	r3, [pc, #32]	; (42189c <SystemCoreClockUpdate+0xf4>)
  42187a:	601a      	str	r2, [r3, #0]
          break;
  42187c:	e7dc      	b.n	421838 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  42187e:	4a0b      	ldr	r2, [pc, #44]	; (4218ac <SystemCoreClockUpdate+0x104>)
  421880:	4b06      	ldr	r3, [pc, #24]	; (42189c <SystemCoreClockUpdate+0xf4>)
  421882:	601a      	str	r2, [r3, #0]
          break;
  421884:	e7d8      	b.n	421838 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  421886:	4a05      	ldr	r2, [pc, #20]	; (42189c <SystemCoreClockUpdate+0xf4>)
  421888:	6813      	ldr	r3, [r2, #0]
  42188a:	4909      	ldr	r1, [pc, #36]	; (4218b0 <SystemCoreClockUpdate+0x108>)
  42188c:	fba1 1303 	umull	r1, r3, r1, r3
  421890:	085b      	lsrs	r3, r3, #1
  421892:	6013      	str	r3, [r2, #0]
  421894:	4770      	bx	lr
  421896:	bf00      	nop
  421898:	400e0600 	.word	0x400e0600
  42189c:	204000b8 	.word	0x204000b8
  4218a0:	400e1810 	.word	0x400e1810
  4218a4:	00b71b00 	.word	0x00b71b00
  4218a8:	003d0900 	.word	0x003d0900
  4218ac:	007a1200 	.word	0x007a1200
  4218b0:	aaaaaaab 	.word	0xaaaaaaab

004218b4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4218b4:	4b16      	ldr	r3, [pc, #88]	; (421910 <system_init_flash+0x5c>)
  4218b6:	4298      	cmp	r0, r3
  4218b8:	d913      	bls.n	4218e2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4218ba:	4b16      	ldr	r3, [pc, #88]	; (421914 <system_init_flash+0x60>)
  4218bc:	4298      	cmp	r0, r3
  4218be:	d915      	bls.n	4218ec <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4218c0:	4b15      	ldr	r3, [pc, #84]	; (421918 <system_init_flash+0x64>)
  4218c2:	4298      	cmp	r0, r3
  4218c4:	d916      	bls.n	4218f4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4218c6:	4b15      	ldr	r3, [pc, #84]	; (42191c <system_init_flash+0x68>)
  4218c8:	4298      	cmp	r0, r3
  4218ca:	d917      	bls.n	4218fc <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4218cc:	4b14      	ldr	r3, [pc, #80]	; (421920 <system_init_flash+0x6c>)
  4218ce:	4298      	cmp	r0, r3
  4218d0:	d918      	bls.n	421904 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4218d2:	4b14      	ldr	r3, [pc, #80]	; (421924 <system_init_flash+0x70>)
  4218d4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4218d6:	bf94      	ite	ls
  4218d8:	4a13      	ldrls	r2, [pc, #76]	; (421928 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4218da:	4a14      	ldrhi	r2, [pc, #80]	; (42192c <system_init_flash+0x78>)
  4218dc:	4b14      	ldr	r3, [pc, #80]	; (421930 <system_init_flash+0x7c>)
  4218de:	601a      	str	r2, [r3, #0]
  4218e0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4218e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4218e6:	4b12      	ldr	r3, [pc, #72]	; (421930 <system_init_flash+0x7c>)
  4218e8:	601a      	str	r2, [r3, #0]
  4218ea:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4218ec:	4a11      	ldr	r2, [pc, #68]	; (421934 <system_init_flash+0x80>)
  4218ee:	4b10      	ldr	r3, [pc, #64]	; (421930 <system_init_flash+0x7c>)
  4218f0:	601a      	str	r2, [r3, #0]
  4218f2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4218f4:	4a10      	ldr	r2, [pc, #64]	; (421938 <system_init_flash+0x84>)
  4218f6:	4b0e      	ldr	r3, [pc, #56]	; (421930 <system_init_flash+0x7c>)
  4218f8:	601a      	str	r2, [r3, #0]
  4218fa:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4218fc:	4a0f      	ldr	r2, [pc, #60]	; (42193c <system_init_flash+0x88>)
  4218fe:	4b0c      	ldr	r3, [pc, #48]	; (421930 <system_init_flash+0x7c>)
  421900:	601a      	str	r2, [r3, #0]
  421902:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  421904:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  421908:	4b09      	ldr	r3, [pc, #36]	; (421930 <system_init_flash+0x7c>)
  42190a:	601a      	str	r2, [r3, #0]
  42190c:	4770      	bx	lr
  42190e:	bf00      	nop
  421910:	015ef3bf 	.word	0x015ef3bf
  421914:	02bde77f 	.word	0x02bde77f
  421918:	041cdb3f 	.word	0x041cdb3f
  42191c:	057bceff 	.word	0x057bceff
  421920:	06dac2bf 	.word	0x06dac2bf
  421924:	0839b67f 	.word	0x0839b67f
  421928:	04000500 	.word	0x04000500
  42192c:	04000600 	.word	0x04000600
  421930:	400e0c00 	.word	0x400e0c00
  421934:	04000100 	.word	0x04000100
  421938:	04000200 	.word	0x04000200
  42193c:	04000300 	.word	0x04000300

00421940 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  421940:	4b0a      	ldr	r3, [pc, #40]	; (42196c <_sbrk+0x2c>)
  421942:	681b      	ldr	r3, [r3, #0]
  421944:	b153      	cbz	r3, 42195c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  421946:	4b09      	ldr	r3, [pc, #36]	; (42196c <_sbrk+0x2c>)
  421948:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  42194a:	181a      	adds	r2, r3, r0
  42194c:	4908      	ldr	r1, [pc, #32]	; (421970 <_sbrk+0x30>)
  42194e:	4291      	cmp	r1, r2
  421950:	db08      	blt.n	421964 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  421952:	4610      	mov	r0, r2
  421954:	4a05      	ldr	r2, [pc, #20]	; (42196c <_sbrk+0x2c>)
  421956:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  421958:	4618      	mov	r0, r3
  42195a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  42195c:	4a05      	ldr	r2, [pc, #20]	; (421974 <_sbrk+0x34>)
  42195e:	4b03      	ldr	r3, [pc, #12]	; (42196c <_sbrk+0x2c>)
  421960:	601a      	str	r2, [r3, #0]
  421962:	e7f0      	b.n	421946 <_sbrk+0x6>
		return (caddr_t) -1;	
  421964:	f04f 30ff 	mov.w	r0, #4294967295
}
  421968:	4770      	bx	lr
  42196a:	bf00      	nop
  42196c:	2041481c 	.word	0x2041481c
  421970:	2045fffc 	.word	0x2045fffc
  421974:	2043c538 	.word	0x2043c538

00421978 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  421978:	f04f 30ff 	mov.w	r0, #4294967295
  42197c:	4770      	bx	lr

0042197e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  42197e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  421982:	604b      	str	r3, [r1, #4]

	return 0;
}
  421984:	2000      	movs	r0, #0
  421986:	4770      	bx	lr

00421988 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  421988:	2001      	movs	r0, #1
  42198a:	4770      	bx	lr

0042198c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  42198c:	2000      	movs	r0, #0
  42198e:	4770      	bx	lr

00421990 <btn_alarmValue_handler>:
	isOn = !isOn;
  }
}

static void btn_alarmValue_handler(lv_obj_t * obj, lv_event_t event) {
  if(event == LV_EVENT_CLICKED) {
  421990:	2906      	cmp	r1, #6
  421992:	d000      	beq.n	421996 <btn_alarmValue_handler+0x6>
  421994:	4770      	bx	lr
static void btn_alarmValue_handler(lv_obj_t * obj, lv_event_t event) {
  421996:	b508      	push	{r3, lr}
    printf("Clicked\n");
  421998:	4801      	ldr	r0, [pc, #4]	; (4219a0 <btn_alarmValue_handler+0x10>)
  42199a:	4b02      	ldr	r3, [pc, #8]	; (4219a4 <btn_alarmValue_handler+0x14>)
  42199c:	4798      	blx	r3
  42199e:	bd08      	pop	{r3, pc}
  4219a0:	00430760 	.word	0x00430760
  4219a4:	00422a0d 	.word	0x00422a0d

004219a8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4219a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4219aa:	b083      	sub	sp, #12
  4219ac:	4605      	mov	r5, r0
  4219ae:	460c      	mov	r4, r1
	uint32_t val = 0;
  4219b0:	2300      	movs	r3, #0
  4219b2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4219b4:	4b2a      	ldr	r3, [pc, #168]	; (421a60 <usart_serial_getchar+0xb8>)
  4219b6:	4298      	cmp	r0, r3
  4219b8:	d013      	beq.n	4219e2 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4219ba:	4b2a      	ldr	r3, [pc, #168]	; (421a64 <usart_serial_getchar+0xbc>)
  4219bc:	4298      	cmp	r0, r3
  4219be:	d018      	beq.n	4219f2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4219c0:	4b29      	ldr	r3, [pc, #164]	; (421a68 <usart_serial_getchar+0xc0>)
  4219c2:	4298      	cmp	r0, r3
  4219c4:	d01d      	beq.n	421a02 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4219c6:	4b29      	ldr	r3, [pc, #164]	; (421a6c <usart_serial_getchar+0xc4>)
  4219c8:	429d      	cmp	r5, r3
  4219ca:	d022      	beq.n	421a12 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4219cc:	4b28      	ldr	r3, [pc, #160]	; (421a70 <usart_serial_getchar+0xc8>)
  4219ce:	429d      	cmp	r5, r3
  4219d0:	d027      	beq.n	421a22 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4219d2:	4b28      	ldr	r3, [pc, #160]	; (421a74 <usart_serial_getchar+0xcc>)
  4219d4:	429d      	cmp	r5, r3
  4219d6:	d02e      	beq.n	421a36 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4219d8:	4b27      	ldr	r3, [pc, #156]	; (421a78 <usart_serial_getchar+0xd0>)
  4219da:	429d      	cmp	r5, r3
  4219dc:	d035      	beq.n	421a4a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4219de:	b003      	add	sp, #12
  4219e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4219e2:	461f      	mov	r7, r3
  4219e4:	4e25      	ldr	r6, [pc, #148]	; (421a7c <usart_serial_getchar+0xd4>)
  4219e6:	4621      	mov	r1, r4
  4219e8:	4638      	mov	r0, r7
  4219ea:	47b0      	blx	r6
  4219ec:	2800      	cmp	r0, #0
  4219ee:	d1fa      	bne.n	4219e6 <usart_serial_getchar+0x3e>
  4219f0:	e7e9      	b.n	4219c6 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4219f2:	461f      	mov	r7, r3
  4219f4:	4e21      	ldr	r6, [pc, #132]	; (421a7c <usart_serial_getchar+0xd4>)
  4219f6:	4621      	mov	r1, r4
  4219f8:	4638      	mov	r0, r7
  4219fa:	47b0      	blx	r6
  4219fc:	2800      	cmp	r0, #0
  4219fe:	d1fa      	bne.n	4219f6 <usart_serial_getchar+0x4e>
  421a00:	e7e4      	b.n	4219cc <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  421a02:	461f      	mov	r7, r3
  421a04:	4e1d      	ldr	r6, [pc, #116]	; (421a7c <usart_serial_getchar+0xd4>)
  421a06:	4621      	mov	r1, r4
  421a08:	4638      	mov	r0, r7
  421a0a:	47b0      	blx	r6
  421a0c:	2800      	cmp	r0, #0
  421a0e:	d1fa      	bne.n	421a06 <usart_serial_getchar+0x5e>
  421a10:	e7df      	b.n	4219d2 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  421a12:	461f      	mov	r7, r3
  421a14:	4e19      	ldr	r6, [pc, #100]	; (421a7c <usart_serial_getchar+0xd4>)
  421a16:	4621      	mov	r1, r4
  421a18:	4638      	mov	r0, r7
  421a1a:	47b0      	blx	r6
  421a1c:	2800      	cmp	r0, #0
  421a1e:	d1fa      	bne.n	421a16 <usart_serial_getchar+0x6e>
  421a20:	e7da      	b.n	4219d8 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  421a22:	461e      	mov	r6, r3
  421a24:	4d16      	ldr	r5, [pc, #88]	; (421a80 <usart_serial_getchar+0xd8>)
  421a26:	a901      	add	r1, sp, #4
  421a28:	4630      	mov	r0, r6
  421a2a:	47a8      	blx	r5
  421a2c:	2800      	cmp	r0, #0
  421a2e:	d1fa      	bne.n	421a26 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  421a30:	9b01      	ldr	r3, [sp, #4]
  421a32:	7023      	strb	r3, [r4, #0]
  421a34:	e7d3      	b.n	4219de <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  421a36:	461e      	mov	r6, r3
  421a38:	4d11      	ldr	r5, [pc, #68]	; (421a80 <usart_serial_getchar+0xd8>)
  421a3a:	a901      	add	r1, sp, #4
  421a3c:	4630      	mov	r0, r6
  421a3e:	47a8      	blx	r5
  421a40:	2800      	cmp	r0, #0
  421a42:	d1fa      	bne.n	421a3a <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  421a44:	9b01      	ldr	r3, [sp, #4]
  421a46:	7023      	strb	r3, [r4, #0]
  421a48:	e7c9      	b.n	4219de <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  421a4a:	461e      	mov	r6, r3
  421a4c:	4d0c      	ldr	r5, [pc, #48]	; (421a80 <usart_serial_getchar+0xd8>)
  421a4e:	a901      	add	r1, sp, #4
  421a50:	4630      	mov	r0, r6
  421a52:	47a8      	blx	r5
  421a54:	2800      	cmp	r0, #0
  421a56:	d1fa      	bne.n	421a4e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  421a58:	9b01      	ldr	r3, [sp, #4]
  421a5a:	7023      	strb	r3, [r4, #0]
}
  421a5c:	e7bf      	b.n	4219de <usart_serial_getchar+0x36>
  421a5e:	bf00      	nop
  421a60:	400e0800 	.word	0x400e0800
  421a64:	400e0a00 	.word	0x400e0a00
  421a68:	400e1a00 	.word	0x400e1a00
  421a6c:	400e1c00 	.word	0x400e1c00
  421a70:	40024000 	.word	0x40024000
  421a74:	40028000 	.word	0x40028000
  421a78:	4002c000 	.word	0x4002c000
  421a7c:	004215b1 	.word	0x004215b1
  421a80:	004216c7 	.word	0x004216c7

00421a84 <btn_on_handler>:
  if(event == LV_EVENT_LONG_PRESSED) {
  421a84:	2904      	cmp	r1, #4
  421a86:	d000      	beq.n	421a8a <btn_on_handler+0x6>
  421a88:	4770      	bx	lr
static void btn_on_handler(lv_obj_t * obj, lv_event_t event) {
  421a8a:	b508      	push	{r3, lr}
	isOn ? lv_label_set_text(label_butOn, "OFF") : lv_label_set_text(label_butOn, "ON");
  421a8c:	4b0a      	ldr	r3, [pc, #40]	; (421ab8 <btn_on_handler+0x34>)
  421a8e:	781b      	ldrb	r3, [r3, #0]
  421a90:	b15b      	cbz	r3, 421aaa <btn_on_handler+0x26>
  421a92:	490a      	ldr	r1, [pc, #40]	; (421abc <btn_on_handler+0x38>)
  421a94:	4b0a      	ldr	r3, [pc, #40]	; (421ac0 <btn_on_handler+0x3c>)
  421a96:	6818      	ldr	r0, [r3, #0]
  421a98:	4b0a      	ldr	r3, [pc, #40]	; (421ac4 <btn_on_handler+0x40>)
  421a9a:	4798      	blx	r3
	isOn = !isOn;
  421a9c:	4a06      	ldr	r2, [pc, #24]	; (421ab8 <btn_on_handler+0x34>)
  421a9e:	7813      	ldrb	r3, [r2, #0]
  421aa0:	fab3 f383 	clz	r3, r3
  421aa4:	095b      	lsrs	r3, r3, #5
  421aa6:	7013      	strb	r3, [r2, #0]
  421aa8:	bd08      	pop	{r3, pc}
	isOn ? lv_label_set_text(label_butOn, "OFF") : lv_label_set_text(label_butOn, "ON");
  421aaa:	4907      	ldr	r1, [pc, #28]	; (421ac8 <btn_on_handler+0x44>)
  421aac:	4b04      	ldr	r3, [pc, #16]	; (421ac0 <btn_on_handler+0x3c>)
  421aae:	6818      	ldr	r0, [r3, #0]
  421ab0:	4b04      	ldr	r3, [pc, #16]	; (421ac4 <btn_on_handler+0x40>)
  421ab2:	4798      	blx	r3
  421ab4:	e7f2      	b.n	421a9c <btn_on_handler+0x18>
  421ab6:	bf00      	nop
  421ab8:	204000bd 	.word	0x204000bd
  421abc:	0043076c 	.word	0x0043076c
  421ac0:	2043a2f0 	.word	0x2043a2f0
  421ac4:	0041fe75 	.word	0x0041fe75
  421ac8:	00430770 	.word	0x00430770

00421acc <vTimerAfecCallback>:
      p_do = 0;
    }
  }
}

void vTimerAfecCallback( TimerHandle_t xTimer ) {
  421acc:	b510      	push	{r4, lr}
  421ace:	b082      	sub	sp, #8
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  421ad0:	4c0a      	ldr	r4, [pc, #40]	; (421afc <vTimerAfecCallback+0x30>)
  421ad2:	2340      	movs	r3, #64	; 0x40
  421ad4:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  421ad6:	2302      	movs	r3, #2
  421ad8:	6023      	str	r3, [r4, #0]
  afec_channel_enable(AFEC_POT, AFEC_POT_CHANNEL);
  afec_start_software_conversion(AFEC_POT);
  vTaskDelay(10);
  421ada:	200a      	movs	r0, #10
  421adc:	4b08      	ldr	r3, [pc, #32]	; (421b00 <vTimerAfecCallback+0x34>)
  421ade:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  421ae0:	2306      	movs	r3, #6
  421ae2:	6663      	str	r3, [r4, #100]	; 0x64
	return afec->AFEC_CDR;
  421ae4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  int adc = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  421ae6:	a902      	add	r1, sp, #8
  421ae8:	f841 3d04 	str.w	r3, [r1, #-4]!
  xQueueSend(xQueueAdc, &adc, 0);
  421aec:	2300      	movs	r3, #0
  421aee:	461a      	mov	r2, r3
  421af0:	4804      	ldr	r0, [pc, #16]	; (421b04 <vTimerAfecCallback+0x38>)
  421af2:	6800      	ldr	r0, [r0, #0]
  421af4:	4c04      	ldr	r4, [pc, #16]	; (421b08 <vTimerAfecCallback+0x3c>)
  421af6:	47a0      	blx	r4
}
  421af8:	b002      	add	sp, #8
  421afa:	bd10      	pop	{r4, pc}
  421afc:	40064000 	.word	0x40064000
  421b00:	004022fd 	.word	0x004022fd
  421b04:	2043a2dc 	.word	0x2043a2dc
  421b08:	00401659 	.word	0x00401659

00421b0c <my_flush_cb>:

/************************************************************************/
/* port lvgl                                                            */
/************************************************************************/

void my_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p) {
  421b0c:	b570      	push	{r4, r5, r6, lr}
  421b0e:	4605      	mov	r5, r0
  421b10:	460c      	mov	r4, r1
  421b12:	4616      	mov	r6, r2
  ili9341_set_top_left_limit(area->x1, area->y1);   ili9341_set_bottom_right_limit(area->x2, area->y2);
  421b14:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  421b18:	f9b4 0000 	ldrsh.w	r0, [r4]
  421b1c:	4b0d      	ldr	r3, [pc, #52]	; (421b54 <my_flush_cb+0x48>)
  421b1e:	4798      	blx	r3
  421b20:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  421b24:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  421b28:	4b0b      	ldr	r3, [pc, #44]	; (421b58 <my_flush_cb+0x4c>)
  421b2a:	4798      	blx	r3
  ili9341_copy_pixels_to_screen(color_p,  (area->x2 - area->x1) * (area->y2 - area->y1));
  421b2c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  421b30:	f9b4 1000 	ldrsh.w	r1, [r4]
  421b34:	1a5b      	subs	r3, r3, r1
  421b36:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  421b3a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  421b3e:	1a89      	subs	r1, r1, r2
  421b40:	fb01 f103 	mul.w	r1, r1, r3
  421b44:	4630      	mov	r0, r6
  421b46:	4b05      	ldr	r3, [pc, #20]	; (421b5c <my_flush_cb+0x50>)
  421b48:	4798      	blx	r3
  
  /* IMPORTANT!!!
  * Inform the graphics library that you are ready with the flushing*/
  lv_disp_flush_ready(disp_drv);
  421b4a:	4628      	mov	r0, r5
  421b4c:	4b04      	ldr	r3, [pc, #16]	; (421b60 <my_flush_cb+0x54>)
  421b4e:	4798      	blx	r3
  421b50:	bd70      	pop	{r4, r5, r6, pc}
  421b52:	bf00      	nop
  421b54:	004008c1 	.word	0x004008c1
  421b58:	004008e1 	.word	0x004008e1
  421b5c:	00400931 	.word	0x00400931
  421b60:	00414169 	.word	0x00414169

00421b64 <my_input_read>:
}

bool my_input_read(lv_indev_drv_t * drv, lv_indev_data_t*data) {
  421b64:	b510      	push	{r4, lr}
  421b66:	b082      	sub	sp, #8
  421b68:	460c      	mov	r4, r1
  int px, py, pressed;
  
  taskENTER_CRITICAL();
  421b6a:	4b0b      	ldr	r3, [pc, #44]	; (421b98 <my_input_read+0x34>)
  421b6c:	4798      	blx	r3
  if (readPoint(&py, &px)) {
  421b6e:	a901      	add	r1, sp, #4
  421b70:	4668      	mov	r0, sp
  421b72:	4b0a      	ldr	r3, [pc, #40]	; (421b9c <my_input_read+0x38>)
  421b74:	4798      	blx	r3
  421b76:	b960      	cbnz	r0, 421b92 <my_input_read+0x2e>
    data->state = LV_INDEV_STATE_PR;
  }
  else {
    data->state = LV_INDEV_STATE_REL;
  421b78:	2300      	movs	r3, #0
  421b7a:	73a3      	strb	r3, [r4, #14]
  }
  taskEXIT_CRITICAL();
  421b7c:	4b08      	ldr	r3, [pc, #32]	; (421ba0 <my_input_read+0x3c>)
  421b7e:	4798      	blx	r3
  data->point.x = px ;
  421b80:	9b01      	ldr	r3, [sp, #4]
  421b82:	8023      	strh	r3, [r4, #0]
  data->point.y = 320 - py;
  421b84:	9b00      	ldr	r3, [sp, #0]
  421b86:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
  421b8a:	8063      	strh	r3, [r4, #2]
  return false; /*No buffering now so no more data read*/
}
  421b8c:	2000      	movs	r0, #0
  421b8e:	b002      	add	sp, #8
  421b90:	bd10      	pop	{r4, pc}
    data->state = LV_INDEV_STATE_PR;
  421b92:	2301      	movs	r3, #1
  421b94:	73a3      	strb	r3, [r4, #14]
  421b96:	e7f1      	b.n	421b7c <my_input_read+0x18>
  421b98:	00401085 	.word	0x00401085
  421b9c:	00400765 	.word	0x00400765
  421ba0:	004010d1 	.word	0x004010d1

00421ba4 <task_uart>:
static void task_uart(void *pvParameters) {
  421ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
  421ba6:	b083      	sub	sp, #12
  char p_cnt = 0;
  421ba8:	2400      	movs	r4, #0
    if (xQueueReceive( xQueueRx, &c, 1000 )) {
  421baa:	4e10      	ldr	r6, [pc, #64]	; (421bec <task_uart+0x48>)
  421bac:	4d10      	ldr	r5, [pc, #64]	; (421bf0 <task_uart+0x4c>)
		  xSemaphoreGiveFromISR(xSemaphoreAlarm, &xHigherPriorityTaskWoken);
  421bae:	4f11      	ldr	r7, [pc, #68]	; (421bf4 <task_uart+0x50>)
  421bb0:	e000      	b.n	421bb4 <task_uart+0x10>
      p_cnt = 0;
  421bb2:	2400      	movs	r4, #0
    if (xQueueReceive( xQueueRx, &c, 1000 )) {
  421bb4:	2300      	movs	r3, #0
  421bb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  421bba:	f10d 0103 	add.w	r1, sp, #3
  421bbe:	6830      	ldr	r0, [r6, #0]
  421bc0:	47a8      	blx	r5
  421bc2:	2800      	cmp	r0, #0
  421bc4:	d0f6      	beq.n	421bb4 <task_uart+0x10>
        p_cnt = 0;
  421bc6:	2c20      	cmp	r4, #32
  421bc8:	bf28      	it	cs
  421bca:	2400      	movcs	r4, #0
      p_data[p_cnt++] = c;
  421bcc:	3401      	adds	r4, #1
  421bce:	b2e4      	uxtb	r4, r4
  421bd0:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (c == 'X'){
  421bd4:	2b58      	cmp	r3, #88	; 0x58
  421bd6:	d0ec      	beq.n	421bb2 <task_uart+0xe>
      } else if(c == 'C') {
  421bd8:	2b43      	cmp	r3, #67	; 0x43
  421bda:	d1eb      	bne.n	421bb4 <task_uart+0x10>
		  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  421bdc:	a902      	add	r1, sp, #8
  421bde:	2300      	movs	r3, #0
  421be0:	f841 3d04 	str.w	r3, [r1, #-4]!
		  xSemaphoreGiveFromISR(xSemaphoreAlarm, &xHigherPriorityTaskWoken);
  421be4:	6838      	ldr	r0, [r7, #0]
  421be6:	4b04      	ldr	r3, [pc, #16]	; (421bf8 <task_uart+0x54>)
  421be8:	4798      	blx	r3
  421bea:	e7e3      	b.n	421bb4 <task_uart+0x10>
  421bec:	2043a2f4 	.word	0x2043a2f4
  421bf0:	00401a1d 	.word	0x00401a1d
  421bf4:	2043a2e4 	.word	0x2043a2e4
  421bf8:	0040193d 	.word	0x0040193d

00421bfc <task_lcd>:
static void task_lcd(void *pvParameters) {
  421bfc:	b508      	push	{r3, lr}
    lv_tick_inc(50);
  421bfe:	2432      	movs	r4, #50	; 0x32
  421c00:	4e04      	ldr	r6, [pc, #16]	; (421c14 <task_lcd+0x18>)
    lv_task_handler();
  421c02:	4d05      	ldr	r5, [pc, #20]	; (421c18 <task_lcd+0x1c>)
    lv_tick_inc(50);
  421c04:	4620      	mov	r0, r4
  421c06:	47b0      	blx	r6
    lv_task_handler();
  421c08:	47a8      	blx	r5
    vTaskDelay(50);
  421c0a:	4620      	mov	r0, r4
  421c0c:	4b03      	ldr	r3, [pc, #12]	; (421c1c <task_lcd+0x20>)
  421c0e:	4798      	blx	r3
  421c10:	e7f8      	b.n	421c04 <task_lcd+0x8>
  421c12:	bf00      	nop
  421c14:	0041447d 	.word	0x0041447d
  421c18:	00416ab9 	.word	0x00416ab9
  421c1c:	004022fd 	.word	0x004022fd

00421c20 <usart_serial_putchar>:
{
  421c20:	b570      	push	{r4, r5, r6, lr}
  421c22:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  421c24:	4b2a      	ldr	r3, [pc, #168]	; (421cd0 <usart_serial_putchar+0xb0>)
  421c26:	4298      	cmp	r0, r3
  421c28:	d013      	beq.n	421c52 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  421c2a:	4b2a      	ldr	r3, [pc, #168]	; (421cd4 <usart_serial_putchar+0xb4>)
  421c2c:	4298      	cmp	r0, r3
  421c2e:	d019      	beq.n	421c64 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  421c30:	4b29      	ldr	r3, [pc, #164]	; (421cd8 <usart_serial_putchar+0xb8>)
  421c32:	4298      	cmp	r0, r3
  421c34:	d01f      	beq.n	421c76 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  421c36:	4b29      	ldr	r3, [pc, #164]	; (421cdc <usart_serial_putchar+0xbc>)
  421c38:	4298      	cmp	r0, r3
  421c3a:	d025      	beq.n	421c88 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  421c3c:	4b28      	ldr	r3, [pc, #160]	; (421ce0 <usart_serial_putchar+0xc0>)
  421c3e:	4298      	cmp	r0, r3
  421c40:	d02b      	beq.n	421c9a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  421c42:	4b28      	ldr	r3, [pc, #160]	; (421ce4 <usart_serial_putchar+0xc4>)
  421c44:	4298      	cmp	r0, r3
  421c46:	d031      	beq.n	421cac <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  421c48:	4b27      	ldr	r3, [pc, #156]	; (421ce8 <usart_serial_putchar+0xc8>)
  421c4a:	4298      	cmp	r0, r3
  421c4c:	d037      	beq.n	421cbe <usart_serial_putchar+0x9e>
	return 0;
  421c4e:	2000      	movs	r0, #0
}
  421c50:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  421c52:	461e      	mov	r6, r3
  421c54:	4d25      	ldr	r5, [pc, #148]	; (421cec <usart_serial_putchar+0xcc>)
  421c56:	4621      	mov	r1, r4
  421c58:	4630      	mov	r0, r6
  421c5a:	47a8      	blx	r5
  421c5c:	2800      	cmp	r0, #0
  421c5e:	d1fa      	bne.n	421c56 <usart_serial_putchar+0x36>
		return 1;
  421c60:	2001      	movs	r0, #1
  421c62:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  421c64:	461e      	mov	r6, r3
  421c66:	4d21      	ldr	r5, [pc, #132]	; (421cec <usart_serial_putchar+0xcc>)
  421c68:	4621      	mov	r1, r4
  421c6a:	4630      	mov	r0, r6
  421c6c:	47a8      	blx	r5
  421c6e:	2800      	cmp	r0, #0
  421c70:	d1fa      	bne.n	421c68 <usart_serial_putchar+0x48>
		return 1;
  421c72:	2001      	movs	r0, #1
  421c74:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  421c76:	461e      	mov	r6, r3
  421c78:	4d1c      	ldr	r5, [pc, #112]	; (421cec <usart_serial_putchar+0xcc>)
  421c7a:	4621      	mov	r1, r4
  421c7c:	4630      	mov	r0, r6
  421c7e:	47a8      	blx	r5
  421c80:	2800      	cmp	r0, #0
  421c82:	d1fa      	bne.n	421c7a <usart_serial_putchar+0x5a>
		return 1;
  421c84:	2001      	movs	r0, #1
  421c86:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  421c88:	461e      	mov	r6, r3
  421c8a:	4d18      	ldr	r5, [pc, #96]	; (421cec <usart_serial_putchar+0xcc>)
  421c8c:	4621      	mov	r1, r4
  421c8e:	4630      	mov	r0, r6
  421c90:	47a8      	blx	r5
  421c92:	2800      	cmp	r0, #0
  421c94:	d1fa      	bne.n	421c8c <usart_serial_putchar+0x6c>
		return 1;
  421c96:	2001      	movs	r0, #1
  421c98:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  421c9a:	461e      	mov	r6, r3
  421c9c:	4d14      	ldr	r5, [pc, #80]	; (421cf0 <usart_serial_putchar+0xd0>)
  421c9e:	4621      	mov	r1, r4
  421ca0:	4630      	mov	r0, r6
  421ca2:	47a8      	blx	r5
  421ca4:	2800      	cmp	r0, #0
  421ca6:	d1fa      	bne.n	421c9e <usart_serial_putchar+0x7e>
		return 1;
  421ca8:	2001      	movs	r0, #1
  421caa:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  421cac:	461e      	mov	r6, r3
  421cae:	4d10      	ldr	r5, [pc, #64]	; (421cf0 <usart_serial_putchar+0xd0>)
  421cb0:	4621      	mov	r1, r4
  421cb2:	4630      	mov	r0, r6
  421cb4:	47a8      	blx	r5
  421cb6:	2800      	cmp	r0, #0
  421cb8:	d1fa      	bne.n	421cb0 <usart_serial_putchar+0x90>
		return 1;
  421cba:	2001      	movs	r0, #1
  421cbc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  421cbe:	461e      	mov	r6, r3
  421cc0:	4d0b      	ldr	r5, [pc, #44]	; (421cf0 <usart_serial_putchar+0xd0>)
  421cc2:	4621      	mov	r1, r4
  421cc4:	4630      	mov	r0, r6
  421cc6:	47a8      	blx	r5
  421cc8:	2800      	cmp	r0, #0
  421cca:	d1fa      	bne.n	421cc2 <usart_serial_putchar+0xa2>
		return 1;
  421ccc:	2001      	movs	r0, #1
  421cce:	bd70      	pop	{r4, r5, r6, pc}
  421cd0:	400e0800 	.word	0x400e0800
  421cd4:	400e0a00 	.word	0x400e0a00
  421cd8:	400e1a00 	.word	0x400e1a00
  421cdc:	400e1c00 	.word	0x400e1c00
  421ce0:	40024000 	.word	0x40024000
  421ce4:	40028000 	.word	0x40028000
  421ce8:	4002c000 	.word	0x4002c000
  421cec:	0042159f 	.word	0x0042159f
  421cf0:	004216b1 	.word	0x004216b1

00421cf4 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  421cf4:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  421cf6:	460a      	mov	r2, r1
  421cf8:	4601      	mov	r1, r0
  421cfa:	4802      	ldr	r0, [pc, #8]	; (421d04 <vApplicationStackOverflowHook+0x10>)
  421cfc:	4b02      	ldr	r3, [pc, #8]	; (421d08 <vApplicationStackOverflowHook+0x14>)
  421cfe:	4798      	blx	r3
  421d00:	e7fe      	b.n	421d00 <vApplicationStackOverflowHook+0xc>
  421d02:	bf00      	nop
  421d04:	0043086c 	.word	0x0043086c
  421d08:	00422a0d 	.word	0x00422a0d

00421d0c <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  421d0c:	4770      	bx	lr

00421d0e <vApplicationMallocFailedHook>:
  421d0e:	f04f 0380 	mov.w	r3, #128	; 0x80
  421d12:	b672      	cpsid	i
  421d14:	f383 8811 	msr	BASEPRI, r3
  421d18:	f3bf 8f6f 	isb	sy
  421d1c:	f3bf 8f4f 	dsb	sy
  421d20:	b662      	cpsie	i
  421d22:	e7fe      	b.n	421d22 <vApplicationMallocFailedHook+0x14>

00421d24 <USART1_Handler>:
void USART1_Handler(void){
  421d24:	b570      	push	{r4, r5, r6, lr}
  421d26:	b084      	sub	sp, #16
  uint32_t ret = usart_get_status(CONSOLE_UART);
  421d28:	4810      	ldr	r0, [pc, #64]	; (421d6c <USART1_Handler+0x48>)
  421d2a:	4b11      	ldr	r3, [pc, #68]	; (421d70 <USART1_Handler+0x4c>)
  421d2c:	4798      	blx	r3
  BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  421d2e:	2301      	movs	r3, #1
  421d30:	9303      	str	r3, [sp, #12]
  if(ret & US_IER_RXRDY){
  421d32:	f010 0f01 	tst.w	r0, #1
  421d36:	d101      	bne.n	421d3c <USART1_Handler+0x18>
}
  421d38:	b004      	add	sp, #16
  421d3a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t val = 0;
  421d3c:	ac04      	add	r4, sp, #16
  421d3e:	2300      	movs	r3, #0
  421d40:	f844 3d0c 	str.w	r3, [r4, #-12]!
		while (usart_read(p_usart, &val));
  421d44:	4e09      	ldr	r6, [pc, #36]	; (421d6c <USART1_Handler+0x48>)
  421d46:	4d0b      	ldr	r5, [pc, #44]	; (421d74 <USART1_Handler+0x50>)
  421d48:	4621      	mov	r1, r4
  421d4a:	4630      	mov	r0, r6
  421d4c:	47a8      	blx	r5
  421d4e:	2800      	cmp	r0, #0
  421d50:	d1fa      	bne.n	421d48 <USART1_Handler+0x24>
		*data = (uint8_t)(val & 0xFF);
  421d52:	9b01      	ldr	r3, [sp, #4]
  421d54:	f88d 300b 	strb.w	r3, [sp, #11]
    xQueueSendFromISR(xQueueRx, (void *) &c, &xHigherPriorityTaskWoken);
  421d58:	2300      	movs	r3, #0
  421d5a:	aa03      	add	r2, sp, #12
  421d5c:	f10d 010b 	add.w	r1, sp, #11
  421d60:	4805      	ldr	r0, [pc, #20]	; (421d78 <USART1_Handler+0x54>)
  421d62:	6800      	ldr	r0, [r0, #0]
  421d64:	4c05      	ldr	r4, [pc, #20]	; (421d7c <USART1_Handler+0x58>)
  421d66:	47a0      	blx	r4
}
  421d68:	e7e6      	b.n	421d38 <USART1_Handler+0x14>
  421d6a:	bf00      	nop
  421d6c:	40028000 	.word	0x40028000
  421d70:	004216ad 	.word	0x004216ad
  421d74:	004216c7 	.word	0x004216c7
  421d78:	2043a2f4 	.word	0x2043a2f4
  421d7c:	0040183d 	.word	0x0040183d

00421d80 <lv_create_head>:
void lv_create_head(void) {
  421d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421d84:	b083      	sub	sp, #12
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
  421d86:	4b35      	ldr	r3, [pc, #212]	; (421e5c <lv_create_head+0xdc>)
  421d88:	4798      	blx	r3
  421d8a:	4b35      	ldr	r3, [pc, #212]	; (421e60 <lv_create_head+0xe0>)
  421d8c:	4798      	blx	r3
  lv_obj_t * btn_on = lv_btn_create(lv_scr_act(), NULL);
  421d8e:	2100      	movs	r1, #0
  421d90:	f8df 9104 	ldr.w	r9, [pc, #260]	; 421e98 <lv_create_head+0x118>
  421d94:	47c8      	blx	r9
  421d96:	4605      	mov	r5, r0
  lv_obj_set_event_cb(btn_on, btn_on_handler);
  421d98:	4932      	ldr	r1, [pc, #200]	; (421e64 <lv_create_head+0xe4>)
  421d9a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 421e9c <lv_create_head+0x11c>
  421d9e:	47c0      	blx	r8
  lv_obj_align(btn_on, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
  421da0:	2400      	movs	r4, #0
  421da2:	9400      	str	r4, [sp, #0]
  421da4:	4623      	mov	r3, r4
  421da6:	2201      	movs	r2, #1
  421da8:	4621      	mov	r1, r4
  421daa:	4628      	mov	r0, r5
  421dac:	4e2e      	ldr	r6, [pc, #184]	; (421e68 <lv_create_head+0xe8>)
  421dae:	47b0      	blx	r6
  lv_obj_set_size(btn_on, 105, 105);
  421db0:	2269      	movs	r2, #105	; 0x69
  421db2:	4611      	mov	r1, r2
  421db4:	4628      	mov	r0, r5
  421db6:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 421ea0 <lv_create_head+0x120>
  421dba:	47d8      	blx	fp
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  421dbc:	4623      	mov	r3, r4
  421dbe:	2201      	movs	r2, #1
  421dc0:	4621      	mov	r1, r4
  421dc2:	4628      	mov	r0, r5
  421dc4:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 421ea4 <lv_create_head+0x124>
  421dc8:	47d0      	blx	sl
  label_butOn = lv_label_create(btn_on, NULL);
  421dca:	4621      	mov	r1, r4
  421dcc:	4628      	mov	r0, r5
  421dce:	4f27      	ldr	r7, [pc, #156]	; (421e6c <lv_create_head+0xec>)
  421dd0:	47b8      	blx	r7
  421dd2:	4e27      	ldr	r6, [pc, #156]	; (421e70 <lv_create_head+0xf0>)
  421dd4:	6030      	str	r0, [r6, #0]
  lv_label_set_text(label_butOn, "ON");
  421dd6:	4927      	ldr	r1, [pc, #156]	; (421e74 <lv_create_head+0xf4>)
  421dd8:	4b27      	ldr	r3, [pc, #156]	; (421e78 <lv_create_head+0xf8>)
  421dda:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  421ddc:	4b27      	ldr	r3, [pc, #156]	; (421e7c <lv_create_head+0xfc>)
  421dde:	f248 028e 	movw	r2, #32910	; 0x808e
  421de2:	4621      	mov	r1, r4
  421de4:	6830      	ldr	r0, [r6, #0]
  421de6:	4e26      	ldr	r6, [pc, #152]	; (421e80 <lv_create_head+0x100>)
  421de8:	47b0      	blx	r6
  421dea:	4b1c      	ldr	r3, [pc, #112]	; (421e5c <lv_create_head+0xdc>)
  421dec:	4798      	blx	r3
  421dee:	4b1c      	ldr	r3, [pc, #112]	; (421e60 <lv_create_head+0xe0>)
  421df0:	4798      	blx	r3
  lv_obj_t * btn_alarmValur = lv_btn_create(lv_scr_act(), NULL);
  421df2:	4621      	mov	r1, r4
  421df4:	47c8      	blx	r9
  421df6:	4681      	mov	r9, r0
  lv_obj_set_event_cb(btn_alarmValur, btn_alarmValue_handler);
  421df8:	4922      	ldr	r1, [pc, #136]	; (421e84 <lv_create_head+0x104>)
  421dfa:	47c0      	blx	r8
  lv_obj_align(btn_alarmValur, NULL, LV_ALIGN_IN_TOP_RIGHT, +50, 0);
  421dfc:	9400      	str	r4, [sp, #0]
  421dfe:	2332      	movs	r3, #50	; 0x32
  421e00:	2203      	movs	r2, #3
  421e02:	4621      	mov	r1, r4
  421e04:	4648      	mov	r0, r9
  421e06:	4d18      	ldr	r5, [pc, #96]	; (421e68 <lv_create_head+0xe8>)
  421e08:	47a8      	blx	r5
  lv_obj_set_size(btn_alarmValur, 105, 105);
  421e0a:	2269      	movs	r2, #105	; 0x69
  421e0c:	4611      	mov	r1, r2
  421e0e:	4648      	mov	r0, r9
  421e10:	47d8      	blx	fp
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  421e12:	4623      	mov	r3, r4
  421e14:	2201      	movs	r2, #1
  421e16:	4621      	mov	r1, r4
  421e18:	4648      	mov	r0, r9
  421e1a:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  421e1c:	234c      	movs	r3, #76	; 0x4c
  421e1e:	222c      	movs	r2, #44	; 0x2c
  421e20:	4621      	mov	r1, r4
  421e22:	4648      	mov	r0, r9
  421e24:	f8df 8080 	ldr.w	r8, [pc, #128]	; 421ea8 <lv_create_head+0x128>
  421e28:	47c0      	blx	r8
  label_alarmValue = lv_label_create(btn_alarmValur, NULL);
  421e2a:	4621      	mov	r1, r4
  421e2c:	4648      	mov	r0, r9
  421e2e:	47b8      	blx	r7
  421e30:	4f15      	ldr	r7, [pc, #84]	; (421e88 <lv_create_head+0x108>)
  421e32:	6038      	str	r0, [r7, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  421e34:	4b11      	ldr	r3, [pc, #68]	; (421e7c <lv_create_head+0xfc>)
  421e36:	f248 028e 	movw	r2, #32910	; 0x808e
  421e3a:	4621      	mov	r1, r4
  421e3c:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  421e3e:	4b13      	ldr	r3, [pc, #76]	; (421e8c <lv_create_head+0x10c>)
  421e40:	881b      	ldrh	r3, [r3, #0]
  421e42:	f248 0289 	movw	r2, #32905	; 0x8089
  421e46:	4621      	mov	r1, r4
  421e48:	6838      	ldr	r0, [r7, #0]
  421e4a:	4c11      	ldr	r4, [pc, #68]	; (421e90 <lv_create_head+0x110>)
  421e4c:	47a0      	blx	r4
  lv_label_set_text(label_alarmValue, "ALARME \n < 2000");
  421e4e:	4911      	ldr	r1, [pc, #68]	; (421e94 <lv_create_head+0x114>)
  421e50:	6838      	ldr	r0, [r7, #0]
  421e52:	4b09      	ldr	r3, [pc, #36]	; (421e78 <lv_create_head+0xf8>)
  421e54:	4798      	blx	r3
}
  421e56:	b003      	add	sp, #12
  421e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421e5c:	004140a1 	.word	0x004140a1
  421e60:	00402db5 	.word	0x00402db5
  421e64:	00421a85 	.word	0x00421a85
  421e68:	00405801 	.word	0x00405801
  421e6c:	00420169 	.word	0x00420169
  421e70:	2043a2f0 	.word	0x2043a2f0
  421e74:	00430770 	.word	0x00430770
  421e78:	0041fe75 	.word	0x0041fe75
  421e7c:	2040005c 	.word	0x2040005c
  421e80:	00406f25 	.word	0x00406f25
  421e84:	00421991 	.word	0x00421991
  421e88:	2043a2ec 	.word	0x2043a2ec
  421e8c:	0043073c 	.word	0x0043073c
  421e90:	00406ea5 	.word	0x00406ea5
  421e94:	00430784 	.word	0x00430784
  421e98:	0041ca3d 	.word	0x0041ca3d
  421e9c:	00404da9 	.word	0x00404da9
  421ea0:	004061cd 	.word	0x004061cd
  421ea4:	00406e65 	.word	0x00406e65
  421ea8:	00406ee5 	.word	0x00406ee5

00421eac <lv_create_alarm>:
void lv_create_alarm(void) {
  421eac:	b510      	push	{r4, lr}
  421eae:	b082      	sub	sp, #8
  421eb0:	4b0d      	ldr	r3, [pc, #52]	; (421ee8 <lv_create_alarm+0x3c>)
  421eb2:	4798      	blx	r3
  421eb4:	4b0d      	ldr	r3, [pc, #52]	; (421eec <lv_create_alarm+0x40>)
  421eb6:	4798      	blx	r3
  mbox_alarm = lv_msgbox_create(lv_scr_act(), NULL);
  421eb8:	2100      	movs	r1, #0
  421eba:	4b0d      	ldr	r3, [pc, #52]	; (421ef0 <lv_create_alarm+0x44>)
  421ebc:	4798      	blx	r3
  421ebe:	4c0d      	ldr	r4, [pc, #52]	; (421ef4 <lv_create_alarm+0x48>)
  421ec0:	6020      	str	r0, [r4, #0]
  lv_msgbox_set_text(mbox_alarm, "Alarme ativado!");
  421ec2:	490d      	ldr	r1, [pc, #52]	; (421ef8 <lv_create_alarm+0x4c>)
  421ec4:	4b0d      	ldr	r3, [pc, #52]	; (421efc <lv_create_alarm+0x50>)
  421ec6:	4798      	blx	r3
  lv_obj_set_size(mbox_alarm, 200, 300);
  421ec8:	f44f 7296 	mov.w	r2, #300	; 0x12c
  421ecc:	21c8      	movs	r1, #200	; 0xc8
  421ece:	6820      	ldr	r0, [r4, #0]
  421ed0:	4b0b      	ldr	r3, [pc, #44]	; (421f00 <lv_create_alarm+0x54>)
  421ed2:	4798      	blx	r3
  lv_obj_align(mbox_alarm, NULL, LV_ALIGN_CENTER, 0, 0);
  421ed4:	6820      	ldr	r0, [r4, #0]
  421ed6:	2100      	movs	r1, #0
  421ed8:	9100      	str	r1, [sp, #0]
  421eda:	460b      	mov	r3, r1
  421edc:	460a      	mov	r2, r1
  421ede:	4c09      	ldr	r4, [pc, #36]	; (421f04 <lv_create_alarm+0x58>)
  421ee0:	47a0      	blx	r4
}
  421ee2:	b002      	add	sp, #8
  421ee4:	bd10      	pop	{r4, pc}
  421ee6:	bf00      	nop
  421ee8:	004140a1 	.word	0x004140a1
  421eec:	00402db5 	.word	0x00402db5
  421ef0:	004206ed 	.word	0x004206ed
  421ef4:	2043a2f8 	.word	0x2043a2f8
  421ef8:	00430774 	.word	0x00430774
  421efc:	004208ed 	.word	0x004208ed
  421f00:	004061cd 	.word	0x004061cd
  421f04:	00405801 	.word	0x00405801

00421f08 <lv_create_list>:
void lv_create_list(void) {
  421f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421f0c:	b083      	sub	sp, #12
  421f0e:	4b32      	ldr	r3, [pc, #200]	; (421fd8 <lv_create_list+0xd0>)
  421f10:	4798      	blx	r3
  421f12:	4b32      	ldr	r3, [pc, #200]	; (421fdc <lv_create_list+0xd4>)
  421f14:	4798      	blx	r3
  cont = lv_cont_create(lv_scr_act(), NULL);
  421f16:	2100      	movs	r1, #0
  421f18:	4b31      	ldr	r3, [pc, #196]	; (421fe0 <lv_create_list+0xd8>)
  421f1a:	4798      	blx	r3
  421f1c:	4680      	mov	r8, r0
#endif

static inline void lv_obj_align_origo(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs,
                                      lv_coord_t y_ofs)
{
    lv_obj_align_mid(obj, base, align, x_ofs, y_ofs);
  421f1e:	2400      	movs	r4, #0
  421f20:	9400      	str	r4, [sp, #0]
  421f22:	4623      	mov	r3, r4
  421f24:	4622      	mov	r2, r4
  421f26:	4621      	mov	r1, r4
  421f28:	4d2e      	ldr	r5, [pc, #184]	; (421fe4 <lv_create_list+0xdc>)
  421f2a:	47a8      	blx	r5
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
  421f2c:	9400      	str	r4, [sp, #0]
  421f2e:	4623      	mov	r3, r4
  421f30:	4622      	mov	r2, r4
  421f32:	4621      	mov	r1, r4
  421f34:	4640      	mov	r0, r8
  421f36:	4f2c      	ldr	r7, [pc, #176]	; (421fe8 <lv_create_list+0xe0>)
  421f38:	47b8      	blx	r7
  lv_obj_set_size(cont, 240, 190);
  421f3a:	22be      	movs	r2, #190	; 0xbe
  421f3c:	21f0      	movs	r1, #240	; 0xf0
  421f3e:	4640      	mov	r0, r8
  421f40:	4b2a      	ldr	r3, [pc, #168]	; (421fec <lv_create_list+0xe4>)
  421f42:	4798      	blx	r3
  lv_cont_set_layout(cont, LV_LAYOUT_COLUMN_MID);
  421f44:	2103      	movs	r1, #3
  421f46:	4640      	mov	r0, r8
  421f48:	4b29      	ldr	r3, [pc, #164]	; (421ff0 <lv_create_list+0xe8>)
  421f4a:	4798      	blx	r3
  421f4c:	9400      	str	r4, [sp, #0]
  421f4e:	4623      	mov	r3, r4
  421f50:	4622      	mov	r2, r4
  421f52:	4621      	mov	r1, r4
  421f54:	4640      	mov	r0, r8
  421f56:	47a8      	blx	r5
  lv_obj_align(cont, NULL, LV_ALIGN_IN_TOP_MID, 0, 120);
  421f58:	2378      	movs	r3, #120	; 0x78
  421f5a:	9300      	str	r3, [sp, #0]
  421f5c:	4623      	mov	r3, r4
  421f5e:	2202      	movs	r2, #2
  421f60:	4621      	mov	r1, r4
  421f62:	4640      	mov	r0, r8
  421f64:	4d23      	ldr	r5, [pc, #140]	; (421ff4 <lv_create_list+0xec>)
  421f66:	47a8      	blx	r5
  421f68:	4d23      	ldr	r5, [pc, #140]	; (421ff8 <lv_create_list+0xf0>)
    label_list[i] = lv_label_create(cont, NULL);
  421f6a:	4627      	mov	r7, r4
  421f6c:	f8df b098 	ldr.w	fp, [pc, #152]	; 422008 <lv_create_list+0x100>
  421f70:	4639      	mov	r1, r7
  421f72:	4640      	mov	r0, r8
  421f74:	47d8      	blx	fp
  421f76:	46a9      	mov	r9, r5
  421f78:	6028      	str	r0, [r5, #0]
    lv_label_set_text_fmt(label_list[i], "%d: HH:MM:SS - valor", i);
  421f7a:	4622      	mov	r2, r4
  421f7c:	491f      	ldr	r1, [pc, #124]	; (421ffc <lv_create_list+0xf4>)
  421f7e:	4b20      	ldr	r3, [pc, #128]	; (422000 <lv_create_list+0xf8>)
  421f80:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  421f82:	4b20      	ldr	r3, [pc, #128]	; (422004 <lv_create_list+0xfc>)
  421f84:	f248 028e 	movw	r2, #32910	; 0x808e
  421f88:	4639      	mov	r1, r7
  421f8a:	6828      	ldr	r0, [r5, #0]
  421f8c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 42200c <lv_create_list+0x104>
  421f90:	47d0      	blx	sl
    lv_obj_set_size(label_list[i], 240, 40);
  421f92:	2228      	movs	r2, #40	; 0x28
  421f94:	21f0      	movs	r1, #240	; 0xf0
  421f96:	6828      	ldr	r0, [r5, #0]
  421f98:	4b14      	ldr	r3, [pc, #80]	; (421fec <lv_create_list+0xe4>)
  421f9a:	4798      	blx	r3
  421f9c:	f36f 0602 	bfc	r6, #0, #3
  421fa0:	f046 06f8 	orr.w	r6, r6, #248	; 0xf8
  421fa4:	f36f 260c 	bfc	r6, #8, #5
  421fa8:	f36f 364f 	bfc	r6, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  421fac:	4633      	mov	r3, r6
  421fae:	2229      	movs	r2, #41	; 0x29
  421fb0:	4639      	mov	r1, r7
  421fb2:	f855 0b04 	ldr.w	r0, [r5], #4
  421fb6:	f8df a058 	ldr.w	sl, [pc, #88]	; 422010 <lv_create_list+0x108>
  421fba:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  421fbc:	23ff      	movs	r3, #255	; 0xff
  421fbe:	222c      	movs	r2, #44	; 0x2c
  421fc0:	4639      	mov	r1, r7
  421fc2:	f8d9 0000 	ldr.w	r0, [r9]
  421fc6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 422014 <lv_create_list+0x10c>
  421fca:	47c8      	blx	r9
  for (int i = 0; i<LIST_LEN; i++ ){
  421fcc:	3401      	adds	r4, #1
  421fce:	2c05      	cmp	r4, #5
  421fd0:	d1ce      	bne.n	421f70 <lv_create_list+0x68>
}
  421fd2:	b003      	add	sp, #12
  421fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421fd8:	004140a1 	.word	0x004140a1
  421fdc:	00402db5 	.word	0x00402db5
  421fe0:	0041e515 	.word	0x0041e515
  421fe4:	00405b81 	.word	0x00405b81
  421fe8:	0041e691 	.word	0x0041e691
  421fec:	004061cd 	.word	0x004061cd
  421ff0:	0041e645 	.word	0x0041e645
  421ff4:	00405801 	.word	0x00405801
  421ff8:	2043a2fc 	.word	0x2043a2fc
  421ffc:	00430794 	.word	0x00430794
  422000:	0041ff71 	.word	0x0041ff71
  422004:	2040002c 	.word	0x2040002c
  422008:	00420169 	.word	0x00420169
  42200c:	00406f25 	.word	0x00406f25
  422010:	00406ea5 	.word	0x00406ea5
  422014:	00406ee5 	.word	0x00406ee5

00422018 <slice_str>:
{
  422018:	b470      	push	{r4, r5, r6}
	for ( size_t i = start; i <= end; ++i ) {
  42201a:	429a      	cmp	r2, r3
  42201c:	d80e      	bhi.n	42203c <slice_str+0x24>
  42201e:	4410      	add	r0, r2
  422020:	1e4d      	subs	r5, r1, #1
  422022:	2400      	movs	r4, #0
		buffer[j++] = str[i];
  422024:	3401      	adds	r4, #1
  422026:	f810 6b01 	ldrb.w	r6, [r0], #1
  42202a:	f805 6f01 	strb.w	r6, [r5, #1]!
	for ( size_t i = start; i <= end; ++i ) {
  42202e:	3201      	adds	r2, #1
  422030:	4293      	cmp	r3, r2
  422032:	d2f7      	bcs.n	422024 <slice_str+0xc>
	buffer[j] = 0;
  422034:	2300      	movs	r3, #0
  422036:	550b      	strb	r3, [r1, r4]
}
  422038:	bc70      	pop	{r4, r5, r6}
  42203a:	4770      	bx	lr
	size_t j = 0;
  42203c:	2400      	movs	r4, #0
  42203e:	e7f9      	b.n	422034 <slice_str+0x1c>

00422040 <task_main>:
static void task_main(void *pvParameters) {
  422040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  422044:	b0a1      	sub	sp, #132	; 0x84
  lv_create_head();
  422046:	4b57      	ldr	r3, [pc, #348]	; (4221a4 <task_main+0x164>)
  422048:	4798      	blx	r3
  lv_create_list();
  42204a:	4b57      	ldr	r3, [pc, #348]	; (4221a8 <task_main+0x168>)
  42204c:	4798      	blx	r3
	if(alarm_cnt == 5) {
  42204e:	4f57      	ldr	r7, [pc, #348]	; (4221ac <task_main+0x16c>)
	else if (xQueueReceiveFromISR( xQueueDados, &(xQueueData), ( TickType_t )  4000 / portTICK_PERIOD_MS) == pdTRUE) {
  422050:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 4221f8 <task_main+0x1b8>
  422054:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 4221fc <task_main+0x1bc>
  422058:	e00d      	b.n	422076 <task_main+0x36>
		if(alarm_create) {
  42205a:	4b55      	ldr	r3, [pc, #340]	; (4221b0 <task_main+0x170>)
  42205c:	781b      	ldrb	r3, [r3, #0]
  42205e:	2b00      	cmp	r3, #0
  422060:	d16b      	bne.n	42213a <task_main+0xfa>
		if(xSemaphoreTake(xSemaphoreAlarm, ( TickType_t ) 500 / portTICK_PERIOD_MS) == pdTRUE) {
  422062:	2300      	movs	r3, #0
  422064:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  422068:	4619      	mov	r1, r3
  42206a:	4852      	ldr	r0, [pc, #328]	; (4221b4 <task_main+0x174>)
  42206c:	6800      	ldr	r0, [r0, #0]
  42206e:	4c52      	ldr	r4, [pc, #328]	; (4221b8 <task_main+0x178>)
  422070:	47a0      	blx	r4
  422072:	2801      	cmp	r0, #1
  422074:	d067      	beq.n	422146 <task_main+0x106>
	if(alarm_cnt == 5) {
  422076:	683b      	ldr	r3, [r7, #0]
  422078:	2b05      	cmp	r3, #5
  42207a:	d0ee      	beq.n	42205a <task_main+0x1a>
	else if (xQueueReceiveFromISR( xQueueDados, &(xQueueData), ( TickType_t )  4000 / portTICK_PERIOD_MS) == pdTRUE) {
  42207c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
  422080:	a91c      	add	r1, sp, #112	; 0x70
  422082:	f8d8 0000 	ldr.w	r0, [r8]
  422086:	47c8      	blx	r9
  422088:	2801      	cmp	r0, #1
  42208a:	d1f4      	bne.n	422076 <task_main+0x36>
		if(isOn) {
  42208c:	4b4b      	ldr	r3, [pc, #300]	; (4221bc <task_main+0x17c>)
  42208e:	781b      	ldrb	r3, [r3, #0]
  422090:	2b00      	cmp	r3, #0
  422092:	d0f0      	beq.n	422076 <task_main+0x36>
  422094:	4c4a      	ldr	r4, [pc, #296]	; (4221c0 <task_main+0x180>)
  422096:	2504      	movs	r5, #4
					char * last_label = malloc(sizeof(char) * 20);
  422098:	f8df b164 	ldr.w	fp, [pc, #356]	; 422200 <task_main+0x1c0>
					strcpy(last_label, lv_label_get_text(label_list[i-1]));
  42209c:	f8df a164 	ldr.w	sl, [pc, #356]	; 422204 <task_main+0x1c4>
					char * last_label = malloc(sizeof(char) * 20);
  4220a0:	2014      	movs	r0, #20
  4220a2:	47d8      	blx	fp
  4220a4:	4606      	mov	r6, r0
					strcpy(last_label, lv_label_get_text(label_list[i-1]));
  4220a6:	f854 0c04 	ldr.w	r0, [r4, #-4]
  4220aa:	47d0      	blx	sl
  4220ac:	4601      	mov	r1, r0
  4220ae:	4630      	mov	r0, r6
  4220b0:	4b44      	ldr	r3, [pc, #272]	; (4221c4 <task_main+0x184>)
  4220b2:	4798      	blx	r3
					slice_str(last_label, buffer, 1, strlen(last_label) - 1);
  4220b4:	4630      	mov	r0, r6
  4220b6:	4b44      	ldr	r3, [pc, #272]	; (4221c8 <task_main+0x188>)
  4220b8:	4798      	blx	r3
  4220ba:	1e43      	subs	r3, r0, #1
  4220bc:	2201      	movs	r2, #1
  4220be:	a908      	add	r1, sp, #32
  4220c0:	4630      	mov	r0, r6
  4220c2:	4e42      	ldr	r6, [pc, #264]	; (4221cc <task_main+0x18c>)
  4220c4:	47b0      	blx	r6
					lv_label_set_text_fmt(label_list[i], "%d%s", i, buffer);
  4220c6:	ab08      	add	r3, sp, #32
  4220c8:	462a      	mov	r2, r5
  4220ca:	4941      	ldr	r1, [pc, #260]	; (4221d0 <task_main+0x190>)
  4220cc:	6820      	ldr	r0, [r4, #0]
  4220ce:	4e41      	ldr	r6, [pc, #260]	; (4221d4 <task_main+0x194>)
  4220d0:	47b0      	blx	r6
					lv_obj_set_style_local_bg_color(label_list[i], LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, lv_obj_get_style_bg_color(label_list[i-1], NULL));
  4220d2:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4220d4:	2229      	movs	r2, #41	; 0x29
  4220d6:	2100      	movs	r1, #0
  4220d8:	f854 0d04 	ldr.w	r0, [r4, #-4]!
  4220dc:	4b3e      	ldr	r3, [pc, #248]	; (4221d8 <task_main+0x198>)
  4220de:	4798      	blx	r3
  4220e0:	4603      	mov	r3, r0
  4220e2:	2229      	movs	r2, #41	; 0x29
  4220e4:	2100      	movs	r1, #0
  4220e6:	4630      	mov	r0, r6
  4220e8:	4e3c      	ldr	r6, [pc, #240]	; (4221dc <task_main+0x19c>)
  4220ea:	47b0      	blx	r6
				if(i == 0) {
  4220ec:	3d01      	subs	r5, #1
  4220ee:	d1d7      	bne.n	4220a0 <task_main+0x60>
					lv_label_set_text_fmt(label_list[i], "%d: %02d:%02d:%02d - %d", i, xQueueData.hour, xQueueData.minute, xQueueData.second, xQueueData.value);
  4220f0:	4b3b      	ldr	r3, [pc, #236]	; (4221e0 <task_main+0x1a0>)
  4220f2:	6818      	ldr	r0, [r3, #0]
  4220f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4220f6:	9302      	str	r3, [sp, #8]
  4220f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4220fa:	9301      	str	r3, [sp, #4]
  4220fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4220fe:	9300      	str	r3, [sp, #0]
  422100:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  422102:	2200      	movs	r2, #0
  422104:	4937      	ldr	r1, [pc, #220]	; (4221e4 <task_main+0x1a4>)
  422106:	4c33      	ldr	r4, [pc, #204]	; (4221d4 <task_main+0x194>)
  422108:	47a0      	blx	r4
					if(xQueueData.value < 2000)
  42210a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  42210c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  422110:	d323      	bcc.n	42215a <task_main+0x11a>
					else if(xQueueData.value <= 3000)
  422112:	f640 32b8 	movw	r2, #3000	; 0xbb8
  422116:	4293      	cmp	r3, r2
  422118:	d831      	bhi.n	42217e <task_main+0x13e>
  42211a:	4b33      	ldr	r3, [pc, #204]	; (4221e8 <task_main+0x1a8>)
  42211c:	889b      	ldrh	r3, [r3, #4]
  42211e:	2229      	movs	r2, #41	; 0x29
  422120:	2100      	movs	r1, #0
  422122:	482f      	ldr	r0, [pc, #188]	; (4221e0 <task_main+0x1a0>)
  422124:	6800      	ldr	r0, [r0, #0]
  422126:	4c2d      	ldr	r4, [pc, #180]	; (4221dc <task_main+0x19c>)
  422128:	47a0      	blx	r4
			if(xQueueData.value < 2000)
  42212a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  42212c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  422130:	d2a1      	bcs.n	422076 <task_main+0x36>
				alarm_cnt++;
  422132:	683b      	ldr	r3, [r7, #0]
  422134:	3301      	adds	r3, #1
  422136:	603b      	str	r3, [r7, #0]
  422138:	e79d      	b.n	422076 <task_main+0x36>
			lv_create_alarm();
  42213a:	4b2c      	ldr	r3, [pc, #176]	; (4221ec <task_main+0x1ac>)
  42213c:	4798      	blx	r3
			alarm_create = 0;
  42213e:	2200      	movs	r2, #0
  422140:	4b1b      	ldr	r3, [pc, #108]	; (4221b0 <task_main+0x170>)
  422142:	701a      	strb	r2, [r3, #0]
  422144:	e78d      	b.n	422062 <task_main+0x22>
			lv_obj_del(mbox_alarm);
  422146:	4b2a      	ldr	r3, [pc, #168]	; (4221f0 <task_main+0x1b0>)
  422148:	6818      	ldr	r0, [r3, #0]
  42214a:	4b2a      	ldr	r3, [pc, #168]	; (4221f4 <task_main+0x1b4>)
  42214c:	4798      	blx	r3
			alarm_cnt = 0;
  42214e:	2300      	movs	r3, #0
  422150:	603b      	str	r3, [r7, #0]
			alarm_create = 1;
  422152:	2201      	movs	r2, #1
  422154:	4b16      	ldr	r3, [pc, #88]	; (4221b0 <task_main+0x170>)
  422156:	701a      	strb	r2, [r3, #0]
  422158:	e78d      	b.n	422076 <task_main+0x36>
  42215a:	9b06      	ldr	r3, [sp, #24]
  42215c:	f36f 0302 	bfc	r3, #0, #3
  422160:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
  422164:	f36f 230c 	bfc	r3, #8, #5
  422168:	f36f 334f 	bfc	r3, #13, #3
  42216c:	f8ad 3018 	strh.w	r3, [sp, #24]
  422170:	2229      	movs	r2, #41	; 0x29
  422172:	2100      	movs	r1, #0
  422174:	481a      	ldr	r0, [pc, #104]	; (4221e0 <task_main+0x1a0>)
  422176:	6800      	ldr	r0, [r0, #0]
  422178:	4c18      	ldr	r4, [pc, #96]	; (4221dc <task_main+0x19c>)
  42217a:	47a0      	blx	r4
  42217c:	e7d5      	b.n	42212a <task_main+0xea>
  42217e:	9b04      	ldr	r3, [sp, #16]
  422180:	f043 0307 	orr.w	r3, r3, #7
  422184:	f36f 03c7 	bfc	r3, #3, #5
  422188:	f36f 230c 	bfc	r3, #8, #5
  42218c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
  422190:	f8ad 3010 	strh.w	r3, [sp, #16]
  422194:	2229      	movs	r2, #41	; 0x29
  422196:	2100      	movs	r1, #0
  422198:	4811      	ldr	r0, [pc, #68]	; (4221e0 <task_main+0x1a0>)
  42219a:	6800      	ldr	r0, [r0, #0]
  42219c:	4c0f      	ldr	r4, [pc, #60]	; (4221dc <task_main+0x19c>)
  42219e:	47a0      	blx	r4
  4221a0:	e7c3      	b.n	42212a <task_main+0xea>
  4221a2:	bf00      	nop
  4221a4:	00421d81 	.word	0x00421d81
  4221a8:	00421f09 	.word	0x00421f09
  4221ac:	20414820 	.word	0x20414820
  4221b0:	204000bc 	.word	0x204000bc
  4221b4:	2043a2e4 	.word	0x2043a2e4
  4221b8:	00401a1d 	.word	0x00401a1d
  4221bc:	204000bd 	.word	0x204000bd
  4221c0:	2043a30c 	.word	0x2043a30c
  4221c4:	0042369d 	.word	0x0042369d
  4221c8:	00423781 	.word	0x00423781
  4221cc:	00422019 	.word	0x00422019
  4221d0:	0043085c 	.word	0x0043085c
  4221d4:	0041ff71 	.word	0x0041ff71
  4221d8:	004063c9 	.word	0x004063c9
  4221dc:	00406ea5 	.word	0x00406ea5
  4221e0:	2043a2fc 	.word	0x2043a2fc
  4221e4:	00430844 	.word	0x00430844
  4221e8:	0043073c 	.word	0x0043073c
  4221ec:	00421ead 	.word	0x00421ead
  4221f0:	2043a2f8 	.word	0x2043a2f8
  4221f4:	004073fd 	.word	0x004073fd
  4221f8:	2043a2d8 	.word	0x2043a2d8
  4221fc:	00401bed 	.word	0x00401bed
  422200:	00422a35 	.word	0x00422a35
  422204:	0041f20d 	.word	0x0041f20d

00422208 <RTC_init>:
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type){
  422208:	b082      	sub	sp, #8
  42220a:	b570      	push	{r4, r5, r6, lr}
  42220c:	b082      	sub	sp, #8
  42220e:	4605      	mov	r5, r0
  422210:	460c      	mov	r4, r1
  422212:	a906      	add	r1, sp, #24
  422214:	e881 000c 	stmia.w	r1, {r2, r3}
	pmc_enable_periph_clk(ID_RTC);
  422218:	2002      	movs	r0, #2
  42221a:	4b1d      	ldr	r3, [pc, #116]	; (422290 <RTC_init+0x88>)
  42221c:	4798      	blx	r3
	rtc_set_hour_mode(rtc, 0);
  42221e:	2100      	movs	r1, #0
  422220:	4628      	mov	r0, r5
  422222:	4b1c      	ldr	r3, [pc, #112]	; (422294 <RTC_init+0x8c>)
  422224:	4798      	blx	r3
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  422226:	9b09      	ldr	r3, [sp, #36]	; 0x24
  422228:	9300      	str	r3, [sp, #0]
  42222a:	9b08      	ldr	r3, [sp, #32]
  42222c:	9a07      	ldr	r2, [sp, #28]
  42222e:	9906      	ldr	r1, [sp, #24]
  422230:	4628      	mov	r0, r5
  422232:	4e19      	ldr	r6, [pc, #100]	; (422298 <RTC_init+0x90>)
  422234:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  422236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  422238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  42223a:	990a      	ldr	r1, [sp, #40]	; 0x28
  42223c:	4628      	mov	r0, r5
  42223e:	4e17      	ldr	r6, [pc, #92]	; (42229c <RTC_init+0x94>)
  422240:	47b0      	blx	r6
	NVIC_DisableIRQ(id_rtc);
  422242:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  422244:	b2e4      	uxtb	r4, r4
  422246:	f004 011f 	and.w	r1, r4, #31
  42224a:	2301      	movs	r3, #1
  42224c:	408b      	lsls	r3, r1
  42224e:	0956      	lsrs	r6, r2, #5
  422250:	4813      	ldr	r0, [pc, #76]	; (4222a0 <RTC_init+0x98>)
  422252:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  422256:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  42225a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  42225e:	2a00      	cmp	r2, #0
  422260:	db0f      	blt.n	422282 <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  422262:	490f      	ldr	r1, [pc, #60]	; (4222a0 <RTC_init+0x98>)
  422264:	4411      	add	r1, r2
  422266:	2280      	movs	r2, #128	; 0x80
  422268:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  42226c:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	rtc_enable_interrupt(rtc,  irq_type);
  422270:	990d      	ldr	r1, [sp, #52]	; 0x34
  422272:	4628      	mov	r0, r5
  422274:	4b0b      	ldr	r3, [pc, #44]	; (4222a4 <RTC_init+0x9c>)
  422276:	4798      	blx	r3
}
  422278:	b002      	add	sp, #8
  42227a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  42227e:	b002      	add	sp, #8
  422280:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  422282:	f004 040f 	and.w	r4, r4, #15
  422286:	4a08      	ldr	r2, [pc, #32]	; (4222a8 <RTC_init+0xa0>)
  422288:	2180      	movs	r1, #128	; 0x80
  42228a:	5511      	strb	r1, [r2, r4]
  42228c:	e7ee      	b.n	42226c <RTC_init+0x64>
  42228e:	bf00      	nop
  422290:	00421439 	.word	0x00421439
  422294:	004001d5 	.word	0x004001d5
  422298:	004002d9 	.word	0x004002d9
  42229c:	00400249 	.word	0x00400249
  4222a0:	e000e100 	.word	0xe000e100
  4222a4:	004001eb 	.word	0x004001eb
  4222a8:	e000ed14 	.word	0xe000ed14

004222ac <task_process>:
static void task_process(void *pvParameters) {
  4222ac:	b580      	push	{r7, lr}
  4222ae:	b092      	sub	sp, #72	; 0x48
  xQueueAdc = xQueueCreate(32, sizeof(int));
  4222b0:	2200      	movs	r2, #0
  4222b2:	2104      	movs	r1, #4
  4222b4:	2020      	movs	r0, #32
  4222b6:	4b2c      	ldr	r3, [pc, #176]	; (422368 <task_process+0xbc>)
  4222b8:	4798      	blx	r3
  4222ba:	4b2c      	ldr	r3, [pc, #176]	; (42236c <task_process+0xc0>)
  4222bc:	6018      	str	r0, [r3, #0]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  4222be:	a806      	add	r0, sp, #24
  4222c0:	4b2b      	ldr	r3, [pc, #172]	; (422370 <task_process+0xc4>)
  4222c2:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4222c4:	2600      	movs	r6, #0
  4222c6:	f88d 6019 	strb.w	r6, [sp, #25]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  4222ca:	4c2a      	ldr	r4, [pc, #168]	; (422374 <task_process+0xc8>)
  4222cc:	aa06      	add	r2, sp, #24
  4222ce:	2106      	movs	r1, #6
  4222d0:	4620      	mov	r0, r4
  4222d2:	4b29      	ldr	r3, [pc, #164]	; (422378 <task_process+0xcc>)
  4222d4:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  4222d6:	2306      	movs	r3, #6
  4222d8:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4222da:	f44f 7300 	mov.w	r3, #512	; 0x200
  4222de:	66e3      	str	r3, [r4, #108]	; 0x6c
  xTimerAdc = xTimerCreate("afec", 4000, pdTRUE, (void *) 0, vTimerAfecCallback);
  4222e0:	4b26      	ldr	r3, [pc, #152]	; (42237c <task_process+0xd0>)
  4222e2:	9300      	str	r3, [sp, #0]
  4222e4:	4633      	mov	r3, r6
  4222e6:	2201      	movs	r2, #1
  4222e8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
  4222ec:	4824      	ldr	r0, [pc, #144]	; (422380 <task_process+0xd4>)
  4222ee:	4c25      	ldr	r4, [pc, #148]	; (422384 <task_process+0xd8>)
  4222f0:	47a0      	blx	r4
  4222f2:	4604      	mov	r4, r0
  4222f4:	4b24      	ldr	r3, [pc, #144]	; (422388 <task_process+0xdc>)
  4222f6:	6018      	str	r0, [r3, #0]
  xTimerStart( xTimerAdc, 0 );
  4222f8:	4b24      	ldr	r3, [pc, #144]	; (42238c <task_process+0xe0>)
  4222fa:	4798      	blx	r3
  4222fc:	9600      	str	r6, [sp, #0]
  4222fe:	4633      	mov	r3, r6
  422300:	4602      	mov	r2, r0
  422302:	2101      	movs	r1, #1
  422304:	4620      	mov	r0, r4
  422306:	4c22      	ldr	r4, [pc, #136]	; (422390 <task_process+0xe4>)
  422308:	47a0      	blx	r4
  calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};
  42230a:	ac0b      	add	r4, sp, #44	; 0x2c
  42230c:	4d21      	ldr	r5, [pc, #132]	; (422394 <task_process+0xe8>)
  42230e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  422310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  422312:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  422316:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RTC_init(RTC, ID_RTC, rtc_initial, NULL);
  42231a:	9605      	str	r6, [sp, #20]
  42231c:	466c      	mov	r4, sp
  42231e:	ad0d      	add	r5, sp, #52	; 0x34
  422320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  422322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  422324:	682b      	ldr	r3, [r5, #0]
  422326:	6023      	str	r3, [r4, #0]
  422328:	ab0b      	add	r3, sp, #44	; 0x2c
  42232a:	cb0c      	ldmia	r3, {r2, r3}
  42232c:	2102      	movs	r1, #2
  42232e:	481a      	ldr	r0, [pc, #104]	; (422398 <task_process+0xec>)
  422330:	4c1a      	ldr	r4, [pc, #104]	; (42239c <task_process+0xf0>)
  422332:	47a0      	blx	r4
	if (xQueueReceiveFromISR( xQueueAdc, &(adc), ( TickType_t )  4000 / portTICK_PERIOD_MS) == pdTRUE) {
  422334:	4d0d      	ldr	r5, [pc, #52]	; (42236c <task_process+0xc0>)
  422336:	4c1a      	ldr	r4, [pc, #104]	; (4223a0 <task_process+0xf4>)
		rtc_get_time(RTC, &xQueueData.hour, &xQueueData.minute, &xQueueData.second);
  422338:	4f17      	ldr	r7, [pc, #92]	; (422398 <task_process+0xec>)
	if (xQueueReceiveFromISR( xQueueAdc, &(adc), ( TickType_t )  4000 / portTICK_PERIOD_MS) == pdTRUE) {
  42233a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
  42233e:	a90a      	add	r1, sp, #40	; 0x28
  422340:	6828      	ldr	r0, [r5, #0]
  422342:	47a0      	blx	r4
  422344:	2801      	cmp	r0, #1
  422346:	d1f8      	bne.n	42233a <task_process+0x8e>
		rtc_get_time(RTC, &xQueueData.hour, &xQueueData.minute, &xQueueData.second);
  422348:	ab08      	add	r3, sp, #32
  42234a:	aa07      	add	r2, sp, #28
  42234c:	a906      	add	r1, sp, #24
  42234e:	4638      	mov	r0, r7
  422350:	4e14      	ldr	r6, [pc, #80]	; (4223a4 <task_process+0xf8>)
  422352:	47b0      	blx	r6
		xQueueData.value = adc;
  422354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  422356:	9309      	str	r3, [sp, #36]	; 0x24
		xQueueSend(xQueueDados, &xQueueData, 0);
  422358:	2300      	movs	r3, #0
  42235a:	461a      	mov	r2, r3
  42235c:	a906      	add	r1, sp, #24
  42235e:	4812      	ldr	r0, [pc, #72]	; (4223a8 <task_process+0xfc>)
  422360:	6800      	ldr	r0, [r0, #0]
  422362:	4e12      	ldr	r6, [pc, #72]	; (4223ac <task_process+0x100>)
  422364:	47b0      	blx	r6
  422366:	e7e8      	b.n	42233a <task_process+0x8e>
  422368:	004015dd 	.word	0x004015dd
  42236c:	2043a2dc 	.word	0x2043a2dc
  422370:	00400dd9 	.word	0x00400dd9
  422374:	40064000 	.word	0x40064000
  422378:	00400d79 	.word	0x00400d79
  42237c:	00421acd 	.word	0x00421acd
  422380:	00430864 	.word	0x00430864
  422384:	00402a25 	.word	0x00402a25
  422388:	2043a2e8 	.word	0x2043a2e8
  42238c:	00402085 	.word	0x00402085
  422390:	00402a7d 	.word	0x00402a7d
  422394:	00430744 	.word	0x00430744
  422398:	400e1860 	.word	0x400e1860
  42239c:	00422209 	.word	0x00422209
  4223a0:	00401bed 	.word	0x00401bed
  4223a4:	004001ef 	.word	0x004001ef
  4223a8:	2043a2d8 	.word	0x2043a2d8
  4223ac:	00401659 	.word	0x00401659

004223b0 <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  4223b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4223b4:	b09f      	sub	sp, #124	; 0x7c
  /* board and sys init */
  board_init();
  4223b6:	4b86      	ldr	r3, [pc, #536]	; (4225d0 <main+0x220>)
  4223b8:	4798      	blx	r3
  sysclk_init();
  4223ba:	4b86      	ldr	r3, [pc, #536]	; (4225d4 <main+0x224>)
  4223bc:	4798      	blx	r3
  
  /* uart */
  xQueueRx = xQueueCreate(32, sizeof(char));
  4223be:	2200      	movs	r2, #0
  4223c0:	2101      	movs	r1, #1
  4223c2:	2020      	movs	r0, #32
  4223c4:	4c84      	ldr	r4, [pc, #528]	; (4225d8 <main+0x228>)
  4223c6:	47a0      	blx	r4
  4223c8:	4b84      	ldr	r3, [pc, #528]	; (4225dc <main+0x22c>)
  4223ca:	6018      	str	r0, [r3, #0]
  xQueueDados = xQueueCreate(32, sizeof(xqueue_dado));
  4223cc:	2200      	movs	r2, #0
  4223ce:	2110      	movs	r1, #16
  4223d0:	2020      	movs	r0, #32
  4223d2:	47a0      	blx	r4
  4223d4:	4b82      	ldr	r3, [pc, #520]	; (4225e0 <main+0x230>)
  4223d6:	6018      	str	r0, [r3, #0]
  xSemaphoreAlarm = xSemaphoreCreateBinary();
  4223d8:	2203      	movs	r2, #3
  4223da:	2100      	movs	r1, #0
  4223dc:	2001      	movs	r0, #1
  4223de:	47a0      	blx	r4
  4223e0:	4b80      	ldr	r3, [pc, #512]	; (4225e4 <main+0x234>)
  4223e2:	6018      	str	r0, [r3, #0]
  4223e4:	200b      	movs	r0, #11
  4223e6:	4e80      	ldr	r6, [pc, #512]	; (4225e8 <main+0x238>)
  4223e8:	47b0      	blx	r6
  4223ea:	200a      	movs	r0, #10
  4223ec:	47b0      	blx	r6
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4); // RX
  4223ee:	2210      	movs	r2, #16
  4223f0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4223f4:	487d      	ldr	r0, [pc, #500]	; (4225ec <main+0x23c>)
  4223f6:	4c7e      	ldr	r4, [pc, #504]	; (4225f0 <main+0x240>)
  4223f8:	47a0      	blx	r4
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  4223fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4223fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  422402:	487c      	ldr	r0, [pc, #496]	; (4225f4 <main+0x244>)
  422404:	47a0      	blx	r4
  MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  422406:	4a7c      	ldr	r2, [pc, #496]	; (4225f8 <main+0x248>)
  422408:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  42240c:	f043 0310 	orr.w	r3, r3, #16
  422410:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  const sam_usart_opt_t usart_settings = {
  422414:	2400      	movs	r4, #0
  422416:	9407      	str	r4, [sp, #28]
  422418:	9408      	str	r4, [sp, #32]
  42241a:	9409      	str	r4, [sp, #36]	; 0x24
  42241c:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  422420:	9704      	str	r7, [sp, #16]
  422422:	23c0      	movs	r3, #192	; 0xc0
  422424:	9305      	str	r3, [sp, #20]
  422426:	f44f 6300 	mov.w	r3, #2048	; 0x800
  42242a:	9306      	str	r3, [sp, #24]
  42242c:	200e      	movs	r0, #14
  42242e:	47b0      	blx	r6
  usart_init_rs232(CONSOLE_UART, &usart_settings, sysclk_get_peripheral_hz());
  422430:	4a72      	ldr	r2, [pc, #456]	; (4225fc <main+0x24c>)
  422432:	a904      	add	r1, sp, #16
  422434:	4872      	ldr	r0, [pc, #456]	; (422600 <main+0x250>)
  422436:	4d73      	ldr	r5, [pc, #460]	; (422604 <main+0x254>)
  422438:	47a8      	blx	r5
  usart_enable_tx(CONSOLE_UART);
  42243a:	4871      	ldr	r0, [pc, #452]	; (422600 <main+0x250>)
  42243c:	f8df b25c 	ldr.w	fp, [pc, #604]	; 42269c <main+0x2ec>
  422440:	47d8      	blx	fp
  usart_enable_rx(CONSOLE_UART);
  422442:	486f      	ldr	r0, [pc, #444]	; (422600 <main+0x250>)
  422444:	f8df 9258 	ldr.w	r9, [pc, #600]	; 4226a0 <main+0x2f0>
  422448:	47c8      	blx	r9
  ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  42244a:	f8df a258 	ldr.w	sl, [pc, #600]	; 4226a4 <main+0x2f4>
  42244e:	4b6e      	ldr	r3, [pc, #440]	; (422608 <main+0x258>)
  422450:	f8ca 3000 	str.w	r3, [sl]
  ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  422454:	f8df 8250 	ldr.w	r8, [pc, #592]	; 4226a8 <main+0x2f8>
  422458:	4b6c      	ldr	r3, [pc, #432]	; (42260c <main+0x25c>)
  42245a:	f8c8 3000 	str.w	r3, [r8]
  usart_enable_interrupt(CONSOLE_UART, US_IER_RXRDY);
  42245e:	2101      	movs	r1, #1
  422460:	4867      	ldr	r0, [pc, #412]	; (422600 <main+0x250>)
  422462:	4b6b      	ldr	r3, [pc, #428]	; (422610 <main+0x260>)
  422464:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  422466:	4b6b      	ldr	r3, [pc, #428]	; (422614 <main+0x264>)
  422468:	2280      	movs	r2, #128	; 0x80
  42246a:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  42246e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  422472:	601a      	str	r2, [r3, #0]
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  422474:	4b68      	ldr	r3, [pc, #416]	; (422618 <main+0x268>)
  422476:	4a62      	ldr	r2, [pc, #392]	; (422600 <main+0x250>)
  422478:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  42247a:	4b63      	ldr	r3, [pc, #396]	; (422608 <main+0x258>)
  42247c:	f8ca 3000 	str.w	r3, [sl]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  422480:	4b62      	ldr	r3, [pc, #392]	; (42260c <main+0x25c>)
  422482:	f8c8 3000 	str.w	r3, [r8]
	usart_settings.baudrate = opt->baudrate;
  422486:	9704      	str	r7, [sp, #16]
	usart_settings.char_length = opt->charlength;
  422488:	23c0      	movs	r3, #192	; 0xc0
  42248a:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  42248c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  422490:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  422492:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  422494:	9408      	str	r4, [sp, #32]
  422496:	200e      	movs	r0, #14
  422498:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  42249a:	4a58      	ldr	r2, [pc, #352]	; (4225fc <main+0x24c>)
  42249c:	a904      	add	r1, sp, #16
  42249e:	4858      	ldr	r0, [pc, #352]	; (422600 <main+0x250>)
  4224a0:	47a8      	blx	r5
		usart_enable_tx(p_usart);
  4224a2:	4857      	ldr	r0, [pc, #348]	; (422600 <main+0x250>)
  4224a4:	47d8      	blx	fp
		usart_enable_rx(p_usart);
  4224a6:	4856      	ldr	r0, [pc, #344]	; (422600 <main+0x250>)
  4224a8:	47c8      	blx	r9
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4224aa:	4e5c      	ldr	r6, [pc, #368]	; (42261c <main+0x26c>)
  4224ac:	6833      	ldr	r3, [r6, #0]
  4224ae:	4621      	mov	r1, r4
  4224b0:	6898      	ldr	r0, [r3, #8]
  4224b2:	4d5b      	ldr	r5, [pc, #364]	; (422620 <main+0x270>)
  4224b4:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4224b6:	6833      	ldr	r3, [r6, #0]
  4224b8:	4621      	mov	r1, r4
  4224ba:	6858      	ldr	r0, [r3, #4]
  4224bc:	47a8      	blx	r5
  setbuf(stdout, NULL);
  4224be:	6833      	ldr	r3, [r6, #0]
  4224c0:	4621      	mov	r1, r4
  4224c2:	6898      	ldr	r0, [r3, #8]
  4224c4:	47a8      	blx	r5
  pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);  //
  4224c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4224ca:	2074      	movs	r0, #116	; 0x74
  4224cc:	4d55      	ldr	r5, [pc, #340]	; (422624 <main+0x274>)
  4224ce:	47a8      	blx	r5
  pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  4224d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4224d4:	2075      	movs	r0, #117	; 0x75
  4224d6:	47a8      	blx	r5
  pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  4224d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4224dc:	2076      	movs	r0, #118	; 0x76
  4224de:	47a8      	blx	r5
  pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  4224e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4224e4:	207b      	movs	r0, #123	; 0x7b
  4224e6:	47a8      	blx	r5
  pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  4224e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4224ec:	2018      	movs	r0, #24
  4224ee:	47a8      	blx	r5
  pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  4224f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4224f4:	2006      	movs	r0, #6
  4224f6:	47a8      	blx	r5
  USART1_init();
  configure_console();

  /* LCd int */
  configure_lcd();
  ili9341_init();
  4224f8:	4b4b      	ldr	r3, [pc, #300]	; (422628 <main+0x278>)
  4224fa:	4798      	blx	r3
  ili9341_set_orientation(ILI9341_FLIP_Y | ILI9341_SWITCH_XY);
  4224fc:	2006      	movs	r0, #6
  4224fe:	4b4b      	ldr	r3, [pc, #300]	; (42262c <main+0x27c>)
  422500:	4798      	blx	r3
  configure_touch();
  422502:	4b4b      	ldr	r3, [pc, #300]	; (422630 <main+0x280>)
  422504:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422506:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  42250a:	4b4a      	ldr	r3, [pc, #296]	; (422634 <main+0x284>)
  42250c:	631a      	str	r2, [r3, #48]	; 0x30
  ili9341_backlight_on();
  
  /*LittlevGL init*/
  lv_init();
  42250e:	4b4a      	ldr	r3, [pc, #296]	; (422638 <main+0x288>)
  422510:	4798      	blx	r3
  lv_disp_drv_t disp_drv;                 /*A variable to hold the drivers. Can be local variable*/
  lv_disp_drv_init(&disp_drv);            /*Basic initialization*/
  422512:	a811      	add	r0, sp, #68	; 0x44
  422514:	4b49      	ldr	r3, [pc, #292]	; (42263c <main+0x28c>)
  422516:	4798      	blx	r3
  lv_disp_buf_init(&disp_buf, buf_1, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX);  /*Initialize `disp_buf` with the buffer(s) */
  422518:	4d49      	ldr	r5, [pc, #292]	; (422640 <main+0x290>)
  42251a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
  42251e:	4622      	mov	r2, r4
  422520:	4948      	ldr	r1, [pc, #288]	; (422644 <main+0x294>)
  422522:	4628      	mov	r0, r5
  422524:	4e48      	ldr	r6, [pc, #288]	; (422648 <main+0x298>)
  422526:	47b0      	blx	r6
  disp_drv.buffer = &disp_buf;            /*Set an initialized buffer*/
  422528:	9512      	str	r5, [sp, #72]	; 0x48
  disp_drv.flush_cb = my_flush_cb;        /*Set a flush callback to draw to the display*/
  42252a:	4b48      	ldr	r3, [pc, #288]	; (42264c <main+0x29c>)
  42252c:	9314      	str	r3, [sp, #80]	; 0x50
  lv_disp_t * disp;
  disp = lv_disp_drv_register(&disp_drv); /*Register the driver and save the created display objects*/
  42252e:	a811      	add	r0, sp, #68	; 0x44
  422530:	4b47      	ldr	r3, [pc, #284]	; (422650 <main+0x2a0>)
  422532:	4798      	blx	r3
  
  /* Init input on LVGL */
  lv_indev_drv_t indev_drv;
  lv_indev_drv_init(&indev_drv);      /*Basic initialization*/
  422534:	a80a      	add	r0, sp, #40	; 0x28
  422536:	4b47      	ldr	r3, [pc, #284]	; (422654 <main+0x2a4>)
  422538:	4798      	blx	r3
  indev_drv.type = LV_INDEV_TYPE_POINTER;
  42253a:	2501      	movs	r5, #1
  42253c:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
  indev_drv.read_cb = my_input_read;
  422540:	4b45      	ldr	r3, [pc, #276]	; (422658 <main+0x2a8>)
  422542:	930b      	str	r3, [sp, #44]	; 0x2c
  /*Register the driver in LVGL and save the created input device object*/
  lv_indev_t * my_indev = lv_indev_drv_register(&indev_drv);
  422544:	a80a      	add	r0, sp, #40	; 0x28
  422546:	4b45      	ldr	r3, [pc, #276]	; (42265c <main+0x2ac>)
  422548:	4798      	blx	r3
  
  if (xTaskCreate(task_lcd, "LCD", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY + 1, NULL) != pdPASS) {
  42254a:	9403      	str	r4, [sp, #12]
  42254c:	9402      	str	r4, [sp, #8]
  42254e:	9401      	str	r4, [sp, #4]
  422550:	9500      	str	r5, [sp, #0]
  422552:	4623      	mov	r3, r4
  422554:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  422558:	4941      	ldr	r1, [pc, #260]	; (422660 <main+0x2b0>)
  42255a:	4842      	ldr	r0, [pc, #264]	; (422664 <main+0x2b4>)
  42255c:	4c42      	ldr	r4, [pc, #264]	; (422668 <main+0x2b8>)
  42255e:	47a0      	blx	r4
  422560:	42a8      	cmp	r0, r5
  422562:	d002      	beq.n	42256a <main+0x1ba>
    printf("Failed to create lcd task\r\n");
  422564:	4841      	ldr	r0, [pc, #260]	; (42266c <main+0x2bc>)
  422566:	4b42      	ldr	r3, [pc, #264]	; (422670 <main+0x2c0>)
  422568:	4798      	blx	r3
  }
  
  if (xTaskCreate(task_main, "main", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  42256a:	2300      	movs	r3, #0
  42256c:	9303      	str	r3, [sp, #12]
  42256e:	9302      	str	r3, [sp, #8]
  422570:	9301      	str	r3, [sp, #4]
  422572:	9300      	str	r3, [sp, #0]
  422574:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  422578:	493e      	ldr	r1, [pc, #248]	; (422674 <main+0x2c4>)
  42257a:	483f      	ldr	r0, [pc, #252]	; (422678 <main+0x2c8>)
  42257c:	4c3a      	ldr	r4, [pc, #232]	; (422668 <main+0x2b8>)
  42257e:	47a0      	blx	r4
  422580:	2801      	cmp	r0, #1
  422582:	d002      	beq.n	42258a <main+0x1da>
    printf("Failed to create main task\r\n");
  422584:	483d      	ldr	r0, [pc, #244]	; (42267c <main+0x2cc>)
  422586:	4b3a      	ldr	r3, [pc, #232]	; (422670 <main+0x2c0>)
  422588:	4798      	blx	r3
  }
  
  if (xTaskCreate(task_uart, "uart", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  42258a:	2300      	movs	r3, #0
  42258c:	9303      	str	r3, [sp, #12]
  42258e:	9302      	str	r3, [sp, #8]
  422590:	9301      	str	r3, [sp, #4]
  422592:	9300      	str	r3, [sp, #0]
  422594:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  422598:	4939      	ldr	r1, [pc, #228]	; (422680 <main+0x2d0>)
  42259a:	483a      	ldr	r0, [pc, #232]	; (422684 <main+0x2d4>)
  42259c:	4c32      	ldr	r4, [pc, #200]	; (422668 <main+0x2b8>)
  42259e:	47a0      	blx	r4
  4225a0:	2801      	cmp	r0, #1
  4225a2:	d002      	beq.n	4225aa <main+0x1fa>
    printf("Failed to create uart task\r\n");
  4225a4:	4838      	ldr	r0, [pc, #224]	; (422688 <main+0x2d8>)
  4225a6:	4b32      	ldr	r3, [pc, #200]	; (422670 <main+0x2c0>)
  4225a8:	4798      	blx	r3
  }
  
  if (xTaskCreate(task_process, "process", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  4225aa:	2300      	movs	r3, #0
  4225ac:	9303      	str	r3, [sp, #12]
  4225ae:	9302      	str	r3, [sp, #8]
  4225b0:	9301      	str	r3, [sp, #4]
  4225b2:	9300      	str	r3, [sp, #0]
  4225b4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4225b8:	4934      	ldr	r1, [pc, #208]	; (42268c <main+0x2dc>)
  4225ba:	4835      	ldr	r0, [pc, #212]	; (422690 <main+0x2e0>)
  4225bc:	4c2a      	ldr	r4, [pc, #168]	; (422668 <main+0x2b8>)
  4225be:	47a0      	blx	r4
  4225c0:	2801      	cmp	r0, #1
  4225c2:	d002      	beq.n	4225ca <main+0x21a>
    printf("Failed to create process task\r\n");
  4225c4:	4833      	ldr	r0, [pc, #204]	; (422694 <main+0x2e4>)
  4225c6:	4b2a      	ldr	r3, [pc, #168]	; (422670 <main+0x2c0>)
  4225c8:	4798      	blx	r3
  }
  
  /* Start the scheduler. */
  vTaskStartScheduler();
  4225ca:	4b33      	ldr	r3, [pc, #204]	; (422698 <main+0x2e8>)
  4225cc:	4798      	blx	r3
  4225ce:	e7fe      	b.n	4225ce <main+0x21e>
  4225d0:	00420cd1 	.word	0x00420cd1
  4225d4:	00420acd 	.word	0x00420acd
  4225d8:	004015dd 	.word	0x004015dd
  4225dc:	2043a2f4 	.word	0x2043a2f4
  4225e0:	2043a2d8 	.word	0x2043a2d8
  4225e4:	2043a2e4 	.word	0x2043a2e4
  4225e8:	00421439 	.word	0x00421439
  4225ec:	400e1000 	.word	0x400e1000
  4225f0:	00420f91 	.word	0x00420f91
  4225f4:	400e0e00 	.word	0x400e0e00
  4225f8:	40088000 	.word	0x40088000
  4225fc:	08f0d180 	.word	0x08f0d180
  422600:	40028000 	.word	0x40028000
  422604:	00421649 	.word	0x00421649
  422608:	00421c21 	.word	0x00421c21
  42260c:	004219a9 	.word	0x004219a9
  422610:	004216a9 	.word	0x004216a9
  422614:	e000e100 	.word	0xe000e100
  422618:	2043a2d4 	.word	0x2043a2d4
  42261c:	204000c0 	.word	0x204000c0
  422620:	00423211 	.word	0x00423211
  422624:	00421135 	.word	0x00421135
  422628:	004009e5 	.word	0x004009e5
  42262c:	00400989 	.word	0x00400989
  422630:	004003e1 	.word	0x004003e1
  422634:	400e1200 	.word	0x400e1200
  422638:	00404c41 	.word	0x00404c41
  42263c:	0041402d 	.word	0x0041402d
  422640:	2043a024 	.word	0x2043a024
  422644:	20414824 	.word	0x20414824
  422648:	00414081 	.word	0x00414081
  42264c:	00421b0d 	.word	0x00421b0d
  422650:	00414211 	.word	0x00414211
  422654:	00414349 	.word	0x00414349
  422658:	00421b65 	.word	0x00421b65
  42265c:	00414375 	.word	0x00414375
  422660:	004307ac 	.word	0x004307ac
  422664:	00421bfd 	.word	0x00421bfd
  422668:	00401db5 	.word	0x00401db5
  42266c:	004307b0 	.word	0x004307b0
  422670:	00422a0d 	.word	0x00422a0d
  422674:	004307cc 	.word	0x004307cc
  422678:	00422041 	.word	0x00422041
  42267c:	004307d4 	.word	0x004307d4
  422680:	004307f4 	.word	0x004307f4
  422684:	00421ba5 	.word	0x00421ba5
  422688:	004307fc 	.word	0x004307fc
  42268c:	0043081c 	.word	0x0043081c
  422690:	004222ad 	.word	0x004222ad
  422694:	00430824 	.word	0x00430824
  422698:	00401fe9 	.word	0x00401fe9
  42269c:	0042169d 	.word	0x0042169d
  4226a0:	004216a3 	.word	0x004216a3
  4226a4:	2043a2d0 	.word	0x2043a2d0
  4226a8:	2043a2cc 	.word	0x2043a2cc

004226ac <__aeabi_uldivmod>:
  4226ac:	b953      	cbnz	r3, 4226c4 <__aeabi_uldivmod+0x18>
  4226ae:	b94a      	cbnz	r2, 4226c4 <__aeabi_uldivmod+0x18>
  4226b0:	2900      	cmp	r1, #0
  4226b2:	bf08      	it	eq
  4226b4:	2800      	cmpeq	r0, #0
  4226b6:	bf1c      	itt	ne
  4226b8:	f04f 31ff 	movne.w	r1, #4294967295
  4226bc:	f04f 30ff 	movne.w	r0, #4294967295
  4226c0:	f000 b97a 	b.w	4229b8 <__aeabi_idiv0>
  4226c4:	f1ad 0c08 	sub.w	ip, sp, #8
  4226c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4226cc:	f000 f806 	bl	4226dc <__udivmoddi4>
  4226d0:	f8dd e004 	ldr.w	lr, [sp, #4]
  4226d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4226d8:	b004      	add	sp, #16
  4226da:	4770      	bx	lr

004226dc <__udivmoddi4>:
  4226dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4226e0:	468c      	mov	ip, r1
  4226e2:	460d      	mov	r5, r1
  4226e4:	4604      	mov	r4, r0
  4226e6:	9e08      	ldr	r6, [sp, #32]
  4226e8:	2b00      	cmp	r3, #0
  4226ea:	d151      	bne.n	422790 <__udivmoddi4+0xb4>
  4226ec:	428a      	cmp	r2, r1
  4226ee:	4617      	mov	r7, r2
  4226f0:	d96d      	bls.n	4227ce <__udivmoddi4+0xf2>
  4226f2:	fab2 fe82 	clz	lr, r2
  4226f6:	f1be 0f00 	cmp.w	lr, #0
  4226fa:	d00b      	beq.n	422714 <__udivmoddi4+0x38>
  4226fc:	f1ce 0c20 	rsb	ip, lr, #32
  422700:	fa01 f50e 	lsl.w	r5, r1, lr
  422704:	fa20 fc0c 	lsr.w	ip, r0, ip
  422708:	fa02 f70e 	lsl.w	r7, r2, lr
  42270c:	ea4c 0c05 	orr.w	ip, ip, r5
  422710:	fa00 f40e 	lsl.w	r4, r0, lr
  422714:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  422718:	0c25      	lsrs	r5, r4, #16
  42271a:	fbbc f8fa 	udiv	r8, ip, sl
  42271e:	fa1f f987 	uxth.w	r9, r7
  422722:	fb0a cc18 	mls	ip, sl, r8, ip
  422726:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  42272a:	fb08 f309 	mul.w	r3, r8, r9
  42272e:	42ab      	cmp	r3, r5
  422730:	d90a      	bls.n	422748 <__udivmoddi4+0x6c>
  422732:	19ed      	adds	r5, r5, r7
  422734:	f108 32ff 	add.w	r2, r8, #4294967295
  422738:	f080 8123 	bcs.w	422982 <__udivmoddi4+0x2a6>
  42273c:	42ab      	cmp	r3, r5
  42273e:	f240 8120 	bls.w	422982 <__udivmoddi4+0x2a6>
  422742:	f1a8 0802 	sub.w	r8, r8, #2
  422746:	443d      	add	r5, r7
  422748:	1aed      	subs	r5, r5, r3
  42274a:	b2a4      	uxth	r4, r4
  42274c:	fbb5 f0fa 	udiv	r0, r5, sl
  422750:	fb0a 5510 	mls	r5, sl, r0, r5
  422754:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  422758:	fb00 f909 	mul.w	r9, r0, r9
  42275c:	45a1      	cmp	r9, r4
  42275e:	d909      	bls.n	422774 <__udivmoddi4+0x98>
  422760:	19e4      	adds	r4, r4, r7
  422762:	f100 33ff 	add.w	r3, r0, #4294967295
  422766:	f080 810a 	bcs.w	42297e <__udivmoddi4+0x2a2>
  42276a:	45a1      	cmp	r9, r4
  42276c:	f240 8107 	bls.w	42297e <__udivmoddi4+0x2a2>
  422770:	3802      	subs	r0, #2
  422772:	443c      	add	r4, r7
  422774:	eba4 0409 	sub.w	r4, r4, r9
  422778:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  42277c:	2100      	movs	r1, #0
  42277e:	2e00      	cmp	r6, #0
  422780:	d061      	beq.n	422846 <__udivmoddi4+0x16a>
  422782:	fa24 f40e 	lsr.w	r4, r4, lr
  422786:	2300      	movs	r3, #0
  422788:	6034      	str	r4, [r6, #0]
  42278a:	6073      	str	r3, [r6, #4]
  42278c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  422790:	428b      	cmp	r3, r1
  422792:	d907      	bls.n	4227a4 <__udivmoddi4+0xc8>
  422794:	2e00      	cmp	r6, #0
  422796:	d054      	beq.n	422842 <__udivmoddi4+0x166>
  422798:	2100      	movs	r1, #0
  42279a:	e886 0021 	stmia.w	r6, {r0, r5}
  42279e:	4608      	mov	r0, r1
  4227a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4227a4:	fab3 f183 	clz	r1, r3
  4227a8:	2900      	cmp	r1, #0
  4227aa:	f040 808e 	bne.w	4228ca <__udivmoddi4+0x1ee>
  4227ae:	42ab      	cmp	r3, r5
  4227b0:	d302      	bcc.n	4227b8 <__udivmoddi4+0xdc>
  4227b2:	4282      	cmp	r2, r0
  4227b4:	f200 80fa 	bhi.w	4229ac <__udivmoddi4+0x2d0>
  4227b8:	1a84      	subs	r4, r0, r2
  4227ba:	eb65 0503 	sbc.w	r5, r5, r3
  4227be:	2001      	movs	r0, #1
  4227c0:	46ac      	mov	ip, r5
  4227c2:	2e00      	cmp	r6, #0
  4227c4:	d03f      	beq.n	422846 <__udivmoddi4+0x16a>
  4227c6:	e886 1010 	stmia.w	r6, {r4, ip}
  4227ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4227ce:	b912      	cbnz	r2, 4227d6 <__udivmoddi4+0xfa>
  4227d0:	2701      	movs	r7, #1
  4227d2:	fbb7 f7f2 	udiv	r7, r7, r2
  4227d6:	fab7 fe87 	clz	lr, r7
  4227da:	f1be 0f00 	cmp.w	lr, #0
  4227de:	d134      	bne.n	42284a <__udivmoddi4+0x16e>
  4227e0:	1beb      	subs	r3, r5, r7
  4227e2:	0c3a      	lsrs	r2, r7, #16
  4227e4:	fa1f fc87 	uxth.w	ip, r7
  4227e8:	2101      	movs	r1, #1
  4227ea:	fbb3 f8f2 	udiv	r8, r3, r2
  4227ee:	0c25      	lsrs	r5, r4, #16
  4227f0:	fb02 3318 	mls	r3, r2, r8, r3
  4227f4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4227f8:	fb0c f308 	mul.w	r3, ip, r8
  4227fc:	42ab      	cmp	r3, r5
  4227fe:	d907      	bls.n	422810 <__udivmoddi4+0x134>
  422800:	19ed      	adds	r5, r5, r7
  422802:	f108 30ff 	add.w	r0, r8, #4294967295
  422806:	d202      	bcs.n	42280e <__udivmoddi4+0x132>
  422808:	42ab      	cmp	r3, r5
  42280a:	f200 80d1 	bhi.w	4229b0 <__udivmoddi4+0x2d4>
  42280e:	4680      	mov	r8, r0
  422810:	1aed      	subs	r5, r5, r3
  422812:	b2a3      	uxth	r3, r4
  422814:	fbb5 f0f2 	udiv	r0, r5, r2
  422818:	fb02 5510 	mls	r5, r2, r0, r5
  42281c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  422820:	fb0c fc00 	mul.w	ip, ip, r0
  422824:	45a4      	cmp	ip, r4
  422826:	d907      	bls.n	422838 <__udivmoddi4+0x15c>
  422828:	19e4      	adds	r4, r4, r7
  42282a:	f100 33ff 	add.w	r3, r0, #4294967295
  42282e:	d202      	bcs.n	422836 <__udivmoddi4+0x15a>
  422830:	45a4      	cmp	ip, r4
  422832:	f200 80b8 	bhi.w	4229a6 <__udivmoddi4+0x2ca>
  422836:	4618      	mov	r0, r3
  422838:	eba4 040c 	sub.w	r4, r4, ip
  42283c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  422840:	e79d      	b.n	42277e <__udivmoddi4+0xa2>
  422842:	4631      	mov	r1, r6
  422844:	4630      	mov	r0, r6
  422846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42284a:	f1ce 0420 	rsb	r4, lr, #32
  42284e:	fa05 f30e 	lsl.w	r3, r5, lr
  422852:	fa07 f70e 	lsl.w	r7, r7, lr
  422856:	fa20 f804 	lsr.w	r8, r0, r4
  42285a:	0c3a      	lsrs	r2, r7, #16
  42285c:	fa25 f404 	lsr.w	r4, r5, r4
  422860:	ea48 0803 	orr.w	r8, r8, r3
  422864:	fbb4 f1f2 	udiv	r1, r4, r2
  422868:	ea4f 4518 	mov.w	r5, r8, lsr #16
  42286c:	fb02 4411 	mls	r4, r2, r1, r4
  422870:	fa1f fc87 	uxth.w	ip, r7
  422874:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  422878:	fb01 f30c 	mul.w	r3, r1, ip
  42287c:	42ab      	cmp	r3, r5
  42287e:	fa00 f40e 	lsl.w	r4, r0, lr
  422882:	d909      	bls.n	422898 <__udivmoddi4+0x1bc>
  422884:	19ed      	adds	r5, r5, r7
  422886:	f101 30ff 	add.w	r0, r1, #4294967295
  42288a:	f080 808a 	bcs.w	4229a2 <__udivmoddi4+0x2c6>
  42288e:	42ab      	cmp	r3, r5
  422890:	f240 8087 	bls.w	4229a2 <__udivmoddi4+0x2c6>
  422894:	3902      	subs	r1, #2
  422896:	443d      	add	r5, r7
  422898:	1aeb      	subs	r3, r5, r3
  42289a:	fa1f f588 	uxth.w	r5, r8
  42289e:	fbb3 f0f2 	udiv	r0, r3, r2
  4228a2:	fb02 3310 	mls	r3, r2, r0, r3
  4228a6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4228aa:	fb00 f30c 	mul.w	r3, r0, ip
  4228ae:	42ab      	cmp	r3, r5
  4228b0:	d907      	bls.n	4228c2 <__udivmoddi4+0x1e6>
  4228b2:	19ed      	adds	r5, r5, r7
  4228b4:	f100 38ff 	add.w	r8, r0, #4294967295
  4228b8:	d26f      	bcs.n	42299a <__udivmoddi4+0x2be>
  4228ba:	42ab      	cmp	r3, r5
  4228bc:	d96d      	bls.n	42299a <__udivmoddi4+0x2be>
  4228be:	3802      	subs	r0, #2
  4228c0:	443d      	add	r5, r7
  4228c2:	1aeb      	subs	r3, r5, r3
  4228c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4228c8:	e78f      	b.n	4227ea <__udivmoddi4+0x10e>
  4228ca:	f1c1 0720 	rsb	r7, r1, #32
  4228ce:	fa22 f807 	lsr.w	r8, r2, r7
  4228d2:	408b      	lsls	r3, r1
  4228d4:	fa05 f401 	lsl.w	r4, r5, r1
  4228d8:	ea48 0303 	orr.w	r3, r8, r3
  4228dc:	fa20 fe07 	lsr.w	lr, r0, r7
  4228e0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4228e4:	40fd      	lsrs	r5, r7
  4228e6:	ea4e 0e04 	orr.w	lr, lr, r4
  4228ea:	fbb5 f9fc 	udiv	r9, r5, ip
  4228ee:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4228f2:	fb0c 5519 	mls	r5, ip, r9, r5
  4228f6:	fa1f f883 	uxth.w	r8, r3
  4228fa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4228fe:	fb09 f408 	mul.w	r4, r9, r8
  422902:	42ac      	cmp	r4, r5
  422904:	fa02 f201 	lsl.w	r2, r2, r1
  422908:	fa00 fa01 	lsl.w	sl, r0, r1
  42290c:	d908      	bls.n	422920 <__udivmoddi4+0x244>
  42290e:	18ed      	adds	r5, r5, r3
  422910:	f109 30ff 	add.w	r0, r9, #4294967295
  422914:	d243      	bcs.n	42299e <__udivmoddi4+0x2c2>
  422916:	42ac      	cmp	r4, r5
  422918:	d941      	bls.n	42299e <__udivmoddi4+0x2c2>
  42291a:	f1a9 0902 	sub.w	r9, r9, #2
  42291e:	441d      	add	r5, r3
  422920:	1b2d      	subs	r5, r5, r4
  422922:	fa1f fe8e 	uxth.w	lr, lr
  422926:	fbb5 f0fc 	udiv	r0, r5, ip
  42292a:	fb0c 5510 	mls	r5, ip, r0, r5
  42292e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  422932:	fb00 f808 	mul.w	r8, r0, r8
  422936:	45a0      	cmp	r8, r4
  422938:	d907      	bls.n	42294a <__udivmoddi4+0x26e>
  42293a:	18e4      	adds	r4, r4, r3
  42293c:	f100 35ff 	add.w	r5, r0, #4294967295
  422940:	d229      	bcs.n	422996 <__udivmoddi4+0x2ba>
  422942:	45a0      	cmp	r8, r4
  422944:	d927      	bls.n	422996 <__udivmoddi4+0x2ba>
  422946:	3802      	subs	r0, #2
  422948:	441c      	add	r4, r3
  42294a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  42294e:	eba4 0408 	sub.w	r4, r4, r8
  422952:	fba0 8902 	umull	r8, r9, r0, r2
  422956:	454c      	cmp	r4, r9
  422958:	46c6      	mov	lr, r8
  42295a:	464d      	mov	r5, r9
  42295c:	d315      	bcc.n	42298a <__udivmoddi4+0x2ae>
  42295e:	d012      	beq.n	422986 <__udivmoddi4+0x2aa>
  422960:	b156      	cbz	r6, 422978 <__udivmoddi4+0x29c>
  422962:	ebba 030e 	subs.w	r3, sl, lr
  422966:	eb64 0405 	sbc.w	r4, r4, r5
  42296a:	fa04 f707 	lsl.w	r7, r4, r7
  42296e:	40cb      	lsrs	r3, r1
  422970:	431f      	orrs	r7, r3
  422972:	40cc      	lsrs	r4, r1
  422974:	6037      	str	r7, [r6, #0]
  422976:	6074      	str	r4, [r6, #4]
  422978:	2100      	movs	r1, #0
  42297a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42297e:	4618      	mov	r0, r3
  422980:	e6f8      	b.n	422774 <__udivmoddi4+0x98>
  422982:	4690      	mov	r8, r2
  422984:	e6e0      	b.n	422748 <__udivmoddi4+0x6c>
  422986:	45c2      	cmp	sl, r8
  422988:	d2ea      	bcs.n	422960 <__udivmoddi4+0x284>
  42298a:	ebb8 0e02 	subs.w	lr, r8, r2
  42298e:	eb69 0503 	sbc.w	r5, r9, r3
  422992:	3801      	subs	r0, #1
  422994:	e7e4      	b.n	422960 <__udivmoddi4+0x284>
  422996:	4628      	mov	r0, r5
  422998:	e7d7      	b.n	42294a <__udivmoddi4+0x26e>
  42299a:	4640      	mov	r0, r8
  42299c:	e791      	b.n	4228c2 <__udivmoddi4+0x1e6>
  42299e:	4681      	mov	r9, r0
  4229a0:	e7be      	b.n	422920 <__udivmoddi4+0x244>
  4229a2:	4601      	mov	r1, r0
  4229a4:	e778      	b.n	422898 <__udivmoddi4+0x1bc>
  4229a6:	3802      	subs	r0, #2
  4229a8:	443c      	add	r4, r7
  4229aa:	e745      	b.n	422838 <__udivmoddi4+0x15c>
  4229ac:	4608      	mov	r0, r1
  4229ae:	e708      	b.n	4227c2 <__udivmoddi4+0xe6>
  4229b0:	f1a8 0802 	sub.w	r8, r8, #2
  4229b4:	443d      	add	r5, r7
  4229b6:	e72b      	b.n	422810 <__udivmoddi4+0x134>

004229b8 <__aeabi_idiv0>:
  4229b8:	4770      	bx	lr
  4229ba:	bf00      	nop

004229bc <__libc_init_array>:
  4229bc:	b570      	push	{r4, r5, r6, lr}
  4229be:	4e0f      	ldr	r6, [pc, #60]	; (4229fc <__libc_init_array+0x40>)
  4229c0:	4d0f      	ldr	r5, [pc, #60]	; (422a00 <__libc_init_array+0x44>)
  4229c2:	1b76      	subs	r6, r6, r5
  4229c4:	10b6      	asrs	r6, r6, #2
  4229c6:	bf18      	it	ne
  4229c8:	2400      	movne	r4, #0
  4229ca:	d005      	beq.n	4229d8 <__libc_init_array+0x1c>
  4229cc:	3401      	adds	r4, #1
  4229ce:	f855 3b04 	ldr.w	r3, [r5], #4
  4229d2:	4798      	blx	r3
  4229d4:	42a6      	cmp	r6, r4
  4229d6:	d1f9      	bne.n	4229cc <__libc_init_array+0x10>
  4229d8:	4e0a      	ldr	r6, [pc, #40]	; (422a04 <__libc_init_array+0x48>)
  4229da:	4d0b      	ldr	r5, [pc, #44]	; (422a08 <__libc_init_array+0x4c>)
  4229dc:	1b76      	subs	r6, r6, r5
  4229de:	f00e f805 	bl	4309ec <_init>
  4229e2:	10b6      	asrs	r6, r6, #2
  4229e4:	bf18      	it	ne
  4229e6:	2400      	movne	r4, #0
  4229e8:	d006      	beq.n	4229f8 <__libc_init_array+0x3c>
  4229ea:	3401      	adds	r4, #1
  4229ec:	f855 3b04 	ldr.w	r3, [r5], #4
  4229f0:	4798      	blx	r3
  4229f2:	42a6      	cmp	r6, r4
  4229f4:	d1f9      	bne.n	4229ea <__libc_init_array+0x2e>
  4229f6:	bd70      	pop	{r4, r5, r6, pc}
  4229f8:	bd70      	pop	{r4, r5, r6, pc}
  4229fa:	bf00      	nop
  4229fc:	004309f8 	.word	0x004309f8
  422a00:	004309f8 	.word	0x004309f8
  422a04:	00430a00 	.word	0x00430a00
  422a08:	004309f8 	.word	0x004309f8

00422a0c <iprintf>:
  422a0c:	b40f      	push	{r0, r1, r2, r3}
  422a0e:	b500      	push	{lr}
  422a10:	4907      	ldr	r1, [pc, #28]	; (422a30 <iprintf+0x24>)
  422a12:	b083      	sub	sp, #12
  422a14:	ab04      	add	r3, sp, #16
  422a16:	6808      	ldr	r0, [r1, #0]
  422a18:	f853 2b04 	ldr.w	r2, [r3], #4
  422a1c:	6881      	ldr	r1, [r0, #8]
  422a1e:	9301      	str	r3, [sp, #4]
  422a20:	f000 ff5c 	bl	4238dc <_vfiprintf_r>
  422a24:	b003      	add	sp, #12
  422a26:	f85d eb04 	ldr.w	lr, [sp], #4
  422a2a:	b004      	add	sp, #16
  422a2c:	4770      	bx	lr
  422a2e:	bf00      	nop
  422a30:	204000c0 	.word	0x204000c0

00422a34 <malloc>:
  422a34:	4b02      	ldr	r3, [pc, #8]	; (422a40 <malloc+0xc>)
  422a36:	4601      	mov	r1, r0
  422a38:	6818      	ldr	r0, [r3, #0]
  422a3a:	f000 b803 	b.w	422a44 <_malloc_r>
  422a3e:	bf00      	nop
  422a40:	204000c0 	.word	0x204000c0

00422a44 <_malloc_r>:
  422a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  422a48:	f101 060b 	add.w	r6, r1, #11
  422a4c:	2e16      	cmp	r6, #22
  422a4e:	b083      	sub	sp, #12
  422a50:	4605      	mov	r5, r0
  422a52:	f240 809e 	bls.w	422b92 <_malloc_r+0x14e>
  422a56:	f036 0607 	bics.w	r6, r6, #7
  422a5a:	f100 80bd 	bmi.w	422bd8 <_malloc_r+0x194>
  422a5e:	42b1      	cmp	r1, r6
  422a60:	f200 80ba 	bhi.w	422bd8 <_malloc_r+0x194>
  422a64:	f000 fbb6 	bl	4231d4 <__malloc_lock>
  422a68:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  422a6c:	f0c0 8293 	bcc.w	422f96 <_malloc_r+0x552>
  422a70:	0a73      	lsrs	r3, r6, #9
  422a72:	f000 80b8 	beq.w	422be6 <_malloc_r+0x1a2>
  422a76:	2b04      	cmp	r3, #4
  422a78:	f200 8179 	bhi.w	422d6e <_malloc_r+0x32a>
  422a7c:	09b3      	lsrs	r3, r6, #6
  422a7e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  422a82:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  422a86:	00c3      	lsls	r3, r0, #3
  422a88:	4fbf      	ldr	r7, [pc, #764]	; (422d88 <_malloc_r+0x344>)
  422a8a:	443b      	add	r3, r7
  422a8c:	f1a3 0108 	sub.w	r1, r3, #8
  422a90:	685c      	ldr	r4, [r3, #4]
  422a92:	42a1      	cmp	r1, r4
  422a94:	d106      	bne.n	422aa4 <_malloc_r+0x60>
  422a96:	e00c      	b.n	422ab2 <_malloc_r+0x6e>
  422a98:	2a00      	cmp	r2, #0
  422a9a:	f280 80aa 	bge.w	422bf2 <_malloc_r+0x1ae>
  422a9e:	68e4      	ldr	r4, [r4, #12]
  422aa0:	42a1      	cmp	r1, r4
  422aa2:	d006      	beq.n	422ab2 <_malloc_r+0x6e>
  422aa4:	6863      	ldr	r3, [r4, #4]
  422aa6:	f023 0303 	bic.w	r3, r3, #3
  422aaa:	1b9a      	subs	r2, r3, r6
  422aac:	2a0f      	cmp	r2, #15
  422aae:	ddf3      	ble.n	422a98 <_malloc_r+0x54>
  422ab0:	4670      	mov	r0, lr
  422ab2:	693c      	ldr	r4, [r7, #16]
  422ab4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 422d9c <_malloc_r+0x358>
  422ab8:	4574      	cmp	r4, lr
  422aba:	f000 81ab 	beq.w	422e14 <_malloc_r+0x3d0>
  422abe:	6863      	ldr	r3, [r4, #4]
  422ac0:	f023 0303 	bic.w	r3, r3, #3
  422ac4:	1b9a      	subs	r2, r3, r6
  422ac6:	2a0f      	cmp	r2, #15
  422ac8:	f300 8190 	bgt.w	422dec <_malloc_r+0x3a8>
  422acc:	2a00      	cmp	r2, #0
  422ace:	f8c7 e014 	str.w	lr, [r7, #20]
  422ad2:	f8c7 e010 	str.w	lr, [r7, #16]
  422ad6:	f280 809d 	bge.w	422c14 <_malloc_r+0x1d0>
  422ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  422ade:	f080 8161 	bcs.w	422da4 <_malloc_r+0x360>
  422ae2:	08db      	lsrs	r3, r3, #3
  422ae4:	f103 0c01 	add.w	ip, r3, #1
  422ae8:	1099      	asrs	r1, r3, #2
  422aea:	687a      	ldr	r2, [r7, #4]
  422aec:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  422af0:	f8c4 8008 	str.w	r8, [r4, #8]
  422af4:	2301      	movs	r3, #1
  422af6:	408b      	lsls	r3, r1
  422af8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  422afc:	4313      	orrs	r3, r2
  422afe:	3908      	subs	r1, #8
  422b00:	60e1      	str	r1, [r4, #12]
  422b02:	607b      	str	r3, [r7, #4]
  422b04:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  422b08:	f8c8 400c 	str.w	r4, [r8, #12]
  422b0c:	1082      	asrs	r2, r0, #2
  422b0e:	2401      	movs	r4, #1
  422b10:	4094      	lsls	r4, r2
  422b12:	429c      	cmp	r4, r3
  422b14:	f200 808b 	bhi.w	422c2e <_malloc_r+0x1ea>
  422b18:	421c      	tst	r4, r3
  422b1a:	d106      	bne.n	422b2a <_malloc_r+0xe6>
  422b1c:	f020 0003 	bic.w	r0, r0, #3
  422b20:	0064      	lsls	r4, r4, #1
  422b22:	421c      	tst	r4, r3
  422b24:	f100 0004 	add.w	r0, r0, #4
  422b28:	d0fa      	beq.n	422b20 <_malloc_r+0xdc>
  422b2a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  422b2e:	46cc      	mov	ip, r9
  422b30:	4680      	mov	r8, r0
  422b32:	f8dc 300c 	ldr.w	r3, [ip, #12]
  422b36:	459c      	cmp	ip, r3
  422b38:	d107      	bne.n	422b4a <_malloc_r+0x106>
  422b3a:	e16d      	b.n	422e18 <_malloc_r+0x3d4>
  422b3c:	2a00      	cmp	r2, #0
  422b3e:	f280 817b 	bge.w	422e38 <_malloc_r+0x3f4>
  422b42:	68db      	ldr	r3, [r3, #12]
  422b44:	459c      	cmp	ip, r3
  422b46:	f000 8167 	beq.w	422e18 <_malloc_r+0x3d4>
  422b4a:	6859      	ldr	r1, [r3, #4]
  422b4c:	f021 0103 	bic.w	r1, r1, #3
  422b50:	1b8a      	subs	r2, r1, r6
  422b52:	2a0f      	cmp	r2, #15
  422b54:	ddf2      	ble.n	422b3c <_malloc_r+0xf8>
  422b56:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  422b5a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  422b5e:	9300      	str	r3, [sp, #0]
  422b60:	199c      	adds	r4, r3, r6
  422b62:	4628      	mov	r0, r5
  422b64:	f046 0601 	orr.w	r6, r6, #1
  422b68:	f042 0501 	orr.w	r5, r2, #1
  422b6c:	605e      	str	r6, [r3, #4]
  422b6e:	f8c8 c00c 	str.w	ip, [r8, #12]
  422b72:	f8cc 8008 	str.w	r8, [ip, #8]
  422b76:	617c      	str	r4, [r7, #20]
  422b78:	613c      	str	r4, [r7, #16]
  422b7a:	f8c4 e00c 	str.w	lr, [r4, #12]
  422b7e:	f8c4 e008 	str.w	lr, [r4, #8]
  422b82:	6065      	str	r5, [r4, #4]
  422b84:	505a      	str	r2, [r3, r1]
  422b86:	f000 fb2b 	bl	4231e0 <__malloc_unlock>
  422b8a:	9b00      	ldr	r3, [sp, #0]
  422b8c:	f103 0408 	add.w	r4, r3, #8
  422b90:	e01e      	b.n	422bd0 <_malloc_r+0x18c>
  422b92:	2910      	cmp	r1, #16
  422b94:	d820      	bhi.n	422bd8 <_malloc_r+0x194>
  422b96:	f000 fb1d 	bl	4231d4 <__malloc_lock>
  422b9a:	2610      	movs	r6, #16
  422b9c:	2318      	movs	r3, #24
  422b9e:	2002      	movs	r0, #2
  422ba0:	4f79      	ldr	r7, [pc, #484]	; (422d88 <_malloc_r+0x344>)
  422ba2:	443b      	add	r3, r7
  422ba4:	f1a3 0208 	sub.w	r2, r3, #8
  422ba8:	685c      	ldr	r4, [r3, #4]
  422baa:	4294      	cmp	r4, r2
  422bac:	f000 813d 	beq.w	422e2a <_malloc_r+0x3e6>
  422bb0:	6863      	ldr	r3, [r4, #4]
  422bb2:	68e1      	ldr	r1, [r4, #12]
  422bb4:	68a6      	ldr	r6, [r4, #8]
  422bb6:	f023 0303 	bic.w	r3, r3, #3
  422bba:	4423      	add	r3, r4
  422bbc:	4628      	mov	r0, r5
  422bbe:	685a      	ldr	r2, [r3, #4]
  422bc0:	60f1      	str	r1, [r6, #12]
  422bc2:	f042 0201 	orr.w	r2, r2, #1
  422bc6:	608e      	str	r6, [r1, #8]
  422bc8:	605a      	str	r2, [r3, #4]
  422bca:	f000 fb09 	bl	4231e0 <__malloc_unlock>
  422bce:	3408      	adds	r4, #8
  422bd0:	4620      	mov	r0, r4
  422bd2:	b003      	add	sp, #12
  422bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422bd8:	2400      	movs	r4, #0
  422bda:	230c      	movs	r3, #12
  422bdc:	4620      	mov	r0, r4
  422bde:	602b      	str	r3, [r5, #0]
  422be0:	b003      	add	sp, #12
  422be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422be6:	2040      	movs	r0, #64	; 0x40
  422be8:	f44f 7300 	mov.w	r3, #512	; 0x200
  422bec:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  422bf0:	e74a      	b.n	422a88 <_malloc_r+0x44>
  422bf2:	4423      	add	r3, r4
  422bf4:	68e1      	ldr	r1, [r4, #12]
  422bf6:	685a      	ldr	r2, [r3, #4]
  422bf8:	68a6      	ldr	r6, [r4, #8]
  422bfa:	f042 0201 	orr.w	r2, r2, #1
  422bfe:	60f1      	str	r1, [r6, #12]
  422c00:	4628      	mov	r0, r5
  422c02:	608e      	str	r6, [r1, #8]
  422c04:	605a      	str	r2, [r3, #4]
  422c06:	f000 faeb 	bl	4231e0 <__malloc_unlock>
  422c0a:	3408      	adds	r4, #8
  422c0c:	4620      	mov	r0, r4
  422c0e:	b003      	add	sp, #12
  422c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422c14:	4423      	add	r3, r4
  422c16:	4628      	mov	r0, r5
  422c18:	685a      	ldr	r2, [r3, #4]
  422c1a:	f042 0201 	orr.w	r2, r2, #1
  422c1e:	605a      	str	r2, [r3, #4]
  422c20:	f000 fade 	bl	4231e0 <__malloc_unlock>
  422c24:	3408      	adds	r4, #8
  422c26:	4620      	mov	r0, r4
  422c28:	b003      	add	sp, #12
  422c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422c2e:	68bc      	ldr	r4, [r7, #8]
  422c30:	6863      	ldr	r3, [r4, #4]
  422c32:	f023 0803 	bic.w	r8, r3, #3
  422c36:	45b0      	cmp	r8, r6
  422c38:	d304      	bcc.n	422c44 <_malloc_r+0x200>
  422c3a:	eba8 0306 	sub.w	r3, r8, r6
  422c3e:	2b0f      	cmp	r3, #15
  422c40:	f300 8085 	bgt.w	422d4e <_malloc_r+0x30a>
  422c44:	f8df 9158 	ldr.w	r9, [pc, #344]	; 422da0 <_malloc_r+0x35c>
  422c48:	4b50      	ldr	r3, [pc, #320]	; (422d8c <_malloc_r+0x348>)
  422c4a:	f8d9 2000 	ldr.w	r2, [r9]
  422c4e:	681b      	ldr	r3, [r3, #0]
  422c50:	3201      	adds	r2, #1
  422c52:	4433      	add	r3, r6
  422c54:	eb04 0a08 	add.w	sl, r4, r8
  422c58:	f000 8155 	beq.w	422f06 <_malloc_r+0x4c2>
  422c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  422c60:	330f      	adds	r3, #15
  422c62:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  422c66:	f02b 0b0f 	bic.w	fp, fp, #15
  422c6a:	4659      	mov	r1, fp
  422c6c:	4628      	mov	r0, r5
  422c6e:	f000 fabd 	bl	4231ec <_sbrk_r>
  422c72:	1c41      	adds	r1, r0, #1
  422c74:	4602      	mov	r2, r0
  422c76:	f000 80fc 	beq.w	422e72 <_malloc_r+0x42e>
  422c7a:	4582      	cmp	sl, r0
  422c7c:	f200 80f7 	bhi.w	422e6e <_malloc_r+0x42a>
  422c80:	4b43      	ldr	r3, [pc, #268]	; (422d90 <_malloc_r+0x34c>)
  422c82:	6819      	ldr	r1, [r3, #0]
  422c84:	4459      	add	r1, fp
  422c86:	6019      	str	r1, [r3, #0]
  422c88:	f000 814d 	beq.w	422f26 <_malloc_r+0x4e2>
  422c8c:	f8d9 0000 	ldr.w	r0, [r9]
  422c90:	3001      	adds	r0, #1
  422c92:	bf1b      	ittet	ne
  422c94:	eba2 0a0a 	subne.w	sl, r2, sl
  422c98:	4451      	addne	r1, sl
  422c9a:	f8c9 2000 	streq.w	r2, [r9]
  422c9e:	6019      	strne	r1, [r3, #0]
  422ca0:	f012 0107 	ands.w	r1, r2, #7
  422ca4:	f000 8115 	beq.w	422ed2 <_malloc_r+0x48e>
  422ca8:	f1c1 0008 	rsb	r0, r1, #8
  422cac:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  422cb0:	4402      	add	r2, r0
  422cb2:	3108      	adds	r1, #8
  422cb4:	eb02 090b 	add.w	r9, r2, fp
  422cb8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  422cbc:	eba1 0909 	sub.w	r9, r1, r9
  422cc0:	4649      	mov	r1, r9
  422cc2:	4628      	mov	r0, r5
  422cc4:	9301      	str	r3, [sp, #4]
  422cc6:	9200      	str	r2, [sp, #0]
  422cc8:	f000 fa90 	bl	4231ec <_sbrk_r>
  422ccc:	1c43      	adds	r3, r0, #1
  422cce:	e89d 000c 	ldmia.w	sp, {r2, r3}
  422cd2:	f000 8143 	beq.w	422f5c <_malloc_r+0x518>
  422cd6:	1a80      	subs	r0, r0, r2
  422cd8:	4448      	add	r0, r9
  422cda:	f040 0001 	orr.w	r0, r0, #1
  422cde:	6819      	ldr	r1, [r3, #0]
  422ce0:	60ba      	str	r2, [r7, #8]
  422ce2:	4449      	add	r1, r9
  422ce4:	42bc      	cmp	r4, r7
  422ce6:	6050      	str	r0, [r2, #4]
  422ce8:	6019      	str	r1, [r3, #0]
  422cea:	d017      	beq.n	422d1c <_malloc_r+0x2d8>
  422cec:	f1b8 0f0f 	cmp.w	r8, #15
  422cf0:	f240 80fb 	bls.w	422eea <_malloc_r+0x4a6>
  422cf4:	6860      	ldr	r0, [r4, #4]
  422cf6:	f1a8 020c 	sub.w	r2, r8, #12
  422cfa:	f022 0207 	bic.w	r2, r2, #7
  422cfe:	eb04 0e02 	add.w	lr, r4, r2
  422d02:	f000 0001 	and.w	r0, r0, #1
  422d06:	f04f 0c05 	mov.w	ip, #5
  422d0a:	4310      	orrs	r0, r2
  422d0c:	2a0f      	cmp	r2, #15
  422d0e:	6060      	str	r0, [r4, #4]
  422d10:	f8ce c004 	str.w	ip, [lr, #4]
  422d14:	f8ce c008 	str.w	ip, [lr, #8]
  422d18:	f200 8117 	bhi.w	422f4a <_malloc_r+0x506>
  422d1c:	4b1d      	ldr	r3, [pc, #116]	; (422d94 <_malloc_r+0x350>)
  422d1e:	68bc      	ldr	r4, [r7, #8]
  422d20:	681a      	ldr	r2, [r3, #0]
  422d22:	4291      	cmp	r1, r2
  422d24:	bf88      	it	hi
  422d26:	6019      	strhi	r1, [r3, #0]
  422d28:	4b1b      	ldr	r3, [pc, #108]	; (422d98 <_malloc_r+0x354>)
  422d2a:	681a      	ldr	r2, [r3, #0]
  422d2c:	4291      	cmp	r1, r2
  422d2e:	6862      	ldr	r2, [r4, #4]
  422d30:	bf88      	it	hi
  422d32:	6019      	strhi	r1, [r3, #0]
  422d34:	f022 0203 	bic.w	r2, r2, #3
  422d38:	4296      	cmp	r6, r2
  422d3a:	eba2 0306 	sub.w	r3, r2, r6
  422d3e:	d801      	bhi.n	422d44 <_malloc_r+0x300>
  422d40:	2b0f      	cmp	r3, #15
  422d42:	dc04      	bgt.n	422d4e <_malloc_r+0x30a>
  422d44:	4628      	mov	r0, r5
  422d46:	f000 fa4b 	bl	4231e0 <__malloc_unlock>
  422d4a:	2400      	movs	r4, #0
  422d4c:	e740      	b.n	422bd0 <_malloc_r+0x18c>
  422d4e:	19a2      	adds	r2, r4, r6
  422d50:	f043 0301 	orr.w	r3, r3, #1
  422d54:	f046 0601 	orr.w	r6, r6, #1
  422d58:	6066      	str	r6, [r4, #4]
  422d5a:	4628      	mov	r0, r5
  422d5c:	60ba      	str	r2, [r7, #8]
  422d5e:	6053      	str	r3, [r2, #4]
  422d60:	f000 fa3e 	bl	4231e0 <__malloc_unlock>
  422d64:	3408      	adds	r4, #8
  422d66:	4620      	mov	r0, r4
  422d68:	b003      	add	sp, #12
  422d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422d6e:	2b14      	cmp	r3, #20
  422d70:	d971      	bls.n	422e56 <_malloc_r+0x412>
  422d72:	2b54      	cmp	r3, #84	; 0x54
  422d74:	f200 80a3 	bhi.w	422ebe <_malloc_r+0x47a>
  422d78:	0b33      	lsrs	r3, r6, #12
  422d7a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  422d7e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  422d82:	00c3      	lsls	r3, r0, #3
  422d84:	e680      	b.n	422a88 <_malloc_r+0x44>
  422d86:	bf00      	nop
  422d88:	204004f0 	.word	0x204004f0
  422d8c:	2043a078 	.word	0x2043a078
  422d90:	2043a048 	.word	0x2043a048
  422d94:	2043a070 	.word	0x2043a070
  422d98:	2043a074 	.word	0x2043a074
  422d9c:	204004f8 	.word	0x204004f8
  422da0:	204008f8 	.word	0x204008f8
  422da4:	0a5a      	lsrs	r2, r3, #9
  422da6:	2a04      	cmp	r2, #4
  422da8:	d95b      	bls.n	422e62 <_malloc_r+0x41e>
  422daa:	2a14      	cmp	r2, #20
  422dac:	f200 80ae 	bhi.w	422f0c <_malloc_r+0x4c8>
  422db0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  422db4:	00c9      	lsls	r1, r1, #3
  422db6:	325b      	adds	r2, #91	; 0x5b
  422db8:	eb07 0c01 	add.w	ip, r7, r1
  422dbc:	5879      	ldr	r1, [r7, r1]
  422dbe:	f1ac 0c08 	sub.w	ip, ip, #8
  422dc2:	458c      	cmp	ip, r1
  422dc4:	f000 8088 	beq.w	422ed8 <_malloc_r+0x494>
  422dc8:	684a      	ldr	r2, [r1, #4]
  422dca:	f022 0203 	bic.w	r2, r2, #3
  422dce:	4293      	cmp	r3, r2
  422dd0:	d273      	bcs.n	422eba <_malloc_r+0x476>
  422dd2:	6889      	ldr	r1, [r1, #8]
  422dd4:	458c      	cmp	ip, r1
  422dd6:	d1f7      	bne.n	422dc8 <_malloc_r+0x384>
  422dd8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  422ddc:	687b      	ldr	r3, [r7, #4]
  422dde:	60e2      	str	r2, [r4, #12]
  422de0:	f8c4 c008 	str.w	ip, [r4, #8]
  422de4:	6094      	str	r4, [r2, #8]
  422de6:	f8cc 400c 	str.w	r4, [ip, #12]
  422dea:	e68f      	b.n	422b0c <_malloc_r+0xc8>
  422dec:	19a1      	adds	r1, r4, r6
  422dee:	f046 0c01 	orr.w	ip, r6, #1
  422df2:	f042 0601 	orr.w	r6, r2, #1
  422df6:	f8c4 c004 	str.w	ip, [r4, #4]
  422dfa:	4628      	mov	r0, r5
  422dfc:	6179      	str	r1, [r7, #20]
  422dfe:	6139      	str	r1, [r7, #16]
  422e00:	f8c1 e00c 	str.w	lr, [r1, #12]
  422e04:	f8c1 e008 	str.w	lr, [r1, #8]
  422e08:	604e      	str	r6, [r1, #4]
  422e0a:	50e2      	str	r2, [r4, r3]
  422e0c:	f000 f9e8 	bl	4231e0 <__malloc_unlock>
  422e10:	3408      	adds	r4, #8
  422e12:	e6dd      	b.n	422bd0 <_malloc_r+0x18c>
  422e14:	687b      	ldr	r3, [r7, #4]
  422e16:	e679      	b.n	422b0c <_malloc_r+0xc8>
  422e18:	f108 0801 	add.w	r8, r8, #1
  422e1c:	f018 0f03 	tst.w	r8, #3
  422e20:	f10c 0c08 	add.w	ip, ip, #8
  422e24:	f47f ae85 	bne.w	422b32 <_malloc_r+0xee>
  422e28:	e02d      	b.n	422e86 <_malloc_r+0x442>
  422e2a:	68dc      	ldr	r4, [r3, #12]
  422e2c:	42a3      	cmp	r3, r4
  422e2e:	bf08      	it	eq
  422e30:	3002      	addeq	r0, #2
  422e32:	f43f ae3e 	beq.w	422ab2 <_malloc_r+0x6e>
  422e36:	e6bb      	b.n	422bb0 <_malloc_r+0x16c>
  422e38:	4419      	add	r1, r3
  422e3a:	461c      	mov	r4, r3
  422e3c:	684a      	ldr	r2, [r1, #4]
  422e3e:	68db      	ldr	r3, [r3, #12]
  422e40:	f854 6f08 	ldr.w	r6, [r4, #8]!
  422e44:	f042 0201 	orr.w	r2, r2, #1
  422e48:	604a      	str	r2, [r1, #4]
  422e4a:	4628      	mov	r0, r5
  422e4c:	60f3      	str	r3, [r6, #12]
  422e4e:	609e      	str	r6, [r3, #8]
  422e50:	f000 f9c6 	bl	4231e0 <__malloc_unlock>
  422e54:	e6bc      	b.n	422bd0 <_malloc_r+0x18c>
  422e56:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  422e5a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  422e5e:	00c3      	lsls	r3, r0, #3
  422e60:	e612      	b.n	422a88 <_malloc_r+0x44>
  422e62:	099a      	lsrs	r2, r3, #6
  422e64:	f102 0139 	add.w	r1, r2, #57	; 0x39
  422e68:	00c9      	lsls	r1, r1, #3
  422e6a:	3238      	adds	r2, #56	; 0x38
  422e6c:	e7a4      	b.n	422db8 <_malloc_r+0x374>
  422e6e:	42bc      	cmp	r4, r7
  422e70:	d054      	beq.n	422f1c <_malloc_r+0x4d8>
  422e72:	68bc      	ldr	r4, [r7, #8]
  422e74:	6862      	ldr	r2, [r4, #4]
  422e76:	f022 0203 	bic.w	r2, r2, #3
  422e7a:	e75d      	b.n	422d38 <_malloc_r+0x2f4>
  422e7c:	f859 3908 	ldr.w	r3, [r9], #-8
  422e80:	4599      	cmp	r9, r3
  422e82:	f040 8086 	bne.w	422f92 <_malloc_r+0x54e>
  422e86:	f010 0f03 	tst.w	r0, #3
  422e8a:	f100 30ff 	add.w	r0, r0, #4294967295
  422e8e:	d1f5      	bne.n	422e7c <_malloc_r+0x438>
  422e90:	687b      	ldr	r3, [r7, #4]
  422e92:	ea23 0304 	bic.w	r3, r3, r4
  422e96:	607b      	str	r3, [r7, #4]
  422e98:	0064      	lsls	r4, r4, #1
  422e9a:	429c      	cmp	r4, r3
  422e9c:	f63f aec7 	bhi.w	422c2e <_malloc_r+0x1ea>
  422ea0:	2c00      	cmp	r4, #0
  422ea2:	f43f aec4 	beq.w	422c2e <_malloc_r+0x1ea>
  422ea6:	421c      	tst	r4, r3
  422ea8:	4640      	mov	r0, r8
  422eaa:	f47f ae3e 	bne.w	422b2a <_malloc_r+0xe6>
  422eae:	0064      	lsls	r4, r4, #1
  422eb0:	421c      	tst	r4, r3
  422eb2:	f100 0004 	add.w	r0, r0, #4
  422eb6:	d0fa      	beq.n	422eae <_malloc_r+0x46a>
  422eb8:	e637      	b.n	422b2a <_malloc_r+0xe6>
  422eba:	468c      	mov	ip, r1
  422ebc:	e78c      	b.n	422dd8 <_malloc_r+0x394>
  422ebe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  422ec2:	d815      	bhi.n	422ef0 <_malloc_r+0x4ac>
  422ec4:	0bf3      	lsrs	r3, r6, #15
  422ec6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  422eca:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  422ece:	00c3      	lsls	r3, r0, #3
  422ed0:	e5da      	b.n	422a88 <_malloc_r+0x44>
  422ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  422ed6:	e6ed      	b.n	422cb4 <_malloc_r+0x270>
  422ed8:	687b      	ldr	r3, [r7, #4]
  422eda:	1092      	asrs	r2, r2, #2
  422edc:	2101      	movs	r1, #1
  422ede:	fa01 f202 	lsl.w	r2, r1, r2
  422ee2:	4313      	orrs	r3, r2
  422ee4:	607b      	str	r3, [r7, #4]
  422ee6:	4662      	mov	r2, ip
  422ee8:	e779      	b.n	422dde <_malloc_r+0x39a>
  422eea:	2301      	movs	r3, #1
  422eec:	6053      	str	r3, [r2, #4]
  422eee:	e729      	b.n	422d44 <_malloc_r+0x300>
  422ef0:	f240 5254 	movw	r2, #1364	; 0x554
  422ef4:	4293      	cmp	r3, r2
  422ef6:	d822      	bhi.n	422f3e <_malloc_r+0x4fa>
  422ef8:	0cb3      	lsrs	r3, r6, #18
  422efa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  422efe:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  422f02:	00c3      	lsls	r3, r0, #3
  422f04:	e5c0      	b.n	422a88 <_malloc_r+0x44>
  422f06:	f103 0b10 	add.w	fp, r3, #16
  422f0a:	e6ae      	b.n	422c6a <_malloc_r+0x226>
  422f0c:	2a54      	cmp	r2, #84	; 0x54
  422f0e:	d829      	bhi.n	422f64 <_malloc_r+0x520>
  422f10:	0b1a      	lsrs	r2, r3, #12
  422f12:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  422f16:	00c9      	lsls	r1, r1, #3
  422f18:	326e      	adds	r2, #110	; 0x6e
  422f1a:	e74d      	b.n	422db8 <_malloc_r+0x374>
  422f1c:	4b20      	ldr	r3, [pc, #128]	; (422fa0 <_malloc_r+0x55c>)
  422f1e:	6819      	ldr	r1, [r3, #0]
  422f20:	4459      	add	r1, fp
  422f22:	6019      	str	r1, [r3, #0]
  422f24:	e6b2      	b.n	422c8c <_malloc_r+0x248>
  422f26:	f3ca 000b 	ubfx	r0, sl, #0, #12
  422f2a:	2800      	cmp	r0, #0
  422f2c:	f47f aeae 	bne.w	422c8c <_malloc_r+0x248>
  422f30:	eb08 030b 	add.w	r3, r8, fp
  422f34:	68ba      	ldr	r2, [r7, #8]
  422f36:	f043 0301 	orr.w	r3, r3, #1
  422f3a:	6053      	str	r3, [r2, #4]
  422f3c:	e6ee      	b.n	422d1c <_malloc_r+0x2d8>
  422f3e:	207f      	movs	r0, #127	; 0x7f
  422f40:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  422f44:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  422f48:	e59e      	b.n	422a88 <_malloc_r+0x44>
  422f4a:	f104 0108 	add.w	r1, r4, #8
  422f4e:	4628      	mov	r0, r5
  422f50:	9300      	str	r3, [sp, #0]
  422f52:	f001 fddf 	bl	424b14 <_free_r>
  422f56:	9b00      	ldr	r3, [sp, #0]
  422f58:	6819      	ldr	r1, [r3, #0]
  422f5a:	e6df      	b.n	422d1c <_malloc_r+0x2d8>
  422f5c:	2001      	movs	r0, #1
  422f5e:	f04f 0900 	mov.w	r9, #0
  422f62:	e6bc      	b.n	422cde <_malloc_r+0x29a>
  422f64:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  422f68:	d805      	bhi.n	422f76 <_malloc_r+0x532>
  422f6a:	0bda      	lsrs	r2, r3, #15
  422f6c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  422f70:	00c9      	lsls	r1, r1, #3
  422f72:	3277      	adds	r2, #119	; 0x77
  422f74:	e720      	b.n	422db8 <_malloc_r+0x374>
  422f76:	f240 5154 	movw	r1, #1364	; 0x554
  422f7a:	428a      	cmp	r2, r1
  422f7c:	d805      	bhi.n	422f8a <_malloc_r+0x546>
  422f7e:	0c9a      	lsrs	r2, r3, #18
  422f80:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  422f84:	00c9      	lsls	r1, r1, #3
  422f86:	327c      	adds	r2, #124	; 0x7c
  422f88:	e716      	b.n	422db8 <_malloc_r+0x374>
  422f8a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  422f8e:	227e      	movs	r2, #126	; 0x7e
  422f90:	e712      	b.n	422db8 <_malloc_r+0x374>
  422f92:	687b      	ldr	r3, [r7, #4]
  422f94:	e780      	b.n	422e98 <_malloc_r+0x454>
  422f96:	08f0      	lsrs	r0, r6, #3
  422f98:	f106 0308 	add.w	r3, r6, #8
  422f9c:	e600      	b.n	422ba0 <_malloc_r+0x15c>
  422f9e:	bf00      	nop
  422fa0:	2043a048 	.word	0x2043a048

00422fa4 <memcmp>:
  422fa4:	2a03      	cmp	r2, #3
  422fa6:	b470      	push	{r4, r5, r6}
  422fa8:	d922      	bls.n	422ff0 <memcmp+0x4c>
  422faa:	ea40 0301 	orr.w	r3, r0, r1
  422fae:	079b      	lsls	r3, r3, #30
  422fb0:	d011      	beq.n	422fd6 <memcmp+0x32>
  422fb2:	7803      	ldrb	r3, [r0, #0]
  422fb4:	780c      	ldrb	r4, [r1, #0]
  422fb6:	42a3      	cmp	r3, r4
  422fb8:	d11d      	bne.n	422ff6 <memcmp+0x52>
  422fba:	440a      	add	r2, r1
  422fbc:	3101      	adds	r1, #1
  422fbe:	e005      	b.n	422fcc <memcmp+0x28>
  422fc0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  422fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
  422fc8:	42a3      	cmp	r3, r4
  422fca:	d114      	bne.n	422ff6 <memcmp+0x52>
  422fcc:	4291      	cmp	r1, r2
  422fce:	d1f7      	bne.n	422fc0 <memcmp+0x1c>
  422fd0:	2000      	movs	r0, #0
  422fd2:	bc70      	pop	{r4, r5, r6}
  422fd4:	4770      	bx	lr
  422fd6:	680d      	ldr	r5, [r1, #0]
  422fd8:	6806      	ldr	r6, [r0, #0]
  422fda:	42ae      	cmp	r6, r5
  422fdc:	460c      	mov	r4, r1
  422fde:	4603      	mov	r3, r0
  422fe0:	f101 0104 	add.w	r1, r1, #4
  422fe4:	f100 0004 	add.w	r0, r0, #4
  422fe8:	d108      	bne.n	422ffc <memcmp+0x58>
  422fea:	3a04      	subs	r2, #4
  422fec:	2a03      	cmp	r2, #3
  422fee:	d8f2      	bhi.n	422fd6 <memcmp+0x32>
  422ff0:	2a00      	cmp	r2, #0
  422ff2:	d1de      	bne.n	422fb2 <memcmp+0xe>
  422ff4:	e7ec      	b.n	422fd0 <memcmp+0x2c>
  422ff6:	1b18      	subs	r0, r3, r4
  422ff8:	bc70      	pop	{r4, r5, r6}
  422ffa:	4770      	bx	lr
  422ffc:	4621      	mov	r1, r4
  422ffe:	4618      	mov	r0, r3
  423000:	e7d7      	b.n	422fb2 <memcmp+0xe>
  423002:	bf00      	nop

00423004 <memcpy>:
  423004:	4684      	mov	ip, r0
  423006:	ea41 0300 	orr.w	r3, r1, r0
  42300a:	f013 0303 	ands.w	r3, r3, #3
  42300e:	d16d      	bne.n	4230ec <memcpy+0xe8>
  423010:	3a40      	subs	r2, #64	; 0x40
  423012:	d341      	bcc.n	423098 <memcpy+0x94>
  423014:	f851 3b04 	ldr.w	r3, [r1], #4
  423018:	f840 3b04 	str.w	r3, [r0], #4
  42301c:	f851 3b04 	ldr.w	r3, [r1], #4
  423020:	f840 3b04 	str.w	r3, [r0], #4
  423024:	f851 3b04 	ldr.w	r3, [r1], #4
  423028:	f840 3b04 	str.w	r3, [r0], #4
  42302c:	f851 3b04 	ldr.w	r3, [r1], #4
  423030:	f840 3b04 	str.w	r3, [r0], #4
  423034:	f851 3b04 	ldr.w	r3, [r1], #4
  423038:	f840 3b04 	str.w	r3, [r0], #4
  42303c:	f851 3b04 	ldr.w	r3, [r1], #4
  423040:	f840 3b04 	str.w	r3, [r0], #4
  423044:	f851 3b04 	ldr.w	r3, [r1], #4
  423048:	f840 3b04 	str.w	r3, [r0], #4
  42304c:	f851 3b04 	ldr.w	r3, [r1], #4
  423050:	f840 3b04 	str.w	r3, [r0], #4
  423054:	f851 3b04 	ldr.w	r3, [r1], #4
  423058:	f840 3b04 	str.w	r3, [r0], #4
  42305c:	f851 3b04 	ldr.w	r3, [r1], #4
  423060:	f840 3b04 	str.w	r3, [r0], #4
  423064:	f851 3b04 	ldr.w	r3, [r1], #4
  423068:	f840 3b04 	str.w	r3, [r0], #4
  42306c:	f851 3b04 	ldr.w	r3, [r1], #4
  423070:	f840 3b04 	str.w	r3, [r0], #4
  423074:	f851 3b04 	ldr.w	r3, [r1], #4
  423078:	f840 3b04 	str.w	r3, [r0], #4
  42307c:	f851 3b04 	ldr.w	r3, [r1], #4
  423080:	f840 3b04 	str.w	r3, [r0], #4
  423084:	f851 3b04 	ldr.w	r3, [r1], #4
  423088:	f840 3b04 	str.w	r3, [r0], #4
  42308c:	f851 3b04 	ldr.w	r3, [r1], #4
  423090:	f840 3b04 	str.w	r3, [r0], #4
  423094:	3a40      	subs	r2, #64	; 0x40
  423096:	d2bd      	bcs.n	423014 <memcpy+0x10>
  423098:	3230      	adds	r2, #48	; 0x30
  42309a:	d311      	bcc.n	4230c0 <memcpy+0xbc>
  42309c:	f851 3b04 	ldr.w	r3, [r1], #4
  4230a0:	f840 3b04 	str.w	r3, [r0], #4
  4230a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4230a8:	f840 3b04 	str.w	r3, [r0], #4
  4230ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4230b0:	f840 3b04 	str.w	r3, [r0], #4
  4230b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4230b8:	f840 3b04 	str.w	r3, [r0], #4
  4230bc:	3a10      	subs	r2, #16
  4230be:	d2ed      	bcs.n	42309c <memcpy+0x98>
  4230c0:	320c      	adds	r2, #12
  4230c2:	d305      	bcc.n	4230d0 <memcpy+0xcc>
  4230c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4230c8:	f840 3b04 	str.w	r3, [r0], #4
  4230cc:	3a04      	subs	r2, #4
  4230ce:	d2f9      	bcs.n	4230c4 <memcpy+0xc0>
  4230d0:	3204      	adds	r2, #4
  4230d2:	d008      	beq.n	4230e6 <memcpy+0xe2>
  4230d4:	07d2      	lsls	r2, r2, #31
  4230d6:	bf1c      	itt	ne
  4230d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4230dc:	f800 3b01 	strbne.w	r3, [r0], #1
  4230e0:	d301      	bcc.n	4230e6 <memcpy+0xe2>
  4230e2:	880b      	ldrh	r3, [r1, #0]
  4230e4:	8003      	strh	r3, [r0, #0]
  4230e6:	4660      	mov	r0, ip
  4230e8:	4770      	bx	lr
  4230ea:	bf00      	nop
  4230ec:	2a08      	cmp	r2, #8
  4230ee:	d313      	bcc.n	423118 <memcpy+0x114>
  4230f0:	078b      	lsls	r3, r1, #30
  4230f2:	d08d      	beq.n	423010 <memcpy+0xc>
  4230f4:	f010 0303 	ands.w	r3, r0, #3
  4230f8:	d08a      	beq.n	423010 <memcpy+0xc>
  4230fa:	f1c3 0304 	rsb	r3, r3, #4
  4230fe:	1ad2      	subs	r2, r2, r3
  423100:	07db      	lsls	r3, r3, #31
  423102:	bf1c      	itt	ne
  423104:	f811 3b01 	ldrbne.w	r3, [r1], #1
  423108:	f800 3b01 	strbne.w	r3, [r0], #1
  42310c:	d380      	bcc.n	423010 <memcpy+0xc>
  42310e:	f831 3b02 	ldrh.w	r3, [r1], #2
  423112:	f820 3b02 	strh.w	r3, [r0], #2
  423116:	e77b      	b.n	423010 <memcpy+0xc>
  423118:	3a04      	subs	r2, #4
  42311a:	d3d9      	bcc.n	4230d0 <memcpy+0xcc>
  42311c:	3a01      	subs	r2, #1
  42311e:	f811 3b01 	ldrb.w	r3, [r1], #1
  423122:	f800 3b01 	strb.w	r3, [r0], #1
  423126:	d2f9      	bcs.n	42311c <memcpy+0x118>
  423128:	780b      	ldrb	r3, [r1, #0]
  42312a:	7003      	strb	r3, [r0, #0]
  42312c:	784b      	ldrb	r3, [r1, #1]
  42312e:	7043      	strb	r3, [r0, #1]
  423130:	788b      	ldrb	r3, [r1, #2]
  423132:	7083      	strb	r3, [r0, #2]
  423134:	4660      	mov	r0, ip
  423136:	4770      	bx	lr

00423138 <memset>:
  423138:	b470      	push	{r4, r5, r6}
  42313a:	0786      	lsls	r6, r0, #30
  42313c:	d046      	beq.n	4231cc <memset+0x94>
  42313e:	1e54      	subs	r4, r2, #1
  423140:	2a00      	cmp	r2, #0
  423142:	d041      	beq.n	4231c8 <memset+0x90>
  423144:	b2ca      	uxtb	r2, r1
  423146:	4603      	mov	r3, r0
  423148:	e002      	b.n	423150 <memset+0x18>
  42314a:	f114 34ff 	adds.w	r4, r4, #4294967295
  42314e:	d33b      	bcc.n	4231c8 <memset+0x90>
  423150:	f803 2b01 	strb.w	r2, [r3], #1
  423154:	079d      	lsls	r5, r3, #30
  423156:	d1f8      	bne.n	42314a <memset+0x12>
  423158:	2c03      	cmp	r4, #3
  42315a:	d92e      	bls.n	4231ba <memset+0x82>
  42315c:	b2cd      	uxtb	r5, r1
  42315e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  423162:	2c0f      	cmp	r4, #15
  423164:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  423168:	d919      	bls.n	42319e <memset+0x66>
  42316a:	f103 0210 	add.w	r2, r3, #16
  42316e:	4626      	mov	r6, r4
  423170:	3e10      	subs	r6, #16
  423172:	2e0f      	cmp	r6, #15
  423174:	f842 5c10 	str.w	r5, [r2, #-16]
  423178:	f842 5c0c 	str.w	r5, [r2, #-12]
  42317c:	f842 5c08 	str.w	r5, [r2, #-8]
  423180:	f842 5c04 	str.w	r5, [r2, #-4]
  423184:	f102 0210 	add.w	r2, r2, #16
  423188:	d8f2      	bhi.n	423170 <memset+0x38>
  42318a:	f1a4 0210 	sub.w	r2, r4, #16
  42318e:	f022 020f 	bic.w	r2, r2, #15
  423192:	f004 040f 	and.w	r4, r4, #15
  423196:	3210      	adds	r2, #16
  423198:	2c03      	cmp	r4, #3
  42319a:	4413      	add	r3, r2
  42319c:	d90d      	bls.n	4231ba <memset+0x82>
  42319e:	461e      	mov	r6, r3
  4231a0:	4622      	mov	r2, r4
  4231a2:	3a04      	subs	r2, #4
  4231a4:	2a03      	cmp	r2, #3
  4231a6:	f846 5b04 	str.w	r5, [r6], #4
  4231aa:	d8fa      	bhi.n	4231a2 <memset+0x6a>
  4231ac:	1f22      	subs	r2, r4, #4
  4231ae:	f022 0203 	bic.w	r2, r2, #3
  4231b2:	3204      	adds	r2, #4
  4231b4:	4413      	add	r3, r2
  4231b6:	f004 0403 	and.w	r4, r4, #3
  4231ba:	b12c      	cbz	r4, 4231c8 <memset+0x90>
  4231bc:	b2c9      	uxtb	r1, r1
  4231be:	441c      	add	r4, r3
  4231c0:	f803 1b01 	strb.w	r1, [r3], #1
  4231c4:	429c      	cmp	r4, r3
  4231c6:	d1fb      	bne.n	4231c0 <memset+0x88>
  4231c8:	bc70      	pop	{r4, r5, r6}
  4231ca:	4770      	bx	lr
  4231cc:	4614      	mov	r4, r2
  4231ce:	4603      	mov	r3, r0
  4231d0:	e7c2      	b.n	423158 <memset+0x20>
  4231d2:	bf00      	nop

004231d4 <__malloc_lock>:
  4231d4:	4801      	ldr	r0, [pc, #4]	; (4231dc <__malloc_lock+0x8>)
  4231d6:	f001 bf37 	b.w	425048 <__retarget_lock_acquire_recursive>
  4231da:	bf00      	nop
  4231dc:	2043a320 	.word	0x2043a320

004231e0 <__malloc_unlock>:
  4231e0:	4801      	ldr	r0, [pc, #4]	; (4231e8 <__malloc_unlock+0x8>)
  4231e2:	f001 bf33 	b.w	42504c <__retarget_lock_release_recursive>
  4231e6:	bf00      	nop
  4231e8:	2043a320 	.word	0x2043a320

004231ec <_sbrk_r>:
  4231ec:	b538      	push	{r3, r4, r5, lr}
  4231ee:	4c07      	ldr	r4, [pc, #28]	; (42320c <_sbrk_r+0x20>)
  4231f0:	2300      	movs	r3, #0
  4231f2:	4605      	mov	r5, r0
  4231f4:	4608      	mov	r0, r1
  4231f6:	6023      	str	r3, [r4, #0]
  4231f8:	f7fe fba2 	bl	421940 <_sbrk>
  4231fc:	1c43      	adds	r3, r0, #1
  4231fe:	d000      	beq.n	423202 <_sbrk_r+0x16>
  423200:	bd38      	pop	{r3, r4, r5, pc}
  423202:	6823      	ldr	r3, [r4, #0]
  423204:	2b00      	cmp	r3, #0
  423206:	d0fb      	beq.n	423200 <_sbrk_r+0x14>
  423208:	602b      	str	r3, [r5, #0]
  42320a:	bd38      	pop	{r3, r4, r5, pc}
  42320c:	2043a334 	.word	0x2043a334

00423210 <setbuf>:
  423210:	2900      	cmp	r1, #0
  423212:	bf0c      	ite	eq
  423214:	2202      	moveq	r2, #2
  423216:	2200      	movne	r2, #0
  423218:	f44f 6380 	mov.w	r3, #1024	; 0x400
  42321c:	f000 b800 	b.w	423220 <setvbuf>

00423220 <setvbuf>:
  423220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  423224:	4c61      	ldr	r4, [pc, #388]	; (4233ac <setvbuf+0x18c>)
  423226:	6825      	ldr	r5, [r4, #0]
  423228:	b083      	sub	sp, #12
  42322a:	4604      	mov	r4, r0
  42322c:	460f      	mov	r7, r1
  42322e:	4690      	mov	r8, r2
  423230:	461e      	mov	r6, r3
  423232:	b115      	cbz	r5, 42323a <setvbuf+0x1a>
  423234:	6bab      	ldr	r3, [r5, #56]	; 0x38
  423236:	2b00      	cmp	r3, #0
  423238:	d064      	beq.n	423304 <setvbuf+0xe4>
  42323a:	f1b8 0f02 	cmp.w	r8, #2
  42323e:	d006      	beq.n	42324e <setvbuf+0x2e>
  423240:	f1b8 0f01 	cmp.w	r8, #1
  423244:	f200 809f 	bhi.w	423386 <setvbuf+0x166>
  423248:	2e00      	cmp	r6, #0
  42324a:	f2c0 809c 	blt.w	423386 <setvbuf+0x166>
  42324e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  423250:	07d8      	lsls	r0, r3, #31
  423252:	d534      	bpl.n	4232be <setvbuf+0x9e>
  423254:	4621      	mov	r1, r4
  423256:	4628      	mov	r0, r5
  423258:	f001 fade 	bl	424818 <_fflush_r>
  42325c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  42325e:	b141      	cbz	r1, 423272 <setvbuf+0x52>
  423260:	f104 0340 	add.w	r3, r4, #64	; 0x40
  423264:	4299      	cmp	r1, r3
  423266:	d002      	beq.n	42326e <setvbuf+0x4e>
  423268:	4628      	mov	r0, r5
  42326a:	f001 fc53 	bl	424b14 <_free_r>
  42326e:	2300      	movs	r3, #0
  423270:	6323      	str	r3, [r4, #48]	; 0x30
  423272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  423276:	2200      	movs	r2, #0
  423278:	61a2      	str	r2, [r4, #24]
  42327a:	6062      	str	r2, [r4, #4]
  42327c:	061a      	lsls	r2, r3, #24
  42327e:	d43a      	bmi.n	4232f6 <setvbuf+0xd6>
  423280:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  423284:	f023 0303 	bic.w	r3, r3, #3
  423288:	f1b8 0f02 	cmp.w	r8, #2
  42328c:	81a3      	strh	r3, [r4, #12]
  42328e:	d01d      	beq.n	4232cc <setvbuf+0xac>
  423290:	ab01      	add	r3, sp, #4
  423292:	466a      	mov	r2, sp
  423294:	4621      	mov	r1, r4
  423296:	4628      	mov	r0, r5
  423298:	f001 feda 	bl	425050 <__swhatbuf_r>
  42329c:	89a3      	ldrh	r3, [r4, #12]
  42329e:	4318      	orrs	r0, r3
  4232a0:	81a0      	strh	r0, [r4, #12]
  4232a2:	2e00      	cmp	r6, #0
  4232a4:	d132      	bne.n	42330c <setvbuf+0xec>
  4232a6:	9e00      	ldr	r6, [sp, #0]
  4232a8:	4630      	mov	r0, r6
  4232aa:	f7ff fbc3 	bl	422a34 <malloc>
  4232ae:	4607      	mov	r7, r0
  4232b0:	2800      	cmp	r0, #0
  4232b2:	d06b      	beq.n	42338c <setvbuf+0x16c>
  4232b4:	89a3      	ldrh	r3, [r4, #12]
  4232b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4232ba:	81a3      	strh	r3, [r4, #12]
  4232bc:	e028      	b.n	423310 <setvbuf+0xf0>
  4232be:	89a3      	ldrh	r3, [r4, #12]
  4232c0:	0599      	lsls	r1, r3, #22
  4232c2:	d4c7      	bmi.n	423254 <setvbuf+0x34>
  4232c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4232c6:	f001 febf 	bl	425048 <__retarget_lock_acquire_recursive>
  4232ca:	e7c3      	b.n	423254 <setvbuf+0x34>
  4232cc:	2500      	movs	r5, #0
  4232ce:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4232d0:	2600      	movs	r6, #0
  4232d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4232d6:	f043 0302 	orr.w	r3, r3, #2
  4232da:	2001      	movs	r0, #1
  4232dc:	60a6      	str	r6, [r4, #8]
  4232de:	07ce      	lsls	r6, r1, #31
  4232e0:	81a3      	strh	r3, [r4, #12]
  4232e2:	6022      	str	r2, [r4, #0]
  4232e4:	6122      	str	r2, [r4, #16]
  4232e6:	6160      	str	r0, [r4, #20]
  4232e8:	d401      	bmi.n	4232ee <setvbuf+0xce>
  4232ea:	0598      	lsls	r0, r3, #22
  4232ec:	d53e      	bpl.n	42336c <setvbuf+0x14c>
  4232ee:	4628      	mov	r0, r5
  4232f0:	b003      	add	sp, #12
  4232f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4232f6:	6921      	ldr	r1, [r4, #16]
  4232f8:	4628      	mov	r0, r5
  4232fa:	f001 fc0b 	bl	424b14 <_free_r>
  4232fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  423302:	e7bd      	b.n	423280 <setvbuf+0x60>
  423304:	4628      	mov	r0, r5
  423306:	f001 fadf 	bl	4248c8 <__sinit>
  42330a:	e796      	b.n	42323a <setvbuf+0x1a>
  42330c:	2f00      	cmp	r7, #0
  42330e:	d0cb      	beq.n	4232a8 <setvbuf+0x88>
  423310:	6bab      	ldr	r3, [r5, #56]	; 0x38
  423312:	2b00      	cmp	r3, #0
  423314:	d033      	beq.n	42337e <setvbuf+0x15e>
  423316:	9b00      	ldr	r3, [sp, #0]
  423318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42331c:	6027      	str	r7, [r4, #0]
  42331e:	429e      	cmp	r6, r3
  423320:	bf1c      	itt	ne
  423322:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  423326:	81a2      	strhne	r2, [r4, #12]
  423328:	f1b8 0f01 	cmp.w	r8, #1
  42332c:	bf04      	itt	eq
  42332e:	f042 0201 	orreq.w	r2, r2, #1
  423332:	81a2      	strheq	r2, [r4, #12]
  423334:	b292      	uxth	r2, r2
  423336:	f012 0308 	ands.w	r3, r2, #8
  42333a:	6127      	str	r7, [r4, #16]
  42333c:	6166      	str	r6, [r4, #20]
  42333e:	d00e      	beq.n	42335e <setvbuf+0x13e>
  423340:	07d1      	lsls	r1, r2, #31
  423342:	d51a      	bpl.n	42337a <setvbuf+0x15a>
  423344:	6e65      	ldr	r5, [r4, #100]	; 0x64
  423346:	4276      	negs	r6, r6
  423348:	2300      	movs	r3, #0
  42334a:	f015 0501 	ands.w	r5, r5, #1
  42334e:	61a6      	str	r6, [r4, #24]
  423350:	60a3      	str	r3, [r4, #8]
  423352:	d009      	beq.n	423368 <setvbuf+0x148>
  423354:	2500      	movs	r5, #0
  423356:	4628      	mov	r0, r5
  423358:	b003      	add	sp, #12
  42335a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  42335e:	60a3      	str	r3, [r4, #8]
  423360:	6e65      	ldr	r5, [r4, #100]	; 0x64
  423362:	f015 0501 	ands.w	r5, r5, #1
  423366:	d1f5      	bne.n	423354 <setvbuf+0x134>
  423368:	0593      	lsls	r3, r2, #22
  42336a:	d4c0      	bmi.n	4232ee <setvbuf+0xce>
  42336c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42336e:	f001 fe6d 	bl	42504c <__retarget_lock_release_recursive>
  423372:	4628      	mov	r0, r5
  423374:	b003      	add	sp, #12
  423376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  42337a:	60a6      	str	r6, [r4, #8]
  42337c:	e7f0      	b.n	423360 <setvbuf+0x140>
  42337e:	4628      	mov	r0, r5
  423380:	f001 faa2 	bl	4248c8 <__sinit>
  423384:	e7c7      	b.n	423316 <setvbuf+0xf6>
  423386:	f04f 35ff 	mov.w	r5, #4294967295
  42338a:	e7b0      	b.n	4232ee <setvbuf+0xce>
  42338c:	f8dd 9000 	ldr.w	r9, [sp]
  423390:	45b1      	cmp	r9, r6
  423392:	d004      	beq.n	42339e <setvbuf+0x17e>
  423394:	4648      	mov	r0, r9
  423396:	f7ff fb4d 	bl	422a34 <malloc>
  42339a:	4607      	mov	r7, r0
  42339c:	b920      	cbnz	r0, 4233a8 <setvbuf+0x188>
  42339e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4233a2:	f04f 35ff 	mov.w	r5, #4294967295
  4233a6:	e792      	b.n	4232ce <setvbuf+0xae>
  4233a8:	464e      	mov	r6, r9
  4233aa:	e783      	b.n	4232b4 <setvbuf+0x94>
  4233ac:	204000c0 	.word	0x204000c0
	...
  4233c0:	eba2 0003 	sub.w	r0, r2, r3
  4233c4:	4770      	bx	lr
  4233c6:	bf00      	nop

004233c8 <strcmp>:
  4233c8:	7802      	ldrb	r2, [r0, #0]
  4233ca:	780b      	ldrb	r3, [r1, #0]
  4233cc:	2a01      	cmp	r2, #1
  4233ce:	bf28      	it	cs
  4233d0:	429a      	cmpcs	r2, r3
  4233d2:	d1f5      	bne.n	4233c0 <setvbuf+0x1a0>
  4233d4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  4233d8:	ea40 0401 	orr.w	r4, r0, r1
  4233dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  4233e0:	f06f 0c00 	mvn.w	ip, #0
  4233e4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  4233e8:	b312      	cbz	r2, 423430 <strcmp+0x68>
  4233ea:	ea80 0401 	eor.w	r4, r0, r1
  4233ee:	f014 0f07 	tst.w	r4, #7
  4233f2:	d16a      	bne.n	4234ca <strcmp+0x102>
  4233f4:	f000 0407 	and.w	r4, r0, #7
  4233f8:	f020 0007 	bic.w	r0, r0, #7
  4233fc:	f004 0503 	and.w	r5, r4, #3
  423400:	f021 0107 	bic.w	r1, r1, #7
  423404:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  423408:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  42340c:	f014 0f04 	tst.w	r4, #4
  423410:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  423414:	fa0c f405 	lsl.w	r4, ip, r5
  423418:	ea62 0204 	orn	r2, r2, r4
  42341c:	ea66 0604 	orn	r6, r6, r4
  423420:	d00a      	beq.n	423438 <strcmp+0x70>
  423422:	ea63 0304 	orn	r3, r3, r4
  423426:	4662      	mov	r2, ip
  423428:	ea67 0704 	orn	r7, r7, r4
  42342c:	4666      	mov	r6, ip
  42342e:	e003      	b.n	423438 <strcmp+0x70>
  423430:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  423434:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  423438:	fa82 f54c 	uadd8	r5, r2, ip
  42343c:	ea82 0406 	eor.w	r4, r2, r6
  423440:	faa4 f48c 	sel	r4, r4, ip
  423444:	bb6c      	cbnz	r4, 4234a2 <strcmp+0xda>
  423446:	fa83 f54c 	uadd8	r5, r3, ip
  42344a:	ea83 0507 	eor.w	r5, r3, r7
  42344e:	faa5 f58c 	sel	r5, r5, ip
  423452:	b995      	cbnz	r5, 42347a <strcmp+0xb2>
  423454:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  423458:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  42345c:	fa82 f54c 	uadd8	r5, r2, ip
  423460:	ea82 0406 	eor.w	r4, r2, r6
  423464:	faa4 f48c 	sel	r4, r4, ip
  423468:	fa83 f54c 	uadd8	r5, r3, ip
  42346c:	ea83 0507 	eor.w	r5, r3, r7
  423470:	faa5 f58c 	sel	r5, r5, ip
  423474:	4325      	orrs	r5, r4
  423476:	d0db      	beq.n	423430 <strcmp+0x68>
  423478:	b99c      	cbnz	r4, 4234a2 <strcmp+0xda>
  42347a:	ba2d      	rev	r5, r5
  42347c:	fab5 f485 	clz	r4, r5
  423480:	f024 0407 	bic.w	r4, r4, #7
  423484:	fa27 f104 	lsr.w	r1, r7, r4
  423488:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  42348c:	fa23 f304 	lsr.w	r3, r3, r4
  423490:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  423494:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  423498:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  42349c:	eba0 0001 	sub.w	r0, r0, r1
  4234a0:	4770      	bx	lr
  4234a2:	ba24      	rev	r4, r4
  4234a4:	fab4 f484 	clz	r4, r4
  4234a8:	f024 0407 	bic.w	r4, r4, #7
  4234ac:	fa26 f104 	lsr.w	r1, r6, r4
  4234b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4234b4:	fa22 f204 	lsr.w	r2, r2, r4
  4234b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4234bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4234c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4234c4:	eba0 0001 	sub.w	r0, r0, r1
  4234c8:	4770      	bx	lr
  4234ca:	f014 0f03 	tst.w	r4, #3
  4234ce:	d13c      	bne.n	42354a <strcmp+0x182>
  4234d0:	f010 0403 	ands.w	r4, r0, #3
  4234d4:	d128      	bne.n	423528 <strcmp+0x160>
  4234d6:	f850 2b08 	ldr.w	r2, [r0], #8
  4234da:	f851 3b08 	ldr.w	r3, [r1], #8
  4234de:	fa82 f54c 	uadd8	r5, r2, ip
  4234e2:	ea82 0503 	eor.w	r5, r2, r3
  4234e6:	faa5 f58c 	sel	r5, r5, ip
  4234ea:	b95d      	cbnz	r5, 423504 <strcmp+0x13c>
  4234ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4234f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4234f4:	fa82 f54c 	uadd8	r5, r2, ip
  4234f8:	ea82 0503 	eor.w	r5, r2, r3
  4234fc:	faa5 f58c 	sel	r5, r5, ip
  423500:	2d00      	cmp	r5, #0
  423502:	d0e8      	beq.n	4234d6 <strcmp+0x10e>
  423504:	ba2d      	rev	r5, r5
  423506:	fab5 f485 	clz	r4, r5
  42350a:	f024 0407 	bic.w	r4, r4, #7
  42350e:	fa23 f104 	lsr.w	r1, r3, r4
  423512:	fa22 f204 	lsr.w	r2, r2, r4
  423516:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  42351a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42351e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  423522:	eba0 0001 	sub.w	r0, r0, r1
  423526:	4770      	bx	lr
  423528:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  42352c:	f020 0003 	bic.w	r0, r0, #3
  423530:	f850 2b08 	ldr.w	r2, [r0], #8
  423534:	f021 0103 	bic.w	r1, r1, #3
  423538:	f851 3b08 	ldr.w	r3, [r1], #8
  42353c:	fa0c f404 	lsl.w	r4, ip, r4
  423540:	ea62 0204 	orn	r2, r2, r4
  423544:	ea63 0304 	orn	r3, r3, r4
  423548:	e7c9      	b.n	4234de <strcmp+0x116>
  42354a:	f010 0403 	ands.w	r4, r0, #3
  42354e:	d01a      	beq.n	423586 <strcmp+0x1be>
  423550:	eba1 0104 	sub.w	r1, r1, r4
  423554:	f020 0003 	bic.w	r0, r0, #3
  423558:	07e4      	lsls	r4, r4, #31
  42355a:	f850 2b04 	ldr.w	r2, [r0], #4
  42355e:	d006      	beq.n	42356e <strcmp+0x1a6>
  423560:	d20f      	bcs.n	423582 <strcmp+0x1ba>
  423562:	788b      	ldrb	r3, [r1, #2]
  423564:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  423568:	1ae4      	subs	r4, r4, r3
  42356a:	d106      	bne.n	42357a <strcmp+0x1b2>
  42356c:	b12b      	cbz	r3, 42357a <strcmp+0x1b2>
  42356e:	78cb      	ldrb	r3, [r1, #3]
  423570:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  423574:	1ae4      	subs	r4, r4, r3
  423576:	d100      	bne.n	42357a <strcmp+0x1b2>
  423578:	b91b      	cbnz	r3, 423582 <strcmp+0x1ba>
  42357a:	4620      	mov	r0, r4
  42357c:	f85d 4b10 	ldr.w	r4, [sp], #16
  423580:	4770      	bx	lr
  423582:	f101 0104 	add.w	r1, r1, #4
  423586:	f850 2b04 	ldr.w	r2, [r0], #4
  42358a:	07cc      	lsls	r4, r1, #31
  42358c:	f021 0103 	bic.w	r1, r1, #3
  423590:	f851 3b04 	ldr.w	r3, [r1], #4
  423594:	d848      	bhi.n	423628 <strcmp+0x260>
  423596:	d224      	bcs.n	4235e2 <strcmp+0x21a>
  423598:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  42359c:	fa82 f54c 	uadd8	r5, r2, ip
  4235a0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  4235a4:	faa5 f58c 	sel	r5, r5, ip
  4235a8:	d10a      	bne.n	4235c0 <strcmp+0x1f8>
  4235aa:	b965      	cbnz	r5, 4235c6 <strcmp+0x1fe>
  4235ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4235b0:	ea84 0402 	eor.w	r4, r4, r2
  4235b4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  4235b8:	d10e      	bne.n	4235d8 <strcmp+0x210>
  4235ba:	f850 2b04 	ldr.w	r2, [r0], #4
  4235be:	e7eb      	b.n	423598 <strcmp+0x1d0>
  4235c0:	ea4f 2313 	mov.w	r3, r3, lsr #8
  4235c4:	e055      	b.n	423672 <strcmp+0x2aa>
  4235c6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  4235ca:	d14d      	bne.n	423668 <strcmp+0x2a0>
  4235cc:	7808      	ldrb	r0, [r1, #0]
  4235ce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4235d2:	f1c0 0000 	rsb	r0, r0, #0
  4235d6:	4770      	bx	lr
  4235d8:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4235dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  4235e0:	e047      	b.n	423672 <strcmp+0x2aa>
  4235e2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  4235e6:	fa82 f54c 	uadd8	r5, r2, ip
  4235ea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  4235ee:	faa5 f58c 	sel	r5, r5, ip
  4235f2:	d10a      	bne.n	42360a <strcmp+0x242>
  4235f4:	b965      	cbnz	r5, 423610 <strcmp+0x248>
  4235f6:	f851 3b04 	ldr.w	r3, [r1], #4
  4235fa:	ea84 0402 	eor.w	r4, r4, r2
  4235fe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  423602:	d10c      	bne.n	42361e <strcmp+0x256>
  423604:	f850 2b04 	ldr.w	r2, [r0], #4
  423608:	e7eb      	b.n	4235e2 <strcmp+0x21a>
  42360a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  42360e:	e030      	b.n	423672 <strcmp+0x2aa>
  423610:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  423614:	d128      	bne.n	423668 <strcmp+0x2a0>
  423616:	880b      	ldrh	r3, [r1, #0]
  423618:	ea4f 4212 	mov.w	r2, r2, lsr #16
  42361c:	e029      	b.n	423672 <strcmp+0x2aa>
  42361e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  423622:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  423626:	e024      	b.n	423672 <strcmp+0x2aa>
  423628:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  42362c:	fa82 f54c 	uadd8	r5, r2, ip
  423630:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  423634:	faa5 f58c 	sel	r5, r5, ip
  423638:	d10a      	bne.n	423650 <strcmp+0x288>
  42363a:	b965      	cbnz	r5, 423656 <strcmp+0x28e>
  42363c:	f851 3b04 	ldr.w	r3, [r1], #4
  423640:	ea84 0402 	eor.w	r4, r4, r2
  423644:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  423648:	d109      	bne.n	42365e <strcmp+0x296>
  42364a:	f850 2b04 	ldr.w	r2, [r0], #4
  42364e:	e7eb      	b.n	423628 <strcmp+0x260>
  423650:	ea4f 6313 	mov.w	r3, r3, lsr #24
  423654:	e00d      	b.n	423672 <strcmp+0x2aa>
  423656:	f015 0fff 	tst.w	r5, #255	; 0xff
  42365a:	d105      	bne.n	423668 <strcmp+0x2a0>
  42365c:	680b      	ldr	r3, [r1, #0]
  42365e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  423662:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  423666:	e004      	b.n	423672 <strcmp+0x2aa>
  423668:	f04f 0000 	mov.w	r0, #0
  42366c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  423670:	4770      	bx	lr
  423672:	ba12      	rev	r2, r2
  423674:	ba1b      	rev	r3, r3
  423676:	fa82 f44c 	uadd8	r4, r2, ip
  42367a:	ea82 0403 	eor.w	r4, r2, r3
  42367e:	faa4 f58c 	sel	r5, r4, ip
  423682:	fab5 f485 	clz	r4, r5
  423686:	fa02 f204 	lsl.w	r2, r2, r4
  42368a:	fa03 f304 	lsl.w	r3, r3, r4
  42368e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  423692:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  423696:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  42369a:	4770      	bx	lr

0042369c <strcpy>:
  42369c:	ea80 0201 	eor.w	r2, r0, r1
  4236a0:	4684      	mov	ip, r0
  4236a2:	f012 0f03 	tst.w	r2, #3
  4236a6:	d14f      	bne.n	423748 <strcpy+0xac>
  4236a8:	f011 0f03 	tst.w	r1, #3
  4236ac:	d132      	bne.n	423714 <strcpy+0x78>
  4236ae:	f84d 4d04 	str.w	r4, [sp, #-4]!
  4236b2:	f011 0f04 	tst.w	r1, #4
  4236b6:	f851 3b04 	ldr.w	r3, [r1], #4
  4236ba:	d00b      	beq.n	4236d4 <strcpy+0x38>
  4236bc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4236c0:	439a      	bics	r2, r3
  4236c2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4236c6:	bf04      	itt	eq
  4236c8:	f84c 3b04 	streq.w	r3, [ip], #4
  4236cc:	f851 3b04 	ldreq.w	r3, [r1], #4
  4236d0:	d116      	bne.n	423700 <strcpy+0x64>
  4236d2:	bf00      	nop
  4236d4:	f851 4b04 	ldr.w	r4, [r1], #4
  4236d8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4236dc:	439a      	bics	r2, r3
  4236de:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4236e2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4236e6:	d10b      	bne.n	423700 <strcpy+0x64>
  4236e8:	f84c 3b04 	str.w	r3, [ip], #4
  4236ec:	43a2      	bics	r2, r4
  4236ee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4236f2:	bf04      	itt	eq
  4236f4:	f851 3b04 	ldreq.w	r3, [r1], #4
  4236f8:	f84c 4b04 	streq.w	r4, [ip], #4
  4236fc:	d0ea      	beq.n	4236d4 <strcpy+0x38>
  4236fe:	4623      	mov	r3, r4
  423700:	f80c 3b01 	strb.w	r3, [ip], #1
  423704:	f013 0fff 	tst.w	r3, #255	; 0xff
  423708:	ea4f 2333 	mov.w	r3, r3, ror #8
  42370c:	d1f8      	bne.n	423700 <strcpy+0x64>
  42370e:	f85d 4b04 	ldr.w	r4, [sp], #4
  423712:	4770      	bx	lr
  423714:	f011 0f01 	tst.w	r1, #1
  423718:	d006      	beq.n	423728 <strcpy+0x8c>
  42371a:	f811 2b01 	ldrb.w	r2, [r1], #1
  42371e:	f80c 2b01 	strb.w	r2, [ip], #1
  423722:	2a00      	cmp	r2, #0
  423724:	bf08      	it	eq
  423726:	4770      	bxeq	lr
  423728:	f011 0f02 	tst.w	r1, #2
  42372c:	d0bf      	beq.n	4236ae <strcpy+0x12>
  42372e:	f831 2b02 	ldrh.w	r2, [r1], #2
  423732:	f012 0fff 	tst.w	r2, #255	; 0xff
  423736:	bf16      	itet	ne
  423738:	f82c 2b02 	strhne.w	r2, [ip], #2
  42373c:	f88c 2000 	strbeq.w	r2, [ip]
  423740:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  423744:	d1b3      	bne.n	4236ae <strcpy+0x12>
  423746:	4770      	bx	lr
  423748:	f811 2b01 	ldrb.w	r2, [r1], #1
  42374c:	f80c 2b01 	strb.w	r2, [ip], #1
  423750:	2a00      	cmp	r2, #0
  423752:	d1f9      	bne.n	423748 <strcpy+0xac>
  423754:	4770      	bx	lr
  423756:	bf00      	nop
	...

00423780 <strlen>:
  423780:	f890 f000 	pld	[r0]
  423784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  423788:	f020 0107 	bic.w	r1, r0, #7
  42378c:	f06f 0c00 	mvn.w	ip, #0
  423790:	f010 0407 	ands.w	r4, r0, #7
  423794:	f891 f020 	pld	[r1, #32]
  423798:	f040 8049 	bne.w	42382e <strlen+0xae>
  42379c:	f04f 0400 	mov.w	r4, #0
  4237a0:	f06f 0007 	mvn.w	r0, #7
  4237a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4237a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4237ac:	f100 0008 	add.w	r0, r0, #8
  4237b0:	fa82 f24c 	uadd8	r2, r2, ip
  4237b4:	faa4 f28c 	sel	r2, r4, ip
  4237b8:	fa83 f34c 	uadd8	r3, r3, ip
  4237bc:	faa2 f38c 	sel	r3, r2, ip
  4237c0:	bb4b      	cbnz	r3, 423816 <strlen+0x96>
  4237c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4237c6:	fa82 f24c 	uadd8	r2, r2, ip
  4237ca:	f100 0008 	add.w	r0, r0, #8
  4237ce:	faa4 f28c 	sel	r2, r4, ip
  4237d2:	fa83 f34c 	uadd8	r3, r3, ip
  4237d6:	faa2 f38c 	sel	r3, r2, ip
  4237da:	b9e3      	cbnz	r3, 423816 <strlen+0x96>
  4237dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4237e0:	fa82 f24c 	uadd8	r2, r2, ip
  4237e4:	f100 0008 	add.w	r0, r0, #8
  4237e8:	faa4 f28c 	sel	r2, r4, ip
  4237ec:	fa83 f34c 	uadd8	r3, r3, ip
  4237f0:	faa2 f38c 	sel	r3, r2, ip
  4237f4:	b97b      	cbnz	r3, 423816 <strlen+0x96>
  4237f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4237fa:	f101 0120 	add.w	r1, r1, #32
  4237fe:	fa82 f24c 	uadd8	r2, r2, ip
  423802:	f100 0008 	add.w	r0, r0, #8
  423806:	faa4 f28c 	sel	r2, r4, ip
  42380a:	fa83 f34c 	uadd8	r3, r3, ip
  42380e:	faa2 f38c 	sel	r3, r2, ip
  423812:	2b00      	cmp	r3, #0
  423814:	d0c6      	beq.n	4237a4 <strlen+0x24>
  423816:	2a00      	cmp	r2, #0
  423818:	bf04      	itt	eq
  42381a:	3004      	addeq	r0, #4
  42381c:	461a      	moveq	r2, r3
  42381e:	ba12      	rev	r2, r2
  423820:	fab2 f282 	clz	r2, r2
  423824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  423828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  42382c:	4770      	bx	lr
  42382e:	e9d1 2300 	ldrd	r2, r3, [r1]
  423832:	f004 0503 	and.w	r5, r4, #3
  423836:	f1c4 0000 	rsb	r0, r4, #0
  42383a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  42383e:	f014 0f04 	tst.w	r4, #4
  423842:	f891 f040 	pld	[r1, #64]	; 0x40
  423846:	fa0c f505 	lsl.w	r5, ip, r5
  42384a:	ea62 0205 	orn	r2, r2, r5
  42384e:	bf1c      	itt	ne
  423850:	ea63 0305 	ornne	r3, r3, r5
  423854:	4662      	movne	r2, ip
  423856:	f04f 0400 	mov.w	r4, #0
  42385a:	e7a9      	b.n	4237b0 <strlen+0x30>

0042385c <__sprint_r.part.0>:
  42385c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  423860:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  423862:	049c      	lsls	r4, r3, #18
  423864:	4693      	mov	fp, r2
  423866:	d52f      	bpl.n	4238c8 <__sprint_r.part.0+0x6c>
  423868:	6893      	ldr	r3, [r2, #8]
  42386a:	6812      	ldr	r2, [r2, #0]
  42386c:	b353      	cbz	r3, 4238c4 <__sprint_r.part.0+0x68>
  42386e:	460e      	mov	r6, r1
  423870:	4607      	mov	r7, r0
  423872:	f102 0908 	add.w	r9, r2, #8
  423876:	e919 0420 	ldmdb	r9, {r5, sl}
  42387a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  42387e:	d017      	beq.n	4238b0 <__sprint_r.part.0+0x54>
  423880:	3d04      	subs	r5, #4
  423882:	2400      	movs	r4, #0
  423884:	e001      	b.n	42388a <__sprint_r.part.0+0x2e>
  423886:	45a0      	cmp	r8, r4
  423888:	d010      	beq.n	4238ac <__sprint_r.part.0+0x50>
  42388a:	4632      	mov	r2, r6
  42388c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  423890:	4638      	mov	r0, r7
  423892:	f001 f8bb 	bl	424a0c <_fputwc_r>
  423896:	1c43      	adds	r3, r0, #1
  423898:	f104 0401 	add.w	r4, r4, #1
  42389c:	d1f3      	bne.n	423886 <__sprint_r.part.0+0x2a>
  42389e:	2300      	movs	r3, #0
  4238a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4238a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4238a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4238ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4238b0:	f02a 0a03 	bic.w	sl, sl, #3
  4238b4:	eba3 030a 	sub.w	r3, r3, sl
  4238b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4238bc:	f109 0908 	add.w	r9, r9, #8
  4238c0:	2b00      	cmp	r3, #0
  4238c2:	d1d8      	bne.n	423876 <__sprint_r.part.0+0x1a>
  4238c4:	2000      	movs	r0, #0
  4238c6:	e7ea      	b.n	42389e <__sprint_r.part.0+0x42>
  4238c8:	f001 fa0a 	bl	424ce0 <__sfvwrite_r>
  4238cc:	2300      	movs	r3, #0
  4238ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4238d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4238d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4238da:	bf00      	nop

004238dc <_vfiprintf_r>:
  4238dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4238e0:	b0ad      	sub	sp, #180	; 0xb4
  4238e2:	461d      	mov	r5, r3
  4238e4:	468b      	mov	fp, r1
  4238e6:	4690      	mov	r8, r2
  4238e8:	9307      	str	r3, [sp, #28]
  4238ea:	9006      	str	r0, [sp, #24]
  4238ec:	b118      	cbz	r0, 4238f6 <_vfiprintf_r+0x1a>
  4238ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4238f0:	2b00      	cmp	r3, #0
  4238f2:	f000 80f3 	beq.w	423adc <_vfiprintf_r+0x200>
  4238f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4238fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4238fe:	07df      	lsls	r7, r3, #31
  423900:	b281      	uxth	r1, r0
  423902:	d402      	bmi.n	42390a <_vfiprintf_r+0x2e>
  423904:	058e      	lsls	r6, r1, #22
  423906:	f140 80fc 	bpl.w	423b02 <_vfiprintf_r+0x226>
  42390a:	048c      	lsls	r4, r1, #18
  42390c:	d40a      	bmi.n	423924 <_vfiprintf_r+0x48>
  42390e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  423912:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  423916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  42391a:	f8ab 100c 	strh.w	r1, [fp, #12]
  42391e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  423922:	b289      	uxth	r1, r1
  423924:	0708      	lsls	r0, r1, #28
  423926:	f140 80b3 	bpl.w	423a90 <_vfiprintf_r+0x1b4>
  42392a:	f8db 3010 	ldr.w	r3, [fp, #16]
  42392e:	2b00      	cmp	r3, #0
  423930:	f000 80ae 	beq.w	423a90 <_vfiprintf_r+0x1b4>
  423934:	f001 031a 	and.w	r3, r1, #26
  423938:	2b0a      	cmp	r3, #10
  42393a:	f000 80b5 	beq.w	423aa8 <_vfiprintf_r+0x1cc>
  42393e:	2300      	movs	r3, #0
  423940:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  423944:	930b      	str	r3, [sp, #44]	; 0x2c
  423946:	9311      	str	r3, [sp, #68]	; 0x44
  423948:	9310      	str	r3, [sp, #64]	; 0x40
  42394a:	9303      	str	r3, [sp, #12]
  42394c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  423950:	46ca      	mov	sl, r9
  423952:	f8cd b010 	str.w	fp, [sp, #16]
  423956:	f898 3000 	ldrb.w	r3, [r8]
  42395a:	4644      	mov	r4, r8
  42395c:	b1fb      	cbz	r3, 42399e <_vfiprintf_r+0xc2>
  42395e:	2b25      	cmp	r3, #37	; 0x25
  423960:	d102      	bne.n	423968 <_vfiprintf_r+0x8c>
  423962:	e01c      	b.n	42399e <_vfiprintf_r+0xc2>
  423964:	2b25      	cmp	r3, #37	; 0x25
  423966:	d003      	beq.n	423970 <_vfiprintf_r+0x94>
  423968:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  42396c:	2b00      	cmp	r3, #0
  42396e:	d1f9      	bne.n	423964 <_vfiprintf_r+0x88>
  423970:	eba4 0508 	sub.w	r5, r4, r8
  423974:	b19d      	cbz	r5, 42399e <_vfiprintf_r+0xc2>
  423976:	9b10      	ldr	r3, [sp, #64]	; 0x40
  423978:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42397a:	f8ca 8000 	str.w	r8, [sl]
  42397e:	3301      	adds	r3, #1
  423980:	442a      	add	r2, r5
  423982:	2b07      	cmp	r3, #7
  423984:	f8ca 5004 	str.w	r5, [sl, #4]
  423988:	9211      	str	r2, [sp, #68]	; 0x44
  42398a:	9310      	str	r3, [sp, #64]	; 0x40
  42398c:	dd7a      	ble.n	423a84 <_vfiprintf_r+0x1a8>
  42398e:	2a00      	cmp	r2, #0
  423990:	f040 84b0 	bne.w	4242f4 <_vfiprintf_r+0xa18>
  423994:	9b03      	ldr	r3, [sp, #12]
  423996:	9210      	str	r2, [sp, #64]	; 0x40
  423998:	442b      	add	r3, r5
  42399a:	46ca      	mov	sl, r9
  42399c:	9303      	str	r3, [sp, #12]
  42399e:	7823      	ldrb	r3, [r4, #0]
  4239a0:	2b00      	cmp	r3, #0
  4239a2:	f000 83e0 	beq.w	424166 <_vfiprintf_r+0x88a>
  4239a6:	2000      	movs	r0, #0
  4239a8:	f04f 0300 	mov.w	r3, #0
  4239ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4239b0:	f104 0801 	add.w	r8, r4, #1
  4239b4:	7862      	ldrb	r2, [r4, #1]
  4239b6:	4605      	mov	r5, r0
  4239b8:	4606      	mov	r6, r0
  4239ba:	4603      	mov	r3, r0
  4239bc:	f04f 34ff 	mov.w	r4, #4294967295
  4239c0:	f108 0801 	add.w	r8, r8, #1
  4239c4:	f1a2 0120 	sub.w	r1, r2, #32
  4239c8:	2958      	cmp	r1, #88	; 0x58
  4239ca:	f200 82de 	bhi.w	423f8a <_vfiprintf_r+0x6ae>
  4239ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4239d2:	0221      	.short	0x0221
  4239d4:	02dc02dc 	.word	0x02dc02dc
  4239d8:	02dc0229 	.word	0x02dc0229
  4239dc:	02dc02dc 	.word	0x02dc02dc
  4239e0:	02dc02dc 	.word	0x02dc02dc
  4239e4:	028902dc 	.word	0x028902dc
  4239e8:	02dc0295 	.word	0x02dc0295
  4239ec:	02bd00a2 	.word	0x02bd00a2
  4239f0:	019f02dc 	.word	0x019f02dc
  4239f4:	01a401a4 	.word	0x01a401a4
  4239f8:	01a401a4 	.word	0x01a401a4
  4239fc:	01a401a4 	.word	0x01a401a4
  423a00:	01a401a4 	.word	0x01a401a4
  423a04:	02dc01a4 	.word	0x02dc01a4
  423a08:	02dc02dc 	.word	0x02dc02dc
  423a0c:	02dc02dc 	.word	0x02dc02dc
  423a10:	02dc02dc 	.word	0x02dc02dc
  423a14:	02dc02dc 	.word	0x02dc02dc
  423a18:	01b202dc 	.word	0x01b202dc
  423a1c:	02dc02dc 	.word	0x02dc02dc
  423a20:	02dc02dc 	.word	0x02dc02dc
  423a24:	02dc02dc 	.word	0x02dc02dc
  423a28:	02dc02dc 	.word	0x02dc02dc
  423a2c:	02dc02dc 	.word	0x02dc02dc
  423a30:	02dc0197 	.word	0x02dc0197
  423a34:	02dc02dc 	.word	0x02dc02dc
  423a38:	02dc02dc 	.word	0x02dc02dc
  423a3c:	02dc019b 	.word	0x02dc019b
  423a40:	025302dc 	.word	0x025302dc
  423a44:	02dc02dc 	.word	0x02dc02dc
  423a48:	02dc02dc 	.word	0x02dc02dc
  423a4c:	02dc02dc 	.word	0x02dc02dc
  423a50:	02dc02dc 	.word	0x02dc02dc
  423a54:	02dc02dc 	.word	0x02dc02dc
  423a58:	021b025a 	.word	0x021b025a
  423a5c:	02dc02dc 	.word	0x02dc02dc
  423a60:	026e02dc 	.word	0x026e02dc
  423a64:	02dc021b 	.word	0x02dc021b
  423a68:	027302dc 	.word	0x027302dc
  423a6c:	01f502dc 	.word	0x01f502dc
  423a70:	02090182 	.word	0x02090182
  423a74:	02dc02d7 	.word	0x02dc02d7
  423a78:	02dc029a 	.word	0x02dc029a
  423a7c:	02dc00a7 	.word	0x02dc00a7
  423a80:	022e02dc 	.word	0x022e02dc
  423a84:	f10a 0a08 	add.w	sl, sl, #8
  423a88:	9b03      	ldr	r3, [sp, #12]
  423a8a:	442b      	add	r3, r5
  423a8c:	9303      	str	r3, [sp, #12]
  423a8e:	e786      	b.n	42399e <_vfiprintf_r+0xc2>
  423a90:	4659      	mov	r1, fp
  423a92:	9806      	ldr	r0, [sp, #24]
  423a94:	f000 fdac 	bl	4245f0 <__swsetup_r>
  423a98:	bb18      	cbnz	r0, 423ae2 <_vfiprintf_r+0x206>
  423a9a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  423a9e:	f001 031a 	and.w	r3, r1, #26
  423aa2:	2b0a      	cmp	r3, #10
  423aa4:	f47f af4b 	bne.w	42393e <_vfiprintf_r+0x62>
  423aa8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  423aac:	2b00      	cmp	r3, #0
  423aae:	f6ff af46 	blt.w	42393e <_vfiprintf_r+0x62>
  423ab2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  423ab6:	07db      	lsls	r3, r3, #31
  423ab8:	d405      	bmi.n	423ac6 <_vfiprintf_r+0x1ea>
  423aba:	058f      	lsls	r7, r1, #22
  423abc:	d403      	bmi.n	423ac6 <_vfiprintf_r+0x1ea>
  423abe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  423ac2:	f001 fac3 	bl	42504c <__retarget_lock_release_recursive>
  423ac6:	462b      	mov	r3, r5
  423ac8:	4642      	mov	r2, r8
  423aca:	4659      	mov	r1, fp
  423acc:	9806      	ldr	r0, [sp, #24]
  423ace:	f000 fd4d 	bl	42456c <__sbprintf>
  423ad2:	9003      	str	r0, [sp, #12]
  423ad4:	9803      	ldr	r0, [sp, #12]
  423ad6:	b02d      	add	sp, #180	; 0xb4
  423ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  423adc:	f000 fef4 	bl	4248c8 <__sinit>
  423ae0:	e709      	b.n	4238f6 <_vfiprintf_r+0x1a>
  423ae2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  423ae6:	07d9      	lsls	r1, r3, #31
  423ae8:	d404      	bmi.n	423af4 <_vfiprintf_r+0x218>
  423aea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  423aee:	059a      	lsls	r2, r3, #22
  423af0:	f140 84aa 	bpl.w	424448 <_vfiprintf_r+0xb6c>
  423af4:	f04f 33ff 	mov.w	r3, #4294967295
  423af8:	9303      	str	r3, [sp, #12]
  423afa:	9803      	ldr	r0, [sp, #12]
  423afc:	b02d      	add	sp, #180	; 0xb4
  423afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  423b02:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  423b06:	f001 fa9f 	bl	425048 <__retarget_lock_acquire_recursive>
  423b0a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  423b0e:	b281      	uxth	r1, r0
  423b10:	e6fb      	b.n	42390a <_vfiprintf_r+0x2e>
  423b12:	4276      	negs	r6, r6
  423b14:	9207      	str	r2, [sp, #28]
  423b16:	f043 0304 	orr.w	r3, r3, #4
  423b1a:	f898 2000 	ldrb.w	r2, [r8]
  423b1e:	e74f      	b.n	4239c0 <_vfiprintf_r+0xe4>
  423b20:	9608      	str	r6, [sp, #32]
  423b22:	069e      	lsls	r6, r3, #26
  423b24:	f100 8450 	bmi.w	4243c8 <_vfiprintf_r+0xaec>
  423b28:	9907      	ldr	r1, [sp, #28]
  423b2a:	06dd      	lsls	r5, r3, #27
  423b2c:	460a      	mov	r2, r1
  423b2e:	f100 83ef 	bmi.w	424310 <_vfiprintf_r+0xa34>
  423b32:	0658      	lsls	r0, r3, #25
  423b34:	f140 83ec 	bpl.w	424310 <_vfiprintf_r+0xa34>
  423b38:	880e      	ldrh	r6, [r1, #0]
  423b3a:	3104      	adds	r1, #4
  423b3c:	2700      	movs	r7, #0
  423b3e:	2201      	movs	r2, #1
  423b40:	9107      	str	r1, [sp, #28]
  423b42:	f04f 0100 	mov.w	r1, #0
  423b46:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  423b4a:	2500      	movs	r5, #0
  423b4c:	1c61      	adds	r1, r4, #1
  423b4e:	f000 8116 	beq.w	423d7e <_vfiprintf_r+0x4a2>
  423b52:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  423b56:	9102      	str	r1, [sp, #8]
  423b58:	ea56 0107 	orrs.w	r1, r6, r7
  423b5c:	f040 8114 	bne.w	423d88 <_vfiprintf_r+0x4ac>
  423b60:	2c00      	cmp	r4, #0
  423b62:	f040 835c 	bne.w	42421e <_vfiprintf_r+0x942>
  423b66:	2a00      	cmp	r2, #0
  423b68:	f040 83b7 	bne.w	4242da <_vfiprintf_r+0x9fe>
  423b6c:	f013 0301 	ands.w	r3, r3, #1
  423b70:	9305      	str	r3, [sp, #20]
  423b72:	f000 8457 	beq.w	424424 <_vfiprintf_r+0xb48>
  423b76:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  423b7a:	2330      	movs	r3, #48	; 0x30
  423b7c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  423b80:	9b05      	ldr	r3, [sp, #20]
  423b82:	42a3      	cmp	r3, r4
  423b84:	bfb8      	it	lt
  423b86:	4623      	movlt	r3, r4
  423b88:	9301      	str	r3, [sp, #4]
  423b8a:	b10d      	cbz	r5, 423b90 <_vfiprintf_r+0x2b4>
  423b8c:	3301      	adds	r3, #1
  423b8e:	9301      	str	r3, [sp, #4]
  423b90:	9b02      	ldr	r3, [sp, #8]
  423b92:	f013 0302 	ands.w	r3, r3, #2
  423b96:	9309      	str	r3, [sp, #36]	; 0x24
  423b98:	d002      	beq.n	423ba0 <_vfiprintf_r+0x2c4>
  423b9a:	9b01      	ldr	r3, [sp, #4]
  423b9c:	3302      	adds	r3, #2
  423b9e:	9301      	str	r3, [sp, #4]
  423ba0:	9b02      	ldr	r3, [sp, #8]
  423ba2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  423ba6:	930a      	str	r3, [sp, #40]	; 0x28
  423ba8:	f040 8217 	bne.w	423fda <_vfiprintf_r+0x6fe>
  423bac:	9b08      	ldr	r3, [sp, #32]
  423bae:	9a01      	ldr	r2, [sp, #4]
  423bb0:	1a9d      	subs	r5, r3, r2
  423bb2:	2d00      	cmp	r5, #0
  423bb4:	f340 8211 	ble.w	423fda <_vfiprintf_r+0x6fe>
  423bb8:	2d10      	cmp	r5, #16
  423bba:	f340 8490 	ble.w	4244de <_vfiprintf_r+0xc02>
  423bbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  423bc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  423bc2:	4ec4      	ldr	r6, [pc, #784]	; (423ed4 <_vfiprintf_r+0x5f8>)
  423bc4:	46d6      	mov	lr, sl
  423bc6:	2710      	movs	r7, #16
  423bc8:	46a2      	mov	sl, r4
  423bca:	4619      	mov	r1, r3
  423bcc:	9c06      	ldr	r4, [sp, #24]
  423bce:	e007      	b.n	423be0 <_vfiprintf_r+0x304>
  423bd0:	f101 0c02 	add.w	ip, r1, #2
  423bd4:	f10e 0e08 	add.w	lr, lr, #8
  423bd8:	4601      	mov	r1, r0
  423bda:	3d10      	subs	r5, #16
  423bdc:	2d10      	cmp	r5, #16
  423bde:	dd11      	ble.n	423c04 <_vfiprintf_r+0x328>
  423be0:	1c48      	adds	r0, r1, #1
  423be2:	3210      	adds	r2, #16
  423be4:	2807      	cmp	r0, #7
  423be6:	9211      	str	r2, [sp, #68]	; 0x44
  423be8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  423bec:	9010      	str	r0, [sp, #64]	; 0x40
  423bee:	ddef      	ble.n	423bd0 <_vfiprintf_r+0x2f4>
  423bf0:	2a00      	cmp	r2, #0
  423bf2:	f040 81e4 	bne.w	423fbe <_vfiprintf_r+0x6e2>
  423bf6:	3d10      	subs	r5, #16
  423bf8:	2d10      	cmp	r5, #16
  423bfa:	4611      	mov	r1, r2
  423bfc:	f04f 0c01 	mov.w	ip, #1
  423c00:	46ce      	mov	lr, r9
  423c02:	dced      	bgt.n	423be0 <_vfiprintf_r+0x304>
  423c04:	4654      	mov	r4, sl
  423c06:	4661      	mov	r1, ip
  423c08:	46f2      	mov	sl, lr
  423c0a:	442a      	add	r2, r5
  423c0c:	2907      	cmp	r1, #7
  423c0e:	9211      	str	r2, [sp, #68]	; 0x44
  423c10:	f8ca 6000 	str.w	r6, [sl]
  423c14:	f8ca 5004 	str.w	r5, [sl, #4]
  423c18:	9110      	str	r1, [sp, #64]	; 0x40
  423c1a:	f300 82ec 	bgt.w	4241f6 <_vfiprintf_r+0x91a>
  423c1e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  423c22:	f10a 0a08 	add.w	sl, sl, #8
  423c26:	1c48      	adds	r0, r1, #1
  423c28:	2d00      	cmp	r5, #0
  423c2a:	f040 81de 	bne.w	423fea <_vfiprintf_r+0x70e>
  423c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  423c30:	2b00      	cmp	r3, #0
  423c32:	f000 81f8 	beq.w	424026 <_vfiprintf_r+0x74a>
  423c36:	3202      	adds	r2, #2
  423c38:	a90e      	add	r1, sp, #56	; 0x38
  423c3a:	2302      	movs	r3, #2
  423c3c:	2807      	cmp	r0, #7
  423c3e:	9211      	str	r2, [sp, #68]	; 0x44
  423c40:	9010      	str	r0, [sp, #64]	; 0x40
  423c42:	e88a 000a 	stmia.w	sl, {r1, r3}
  423c46:	f340 81ea 	ble.w	42401e <_vfiprintf_r+0x742>
  423c4a:	2a00      	cmp	r2, #0
  423c4c:	f040 838c 	bne.w	424368 <_vfiprintf_r+0xa8c>
  423c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  423c52:	2b80      	cmp	r3, #128	; 0x80
  423c54:	f04f 0001 	mov.w	r0, #1
  423c58:	4611      	mov	r1, r2
  423c5a:	46ca      	mov	sl, r9
  423c5c:	f040 81e7 	bne.w	42402e <_vfiprintf_r+0x752>
  423c60:	9b08      	ldr	r3, [sp, #32]
  423c62:	9d01      	ldr	r5, [sp, #4]
  423c64:	1b5e      	subs	r6, r3, r5
  423c66:	2e00      	cmp	r6, #0
  423c68:	f340 81e1 	ble.w	42402e <_vfiprintf_r+0x752>
  423c6c:	2e10      	cmp	r6, #16
  423c6e:	4d9a      	ldr	r5, [pc, #616]	; (423ed8 <_vfiprintf_r+0x5fc>)
  423c70:	f340 8450 	ble.w	424514 <_vfiprintf_r+0xc38>
  423c74:	46d4      	mov	ip, sl
  423c76:	2710      	movs	r7, #16
  423c78:	46a2      	mov	sl, r4
  423c7a:	9c06      	ldr	r4, [sp, #24]
  423c7c:	e007      	b.n	423c8e <_vfiprintf_r+0x3b2>
  423c7e:	f101 0e02 	add.w	lr, r1, #2
  423c82:	f10c 0c08 	add.w	ip, ip, #8
  423c86:	4601      	mov	r1, r0
  423c88:	3e10      	subs	r6, #16
  423c8a:	2e10      	cmp	r6, #16
  423c8c:	dd11      	ble.n	423cb2 <_vfiprintf_r+0x3d6>
  423c8e:	1c48      	adds	r0, r1, #1
  423c90:	3210      	adds	r2, #16
  423c92:	2807      	cmp	r0, #7
  423c94:	9211      	str	r2, [sp, #68]	; 0x44
  423c96:	e88c 00a0 	stmia.w	ip, {r5, r7}
  423c9a:	9010      	str	r0, [sp, #64]	; 0x40
  423c9c:	ddef      	ble.n	423c7e <_vfiprintf_r+0x3a2>
  423c9e:	2a00      	cmp	r2, #0
  423ca0:	f040 829d 	bne.w	4241de <_vfiprintf_r+0x902>
  423ca4:	3e10      	subs	r6, #16
  423ca6:	2e10      	cmp	r6, #16
  423ca8:	f04f 0e01 	mov.w	lr, #1
  423cac:	4611      	mov	r1, r2
  423cae:	46cc      	mov	ip, r9
  423cb0:	dced      	bgt.n	423c8e <_vfiprintf_r+0x3b2>
  423cb2:	4654      	mov	r4, sl
  423cb4:	46e2      	mov	sl, ip
  423cb6:	4432      	add	r2, r6
  423cb8:	f1be 0f07 	cmp.w	lr, #7
  423cbc:	9211      	str	r2, [sp, #68]	; 0x44
  423cbe:	e88a 0060 	stmia.w	sl, {r5, r6}
  423cc2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  423cc6:	f300 8369 	bgt.w	42439c <_vfiprintf_r+0xac0>
  423cca:	f10a 0a08 	add.w	sl, sl, #8
  423cce:	f10e 0001 	add.w	r0, lr, #1
  423cd2:	4671      	mov	r1, lr
  423cd4:	e1ab      	b.n	42402e <_vfiprintf_r+0x752>
  423cd6:	9608      	str	r6, [sp, #32]
  423cd8:	f013 0220 	ands.w	r2, r3, #32
  423cdc:	f040 838c 	bne.w	4243f8 <_vfiprintf_r+0xb1c>
  423ce0:	f013 0110 	ands.w	r1, r3, #16
  423ce4:	f040 831a 	bne.w	42431c <_vfiprintf_r+0xa40>
  423ce8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  423cec:	f000 8316 	beq.w	42431c <_vfiprintf_r+0xa40>
  423cf0:	9807      	ldr	r0, [sp, #28]
  423cf2:	460a      	mov	r2, r1
  423cf4:	4601      	mov	r1, r0
  423cf6:	3104      	adds	r1, #4
  423cf8:	8806      	ldrh	r6, [r0, #0]
  423cfa:	9107      	str	r1, [sp, #28]
  423cfc:	2700      	movs	r7, #0
  423cfe:	e720      	b.n	423b42 <_vfiprintf_r+0x266>
  423d00:	9608      	str	r6, [sp, #32]
  423d02:	f043 0310 	orr.w	r3, r3, #16
  423d06:	e7e7      	b.n	423cd8 <_vfiprintf_r+0x3fc>
  423d08:	9608      	str	r6, [sp, #32]
  423d0a:	f043 0310 	orr.w	r3, r3, #16
  423d0e:	e708      	b.n	423b22 <_vfiprintf_r+0x246>
  423d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  423d14:	f898 2000 	ldrb.w	r2, [r8]
  423d18:	e652      	b.n	4239c0 <_vfiprintf_r+0xe4>
  423d1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  423d1e:	2600      	movs	r6, #0
  423d20:	f818 2b01 	ldrb.w	r2, [r8], #1
  423d24:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  423d28:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  423d2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  423d30:	2909      	cmp	r1, #9
  423d32:	d9f5      	bls.n	423d20 <_vfiprintf_r+0x444>
  423d34:	e646      	b.n	4239c4 <_vfiprintf_r+0xe8>
  423d36:	9608      	str	r6, [sp, #32]
  423d38:	2800      	cmp	r0, #0
  423d3a:	f040 8408 	bne.w	42454e <_vfiprintf_r+0xc72>
  423d3e:	f043 0310 	orr.w	r3, r3, #16
  423d42:	069e      	lsls	r6, r3, #26
  423d44:	f100 834c 	bmi.w	4243e0 <_vfiprintf_r+0xb04>
  423d48:	06dd      	lsls	r5, r3, #27
  423d4a:	f100 82f3 	bmi.w	424334 <_vfiprintf_r+0xa58>
  423d4e:	0658      	lsls	r0, r3, #25
  423d50:	f140 82f0 	bpl.w	424334 <_vfiprintf_r+0xa58>
  423d54:	9d07      	ldr	r5, [sp, #28]
  423d56:	f9b5 6000 	ldrsh.w	r6, [r5]
  423d5a:	462a      	mov	r2, r5
  423d5c:	17f7      	asrs	r7, r6, #31
  423d5e:	3204      	adds	r2, #4
  423d60:	4630      	mov	r0, r6
  423d62:	4639      	mov	r1, r7
  423d64:	9207      	str	r2, [sp, #28]
  423d66:	2800      	cmp	r0, #0
  423d68:	f171 0200 	sbcs.w	r2, r1, #0
  423d6c:	f2c0 835d 	blt.w	42442a <_vfiprintf_r+0xb4e>
  423d70:	1c61      	adds	r1, r4, #1
  423d72:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  423d76:	f04f 0201 	mov.w	r2, #1
  423d7a:	f47f aeea 	bne.w	423b52 <_vfiprintf_r+0x276>
  423d7e:	ea56 0107 	orrs.w	r1, r6, r7
  423d82:	f000 824d 	beq.w	424220 <_vfiprintf_r+0x944>
  423d86:	9302      	str	r3, [sp, #8]
  423d88:	2a01      	cmp	r2, #1
  423d8a:	f000 828c 	beq.w	4242a6 <_vfiprintf_r+0x9ca>
  423d8e:	2a02      	cmp	r2, #2
  423d90:	f040 825c 	bne.w	42424c <_vfiprintf_r+0x970>
  423d94:	980b      	ldr	r0, [sp, #44]	; 0x2c
  423d96:	46cb      	mov	fp, r9
  423d98:	0933      	lsrs	r3, r6, #4
  423d9a:	f006 010f 	and.w	r1, r6, #15
  423d9e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  423da2:	093a      	lsrs	r2, r7, #4
  423da4:	461e      	mov	r6, r3
  423da6:	4617      	mov	r7, r2
  423da8:	5c43      	ldrb	r3, [r0, r1]
  423daa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  423dae:	ea56 0307 	orrs.w	r3, r6, r7
  423db2:	d1f1      	bne.n	423d98 <_vfiprintf_r+0x4bc>
  423db4:	eba9 030b 	sub.w	r3, r9, fp
  423db8:	9305      	str	r3, [sp, #20]
  423dba:	e6e1      	b.n	423b80 <_vfiprintf_r+0x2a4>
  423dbc:	2800      	cmp	r0, #0
  423dbe:	f040 83c0 	bne.w	424542 <_vfiprintf_r+0xc66>
  423dc2:	0699      	lsls	r1, r3, #26
  423dc4:	f100 8367 	bmi.w	424496 <_vfiprintf_r+0xbba>
  423dc8:	06da      	lsls	r2, r3, #27
  423dca:	f100 80f1 	bmi.w	423fb0 <_vfiprintf_r+0x6d4>
  423dce:	065b      	lsls	r3, r3, #25
  423dd0:	f140 80ee 	bpl.w	423fb0 <_vfiprintf_r+0x6d4>
  423dd4:	9a07      	ldr	r2, [sp, #28]
  423dd6:	6813      	ldr	r3, [r2, #0]
  423dd8:	3204      	adds	r2, #4
  423dda:	9207      	str	r2, [sp, #28]
  423ddc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  423de0:	801a      	strh	r2, [r3, #0]
  423de2:	e5b8      	b.n	423956 <_vfiprintf_r+0x7a>
  423de4:	9807      	ldr	r0, [sp, #28]
  423de6:	4a3d      	ldr	r2, [pc, #244]	; (423edc <_vfiprintf_r+0x600>)
  423de8:	9608      	str	r6, [sp, #32]
  423dea:	920b      	str	r2, [sp, #44]	; 0x2c
  423dec:	6806      	ldr	r6, [r0, #0]
  423dee:	2278      	movs	r2, #120	; 0x78
  423df0:	2130      	movs	r1, #48	; 0x30
  423df2:	3004      	adds	r0, #4
  423df4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  423df8:	f043 0302 	orr.w	r3, r3, #2
  423dfc:	9007      	str	r0, [sp, #28]
  423dfe:	2700      	movs	r7, #0
  423e00:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  423e04:	2202      	movs	r2, #2
  423e06:	e69c      	b.n	423b42 <_vfiprintf_r+0x266>
  423e08:	9608      	str	r6, [sp, #32]
  423e0a:	2800      	cmp	r0, #0
  423e0c:	d099      	beq.n	423d42 <_vfiprintf_r+0x466>
  423e0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  423e12:	e796      	b.n	423d42 <_vfiprintf_r+0x466>
  423e14:	f898 2000 	ldrb.w	r2, [r8]
  423e18:	2d00      	cmp	r5, #0
  423e1a:	f47f add1 	bne.w	4239c0 <_vfiprintf_r+0xe4>
  423e1e:	2001      	movs	r0, #1
  423e20:	2520      	movs	r5, #32
  423e22:	e5cd      	b.n	4239c0 <_vfiprintf_r+0xe4>
  423e24:	f043 0301 	orr.w	r3, r3, #1
  423e28:	f898 2000 	ldrb.w	r2, [r8]
  423e2c:	e5c8      	b.n	4239c0 <_vfiprintf_r+0xe4>
  423e2e:	9608      	str	r6, [sp, #32]
  423e30:	2800      	cmp	r0, #0
  423e32:	f040 8393 	bne.w	42455c <_vfiprintf_r+0xc80>
  423e36:	4929      	ldr	r1, [pc, #164]	; (423edc <_vfiprintf_r+0x600>)
  423e38:	910b      	str	r1, [sp, #44]	; 0x2c
  423e3a:	069f      	lsls	r7, r3, #26
  423e3c:	f100 82e8 	bmi.w	424410 <_vfiprintf_r+0xb34>
  423e40:	9807      	ldr	r0, [sp, #28]
  423e42:	06de      	lsls	r6, r3, #27
  423e44:	4601      	mov	r1, r0
  423e46:	f100 8270 	bmi.w	42432a <_vfiprintf_r+0xa4e>
  423e4a:	065d      	lsls	r5, r3, #25
  423e4c:	f140 826d 	bpl.w	42432a <_vfiprintf_r+0xa4e>
  423e50:	3104      	adds	r1, #4
  423e52:	8806      	ldrh	r6, [r0, #0]
  423e54:	9107      	str	r1, [sp, #28]
  423e56:	2700      	movs	r7, #0
  423e58:	07d8      	lsls	r0, r3, #31
  423e5a:	f140 8222 	bpl.w	4242a2 <_vfiprintf_r+0x9c6>
  423e5e:	ea56 0107 	orrs.w	r1, r6, r7
  423e62:	f000 821e 	beq.w	4242a2 <_vfiprintf_r+0x9c6>
  423e66:	2130      	movs	r1, #48	; 0x30
  423e68:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  423e6c:	f043 0302 	orr.w	r3, r3, #2
  423e70:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  423e74:	2202      	movs	r2, #2
  423e76:	e664      	b.n	423b42 <_vfiprintf_r+0x266>
  423e78:	9608      	str	r6, [sp, #32]
  423e7a:	2800      	cmp	r0, #0
  423e7c:	f040 836b 	bne.w	424556 <_vfiprintf_r+0xc7a>
  423e80:	4917      	ldr	r1, [pc, #92]	; (423ee0 <_vfiprintf_r+0x604>)
  423e82:	910b      	str	r1, [sp, #44]	; 0x2c
  423e84:	e7d9      	b.n	423e3a <_vfiprintf_r+0x55e>
  423e86:	9907      	ldr	r1, [sp, #28]
  423e88:	9608      	str	r6, [sp, #32]
  423e8a:	680a      	ldr	r2, [r1, #0]
  423e8c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  423e90:	f04f 0000 	mov.w	r0, #0
  423e94:	460a      	mov	r2, r1
  423e96:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  423e9a:	3204      	adds	r2, #4
  423e9c:	2001      	movs	r0, #1
  423e9e:	9001      	str	r0, [sp, #4]
  423ea0:	9207      	str	r2, [sp, #28]
  423ea2:	9005      	str	r0, [sp, #20]
  423ea4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  423ea8:	9302      	str	r3, [sp, #8]
  423eaa:	2400      	movs	r4, #0
  423eac:	e670      	b.n	423b90 <_vfiprintf_r+0x2b4>
  423eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  423eb2:	f898 2000 	ldrb.w	r2, [r8]
  423eb6:	e583      	b.n	4239c0 <_vfiprintf_r+0xe4>
  423eb8:	f898 2000 	ldrb.w	r2, [r8]
  423ebc:	2a6c      	cmp	r2, #108	; 0x6c
  423ebe:	bf03      	ittte	eq
  423ec0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  423ec4:	f043 0320 	orreq.w	r3, r3, #32
  423ec8:	f108 0801 	addeq.w	r8, r8, #1
  423ecc:	f043 0310 	orrne.w	r3, r3, #16
  423ed0:	e576      	b.n	4239c0 <_vfiprintf_r+0xe4>
  423ed2:	bf00      	nop
  423ed4:	004308b8 	.word	0x004308b8
  423ed8:	004308c8 	.word	0x004308c8
  423edc:	0043089c 	.word	0x0043089c
  423ee0:	00430888 	.word	0x00430888
  423ee4:	9907      	ldr	r1, [sp, #28]
  423ee6:	680e      	ldr	r6, [r1, #0]
  423ee8:	460a      	mov	r2, r1
  423eea:	2e00      	cmp	r6, #0
  423eec:	f102 0204 	add.w	r2, r2, #4
  423ef0:	f6ff ae0f 	blt.w	423b12 <_vfiprintf_r+0x236>
  423ef4:	9207      	str	r2, [sp, #28]
  423ef6:	f898 2000 	ldrb.w	r2, [r8]
  423efa:	e561      	b.n	4239c0 <_vfiprintf_r+0xe4>
  423efc:	f898 2000 	ldrb.w	r2, [r8]
  423f00:	2001      	movs	r0, #1
  423f02:	252b      	movs	r5, #43	; 0x2b
  423f04:	e55c      	b.n	4239c0 <_vfiprintf_r+0xe4>
  423f06:	9907      	ldr	r1, [sp, #28]
  423f08:	9608      	str	r6, [sp, #32]
  423f0a:	f8d1 b000 	ldr.w	fp, [r1]
  423f0e:	f04f 0200 	mov.w	r2, #0
  423f12:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  423f16:	1d0e      	adds	r6, r1, #4
  423f18:	f1bb 0f00 	cmp.w	fp, #0
  423f1c:	f000 82e5 	beq.w	4244ea <_vfiprintf_r+0xc0e>
  423f20:	1c67      	adds	r7, r4, #1
  423f22:	f000 82c4 	beq.w	4244ae <_vfiprintf_r+0xbd2>
  423f26:	4622      	mov	r2, r4
  423f28:	2100      	movs	r1, #0
  423f2a:	4658      	mov	r0, fp
  423f2c:	9301      	str	r3, [sp, #4]
  423f2e:	f001 f91f 	bl	425170 <memchr>
  423f32:	9b01      	ldr	r3, [sp, #4]
  423f34:	2800      	cmp	r0, #0
  423f36:	f000 82e5 	beq.w	424504 <_vfiprintf_r+0xc28>
  423f3a:	eba0 020b 	sub.w	r2, r0, fp
  423f3e:	9205      	str	r2, [sp, #20]
  423f40:	9607      	str	r6, [sp, #28]
  423f42:	9302      	str	r3, [sp, #8]
  423f44:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  423f48:	2400      	movs	r4, #0
  423f4a:	e619      	b.n	423b80 <_vfiprintf_r+0x2a4>
  423f4c:	f898 2000 	ldrb.w	r2, [r8]
  423f50:	2a2a      	cmp	r2, #42	; 0x2a
  423f52:	f108 0701 	add.w	r7, r8, #1
  423f56:	f000 82e9 	beq.w	42452c <_vfiprintf_r+0xc50>
  423f5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  423f5e:	2909      	cmp	r1, #9
  423f60:	46b8      	mov	r8, r7
  423f62:	f04f 0400 	mov.w	r4, #0
  423f66:	f63f ad2d 	bhi.w	4239c4 <_vfiprintf_r+0xe8>
  423f6a:	f818 2b01 	ldrb.w	r2, [r8], #1
  423f6e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  423f72:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  423f76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  423f7a:	2909      	cmp	r1, #9
  423f7c:	d9f5      	bls.n	423f6a <_vfiprintf_r+0x68e>
  423f7e:	e521      	b.n	4239c4 <_vfiprintf_r+0xe8>
  423f80:	f043 0320 	orr.w	r3, r3, #32
  423f84:	f898 2000 	ldrb.w	r2, [r8]
  423f88:	e51a      	b.n	4239c0 <_vfiprintf_r+0xe4>
  423f8a:	9608      	str	r6, [sp, #32]
  423f8c:	2800      	cmp	r0, #0
  423f8e:	f040 82db 	bne.w	424548 <_vfiprintf_r+0xc6c>
  423f92:	2a00      	cmp	r2, #0
  423f94:	f000 80e7 	beq.w	424166 <_vfiprintf_r+0x88a>
  423f98:	2101      	movs	r1, #1
  423f9a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  423f9e:	f04f 0200 	mov.w	r2, #0
  423fa2:	9101      	str	r1, [sp, #4]
  423fa4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  423fa8:	9105      	str	r1, [sp, #20]
  423faa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  423fae:	e77b      	b.n	423ea8 <_vfiprintf_r+0x5cc>
  423fb0:	9a07      	ldr	r2, [sp, #28]
  423fb2:	6813      	ldr	r3, [r2, #0]
  423fb4:	3204      	adds	r2, #4
  423fb6:	9207      	str	r2, [sp, #28]
  423fb8:	9a03      	ldr	r2, [sp, #12]
  423fba:	601a      	str	r2, [r3, #0]
  423fbc:	e4cb      	b.n	423956 <_vfiprintf_r+0x7a>
  423fbe:	aa0f      	add	r2, sp, #60	; 0x3c
  423fc0:	9904      	ldr	r1, [sp, #16]
  423fc2:	4620      	mov	r0, r4
  423fc4:	f7ff fc4a 	bl	42385c <__sprint_r.part.0>
  423fc8:	2800      	cmp	r0, #0
  423fca:	f040 8139 	bne.w	424240 <_vfiprintf_r+0x964>
  423fce:	9910      	ldr	r1, [sp, #64]	; 0x40
  423fd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  423fd2:	f101 0c01 	add.w	ip, r1, #1
  423fd6:	46ce      	mov	lr, r9
  423fd8:	e5ff      	b.n	423bda <_vfiprintf_r+0x2fe>
  423fda:	9910      	ldr	r1, [sp, #64]	; 0x40
  423fdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  423fde:	1c48      	adds	r0, r1, #1
  423fe0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  423fe4:	2d00      	cmp	r5, #0
  423fe6:	f43f ae22 	beq.w	423c2e <_vfiprintf_r+0x352>
  423fea:	3201      	adds	r2, #1
  423fec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  423ff0:	2101      	movs	r1, #1
  423ff2:	2807      	cmp	r0, #7
  423ff4:	9211      	str	r2, [sp, #68]	; 0x44
  423ff6:	9010      	str	r0, [sp, #64]	; 0x40
  423ff8:	f8ca 5000 	str.w	r5, [sl]
  423ffc:	f8ca 1004 	str.w	r1, [sl, #4]
  424000:	f340 8108 	ble.w	424214 <_vfiprintf_r+0x938>
  424004:	2a00      	cmp	r2, #0
  424006:	f040 81bc 	bne.w	424382 <_vfiprintf_r+0xaa6>
  42400a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42400c:	2b00      	cmp	r3, #0
  42400e:	f43f ae1f 	beq.w	423c50 <_vfiprintf_r+0x374>
  424012:	ab0e      	add	r3, sp, #56	; 0x38
  424014:	2202      	movs	r2, #2
  424016:	4608      	mov	r0, r1
  424018:	931c      	str	r3, [sp, #112]	; 0x70
  42401a:	921d      	str	r2, [sp, #116]	; 0x74
  42401c:	46ca      	mov	sl, r9
  42401e:	4601      	mov	r1, r0
  424020:	f10a 0a08 	add.w	sl, sl, #8
  424024:	3001      	adds	r0, #1
  424026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  424028:	2b80      	cmp	r3, #128	; 0x80
  42402a:	f43f ae19 	beq.w	423c60 <_vfiprintf_r+0x384>
  42402e:	9b05      	ldr	r3, [sp, #20]
  424030:	1ae4      	subs	r4, r4, r3
  424032:	2c00      	cmp	r4, #0
  424034:	dd2e      	ble.n	424094 <_vfiprintf_r+0x7b8>
  424036:	2c10      	cmp	r4, #16
  424038:	4db3      	ldr	r5, [pc, #716]	; (424308 <_vfiprintf_r+0xa2c>)
  42403a:	dd1e      	ble.n	42407a <_vfiprintf_r+0x79e>
  42403c:	46d6      	mov	lr, sl
  42403e:	2610      	movs	r6, #16
  424040:	9f06      	ldr	r7, [sp, #24]
  424042:	f8dd a010 	ldr.w	sl, [sp, #16]
  424046:	e006      	b.n	424056 <_vfiprintf_r+0x77a>
  424048:	1c88      	adds	r0, r1, #2
  42404a:	f10e 0e08 	add.w	lr, lr, #8
  42404e:	4619      	mov	r1, r3
  424050:	3c10      	subs	r4, #16
  424052:	2c10      	cmp	r4, #16
  424054:	dd10      	ble.n	424078 <_vfiprintf_r+0x79c>
  424056:	1c4b      	adds	r3, r1, #1
  424058:	3210      	adds	r2, #16
  42405a:	2b07      	cmp	r3, #7
  42405c:	9211      	str	r2, [sp, #68]	; 0x44
  42405e:	e88e 0060 	stmia.w	lr, {r5, r6}
  424062:	9310      	str	r3, [sp, #64]	; 0x40
  424064:	ddf0      	ble.n	424048 <_vfiprintf_r+0x76c>
  424066:	2a00      	cmp	r2, #0
  424068:	d165      	bne.n	424136 <_vfiprintf_r+0x85a>
  42406a:	3c10      	subs	r4, #16
  42406c:	2c10      	cmp	r4, #16
  42406e:	f04f 0001 	mov.w	r0, #1
  424072:	4611      	mov	r1, r2
  424074:	46ce      	mov	lr, r9
  424076:	dcee      	bgt.n	424056 <_vfiprintf_r+0x77a>
  424078:	46f2      	mov	sl, lr
  42407a:	4422      	add	r2, r4
  42407c:	2807      	cmp	r0, #7
  42407e:	9211      	str	r2, [sp, #68]	; 0x44
  424080:	f8ca 5000 	str.w	r5, [sl]
  424084:	f8ca 4004 	str.w	r4, [sl, #4]
  424088:	9010      	str	r0, [sp, #64]	; 0x40
  42408a:	f300 8085 	bgt.w	424198 <_vfiprintf_r+0x8bc>
  42408e:	f10a 0a08 	add.w	sl, sl, #8
  424092:	3001      	adds	r0, #1
  424094:	9905      	ldr	r1, [sp, #20]
  424096:	f8ca b000 	str.w	fp, [sl]
  42409a:	440a      	add	r2, r1
  42409c:	2807      	cmp	r0, #7
  42409e:	9211      	str	r2, [sp, #68]	; 0x44
  4240a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4240a4:	9010      	str	r0, [sp, #64]	; 0x40
  4240a6:	f340 8082 	ble.w	4241ae <_vfiprintf_r+0x8d2>
  4240aa:	2a00      	cmp	r2, #0
  4240ac:	f040 8118 	bne.w	4242e0 <_vfiprintf_r+0xa04>
  4240b0:	9b02      	ldr	r3, [sp, #8]
  4240b2:	9210      	str	r2, [sp, #64]	; 0x40
  4240b4:	0758      	lsls	r0, r3, #29
  4240b6:	d535      	bpl.n	424124 <_vfiprintf_r+0x848>
  4240b8:	9b08      	ldr	r3, [sp, #32]
  4240ba:	9901      	ldr	r1, [sp, #4]
  4240bc:	1a5c      	subs	r4, r3, r1
  4240be:	2c00      	cmp	r4, #0
  4240c0:	f340 80e7 	ble.w	424292 <_vfiprintf_r+0x9b6>
  4240c4:	46ca      	mov	sl, r9
  4240c6:	2c10      	cmp	r4, #16
  4240c8:	f340 8218 	ble.w	4244fc <_vfiprintf_r+0xc20>
  4240cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4240ce:	4e8f      	ldr	r6, [pc, #572]	; (42430c <_vfiprintf_r+0xa30>)
  4240d0:	9f06      	ldr	r7, [sp, #24]
  4240d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4240d6:	2510      	movs	r5, #16
  4240d8:	e006      	b.n	4240e8 <_vfiprintf_r+0x80c>
  4240da:	1c88      	adds	r0, r1, #2
  4240dc:	f10a 0a08 	add.w	sl, sl, #8
  4240e0:	4619      	mov	r1, r3
  4240e2:	3c10      	subs	r4, #16
  4240e4:	2c10      	cmp	r4, #16
  4240e6:	dd11      	ble.n	42410c <_vfiprintf_r+0x830>
  4240e8:	1c4b      	adds	r3, r1, #1
  4240ea:	3210      	adds	r2, #16
  4240ec:	2b07      	cmp	r3, #7
  4240ee:	9211      	str	r2, [sp, #68]	; 0x44
  4240f0:	f8ca 6000 	str.w	r6, [sl]
  4240f4:	f8ca 5004 	str.w	r5, [sl, #4]
  4240f8:	9310      	str	r3, [sp, #64]	; 0x40
  4240fa:	ddee      	ble.n	4240da <_vfiprintf_r+0x7fe>
  4240fc:	bb42      	cbnz	r2, 424150 <_vfiprintf_r+0x874>
  4240fe:	3c10      	subs	r4, #16
  424100:	2c10      	cmp	r4, #16
  424102:	f04f 0001 	mov.w	r0, #1
  424106:	4611      	mov	r1, r2
  424108:	46ca      	mov	sl, r9
  42410a:	dced      	bgt.n	4240e8 <_vfiprintf_r+0x80c>
  42410c:	4422      	add	r2, r4
  42410e:	2807      	cmp	r0, #7
  424110:	9211      	str	r2, [sp, #68]	; 0x44
  424112:	f8ca 6000 	str.w	r6, [sl]
  424116:	f8ca 4004 	str.w	r4, [sl, #4]
  42411a:	9010      	str	r0, [sp, #64]	; 0x40
  42411c:	dd51      	ble.n	4241c2 <_vfiprintf_r+0x8e6>
  42411e:	2a00      	cmp	r2, #0
  424120:	f040 819b 	bne.w	42445a <_vfiprintf_r+0xb7e>
  424124:	9b03      	ldr	r3, [sp, #12]
  424126:	9a08      	ldr	r2, [sp, #32]
  424128:	9901      	ldr	r1, [sp, #4]
  42412a:	428a      	cmp	r2, r1
  42412c:	bfac      	ite	ge
  42412e:	189b      	addge	r3, r3, r2
  424130:	185b      	addlt	r3, r3, r1
  424132:	9303      	str	r3, [sp, #12]
  424134:	e04e      	b.n	4241d4 <_vfiprintf_r+0x8f8>
  424136:	aa0f      	add	r2, sp, #60	; 0x3c
  424138:	4651      	mov	r1, sl
  42413a:	4638      	mov	r0, r7
  42413c:	f7ff fb8e 	bl	42385c <__sprint_r.part.0>
  424140:	2800      	cmp	r0, #0
  424142:	f040 813f 	bne.w	4243c4 <_vfiprintf_r+0xae8>
  424146:	9910      	ldr	r1, [sp, #64]	; 0x40
  424148:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42414a:	1c48      	adds	r0, r1, #1
  42414c:	46ce      	mov	lr, r9
  42414e:	e77f      	b.n	424050 <_vfiprintf_r+0x774>
  424150:	aa0f      	add	r2, sp, #60	; 0x3c
  424152:	4659      	mov	r1, fp
  424154:	4638      	mov	r0, r7
  424156:	f7ff fb81 	bl	42385c <__sprint_r.part.0>
  42415a:	b960      	cbnz	r0, 424176 <_vfiprintf_r+0x89a>
  42415c:	9910      	ldr	r1, [sp, #64]	; 0x40
  42415e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  424160:	1c48      	adds	r0, r1, #1
  424162:	46ca      	mov	sl, r9
  424164:	e7bd      	b.n	4240e2 <_vfiprintf_r+0x806>
  424166:	9b11      	ldr	r3, [sp, #68]	; 0x44
  424168:	f8dd b010 	ldr.w	fp, [sp, #16]
  42416c:	2b00      	cmp	r3, #0
  42416e:	f040 81d4 	bne.w	42451a <_vfiprintf_r+0xc3e>
  424172:	2300      	movs	r3, #0
  424174:	9310      	str	r3, [sp, #64]	; 0x40
  424176:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42417a:	f013 0f01 	tst.w	r3, #1
  42417e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  424182:	d102      	bne.n	42418a <_vfiprintf_r+0x8ae>
  424184:	059a      	lsls	r2, r3, #22
  424186:	f140 80de 	bpl.w	424346 <_vfiprintf_r+0xa6a>
  42418a:	065b      	lsls	r3, r3, #25
  42418c:	f53f acb2 	bmi.w	423af4 <_vfiprintf_r+0x218>
  424190:	9803      	ldr	r0, [sp, #12]
  424192:	b02d      	add	sp, #180	; 0xb4
  424194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  424198:	2a00      	cmp	r2, #0
  42419a:	f040 8106 	bne.w	4243aa <_vfiprintf_r+0xace>
  42419e:	9a05      	ldr	r2, [sp, #20]
  4241a0:	921d      	str	r2, [sp, #116]	; 0x74
  4241a2:	2301      	movs	r3, #1
  4241a4:	9211      	str	r2, [sp, #68]	; 0x44
  4241a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4241aa:	9310      	str	r3, [sp, #64]	; 0x40
  4241ac:	46ca      	mov	sl, r9
  4241ae:	f10a 0a08 	add.w	sl, sl, #8
  4241b2:	9b02      	ldr	r3, [sp, #8]
  4241b4:	0759      	lsls	r1, r3, #29
  4241b6:	d504      	bpl.n	4241c2 <_vfiprintf_r+0x8e6>
  4241b8:	9b08      	ldr	r3, [sp, #32]
  4241ba:	9901      	ldr	r1, [sp, #4]
  4241bc:	1a5c      	subs	r4, r3, r1
  4241be:	2c00      	cmp	r4, #0
  4241c0:	dc81      	bgt.n	4240c6 <_vfiprintf_r+0x7ea>
  4241c2:	9b03      	ldr	r3, [sp, #12]
  4241c4:	9908      	ldr	r1, [sp, #32]
  4241c6:	9801      	ldr	r0, [sp, #4]
  4241c8:	4281      	cmp	r1, r0
  4241ca:	bfac      	ite	ge
  4241cc:	185b      	addge	r3, r3, r1
  4241ce:	181b      	addlt	r3, r3, r0
  4241d0:	9303      	str	r3, [sp, #12]
  4241d2:	bb72      	cbnz	r2, 424232 <_vfiprintf_r+0x956>
  4241d4:	2300      	movs	r3, #0
  4241d6:	9310      	str	r3, [sp, #64]	; 0x40
  4241d8:	46ca      	mov	sl, r9
  4241da:	f7ff bbbc 	b.w	423956 <_vfiprintf_r+0x7a>
  4241de:	aa0f      	add	r2, sp, #60	; 0x3c
  4241e0:	9904      	ldr	r1, [sp, #16]
  4241e2:	4620      	mov	r0, r4
  4241e4:	f7ff fb3a 	bl	42385c <__sprint_r.part.0>
  4241e8:	bb50      	cbnz	r0, 424240 <_vfiprintf_r+0x964>
  4241ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4241ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4241ee:	f101 0e01 	add.w	lr, r1, #1
  4241f2:	46cc      	mov	ip, r9
  4241f4:	e548      	b.n	423c88 <_vfiprintf_r+0x3ac>
  4241f6:	2a00      	cmp	r2, #0
  4241f8:	f040 8140 	bne.w	42447c <_vfiprintf_r+0xba0>
  4241fc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  424200:	2900      	cmp	r1, #0
  424202:	f000 811b 	beq.w	42443c <_vfiprintf_r+0xb60>
  424206:	2201      	movs	r2, #1
  424208:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  42420c:	4610      	mov	r0, r2
  42420e:	921d      	str	r2, [sp, #116]	; 0x74
  424210:	911c      	str	r1, [sp, #112]	; 0x70
  424212:	46ca      	mov	sl, r9
  424214:	4601      	mov	r1, r0
  424216:	f10a 0a08 	add.w	sl, sl, #8
  42421a:	3001      	adds	r0, #1
  42421c:	e507      	b.n	423c2e <_vfiprintf_r+0x352>
  42421e:	9b02      	ldr	r3, [sp, #8]
  424220:	2a01      	cmp	r2, #1
  424222:	f000 8098 	beq.w	424356 <_vfiprintf_r+0xa7a>
  424226:	2a02      	cmp	r2, #2
  424228:	d10d      	bne.n	424246 <_vfiprintf_r+0x96a>
  42422a:	9302      	str	r3, [sp, #8]
  42422c:	2600      	movs	r6, #0
  42422e:	2700      	movs	r7, #0
  424230:	e5b0      	b.n	423d94 <_vfiprintf_r+0x4b8>
  424232:	aa0f      	add	r2, sp, #60	; 0x3c
  424234:	9904      	ldr	r1, [sp, #16]
  424236:	9806      	ldr	r0, [sp, #24]
  424238:	f7ff fb10 	bl	42385c <__sprint_r.part.0>
  42423c:	2800      	cmp	r0, #0
  42423e:	d0c9      	beq.n	4241d4 <_vfiprintf_r+0x8f8>
  424240:	f8dd b010 	ldr.w	fp, [sp, #16]
  424244:	e797      	b.n	424176 <_vfiprintf_r+0x89a>
  424246:	9302      	str	r3, [sp, #8]
  424248:	2600      	movs	r6, #0
  42424a:	2700      	movs	r7, #0
  42424c:	4649      	mov	r1, r9
  42424e:	e000      	b.n	424252 <_vfiprintf_r+0x976>
  424250:	4659      	mov	r1, fp
  424252:	08f2      	lsrs	r2, r6, #3
  424254:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  424258:	08f8      	lsrs	r0, r7, #3
  42425a:	f006 0307 	and.w	r3, r6, #7
  42425e:	4607      	mov	r7, r0
  424260:	4616      	mov	r6, r2
  424262:	3330      	adds	r3, #48	; 0x30
  424264:	ea56 0207 	orrs.w	r2, r6, r7
  424268:	f801 3c01 	strb.w	r3, [r1, #-1]
  42426c:	f101 3bff 	add.w	fp, r1, #4294967295
  424270:	d1ee      	bne.n	424250 <_vfiprintf_r+0x974>
  424272:	9a02      	ldr	r2, [sp, #8]
  424274:	07d6      	lsls	r6, r2, #31
  424276:	f57f ad9d 	bpl.w	423db4 <_vfiprintf_r+0x4d8>
  42427a:	2b30      	cmp	r3, #48	; 0x30
  42427c:	f43f ad9a 	beq.w	423db4 <_vfiprintf_r+0x4d8>
  424280:	3902      	subs	r1, #2
  424282:	2330      	movs	r3, #48	; 0x30
  424284:	f80b 3c01 	strb.w	r3, [fp, #-1]
  424288:	eba9 0301 	sub.w	r3, r9, r1
  42428c:	9305      	str	r3, [sp, #20]
  42428e:	468b      	mov	fp, r1
  424290:	e476      	b.n	423b80 <_vfiprintf_r+0x2a4>
  424292:	9b03      	ldr	r3, [sp, #12]
  424294:	9a08      	ldr	r2, [sp, #32]
  424296:	428a      	cmp	r2, r1
  424298:	bfac      	ite	ge
  42429a:	189b      	addge	r3, r3, r2
  42429c:	185b      	addlt	r3, r3, r1
  42429e:	9303      	str	r3, [sp, #12]
  4242a0:	e798      	b.n	4241d4 <_vfiprintf_r+0x8f8>
  4242a2:	2202      	movs	r2, #2
  4242a4:	e44d      	b.n	423b42 <_vfiprintf_r+0x266>
  4242a6:	2f00      	cmp	r7, #0
  4242a8:	bf08      	it	eq
  4242aa:	2e0a      	cmpeq	r6, #10
  4242ac:	d352      	bcc.n	424354 <_vfiprintf_r+0xa78>
  4242ae:	46cb      	mov	fp, r9
  4242b0:	4630      	mov	r0, r6
  4242b2:	4639      	mov	r1, r7
  4242b4:	220a      	movs	r2, #10
  4242b6:	2300      	movs	r3, #0
  4242b8:	f7fe f9f8 	bl	4226ac <__aeabi_uldivmod>
  4242bc:	3230      	adds	r2, #48	; 0x30
  4242be:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4242c2:	4630      	mov	r0, r6
  4242c4:	4639      	mov	r1, r7
  4242c6:	2300      	movs	r3, #0
  4242c8:	220a      	movs	r2, #10
  4242ca:	f7fe f9ef 	bl	4226ac <__aeabi_uldivmod>
  4242ce:	4606      	mov	r6, r0
  4242d0:	460f      	mov	r7, r1
  4242d2:	ea56 0307 	orrs.w	r3, r6, r7
  4242d6:	d1eb      	bne.n	4242b0 <_vfiprintf_r+0x9d4>
  4242d8:	e56c      	b.n	423db4 <_vfiprintf_r+0x4d8>
  4242da:	9405      	str	r4, [sp, #20]
  4242dc:	46cb      	mov	fp, r9
  4242de:	e44f      	b.n	423b80 <_vfiprintf_r+0x2a4>
  4242e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4242e2:	9904      	ldr	r1, [sp, #16]
  4242e4:	9806      	ldr	r0, [sp, #24]
  4242e6:	f7ff fab9 	bl	42385c <__sprint_r.part.0>
  4242ea:	2800      	cmp	r0, #0
  4242ec:	d1a8      	bne.n	424240 <_vfiprintf_r+0x964>
  4242ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4242f0:	46ca      	mov	sl, r9
  4242f2:	e75e      	b.n	4241b2 <_vfiprintf_r+0x8d6>
  4242f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4242f6:	9904      	ldr	r1, [sp, #16]
  4242f8:	9806      	ldr	r0, [sp, #24]
  4242fa:	f7ff faaf 	bl	42385c <__sprint_r.part.0>
  4242fe:	2800      	cmp	r0, #0
  424300:	d19e      	bne.n	424240 <_vfiprintf_r+0x964>
  424302:	46ca      	mov	sl, r9
  424304:	f7ff bbc0 	b.w	423a88 <_vfiprintf_r+0x1ac>
  424308:	004308c8 	.word	0x004308c8
  42430c:	004308b8 	.word	0x004308b8
  424310:	3104      	adds	r1, #4
  424312:	6816      	ldr	r6, [r2, #0]
  424314:	9107      	str	r1, [sp, #28]
  424316:	2201      	movs	r2, #1
  424318:	2700      	movs	r7, #0
  42431a:	e412      	b.n	423b42 <_vfiprintf_r+0x266>
  42431c:	9807      	ldr	r0, [sp, #28]
  42431e:	4601      	mov	r1, r0
  424320:	3104      	adds	r1, #4
  424322:	6806      	ldr	r6, [r0, #0]
  424324:	9107      	str	r1, [sp, #28]
  424326:	2700      	movs	r7, #0
  424328:	e40b      	b.n	423b42 <_vfiprintf_r+0x266>
  42432a:	680e      	ldr	r6, [r1, #0]
  42432c:	3104      	adds	r1, #4
  42432e:	9107      	str	r1, [sp, #28]
  424330:	2700      	movs	r7, #0
  424332:	e591      	b.n	423e58 <_vfiprintf_r+0x57c>
  424334:	9907      	ldr	r1, [sp, #28]
  424336:	680e      	ldr	r6, [r1, #0]
  424338:	460a      	mov	r2, r1
  42433a:	17f7      	asrs	r7, r6, #31
  42433c:	3204      	adds	r2, #4
  42433e:	9207      	str	r2, [sp, #28]
  424340:	4630      	mov	r0, r6
  424342:	4639      	mov	r1, r7
  424344:	e50f      	b.n	423d66 <_vfiprintf_r+0x48a>
  424346:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  42434a:	f000 fe7f 	bl	42504c <__retarget_lock_release_recursive>
  42434e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  424352:	e71a      	b.n	42418a <_vfiprintf_r+0x8ae>
  424354:	9b02      	ldr	r3, [sp, #8]
  424356:	9302      	str	r3, [sp, #8]
  424358:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  42435c:	3630      	adds	r6, #48	; 0x30
  42435e:	2301      	movs	r3, #1
  424360:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  424364:	9305      	str	r3, [sp, #20]
  424366:	e40b      	b.n	423b80 <_vfiprintf_r+0x2a4>
  424368:	aa0f      	add	r2, sp, #60	; 0x3c
  42436a:	9904      	ldr	r1, [sp, #16]
  42436c:	9806      	ldr	r0, [sp, #24]
  42436e:	f7ff fa75 	bl	42385c <__sprint_r.part.0>
  424372:	2800      	cmp	r0, #0
  424374:	f47f af64 	bne.w	424240 <_vfiprintf_r+0x964>
  424378:	9910      	ldr	r1, [sp, #64]	; 0x40
  42437a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42437c:	1c48      	adds	r0, r1, #1
  42437e:	46ca      	mov	sl, r9
  424380:	e651      	b.n	424026 <_vfiprintf_r+0x74a>
  424382:	aa0f      	add	r2, sp, #60	; 0x3c
  424384:	9904      	ldr	r1, [sp, #16]
  424386:	9806      	ldr	r0, [sp, #24]
  424388:	f7ff fa68 	bl	42385c <__sprint_r.part.0>
  42438c:	2800      	cmp	r0, #0
  42438e:	f47f af57 	bne.w	424240 <_vfiprintf_r+0x964>
  424392:	9910      	ldr	r1, [sp, #64]	; 0x40
  424394:	9a11      	ldr	r2, [sp, #68]	; 0x44
  424396:	1c48      	adds	r0, r1, #1
  424398:	46ca      	mov	sl, r9
  42439a:	e448      	b.n	423c2e <_vfiprintf_r+0x352>
  42439c:	2a00      	cmp	r2, #0
  42439e:	f040 8091 	bne.w	4244c4 <_vfiprintf_r+0xbe8>
  4243a2:	2001      	movs	r0, #1
  4243a4:	4611      	mov	r1, r2
  4243a6:	46ca      	mov	sl, r9
  4243a8:	e641      	b.n	42402e <_vfiprintf_r+0x752>
  4243aa:	aa0f      	add	r2, sp, #60	; 0x3c
  4243ac:	9904      	ldr	r1, [sp, #16]
  4243ae:	9806      	ldr	r0, [sp, #24]
  4243b0:	f7ff fa54 	bl	42385c <__sprint_r.part.0>
  4243b4:	2800      	cmp	r0, #0
  4243b6:	f47f af43 	bne.w	424240 <_vfiprintf_r+0x964>
  4243ba:	9810      	ldr	r0, [sp, #64]	; 0x40
  4243bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4243be:	3001      	adds	r0, #1
  4243c0:	46ca      	mov	sl, r9
  4243c2:	e667      	b.n	424094 <_vfiprintf_r+0x7b8>
  4243c4:	46d3      	mov	fp, sl
  4243c6:	e6d6      	b.n	424176 <_vfiprintf_r+0x89a>
  4243c8:	9e07      	ldr	r6, [sp, #28]
  4243ca:	3607      	adds	r6, #7
  4243cc:	f026 0207 	bic.w	r2, r6, #7
  4243d0:	f102 0108 	add.w	r1, r2, #8
  4243d4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4243d8:	9107      	str	r1, [sp, #28]
  4243da:	2201      	movs	r2, #1
  4243dc:	f7ff bbb1 	b.w	423b42 <_vfiprintf_r+0x266>
  4243e0:	9e07      	ldr	r6, [sp, #28]
  4243e2:	3607      	adds	r6, #7
  4243e4:	f026 0607 	bic.w	r6, r6, #7
  4243e8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4243ec:	f106 0208 	add.w	r2, r6, #8
  4243f0:	9207      	str	r2, [sp, #28]
  4243f2:	4606      	mov	r6, r0
  4243f4:	460f      	mov	r7, r1
  4243f6:	e4b6      	b.n	423d66 <_vfiprintf_r+0x48a>
  4243f8:	9e07      	ldr	r6, [sp, #28]
  4243fa:	3607      	adds	r6, #7
  4243fc:	f026 0207 	bic.w	r2, r6, #7
  424400:	f102 0108 	add.w	r1, r2, #8
  424404:	e9d2 6700 	ldrd	r6, r7, [r2]
  424408:	9107      	str	r1, [sp, #28]
  42440a:	2200      	movs	r2, #0
  42440c:	f7ff bb99 	b.w	423b42 <_vfiprintf_r+0x266>
  424410:	9e07      	ldr	r6, [sp, #28]
  424412:	3607      	adds	r6, #7
  424414:	f026 0107 	bic.w	r1, r6, #7
  424418:	f101 0008 	add.w	r0, r1, #8
  42441c:	9007      	str	r0, [sp, #28]
  42441e:	e9d1 6700 	ldrd	r6, r7, [r1]
  424422:	e519      	b.n	423e58 <_vfiprintf_r+0x57c>
  424424:	46cb      	mov	fp, r9
  424426:	f7ff bbab 	b.w	423b80 <_vfiprintf_r+0x2a4>
  42442a:	252d      	movs	r5, #45	; 0x2d
  42442c:	4276      	negs	r6, r6
  42442e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  424432:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  424436:	2201      	movs	r2, #1
  424438:	f7ff bb88 	b.w	423b4c <_vfiprintf_r+0x270>
  42443c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42443e:	b9b3      	cbnz	r3, 42446e <_vfiprintf_r+0xb92>
  424440:	4611      	mov	r1, r2
  424442:	2001      	movs	r0, #1
  424444:	46ca      	mov	sl, r9
  424446:	e5f2      	b.n	42402e <_vfiprintf_r+0x752>
  424448:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  42444c:	f000 fdfe 	bl	42504c <__retarget_lock_release_recursive>
  424450:	f04f 33ff 	mov.w	r3, #4294967295
  424454:	9303      	str	r3, [sp, #12]
  424456:	f7ff bb50 	b.w	423afa <_vfiprintf_r+0x21e>
  42445a:	aa0f      	add	r2, sp, #60	; 0x3c
  42445c:	9904      	ldr	r1, [sp, #16]
  42445e:	9806      	ldr	r0, [sp, #24]
  424460:	f7ff f9fc 	bl	42385c <__sprint_r.part.0>
  424464:	2800      	cmp	r0, #0
  424466:	f47f aeeb 	bne.w	424240 <_vfiprintf_r+0x964>
  42446a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42446c:	e6a9      	b.n	4241c2 <_vfiprintf_r+0x8e6>
  42446e:	ab0e      	add	r3, sp, #56	; 0x38
  424470:	2202      	movs	r2, #2
  424472:	931c      	str	r3, [sp, #112]	; 0x70
  424474:	921d      	str	r2, [sp, #116]	; 0x74
  424476:	2001      	movs	r0, #1
  424478:	46ca      	mov	sl, r9
  42447a:	e5d0      	b.n	42401e <_vfiprintf_r+0x742>
  42447c:	aa0f      	add	r2, sp, #60	; 0x3c
  42447e:	9904      	ldr	r1, [sp, #16]
  424480:	9806      	ldr	r0, [sp, #24]
  424482:	f7ff f9eb 	bl	42385c <__sprint_r.part.0>
  424486:	2800      	cmp	r0, #0
  424488:	f47f aeda 	bne.w	424240 <_vfiprintf_r+0x964>
  42448c:	9910      	ldr	r1, [sp, #64]	; 0x40
  42448e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  424490:	1c48      	adds	r0, r1, #1
  424492:	46ca      	mov	sl, r9
  424494:	e5a4      	b.n	423fe0 <_vfiprintf_r+0x704>
  424496:	9a07      	ldr	r2, [sp, #28]
  424498:	9903      	ldr	r1, [sp, #12]
  42449a:	6813      	ldr	r3, [r2, #0]
  42449c:	17cd      	asrs	r5, r1, #31
  42449e:	4608      	mov	r0, r1
  4244a0:	3204      	adds	r2, #4
  4244a2:	4629      	mov	r1, r5
  4244a4:	9207      	str	r2, [sp, #28]
  4244a6:	e9c3 0100 	strd	r0, r1, [r3]
  4244aa:	f7ff ba54 	b.w	423956 <_vfiprintf_r+0x7a>
  4244ae:	4658      	mov	r0, fp
  4244b0:	9607      	str	r6, [sp, #28]
  4244b2:	9302      	str	r3, [sp, #8]
  4244b4:	f7ff f964 	bl	423780 <strlen>
  4244b8:	2400      	movs	r4, #0
  4244ba:	9005      	str	r0, [sp, #20]
  4244bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4244c0:	f7ff bb5e 	b.w	423b80 <_vfiprintf_r+0x2a4>
  4244c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4244c6:	9904      	ldr	r1, [sp, #16]
  4244c8:	9806      	ldr	r0, [sp, #24]
  4244ca:	f7ff f9c7 	bl	42385c <__sprint_r.part.0>
  4244ce:	2800      	cmp	r0, #0
  4244d0:	f47f aeb6 	bne.w	424240 <_vfiprintf_r+0x964>
  4244d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4244d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4244d8:	1c48      	adds	r0, r1, #1
  4244da:	46ca      	mov	sl, r9
  4244dc:	e5a7      	b.n	42402e <_vfiprintf_r+0x752>
  4244de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4244e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4244e2:	4e20      	ldr	r6, [pc, #128]	; (424564 <_vfiprintf_r+0xc88>)
  4244e4:	3101      	adds	r1, #1
  4244e6:	f7ff bb90 	b.w	423c0a <_vfiprintf_r+0x32e>
  4244ea:	2c06      	cmp	r4, #6
  4244ec:	bf28      	it	cs
  4244ee:	2406      	movcs	r4, #6
  4244f0:	9405      	str	r4, [sp, #20]
  4244f2:	9607      	str	r6, [sp, #28]
  4244f4:	9401      	str	r4, [sp, #4]
  4244f6:	f8df b070 	ldr.w	fp, [pc, #112]	; 424568 <_vfiprintf_r+0xc8c>
  4244fa:	e4d5      	b.n	423ea8 <_vfiprintf_r+0x5cc>
  4244fc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4244fe:	4e19      	ldr	r6, [pc, #100]	; (424564 <_vfiprintf_r+0xc88>)
  424500:	3001      	adds	r0, #1
  424502:	e603      	b.n	42410c <_vfiprintf_r+0x830>
  424504:	9405      	str	r4, [sp, #20]
  424506:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  42450a:	9607      	str	r6, [sp, #28]
  42450c:	9302      	str	r3, [sp, #8]
  42450e:	4604      	mov	r4, r0
  424510:	f7ff bb36 	b.w	423b80 <_vfiprintf_r+0x2a4>
  424514:	4686      	mov	lr, r0
  424516:	f7ff bbce 	b.w	423cb6 <_vfiprintf_r+0x3da>
  42451a:	9806      	ldr	r0, [sp, #24]
  42451c:	aa0f      	add	r2, sp, #60	; 0x3c
  42451e:	4659      	mov	r1, fp
  424520:	f7ff f99c 	bl	42385c <__sprint_r.part.0>
  424524:	2800      	cmp	r0, #0
  424526:	f43f ae24 	beq.w	424172 <_vfiprintf_r+0x896>
  42452a:	e624      	b.n	424176 <_vfiprintf_r+0x89a>
  42452c:	9907      	ldr	r1, [sp, #28]
  42452e:	f898 2001 	ldrb.w	r2, [r8, #1]
  424532:	680c      	ldr	r4, [r1, #0]
  424534:	3104      	adds	r1, #4
  424536:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  42453a:	46b8      	mov	r8, r7
  42453c:	9107      	str	r1, [sp, #28]
  42453e:	f7ff ba3f 	b.w	4239c0 <_vfiprintf_r+0xe4>
  424542:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  424546:	e43c      	b.n	423dc2 <_vfiprintf_r+0x4e6>
  424548:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  42454c:	e521      	b.n	423f92 <_vfiprintf_r+0x6b6>
  42454e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  424552:	f7ff bbf4 	b.w	423d3e <_vfiprintf_r+0x462>
  424556:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  42455a:	e491      	b.n	423e80 <_vfiprintf_r+0x5a4>
  42455c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  424560:	e469      	b.n	423e36 <_vfiprintf_r+0x55a>
  424562:	bf00      	nop
  424564:	004308b8 	.word	0x004308b8
  424568:	004308b0 	.word	0x004308b0

0042456c <__sbprintf>:
  42456c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  424570:	460c      	mov	r4, r1
  424572:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  424576:	8989      	ldrh	r1, [r1, #12]
  424578:	6e66      	ldr	r6, [r4, #100]	; 0x64
  42457a:	89e5      	ldrh	r5, [r4, #14]
  42457c:	9619      	str	r6, [sp, #100]	; 0x64
  42457e:	f021 0102 	bic.w	r1, r1, #2
  424582:	4606      	mov	r6, r0
  424584:	69e0      	ldr	r0, [r4, #28]
  424586:	f8ad 100c 	strh.w	r1, [sp, #12]
  42458a:	4617      	mov	r7, r2
  42458c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  424590:	6a62      	ldr	r2, [r4, #36]	; 0x24
  424592:	f8ad 500e 	strh.w	r5, [sp, #14]
  424596:	4698      	mov	r8, r3
  424598:	ad1a      	add	r5, sp, #104	; 0x68
  42459a:	2300      	movs	r3, #0
  42459c:	9007      	str	r0, [sp, #28]
  42459e:	a816      	add	r0, sp, #88	; 0x58
  4245a0:	9209      	str	r2, [sp, #36]	; 0x24
  4245a2:	9306      	str	r3, [sp, #24]
  4245a4:	9500      	str	r5, [sp, #0]
  4245a6:	9504      	str	r5, [sp, #16]
  4245a8:	9102      	str	r1, [sp, #8]
  4245aa:	9105      	str	r1, [sp, #20]
  4245ac:	f000 fd48 	bl	425040 <__retarget_lock_init_recursive>
  4245b0:	4643      	mov	r3, r8
  4245b2:	463a      	mov	r2, r7
  4245b4:	4669      	mov	r1, sp
  4245b6:	4630      	mov	r0, r6
  4245b8:	f7ff f990 	bl	4238dc <_vfiprintf_r>
  4245bc:	1e05      	subs	r5, r0, #0
  4245be:	db07      	blt.n	4245d0 <__sbprintf+0x64>
  4245c0:	4630      	mov	r0, r6
  4245c2:	4669      	mov	r1, sp
  4245c4:	f000 f928 	bl	424818 <_fflush_r>
  4245c8:	2800      	cmp	r0, #0
  4245ca:	bf18      	it	ne
  4245cc:	f04f 35ff 	movne.w	r5, #4294967295
  4245d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4245d4:	065b      	lsls	r3, r3, #25
  4245d6:	d503      	bpl.n	4245e0 <__sbprintf+0x74>
  4245d8:	89a3      	ldrh	r3, [r4, #12]
  4245da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4245de:	81a3      	strh	r3, [r4, #12]
  4245e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4245e2:	f000 fd2f 	bl	425044 <__retarget_lock_close_recursive>
  4245e6:	4628      	mov	r0, r5
  4245e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4245ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004245f0 <__swsetup_r>:
  4245f0:	b538      	push	{r3, r4, r5, lr}
  4245f2:	4b30      	ldr	r3, [pc, #192]	; (4246b4 <__swsetup_r+0xc4>)
  4245f4:	681b      	ldr	r3, [r3, #0]
  4245f6:	4605      	mov	r5, r0
  4245f8:	460c      	mov	r4, r1
  4245fa:	b113      	cbz	r3, 424602 <__swsetup_r+0x12>
  4245fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4245fe:	2a00      	cmp	r2, #0
  424600:	d038      	beq.n	424674 <__swsetup_r+0x84>
  424602:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  424606:	b293      	uxth	r3, r2
  424608:	0718      	lsls	r0, r3, #28
  42460a:	d50c      	bpl.n	424626 <__swsetup_r+0x36>
  42460c:	6920      	ldr	r0, [r4, #16]
  42460e:	b1a8      	cbz	r0, 42463c <__swsetup_r+0x4c>
  424610:	f013 0201 	ands.w	r2, r3, #1
  424614:	d01e      	beq.n	424654 <__swsetup_r+0x64>
  424616:	6963      	ldr	r3, [r4, #20]
  424618:	2200      	movs	r2, #0
  42461a:	425b      	negs	r3, r3
  42461c:	61a3      	str	r3, [r4, #24]
  42461e:	60a2      	str	r2, [r4, #8]
  424620:	b1f0      	cbz	r0, 424660 <__swsetup_r+0x70>
  424622:	2000      	movs	r0, #0
  424624:	bd38      	pop	{r3, r4, r5, pc}
  424626:	06d9      	lsls	r1, r3, #27
  424628:	d53c      	bpl.n	4246a4 <__swsetup_r+0xb4>
  42462a:	0758      	lsls	r0, r3, #29
  42462c:	d426      	bmi.n	42467c <__swsetup_r+0x8c>
  42462e:	6920      	ldr	r0, [r4, #16]
  424630:	f042 0308 	orr.w	r3, r2, #8
  424634:	81a3      	strh	r3, [r4, #12]
  424636:	b29b      	uxth	r3, r3
  424638:	2800      	cmp	r0, #0
  42463a:	d1e9      	bne.n	424610 <__swsetup_r+0x20>
  42463c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  424640:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  424644:	d0e4      	beq.n	424610 <__swsetup_r+0x20>
  424646:	4628      	mov	r0, r5
  424648:	4621      	mov	r1, r4
  42464a:	f000 fd2f 	bl	4250ac <__smakebuf_r>
  42464e:	89a3      	ldrh	r3, [r4, #12]
  424650:	6920      	ldr	r0, [r4, #16]
  424652:	e7dd      	b.n	424610 <__swsetup_r+0x20>
  424654:	0799      	lsls	r1, r3, #30
  424656:	bf58      	it	pl
  424658:	6962      	ldrpl	r2, [r4, #20]
  42465a:	60a2      	str	r2, [r4, #8]
  42465c:	2800      	cmp	r0, #0
  42465e:	d1e0      	bne.n	424622 <__swsetup_r+0x32>
  424660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  424664:	061a      	lsls	r2, r3, #24
  424666:	d5dd      	bpl.n	424624 <__swsetup_r+0x34>
  424668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42466c:	81a3      	strh	r3, [r4, #12]
  42466e:	f04f 30ff 	mov.w	r0, #4294967295
  424672:	bd38      	pop	{r3, r4, r5, pc}
  424674:	4618      	mov	r0, r3
  424676:	f000 f927 	bl	4248c8 <__sinit>
  42467a:	e7c2      	b.n	424602 <__swsetup_r+0x12>
  42467c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  42467e:	b151      	cbz	r1, 424696 <__swsetup_r+0xa6>
  424680:	f104 0340 	add.w	r3, r4, #64	; 0x40
  424684:	4299      	cmp	r1, r3
  424686:	d004      	beq.n	424692 <__swsetup_r+0xa2>
  424688:	4628      	mov	r0, r5
  42468a:	f000 fa43 	bl	424b14 <_free_r>
  42468e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  424692:	2300      	movs	r3, #0
  424694:	6323      	str	r3, [r4, #48]	; 0x30
  424696:	2300      	movs	r3, #0
  424698:	6920      	ldr	r0, [r4, #16]
  42469a:	6063      	str	r3, [r4, #4]
  42469c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4246a0:	6020      	str	r0, [r4, #0]
  4246a2:	e7c5      	b.n	424630 <__swsetup_r+0x40>
  4246a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4246a8:	2309      	movs	r3, #9
  4246aa:	602b      	str	r3, [r5, #0]
  4246ac:	f04f 30ff 	mov.w	r0, #4294967295
  4246b0:	81a2      	strh	r2, [r4, #12]
  4246b2:	bd38      	pop	{r3, r4, r5, pc}
  4246b4:	204000c0 	.word	0x204000c0

004246b8 <register_fini>:
  4246b8:	4b02      	ldr	r3, [pc, #8]	; (4246c4 <register_fini+0xc>)
  4246ba:	b113      	cbz	r3, 4246c2 <register_fini+0xa>
  4246bc:	4802      	ldr	r0, [pc, #8]	; (4246c8 <register_fini+0x10>)
  4246be:	f000 b805 	b.w	4246cc <atexit>
  4246c2:	4770      	bx	lr
  4246c4:	00000000 	.word	0x00000000
  4246c8:	00424939 	.word	0x00424939

004246cc <atexit>:
  4246cc:	2300      	movs	r3, #0
  4246ce:	4601      	mov	r1, r0
  4246d0:	461a      	mov	r2, r3
  4246d2:	4618      	mov	r0, r3
  4246d4:	f001 b890 	b.w	4257f8 <__register_exitproc>

004246d8 <__sflush_r>:
  4246d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4246dc:	b29a      	uxth	r2, r3
  4246de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4246e2:	460d      	mov	r5, r1
  4246e4:	0711      	lsls	r1, r2, #28
  4246e6:	4680      	mov	r8, r0
  4246e8:	d43a      	bmi.n	424760 <__sflush_r+0x88>
  4246ea:	686a      	ldr	r2, [r5, #4]
  4246ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4246f0:	2a00      	cmp	r2, #0
  4246f2:	81ab      	strh	r3, [r5, #12]
  4246f4:	dd6f      	ble.n	4247d6 <__sflush_r+0xfe>
  4246f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4246f8:	2c00      	cmp	r4, #0
  4246fa:	d049      	beq.n	424790 <__sflush_r+0xb8>
  4246fc:	2200      	movs	r2, #0
  4246fe:	b29b      	uxth	r3, r3
  424700:	f8d8 6000 	ldr.w	r6, [r8]
  424704:	f8c8 2000 	str.w	r2, [r8]
  424708:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  42470c:	d067      	beq.n	4247de <__sflush_r+0x106>
  42470e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  424710:	075f      	lsls	r7, r3, #29
  424712:	d505      	bpl.n	424720 <__sflush_r+0x48>
  424714:	6869      	ldr	r1, [r5, #4]
  424716:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  424718:	1a52      	subs	r2, r2, r1
  42471a:	b10b      	cbz	r3, 424720 <__sflush_r+0x48>
  42471c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  42471e:	1ad2      	subs	r2, r2, r3
  424720:	2300      	movs	r3, #0
  424722:	69e9      	ldr	r1, [r5, #28]
  424724:	4640      	mov	r0, r8
  424726:	47a0      	blx	r4
  424728:	1c44      	adds	r4, r0, #1
  42472a:	d03c      	beq.n	4247a6 <__sflush_r+0xce>
  42472c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  424730:	692a      	ldr	r2, [r5, #16]
  424732:	602a      	str	r2, [r5, #0]
  424734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  424738:	2200      	movs	r2, #0
  42473a:	81ab      	strh	r3, [r5, #12]
  42473c:	04db      	lsls	r3, r3, #19
  42473e:	606a      	str	r2, [r5, #4]
  424740:	d447      	bmi.n	4247d2 <__sflush_r+0xfa>
  424742:	6b29      	ldr	r1, [r5, #48]	; 0x30
  424744:	f8c8 6000 	str.w	r6, [r8]
  424748:	b311      	cbz	r1, 424790 <__sflush_r+0xb8>
  42474a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  42474e:	4299      	cmp	r1, r3
  424750:	d002      	beq.n	424758 <__sflush_r+0x80>
  424752:	4640      	mov	r0, r8
  424754:	f000 f9de 	bl	424b14 <_free_r>
  424758:	2000      	movs	r0, #0
  42475a:	6328      	str	r0, [r5, #48]	; 0x30
  42475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424760:	692e      	ldr	r6, [r5, #16]
  424762:	b1ae      	cbz	r6, 424790 <__sflush_r+0xb8>
  424764:	682c      	ldr	r4, [r5, #0]
  424766:	602e      	str	r6, [r5, #0]
  424768:	0791      	lsls	r1, r2, #30
  42476a:	bf0c      	ite	eq
  42476c:	696b      	ldreq	r3, [r5, #20]
  42476e:	2300      	movne	r3, #0
  424770:	1ba4      	subs	r4, r4, r6
  424772:	60ab      	str	r3, [r5, #8]
  424774:	e00a      	b.n	42478c <__sflush_r+0xb4>
  424776:	4623      	mov	r3, r4
  424778:	4632      	mov	r2, r6
  42477a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  42477c:	69e9      	ldr	r1, [r5, #28]
  42477e:	4640      	mov	r0, r8
  424780:	47b8      	blx	r7
  424782:	2800      	cmp	r0, #0
  424784:	eba4 0400 	sub.w	r4, r4, r0
  424788:	4406      	add	r6, r0
  42478a:	dd04      	ble.n	424796 <__sflush_r+0xbe>
  42478c:	2c00      	cmp	r4, #0
  42478e:	dcf2      	bgt.n	424776 <__sflush_r+0x9e>
  424790:	2000      	movs	r0, #0
  424792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424796:	89ab      	ldrh	r3, [r5, #12]
  424798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42479c:	81ab      	strh	r3, [r5, #12]
  42479e:	f04f 30ff 	mov.w	r0, #4294967295
  4247a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4247a6:	f8d8 4000 	ldr.w	r4, [r8]
  4247aa:	2c1d      	cmp	r4, #29
  4247ac:	d8f3      	bhi.n	424796 <__sflush_r+0xbe>
  4247ae:	4b19      	ldr	r3, [pc, #100]	; (424814 <__sflush_r+0x13c>)
  4247b0:	40e3      	lsrs	r3, r4
  4247b2:	43db      	mvns	r3, r3
  4247b4:	f013 0301 	ands.w	r3, r3, #1
  4247b8:	d1ed      	bne.n	424796 <__sflush_r+0xbe>
  4247ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4247be:	606b      	str	r3, [r5, #4]
  4247c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4247c4:	6929      	ldr	r1, [r5, #16]
  4247c6:	81ab      	strh	r3, [r5, #12]
  4247c8:	04da      	lsls	r2, r3, #19
  4247ca:	6029      	str	r1, [r5, #0]
  4247cc:	d5b9      	bpl.n	424742 <__sflush_r+0x6a>
  4247ce:	2c00      	cmp	r4, #0
  4247d0:	d1b7      	bne.n	424742 <__sflush_r+0x6a>
  4247d2:	6528      	str	r0, [r5, #80]	; 0x50
  4247d4:	e7b5      	b.n	424742 <__sflush_r+0x6a>
  4247d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4247d8:	2a00      	cmp	r2, #0
  4247da:	dc8c      	bgt.n	4246f6 <__sflush_r+0x1e>
  4247dc:	e7d8      	b.n	424790 <__sflush_r+0xb8>
  4247de:	2301      	movs	r3, #1
  4247e0:	69e9      	ldr	r1, [r5, #28]
  4247e2:	4640      	mov	r0, r8
  4247e4:	47a0      	blx	r4
  4247e6:	1c43      	adds	r3, r0, #1
  4247e8:	4602      	mov	r2, r0
  4247ea:	d002      	beq.n	4247f2 <__sflush_r+0x11a>
  4247ec:	89ab      	ldrh	r3, [r5, #12]
  4247ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4247f0:	e78e      	b.n	424710 <__sflush_r+0x38>
  4247f2:	f8d8 3000 	ldr.w	r3, [r8]
  4247f6:	2b00      	cmp	r3, #0
  4247f8:	d0f8      	beq.n	4247ec <__sflush_r+0x114>
  4247fa:	2b1d      	cmp	r3, #29
  4247fc:	d001      	beq.n	424802 <__sflush_r+0x12a>
  4247fe:	2b16      	cmp	r3, #22
  424800:	d102      	bne.n	424808 <__sflush_r+0x130>
  424802:	f8c8 6000 	str.w	r6, [r8]
  424806:	e7c3      	b.n	424790 <__sflush_r+0xb8>
  424808:	89ab      	ldrh	r3, [r5, #12]
  42480a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42480e:	81ab      	strh	r3, [r5, #12]
  424810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424814:	20400001 	.word	0x20400001

00424818 <_fflush_r>:
  424818:	b538      	push	{r3, r4, r5, lr}
  42481a:	460d      	mov	r5, r1
  42481c:	4604      	mov	r4, r0
  42481e:	b108      	cbz	r0, 424824 <_fflush_r+0xc>
  424820:	6b83      	ldr	r3, [r0, #56]	; 0x38
  424822:	b1bb      	cbz	r3, 424854 <_fflush_r+0x3c>
  424824:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  424828:	b188      	cbz	r0, 42484e <_fflush_r+0x36>
  42482a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  42482c:	07db      	lsls	r3, r3, #31
  42482e:	d401      	bmi.n	424834 <_fflush_r+0x1c>
  424830:	0581      	lsls	r1, r0, #22
  424832:	d517      	bpl.n	424864 <_fflush_r+0x4c>
  424834:	4620      	mov	r0, r4
  424836:	4629      	mov	r1, r5
  424838:	f7ff ff4e 	bl	4246d8 <__sflush_r>
  42483c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  42483e:	07da      	lsls	r2, r3, #31
  424840:	4604      	mov	r4, r0
  424842:	d402      	bmi.n	42484a <_fflush_r+0x32>
  424844:	89ab      	ldrh	r3, [r5, #12]
  424846:	059b      	lsls	r3, r3, #22
  424848:	d507      	bpl.n	42485a <_fflush_r+0x42>
  42484a:	4620      	mov	r0, r4
  42484c:	bd38      	pop	{r3, r4, r5, pc}
  42484e:	4604      	mov	r4, r0
  424850:	4620      	mov	r0, r4
  424852:	bd38      	pop	{r3, r4, r5, pc}
  424854:	f000 f838 	bl	4248c8 <__sinit>
  424858:	e7e4      	b.n	424824 <_fflush_r+0xc>
  42485a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  42485c:	f000 fbf6 	bl	42504c <__retarget_lock_release_recursive>
  424860:	4620      	mov	r0, r4
  424862:	bd38      	pop	{r3, r4, r5, pc}
  424864:	6da8      	ldr	r0, [r5, #88]	; 0x58
  424866:	f000 fbef 	bl	425048 <__retarget_lock_acquire_recursive>
  42486a:	e7e3      	b.n	424834 <_fflush_r+0x1c>

0042486c <_cleanup_r>:
  42486c:	4901      	ldr	r1, [pc, #4]	; (424874 <_cleanup_r+0x8>)
  42486e:	f000 bbaf 	b.w	424fd0 <_fwalk_reent>
  424872:	bf00      	nop
  424874:	004258e1 	.word	0x004258e1

00424878 <std.isra.0>:
  424878:	b510      	push	{r4, lr}
  42487a:	2300      	movs	r3, #0
  42487c:	4604      	mov	r4, r0
  42487e:	8181      	strh	r1, [r0, #12]
  424880:	81c2      	strh	r2, [r0, #14]
  424882:	6003      	str	r3, [r0, #0]
  424884:	6043      	str	r3, [r0, #4]
  424886:	6083      	str	r3, [r0, #8]
  424888:	6643      	str	r3, [r0, #100]	; 0x64
  42488a:	6103      	str	r3, [r0, #16]
  42488c:	6143      	str	r3, [r0, #20]
  42488e:	6183      	str	r3, [r0, #24]
  424890:	4619      	mov	r1, r3
  424892:	2208      	movs	r2, #8
  424894:	305c      	adds	r0, #92	; 0x5c
  424896:	f7fe fc4f 	bl	423138 <memset>
  42489a:	4807      	ldr	r0, [pc, #28]	; (4248b8 <std.isra.0+0x40>)
  42489c:	4907      	ldr	r1, [pc, #28]	; (4248bc <std.isra.0+0x44>)
  42489e:	4a08      	ldr	r2, [pc, #32]	; (4248c0 <std.isra.0+0x48>)
  4248a0:	4b08      	ldr	r3, [pc, #32]	; (4248c4 <std.isra.0+0x4c>)
  4248a2:	6220      	str	r0, [r4, #32]
  4248a4:	61e4      	str	r4, [r4, #28]
  4248a6:	6261      	str	r1, [r4, #36]	; 0x24
  4248a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4248aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4248ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4248b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4248b4:	f000 bbc4 	b.w	425040 <__retarget_lock_init_recursive>
  4248b8:	00425625 	.word	0x00425625
  4248bc:	00425649 	.word	0x00425649
  4248c0:	00425685 	.word	0x00425685
  4248c4:	004256a5 	.word	0x004256a5

004248c8 <__sinit>:
  4248c8:	b510      	push	{r4, lr}
  4248ca:	4604      	mov	r4, r0
  4248cc:	4812      	ldr	r0, [pc, #72]	; (424918 <__sinit+0x50>)
  4248ce:	f000 fbbb 	bl	425048 <__retarget_lock_acquire_recursive>
  4248d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4248d4:	b9d2      	cbnz	r2, 42490c <__sinit+0x44>
  4248d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4248da:	4810      	ldr	r0, [pc, #64]	; (42491c <__sinit+0x54>)
  4248dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4248e0:	2103      	movs	r1, #3
  4248e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4248e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4248e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4248ec:	6860      	ldr	r0, [r4, #4]
  4248ee:	2104      	movs	r1, #4
  4248f0:	f7ff ffc2 	bl	424878 <std.isra.0>
  4248f4:	2201      	movs	r2, #1
  4248f6:	2109      	movs	r1, #9
  4248f8:	68a0      	ldr	r0, [r4, #8]
  4248fa:	f7ff ffbd 	bl	424878 <std.isra.0>
  4248fe:	2202      	movs	r2, #2
  424900:	2112      	movs	r1, #18
  424902:	68e0      	ldr	r0, [r4, #12]
  424904:	f7ff ffb8 	bl	424878 <std.isra.0>
  424908:	2301      	movs	r3, #1
  42490a:	63a3      	str	r3, [r4, #56]	; 0x38
  42490c:	4802      	ldr	r0, [pc, #8]	; (424918 <__sinit+0x50>)
  42490e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  424912:	f000 bb9b 	b.w	42504c <__retarget_lock_release_recursive>
  424916:	bf00      	nop
  424918:	2043a31c 	.word	0x2043a31c
  42491c:	0042486d 	.word	0x0042486d

00424920 <__sfp_lock_acquire>:
  424920:	4801      	ldr	r0, [pc, #4]	; (424928 <__sfp_lock_acquire+0x8>)
  424922:	f000 bb91 	b.w	425048 <__retarget_lock_acquire_recursive>
  424926:	bf00      	nop
  424928:	2043a330 	.word	0x2043a330

0042492c <__sfp_lock_release>:
  42492c:	4801      	ldr	r0, [pc, #4]	; (424934 <__sfp_lock_release+0x8>)
  42492e:	f000 bb8d 	b.w	42504c <__retarget_lock_release_recursive>
  424932:	bf00      	nop
  424934:	2043a330 	.word	0x2043a330

00424938 <__libc_fini_array>:
  424938:	b538      	push	{r3, r4, r5, lr}
  42493a:	4c0a      	ldr	r4, [pc, #40]	; (424964 <__libc_fini_array+0x2c>)
  42493c:	4d0a      	ldr	r5, [pc, #40]	; (424968 <__libc_fini_array+0x30>)
  42493e:	1b64      	subs	r4, r4, r5
  424940:	10a4      	asrs	r4, r4, #2
  424942:	d00a      	beq.n	42495a <__libc_fini_array+0x22>
  424944:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  424948:	3b01      	subs	r3, #1
  42494a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  42494e:	3c01      	subs	r4, #1
  424950:	f855 3904 	ldr.w	r3, [r5], #-4
  424954:	4798      	blx	r3
  424956:	2c00      	cmp	r4, #0
  424958:	d1f9      	bne.n	42494e <__libc_fini_array+0x16>
  42495a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  42495e:	f00c b84f 	b.w	430a00 <_fini>
  424962:	bf00      	nop
  424964:	00430a10 	.word	0x00430a10
  424968:	00430a0c 	.word	0x00430a0c

0042496c <__fputwc>:
  42496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  424970:	b082      	sub	sp, #8
  424972:	4680      	mov	r8, r0
  424974:	4689      	mov	r9, r1
  424976:	4614      	mov	r4, r2
  424978:	f000 fb54 	bl	425024 <__locale_mb_cur_max>
  42497c:	2801      	cmp	r0, #1
  42497e:	d036      	beq.n	4249ee <__fputwc+0x82>
  424980:	464a      	mov	r2, r9
  424982:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  424986:	a901      	add	r1, sp, #4
  424988:	4640      	mov	r0, r8
  42498a:	f000 fee7 	bl	42575c <_wcrtomb_r>
  42498e:	1c42      	adds	r2, r0, #1
  424990:	4606      	mov	r6, r0
  424992:	d025      	beq.n	4249e0 <__fputwc+0x74>
  424994:	b3a8      	cbz	r0, 424a02 <__fputwc+0x96>
  424996:	f89d e004 	ldrb.w	lr, [sp, #4]
  42499a:	2500      	movs	r5, #0
  42499c:	f10d 0a04 	add.w	sl, sp, #4
  4249a0:	e009      	b.n	4249b6 <__fputwc+0x4a>
  4249a2:	6823      	ldr	r3, [r4, #0]
  4249a4:	1c5a      	adds	r2, r3, #1
  4249a6:	6022      	str	r2, [r4, #0]
  4249a8:	f883 e000 	strb.w	lr, [r3]
  4249ac:	3501      	adds	r5, #1
  4249ae:	42b5      	cmp	r5, r6
  4249b0:	d227      	bcs.n	424a02 <__fputwc+0x96>
  4249b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4249b6:	68a3      	ldr	r3, [r4, #8]
  4249b8:	3b01      	subs	r3, #1
  4249ba:	2b00      	cmp	r3, #0
  4249bc:	60a3      	str	r3, [r4, #8]
  4249be:	daf0      	bge.n	4249a2 <__fputwc+0x36>
  4249c0:	69a7      	ldr	r7, [r4, #24]
  4249c2:	42bb      	cmp	r3, r7
  4249c4:	4671      	mov	r1, lr
  4249c6:	4622      	mov	r2, r4
  4249c8:	4640      	mov	r0, r8
  4249ca:	db02      	blt.n	4249d2 <__fputwc+0x66>
  4249cc:	f1be 0f0a 	cmp.w	lr, #10
  4249d0:	d1e7      	bne.n	4249a2 <__fputwc+0x36>
  4249d2:	f000 fe6b 	bl	4256ac <__swbuf_r>
  4249d6:	1c43      	adds	r3, r0, #1
  4249d8:	d1e8      	bne.n	4249ac <__fputwc+0x40>
  4249da:	b002      	add	sp, #8
  4249dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4249e0:	89a3      	ldrh	r3, [r4, #12]
  4249e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4249e6:	81a3      	strh	r3, [r4, #12]
  4249e8:	b002      	add	sp, #8
  4249ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4249ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4249f2:	2bfe      	cmp	r3, #254	; 0xfe
  4249f4:	d8c4      	bhi.n	424980 <__fputwc+0x14>
  4249f6:	fa5f fe89 	uxtb.w	lr, r9
  4249fa:	4606      	mov	r6, r0
  4249fc:	f88d e004 	strb.w	lr, [sp, #4]
  424a00:	e7cb      	b.n	42499a <__fputwc+0x2e>
  424a02:	4648      	mov	r0, r9
  424a04:	b002      	add	sp, #8
  424a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  424a0a:	bf00      	nop

00424a0c <_fputwc_r>:
  424a0c:	b530      	push	{r4, r5, lr}
  424a0e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  424a10:	f013 0f01 	tst.w	r3, #1
  424a14:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  424a18:	4614      	mov	r4, r2
  424a1a:	b083      	sub	sp, #12
  424a1c:	4605      	mov	r5, r0
  424a1e:	b29a      	uxth	r2, r3
  424a20:	d101      	bne.n	424a26 <_fputwc_r+0x1a>
  424a22:	0590      	lsls	r0, r2, #22
  424a24:	d51c      	bpl.n	424a60 <_fputwc_r+0x54>
  424a26:	0490      	lsls	r0, r2, #18
  424a28:	d406      	bmi.n	424a38 <_fputwc_r+0x2c>
  424a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  424a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  424a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  424a34:	81a3      	strh	r3, [r4, #12]
  424a36:	6662      	str	r2, [r4, #100]	; 0x64
  424a38:	4628      	mov	r0, r5
  424a3a:	4622      	mov	r2, r4
  424a3c:	f7ff ff96 	bl	42496c <__fputwc>
  424a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
  424a42:	07da      	lsls	r2, r3, #31
  424a44:	4605      	mov	r5, r0
  424a46:	d402      	bmi.n	424a4e <_fputwc_r+0x42>
  424a48:	89a3      	ldrh	r3, [r4, #12]
  424a4a:	059b      	lsls	r3, r3, #22
  424a4c:	d502      	bpl.n	424a54 <_fputwc_r+0x48>
  424a4e:	4628      	mov	r0, r5
  424a50:	b003      	add	sp, #12
  424a52:	bd30      	pop	{r4, r5, pc}
  424a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  424a56:	f000 faf9 	bl	42504c <__retarget_lock_release_recursive>
  424a5a:	4628      	mov	r0, r5
  424a5c:	b003      	add	sp, #12
  424a5e:	bd30      	pop	{r4, r5, pc}
  424a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  424a62:	9101      	str	r1, [sp, #4]
  424a64:	f000 faf0 	bl	425048 <__retarget_lock_acquire_recursive>
  424a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  424a6c:	9901      	ldr	r1, [sp, #4]
  424a6e:	b29a      	uxth	r2, r3
  424a70:	e7d9      	b.n	424a26 <_fputwc_r+0x1a>
  424a72:	bf00      	nop

00424a74 <_malloc_trim_r>:
  424a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  424a76:	4f24      	ldr	r7, [pc, #144]	; (424b08 <_malloc_trim_r+0x94>)
  424a78:	460c      	mov	r4, r1
  424a7a:	4606      	mov	r6, r0
  424a7c:	f7fe fbaa 	bl	4231d4 <__malloc_lock>
  424a80:	68bb      	ldr	r3, [r7, #8]
  424a82:	685d      	ldr	r5, [r3, #4]
  424a84:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  424a88:	310f      	adds	r1, #15
  424a8a:	f025 0503 	bic.w	r5, r5, #3
  424a8e:	4429      	add	r1, r5
  424a90:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  424a94:	f021 010f 	bic.w	r1, r1, #15
  424a98:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  424a9c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  424aa0:	db07      	blt.n	424ab2 <_malloc_trim_r+0x3e>
  424aa2:	2100      	movs	r1, #0
  424aa4:	4630      	mov	r0, r6
  424aa6:	f7fe fba1 	bl	4231ec <_sbrk_r>
  424aaa:	68bb      	ldr	r3, [r7, #8]
  424aac:	442b      	add	r3, r5
  424aae:	4298      	cmp	r0, r3
  424ab0:	d004      	beq.n	424abc <_malloc_trim_r+0x48>
  424ab2:	4630      	mov	r0, r6
  424ab4:	f7fe fb94 	bl	4231e0 <__malloc_unlock>
  424ab8:	2000      	movs	r0, #0
  424aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  424abc:	4261      	negs	r1, r4
  424abe:	4630      	mov	r0, r6
  424ac0:	f7fe fb94 	bl	4231ec <_sbrk_r>
  424ac4:	3001      	adds	r0, #1
  424ac6:	d00d      	beq.n	424ae4 <_malloc_trim_r+0x70>
  424ac8:	4b10      	ldr	r3, [pc, #64]	; (424b0c <_malloc_trim_r+0x98>)
  424aca:	68ba      	ldr	r2, [r7, #8]
  424acc:	6819      	ldr	r1, [r3, #0]
  424ace:	1b2d      	subs	r5, r5, r4
  424ad0:	f045 0501 	orr.w	r5, r5, #1
  424ad4:	4630      	mov	r0, r6
  424ad6:	1b09      	subs	r1, r1, r4
  424ad8:	6055      	str	r5, [r2, #4]
  424ada:	6019      	str	r1, [r3, #0]
  424adc:	f7fe fb80 	bl	4231e0 <__malloc_unlock>
  424ae0:	2001      	movs	r0, #1
  424ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  424ae4:	2100      	movs	r1, #0
  424ae6:	4630      	mov	r0, r6
  424ae8:	f7fe fb80 	bl	4231ec <_sbrk_r>
  424aec:	68ba      	ldr	r2, [r7, #8]
  424aee:	1a83      	subs	r3, r0, r2
  424af0:	2b0f      	cmp	r3, #15
  424af2:	ddde      	ble.n	424ab2 <_malloc_trim_r+0x3e>
  424af4:	4c06      	ldr	r4, [pc, #24]	; (424b10 <_malloc_trim_r+0x9c>)
  424af6:	4905      	ldr	r1, [pc, #20]	; (424b0c <_malloc_trim_r+0x98>)
  424af8:	6824      	ldr	r4, [r4, #0]
  424afa:	f043 0301 	orr.w	r3, r3, #1
  424afe:	1b00      	subs	r0, r0, r4
  424b00:	6053      	str	r3, [r2, #4]
  424b02:	6008      	str	r0, [r1, #0]
  424b04:	e7d5      	b.n	424ab2 <_malloc_trim_r+0x3e>
  424b06:	bf00      	nop
  424b08:	204004f0 	.word	0x204004f0
  424b0c:	2043a048 	.word	0x2043a048
  424b10:	204008f8 	.word	0x204008f8

00424b14 <_free_r>:
  424b14:	2900      	cmp	r1, #0
  424b16:	d044      	beq.n	424ba2 <_free_r+0x8e>
  424b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  424b1c:	460d      	mov	r5, r1
  424b1e:	4680      	mov	r8, r0
  424b20:	f7fe fb58 	bl	4231d4 <__malloc_lock>
  424b24:	f855 7c04 	ldr.w	r7, [r5, #-4]
  424b28:	4969      	ldr	r1, [pc, #420]	; (424cd0 <_free_r+0x1bc>)
  424b2a:	f027 0301 	bic.w	r3, r7, #1
  424b2e:	f1a5 0408 	sub.w	r4, r5, #8
  424b32:	18e2      	adds	r2, r4, r3
  424b34:	688e      	ldr	r6, [r1, #8]
  424b36:	6850      	ldr	r0, [r2, #4]
  424b38:	42b2      	cmp	r2, r6
  424b3a:	f020 0003 	bic.w	r0, r0, #3
  424b3e:	d05e      	beq.n	424bfe <_free_r+0xea>
  424b40:	07fe      	lsls	r6, r7, #31
  424b42:	6050      	str	r0, [r2, #4]
  424b44:	d40b      	bmi.n	424b5e <_free_r+0x4a>
  424b46:	f855 7c08 	ldr.w	r7, [r5, #-8]
  424b4a:	1be4      	subs	r4, r4, r7
  424b4c:	f101 0e08 	add.w	lr, r1, #8
  424b50:	68a5      	ldr	r5, [r4, #8]
  424b52:	4575      	cmp	r5, lr
  424b54:	443b      	add	r3, r7
  424b56:	d06d      	beq.n	424c34 <_free_r+0x120>
  424b58:	68e7      	ldr	r7, [r4, #12]
  424b5a:	60ef      	str	r7, [r5, #12]
  424b5c:	60bd      	str	r5, [r7, #8]
  424b5e:	1815      	adds	r5, r2, r0
  424b60:	686d      	ldr	r5, [r5, #4]
  424b62:	07ed      	lsls	r5, r5, #31
  424b64:	d53e      	bpl.n	424be4 <_free_r+0xd0>
  424b66:	f043 0201 	orr.w	r2, r3, #1
  424b6a:	6062      	str	r2, [r4, #4]
  424b6c:	50e3      	str	r3, [r4, r3]
  424b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  424b72:	d217      	bcs.n	424ba4 <_free_r+0x90>
  424b74:	08db      	lsrs	r3, r3, #3
  424b76:	1c58      	adds	r0, r3, #1
  424b78:	109a      	asrs	r2, r3, #2
  424b7a:	684d      	ldr	r5, [r1, #4]
  424b7c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  424b80:	60a7      	str	r7, [r4, #8]
  424b82:	2301      	movs	r3, #1
  424b84:	4093      	lsls	r3, r2
  424b86:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  424b8a:	432b      	orrs	r3, r5
  424b8c:	3a08      	subs	r2, #8
  424b8e:	60e2      	str	r2, [r4, #12]
  424b90:	604b      	str	r3, [r1, #4]
  424b92:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  424b96:	60fc      	str	r4, [r7, #12]
  424b98:	4640      	mov	r0, r8
  424b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  424b9e:	f7fe bb1f 	b.w	4231e0 <__malloc_unlock>
  424ba2:	4770      	bx	lr
  424ba4:	0a5a      	lsrs	r2, r3, #9
  424ba6:	2a04      	cmp	r2, #4
  424ba8:	d852      	bhi.n	424c50 <_free_r+0x13c>
  424baa:	099a      	lsrs	r2, r3, #6
  424bac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  424bb0:	00ff      	lsls	r7, r7, #3
  424bb2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  424bb6:	19c8      	adds	r0, r1, r7
  424bb8:	59ca      	ldr	r2, [r1, r7]
  424bba:	3808      	subs	r0, #8
  424bbc:	4290      	cmp	r0, r2
  424bbe:	d04f      	beq.n	424c60 <_free_r+0x14c>
  424bc0:	6851      	ldr	r1, [r2, #4]
  424bc2:	f021 0103 	bic.w	r1, r1, #3
  424bc6:	428b      	cmp	r3, r1
  424bc8:	d232      	bcs.n	424c30 <_free_r+0x11c>
  424bca:	6892      	ldr	r2, [r2, #8]
  424bcc:	4290      	cmp	r0, r2
  424bce:	d1f7      	bne.n	424bc0 <_free_r+0xac>
  424bd0:	68c3      	ldr	r3, [r0, #12]
  424bd2:	60a0      	str	r0, [r4, #8]
  424bd4:	60e3      	str	r3, [r4, #12]
  424bd6:	609c      	str	r4, [r3, #8]
  424bd8:	60c4      	str	r4, [r0, #12]
  424bda:	4640      	mov	r0, r8
  424bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  424be0:	f7fe bafe 	b.w	4231e0 <__malloc_unlock>
  424be4:	6895      	ldr	r5, [r2, #8]
  424be6:	4f3b      	ldr	r7, [pc, #236]	; (424cd4 <_free_r+0x1c0>)
  424be8:	42bd      	cmp	r5, r7
  424bea:	4403      	add	r3, r0
  424bec:	d040      	beq.n	424c70 <_free_r+0x15c>
  424bee:	68d0      	ldr	r0, [r2, #12]
  424bf0:	60e8      	str	r0, [r5, #12]
  424bf2:	f043 0201 	orr.w	r2, r3, #1
  424bf6:	6085      	str	r5, [r0, #8]
  424bf8:	6062      	str	r2, [r4, #4]
  424bfa:	50e3      	str	r3, [r4, r3]
  424bfc:	e7b7      	b.n	424b6e <_free_r+0x5a>
  424bfe:	07ff      	lsls	r7, r7, #31
  424c00:	4403      	add	r3, r0
  424c02:	d407      	bmi.n	424c14 <_free_r+0x100>
  424c04:	f855 2c08 	ldr.w	r2, [r5, #-8]
  424c08:	1aa4      	subs	r4, r4, r2
  424c0a:	4413      	add	r3, r2
  424c0c:	68a0      	ldr	r0, [r4, #8]
  424c0e:	68e2      	ldr	r2, [r4, #12]
  424c10:	60c2      	str	r2, [r0, #12]
  424c12:	6090      	str	r0, [r2, #8]
  424c14:	4a30      	ldr	r2, [pc, #192]	; (424cd8 <_free_r+0x1c4>)
  424c16:	6812      	ldr	r2, [r2, #0]
  424c18:	f043 0001 	orr.w	r0, r3, #1
  424c1c:	4293      	cmp	r3, r2
  424c1e:	6060      	str	r0, [r4, #4]
  424c20:	608c      	str	r4, [r1, #8]
  424c22:	d3b9      	bcc.n	424b98 <_free_r+0x84>
  424c24:	4b2d      	ldr	r3, [pc, #180]	; (424cdc <_free_r+0x1c8>)
  424c26:	4640      	mov	r0, r8
  424c28:	6819      	ldr	r1, [r3, #0]
  424c2a:	f7ff ff23 	bl	424a74 <_malloc_trim_r>
  424c2e:	e7b3      	b.n	424b98 <_free_r+0x84>
  424c30:	4610      	mov	r0, r2
  424c32:	e7cd      	b.n	424bd0 <_free_r+0xbc>
  424c34:	1811      	adds	r1, r2, r0
  424c36:	6849      	ldr	r1, [r1, #4]
  424c38:	07c9      	lsls	r1, r1, #31
  424c3a:	d444      	bmi.n	424cc6 <_free_r+0x1b2>
  424c3c:	6891      	ldr	r1, [r2, #8]
  424c3e:	68d2      	ldr	r2, [r2, #12]
  424c40:	60ca      	str	r2, [r1, #12]
  424c42:	4403      	add	r3, r0
  424c44:	f043 0001 	orr.w	r0, r3, #1
  424c48:	6091      	str	r1, [r2, #8]
  424c4a:	6060      	str	r0, [r4, #4]
  424c4c:	50e3      	str	r3, [r4, r3]
  424c4e:	e7a3      	b.n	424b98 <_free_r+0x84>
  424c50:	2a14      	cmp	r2, #20
  424c52:	d816      	bhi.n	424c82 <_free_r+0x16e>
  424c54:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  424c58:	00ff      	lsls	r7, r7, #3
  424c5a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  424c5e:	e7aa      	b.n	424bb6 <_free_r+0xa2>
  424c60:	10aa      	asrs	r2, r5, #2
  424c62:	2301      	movs	r3, #1
  424c64:	684d      	ldr	r5, [r1, #4]
  424c66:	4093      	lsls	r3, r2
  424c68:	432b      	orrs	r3, r5
  424c6a:	604b      	str	r3, [r1, #4]
  424c6c:	4603      	mov	r3, r0
  424c6e:	e7b0      	b.n	424bd2 <_free_r+0xbe>
  424c70:	f043 0201 	orr.w	r2, r3, #1
  424c74:	614c      	str	r4, [r1, #20]
  424c76:	610c      	str	r4, [r1, #16]
  424c78:	60e5      	str	r5, [r4, #12]
  424c7a:	60a5      	str	r5, [r4, #8]
  424c7c:	6062      	str	r2, [r4, #4]
  424c7e:	50e3      	str	r3, [r4, r3]
  424c80:	e78a      	b.n	424b98 <_free_r+0x84>
  424c82:	2a54      	cmp	r2, #84	; 0x54
  424c84:	d806      	bhi.n	424c94 <_free_r+0x180>
  424c86:	0b1a      	lsrs	r2, r3, #12
  424c88:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  424c8c:	00ff      	lsls	r7, r7, #3
  424c8e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  424c92:	e790      	b.n	424bb6 <_free_r+0xa2>
  424c94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  424c98:	d806      	bhi.n	424ca8 <_free_r+0x194>
  424c9a:	0bda      	lsrs	r2, r3, #15
  424c9c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  424ca0:	00ff      	lsls	r7, r7, #3
  424ca2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  424ca6:	e786      	b.n	424bb6 <_free_r+0xa2>
  424ca8:	f240 5054 	movw	r0, #1364	; 0x554
  424cac:	4282      	cmp	r2, r0
  424cae:	d806      	bhi.n	424cbe <_free_r+0x1aa>
  424cb0:	0c9a      	lsrs	r2, r3, #18
  424cb2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  424cb6:	00ff      	lsls	r7, r7, #3
  424cb8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  424cbc:	e77b      	b.n	424bb6 <_free_r+0xa2>
  424cbe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  424cc2:	257e      	movs	r5, #126	; 0x7e
  424cc4:	e777      	b.n	424bb6 <_free_r+0xa2>
  424cc6:	f043 0101 	orr.w	r1, r3, #1
  424cca:	6061      	str	r1, [r4, #4]
  424ccc:	6013      	str	r3, [r2, #0]
  424cce:	e763      	b.n	424b98 <_free_r+0x84>
  424cd0:	204004f0 	.word	0x204004f0
  424cd4:	204004f8 	.word	0x204004f8
  424cd8:	204008fc 	.word	0x204008fc
  424cdc:	2043a078 	.word	0x2043a078

00424ce0 <__sfvwrite_r>:
  424ce0:	6893      	ldr	r3, [r2, #8]
  424ce2:	2b00      	cmp	r3, #0
  424ce4:	d073      	beq.n	424dce <__sfvwrite_r+0xee>
  424ce6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  424cea:	898b      	ldrh	r3, [r1, #12]
  424cec:	b083      	sub	sp, #12
  424cee:	460c      	mov	r4, r1
  424cf0:	0719      	lsls	r1, r3, #28
  424cf2:	9000      	str	r0, [sp, #0]
  424cf4:	4616      	mov	r6, r2
  424cf6:	d526      	bpl.n	424d46 <__sfvwrite_r+0x66>
  424cf8:	6922      	ldr	r2, [r4, #16]
  424cfa:	b322      	cbz	r2, 424d46 <__sfvwrite_r+0x66>
  424cfc:	f013 0002 	ands.w	r0, r3, #2
  424d00:	6835      	ldr	r5, [r6, #0]
  424d02:	d02c      	beq.n	424d5e <__sfvwrite_r+0x7e>
  424d04:	f04f 0900 	mov.w	r9, #0
  424d08:	4fb0      	ldr	r7, [pc, #704]	; (424fcc <__sfvwrite_r+0x2ec>)
  424d0a:	46c8      	mov	r8, r9
  424d0c:	46b2      	mov	sl, r6
  424d0e:	45b8      	cmp	r8, r7
  424d10:	4643      	mov	r3, r8
  424d12:	464a      	mov	r2, r9
  424d14:	bf28      	it	cs
  424d16:	463b      	movcs	r3, r7
  424d18:	9800      	ldr	r0, [sp, #0]
  424d1a:	f1b8 0f00 	cmp.w	r8, #0
  424d1e:	d050      	beq.n	424dc2 <__sfvwrite_r+0xe2>
  424d20:	69e1      	ldr	r1, [r4, #28]
  424d22:	6a66      	ldr	r6, [r4, #36]	; 0x24
  424d24:	47b0      	blx	r6
  424d26:	2800      	cmp	r0, #0
  424d28:	dd58      	ble.n	424ddc <__sfvwrite_r+0xfc>
  424d2a:	f8da 3008 	ldr.w	r3, [sl, #8]
  424d2e:	1a1b      	subs	r3, r3, r0
  424d30:	4481      	add	r9, r0
  424d32:	eba8 0800 	sub.w	r8, r8, r0
  424d36:	f8ca 3008 	str.w	r3, [sl, #8]
  424d3a:	2b00      	cmp	r3, #0
  424d3c:	d1e7      	bne.n	424d0e <__sfvwrite_r+0x2e>
  424d3e:	2000      	movs	r0, #0
  424d40:	b003      	add	sp, #12
  424d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  424d46:	4621      	mov	r1, r4
  424d48:	9800      	ldr	r0, [sp, #0]
  424d4a:	f7ff fc51 	bl	4245f0 <__swsetup_r>
  424d4e:	2800      	cmp	r0, #0
  424d50:	f040 8133 	bne.w	424fba <__sfvwrite_r+0x2da>
  424d54:	89a3      	ldrh	r3, [r4, #12]
  424d56:	6835      	ldr	r5, [r6, #0]
  424d58:	f013 0002 	ands.w	r0, r3, #2
  424d5c:	d1d2      	bne.n	424d04 <__sfvwrite_r+0x24>
  424d5e:	f013 0901 	ands.w	r9, r3, #1
  424d62:	d145      	bne.n	424df0 <__sfvwrite_r+0x110>
  424d64:	464f      	mov	r7, r9
  424d66:	9601      	str	r6, [sp, #4]
  424d68:	b337      	cbz	r7, 424db8 <__sfvwrite_r+0xd8>
  424d6a:	059a      	lsls	r2, r3, #22
  424d6c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  424d70:	f140 8083 	bpl.w	424e7a <__sfvwrite_r+0x19a>
  424d74:	4547      	cmp	r7, r8
  424d76:	46c3      	mov	fp, r8
  424d78:	f0c0 80ab 	bcc.w	424ed2 <__sfvwrite_r+0x1f2>
  424d7c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  424d80:	f040 80ac 	bne.w	424edc <__sfvwrite_r+0x1fc>
  424d84:	6820      	ldr	r0, [r4, #0]
  424d86:	46ba      	mov	sl, r7
  424d88:	465a      	mov	r2, fp
  424d8a:	4649      	mov	r1, r9
  424d8c:	f000 fa40 	bl	425210 <memmove>
  424d90:	68a2      	ldr	r2, [r4, #8]
  424d92:	6823      	ldr	r3, [r4, #0]
  424d94:	eba2 0208 	sub.w	r2, r2, r8
  424d98:	445b      	add	r3, fp
  424d9a:	60a2      	str	r2, [r4, #8]
  424d9c:	6023      	str	r3, [r4, #0]
  424d9e:	9a01      	ldr	r2, [sp, #4]
  424da0:	6893      	ldr	r3, [r2, #8]
  424da2:	eba3 030a 	sub.w	r3, r3, sl
  424da6:	44d1      	add	r9, sl
  424da8:	eba7 070a 	sub.w	r7, r7, sl
  424dac:	6093      	str	r3, [r2, #8]
  424dae:	2b00      	cmp	r3, #0
  424db0:	d0c5      	beq.n	424d3e <__sfvwrite_r+0x5e>
  424db2:	89a3      	ldrh	r3, [r4, #12]
  424db4:	2f00      	cmp	r7, #0
  424db6:	d1d8      	bne.n	424d6a <__sfvwrite_r+0x8a>
  424db8:	f8d5 9000 	ldr.w	r9, [r5]
  424dbc:	686f      	ldr	r7, [r5, #4]
  424dbe:	3508      	adds	r5, #8
  424dc0:	e7d2      	b.n	424d68 <__sfvwrite_r+0x88>
  424dc2:	f8d5 9000 	ldr.w	r9, [r5]
  424dc6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  424dca:	3508      	adds	r5, #8
  424dcc:	e79f      	b.n	424d0e <__sfvwrite_r+0x2e>
  424dce:	2000      	movs	r0, #0
  424dd0:	4770      	bx	lr
  424dd2:	4621      	mov	r1, r4
  424dd4:	9800      	ldr	r0, [sp, #0]
  424dd6:	f7ff fd1f 	bl	424818 <_fflush_r>
  424dda:	b370      	cbz	r0, 424e3a <__sfvwrite_r+0x15a>
  424ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  424de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  424de4:	f04f 30ff 	mov.w	r0, #4294967295
  424de8:	81a3      	strh	r3, [r4, #12]
  424dea:	b003      	add	sp, #12
  424dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  424df0:	4681      	mov	r9, r0
  424df2:	4633      	mov	r3, r6
  424df4:	464e      	mov	r6, r9
  424df6:	46a8      	mov	r8, r5
  424df8:	469a      	mov	sl, r3
  424dfa:	464d      	mov	r5, r9
  424dfc:	b34e      	cbz	r6, 424e52 <__sfvwrite_r+0x172>
  424dfe:	b380      	cbz	r0, 424e62 <__sfvwrite_r+0x182>
  424e00:	6820      	ldr	r0, [r4, #0]
  424e02:	6923      	ldr	r3, [r4, #16]
  424e04:	6962      	ldr	r2, [r4, #20]
  424e06:	45b1      	cmp	r9, r6
  424e08:	46cb      	mov	fp, r9
  424e0a:	bf28      	it	cs
  424e0c:	46b3      	movcs	fp, r6
  424e0e:	4298      	cmp	r0, r3
  424e10:	465f      	mov	r7, fp
  424e12:	d904      	bls.n	424e1e <__sfvwrite_r+0x13e>
  424e14:	68a3      	ldr	r3, [r4, #8]
  424e16:	4413      	add	r3, r2
  424e18:	459b      	cmp	fp, r3
  424e1a:	f300 80a6 	bgt.w	424f6a <__sfvwrite_r+0x28a>
  424e1e:	4593      	cmp	fp, r2
  424e20:	db4b      	blt.n	424eba <__sfvwrite_r+0x1da>
  424e22:	4613      	mov	r3, r2
  424e24:	6a67      	ldr	r7, [r4, #36]	; 0x24
  424e26:	69e1      	ldr	r1, [r4, #28]
  424e28:	9800      	ldr	r0, [sp, #0]
  424e2a:	462a      	mov	r2, r5
  424e2c:	47b8      	blx	r7
  424e2e:	1e07      	subs	r7, r0, #0
  424e30:	ddd4      	ble.n	424ddc <__sfvwrite_r+0xfc>
  424e32:	ebb9 0907 	subs.w	r9, r9, r7
  424e36:	d0cc      	beq.n	424dd2 <__sfvwrite_r+0xf2>
  424e38:	2001      	movs	r0, #1
  424e3a:	f8da 3008 	ldr.w	r3, [sl, #8]
  424e3e:	1bdb      	subs	r3, r3, r7
  424e40:	443d      	add	r5, r7
  424e42:	1bf6      	subs	r6, r6, r7
  424e44:	f8ca 3008 	str.w	r3, [sl, #8]
  424e48:	2b00      	cmp	r3, #0
  424e4a:	f43f af78 	beq.w	424d3e <__sfvwrite_r+0x5e>
  424e4e:	2e00      	cmp	r6, #0
  424e50:	d1d5      	bne.n	424dfe <__sfvwrite_r+0x11e>
  424e52:	f108 0308 	add.w	r3, r8, #8
  424e56:	e913 0060 	ldmdb	r3, {r5, r6}
  424e5a:	4698      	mov	r8, r3
  424e5c:	3308      	adds	r3, #8
  424e5e:	2e00      	cmp	r6, #0
  424e60:	d0f9      	beq.n	424e56 <__sfvwrite_r+0x176>
  424e62:	4632      	mov	r2, r6
  424e64:	210a      	movs	r1, #10
  424e66:	4628      	mov	r0, r5
  424e68:	f000 f982 	bl	425170 <memchr>
  424e6c:	2800      	cmp	r0, #0
  424e6e:	f000 80a1 	beq.w	424fb4 <__sfvwrite_r+0x2d4>
  424e72:	3001      	adds	r0, #1
  424e74:	eba0 0905 	sub.w	r9, r0, r5
  424e78:	e7c2      	b.n	424e00 <__sfvwrite_r+0x120>
  424e7a:	6820      	ldr	r0, [r4, #0]
  424e7c:	6923      	ldr	r3, [r4, #16]
  424e7e:	4298      	cmp	r0, r3
  424e80:	d802      	bhi.n	424e88 <__sfvwrite_r+0x1a8>
  424e82:	6963      	ldr	r3, [r4, #20]
  424e84:	429f      	cmp	r7, r3
  424e86:	d25d      	bcs.n	424f44 <__sfvwrite_r+0x264>
  424e88:	45b8      	cmp	r8, r7
  424e8a:	bf28      	it	cs
  424e8c:	46b8      	movcs	r8, r7
  424e8e:	4642      	mov	r2, r8
  424e90:	4649      	mov	r1, r9
  424e92:	f000 f9bd 	bl	425210 <memmove>
  424e96:	68a3      	ldr	r3, [r4, #8]
  424e98:	6822      	ldr	r2, [r4, #0]
  424e9a:	eba3 0308 	sub.w	r3, r3, r8
  424e9e:	4442      	add	r2, r8
  424ea0:	60a3      	str	r3, [r4, #8]
  424ea2:	6022      	str	r2, [r4, #0]
  424ea4:	b10b      	cbz	r3, 424eaa <__sfvwrite_r+0x1ca>
  424ea6:	46c2      	mov	sl, r8
  424ea8:	e779      	b.n	424d9e <__sfvwrite_r+0xbe>
  424eaa:	4621      	mov	r1, r4
  424eac:	9800      	ldr	r0, [sp, #0]
  424eae:	f7ff fcb3 	bl	424818 <_fflush_r>
  424eb2:	2800      	cmp	r0, #0
  424eb4:	d192      	bne.n	424ddc <__sfvwrite_r+0xfc>
  424eb6:	46c2      	mov	sl, r8
  424eb8:	e771      	b.n	424d9e <__sfvwrite_r+0xbe>
  424eba:	465a      	mov	r2, fp
  424ebc:	4629      	mov	r1, r5
  424ebe:	f000 f9a7 	bl	425210 <memmove>
  424ec2:	68a2      	ldr	r2, [r4, #8]
  424ec4:	6823      	ldr	r3, [r4, #0]
  424ec6:	eba2 020b 	sub.w	r2, r2, fp
  424eca:	445b      	add	r3, fp
  424ecc:	60a2      	str	r2, [r4, #8]
  424ece:	6023      	str	r3, [r4, #0]
  424ed0:	e7af      	b.n	424e32 <__sfvwrite_r+0x152>
  424ed2:	6820      	ldr	r0, [r4, #0]
  424ed4:	46b8      	mov	r8, r7
  424ed6:	46ba      	mov	sl, r7
  424ed8:	46bb      	mov	fp, r7
  424eda:	e755      	b.n	424d88 <__sfvwrite_r+0xa8>
  424edc:	6962      	ldr	r2, [r4, #20]
  424ede:	6820      	ldr	r0, [r4, #0]
  424ee0:	6921      	ldr	r1, [r4, #16]
  424ee2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  424ee6:	eba0 0a01 	sub.w	sl, r0, r1
  424eea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  424eee:	f10a 0001 	add.w	r0, sl, #1
  424ef2:	ea4f 0868 	mov.w	r8, r8, asr #1
  424ef6:	4438      	add	r0, r7
  424ef8:	4540      	cmp	r0, r8
  424efa:	4642      	mov	r2, r8
  424efc:	bf84      	itt	hi
  424efe:	4680      	movhi	r8, r0
  424f00:	4642      	movhi	r2, r8
  424f02:	055b      	lsls	r3, r3, #21
  424f04:	d544      	bpl.n	424f90 <__sfvwrite_r+0x2b0>
  424f06:	4611      	mov	r1, r2
  424f08:	9800      	ldr	r0, [sp, #0]
  424f0a:	f7fd fd9b 	bl	422a44 <_malloc_r>
  424f0e:	4683      	mov	fp, r0
  424f10:	2800      	cmp	r0, #0
  424f12:	d055      	beq.n	424fc0 <__sfvwrite_r+0x2e0>
  424f14:	4652      	mov	r2, sl
  424f16:	6921      	ldr	r1, [r4, #16]
  424f18:	f7fe f874 	bl	423004 <memcpy>
  424f1c:	89a3      	ldrh	r3, [r4, #12]
  424f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  424f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  424f26:	81a3      	strh	r3, [r4, #12]
  424f28:	eb0b 000a 	add.w	r0, fp, sl
  424f2c:	eba8 030a 	sub.w	r3, r8, sl
  424f30:	f8c4 b010 	str.w	fp, [r4, #16]
  424f34:	f8c4 8014 	str.w	r8, [r4, #20]
  424f38:	6020      	str	r0, [r4, #0]
  424f3a:	60a3      	str	r3, [r4, #8]
  424f3c:	46b8      	mov	r8, r7
  424f3e:	46ba      	mov	sl, r7
  424f40:	46bb      	mov	fp, r7
  424f42:	e721      	b.n	424d88 <__sfvwrite_r+0xa8>
  424f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  424f48:	42b9      	cmp	r1, r7
  424f4a:	bf28      	it	cs
  424f4c:	4639      	movcs	r1, r7
  424f4e:	464a      	mov	r2, r9
  424f50:	fb91 f1f3 	sdiv	r1, r1, r3
  424f54:	9800      	ldr	r0, [sp, #0]
  424f56:	6a66      	ldr	r6, [r4, #36]	; 0x24
  424f58:	fb03 f301 	mul.w	r3, r3, r1
  424f5c:	69e1      	ldr	r1, [r4, #28]
  424f5e:	47b0      	blx	r6
  424f60:	f1b0 0a00 	subs.w	sl, r0, #0
  424f64:	f73f af1b 	bgt.w	424d9e <__sfvwrite_r+0xbe>
  424f68:	e738      	b.n	424ddc <__sfvwrite_r+0xfc>
  424f6a:	461a      	mov	r2, r3
  424f6c:	4629      	mov	r1, r5
  424f6e:	9301      	str	r3, [sp, #4]
  424f70:	f000 f94e 	bl	425210 <memmove>
  424f74:	6822      	ldr	r2, [r4, #0]
  424f76:	9b01      	ldr	r3, [sp, #4]
  424f78:	9800      	ldr	r0, [sp, #0]
  424f7a:	441a      	add	r2, r3
  424f7c:	6022      	str	r2, [r4, #0]
  424f7e:	4621      	mov	r1, r4
  424f80:	f7ff fc4a 	bl	424818 <_fflush_r>
  424f84:	9b01      	ldr	r3, [sp, #4]
  424f86:	2800      	cmp	r0, #0
  424f88:	f47f af28 	bne.w	424ddc <__sfvwrite_r+0xfc>
  424f8c:	461f      	mov	r7, r3
  424f8e:	e750      	b.n	424e32 <__sfvwrite_r+0x152>
  424f90:	9800      	ldr	r0, [sp, #0]
  424f92:	f000 f9a1 	bl	4252d8 <_realloc_r>
  424f96:	4683      	mov	fp, r0
  424f98:	2800      	cmp	r0, #0
  424f9a:	d1c5      	bne.n	424f28 <__sfvwrite_r+0x248>
  424f9c:	9d00      	ldr	r5, [sp, #0]
  424f9e:	6921      	ldr	r1, [r4, #16]
  424fa0:	4628      	mov	r0, r5
  424fa2:	f7ff fdb7 	bl	424b14 <_free_r>
  424fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  424faa:	220c      	movs	r2, #12
  424fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  424fb0:	602a      	str	r2, [r5, #0]
  424fb2:	e715      	b.n	424de0 <__sfvwrite_r+0x100>
  424fb4:	f106 0901 	add.w	r9, r6, #1
  424fb8:	e722      	b.n	424e00 <__sfvwrite_r+0x120>
  424fba:	f04f 30ff 	mov.w	r0, #4294967295
  424fbe:	e6bf      	b.n	424d40 <__sfvwrite_r+0x60>
  424fc0:	9a00      	ldr	r2, [sp, #0]
  424fc2:	230c      	movs	r3, #12
  424fc4:	6013      	str	r3, [r2, #0]
  424fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  424fca:	e709      	b.n	424de0 <__sfvwrite_r+0x100>
  424fcc:	7ffffc00 	.word	0x7ffffc00

00424fd0 <_fwalk_reent>:
  424fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  424fd4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  424fd8:	d01f      	beq.n	42501a <_fwalk_reent+0x4a>
  424fda:	4688      	mov	r8, r1
  424fdc:	4606      	mov	r6, r0
  424fde:	f04f 0900 	mov.w	r9, #0
  424fe2:	687d      	ldr	r5, [r7, #4]
  424fe4:	68bc      	ldr	r4, [r7, #8]
  424fe6:	3d01      	subs	r5, #1
  424fe8:	d411      	bmi.n	42500e <_fwalk_reent+0x3e>
  424fea:	89a3      	ldrh	r3, [r4, #12]
  424fec:	2b01      	cmp	r3, #1
  424fee:	f105 35ff 	add.w	r5, r5, #4294967295
  424ff2:	d908      	bls.n	425006 <_fwalk_reent+0x36>
  424ff4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  424ff8:	3301      	adds	r3, #1
  424ffa:	4621      	mov	r1, r4
  424ffc:	4630      	mov	r0, r6
  424ffe:	d002      	beq.n	425006 <_fwalk_reent+0x36>
  425000:	47c0      	blx	r8
  425002:	ea49 0900 	orr.w	r9, r9, r0
  425006:	1c6b      	adds	r3, r5, #1
  425008:	f104 0468 	add.w	r4, r4, #104	; 0x68
  42500c:	d1ed      	bne.n	424fea <_fwalk_reent+0x1a>
  42500e:	683f      	ldr	r7, [r7, #0]
  425010:	2f00      	cmp	r7, #0
  425012:	d1e6      	bne.n	424fe2 <_fwalk_reent+0x12>
  425014:	4648      	mov	r0, r9
  425016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42501a:	46b9      	mov	r9, r7
  42501c:	4648      	mov	r0, r9
  42501e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  425022:	bf00      	nop

00425024 <__locale_mb_cur_max>:
  425024:	4b04      	ldr	r3, [pc, #16]	; (425038 <__locale_mb_cur_max+0x14>)
  425026:	4a05      	ldr	r2, [pc, #20]	; (42503c <__locale_mb_cur_max+0x18>)
  425028:	681b      	ldr	r3, [r3, #0]
  42502a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  42502c:	2b00      	cmp	r3, #0
  42502e:	bf08      	it	eq
  425030:	4613      	moveq	r3, r2
  425032:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  425036:	4770      	bx	lr
  425038:	204000c0 	.word	0x204000c0
  42503c:	20400904 	.word	0x20400904

00425040 <__retarget_lock_init_recursive>:
  425040:	4770      	bx	lr
  425042:	bf00      	nop

00425044 <__retarget_lock_close_recursive>:
  425044:	4770      	bx	lr
  425046:	bf00      	nop

00425048 <__retarget_lock_acquire_recursive>:
  425048:	4770      	bx	lr
  42504a:	bf00      	nop

0042504c <__retarget_lock_release_recursive>:
  42504c:	4770      	bx	lr
  42504e:	bf00      	nop

00425050 <__swhatbuf_r>:
  425050:	b570      	push	{r4, r5, r6, lr}
  425052:	460c      	mov	r4, r1
  425054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  425058:	2900      	cmp	r1, #0
  42505a:	b090      	sub	sp, #64	; 0x40
  42505c:	4615      	mov	r5, r2
  42505e:	461e      	mov	r6, r3
  425060:	db14      	blt.n	42508c <__swhatbuf_r+0x3c>
  425062:	aa01      	add	r2, sp, #4
  425064:	f000 fc9e 	bl	4259a4 <_fstat_r>
  425068:	2800      	cmp	r0, #0
  42506a:	db0f      	blt.n	42508c <__swhatbuf_r+0x3c>
  42506c:	9a02      	ldr	r2, [sp, #8]
  42506e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  425072:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  425076:	fab2 f282 	clz	r2, r2
  42507a:	0952      	lsrs	r2, r2, #5
  42507c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  425080:	f44f 6000 	mov.w	r0, #2048	; 0x800
  425084:	6032      	str	r2, [r6, #0]
  425086:	602b      	str	r3, [r5, #0]
  425088:	b010      	add	sp, #64	; 0x40
  42508a:	bd70      	pop	{r4, r5, r6, pc}
  42508c:	89a2      	ldrh	r2, [r4, #12]
  42508e:	2300      	movs	r3, #0
  425090:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  425094:	6033      	str	r3, [r6, #0]
  425096:	d004      	beq.n	4250a2 <__swhatbuf_r+0x52>
  425098:	2240      	movs	r2, #64	; 0x40
  42509a:	4618      	mov	r0, r3
  42509c:	602a      	str	r2, [r5, #0]
  42509e:	b010      	add	sp, #64	; 0x40
  4250a0:	bd70      	pop	{r4, r5, r6, pc}
  4250a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4250a6:	602b      	str	r3, [r5, #0]
  4250a8:	b010      	add	sp, #64	; 0x40
  4250aa:	bd70      	pop	{r4, r5, r6, pc}

004250ac <__smakebuf_r>:
  4250ac:	898a      	ldrh	r2, [r1, #12]
  4250ae:	0792      	lsls	r2, r2, #30
  4250b0:	460b      	mov	r3, r1
  4250b2:	d506      	bpl.n	4250c2 <__smakebuf_r+0x16>
  4250b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4250b8:	2101      	movs	r1, #1
  4250ba:	601a      	str	r2, [r3, #0]
  4250bc:	611a      	str	r2, [r3, #16]
  4250be:	6159      	str	r1, [r3, #20]
  4250c0:	4770      	bx	lr
  4250c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4250c4:	b083      	sub	sp, #12
  4250c6:	ab01      	add	r3, sp, #4
  4250c8:	466a      	mov	r2, sp
  4250ca:	460c      	mov	r4, r1
  4250cc:	4606      	mov	r6, r0
  4250ce:	f7ff ffbf 	bl	425050 <__swhatbuf_r>
  4250d2:	9900      	ldr	r1, [sp, #0]
  4250d4:	4605      	mov	r5, r0
  4250d6:	4630      	mov	r0, r6
  4250d8:	f7fd fcb4 	bl	422a44 <_malloc_r>
  4250dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4250e0:	b1d8      	cbz	r0, 42511a <__smakebuf_r+0x6e>
  4250e2:	9a01      	ldr	r2, [sp, #4]
  4250e4:	4f15      	ldr	r7, [pc, #84]	; (42513c <__smakebuf_r+0x90>)
  4250e6:	9900      	ldr	r1, [sp, #0]
  4250e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4250ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4250ee:	81a3      	strh	r3, [r4, #12]
  4250f0:	6020      	str	r0, [r4, #0]
  4250f2:	6120      	str	r0, [r4, #16]
  4250f4:	6161      	str	r1, [r4, #20]
  4250f6:	b91a      	cbnz	r2, 425100 <__smakebuf_r+0x54>
  4250f8:	432b      	orrs	r3, r5
  4250fa:	81a3      	strh	r3, [r4, #12]
  4250fc:	b003      	add	sp, #12
  4250fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  425100:	4630      	mov	r0, r6
  425102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  425106:	f000 fc61 	bl	4259cc <_isatty_r>
  42510a:	b1a0      	cbz	r0, 425136 <__smakebuf_r+0x8a>
  42510c:	89a3      	ldrh	r3, [r4, #12]
  42510e:	f023 0303 	bic.w	r3, r3, #3
  425112:	f043 0301 	orr.w	r3, r3, #1
  425116:	b21b      	sxth	r3, r3
  425118:	e7ee      	b.n	4250f8 <__smakebuf_r+0x4c>
  42511a:	059a      	lsls	r2, r3, #22
  42511c:	d4ee      	bmi.n	4250fc <__smakebuf_r+0x50>
  42511e:	f023 0303 	bic.w	r3, r3, #3
  425122:	f104 0243 	add.w	r2, r4, #67	; 0x43
  425126:	f043 0302 	orr.w	r3, r3, #2
  42512a:	2101      	movs	r1, #1
  42512c:	81a3      	strh	r3, [r4, #12]
  42512e:	6022      	str	r2, [r4, #0]
  425130:	6122      	str	r2, [r4, #16]
  425132:	6161      	str	r1, [r4, #20]
  425134:	e7e2      	b.n	4250fc <__smakebuf_r+0x50>
  425136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42513a:	e7dd      	b.n	4250f8 <__smakebuf_r+0x4c>
  42513c:	0042486d 	.word	0x0042486d

00425140 <__ascii_mbtowc>:
  425140:	b082      	sub	sp, #8
  425142:	b149      	cbz	r1, 425158 <__ascii_mbtowc+0x18>
  425144:	b15a      	cbz	r2, 42515e <__ascii_mbtowc+0x1e>
  425146:	b16b      	cbz	r3, 425164 <__ascii_mbtowc+0x24>
  425148:	7813      	ldrb	r3, [r2, #0]
  42514a:	600b      	str	r3, [r1, #0]
  42514c:	7812      	ldrb	r2, [r2, #0]
  42514e:	1c10      	adds	r0, r2, #0
  425150:	bf18      	it	ne
  425152:	2001      	movne	r0, #1
  425154:	b002      	add	sp, #8
  425156:	4770      	bx	lr
  425158:	a901      	add	r1, sp, #4
  42515a:	2a00      	cmp	r2, #0
  42515c:	d1f3      	bne.n	425146 <__ascii_mbtowc+0x6>
  42515e:	4610      	mov	r0, r2
  425160:	b002      	add	sp, #8
  425162:	4770      	bx	lr
  425164:	f06f 0001 	mvn.w	r0, #1
  425168:	e7f4      	b.n	425154 <__ascii_mbtowc+0x14>
  42516a:	bf00      	nop
  42516c:	0000      	movs	r0, r0
	...

00425170 <memchr>:
  425170:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  425174:	2a10      	cmp	r2, #16
  425176:	db2b      	blt.n	4251d0 <memchr+0x60>
  425178:	f010 0f07 	tst.w	r0, #7
  42517c:	d008      	beq.n	425190 <memchr+0x20>
  42517e:	f810 3b01 	ldrb.w	r3, [r0], #1
  425182:	3a01      	subs	r2, #1
  425184:	428b      	cmp	r3, r1
  425186:	d02d      	beq.n	4251e4 <memchr+0x74>
  425188:	f010 0f07 	tst.w	r0, #7
  42518c:	b342      	cbz	r2, 4251e0 <memchr+0x70>
  42518e:	d1f6      	bne.n	42517e <memchr+0xe>
  425190:	b4f0      	push	{r4, r5, r6, r7}
  425192:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  425196:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  42519a:	f022 0407 	bic.w	r4, r2, #7
  42519e:	f07f 0700 	mvns.w	r7, #0
  4251a2:	2300      	movs	r3, #0
  4251a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4251a8:	3c08      	subs	r4, #8
  4251aa:	ea85 0501 	eor.w	r5, r5, r1
  4251ae:	ea86 0601 	eor.w	r6, r6, r1
  4251b2:	fa85 f547 	uadd8	r5, r5, r7
  4251b6:	faa3 f587 	sel	r5, r3, r7
  4251ba:	fa86 f647 	uadd8	r6, r6, r7
  4251be:	faa5 f687 	sel	r6, r5, r7
  4251c2:	b98e      	cbnz	r6, 4251e8 <memchr+0x78>
  4251c4:	d1ee      	bne.n	4251a4 <memchr+0x34>
  4251c6:	bcf0      	pop	{r4, r5, r6, r7}
  4251c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4251cc:	f002 0207 	and.w	r2, r2, #7
  4251d0:	b132      	cbz	r2, 4251e0 <memchr+0x70>
  4251d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4251d6:	3a01      	subs	r2, #1
  4251d8:	ea83 0301 	eor.w	r3, r3, r1
  4251dc:	b113      	cbz	r3, 4251e4 <memchr+0x74>
  4251de:	d1f8      	bne.n	4251d2 <memchr+0x62>
  4251e0:	2000      	movs	r0, #0
  4251e2:	4770      	bx	lr
  4251e4:	3801      	subs	r0, #1
  4251e6:	4770      	bx	lr
  4251e8:	2d00      	cmp	r5, #0
  4251ea:	bf06      	itte	eq
  4251ec:	4635      	moveq	r5, r6
  4251ee:	3803      	subeq	r0, #3
  4251f0:	3807      	subne	r0, #7
  4251f2:	f015 0f01 	tst.w	r5, #1
  4251f6:	d107      	bne.n	425208 <memchr+0x98>
  4251f8:	3001      	adds	r0, #1
  4251fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4251fe:	bf02      	ittt	eq
  425200:	3001      	addeq	r0, #1
  425202:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  425206:	3001      	addeq	r0, #1
  425208:	bcf0      	pop	{r4, r5, r6, r7}
  42520a:	3801      	subs	r0, #1
  42520c:	4770      	bx	lr
  42520e:	bf00      	nop

00425210 <memmove>:
  425210:	4288      	cmp	r0, r1
  425212:	b5f0      	push	{r4, r5, r6, r7, lr}
  425214:	d90d      	bls.n	425232 <memmove+0x22>
  425216:	188b      	adds	r3, r1, r2
  425218:	4298      	cmp	r0, r3
  42521a:	d20a      	bcs.n	425232 <memmove+0x22>
  42521c:	1884      	adds	r4, r0, r2
  42521e:	2a00      	cmp	r2, #0
  425220:	d051      	beq.n	4252c6 <memmove+0xb6>
  425222:	4622      	mov	r2, r4
  425224:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  425228:	f802 4d01 	strb.w	r4, [r2, #-1]!
  42522c:	4299      	cmp	r1, r3
  42522e:	d1f9      	bne.n	425224 <memmove+0x14>
  425230:	bdf0      	pop	{r4, r5, r6, r7, pc}
  425232:	2a0f      	cmp	r2, #15
  425234:	d948      	bls.n	4252c8 <memmove+0xb8>
  425236:	ea41 0300 	orr.w	r3, r1, r0
  42523a:	079b      	lsls	r3, r3, #30
  42523c:	d146      	bne.n	4252cc <memmove+0xbc>
  42523e:	f100 0410 	add.w	r4, r0, #16
  425242:	f101 0310 	add.w	r3, r1, #16
  425246:	4615      	mov	r5, r2
  425248:	f853 6c10 	ldr.w	r6, [r3, #-16]
  42524c:	f844 6c10 	str.w	r6, [r4, #-16]
  425250:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  425254:	f844 6c0c 	str.w	r6, [r4, #-12]
  425258:	f853 6c08 	ldr.w	r6, [r3, #-8]
  42525c:	f844 6c08 	str.w	r6, [r4, #-8]
  425260:	3d10      	subs	r5, #16
  425262:	f853 6c04 	ldr.w	r6, [r3, #-4]
  425266:	f844 6c04 	str.w	r6, [r4, #-4]
  42526a:	2d0f      	cmp	r5, #15
  42526c:	f103 0310 	add.w	r3, r3, #16
  425270:	f104 0410 	add.w	r4, r4, #16
  425274:	d8e8      	bhi.n	425248 <memmove+0x38>
  425276:	f1a2 0310 	sub.w	r3, r2, #16
  42527a:	f023 030f 	bic.w	r3, r3, #15
  42527e:	f002 0e0f 	and.w	lr, r2, #15
  425282:	3310      	adds	r3, #16
  425284:	f1be 0f03 	cmp.w	lr, #3
  425288:	4419      	add	r1, r3
  42528a:	4403      	add	r3, r0
  42528c:	d921      	bls.n	4252d2 <memmove+0xc2>
  42528e:	1f1e      	subs	r6, r3, #4
  425290:	460d      	mov	r5, r1
  425292:	4674      	mov	r4, lr
  425294:	3c04      	subs	r4, #4
  425296:	f855 7b04 	ldr.w	r7, [r5], #4
  42529a:	f846 7f04 	str.w	r7, [r6, #4]!
  42529e:	2c03      	cmp	r4, #3
  4252a0:	d8f8      	bhi.n	425294 <memmove+0x84>
  4252a2:	f1ae 0404 	sub.w	r4, lr, #4
  4252a6:	f024 0403 	bic.w	r4, r4, #3
  4252aa:	3404      	adds	r4, #4
  4252ac:	4421      	add	r1, r4
  4252ae:	4423      	add	r3, r4
  4252b0:	f002 0203 	and.w	r2, r2, #3
  4252b4:	b162      	cbz	r2, 4252d0 <memmove+0xc0>
  4252b6:	3b01      	subs	r3, #1
  4252b8:	440a      	add	r2, r1
  4252ba:	f811 4b01 	ldrb.w	r4, [r1], #1
  4252be:	f803 4f01 	strb.w	r4, [r3, #1]!
  4252c2:	428a      	cmp	r2, r1
  4252c4:	d1f9      	bne.n	4252ba <memmove+0xaa>
  4252c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4252c8:	4603      	mov	r3, r0
  4252ca:	e7f3      	b.n	4252b4 <memmove+0xa4>
  4252cc:	4603      	mov	r3, r0
  4252ce:	e7f2      	b.n	4252b6 <memmove+0xa6>
  4252d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4252d2:	4672      	mov	r2, lr
  4252d4:	e7ee      	b.n	4252b4 <memmove+0xa4>
  4252d6:	bf00      	nop

004252d8 <_realloc_r>:
  4252d8:	2900      	cmp	r1, #0
  4252da:	f000 8095 	beq.w	425408 <_realloc_r+0x130>
  4252de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4252e2:	460d      	mov	r5, r1
  4252e4:	4616      	mov	r6, r2
  4252e6:	b083      	sub	sp, #12
  4252e8:	4680      	mov	r8, r0
  4252ea:	f106 070b 	add.w	r7, r6, #11
  4252ee:	f7fd ff71 	bl	4231d4 <__malloc_lock>
  4252f2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4252f6:	2f16      	cmp	r7, #22
  4252f8:	f02e 0403 	bic.w	r4, lr, #3
  4252fc:	f1a5 0908 	sub.w	r9, r5, #8
  425300:	d83c      	bhi.n	42537c <_realloc_r+0xa4>
  425302:	2210      	movs	r2, #16
  425304:	4617      	mov	r7, r2
  425306:	42be      	cmp	r6, r7
  425308:	d83d      	bhi.n	425386 <_realloc_r+0xae>
  42530a:	4294      	cmp	r4, r2
  42530c:	da43      	bge.n	425396 <_realloc_r+0xbe>
  42530e:	4bc4      	ldr	r3, [pc, #784]	; (425620 <_realloc_r+0x348>)
  425310:	6899      	ldr	r1, [r3, #8]
  425312:	eb09 0004 	add.w	r0, r9, r4
  425316:	4288      	cmp	r0, r1
  425318:	f000 80b4 	beq.w	425484 <_realloc_r+0x1ac>
  42531c:	6843      	ldr	r3, [r0, #4]
  42531e:	f023 0101 	bic.w	r1, r3, #1
  425322:	4401      	add	r1, r0
  425324:	6849      	ldr	r1, [r1, #4]
  425326:	07c9      	lsls	r1, r1, #31
  425328:	d54c      	bpl.n	4253c4 <_realloc_r+0xec>
  42532a:	f01e 0f01 	tst.w	lr, #1
  42532e:	f000 809b 	beq.w	425468 <_realloc_r+0x190>
  425332:	4631      	mov	r1, r6
  425334:	4640      	mov	r0, r8
  425336:	f7fd fb85 	bl	422a44 <_malloc_r>
  42533a:	4606      	mov	r6, r0
  42533c:	2800      	cmp	r0, #0
  42533e:	d03a      	beq.n	4253b6 <_realloc_r+0xde>
  425340:	f855 3c04 	ldr.w	r3, [r5, #-4]
  425344:	f023 0301 	bic.w	r3, r3, #1
  425348:	444b      	add	r3, r9
  42534a:	f1a0 0208 	sub.w	r2, r0, #8
  42534e:	429a      	cmp	r2, r3
  425350:	f000 8121 	beq.w	425596 <_realloc_r+0x2be>
  425354:	1f22      	subs	r2, r4, #4
  425356:	2a24      	cmp	r2, #36	; 0x24
  425358:	f200 8107 	bhi.w	42556a <_realloc_r+0x292>
  42535c:	2a13      	cmp	r2, #19
  42535e:	f200 80db 	bhi.w	425518 <_realloc_r+0x240>
  425362:	4603      	mov	r3, r0
  425364:	462a      	mov	r2, r5
  425366:	6811      	ldr	r1, [r2, #0]
  425368:	6019      	str	r1, [r3, #0]
  42536a:	6851      	ldr	r1, [r2, #4]
  42536c:	6059      	str	r1, [r3, #4]
  42536e:	6892      	ldr	r2, [r2, #8]
  425370:	609a      	str	r2, [r3, #8]
  425372:	4629      	mov	r1, r5
  425374:	4640      	mov	r0, r8
  425376:	f7ff fbcd 	bl	424b14 <_free_r>
  42537a:	e01c      	b.n	4253b6 <_realloc_r+0xde>
  42537c:	f027 0707 	bic.w	r7, r7, #7
  425380:	2f00      	cmp	r7, #0
  425382:	463a      	mov	r2, r7
  425384:	dabf      	bge.n	425306 <_realloc_r+0x2e>
  425386:	2600      	movs	r6, #0
  425388:	230c      	movs	r3, #12
  42538a:	4630      	mov	r0, r6
  42538c:	f8c8 3000 	str.w	r3, [r8]
  425390:	b003      	add	sp, #12
  425392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  425396:	462e      	mov	r6, r5
  425398:	1be3      	subs	r3, r4, r7
  42539a:	2b0f      	cmp	r3, #15
  42539c:	d81e      	bhi.n	4253dc <_realloc_r+0x104>
  42539e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4253a2:	f003 0301 	and.w	r3, r3, #1
  4253a6:	4323      	orrs	r3, r4
  4253a8:	444c      	add	r4, r9
  4253aa:	f8c9 3004 	str.w	r3, [r9, #4]
  4253ae:	6863      	ldr	r3, [r4, #4]
  4253b0:	f043 0301 	orr.w	r3, r3, #1
  4253b4:	6063      	str	r3, [r4, #4]
  4253b6:	4640      	mov	r0, r8
  4253b8:	f7fd ff12 	bl	4231e0 <__malloc_unlock>
  4253bc:	4630      	mov	r0, r6
  4253be:	b003      	add	sp, #12
  4253c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4253c4:	f023 0303 	bic.w	r3, r3, #3
  4253c8:	18e1      	adds	r1, r4, r3
  4253ca:	4291      	cmp	r1, r2
  4253cc:	db1f      	blt.n	42540e <_realloc_r+0x136>
  4253ce:	68c3      	ldr	r3, [r0, #12]
  4253d0:	6882      	ldr	r2, [r0, #8]
  4253d2:	462e      	mov	r6, r5
  4253d4:	60d3      	str	r3, [r2, #12]
  4253d6:	460c      	mov	r4, r1
  4253d8:	609a      	str	r2, [r3, #8]
  4253da:	e7dd      	b.n	425398 <_realloc_r+0xc0>
  4253dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4253e0:	eb09 0107 	add.w	r1, r9, r7
  4253e4:	f002 0201 	and.w	r2, r2, #1
  4253e8:	444c      	add	r4, r9
  4253ea:	f043 0301 	orr.w	r3, r3, #1
  4253ee:	4317      	orrs	r7, r2
  4253f0:	f8c9 7004 	str.w	r7, [r9, #4]
  4253f4:	604b      	str	r3, [r1, #4]
  4253f6:	6863      	ldr	r3, [r4, #4]
  4253f8:	f043 0301 	orr.w	r3, r3, #1
  4253fc:	3108      	adds	r1, #8
  4253fe:	6063      	str	r3, [r4, #4]
  425400:	4640      	mov	r0, r8
  425402:	f7ff fb87 	bl	424b14 <_free_r>
  425406:	e7d6      	b.n	4253b6 <_realloc_r+0xde>
  425408:	4611      	mov	r1, r2
  42540a:	f7fd bb1b 	b.w	422a44 <_malloc_r>
  42540e:	f01e 0f01 	tst.w	lr, #1
  425412:	d18e      	bne.n	425332 <_realloc_r+0x5a>
  425414:	f855 1c08 	ldr.w	r1, [r5, #-8]
  425418:	eba9 0a01 	sub.w	sl, r9, r1
  42541c:	f8da 1004 	ldr.w	r1, [sl, #4]
  425420:	f021 0103 	bic.w	r1, r1, #3
  425424:	440b      	add	r3, r1
  425426:	4423      	add	r3, r4
  425428:	4293      	cmp	r3, r2
  42542a:	db25      	blt.n	425478 <_realloc_r+0x1a0>
  42542c:	68c2      	ldr	r2, [r0, #12]
  42542e:	6881      	ldr	r1, [r0, #8]
  425430:	4656      	mov	r6, sl
  425432:	60ca      	str	r2, [r1, #12]
  425434:	6091      	str	r1, [r2, #8]
  425436:	f8da 100c 	ldr.w	r1, [sl, #12]
  42543a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  42543e:	1f22      	subs	r2, r4, #4
  425440:	2a24      	cmp	r2, #36	; 0x24
  425442:	60c1      	str	r1, [r0, #12]
  425444:	6088      	str	r0, [r1, #8]
  425446:	f200 8094 	bhi.w	425572 <_realloc_r+0x29a>
  42544a:	2a13      	cmp	r2, #19
  42544c:	d96f      	bls.n	42552e <_realloc_r+0x256>
  42544e:	6829      	ldr	r1, [r5, #0]
  425450:	f8ca 1008 	str.w	r1, [sl, #8]
  425454:	6869      	ldr	r1, [r5, #4]
  425456:	f8ca 100c 	str.w	r1, [sl, #12]
  42545a:	2a1b      	cmp	r2, #27
  42545c:	f200 80a2 	bhi.w	4255a4 <_realloc_r+0x2cc>
  425460:	3508      	adds	r5, #8
  425462:	f10a 0210 	add.w	r2, sl, #16
  425466:	e063      	b.n	425530 <_realloc_r+0x258>
  425468:	f855 3c08 	ldr.w	r3, [r5, #-8]
  42546c:	eba9 0a03 	sub.w	sl, r9, r3
  425470:	f8da 1004 	ldr.w	r1, [sl, #4]
  425474:	f021 0103 	bic.w	r1, r1, #3
  425478:	1863      	adds	r3, r4, r1
  42547a:	4293      	cmp	r3, r2
  42547c:	f6ff af59 	blt.w	425332 <_realloc_r+0x5a>
  425480:	4656      	mov	r6, sl
  425482:	e7d8      	b.n	425436 <_realloc_r+0x15e>
  425484:	6841      	ldr	r1, [r0, #4]
  425486:	f021 0b03 	bic.w	fp, r1, #3
  42548a:	44a3      	add	fp, r4
  42548c:	f107 0010 	add.w	r0, r7, #16
  425490:	4583      	cmp	fp, r0
  425492:	da56      	bge.n	425542 <_realloc_r+0x26a>
  425494:	f01e 0f01 	tst.w	lr, #1
  425498:	f47f af4b 	bne.w	425332 <_realloc_r+0x5a>
  42549c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4254a0:	eba9 0a01 	sub.w	sl, r9, r1
  4254a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4254a8:	f021 0103 	bic.w	r1, r1, #3
  4254ac:	448b      	add	fp, r1
  4254ae:	4558      	cmp	r0, fp
  4254b0:	dce2      	bgt.n	425478 <_realloc_r+0x1a0>
  4254b2:	4656      	mov	r6, sl
  4254b4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4254b8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4254bc:	1f22      	subs	r2, r4, #4
  4254be:	2a24      	cmp	r2, #36	; 0x24
  4254c0:	60c1      	str	r1, [r0, #12]
  4254c2:	6088      	str	r0, [r1, #8]
  4254c4:	f200 808f 	bhi.w	4255e6 <_realloc_r+0x30e>
  4254c8:	2a13      	cmp	r2, #19
  4254ca:	f240 808a 	bls.w	4255e2 <_realloc_r+0x30a>
  4254ce:	6829      	ldr	r1, [r5, #0]
  4254d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4254d4:	6869      	ldr	r1, [r5, #4]
  4254d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4254da:	2a1b      	cmp	r2, #27
  4254dc:	f200 808a 	bhi.w	4255f4 <_realloc_r+0x31c>
  4254e0:	3508      	adds	r5, #8
  4254e2:	f10a 0210 	add.w	r2, sl, #16
  4254e6:	6829      	ldr	r1, [r5, #0]
  4254e8:	6011      	str	r1, [r2, #0]
  4254ea:	6869      	ldr	r1, [r5, #4]
  4254ec:	6051      	str	r1, [r2, #4]
  4254ee:	68a9      	ldr	r1, [r5, #8]
  4254f0:	6091      	str	r1, [r2, #8]
  4254f2:	eb0a 0107 	add.w	r1, sl, r7
  4254f6:	ebab 0207 	sub.w	r2, fp, r7
  4254fa:	f042 0201 	orr.w	r2, r2, #1
  4254fe:	6099      	str	r1, [r3, #8]
  425500:	604a      	str	r2, [r1, #4]
  425502:	f8da 3004 	ldr.w	r3, [sl, #4]
  425506:	f003 0301 	and.w	r3, r3, #1
  42550a:	431f      	orrs	r7, r3
  42550c:	4640      	mov	r0, r8
  42550e:	f8ca 7004 	str.w	r7, [sl, #4]
  425512:	f7fd fe65 	bl	4231e0 <__malloc_unlock>
  425516:	e751      	b.n	4253bc <_realloc_r+0xe4>
  425518:	682b      	ldr	r3, [r5, #0]
  42551a:	6003      	str	r3, [r0, #0]
  42551c:	686b      	ldr	r3, [r5, #4]
  42551e:	6043      	str	r3, [r0, #4]
  425520:	2a1b      	cmp	r2, #27
  425522:	d82d      	bhi.n	425580 <_realloc_r+0x2a8>
  425524:	f100 0308 	add.w	r3, r0, #8
  425528:	f105 0208 	add.w	r2, r5, #8
  42552c:	e71b      	b.n	425366 <_realloc_r+0x8e>
  42552e:	4632      	mov	r2, r6
  425530:	6829      	ldr	r1, [r5, #0]
  425532:	6011      	str	r1, [r2, #0]
  425534:	6869      	ldr	r1, [r5, #4]
  425536:	6051      	str	r1, [r2, #4]
  425538:	68a9      	ldr	r1, [r5, #8]
  42553a:	6091      	str	r1, [r2, #8]
  42553c:	461c      	mov	r4, r3
  42553e:	46d1      	mov	r9, sl
  425540:	e72a      	b.n	425398 <_realloc_r+0xc0>
  425542:	eb09 0107 	add.w	r1, r9, r7
  425546:	ebab 0b07 	sub.w	fp, fp, r7
  42554a:	f04b 0201 	orr.w	r2, fp, #1
  42554e:	6099      	str	r1, [r3, #8]
  425550:	604a      	str	r2, [r1, #4]
  425552:	f855 3c04 	ldr.w	r3, [r5, #-4]
  425556:	f003 0301 	and.w	r3, r3, #1
  42555a:	431f      	orrs	r7, r3
  42555c:	4640      	mov	r0, r8
  42555e:	f845 7c04 	str.w	r7, [r5, #-4]
  425562:	f7fd fe3d 	bl	4231e0 <__malloc_unlock>
  425566:	462e      	mov	r6, r5
  425568:	e728      	b.n	4253bc <_realloc_r+0xe4>
  42556a:	4629      	mov	r1, r5
  42556c:	f7ff fe50 	bl	425210 <memmove>
  425570:	e6ff      	b.n	425372 <_realloc_r+0x9a>
  425572:	4629      	mov	r1, r5
  425574:	4630      	mov	r0, r6
  425576:	461c      	mov	r4, r3
  425578:	46d1      	mov	r9, sl
  42557a:	f7ff fe49 	bl	425210 <memmove>
  42557e:	e70b      	b.n	425398 <_realloc_r+0xc0>
  425580:	68ab      	ldr	r3, [r5, #8]
  425582:	6083      	str	r3, [r0, #8]
  425584:	68eb      	ldr	r3, [r5, #12]
  425586:	60c3      	str	r3, [r0, #12]
  425588:	2a24      	cmp	r2, #36	; 0x24
  42558a:	d017      	beq.n	4255bc <_realloc_r+0x2e4>
  42558c:	f100 0310 	add.w	r3, r0, #16
  425590:	f105 0210 	add.w	r2, r5, #16
  425594:	e6e7      	b.n	425366 <_realloc_r+0x8e>
  425596:	f850 3c04 	ldr.w	r3, [r0, #-4]
  42559a:	f023 0303 	bic.w	r3, r3, #3
  42559e:	441c      	add	r4, r3
  4255a0:	462e      	mov	r6, r5
  4255a2:	e6f9      	b.n	425398 <_realloc_r+0xc0>
  4255a4:	68a9      	ldr	r1, [r5, #8]
  4255a6:	f8ca 1010 	str.w	r1, [sl, #16]
  4255aa:	68e9      	ldr	r1, [r5, #12]
  4255ac:	f8ca 1014 	str.w	r1, [sl, #20]
  4255b0:	2a24      	cmp	r2, #36	; 0x24
  4255b2:	d00c      	beq.n	4255ce <_realloc_r+0x2f6>
  4255b4:	3510      	adds	r5, #16
  4255b6:	f10a 0218 	add.w	r2, sl, #24
  4255ba:	e7b9      	b.n	425530 <_realloc_r+0x258>
  4255bc:	692b      	ldr	r3, [r5, #16]
  4255be:	6103      	str	r3, [r0, #16]
  4255c0:	696b      	ldr	r3, [r5, #20]
  4255c2:	6143      	str	r3, [r0, #20]
  4255c4:	f105 0218 	add.w	r2, r5, #24
  4255c8:	f100 0318 	add.w	r3, r0, #24
  4255cc:	e6cb      	b.n	425366 <_realloc_r+0x8e>
  4255ce:	692a      	ldr	r2, [r5, #16]
  4255d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4255d4:	696a      	ldr	r2, [r5, #20]
  4255d6:	f8ca 201c 	str.w	r2, [sl, #28]
  4255da:	3518      	adds	r5, #24
  4255dc:	f10a 0220 	add.w	r2, sl, #32
  4255e0:	e7a6      	b.n	425530 <_realloc_r+0x258>
  4255e2:	4632      	mov	r2, r6
  4255e4:	e77f      	b.n	4254e6 <_realloc_r+0x20e>
  4255e6:	4629      	mov	r1, r5
  4255e8:	4630      	mov	r0, r6
  4255ea:	9301      	str	r3, [sp, #4]
  4255ec:	f7ff fe10 	bl	425210 <memmove>
  4255f0:	9b01      	ldr	r3, [sp, #4]
  4255f2:	e77e      	b.n	4254f2 <_realloc_r+0x21a>
  4255f4:	68a9      	ldr	r1, [r5, #8]
  4255f6:	f8ca 1010 	str.w	r1, [sl, #16]
  4255fa:	68e9      	ldr	r1, [r5, #12]
  4255fc:	f8ca 1014 	str.w	r1, [sl, #20]
  425600:	2a24      	cmp	r2, #36	; 0x24
  425602:	d003      	beq.n	42560c <_realloc_r+0x334>
  425604:	3510      	adds	r5, #16
  425606:	f10a 0218 	add.w	r2, sl, #24
  42560a:	e76c      	b.n	4254e6 <_realloc_r+0x20e>
  42560c:	692a      	ldr	r2, [r5, #16]
  42560e:	f8ca 2018 	str.w	r2, [sl, #24]
  425612:	696a      	ldr	r2, [r5, #20]
  425614:	f8ca 201c 	str.w	r2, [sl, #28]
  425618:	3518      	adds	r5, #24
  42561a:	f10a 0220 	add.w	r2, sl, #32
  42561e:	e762      	b.n	4254e6 <_realloc_r+0x20e>
  425620:	204004f0 	.word	0x204004f0

00425624 <__sread>:
  425624:	b510      	push	{r4, lr}
  425626:	460c      	mov	r4, r1
  425628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42562c:	f000 f9f6 	bl	425a1c <_read_r>
  425630:	2800      	cmp	r0, #0
  425632:	db03      	blt.n	42563c <__sread+0x18>
  425634:	6d23      	ldr	r3, [r4, #80]	; 0x50
  425636:	4403      	add	r3, r0
  425638:	6523      	str	r3, [r4, #80]	; 0x50
  42563a:	bd10      	pop	{r4, pc}
  42563c:	89a3      	ldrh	r3, [r4, #12]
  42563e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  425642:	81a3      	strh	r3, [r4, #12]
  425644:	bd10      	pop	{r4, pc}
  425646:	bf00      	nop

00425648 <__swrite>:
  425648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42564c:	4616      	mov	r6, r2
  42564e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  425652:	461f      	mov	r7, r3
  425654:	05d3      	lsls	r3, r2, #23
  425656:	460c      	mov	r4, r1
  425658:	4605      	mov	r5, r0
  42565a:	d507      	bpl.n	42566c <__swrite+0x24>
  42565c:	2200      	movs	r2, #0
  42565e:	2302      	movs	r3, #2
  425660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  425664:	f000 f9c4 	bl	4259f0 <_lseek_r>
  425668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42566c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  425670:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  425674:	81a2      	strh	r2, [r4, #12]
  425676:	463b      	mov	r3, r7
  425678:	4632      	mov	r2, r6
  42567a:	4628      	mov	r0, r5
  42567c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  425680:	f000 b8a4 	b.w	4257cc <_write_r>

00425684 <__sseek>:
  425684:	b510      	push	{r4, lr}
  425686:	460c      	mov	r4, r1
  425688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42568c:	f000 f9b0 	bl	4259f0 <_lseek_r>
  425690:	89a3      	ldrh	r3, [r4, #12]
  425692:	1c42      	adds	r2, r0, #1
  425694:	bf0e      	itee	eq
  425696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  42569a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  42569e:	6520      	strne	r0, [r4, #80]	; 0x50
  4256a0:	81a3      	strh	r3, [r4, #12]
  4256a2:	bd10      	pop	{r4, pc}

004256a4 <__sclose>:
  4256a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4256a8:	f000 b908 	b.w	4258bc <_close_r>

004256ac <__swbuf_r>:
  4256ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4256ae:	460d      	mov	r5, r1
  4256b0:	4614      	mov	r4, r2
  4256b2:	4606      	mov	r6, r0
  4256b4:	b110      	cbz	r0, 4256bc <__swbuf_r+0x10>
  4256b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4256b8:	2b00      	cmp	r3, #0
  4256ba:	d04b      	beq.n	425754 <__swbuf_r+0xa8>
  4256bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4256c0:	69a3      	ldr	r3, [r4, #24]
  4256c2:	60a3      	str	r3, [r4, #8]
  4256c4:	b291      	uxth	r1, r2
  4256c6:	0708      	lsls	r0, r1, #28
  4256c8:	d539      	bpl.n	42573e <__swbuf_r+0x92>
  4256ca:	6923      	ldr	r3, [r4, #16]
  4256cc:	2b00      	cmp	r3, #0
  4256ce:	d036      	beq.n	42573e <__swbuf_r+0x92>
  4256d0:	b2ed      	uxtb	r5, r5
  4256d2:	0489      	lsls	r1, r1, #18
  4256d4:	462f      	mov	r7, r5
  4256d6:	d515      	bpl.n	425704 <__swbuf_r+0x58>
  4256d8:	6822      	ldr	r2, [r4, #0]
  4256da:	6961      	ldr	r1, [r4, #20]
  4256dc:	1ad3      	subs	r3, r2, r3
  4256de:	428b      	cmp	r3, r1
  4256e0:	da1c      	bge.n	42571c <__swbuf_r+0x70>
  4256e2:	3301      	adds	r3, #1
  4256e4:	68a1      	ldr	r1, [r4, #8]
  4256e6:	1c50      	adds	r0, r2, #1
  4256e8:	3901      	subs	r1, #1
  4256ea:	60a1      	str	r1, [r4, #8]
  4256ec:	6020      	str	r0, [r4, #0]
  4256ee:	7015      	strb	r5, [r2, #0]
  4256f0:	6962      	ldr	r2, [r4, #20]
  4256f2:	429a      	cmp	r2, r3
  4256f4:	d01a      	beq.n	42572c <__swbuf_r+0x80>
  4256f6:	89a3      	ldrh	r3, [r4, #12]
  4256f8:	07db      	lsls	r3, r3, #31
  4256fa:	d501      	bpl.n	425700 <__swbuf_r+0x54>
  4256fc:	2d0a      	cmp	r5, #10
  4256fe:	d015      	beq.n	42572c <__swbuf_r+0x80>
  425700:	4638      	mov	r0, r7
  425702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  425704:	6e61      	ldr	r1, [r4, #100]	; 0x64
  425706:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  42570a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  42570e:	81a2      	strh	r2, [r4, #12]
  425710:	6822      	ldr	r2, [r4, #0]
  425712:	6661      	str	r1, [r4, #100]	; 0x64
  425714:	6961      	ldr	r1, [r4, #20]
  425716:	1ad3      	subs	r3, r2, r3
  425718:	428b      	cmp	r3, r1
  42571a:	dbe2      	blt.n	4256e2 <__swbuf_r+0x36>
  42571c:	4621      	mov	r1, r4
  42571e:	4630      	mov	r0, r6
  425720:	f7ff f87a 	bl	424818 <_fflush_r>
  425724:	b940      	cbnz	r0, 425738 <__swbuf_r+0x8c>
  425726:	6822      	ldr	r2, [r4, #0]
  425728:	2301      	movs	r3, #1
  42572a:	e7db      	b.n	4256e4 <__swbuf_r+0x38>
  42572c:	4621      	mov	r1, r4
  42572e:	4630      	mov	r0, r6
  425730:	f7ff f872 	bl	424818 <_fflush_r>
  425734:	2800      	cmp	r0, #0
  425736:	d0e3      	beq.n	425700 <__swbuf_r+0x54>
  425738:	f04f 37ff 	mov.w	r7, #4294967295
  42573c:	e7e0      	b.n	425700 <__swbuf_r+0x54>
  42573e:	4621      	mov	r1, r4
  425740:	4630      	mov	r0, r6
  425742:	f7fe ff55 	bl	4245f0 <__swsetup_r>
  425746:	2800      	cmp	r0, #0
  425748:	d1f6      	bne.n	425738 <__swbuf_r+0x8c>
  42574a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42574e:	6923      	ldr	r3, [r4, #16]
  425750:	b291      	uxth	r1, r2
  425752:	e7bd      	b.n	4256d0 <__swbuf_r+0x24>
  425754:	f7ff f8b8 	bl	4248c8 <__sinit>
  425758:	e7b0      	b.n	4256bc <__swbuf_r+0x10>
  42575a:	bf00      	nop

0042575c <_wcrtomb_r>:
  42575c:	b5f0      	push	{r4, r5, r6, r7, lr}
  42575e:	4606      	mov	r6, r0
  425760:	b085      	sub	sp, #20
  425762:	461f      	mov	r7, r3
  425764:	b189      	cbz	r1, 42578a <_wcrtomb_r+0x2e>
  425766:	4c10      	ldr	r4, [pc, #64]	; (4257a8 <_wcrtomb_r+0x4c>)
  425768:	4d10      	ldr	r5, [pc, #64]	; (4257ac <_wcrtomb_r+0x50>)
  42576a:	6824      	ldr	r4, [r4, #0]
  42576c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  42576e:	2c00      	cmp	r4, #0
  425770:	bf08      	it	eq
  425772:	462c      	moveq	r4, r5
  425774:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  425778:	47a0      	blx	r4
  42577a:	1c43      	adds	r3, r0, #1
  42577c:	d103      	bne.n	425786 <_wcrtomb_r+0x2a>
  42577e:	2200      	movs	r2, #0
  425780:	238a      	movs	r3, #138	; 0x8a
  425782:	603a      	str	r2, [r7, #0]
  425784:	6033      	str	r3, [r6, #0]
  425786:	b005      	add	sp, #20
  425788:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42578a:	460c      	mov	r4, r1
  42578c:	4906      	ldr	r1, [pc, #24]	; (4257a8 <_wcrtomb_r+0x4c>)
  42578e:	4a07      	ldr	r2, [pc, #28]	; (4257ac <_wcrtomb_r+0x50>)
  425790:	6809      	ldr	r1, [r1, #0]
  425792:	6b49      	ldr	r1, [r1, #52]	; 0x34
  425794:	2900      	cmp	r1, #0
  425796:	bf08      	it	eq
  425798:	4611      	moveq	r1, r2
  42579a:	4622      	mov	r2, r4
  42579c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4257a0:	a901      	add	r1, sp, #4
  4257a2:	47a0      	blx	r4
  4257a4:	e7e9      	b.n	42577a <_wcrtomb_r+0x1e>
  4257a6:	bf00      	nop
  4257a8:	204000c0 	.word	0x204000c0
  4257ac:	20400904 	.word	0x20400904

004257b0 <__ascii_wctomb>:
  4257b0:	b121      	cbz	r1, 4257bc <__ascii_wctomb+0xc>
  4257b2:	2aff      	cmp	r2, #255	; 0xff
  4257b4:	d804      	bhi.n	4257c0 <__ascii_wctomb+0x10>
  4257b6:	700a      	strb	r2, [r1, #0]
  4257b8:	2001      	movs	r0, #1
  4257ba:	4770      	bx	lr
  4257bc:	4608      	mov	r0, r1
  4257be:	4770      	bx	lr
  4257c0:	238a      	movs	r3, #138	; 0x8a
  4257c2:	6003      	str	r3, [r0, #0]
  4257c4:	f04f 30ff 	mov.w	r0, #4294967295
  4257c8:	4770      	bx	lr
  4257ca:	bf00      	nop

004257cc <_write_r>:
  4257cc:	b570      	push	{r4, r5, r6, lr}
  4257ce:	460d      	mov	r5, r1
  4257d0:	4c08      	ldr	r4, [pc, #32]	; (4257f4 <_write_r+0x28>)
  4257d2:	4611      	mov	r1, r2
  4257d4:	4606      	mov	r6, r0
  4257d6:	461a      	mov	r2, r3
  4257d8:	4628      	mov	r0, r5
  4257da:	2300      	movs	r3, #0
  4257dc:	6023      	str	r3, [r4, #0]
  4257de:	f7fb fa4f 	bl	420c80 <_write>
  4257e2:	1c43      	adds	r3, r0, #1
  4257e4:	d000      	beq.n	4257e8 <_write_r+0x1c>
  4257e6:	bd70      	pop	{r4, r5, r6, pc}
  4257e8:	6823      	ldr	r3, [r4, #0]
  4257ea:	2b00      	cmp	r3, #0
  4257ec:	d0fb      	beq.n	4257e6 <_write_r+0x1a>
  4257ee:	6033      	str	r3, [r6, #0]
  4257f0:	bd70      	pop	{r4, r5, r6, pc}
  4257f2:	bf00      	nop
  4257f4:	2043a334 	.word	0x2043a334

004257f8 <__register_exitproc>:
  4257f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4257fc:	4d2c      	ldr	r5, [pc, #176]	; (4258b0 <__register_exitproc+0xb8>)
  4257fe:	4606      	mov	r6, r0
  425800:	6828      	ldr	r0, [r5, #0]
  425802:	4698      	mov	r8, r3
  425804:	460f      	mov	r7, r1
  425806:	4691      	mov	r9, r2
  425808:	f7ff fc1e 	bl	425048 <__retarget_lock_acquire_recursive>
  42580c:	4b29      	ldr	r3, [pc, #164]	; (4258b4 <__register_exitproc+0xbc>)
  42580e:	681c      	ldr	r4, [r3, #0]
  425810:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  425814:	2b00      	cmp	r3, #0
  425816:	d03e      	beq.n	425896 <__register_exitproc+0x9e>
  425818:	685a      	ldr	r2, [r3, #4]
  42581a:	2a1f      	cmp	r2, #31
  42581c:	dc1c      	bgt.n	425858 <__register_exitproc+0x60>
  42581e:	f102 0e01 	add.w	lr, r2, #1
  425822:	b176      	cbz	r6, 425842 <__register_exitproc+0x4a>
  425824:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  425828:	2401      	movs	r4, #1
  42582a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  42582e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  425832:	4094      	lsls	r4, r2
  425834:	4320      	orrs	r0, r4
  425836:	2e02      	cmp	r6, #2
  425838:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  42583c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  425840:	d023      	beq.n	42588a <__register_exitproc+0x92>
  425842:	3202      	adds	r2, #2
  425844:	f8c3 e004 	str.w	lr, [r3, #4]
  425848:	6828      	ldr	r0, [r5, #0]
  42584a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  42584e:	f7ff fbfd 	bl	42504c <__retarget_lock_release_recursive>
  425852:	2000      	movs	r0, #0
  425854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  425858:	4b17      	ldr	r3, [pc, #92]	; (4258b8 <__register_exitproc+0xc0>)
  42585a:	b30b      	cbz	r3, 4258a0 <__register_exitproc+0xa8>
  42585c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  425860:	f7fd f8e8 	bl	422a34 <malloc>
  425864:	4603      	mov	r3, r0
  425866:	b1d8      	cbz	r0, 4258a0 <__register_exitproc+0xa8>
  425868:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  42586c:	6002      	str	r2, [r0, #0]
  42586e:	2100      	movs	r1, #0
  425870:	6041      	str	r1, [r0, #4]
  425872:	460a      	mov	r2, r1
  425874:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  425878:	f04f 0e01 	mov.w	lr, #1
  42587c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  425880:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  425884:	2e00      	cmp	r6, #0
  425886:	d0dc      	beq.n	425842 <__register_exitproc+0x4a>
  425888:	e7cc      	b.n	425824 <__register_exitproc+0x2c>
  42588a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  42588e:	430c      	orrs	r4, r1
  425890:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  425894:	e7d5      	b.n	425842 <__register_exitproc+0x4a>
  425896:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  42589a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  42589e:	e7bb      	b.n	425818 <__register_exitproc+0x20>
  4258a0:	6828      	ldr	r0, [r5, #0]
  4258a2:	f7ff fbd3 	bl	42504c <__retarget_lock_release_recursive>
  4258a6:	f04f 30ff 	mov.w	r0, #4294967295
  4258aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4258ae:	bf00      	nop
  4258b0:	20400900 	.word	0x20400900
  4258b4:	00430884 	.word	0x00430884
  4258b8:	00422a35 	.word	0x00422a35

004258bc <_close_r>:
  4258bc:	b538      	push	{r3, r4, r5, lr}
  4258be:	4c07      	ldr	r4, [pc, #28]	; (4258dc <_close_r+0x20>)
  4258c0:	2300      	movs	r3, #0
  4258c2:	4605      	mov	r5, r0
  4258c4:	4608      	mov	r0, r1
  4258c6:	6023      	str	r3, [r4, #0]
  4258c8:	f7fc f856 	bl	421978 <_close>
  4258cc:	1c43      	adds	r3, r0, #1
  4258ce:	d000      	beq.n	4258d2 <_close_r+0x16>
  4258d0:	bd38      	pop	{r3, r4, r5, pc}
  4258d2:	6823      	ldr	r3, [r4, #0]
  4258d4:	2b00      	cmp	r3, #0
  4258d6:	d0fb      	beq.n	4258d0 <_close_r+0x14>
  4258d8:	602b      	str	r3, [r5, #0]
  4258da:	bd38      	pop	{r3, r4, r5, pc}
  4258dc:	2043a334 	.word	0x2043a334

004258e0 <_fclose_r>:
  4258e0:	b570      	push	{r4, r5, r6, lr}
  4258e2:	b159      	cbz	r1, 4258fc <_fclose_r+0x1c>
  4258e4:	4605      	mov	r5, r0
  4258e6:	460c      	mov	r4, r1
  4258e8:	b110      	cbz	r0, 4258f0 <_fclose_r+0x10>
  4258ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4258ec:	2b00      	cmp	r3, #0
  4258ee:	d03c      	beq.n	42596a <_fclose_r+0x8a>
  4258f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4258f2:	07d8      	lsls	r0, r3, #31
  4258f4:	d505      	bpl.n	425902 <_fclose_r+0x22>
  4258f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4258fa:	b92b      	cbnz	r3, 425908 <_fclose_r+0x28>
  4258fc:	2600      	movs	r6, #0
  4258fe:	4630      	mov	r0, r6
  425900:	bd70      	pop	{r4, r5, r6, pc}
  425902:	89a3      	ldrh	r3, [r4, #12]
  425904:	0599      	lsls	r1, r3, #22
  425906:	d53c      	bpl.n	425982 <_fclose_r+0xa2>
  425908:	4621      	mov	r1, r4
  42590a:	4628      	mov	r0, r5
  42590c:	f7fe fee4 	bl	4246d8 <__sflush_r>
  425910:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  425912:	4606      	mov	r6, r0
  425914:	b133      	cbz	r3, 425924 <_fclose_r+0x44>
  425916:	69e1      	ldr	r1, [r4, #28]
  425918:	4628      	mov	r0, r5
  42591a:	4798      	blx	r3
  42591c:	2800      	cmp	r0, #0
  42591e:	bfb8      	it	lt
  425920:	f04f 36ff 	movlt.w	r6, #4294967295
  425924:	89a3      	ldrh	r3, [r4, #12]
  425926:	061a      	lsls	r2, r3, #24
  425928:	d422      	bmi.n	425970 <_fclose_r+0x90>
  42592a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  42592c:	b141      	cbz	r1, 425940 <_fclose_r+0x60>
  42592e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  425932:	4299      	cmp	r1, r3
  425934:	d002      	beq.n	42593c <_fclose_r+0x5c>
  425936:	4628      	mov	r0, r5
  425938:	f7ff f8ec 	bl	424b14 <_free_r>
  42593c:	2300      	movs	r3, #0
  42593e:	6323      	str	r3, [r4, #48]	; 0x30
  425940:	6c61      	ldr	r1, [r4, #68]	; 0x44
  425942:	b121      	cbz	r1, 42594e <_fclose_r+0x6e>
  425944:	4628      	mov	r0, r5
  425946:	f7ff f8e5 	bl	424b14 <_free_r>
  42594a:	2300      	movs	r3, #0
  42594c:	6463      	str	r3, [r4, #68]	; 0x44
  42594e:	f7fe ffe7 	bl	424920 <__sfp_lock_acquire>
  425952:	6e63      	ldr	r3, [r4, #100]	; 0x64
  425954:	2200      	movs	r2, #0
  425956:	07db      	lsls	r3, r3, #31
  425958:	81a2      	strh	r2, [r4, #12]
  42595a:	d50e      	bpl.n	42597a <_fclose_r+0x9a>
  42595c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42595e:	f7ff fb71 	bl	425044 <__retarget_lock_close_recursive>
  425962:	f7fe ffe3 	bl	42492c <__sfp_lock_release>
  425966:	4630      	mov	r0, r6
  425968:	bd70      	pop	{r4, r5, r6, pc}
  42596a:	f7fe ffad 	bl	4248c8 <__sinit>
  42596e:	e7bf      	b.n	4258f0 <_fclose_r+0x10>
  425970:	6921      	ldr	r1, [r4, #16]
  425972:	4628      	mov	r0, r5
  425974:	f7ff f8ce 	bl	424b14 <_free_r>
  425978:	e7d7      	b.n	42592a <_fclose_r+0x4a>
  42597a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42597c:	f7ff fb66 	bl	42504c <__retarget_lock_release_recursive>
  425980:	e7ec      	b.n	42595c <_fclose_r+0x7c>
  425982:	6da0      	ldr	r0, [r4, #88]	; 0x58
  425984:	f7ff fb60 	bl	425048 <__retarget_lock_acquire_recursive>
  425988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42598c:	2b00      	cmp	r3, #0
  42598e:	d1bb      	bne.n	425908 <_fclose_r+0x28>
  425990:	6e66      	ldr	r6, [r4, #100]	; 0x64
  425992:	f016 0601 	ands.w	r6, r6, #1
  425996:	d1b1      	bne.n	4258fc <_fclose_r+0x1c>
  425998:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42599a:	f7ff fb57 	bl	42504c <__retarget_lock_release_recursive>
  42599e:	4630      	mov	r0, r6
  4259a0:	bd70      	pop	{r4, r5, r6, pc}
  4259a2:	bf00      	nop

004259a4 <_fstat_r>:
  4259a4:	b538      	push	{r3, r4, r5, lr}
  4259a6:	460b      	mov	r3, r1
  4259a8:	4c07      	ldr	r4, [pc, #28]	; (4259c8 <_fstat_r+0x24>)
  4259aa:	4605      	mov	r5, r0
  4259ac:	4611      	mov	r1, r2
  4259ae:	4618      	mov	r0, r3
  4259b0:	2300      	movs	r3, #0
  4259b2:	6023      	str	r3, [r4, #0]
  4259b4:	f7fb ffe3 	bl	42197e <_fstat>
  4259b8:	1c43      	adds	r3, r0, #1
  4259ba:	d000      	beq.n	4259be <_fstat_r+0x1a>
  4259bc:	bd38      	pop	{r3, r4, r5, pc}
  4259be:	6823      	ldr	r3, [r4, #0]
  4259c0:	2b00      	cmp	r3, #0
  4259c2:	d0fb      	beq.n	4259bc <_fstat_r+0x18>
  4259c4:	602b      	str	r3, [r5, #0]
  4259c6:	bd38      	pop	{r3, r4, r5, pc}
  4259c8:	2043a334 	.word	0x2043a334

004259cc <_isatty_r>:
  4259cc:	b538      	push	{r3, r4, r5, lr}
  4259ce:	4c07      	ldr	r4, [pc, #28]	; (4259ec <_isatty_r+0x20>)
  4259d0:	2300      	movs	r3, #0
  4259d2:	4605      	mov	r5, r0
  4259d4:	4608      	mov	r0, r1
  4259d6:	6023      	str	r3, [r4, #0]
  4259d8:	f7fb ffd6 	bl	421988 <_isatty>
  4259dc:	1c43      	adds	r3, r0, #1
  4259de:	d000      	beq.n	4259e2 <_isatty_r+0x16>
  4259e0:	bd38      	pop	{r3, r4, r5, pc}
  4259e2:	6823      	ldr	r3, [r4, #0]
  4259e4:	2b00      	cmp	r3, #0
  4259e6:	d0fb      	beq.n	4259e0 <_isatty_r+0x14>
  4259e8:	602b      	str	r3, [r5, #0]
  4259ea:	bd38      	pop	{r3, r4, r5, pc}
  4259ec:	2043a334 	.word	0x2043a334

004259f0 <_lseek_r>:
  4259f0:	b570      	push	{r4, r5, r6, lr}
  4259f2:	460d      	mov	r5, r1
  4259f4:	4c08      	ldr	r4, [pc, #32]	; (425a18 <_lseek_r+0x28>)
  4259f6:	4611      	mov	r1, r2
  4259f8:	4606      	mov	r6, r0
  4259fa:	461a      	mov	r2, r3
  4259fc:	4628      	mov	r0, r5
  4259fe:	2300      	movs	r3, #0
  425a00:	6023      	str	r3, [r4, #0]
  425a02:	f7fb ffc3 	bl	42198c <_lseek>
  425a06:	1c43      	adds	r3, r0, #1
  425a08:	d000      	beq.n	425a0c <_lseek_r+0x1c>
  425a0a:	bd70      	pop	{r4, r5, r6, pc}
  425a0c:	6823      	ldr	r3, [r4, #0]
  425a0e:	2b00      	cmp	r3, #0
  425a10:	d0fb      	beq.n	425a0a <_lseek_r+0x1a>
  425a12:	6033      	str	r3, [r6, #0]
  425a14:	bd70      	pop	{r4, r5, r6, pc}
  425a16:	bf00      	nop
  425a18:	2043a334 	.word	0x2043a334

00425a1c <_read_r>:
  425a1c:	b570      	push	{r4, r5, r6, lr}
  425a1e:	460d      	mov	r5, r1
  425a20:	4c08      	ldr	r4, [pc, #32]	; (425a44 <_read_r+0x28>)
  425a22:	4611      	mov	r1, r2
  425a24:	4606      	mov	r6, r0
  425a26:	461a      	mov	r2, r3
  425a28:	4628      	mov	r0, r5
  425a2a:	2300      	movs	r3, #0
  425a2c:	6023      	str	r3, [r4, #0]
  425a2e:	f7fb f909 	bl	420c44 <_read>
  425a32:	1c43      	adds	r3, r0, #1
  425a34:	d000      	beq.n	425a38 <_read_r+0x1c>
  425a36:	bd70      	pop	{r4, r5, r6, pc}
  425a38:	6823      	ldr	r3, [r4, #0]
  425a3a:	2b00      	cmp	r3, #0
  425a3c:	d0fb      	beq.n	425a36 <_read_r+0x1a>
  425a3e:	6033      	str	r3, [r6, #0]
  425a40:	bd70      	pop	{r4, r5, r6, pc}
  425a42:	bf00      	nop
  425a44:	2043a334 	.word	0x2043a334
  425a48:	454c4449 	.word	0x454c4449
  425a4c:	00000000 	.word	0x00000000
  425a50:	51726d54 	.word	0x51726d54
  425a54:	00000000 	.word	0x00000000
  425a58:	20726d54 	.word	0x20726d54
  425a5c:	00637653 	.word	0x00637653
  425a60:	2074754f 	.word	0x2074754f
  425a64:	6d20666f 	.word	0x6d20666f
  425a68:	726f6d65 	.word	0x726f6d65
  425a6c:	00000079 	.word	0x00000079
  425a70:	0000ffff 	.word	0x0000ffff
  425a74:	4c4c554e 	.word	0x4c4c554e
  425a78:	696f7020 	.word	0x696f7020
  425a7c:	7265746e 	.word	0x7265746e
  425a80:	00000000 	.word	0x00000000
  425a84:	6f5f766c 	.word	0x6f5f766c
  425a88:	00006a62 	.word	0x00006a62
  425a8c:	0000ffff 	.word	0x0000ffff
  425a90:	640a6f4e 	.word	0x640a6f4e
  425a94:	00617461 	.word	0x00617461

00425a98 <_lv_bpp1_opa_table>:
  425a98:	0000ff00                                ....

00425a9c <_lv_bpp2_opa_table>:
  425a9c:	ffaa5500                                .U..

00425aa0 <_lv_bpp4_opa_table>:
  425aa0:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

00425ab0 <_lv_bpp8_opa_table>:
  425ab0:	03020100 07060504 0b0a0908 0f0e0d0c     ................
  425ac0:	13121110 17161514 1b1a1918 1f1e1d1c     ................
  425ad0:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
  425ae0:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
  425af0:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
  425b00:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
  425b10:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
  425b20:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
  425b30:	83828180 87868584 8b8a8988 8f8e8d8c     ................
  425b40:	93929190 97969594 9b9a9998 9f9e9d9c     ................
  425b50:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
  425b60:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  425b70:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
  425b80:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  425b90:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
  425ba0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00425bb0 <wcorr.10559>:
  425bb0:	81808080 83828281 87868584 8d8c8a89     ................
  425bc0:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
  425bd0:	000000b5 0000ffff 33221100 77665544     .........."3DUfw
  425be0:	bbaa9988 ffeeddcc 33221100 77665544     .........."3DUfw
  425bf0:	bbaa9988 ffeeddcc 006e6962              ........bin.

00425bfc <cmaps>:
  425bfc:	00000020 0001005f 00000000 00000000      ..._...........
  425c0c:	00020000 000000b0 0060f7f3 0042a408     ..........`...B.
  425c1c:	00000000 0003003b                       ....;...

00425c24 <glyph_dsc>:
	...
  425c2c:	04d00000 00000000 04d00000 00010d03     ................
  425c3c:	07100014 07010605 0ca00023 00000d0d     ........#.......
  425c4c:	0b300078 fe00120b 0f3000db 00000d0f     x.0.......0.....
  425c5c:	0c60013d ff000e0d 03c00198 07010602     =.`.............
  425c6c:	0610019e fc011205 061001cb fc001205     ................
  425c7c:	073001f8 07000707 0a800211 02010909     ..0.............
  425c8c:	0410023a fd000604 06e00246 04010205     :.......F.......
  425c9c:	0410024b 00000304 06500251 feff1208     K.......Q.P.....
  425cac:	0c000299 00000d0c 06b002e7 00000d05     ................
  425cbc:	0a500308 00000d0a 0a500349 00000d0a     ..P.....I.P.....
  425ccc:	0c10038a 00000d0c 0a5003d8 00000d0a     ..........P.....
  425cdc:	0b200419 00000d0b 0ac00461 00000d0b     .. .....a.......
  425cec:	0b9004a9 00000d0b 0b2004f1 00000d0b     .......... .....
  425cfc:	04100539 00000a04 0410054d fd000d04     9.......M.......
  425d0c:	0a800567 02010909 0a800590 03010709     g...............
  425d1c:	0a8005b0 02010909 0a5005d9 00000d0a     ..........P.....
  425d2c:	12a0061a fc001112 0d3006b3 00ff0d0f     ..........0.....
  425d3c:	0da00715 00010d0c 0d000763 00000d0d     ........c.......
  425d4c:	0ee007b8 00010d0d 0c10080d 00010d0b     ................
  425d5c:	0b700855 00010d0a 0de00896 00000d0d     U.p.............
  425d6c:	0ea008eb 00010d0c 05900939 00010d03     ........9.......
  425d7c:	0940094d 00ff0d09 0cf00988 00010d0c     M.@.............
  425d8c:	0ab009d6 00010d0a 11300a17 00010d0f     ..........0.....
  425d9c:	0ea00a79 00010d0c 0f200ac7 00000d0f     y......... .....
  425dac:	0d000b29 00010d0c 0f200b77 fd00100f     ).......w. .....
  425dbc:	0d100bef 00010d0c 0b300c3d 00000d0b     ........=.0.....
  425dcc:	0a900c85 00000d0b 0e400ccd 00010d0c     ..........@.....
  425ddc:	0cd00d1b 00ff0d0e 14400d76 00000d14     ........v.@.....
  425dec:	0c200df8 00000d0c 0ba00e46 00ff0d0d     .. .....F.......
  425dfc:	0bd00e9b 00000d0c 06000ee9 fc011205     ................
  425e0c:	06500f16 feff1208 06000f5e fc001205     ..P.....^.......
  425e1c:	0a800f8b 03010809 09000faf fe000209     ................
  425e2c:	0ad00fb8 0b020305 0ac00fc0 00000a0a     ................
  425e3c:	0c400ff2 00010e0b 0a40103f 00000a0a     ..@.....?.@.....
  425e4c:	0c401071 00000e0b 0b0010be 00000a0b     q.@.............
  425e5c:	066010f5 00000e07 0c701126 fc000e0b     ..`.....&.p.....
  425e6c:	0c401173 00010e0a 050011b9 00010e03     s.@.............
  425e7c:	052011ce fcfe1206 0b101204 00010e0b     .. .............
  425e8c:	05001251 00010e03 13001266 00010a11     Q.......f.......
  425e9c:	0c4012bb 00010a0a 0b7012ed 00000a0b     ..@.......p.....
  425eac:	0c401324 fc010e0b 0c401371 fc000e0b     $.@.....q.@.....
  425ebc:	076013be 00010a06 090013dc 00000a09     ..`.............
  425ecc:	07701409 00000c07 0c301433 00010a0a     ..p.....3.0.....
  425edc:	0a101465 00ff0a0c 103014a1 00000a11     e.........0.....
  425eec:	09f014f6 00000a0a 0a101528 fcff0e0c     ........(.......
  425efc:	0960157c 00000a09 065015a9 fc011205     |.`.......P.....
  425f0c:	056015d6 fc011203 065015f1 fc001206     ..`.......P.....
  425f1c:	0a801627 04010509 0790163e 06000707     '.......>.......
  425f2c:	05a01657 03010404 1200165f fd001313     W......._.......
  425f3c:	12001714 00000e12 12001792 fe001112     ................
  425f4c:	1200182b 00000e12 0c6018a9 00000d0d     +.........`.....
  425f5c:	120018fe fe001213 120019a9 fd001312     ................
  425f6c:	14401a54 fe001115 12001b07 fd001312     T.@.............
  425f7c:	14401bb2 00000e15 12001c45 fd001312     ..@.....E.......
  425f8c:	09001cf0 ff000f09 0d801d34 ff000f0e     ........4.......
  425f9c:	14401d9d fe001215 12001e5a 00000e12     ..@.....Z.......
  425fac:	0fc01ed8 fe02110c 0fc01f3e fd001310     ........>.......
  425fbc:	0fc01fd6 fe001110 0fc0205e fe001110     ........^ ......
  425fcc:	0fc020e6 fe02110c 0fc0214c feff1112     . ......L!......
  425fdc:	0b4021e5 ff00100b 0b40223d ff00100b     .!@.....="@.....
  425fec:	0fc02295 fe001110 0fc0231d 05000410     .".......#......
  425ffc:	1440233d 00000e15 168023d0 fd001317     =#@......#......
  42600c:	144024ab fdff1316 1200257c fe001112     .$@.....|%......
  42601c:	0fc02615 02000a10 0fc02665 02000a10     .&......e&......
  42602c:	168026b5 ffff0f18 12002769 00000e12     .&......i'......
  42603c:	120027e7 fd001312 12002892 fdff1313     .'.......(......
  42604c:	0fc02947 fe001110 0fc029cf fd001310     G).......)......
  42605c:	0fc02a67 fe001110 0b402aef fdff130d     g*.......*@.....
  42606c:	0fc02b6b fd001310 0fc02c03 fd001310     k+.......,......
  42607c:	14402c9b 00000e15 12002d2e fdff1414     .,@......-......
  42608c:	0d802df6 fd00130e 16802e7b fe001217     .-......{.......
  42609c:	16802f4a 01000c17 16802fd4 01000c17     J/......./......
  4260ac:	1680305e 01000c17 168030e8 01000c17     ^0.......0......
  4260bc:	16803172 01000c17 168031fc ff000f17     r1.......1......
  4260cc:	0fc032a9 fd01130e 0fc0332e fd001310     .2.......3......
  4260dc:	120033c6 fdff1313 1680347b 00000e17     .3......{4......
  4260ec:	0d80351c fd00130e 122035a1 01000c13     .5.......5 .....

004260fc <gylph_bitmap>:
  4260fc:	8ff6689f 466ff457 f2355ff3 1500104f     .h..W.oF._5.O...
  42610c:	407ff70a 90ed09da dc08d99d 08c88d80     ...@............
  42611c:	000000c0 4f00e500 0f000000 00e00630     .......O....0...
  42612c:	00f10200 ff00008c ffffffff e55a05f2     ..............Z.
  42613c:	0055da55 0e009b00 0b000060 00f40090     U.U.....`.......
  42614c:	11d81100 8f00313f ffffffff f64502f9     ....?1........E.
  42615c:	20448e44 07102f00 040000c0 009a00f0     D.D ./..........
  42616c:	005e0000 0000900b 20070000 00000000     ..^........ ....
  42617c:	000000e4 00400e00 ffad0200 ff0320d9     ......@...... ..
  42618c:	00fccdbf 03e440bf 0ed00e30 df000040     .....@..0...@...
  42619c:	0000e430 50afff05 bf040000 0000d7ff     0......P........
  4261ac:	fbbe1e00 e4000000 0000f40b 606f400e     .............@o`
  4261bc:	0be400b4 affd1ef3 1700fabe 00c6ffcf     ................
  4261cc:	400e0000 00000000 010000e4 0000c3bf     ...@............
  4261dc:	c900402f 0c00e016 002f0090 e007500c     /@......../..P..
  4261ec:	00d00400 00f402a7 0c003f00 0000c960     .........?..`...
  4261fc:	f104d700 0000007e 2fe4df03 00b2ae41     ....~....../A...
  42620c:	900c1000 00e028c9 3fe10600 00500d00     .....(.....?..P.
  42621c:	d004f402 0000a700 003e00ba 6e00500c     ..........>..P.n
  42622c:	05d70010 501f00e1 c3bf0200 cf040000     .......P........
  42623c:	000000e9 f957fb03 9f000000 00d00a00     ......W.........
  42624c:	00f10800 000000db 20ceb32f 6f000000     ......../.. ...o
  42625c:	000020fc b0ef4e00 5f001000 1fb06fa0     . ...N....._.o..
  42626c:	00c00e50 02f2b76f 6f0000f8 d00f00fb     P...o......o....
  42627c:	b0df0100 8ae98f00 00b08ffe 10d9ff5c     ............\...
  42628c:	00000068 00000000 c8d9d9da 6f0000c8     h..............o
  42629c:	04c00d40 109f00f6 fb00d00d 03802f00     @............/..
  4262ac:	604f00f7 3f00f604 00f80270 dd00b00f     ..O`...?p.......
  4262bc:	00f10800 dc00603f 3ff40600 00be0070     ....?`.....?p...
  4262cc:	1f00f505 00ce00a0 7f00f109 00f40630     ............0...
  4262dc:	f505505f 07406f00 109f00f3 fa01e00c     _P...o@.........
  4262ec:	0b505f00 00f703e0 03200e00 4d56e260     ._P....... .`.VM
  4262fc:	1d60cedf cf4e30ff e26063bf 200e0045     ..`..0N..c`.E.. 
  42630c:	30010000 8f000000 08000000 220100f0     ...0..........."
  42631c:	cf20229f 44ffffff 5155af55 00f00800     ." ....DU.UQ....
  42632c:	008f0000 f0080000 10010000 f20ff10e     ................
  42633c:	900be007 8888400e 05feff7f 0cf21f60     .....@......`...
  42634c:	000000d0 00000057 030000ea 090000f5     ....W...........
  42635c:	0e0000f0 4f0000a0 9e000040 e9000000     .......O@.......
  42636c:	f4040000 e0090000 900e0000 404f0000     ..............O@
  42637c:	00ae0000 00f90000 00f30500 00e00a00     ................
  42638c:	00900f00 00305f00 be040000 000040eb     ....._0......@..
  42639c:	f6bffb6f 10fd0200 0a20df01 3f0000f3     o......... ....?
  4263ac:	00e00ea0 0fe00e00 0b0000b0 00a01ff0     ................
  4263bc:	0ff10a00 0b0000b0 00e00ef0 09e00e00     ................
  4263cc:	3f0000f3 10fd0290 0020df01 f6bffb6f     ...?...... .o...
  4263dc:	be040000 df0040eb fcaac8ff 00c00f00     .....@..........
  4263ec:	c00f00fc 0f00fc00 00fc00c0 fc00c00f     ................
  4263fc:	00c00f00 c00f00fc c5fe8d01 acfd4f00     .............O..
  42640c:	303c70ff 00f02f00 f20b0000 0c000000     .p<0./..........
  42641c:	000000f1 0000b03f 0020ee02 00f32e00     ....?..... .....
  42642c:	30ef0200 f32e0000 ef020000 2e000030     ...0........0...
  42643c:	a7aaaafc ffffff5f ffff5ffb aa3af0ff     ...._...._....:.
  42644c:	00c0cfaa 10ee0100 f30c0000 9f000000     ................
  42645c:	04000060 000061fe 50ffdf05 3e000000     `....a.....P...>
  42646c:	000000f2 0000f607 69f60600 f21d0010     ...........i....
  42647c:	ffbcfc9f feae0480 000000b5 00b04f00     .............O..
  42648c:	ed010000 00000000 0000f20c 509f0000     ...............P
  42649c:	05000000 000000f9 03c02f00 de0000c5     ........./......
  4264ac:	00f70410 0400f40b ff4f00f7 fdffffff     ..........O.....
  4264bc:	9b999939 000098fc 00f70500 05000000     9...............
  4264cc:	000000f7 00f70500 ffffff02 aafc04f0     ................
  4264dc:	f505a0aa 07000000 000000f3 0000f109     ................
  4264ec:	ffff0a00 aa0700c7 00c0ffab f60b0000     ................
  4264fc:	03000000 000000fa 203cfa03 6ff60b00     ..........< ...o
  42650c:	b0efbbfd c7ff9d03 8d010000 0400c6fe     ................
  42651c:	90adcaef 0040ee01 408f0000 0e000000     ......@....@....
  42652c:	000000e0 ef2afb00 df1f00d7 01fb9dd9     ......*.........
  42653c:	0a00a0ff 00f20ff5 bf903f00 f8030020     .........?.. ...
  42654c:	0000fa04 fd0940af 00a0df99 60fccf05     .....@.........`
  42655c:	ffff7f00 fb07ffff e0afaaaa 0500407f     .............@..
  42656c:	00f406f8 0010cf00 a03f0000 0a000000     ..........?.....
  42657c:	000000f3 0000fc01 508f0000 0e000000     ...........P....
  42658c:	000000e0 0000f706 10df0000 4f000000     ...............O
  42659c:	00000090 0000f20b ef2a0000 3f0070fc     ..........*..p.?
  4265ac:	b0df89fb 0000f50a 10bf30bf 04f40800     .........0......
  4265bc:	fd2642fc ffff0600 fe0510fe 10fd6a85     .B&..........j..
  4265cc:	070010ee 00a02ff8 fbb21f00 fb020000     ...../..........
  4265dc:	0000f40d fb3f70af 00c0df89 60fcdf29     .....p?.....)..`
  4265ec:	ff6c0000 af0000c6 00fa8cd9 0700b03f     ..l.........?...
  4265fc:	00f507f6 6fd00f00 ff020060 0451ff11     .......o`.....Q.
  42660c:	ef04f2df 309ffbff 0a735700 000000f1     .......0.Ws.....
  42661c:	0000df00 a04f0000 3e000000 ba8e00f2     ......O....>....
  42662c:	0500f5cf 0092fdbe 1fd00c00 006005f2     ..............`.
  42663c:	00000000 05000000 0cf21f60 1fd00cd0     ........`.......
  42664c:	006005f2 00000000 01000000 0ff10e10     ..`.............
  42665c:	0be007f2 00400e90 20050000 f48e0100     ......@.... ....
  42666c:	93ff4b00 00c6df06 0080cf00 e7cf0500     .K..............
  42667c:	39000010 0000b4ff 00f46d01 20040000     ...9.....m..... 
  42668c:	ffffffcf 77777746 00000072 00000000     ....Fwwwr.......
  42669c:	22120000 ff0c2222 45f4ffff 10555555     ...""".....EUUU.
  4266ac:	00000062 0040fb0c e7cf0600 39000010     b.....@........9
  4266bc:	0000a1ff 0040df02 1891ff4b 0c00c6ef     ......@.K.......
  4266cc:	000030fa 00000051 fe9d0200 fb4f00c5     .0..Q.........O.
  4266dc:	4c80ff9b f02f0020 0c000000 000000f0     ...L ./.........
  4266ec:	0000c01f 0030cf01 00f41d00 509f0000     ......0........P
  4266fc:	ac000000 00000000 00000000 00003300     .............3..
  42670c:	10ff0100 cd000000 00000000 ecff9d02     ................
  42671c:	00000071 54c79f00 0060df58 00e40c00     q......TX.`.....
  42672c:	f9060000 10ae0000 bdb2ef3b f404603f     ........;...?`..
  42673c:	cf97fe04 0ae006ed 00e10ec0 e500fd08     ................
  42674c:	604f600e 00fd0000 6f401fa9 cd000030     .`O`......@o0...
  42675c:	302f8b00 0000306f 1f8b00cd 00603f40     ../0o0......@?`.
  42676c:	9900fd00 e10e600e 00fe0800 04c00ae5     .....`..........
  42677c:	afbf87fe f404e09b b3ff3b00 0030fc1b     .........;....0.
  42678c:	0000109e 00000000 00e40c00 00000000     ................
  42679c:	9f000000 e06a54c7 00000000 dbff9d03     .....Tj.........
  4267ac:	00000050 b08f0000 00000000 20ff0e00     P.............. 
  4267bc:	00000000 00f9f606 00000000 00f00bdd     ................
  4267cc:	4f000000 00704f60 e00b0000 0000dd00     ...O`Op.........
  4267dc:	00f80200 0000f506 00109f00 0000c00e     ................
  4267ec:	ffffff1f 070030ff 888888f8 ed0000fa     .....0..........
  4267fc:	0b000000 605f00f1 4f000000 00f10c80     ......_`...O....
  42680c:	ee000000 ffff1f00 1f00b4fe ff8a88d8     ................
  42681c:	00b01f70 1ff02f00 0c0000b0 00b01ff0     p..../..........
  42682c:	1fc02f00 fe8a88d8 ffff1f30 1f40fdff     ./......0.....@.
  42683c:	4d0100b0 00b01ff3 1ff90400 020000b0     ...M............
  42684c:	00b01ffb 1ff80800 cf8988d8 ffff1fe1     ................
  42685c:	0010d9ff ebef4a00 bf010050 b0ffacfc     .....J..P.......
  42686c:	00b2bf00 6f009c01 000000b0 00f10d00     .......o........
  42687c:	00000000 000000fc a01f0000 00000000     ................
  42688c:	0000fc00 0d000000 000000f1 b06f0000     ..............o.
  42689c:	00000000 00b2bf00 0110ac01 ffbcfcbf     ................
  4268ac:	4b0000b0 0050ebef fdffff1f fe0100a4     ...K..P.........
  4268bc:	facfaaaa 00b01f00 01fa2b00 000000fb     .........+......
  4268cc:	b01ff40c 3f000000 0000fbb1 1fee0000     .......?........
  4268dc:	000000b0 00fbf10d ee000000 0000b01f     ................
  4268ec:	fbb13f00 0c000000 00b01ff4 01fa2b00     .?...........+..
  4268fc:	cfaaaafe ff1f00fa 00a4fdff ffff1f00     ................
  42690c:	fe01fcff 70aaaaaa 0000b01f 00fb0100     .......p........
  42691c:	1f000000 000000b0 9999fd01 ff1f0099     ................
  42692c:	01f0ffff 000000fb 00b01f00 fb010000     ................
  42693c:	00000000 0000b01f aafe0100 1fa0aaaa     ................
  42694c:	ffffffff ffff1f00 ea1ffcff 1fa7aaaa     ................
  42695c:	000000b0 0000b01f 00b01f00 b01f0000     ................
  42696c:	1f000000 f0ffffff 9999e91f 00b01f90     ................
  42697c:	b01f0000 1f000000 000000b0 0000b01f     ................
  42698c:	00b01f00 00000000 60ebdf4a fcbf0100     ........J..`....
  42699c:	00c1ffbb 0000b2bf b06f107d 00000000     ........}.o.....
  4269ac:	0000f10d fc000000 00000000 00a01f00     ................
  4269bc:	30390000 000000fc f10cf506 6f000000     ..90...........o
  4269cc:	00b06f50 00f50600 0000b2bf af00509f     Po...........P..
  4269dc:	d2ffbcfd ef4a0000 1f0060eb 010000b0     ......J..`......
  4269ec:	00b01ffb 1ffb0100 010000b0 00b01ffb     ................
  4269fc:	1ffb0100 010000b0 aaea1ffb 1ffbaaaa     ................
  426a0c:	ffffffff 00b01ffb 1ffb0100 010000b0     ................
  426a1c:	00b01ffb 1ffb0100 010000b0 00b01ffb     ................
  426a2c:	1ffb0100 010000b0 fbb11ffb 1ffbb11f     ................
  426a3c:	b11ffbb1 fbb11ffb 1ffbb11f ffef00b0     ................
  426a4c:	aa0870ff 0000f7ab 00705f00 00f70500     .p......._p.....
  426a5c:	705f0000 f7050000 5f000000 05000070     .._p......._p...
  426a6c:	000000f7 0000705f 700af606 cf30cf00     ...._p.....p..0.
  426a7c:	00c0dfda 0090fe8d 0000b01f b01fe21d     ................
  426a8c:	30df0100 0c00b01f b01f00f4 0050bf00     ...0..........P.
  426a9c:	f70bb01f b01f0000 000080af b0ffb91f     ................
  426aac:	ff1f0000 0000f8bb df01fb1f d01f0050     ............P...
  426abc:	00f22f00 0400b01f b01f10fd b07f0000     ./..............
  426acc:	0000b01f b01ff809 1f000000 000000b0     ................
  426adc:	0000b01f 00b01f00 b01f0000 1f000000     ................
  426aec:	000000b0 0000b01f 00b01f00 b01f0000     ................
  426afc:	1f000000 000000b0 0000b01f aaea1f00     ................
  426b0c:	ff1fa5aa 1ff8ffff 000000a0 ff417f00     ..............A.
  426b1c:	00000030 fc1ff41f 09000000 f5ff41ff     0............A..
  426b2c:	fe020000 e0ad1ff4 8fbe0000 804ffa41     ............A.O.
  426b3c:	f4674f00 20afa01f 417fd00d 07fa02fa     .Og.... ...A....
  426b4c:	1ff407f4 eaf508a0 fa417f00 20ff0e00     ..........A.... 
  426b5c:	a01ff406 00805f00 00fa416f 06006000     ....._..oA...`..
  426b6c:	00a01ff4 6f000000 00b01f40 1ffb0100     .......o@.......
  426b7c:	010000f8 50ff1ffb 1ffb0100 0100f2df     .......P........
  426b8c:	fdb61ffb 1ffb0100 01a09fb0 0cb01ffb     ................
  426b9c:	1ffb01f6 31ef01b0 00b01ffb 1ffbe24f     .......1....O...
  426bac:	fd0700b0 00b01ffb 1ffbbf00 1d0000b0     ................
  426bbc:	00b01ffb 00fb0200 ebdf4a00 00000050     .........J..P...
  426bcc:	ffbcfcaf bf0000c1 af0100b2 b06f00d0     ..............o.
  426bdc:	9f000000 00f10c80 fe000000 0000fc00     ................
  426bec:	f20a0000 0000a01f 309f0000 000000fc     ...........0....
  426bfc:	0cf20a00 000000f1 6f00fe00 000000b0     ...........o....
  426c0c:	bf00809f af0100b2 af0000d0 c1ffbcfc     ................
  426c1c:	4a000000 0050ebef ffff1f00 1f0070fc     ...J..P......p..
  426c2c:	fdbeaaea 00b01f10 1f909f00 0e0000b0     ................
  426c3c:	00b01ff0 1ff00c00 0e0000b0 00b01ff0     ................
  426c4c:	1f909f00 fdbeaaea ffff1f10 1f0070fc     .............p..
  426c5c:	000000b0 00b01f00 1f000000 000000b0     ................
  426c6c:	00b01f00 00000000 ebdf4a00 00000050     .........J..P...
  426c7c:	ffbcfcaf bf0000c1 af0100b2 b06f00d0     ..............o.
  426c8c:	9f000000 00f10c80 fe000000 0000fc00     ................
  426c9c:	f10a0000 0000a01f 309f0000 000000fc     ...........0....
  426cac:	0df20a00 000000f1 7f00fe00 000000a0     ................
  426cbc:	cf00808f 9f0000a1 cf0100d0 d1ffabfb     ................
  426ccc:	6c000000 0060fdef 00000000 a734e65f     ...l..`....._.4.
  426cdc:	00000000 40feff3c 00000000 1f004302     ....<..@.....C..
  426cec:	70fcffff aaea1f00 1f10fdbe 9f0000b0     ...p............
  426cfc:	00b01f90 1ff00e00 0c0000b0 00b01ff0     ................
  426d0c:	1fe00e00 9f0000b0 99d91f90 1f10fdae     ................
  426d1c:	a0ffffff 00b01f00 1f00d01f f90600b0     ................
  426d2c:	00b01f00 1f40bf00 1e0000b0 df2900e0     ......@.......).
  426d3c:	3f0081fd c0df9afc 0000f40b 00ed0023     ...?........#...
  426d4c:	0c000000 000000f3 61fa5f00 3b000000     ........._.a...;
  426d5c:	0070fdff ef480000 000000b0 0040bf00     ..p...H.......@.
  426d6c:	f6060000 0000500b ebdf31cf 0090ef9a     .....P...1......
  426d7c:	50ebef6b ffffef00 aa89ffff a5aafbad     k..P............
  426d8c:	209f0000 09000000 000000f2 00209f00     ... .......... .
  426d9c:	f2090000 00000000 0000209f 00f20900     ......... ......
  426dac:	9f000000 00000020 0000f209 209f0000     .... .......... 
  426dbc:	09000000 000000f2 00209f00 00903f00     .......... ..?..
  426dcc:	3ff70500 05000090 00903ff7 3ff70500     ...?.....?.....?
  426ddc:	05000090 00903ff7 3ff70500 05000090     .....?.....?....
  426dec:	00903ff7 3ff70500 05000090 00b02ff6     .?.....?...../..
  426dfc:	0ef50700 0b0000f0 00fa08f2 00b07f00     ................
  426e0c:	febefbcf cf070020 0c0081fd 000000f2     .... ...........
  426e1c:	f806f902 09000000 00ef00f3 c01f0000     ................
  426e2c:	00608f00 00507f00 0000d01f 0a0000ee     ..`...P.........
  426e3c:	f70500f4 fb030000 00f10c00 20df0000     ............... 
  426e4c:	0000a02f 9f806f00 00000030 00fce10e     /....o..0.......
  426e5c:	08000000 0000f5fc ff010000 000000e0     ................
  426e6c:	80af0000 904f0000 f30c0000 f8020000     ......O.........
  426e7c:	0000e00e 0000f82f f309f308 fd7f0000     ..../...........
  426e8c:	d00d0000 0000f804 00208fcd fe00802f     .......... ./...
  426e9c:	3ff80200 307f0080 0730af00 00d00ef3     ...?...0..0.....
  426eac:	5f0000de 08d00c80 00f902f2 2fd00f00     ..._.........../
  426ebc:	07f70380 0a0000f4 00307ff2 00e00ced     ..........0.....
  426ecc:	ddf70500 4f9f0000 00000090 0000f8fe     .......O........
  426edc:	0040df3f f3bf0000 ff0e0000 00000000     ?.@.............
  426eec:	0000e06f 0000fa09 0000d02f fa06f30b     o......./.......
  426efc:	707f0000 0250bf00 1e0000fc 00f20de1     ...p..P.........
  426f0c:	8ffb0500 00000050 0000fa9f f53f0000     ....P.........?.
  426f1c:	00000000 0010fedf 5ff60900 4f0000a0     ..........._...O
  426f2c:	00f60ab0 0110ee01 f50b20ef c04f0000     ......... ....O.
  426f3c:	0000a06f f20cf808 5f000000 00b03f60     o.........._`?..
  426f4c:	00d00e00 0800509f ee0100f3 00fa0200     .....P..........
  426f5c:	00f80600 000010bf 704ff10c 3f000000     ..........Op...?
  426f6c:	0000d0bd f4af0000 00000000 0000fc02     ................
  426f7c:	1f000000 000000b0 00fb0100 00000000     ................
  426f8c:	0000b01f fb010000 1f000000 ffffffff     ................
  426f9c:	aaaa0af1 00d0cfaa ef010000 00000020     ............ ...
  426fac:	0000f50c 809f0000 05000000 000000fb     ................
  426fbc:	00e12f00 df000000 00000030 0000f60a     ./......0.......
  426fcc:	a07f0000 04000000 000000fd aafb1e00     ................
  426fdc:	3fa2aaaa ffffffff a1ff1ff4 a01f74fc     ...?.........t..
  426fec:	1f00fa01 00fa01a0 fa01a01f 01a01f00     ................
  426ffc:	a01f00fa 1f00fa01 00fa01a0 fa01a01f     ................
  42700c:	41c71f00 0047faff 305f0000 800f0000     ...A..G..._0....
  42701c:	e00a0000 f3050000 f9000000 ae000000     ................
  42702c:	5f000000 0f000040 0a000090 040000e0     ..._@...........
  42703c:	000000f4 000000e9 0000009e 0000404f     ............O@..
  42704c:	0000a00e 0000f009 0000f504 ffafea00     ................
  42705c:	00f17c14 f10a10af 0a10af00 10af00f1     .|..............
  42706c:	af00f10a 00f10a10 f10a10af 0a10af00     ................
  42707c:	10af00f1 cf47f10a 00f1ff1a 0000f20a     ......G.........
  42708c:	0090fe01 005e7d00 f5700d00 09f10400     .....}^...p.....
  42709c:	00ab00c0 501f203f e007d800 ffe00600     ....? .P........
  4270ac:	f2ffffff 22222222 af004048 407f0040     ....""""H@..@..@
  4270bc:	d6ff7c01 99fc0900 300180ef 00f00d00     .|.........0....
  4270cc:	f2090000 ffff9e01 43f80af3 b00ff33a     ...........C:...
  4270dc:	0ff30800 f30e00b0 df46f909 fe8d00f3     ..........F.....
  4270ec:	505ff387 05000000 000000f5 00505f00     .._P........._P.
  4270fc:	f5050000 00000000 eadf565f fcfd0520     ........_V.. ...
  42710c:	5f30ff9b fe0400f5 0000fa05 605ff408     ..0_.........._`
  42711c:	754f0000 040000f6 00a05ff7 ff458f00     ..Ou....._....E.
  42712c:	e04f0050 bfc9cf5f 6df405f3 0000a2fe     P.O._......m....
  42713c:	30ebdf07 afd9cf00 00f709f4 d00fc302     ...0............
  42714c:	3f000000 00000080 0000803f 00c00f00     ...?....?.......
  42715c:	f7090000 00c30200 f3afd9cf ebdf0700     ................
  42716c:	00000030 00a01f00 fa010000 00000000     0...............
  42717c:	0000a01f 00fa0100 2fe8df08 9bfd1da0     .........../....
  42718c:	f80afafd a0ef0200 060000fd 00803ffa     .............?..
  42719c:	f8a32f00 fa020000 0000c00f 60afa05f     ./.........._..`
  4271ac:	01fa1e00 df9eb7df fe8d00a0 0800fa91     ................
  4271bc:	0010e9df fe8afb1d 00f30a20 fa00fb03     ........ .......
  4271cc:	f1090000 ffffff3f 33fa33ff 0f303333     ....?....3.3330.
  4271dc:	000000d0 00909f00 df001009 00f6aeda     ................
  4271ec:	c5ff7d00 ee1a0000 88f90a90 0000fb00     .}..............
  4271fc:	bf00901f 8f55ffff fa0172c7 a01f0000     ......U..r......
  42720c:	00fa0100 00a01f00 0000fa01 0100a01f     ................
  42721c:	1f0000fa 080000a0 c01ee9df fe9bfd1d     ................
  42722c:	00f80aec fdc0df01 fc040000 0000903f     ............?...
  42723c:	00f8c30f 0ffc0000 4f0000d0 0080afc0     ...........O....
  42724c:	df01fc1d c0dfafd9 91fe8d00 000000fb     ................
  42725c:	27902f00 f40b0000 aeb9ff07 ae0400fa     ./.'............
  42726c:	5f00c6ff 00000050 0000505f 00505f00     ..._P..._P..._P.
  42727c:	505f0000 5f000000 10eadf56 dfcaef5f     .._P..._V..._...
  42728c:	00f45fd0 905ff60a 5ff90200 fa000060     ._...._...._`...
  42729c:	0000505f 00505ffb 505ffb00 5ffb0000     _P..._P..._P..._
  4272ac:	fb000050 0000505f f9696ffb 5f000004     P..._P...oi...._
  4272bc:	555ff555 f5555ff5 5ff5555f 0400f555     U._U._U._U._U...
  4272cc:	fa0700f7 00400000 04000000 f70400f7     ......@.........
  4272dc:	00f70400 0400f704 f70400f7 00f70400     ................
  4272ec:	0400f704 f70400f7 00f70400 9f4bf506     ..............K.
  4272fc:	30fc5ee1 0000505f 00f50500 5f000000     .^.0_P........._
  42730c:	00000050 0000f505 505f0000 05f31d00     P........._P....
  42731c:	f32d00f5 2e505f00 f50500f4 0000f42e     ..-.._P.........
  42732c:	00fe9e5f faff0500 5f0000fa 00f60ce3     _.........._....
  42733c:	1e00f605 505f00f3 05d04f00 7f0000f5     ......_P.O......
  42734c:	f5555fa0 5ff5555f 555ff555 f5555ff5     ._U._U._U._U._U.
  42735c:	5ff5555f 585ff555 8d00e8df fe0580fe     _U._U._X........
  42736c:	dffb9dfa 5fb0dfa9 ff0d00f2 35cf0030     ......._....0..5
  42737c:	7f0000f9 f60600a0 0500605f 4f0000f7     ........_`.....O
  42738c:	0000f575 0400605f 00505ff7 0000f605     u..._`..._P.....
  42739c:	00f5754f 00605f00 505ff704 00f60500     Ou..._`..._P....
  4273ac:	f5754f00 605f0000 5ff70400 10eadf57     .Ou..._`..._W...
  4273bc:	cfa8ef5f 00f35fd0 905ff609 5ff90200     _...._...._...._
  4273cc:	fa000060 0000505f 00505ffb 505ffb00     `..._P..._P..._P
  4273dc:	5ffb0000 fb000050 0000505f df0700fb     ..._P..._P......
  4273ec:	0d0030ea 50ff9afd 0200f709 00fd10ef     .0.....P........
  4273fc:	3ff70600 2f000080 0000f893 d00ff902     ...?.../........
  42740c:	606f0000 2e00809f d9cf00f1 0000f4af     ..o`............
  42741c:	00a3fe7d eadf465f fafd0520 5f30ff8a     }..._F.. .....0_
  42742c:	fe0300f4 0000fa05 605ff408 754f0000     .........._`..Ou
  42743c:	040000f6 00a05ff7 ff459f00 e04f0050     ....._....E.P.O.
  42744c:	bfc9df5f 6df505f3 5f00a2fe 00000050     _......m..._P...
  42745c:	0000f505 505f0000 05000000 000000f5     ......_P........
  42746c:	df080000 1da01fe8 fafc9bfd 0200f70a     ................
  42747c:	00fda0ef 3ffa0600 2f000080 0000f8a3     .......?.../....
  42748c:	d00ffa02 a06f0000 2e0080af d9df01fa     ......o.........
  42749c:	00a0dfaf fa82fe8d 00000000 0000a01f     ................
  4274ac:	00fa0100 1f000000 000000a0 465ffa01     .............._F
  4274bc:	d9cf5fdb 5f00f55f 705f00a0 00505f00     ._.._.._.._p._P.
  4274cc:	5f00505f 505f0050 00505f00 c7fe8d01     _P._P._P._P.....
  4274dc:	adb8cf00 00903fd0 00fb0201 ff0b0000     .....?..........
  4274ec:	050040b8 00c0ff9c 609f0000 f7050050     .@.........`P...
  4274fc:	fe9aea5f d9ef6c10 00fa0120 00a01f00     _....l.. .......
  42750c:	55ffffbf 0172c78f 1f0000fa fa0100a0     ...U..r.........
  42751c:	a01f0000 00fa0100 00c00f00 90a9bf00     ................
  42752c:	7fe9be01 f8030040 0300407f 00407ff8     ....@....@....@.
  42753c:	407ff803 7ff80300 f8030040 0400407f     ...@....@....@..
  42754c:	00606ff8 c02ff806 0af81e00 f8ee89fd     .o`.../.........
  42755c:	92fe8d00 00e00df8 06d00d00 3f0000f6     ...............?
  42756c:	00fc0070 0010af00 f901309f 902f0000     p........0..../.
  42757c:	0000f307 c00ef00b f6050000 0000505f     ............_P..
  42758c:	00beed00 7f000000 000000f8 00f11f00     ................
  42759c:	0000be00 0000f10c 00f405ae 0060ff02     ..............`.
  4275ac:	900f800f 00eb8f00 ae00f205 f1b80d00     ................
  4275bc:	0400bd00 2ff503f4 00701f70 009ea00e     ......./p.p.....
  4275cc:	00f106cc 901e9f00 00ccf206 f3fa0300     ................
  4275dc:	60af1f00 fd0d0000 f1bf0000 8f000000     ...`............
  4275ec:	fb050070 b03f0000 07f20c00 607f00f7     p.....?........`
  4275fc:	fa33bf00 de1e0000 040000d0 000030ff     ..3..........0..
  42760c:	0050ff06 f2bc3f00 12de0000 f40a00fc     ..P..?..........
  42761c:	6f905f00 f50a0080 0000e00d f606d00c     ._.o............
  42762c:	703f0000 0000fc00 9f00109f 00fa0130     ..?p........0...
  42763c:	06902f00 0c0000f3 00c00df0 3ff60500     ./.............?
  42764c:	00000060 0000aeed f88f0000 00000000     `...............
  42765c:	0000f21f b00f0000 00010000 0000407f     .............@..
  42766c:	00fbaa1f ee190000 000000a1 ffffff2f     ............/...
  42767c:	7e777791 060000f4 030000f8 010000fc     .ww~............
  42768c:	000010ee 000040bf 0000708f 0000b04f     .....@...p..O...
  42769c:	7777f81e ffffff54 f07e00fb f407d73f     ..wwT.....~.?...
  4276ac:	08308f00 308f00f3 9f00f308 0fe08e20     ..0....0.... ...
  4276bc:	f20b00fa 08308f00 308f00f3 7f00f308     ......0....0....
  4276cc:	70fd0440 711fef08 f7711ff7 1ff7711f     @..p...q..q..q..
  4276dc:	711ff771 f7711ff7 1ff7711f 711ff771     q..q..q..q..q..q
  4276ec:	00a1aff7 0000f94b de0000ed 00de0000     ....K...........
  4276fc:	0000de00 de0000de 92af0000 00f45f00     ............._..
  42770c:	de0010cf 00de0000 0000de00 ed0000de     ................
  42771c:	00f94a00 0000b1af 01010000 c500c1df     .J..............
  42772c:	4fe35cac ff09402d 02003090 af010010     .\.O-@...0......
  42773c:	03b800d5 06001ee4 6a00e0a2 501d700c     ...........j.p.P
  42774c:	0070ff2c 05000000 cff39f30 00c14ef6     ,.p.....0....N..
  42775c:	00000000 ba270000 00000000 df480000     ......'.......H.
  42776c:	0000f2ff ff6a0100 20ffffff ff7c0000     ......j.... ..|.
  42777c:	ffffffff 4f0000f2 ffffffff 0020ffff     .......O...... .
  42778c:	ffffff05 f23fb7ff ff5f0000 010095fe     ......?..._.....
  42779c:	050020ff 000073ff 00f21f00 00e05f00     . ...s......._..
  4277ac:	ff010000 fe050020 00000000 0000f21f     .... ...........
  4277bc:	0000e05f 20ff0100 00fe0500 8f690000     _...... ......i.
  4277cc:	5f0000f2 ef0200e0 0320ffff 0000fe58     ..._...... .X...
  4277dc:	f2ffff8f e0ffff2d ffff0400 ffff0bfd     ....-...........
  4277ec:	040000fe af10c8bd 00b0ffff 00000000     ................
  4277fc:	b1ffaf00 00000000 01000000 00000000     ................
  42780c:	00000000 88880651 30888888 ff6ef715     ....Q......0..n.
  42781c:	ffffffff cffd8fb6 333333f3 f2dfec6f     .........333o...
  42782c:	0000e00c 2f703f00 00e00cf2 803f0000     .....?p/......?.
  42783c:	e0ffff2f 3f000000 2df4ffff 999999f9     /......?...-....
  42784c:	f24f92bf ffffff0c 2f70ffff 11f1affb     ..O.......p/....
  42785c:	da5f1111 e08ef9bf 3f000000 0cf29fc8     .._........?....
  42786c:	000000e0 f62f703f 0000e04d 6fa43f00     ....?p/.M....?.o
  42787c:	bbfbeffe fecfbbbb ff0cc2ef ffffffff     ................
  42788c:	88582c80 88882870 ff858888 ff9ff3ff     .,X.p(..........
  42789c:	ffffffff aff3ffff ffffffff f3ffffff     ................
  4278ac:	ffffffaf ffbfffff ffff6fd1 00fbffff     .........o......
	...
  4278c4:	7fe1ffcf ffffffff f3fffffc ffffffaf     ................
  4278d4:	ffffffff ffffaff3 ffffffff ff9ff3ff     ................
  4278e4:	ffffffff 27608858 88888888 50774785     ....X.`'.....GwP
  4278f4:	77777717 ffff7477 ffff9ff3 ffffffff     .wwwwt..........
  427904:	ffaff3ff ffffffff aff3ffff ffffffff     ................
  427914:	f1ffdfff ffffff7f 0000fdff 00000000     ................
	...
  42792c:	20050000 00000000 8f000000 000000f3     ... ............
  42793c:	08000000 0000feff 00000000 00f8ff8f     ................
  42794c:	00000000 90ffff08 0000d209 f9ff8f00     ................
  42795c:	20fe9f00 ffff0800 ffdf0090 ff8f00e2     ... ............
  42796c:	2e0000f9 ff28feff 000090ff ffffef02     ......(.........
  42797c:	0000f9ff ff2e0000 0090ffff 02000000     ................
  42798c:	00f9ffef 00000000 90ff2e00 00000000     ................
  42799c:	d8020000 00000000 00b02d00 0de60600     .........-......
  4279ac:	0600c0ff ffcff3ff ffff06c0 c7ffdf31     ............1...
  4279bc:	0150ffff ffffffdf df010050 0050ffff     ..P.....P.....P.
  4279cc:	ffff0700 060000d0 c0ffffff ffff0600     ................
  4279dc:	06c0ffdf df51ffff ffffc0ff ffdf0150     ......Q.....P...
  4279ec:	0050ff58 05d0df01 01000030 00000061     X.P.....0...a...
  4279fc:	50cd0000 00000000 3f000000 000000fa     ...P.......?....
  427a0c:	e3070000 0ba0ff03 080000c1 fa3fb0ff     ..............?.
  427a1c:	00d1ff04 03f6ff04 ff1ea0ff f7df00a0     ................
  427a2c:	00fa3f00 3f40ff2e ff0300fc fa6f00a0     .?....@?......o.
  427a3c:	0060ff08 0000fa3f f2aff0ef a0ff0300     ..`.?...........
  427a4c:	1bff0b00 1f0010ff bf0000f8 00f39ff1     ................
  427a5c:	00002400 ff06ff0d 00000090 d0ff0200     .$..............
  427a6c:	0020ff1f bf000000 fd9f00f8 00000020     .. ......... ...
  427a7c:	0010fe9f 0071fecf 50ffcf04 ffdf0100     ......q....P....
  427a8c:	ffffdffe 00000060 ffffff9f 000040fd     ....`........@..
  427a9c:	ce280000 0000a5fd 00000000 00406604     ..(..........f@.
  427aac:	00000000 f3ff3f00 00000000 ff4f0000     .....?........O.
  427abc:	000000f4 ff177800 8771ffff ffff0400     .....x....q.....
  427acc:	ffffffff ff0d40ff ffffffff 3fd0ffff     .....@.........?
  427adc:	88feffff f3ffffef d0ffff08 ffff0d00     ................
  427aec:	ffaf0080 ff050050 bf0000fa 030030ff     ....P........0..
  427afc:	0100fbff 0080ffcf 10fcff08 f6ffff3e     ............>...
  427b0c:	ffff6f00 ffff1fe3 ffffffff ff09f1ff     .o..............
  427b1c:	ffffffff 0090ffff ffff8edf 00fde8ff     ................
  427b2c:	9f011100 1110f9ff 00000000 00f4ff4f     ............O...
  427b3c:	00000000 d2ee2c00 00000000 00000000     .....,..........
	...
  427b54:	6b009208 000000b1 ff2d0000 20ff0ae4     ...k......-.... 
  427b64:	00000000 f6ffff4e 0000f2af fe6f0000     ....N.........o.
  427b74:	ffffcf31 00000020 7025fd9f 00f2ffaf     1... .....%p....
  427b84:	fabf0100 7fb0ff08 020040ff ff0af8df     .........@......
  427b94:	ff5fd2ff f5ff0450 ffffff1d 70ff2ee4     .._.P..........p
  427ba4:	ff3ee3df f6ffffff b113ff1c ffffff5f     ..>........._...
  427bb4:	09f8ffff ff0a0060 ffffffff 0000e0ff     ....`...........
  427bc4:	fdffaf00 feffbf88 0a000000 0370ffff     ..............p.
  427bd4:	00e0ffff ffaf0000 ff3f00f7 000000fe     ..........?.....
  427be4:	70ffff0a e0ffff03 8f000000 2f00f5ff     ...p.........../
  427bf4:	0000fcff 00000000 00000000 00000000     ................
  427c04:	aa090000 00000090 3f000000 0000f3ff     ...........?....
  427c14:	00000000 00f4ff4f 00000000 f4ff4f00     ....O........O..
  427c24:	00000000 ff4f0000 000000f4 4f000000     ......O........O
  427c34:	0000f4ff 00000000 00f4ff4f 0c000000     ........O.......
  427c44:	feffefee 0000c0ee ffffff08 0090ffff     ................
  427c54:	ff8f0000 00f8ffff 08000000 80ffffff     ................
  427c64:	00000000 f8ff8f00 24000000 ff074444     ...........$DD..
  427c74:	42444470 c1ffffff ffff1d66 ffffffff     pDDB....f.......
  427c84:	ffef66fe ffffffff ffffffff ffffffff     .f..............
  427c94:	ffffffff ffc466ff ffffffdf ffffffff     .....f..........
  427ca4:	000000fd 00000000 00000000 44444404     .............DDD
  427cb4:	00004144 ff1e0000 ffffffff 000000f4     DA..............
  427cc4:	ffffff0b e1ffffff ff060000 00000050     ............P...
  427cd4:	00a0ff01 0090ff01 05000000 bf0050ff     .............P..
  427ce4:	000000d0 fe0a0000 00f36f10 00000000     .........o......
  427cf4:	0efa1e00 20ccccff ccbc0000 fffff2ef     ....... ........
  427d04:	0000faff ffffff6f ffffff4f ff8e88f8     ....o...O.......
  427d14:	fff4ffff ffffffff ffffffff ffff4fff     .............O..
  427d24:	ffffffff f4ffffff ffffffff ffffffff     ................
  427d34:	ff37ffff ffffffff ffffffff 000000a0     ..7.............
  427d44:	00406615 0000cb05 ffffff3b 00ff0792     .f@.....;.......
  427d54:	ffffff07 ff66ffff a4ff8f00 fdff5b12     ......f......[..
  427d64:	e4ff04ff 4e000000 ff0dffff 45000030     .......N....0..E
  427d74:	4fffff46 000000f7 ffffffdf 0000f18f     F..O............
  427d84:	ffffdf00 001002ff 22120000 00002122     ...........""!..
  427d94:	00000000 67000000 00757777 73060000     .......gwwu....s
  427da4:	feffffff 3f000000 eefffff6 000000fd     .......?........
  427db4:	fffff1cf 00000070 ffa0ff09 0020fbff     ....p......... .
  427dc4:	10febf02 fcff8dff e2ffcfa9 9f61ff00     ..............a.
  427dd4:	fbffffff 70ff0010 d9ee7c01 56000030     .......p.|..0..V
  427de4:	00000020 00000000 02000000 02000040      ...........@...
  427df4:	020000ef 0300f0ef ffdfffef ffffffff     ................
  427e04:	ffffffff ffffffff ffffffff ffffffff     ................
  427e14:	ffffffff dfbb7bff 0000f0ff 0000ffbf     .....{..........
  427e24:	00f0bf00 00be0000 00000000 02000000     ................
  427e34:	00000040 f02e0000 00000000 00f0ef02     @...............
  427e44:	3e000000 0000f0ff ffffffdf ff1007f0     ...>............
  427e54:	f0ffffff ffffd03f 08f0ffff fffffff5     ....?...........
  427e64:	f704f0ff ffffffff fff30df0 f0ffffff     ................
  427e74:	bb8b703f 00f0ffdf 0b000000 0000f0ff     ?p..............
  427e84:	bf000000 000000f0 e00b0000 00000000     ................
	...
  427ea0:	00000001 00000000 f6070000 00000000     ................
  427eb0:	00400200 00f82d00 02000000 400000ef     ..@..-.........@
  427ec0:	0000f41c f0ef0200 1eb05f00 030000e1     ........._......
  427ed0:	0000ffef 706fa0af ffffffdf bf1007f0     ......op........
  427ee0:	ff0ffd30 03ffffff 0af903fd fffffff0     0...............
  427ef0:	f507f0ff 2f8fc00e ffffffff dd704f00     ......./.....Op.
  427f00:	fffff307 1df0ffff 9fb00ff3 ffffff2f     ............/...
  427f10:	07f703ff 7bf00cf6 f0ffdfbb 12fe0300     .......{........
  427f20:	000000fa 0300ffbf 30af40ff bf000000     .........@.0....
  427f30:	303c00f0 0000a06f 00be0000 e16f0000     ..<0o.........o.
	...
  427f48:	0000d26f 00000000 90030000 bb3a0000     o.............:.
  427f58:	bbbbbbbb efa3bbbb ffffffff feffffff     ................
  427f68:	ff6ed5ff ffffffff 0420ffff ffffffff     ..n....... .....
  427f78:	00ffffff ffffff02 ffffffbf ffff0750     ............P...
  427f88:	ffff08f5 ffbffbff 8f0050ff cbffffff     .........P......
  427f98:	0000f5ff fcffff09 0050af00 ffff0400     ..........P.....
  427fa8:	000300c0 ff040000 000040ff 04000000     .........@......
  427fb8:	4474ffff 44444444 ffffff47 ffffffff     ..tDDDDDG.......
  427fc8:	6fffffff ffffffff f6ffffff 0000906b     ...o........k...
  427fd8:	e09fa203 f94f0000 0500e09f e09ffaff     ......O.........
  427fe8:	faff6f00 ff07e09f e09ffaff faffff8f     .o..............
  427ff8:	ffffe99f ff9ffaff faffffff ffffff9f     ................
  428008:	fe9ffaff faffffff ffdfe19f e09ffaff     ................
  428018:	faffff1c bf00e09f e09ffaff faff0a00     ................
  428028:	0000e09f e09ffa9f f6080000 00000000     ................
  428038:	703a0000 00000000 feef0000 00000050     ..:p........P...
  428048:	ffff0000 000020fb ffff0000 0000f8ff     ..... ..........
  428058:	ffff0000 00e6ffff ffff0000 c3ffffff     ................
  428068:	ffff0000 ffffffff ffff0091 ffffffff     ................
  428078:	ffff60fe ffffffff fffff7ff ffffffff     .`..............
  428088:	fffffaff ffffffff ffffe2ff ffffffff     ................
  428098:	ffff00f8 fbffffff ffff0020 40fdffff     ........ ......@
  4280a8:	ffff0000 0070ffff ffff0000 0000a1ff     ......p.........
  4280b8:	ffff0000 000000d3 e6af0000 00000000     ................
  4280c8:	00020000 00000000 bb3a0000 ab0310b9     ..........:.....
  4280d8:	ffef91bb ff0ea0ff fffffaff ff0fc0ff     ................
  4280e8:	fffffcff ff0fc0ff fffffcff ff0fc0ff     ................
  4280f8:	fffffcff ff0fc0ff fffffcff ff0fc0ff     ................
  428108:	fffffcff ff0fc0ff fffffcff ff0fc0ff     ................
  428118:	fffffcff ff0fc0ff fffffcff ff0fc0ff     ................
  428128:	fffffcff ff0fc0ff fffffcff ff0fc0ff     ................
  428138:	fffffcff ff0fc0ff fffffcff ff0fb0ff     ................
  428148:	ff7ffbff ff0740fe 0000e4ff 00000000     .....@..........
  428158:	bb3a0000 bbbbbbbb ffef91bb ffffffff     ..:.............
  428168:	fffffaff ffffffff fffffcff ffffffff     ................
  428178:	fffffcff ffffffff fffffcff ffffffff     ................
  428188:	fffffcff ffffffff fffffcff ffffffff     ................
  428198:	fffffcff ffffffff fffffcff ffffffff     ................
  4281a8:	fffffcff ffffffff fffffcff ffffffff     ................
  4281b8:	fffffcff ffffffff fffffcff ffffffff     ................
  4281c8:	fffffcff ffffffff ff7ffbff ffffffff     ................
  4281d8:	0000e4ff 00000000 204a0000 b40a0000     ..........J ....
  4281e8:	0000e3bf ffcff80f f80f0040 00f5ffcf     ........@.......
  4281f8:	ffcff80f f80f60ff f7ffffcf ffcff80f     .....`..........
  428208:	f89fffff ffffffcf ffcff8ff f8ffffff     ................
  428218:	ffffffcf ffcff8df f81ffcff b0ffffcf     ................
  428228:	ffcff80f f80f00fa 0080ffcf f7bff80f     ................
  428238:	f80f0000 0000607f 0000f70f 00000000     .....`..........
  428248:	02000000 000010ca 00000000 00c0ff2e     ................
  428258:	00000000 fbffef01 00000000 ffff1d00     ................
  428268:	0000a0ff ffcf0000 00f9ffff ff0b0000     ................
  428278:	ffffffff af000070 ffffffff 0800f6ff     ....p...........
  428288:	ffffffff 40ffffff ffffff0f ffffffff     .......@........
  428298:	ffff0ab0 ffffffff 340060ff 44444444     .........`.4DDDD
  4282a8:	03004244 77777777 10777777 ffffff0f     DB..wwwwwww.....
  4282b8:	ffffffff ffff0fb0 ffffffff ff0fc0ff     ................
  4282c8:	ffffffff 0cb0ffff ffffffff 70ffffff     ...............p
	...
  4282e4:	00004100 d09f0000 9f000000 000020ff     .A........... ..
  4282f4:	0050ff9f 50ff9f00 ff9f0000 9f000050     ..P....P....P...
  428304:	000050ff 0050ff9f d1ff0e00 3e000000     .P....P........>
  428314:	0000c1ff c1ff3e00 3e000000 0000c1ff     .....>.....>....
  428324:	c1ff3e00 3e000000 0000c0ff 20ff3e00     .>.....>.....>. 
  428334:	3c000000 00500060 9f000000 000000c1     ...<`.P.........
  428344:	00c1ff0e ff2e0000 000000c1 00c1ff2e     ................
  428354:	ff2e0000 000000c1 00c1ff2e ff2e0000     ................
  428364:	000000c0 0020ffaf 50ff9f00 ff9f0000     ...... ....P....
  428374:	9f000050 000050ff 0050ff9f 60ff9f00     P....P....P....`
  428384:	ff0e0000 00000060 0000503d 00000000     ....`...=P......
  428394:	00009139 00000000 0000f8cf 00000000     9...............
  4283a4:	0000f9df 00000000 0000f9df 00000000     ................
  4283b4:	0000f9df 00000000 0000f9df 77773600     .............6ww
  4283c4:	7777fcef ffffef61 ffffffff fffffffa     ..wwa...........
  4283d4:	ffffffff ffffaefb ffffffff 000000e6     ................
  4283e4:	0000f9df 00000000 0000f9df 00000000     ................
  4283f4:	0000f9df 00000000 0000f9df 00000000     ................
  428404:	0000f9df 00000000 0000f59f 00000000     ................
  428414:	00001001 66663600 66666666 ffffef61     .....6ffffffa...
  428424:	ffffffff fffffffa ffffffff ffffaffb     ................
  428434:	ffffffff 000000f6 40876803 00000000     .........h.@....
  428444:	ff8e0000 20f9ffff 04000000 2563fdef     ....... ......c%
  428454:	0070ffbf faff0700 7f000000 0600a0ff     ..p.............
  428464:	0800fdff ff9f20fc ffff02a0 fe8f0050     ..... ......P...
  428474:	60ffff12 16f2ffcf 0ef5ff7f ff1efeff     ...`............
  428484:	ffff12ff ffdf70ff f3ff6ff2 f3ffff0e     .....p...o......
  428494:	00fbff0f 4f90ffbf ff05f8ff df0110fe     .......O........
  4284a4:	842840ff 30ffef01 ffbf0100 ef040060     .@(....0....`...
  4284b4:	000030fd fbff6e00 00f9ffbe 00000000     .0...n..........
  4284c4:	ebffad05 00000071 0000104a 00000000     ....q...J.......
  4284d4:	0e000000 000030fe 00000000 5f000000     .....0........._
  4284e4:	150060ff 00007478 2d000000 ffdfa6ff     .`..xt.....-....
  4284f4:	00a2ffff 0a000000 32e8ffff 00f8ff5b     ...........2[...
  428504:	06000000 1000f6ff 00fbff06 03000000     ................
  428514:	d37ff8ef 00fbff09 01701e00 f2fffebf     ..........p.....
  428524:	00f7ff1f 00a0ff09 70ffff8f 00f1ffdf     ...........p....
  428534:	00d1ffcf 0cf9ff5f 0530ffff 0060ffff     ...._.....0...`.
  428544:	efb0ff2d 0a00b0ff 0000fcff ffefff0a     -...............
  428554:	0c0000e1 0000f6ff f3ffff06 0a000000     ................
  428564:	0010f8ff 00faef03 05000000 80cbffef     ................
  428574:	10fbbf01 00000000 70fedf5a 30fe8f00     ........Z..p...0
	...
  42858c:	30ff5f00 00000000 00000000 00e12d00     ._.0.........-..
	...
  4285a4:	00000100 01000000 000040cd 00000000     .........@......
  4285b4:	ff0a0000 000000e0 00000000 f8ff4f00     .............O..
	...
  4285cc:	10ffffdf 00000000 ff060000 00a0ffff     ................
  4285dc:	00000000 ffff0e00 0000f3ff 00000000     ................
  4285ec:	8f33fb8f 000000fc ff020000 ff6f00f9     ..3...........o.
  4285fc:	00000060 faff0a00 e0ff6f00 00000000     `........o......
  42860c:	00fbff4f 00f8ff7f df000000 8f00fcff     O...............
  42861c:	0010ffff ffff0600 ff9f00fd 0000a0ff     ................
  42862c:	ffffff0e ffffffcb 8f0000f3 00fcffff     ................
  42863c:	fcffff8f ffff0200 4f00f9ff 60ffffff     ...........O...`
  42864c:	ffffff0a ffcf42fe 0fe0ffff ffffffff     .....B..........
  42865c:	ffffffff ff09f3ff ffffffff ffffffff     ................
  42866c:	332300d0 33333333 00333333 00000000     ..#33333333.....
  42867c:	40010000 00000000 07000000 221200f9     ...@..........."
  42868c:	01000010 ff90ff29 0000e2ff f8ffff6f     ....).......o...
  42869c:	20feffff ffffff05 ffad9afd bdff5fd0     ... ........._..
  4286ac:	0000e2ff f9ff44cf 0020fe08 ff4f0400     .....D.... ...O.
  4286bc:	00d20490 ff030000 100000fa 3f000000     ...............?
  4286cc:	0691a1ff 020000f6 fc0cfbef ef60ff08     ..............`.
  4286dc:	1db0ffff f6ffffff 00fcffff ffffef02     ................
  4286ec:	b0ddddfe de2d0000 0000f5ff 00000000     ......-.........
  4286fc:	0050ff08 00000000 00f50600 00000000     ..P.............
	...
  428714:	00002004 00000000 0000e25f 05000000     . ......_.......
  428724:	0020feff 6f000000 00e3ffff ff060000     .. ....o........
  428734:	30fecffa ff6f0000 e3ff0c90 f9ff0600     ...0..o.........
  428744:	fecf0000 90ff5f30 ff0c0000 00f9afe2     ....0_..........
  428754:	cf000000 00801bf6 0b000000 00200390     .............. .
  428764:	03000000 00e26f20 5f000000 20feaff2     .... o....._... 
  428774:	ff050000 e3ff1cf6 ff5f0000 fecf0190     .........._.....
  428784:	f9ff0530 ff1c0000 90ff5fe3 cf010000     0........_......
  428794:	00f9ffff 1c000000 0090ffff 01000000     ................
  4287a4:	0000f9cf 00000000 0000901b 26000000     ...............&
	...
  4287bc:	ef020000 444400a0 00424444 ff3e0000     ......DDDDB...>.
  4287cc:	ffff04fa 00fdffff ffef0300 ffafa0ff     ................
  4287dc:	00feffff effd0e00 0000f8cf 00fe0500     ................
  4287ec:	dfe20b00 0000f567 00fe0500 df000000     ....g...........
  4287fc:	00000060 00fe0500 df000000 00000060     `...........`...
  42880c:	00fe0500 df000000 00000060 03fe1504     ........`.......
  42881c:	df000020 00000060 4ffed66f df0000f1      ...`...o..O....
  42882c:	41444494 ffffff3f df0000c0 ffffffff     .DDA?...........
  42883c:	fcffff24 9f000010 feffffff c0ff4f30     $...........0O..
	...
  428854:	00fc0400 00000000 00000000 00100000     ................
  428864:	88881700 00000084 ffcf0000 0050ffff     ..............P.
  428874:	ff000000 f6ffffff 30444444 ffffffff     ........DDD0....
  428884:	ffffffff fffffffa ffffffff ffffffff     ................
  428894:	ffffffff ffffffff ffffffff ffffffff     ................
  4288a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4288b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4288c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4288d4:	ffffffff ff7fffff ffffffff 00f6ffff     ................
  4288e4:	47000000 00000000 04000000 000090ff     ...G............
  4288f4:	00000000 00f9ff4f 00000000 ffffff04     ....O...........
  428904:	00000090 ffff4f00 0000f9ff ffff0400     .....O..........
  428914:	90ffffff ff0c0000 ffffffff 000000f1     ................
  428924:	f7ff2f11 00001011 ff1f0000 000000f6     ./..............
  428934:	1f000000 0000f6ff 00000000 00f6ff1f     ................
  428944:	00000000 f6ff1f00 24000000 ff1f4244     ...........$DB..
  428954:	424424f6 08fcffff ffcfa2bb ffffffff     .$DB............
  428964:	ff5a55a5 ffffffff ffffffff ffffffff     .UZ.............
  428974:	ffffffff ffc466ff ffffffdf ffffffff     .....f..........
  428984:	000000fd 00000000 00000000 00000000     ................
  428994:	0041b802 00000000 ff9f0000 000000fb     ..A.............
  4289a4:	1f000000 00f0ffff 00000000 feffff07     ................
  4289b4:	00000000 ffdf0000 0000c0ff 0c000000     ................
  4289c4:	00f9ffff 00000000 ffff0a00 00000050     ............P...
  4289d4:	0c000000 0000f1ff 00000000 00faff03     ................
  4289e4:	00000000 ffdf0000 00000020 af000000     ........ .......
  4289f4:	000090ff 0000a504 00d0ffaf f4ff7d00     .............}..
  428a04:	e2ffcf02 ffdf0000 ffffe9ff 0d0000f3     ................
  428a14:	ffffffff 0000e2ff ffff9f00 00a1ffff     ................
  428a24:	ff060000 40fcffff 00000000 83fdff2f     .......@..../...
  428a34:	00000000 20230000 00000000 00000000     ......# ........
  428a44:	00002035 1c000000 0000faff afa19c01     5 ..............
  428a54:	0060fffe eff9ff2e 03b0af60 efb0ffef     ..`.....`.......
  428a64:	3e90cf92 7f00faff ffe6ffff 0800a0ff     ...>............
  428a74:	ffffffff 000000fa ffffcf01 000000a0     ................
  428a84:	ffff3f00 00000010 ffffef36 1c0000d1     .?......6.......
  428a94:	ffffffff af0010fd dfc2fffe ef00d1ff     ................
  428aa4:	1ca0af60 ef20fdff 00a0cf92 7fe2ffcf     `..... .........
  428ab4:	0040ffff 08f9ff0b 0000e5ff 00505800     ..@..........XP.
  428ac4:	00000001 00000000 ffff6f00 000068f1     .........o...h..
  428ad4:	ffffaf00 00807ff1 ffffaf00 36f87ff1     ...............6
  428ae4:	ffffaf62 ff6636f1 ffffaff6 ff2222f6     b....6f......"".
  428af4:	ffffaff6 fffeffff ffffaff6 fffeffff     ................
  428b04:	ffffaff6 fffeffff ffffaff6 fffeffff     ................
  428b14:	ffffaff6 fffeffff ffffaff6 fffeffff     ................
  428b24:	ffffaff6 fffeffff ffffaff6 fffeffff     ................
  428b34:	ffffaff6 fffeffff ffff6ff7 fffaffff     .........o......
  428b44:	000030fe ff000000 ffffffff ef0000f1     .0..............
  428b54:	ffffffff 140000f0 44444444 05000020     ........DDDD ...
  428b64:	66666666 cf000064 ffffffff ff0090ff     ffffd...........
  428b74:	dddddded ff00f9ef 00000040 ff90ff0f     ........@.......
  428b84:	00000040 fff6ff0e 00000040 fff9ff0e     @.......@.......
  428b94:	00000040 fff9ff0f ffffffff fff9ffff     @...............
  428ba4:	ffffffff fff9ffff 7fc5ffff fff9ffff     ................
  428bb4:	0500feff fff9ffff 0100faff fff9ffff     ................
  428bc4:	0400fdff fff9ffff 4d93ffff fff9ffff     ...........M....
  428bd4:	ffffffff 8ff8ffff ffffffff 01e3ffff     ................
  428be4:	22222222 00002122 a0ffffaf ff0f0000     """""!..........
  428bf4:	0000fbff ffffff01 3f000060 00f1ffff     ........`..?....
  428c04:	ffff0500 000000fb a5ffff8f ff0a4055     ............U@..
  428c14:	ffffffff ffffcf30 0ec0ffff ffffffff     ....0...........
  428c24:	ffef00f3 00faffff ff232201 000010ff     ........."#.....
  428c34:	70ff4f00 08000000 0000e0ff f5cf0000     .O.p............
  428c44:	00000000 0000fc0f ff030000 00000030     ............0...
  428c54:	00907f00 07000000 000000e1 00000000     ................
  428c64:	00000000 00908d00 8b000000 bbfdfabc     ................
  428c74:	ff000090 ffcfd0ff ff0000f1 fffff8ff     ................
  428c84:	ff0000f1 ffffffff ff0000f1 0000f3ff     ................
  428c94:	ff000000 ffff95ff ff0079f1 ffff88ff     .........y......
  428ca4:	ffb07ff1 ffff88ff fffa7ff1 ffff88ff     ................
  428cb4:	ff2102f2 ffff88ff ffdcddff ffff88ff     ..!.............
  428cc4:	fffeffff ffff88ff fffeffff ffff88ff     ................
  428cd4:	7afeffff ffff58aa 00feffff ffff0800     ...z.X..........
  428ce4:	00feffff ffff0800 00feffff ffff0600     ................
  428cf4:	00fcffff 00000000 00000000 60080000     ...............`
  428d04:	00000000 f03f0000 00000000 facf0600     ......?.........
  428d14:	00000040 ffffcf01 000000f9 ffffff0c     @...............
  428d24:	000080ff ffffff5f 0000f1ff ffffff9f     ...._...........
  428d34:	0000f5ff ffffffbf 0000f7ff ffffffcf     ................
  428d44:	0000f8ff ffffffef 0200faff ffffffff     ................
  428d54:	0800feff ffffffff 3f40ffff ffffffff     ..........@?....
  428d64:	efd1ffff ffffffff affaffff ffffffff     ................
  428d74:	00f7ffff 00000000 00000000 ffff0400     ................
  428d84:	00000000 f7bf0000 00000000 10020000     ................
  428d94:	04000000 44444444 44444444 ffff0b41     ....DDDDDDDDA...
  428da4:	ffffffff e0ffffff ffffffff ffffffff     ................
  428db4:	f43fffff 002fd004 0ff003f3 5d40fff4     ..?.../.......@]
  428dc4:	400ff002 4fff004f ffffffff ffffffff     ...@O..O........
  428dd4:	fffff4ff a229b722 ffcf424f 0af0ff4f     ....".).OB..O...
  428de4:	f2027960 fff4ff0b dffeddff ffedeffd     `y..............
  428df4:	48f84fff 444444e4 f45ff447 004d40ff     .O.H.DDDG._..@M.
  428e04:	3e000000 f74fff00 4444e448 4ff44744     ...>..O.H.DDDG.O
  428e14:	fffffff4 ffffffff 37ffffff ffffffff     ...........7....
  428e24:	ffffffff 0000a0ff 00000000 00000000     ................
  428e34:	00000000 01000000 0000308b 00000000     .........0......
  428e44:	d0ffaf02 00000000 ffbf0300 0000d0ff     ................
  428e54:	cf050000 70ffffff 06000000 ffffffdf     .......p........
  428e64:	000000fe ffffef17 00f8ffff ffff2900     .............)..
  428e74:	ffffffff ff0700f1 ffffffff 0090ffff     ................
  428e84:	ffffff0f ffffffff ff0b0020 ffffffff     ........ .......
  428e94:	0000fbff 66665600 f3ffff7f 00000000     .....Vff........
  428ea4:	ff2f0000 0000c0ff 00000000 50ffff2f     ../........./..P
  428eb4:	00000000 ff2f0000 000000fd 00000000     ....../.........
  428ec4:	00f6ff2f 00000000 ff2f0000 000000e0     /........./.....
  428ed4:	00000000 0070ff1f 00000000 fd0c0000     ......p.........
	...
  428eec:	00003000 88580000 00068788 ffffff00     .0....X.........
  428efc:	00900ffe feffffff ff00f90f 0ffeffff     ................
  428f0c:	ffff90ff ff0ffeff fffffff5 212232ff     .............2"!
  428f1c:	ffffffff fff8ffff ffffffff fffff8ff     ................
  428f2c:	ffffffff fffffff8 f8ffffff ffffffff     ................
  428f3c:	fff8ffff ffffffff fffff8ff ffffffff     ................
  428f4c:	fffffff8 f8ffffff ffffffff fff8ffff     ................
  428f5c:	ffffffff fffff8ff ffffffff ffffeff8     ................
  428f6c:	f6ffffff 44444414 00304444 00000000     .....DDDDD0.....
	...
  428f84:	89360000 001074a9 00000000 ffffef29     ..6..t......)...
  428f94:	00c6ffff af010000 ffffffff 60feffff     ...............`
  428fa4:	ffff0600 464375fc b1ffff9e 71feff08     .....uCF.......q
  428fb4:	00000000 e2ffcf03 0010facf 00000000     ................
  428fc4:	40ff4e00 590000b6 20c7fede 00501b00     .N.@...Y... ..P.
  428fd4:	ffdf0500 a1ffffff 00000000 feffff09     ................
  428fe4:	e3ffffde 00000000 0040fcdf 50ff8f02     ..........@....P
  428ff4:	01000000 000000b6 00601b00 00000000     ..........`.....
  429004:	00350000 00000000 00000000 10fe7f00     ..5.............
	...
  42901c:	00f6ff0e 00000000 00000000 0050ffdf     ..............P.
  42902c:	00000000 04000000 0000b0ff 00000000     ................
  42903c:	00000000 00000010 44040000 44444444     ...........DDDDD
  42904c:	44444444 ffff0a10 ffffffff feffffff     DDDD............
  42905c:	ffffff10 ffffffff f5ffffff 0000f40f     ................
  42906c:	00000000 f3ff0000 ffff4aff ffffffff     .........J......
  42907c:	5fff0fff ffffaff4 ffffffff fff53ff0     ..._.........?..
  42908c:	ffffff4a ffffffff f45fef00 ffffffaf     J........._.....
  42909c:	f0ffffff 45fff58f 88888888 0f888888     .......E........
  4290ac:	44f75fff 44444444 ff454444 ffffffc1     ._.DDDDDDDE.....
  4290bc:	ffffffff f5ffffff ffffef06 ffffffff     ................
  4290cc:	00fbffff 44444404 44444444 0a104444     .....DDDDDDDDD..
  4290dc:	ffffffff ffffffff ff10feff ffffffff     ................
  4290ec:	ffffffff f40ff5ff 00000000 00000000     ................
  4290fc:	4dfff3ff ffffffff 0f0060ff dff45fff     ...M.....`..._..
  42910c:	ffffffff 3f0000f6 ff4dfff5 ffffffff     .......?..M.....
  42911c:	ef000060 ffdff45f f6ffffff f58f0000     `..._...........
  42912c:	888846ff 30888888 5fff0f00 444444f7     .F.....0..._.DDD
  42913c:	44444444 ffc1ff45 ffffffff ffffffff     DDDDE...........
  42914c:	ef06f5ff ffffffff ffffffff 440400fb     ...............D
  42915c:	44444444 44444444 ffff0a10 ffffffff     DDDDDDDD........
  42916c:	feffffff ffffff10 ffffffff f5ffffff     ................
  42917c:	0000f40f 00000000 f3ff0000 ffff4cff     .............L..
  42918c:	0000f1ff 5fff0f00 ffffcff4 000010ff     ......._........
  42919c:	fff53f00 ffffff4c 000000f1 f45fef00     .?..L........._.
  4291ac:	ffffffcf 00000010 46fff58f 80888888     ...........F....
  4291bc:	0f000000 44f75fff 44444444 ff454444     ....._.DDDDDDDE.
  4291cc:	ffffffc1 ffffffff f5ffffff ffffef06     ................
  4291dc:	ffffffff 00fbffff 44444404 44444444     .........DDDDDDD
  4291ec:	0a104444 ffffffff ffffffff ff10feff     DD..............
  4291fc:	ffffffff ffffffff f40ff5ff 00000000     ................
  42920c:	00000000 49fff3ff 0000feff 0f000000     .......I........
  42921c:	9ff45fff 0000e0ff 3f000000 ff49fff5     ._.........?..I.
  42922c:	000000fe ef000000 ff9ff45f 000000e0     ........_.......
  42923c:	f58f0000 878844ff 00000000 5fff0f00     .....D........._
  42924c:	444444f7 44444444 ffc1ff45 ffffffff     .DDDDDDDE.......
  42925c:	ffffffff ef06f5ff ffffffff ffffffff     ................
  42926c:	440400fb 44444444 44444444 ffff0a10     ...DDDDDDDDD....
  42927c:	ffffffff feffffff ffffff10 ffffffff     ................
  42928c:	f5ffffff 0000f40f 00000000 f3ff0000     ................
  42929c:	000040ff 00000000 5fff0f00 000000f4     .@........._....
  4292ac:	00000000 fff53f00 00000040 00000000     .....?..@.......
  4292bc:	f45fef00 00000000 00000000 40fff58f     .._............@
  4292cc:	00000000 0f000000 44f75fff 44444444     ........._.DDDDD
  4292dc:	ff454444 ffffffc1 ffffffff f5ffffff     DDE.............
  4292ec:	ffffef06 ffffffff 00fbffff 00000000     ................
  4292fc:	10780000 00000000 00000000 00fd9f26     ..x.........&...
  42930c:	00000000 4f000000 00f0ffef 00000000     .......O........
  42931c:	800e0000 0000f72e 20000000 00e00600     ........... ....
  42932c:	00000000 e3ef0300 0000d700 a1020000     ................
  42933c:	d4ffcf00 5555559f f77f5555 ffffff0f     .....UUUUU......
  42934c:	ffffffff f5ffffff 00a0ffaf 0000b00b     ................
  42935c:	00b23f00 0000909c 0000303f 00005001     .?......?0...P..
  42936c:	00000000 b5bb02bb 00000000 02000000     ................
  42937c:	80ff9ff9 00000000 03000000 00f8ffbd     ................
	...
  429394:	0080ff3f 00000000 00000000 00000000     ?...............
  4293a4:	7b010000 0020b8dd dfff5f00 0400f6ff     ...{.. .._......
  4293b4:	ff68ffff ff0e40ff ff9f60ff ffff4fd0     ..h..@...`...O..
  4293c4:	f3ff0960 61bff68f bff79fc0 e2600bf6     `......a......`.
  4293d4:	ffdff95f ff332050 f5ffeffb fcff2e00     _...P 3.........
  4293e4:	00fcffef dffcff7f 0900d1ff fccffcff     ................
  4293f4:	af905014 4ff2affb f92ff360 70fffd6f     .P.....O`./.o..p
  429404:	1ff6ef52 2e70ffff ff09f1ff ffef72ff     R.....p......r..
  429414:	ffbf0090 10fdffae ffcf0500 000080fd     ................
  429424:	00110000 00000000 30888805 66560000     ...........0..Vf
  429434:	e6ffff7f ffff6366 ffffffff ddcdfbff     ....fc..........
  429444:	dddddddd 4403d8dd 44444444 ff0e2044     .......DDDDDD ..
  429454:	ffffffff ff0ea0ff ffffffff ff0ea0ff     ................
  429464:	c4aff61f ff0ea0ff b39ff50f ff0ea0ff     ................
  429474:	b39ff50f ff0ea0ff b39ff50f ff0ea0ff     ................
  429484:	b39ff50f ff0ea0ff b39ff50f ff0ea0ff     ................
  429494:	b39ff50f ff0ea0ff b39ff50f ff0ea0ff     ................
  4294a4:	c4aff61f ff0da0ff ffffffff ff0890ff     ................
  4294b4:	ffffffff 240040ff 44444444 00000031     .....@.$DDDD1...
  4294c4:	00000000 00308a00 00000000 ffbf0000     ......0.........
  4294d4:	00000030 bf000000 0030ffff 00000000     0.........0.....
  4294e4:	fdffff34 00000000 ff44bf00 0000e0ff     4.........D.....
  4294f4:	ffbf0000 00f4ff44 bf000000 f444ffff     ....D.........D.
  429504:	00000000 ffffffbf 00000041 ffffbf00     ........A.......
  429514:	0000f4ff ffbf0000 00f4ffff bf000000     ................
  429524:	f4ffffff 00000000 ffffffbf 000000f4     ................
  429534:	ffffbf00 0000f4ff ff8f0000 00f4ffff     ................
  429544:	0a000000 f4ffffff 00000000 ffffcf00     ................
  429554:	000000f4 ff0e0000 0000f4ff 00000000     ................
  429564:	00d4ffff 00000000 00310200 00000000     ..........1.....
  429574:	00000000 88570000 88888888 00007288     ......W......r..
  429584:	ffffaf00 ffffffff 0000f2ff ffffffbf     ................
  429594:	ffffffff bf0070ff aff8ffff ffffa8ff     .....p..........
  4295a4:	ffbf00f8 af00faff ffff0aa0 ffffbf80     ................
  4295b4:	6000f3ff f8ffff03 ffffffaf 0300f3ff     ...`............
  4295c4:	8effffff ffffffff 9f0090ff 4ff8ffff     ...............O
  4295d4:	ffffffff af0000a0 4f80ffff b0ffffff     ...........O....
  4295e4:	bf00e303 4f00f8ff 23feffff ff2ef3ff     .......O...#....
  4295f4:	4f0080ff fffeffff fffffeff 4f0000f7     ...O...........O
  429604:	ffffffff ffffffff 3d000050 ffffffff     ........P..=....
  429614:	90ffffff ffcf0100 0060feff ffffff1c     ..........`.....
  429624:	cf00f2ff 4fd8f447 03ff0cf5 f50ec5e0     ....G..O........
  429634:	e003ffcf fff50ec5 c6e224ff fffff52e     .........$......
  429644:	ffffffff fffffff5 f5ffffff ffffffff     ................
  429654:	fff5ffff ffffffff fffff5ff ffffffff     ................
  429664:	fffffff5 f5ffffff ffffffff fff5ffff     ................
  429674:	ffffffff fffff5ff ffffffff fffffff5     ................
  429684:	f5ffffff ffffffef 5ff3ffff ffffffff     ..........._....
  429694:	3401a0ff 42444444 00000000 00000000     ...4DDDB........
  4296a4:	00000300 00000000 f1050000 00000000     ................
  4296b4:	05000000 3e0010ff 00000090 00f1bf00     .......>........
  4296c4:	0000fb4f ff0b0000 b0ff5f10 00000000     O........_......
  4296d4:	ff6ff1bf ffffffff 1dffffff ffffffff     ..o.............
  4296e4:	ffffffff feff3ef1 cccccccc 2e00cacc     .....>..........
  4296f4:	0000b0ff 00000000 00fb1d00 00000000     ................
  429704:	1b000000 00000060 00000000              ....`.......

00429710 <kern_class_values>:
  429710:	00000100 00000000 00000100 00000003     ................
  429720:	00000200 00000000 00000000 00000000     ................
  429730:	00010000 00000000 00000000 00000000     ................
  429740:	000d0100 0000fa08 eff00000 05060e02     ................
  429750:	010e02f4 0009030c 00000000 00000000     ................
  429760:	02110000 000000fe 00000000 00000000     ................
  429770:	f7000600 00000000 0605fa00 00fd0000     ................
  429780:	fd0003fe fafffd00 00000000 fc0000fd     ................
  429790:	fd0000fc 0000fa00 00000000 fd000000     ................
  4297a0:	00fc00fd 00dd00f8 0600fa00 fa000009     ................
  4297b0:	060a0303 000006fb 000000f0 00000000     ................
  4297c0:	00000000 000000f5 00000000 00000000     ................
  4297d0:	f8000000 f400f2fd 000000fe 000b0100     ................
  4297e0:	01fffef7 0000fb00 0000ebfe 00000000     ................
  4297f0:	00000000 0bfee900 00000000 00000000     ................
  429800:	00000000 000000f4 00000000 0a000000     ................
  429810:	00000300 000000fa 00000000 00000000     ................
  429820:	00000000 020b0000 00000001 00000000     ................
	...
  429850:	000000f5 00000000 00000000 00000000     ................
  429860:	00000000 02000000 fd090306 fd060000     ................
  429870:	0802d9f6 00fc0106 0009000a 00e50009     ................
  429880:	0a0009fd 000306fd 00fd0100 0017fb00     ................
  429890:	00090017 0905040c f5000000 00000000     ................
  4298a0:	0200fe01 02fafcfb 0000fd00 0000f400     ................
	...
  4298b8:	0000ed00 00000000 00000000 00000000     ................
  4298c8:	00f00100 000000ee 1d00fe00 0303fcfd     ................
  4298d8:	03fc00fd 00f10000 00000000 00000000     ................
  4298e8:	00e40000 00000003 00000000 00000000     ................
  4298f8:	1100ee00 00f50000 e4ec000a 0009faec     ................
  429908:	0300ed00 00fc00f9 00000000 00000000     ................
  429918:	07000000 0000dd09 00000000 00000000     ................
  429928:	000e0000 00000002 02020000 ff00fafd     ................
  429938:	0000fdff 000000fe 00fe00fa f900faf9     ................
  429948:	00fbf6f6 00fa00fa fe000000 00030000     ................
  429958:	0100fd02 03000000 000000fe ff0303fe     ................
  429968:	fb000000 0000ff00 01000000 00fe0400     ................
  429978:	00fb00fd 0900fe00 00fd0000 00000000     ................
  429988:	fefe01ff 00fd0000 000000fd 00000000     ................
  429998:	ffff0000 00fdfd00 00000000 fe000001     ................
  4299a8:	fdfdfd00 00000000 00000000 0000fe00     ................
  4299b8:	fcfe0000 f700fc00 0006f7fe 0603fa00     ................
  4299c8:	fff90008 f2ff00fd f102fe03 01000003     ................
  4299d8:	fef100f1 f200fee7 00080600 00000004     ................
  4299e8:	fb000100 00f700fc 00fd0000 00fd0000     ................
  4299f8:	00000000 ff00ffff 000000fc 00000000     ................
  429a08:	fe00fdfd 0000fefd 000000fd 00000000     ................
  429a18:	00000000 fd00fefe fa00fe00 fd000003     ................
  429a28:	00030301 00000000 0000fe00 02000000     ................
  429a38:	00fd0000 00fdfefd 00000000 00020000     ................
  429a48:	000000fe 00fcfd00 fe0900fb 0000f701     ................
  429a58:	f4f1f208 fe0003fa fb00fbed fb04fa00     ................
  429a68:	00f800ee 02ff0100 000300fe f200f5f7     ................
  429a78:	f7f9faf9 fbfff8fd 010002f8 0000fd00     ................
  429a88:	03000200 00000000 00000000 fd000000     ................
  429a98:	ff00ff00 fafb00fd f700fffa 00000000     ................
  429aa8:	00fe0000 01000000 000000fe 00000003     ................
  429ab8:	00000000 00000e00 00000000 00000002     ................
  429ac8:	000000fd 00000000 00000000 000300fb     ................
	...
  429ae4:	000000fe 000000fb 00f7f200 f2fc0000     ................
  429af4:	03fd0000 0000f800 00000000 00000000     ................
  429b04:	fb0000fb 00000000 00000000 00000000     ................
  429b14:	00fb0003 03000000 fafa0200 fdfdfd00     ................
  429b24:	00000000 00f70000 fdfc00fd f7f9fa00     ................
  429b34:	00fa00fe 000000f7 00001700 fc000001     ................
  429b44:	f4000300 00000000 0afbe500 00f4fe09     ................
  429b54:	f200fc03 ec03fcff 040004fd f6f5fcf6     ................
  429b64:	ef0000f4 00001000 000000ff f8fdffff     ................
  429b74:	00e5fff6 00000000 00000000 00000001     ................
	...
  429b90:	ff00fd00 0000fcfd 00fd00fa 00000000     ................
	...
  429ba8:	00ff0000 060000fa fa0004ff f9fffe03     ................
  429bb8:	fdfc00fd fbfc00fe fffe0000 00fdfbfe     ................
  429bc8:	0300fd00 00fa00fe 00fa0000 fbfb00fb     ................
  429bd8:	00000003 00000000 0003fa00 fdfe00fc     ................
  429be8:	fefefef7 fffdfeff 00000000 fefefd00     ................
  429bf8:	00000000 fe00fe03 fe000000 fdfdfefd     ................
  429c08:	0c0200fd 00f800ff fd0006fe 0004fcf4     ................
  429c18:	03fbf200 fe0002fb fc00f7fe fb000001     ................
  429c28:	03000000 00fbfa03 fdfcfdfb 01fb00fd     ................
  429c38:	0009fbfb 00000000 00000000 00000003     ................
	...
  429c5c:	000000fb 00000000 00000000 00000000     ................
	...
  429c88:	000000fe 00000000 00000000 00000000     ................
	...
  429ca4:	fdfe0000 00000000 00000000 00000000     ................
  429cb4:	fc0000fc fdfd0000 00000000 000000fd     ................
  429cc4:	0000ff00 fe000000 00000000 00fa00fc     ................
  429cd4:	00f60000 0106fa02 0000f2fe f400fdfa     ................
  429ce4:	0000f8f9 f5f4fdf4 00f900f2 00fc1302     ................
  429cf4:	fdfffdf9 f5fbf8fb 00fdf9f4 0100fe00     ................
  429d04:	fdec0000 f5fa0609 00f70100 06fdfef2     ................
  429d14:	0001fce6 f1fded00 0000ebfd 011100ec     ................
  429d24:	0000fe00 feff0000 ed00fef5 00000000     ................
  429d34:	00fd00f7 00f2f8ff f7fcff00 00fe00fd     ................
  429d44:	f3000000 fef7f6fd fbfdf9fb f6fdfa00     ................
  429d54:	fbfd00fc 0100fbfd 00f6fe00 00fb0006     ................
  429d64:	03000000 0cfa0200 fdfdfd00 00000000     ................
  429d74:	00f70000 fdfc00fd f7f9fa00 02fa00fe     ................
  429d84:	0000000c 00001700 fc000001 00000300     ................
  429d94:	00000000 00ff0000 00000000 0000fafe     ................
  429da4:	ff000000 fd000000 fa0000fd fa0000fd     ................
  429db4:	00ff0500 00000000 00000100 06040000     ................
  429dc4:	f700fd02 f60900fb 0cfafaf7 fee70305     ................
  429dd4:	fd00fd06 00f6fd03 fefc03fd 0000fef7     ................
  429de4:	f8000609 08fcf000 fc01f5fc 0cfdf6f6     ................
  429df4:	00fc0003 0a0200f8 f9f4f5f9 eb010009     ................
  429e04:	fefb03fe f5fa00f9 00fefcfc fdfaf900     ................
  429e14:	fd070900 fcf000f0 ffeff600 f8f6fbf7     ................
  429e24:	fc000008 00fdfa00 0500fbfd 000003f6     ................
  429e34:	fafd00f1 f9f7fefb f700f9f6 f7fbf9fd     ................
  429e44:	010000fd f700fb0e fafd00fd f5f8f8f9     ................
  429e54:	0006fafc fdf200fc f5f70602 fd0af6fa     ................
  429e64:	06fbe501 00f5fbfa fdfdf4f7 f7fafdfe     ................
  429e74:	090000ff 00edfe08 f507f9ef f4f6faec     ................
  429e84:	0006f6f2 fd000000 fd030000 06fb0206     ................
  429e94:	fff70000 0100ff00 0000fe01 00000000     ................
  429ea4:	000000fd 01090200 0000fd00 fefe0000     ................
  429eb4:	000000fd 00000201 00020000 000b00fe     ................
  429ec4:	fc010105 00000600 00000200 00000000     ................
  429ed4:	00000000 08000900 00000000 00000000     ................
  429ee4:	00000000 00ef0000 090005fd 031d0000     ................
  429ef4:	0303fafa 00f201fe 00ef0e00 00000000     ................
  429f04:	00000000 0bec0000 00000028 00000000     ........(.......
  429f14:	00000000 0000ef00 00000000 00000000     ................
	...
  429f34:	fb0000fb 000000fd 00000000 00000000     ................
	...
  429f4c:	00f800fe 00000100 fefa2503 03f80809     .........%......
  429f5c:	03030000 000000fc 00000000 00000000     ................
  429f6c:	000008db 00000000 00000000 00000000     ................
  429f7c:	f8000000 f8000000 00000000 0000fffa     ................
  429f8c:	fd00fa00 0000f200 00000000 00000000     ................
  429f9c:	0000ed00 00010000 00000000 0000fd00     ................
  429fac:	00fc00fb 000000f8 00fd03fb f9fdf800     ................
  429fbc:	00f80000 00f200fd e90000fd f6fdf4fb     ................
  429fcc:	00ed0000 0000fff8 00000000 fbfc0000     ................
  429fdc:	0000fbfe 00fa0000 06fd04fa fef9fe00     ................
  429fec:	fd00fbfb f802feff 000000ff 00fcfee7     ................
  429ffc:	f2fe00fa fe0000fd 000000fe fe000200     ................
  42a00c:	0005fefb 00000000 00000000 00000000     ................
	...
  42a038:	00040000 00000000 fe00fa00 fa000000     ................
  42a048:	00000003 00fafdf8 fd00f800 0000f200     ................
  42a058:	00e40000 00f2f5fa fe00ed00 000000fc     ................
  42a068:	00000000 fffcfd00 000001fc 0900fc05     ................
  42a078:	f7fdfd0e 06050e03 030c03f8 00080608     ................
	...
  42a090:	0e120000 fe00fdfb 00170c17 00030000     ................
  42a0a0:	00000b00 000000fb 00000000 00fe0000     ................
  42a0b0:	00000000 04000000 00000000 f4fefde8     ................
  42a0c0:	ed0000f2 00000000 00000000 00000000     ................
  42a0d0:	00000000 0000fb00 00000000 fe000000     ................
	...
  42a0e8:	00000004 fefde800 0000f2f4 000000f4     ................
	...
  42a108:	000000fe fd0003f9 f7030502 03feff00     ................
  42a118:	00000200 00f90000 00fafefd 1200f4fd     ................
  42a128:	fefa00fd 00fbfe00 fdfaf8fd fb000000     ................
	...
  42a140:	0000fe00 00000000 00040000 e8000000     ................
  42a150:	f2f4fefd 00ed0000 00000000 00000e00     ................
	...
  42a168:	fdf700fb fdfd09fd 01fe01f4 0601f8fe     ................
  42a178:	02010201 00fdf4f9 f4f8fbf5 fafb00f5     ................
  42a188:	fefefcfd fe00fefd 040004ff 000900fe     ................
	...
  42a1a0:	fe000000 0000fdfd 00ff00f8 000000fb     ................
	...
  42a1b8:	000000ef 00000000 00000000 fc00fdfd     ................
  42a1c8:	00000000 fb0000fe fb0003fd f800fefb     ................
  42a1d8:	fdfefafe 0000fb00 00000000 00000000     ................
  42a1e8:	0900ed00 00fb0000 fc000000 0000fd00     ................
  42a1f8:	fe0000ff 0000f900 f7f6fc0c ff030302     ................
  42a208:	020402f8 fe0a0209 f40000f8 f8f70000     ................
  42a218:	00fa0000 fc00fbfc fe00fc00 f7fe0004     ................
  42a228:	00000bfd 00fa00fd 00f90400 0002fd03     ................
  42a238:	fe00f600 03fd00ff 000000fe 00fafdf4     ................
  42a248:	f20000f7 00fd0b00 000200fb f7fd00fd     ................
  42a258:	0003fd00 fe000000 fc030000 fd000001     ................
  42a268:	00fd00fe 00000000 00000000 00000000     ................
  42a278:	00000000 000600ee 0000fe00 00010000     ................
  42a288:	0000fdfd 07000600 00000000 01f0ee00     ................
  42a298:	f405090c 0b000c02 00000600 00000000     ................
  42a2a8:	00000000 00000f00 00000000 00000000     ................
	...

0042a2c0 <kern_classes>:
  42a2c0:	00429710 0042a2d0 0042a36c 0000313d     ..B...B.l.B.=1..

0042a2d0 <kern_left_class_mapping>:
  42a2d0:	02010000 05040300 08070602 0a090a09     ................
  42a2e0:	0d000c0b 11100f0e 140c1312 00000014     ................
  42a2f0:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
  42a300:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
  42a310:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
  42a320:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
  42a330:	0000093d 00000000 00000000 00000000     =...............
	...

0042a36c <kern_right_class_mapping>:
  42a36c:	02010000 05040300 08070602 0a090a09     ................
  42a37c:	0e0d0c0b 0c11100f 15141312 00000015     ................
  42a38c:	19181716 19191917 1a191917 19191919     ................
  42a39c:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
  42a3ac:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
  42a3bc:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
  42a3cc:	00000931 00000000 00000000 00000000     1...............
	...

0042a408 <unicode_list_1>:
  42a408:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
  42a418:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
  42a428:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
  42a438:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
  42a448:	efc9efc8 efe3efcb f014efe5 f017f015     ................
  42a458:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
  42a468:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
  42a478:	f712f4aa 0000f7f2                       ........

0042a480 <cmaps>:
  42a480:	00000020 0001005f 00000000 00000000      ..._...........
  42a490:	00020000 000000b0 0060f7f3 004304f0     ..........`...C.
  42a4a0:	00000000 0003003b                       ....;...

0042a4a8 <glyph_dsc>:
	...
  42a4b0:	05f00000 00000000 05e00000 00011004     ................
  42a4c0:	08a00020 09010707 0f700039 0000100f      .......9.p.....
  42a4d0:	0db000b1 fd00160d 12900140 00001012     ........@.......
  42a4e0:	0f1001d0 ff00110f 04a00250 09010703     ........P.......
  42a4f0:	0770025b fc021505 07700290 fc001506     [.p.......p.....
  42a500:	08d002cf 08000909 0cd002f8 03010a0b     ................
  42a510:	0500032f fd010703 0870033a 05010207     /.......:.p.....
  42a520:	05000341 00010403 07c00347 feff150a     A.......G.......
  42a530:	0eb003b0 0001100d 08200418 00001006     .......... .....
  42a540:	0ca00448 0000100c 0c9004a8 0000100c     H...............
  42a550:	0eb00508 0000100f 0ca00580 0000100c     ................
  42a560:	0d9005e0 0001100c 0d200640 0000100d     ........@. .....
  42a570:	0e3006a8 0000100e 0d900718 0000100d     ..0.............
  42a580:	05000780 00010c03 05000792 fc011003     ................
  42a590:	0cd007aa 02010b0b 0cd007e7 0401070b     ................
  42a5a0:	0cd0080e 02010b0b 0ca0084b 0000100c     ........K.......
  42a5b0:	16c008ab fc011415 1020097d 00ff1012     ........}. .....
  42a5c0:	10a00a0d 0002100e 0fe00a7d 0001100f     ........}.......
  42a5d0:	12300af5 00021010 0ec00b75 0002100c     ..0.....u.......
  42a5e0:	0e000bd5 0002100c 11000c35 0001100f     ........5.......
  42a5f0:	11e00cad 0002100e 06d00d1d 00021003     ................
  42a600:	0b500d35 00ff100b 0fd00d8d 0002100e     5.P.............
  42a610:	0d100dfd 0002100b 15000e55 00021011     ........U.......
  42a620:	11e00edd 0002100e 12800f4d 00011011     ........M.......
  42a630:	0fe00fd5 0002100d 1280103d fd011312     ........=.......
  42a640:	100010e8 0002100d 0db01150 0000100d     ........P.......
  42a650:	0cf011b8 0000100d 11601220 0002100e     ........ .`.....
  42a660:	0fb01290 00ff1011 18c01318 00001019     ................
  42a670:	0ed013e0 0000100f 0e401458 00ff1010     ........X.@.....
  42a680:	0e7014d8 0000100e 07501548 fc021505     ..p.....H.P.....
  42a690:	07c0157d feff150a 075015e6 fc001506     }.........P.....
  42a6a0:	0cd01625 03010a0b 0b00165c fe00030b     %.......\.......
  42a6b0:	0d30166d 0e020307 0d201678 00010c0b     m.0.....x. .....
  42a6c0:	0f0016ba 0002110d 0c901729 00000c0c     ........).......
  42a6d0:	0f001771 0000110d 0d7017e0 00000c0d     q.........p.....
  42a6e0:	07c0182e 00001109 0f30187b fc00100e     ........{.0.....
  42a6f0:	0f0018eb 0002110c 06201951 00011104     ........Q. .....
  42a700:	06401973 fcfd1508 0d9019c7 0002110c     s.@.............
  42a710:	06201a2d 00021103 17401a47 00020c14     -. .....G.@.....
  42a720:	0f001abf 00020c0c 0e001b07 00000c0e     ................
  42a730:	0f001b5b fc02100d 0f001bc3 fc00100d     [...............
  42a740:	09001c2b 00020c07 0b001c55 00000c0b     +.......U.......
  42a750:	09201c97 00000f09 0ee01cdb 00010c0c     .. .............
  42a760:	0c501d23 00ff0c0e 13c01d77 00000c14     #.P.....w.......
  42a770:	0c201def 00000c0c 0c501e37 fcff100e     .. .....7.P.....
  42a780:	0b701ea7 00000c0b 07c01ee9 fc011507     ..p.............
  42a790:	06901f33 fc021503 07c01f53 fc001507     3.......S.......
  42a7a0:	0cd01f9d 0601040b 09301fb3 08000809     ..........0.....
  42a7b0:	06f01fd7 04010505 16001fe4 fdff1717     ................
  42a7c0:	160020ed 00001116 160021a8 fe001416     . .......!......
  42a7d0:	16002284 00001116 0f20233f 00001010     ."......?# .....
  42a7e0:	160023bf fd001716 160024bc fd001716     .#.......$......
  42a7f0:	18c025b9 fe001419 160026b3 fd001716     .%.......&......
  42a800:	18c027b0 00001119 16002885 fd001716     .'.......(......
  42a810:	0b002982 ff00120b 108029e5 ff001211     .).......)......
  42a820:	18c02a7e fd001619 16002b91 00001116     ~*.......+......
  42a830:	13402c4c fe02150f 13402cea fc001814     L,@......,@.....
  42a840:	13402dda fe001414 13402ea2 fe001414     .-@.......@.....
  42a850:	13402f6a fe02150f 13403008 feff1415     j/@......0@.....
  42a860:	0dc030da fe01140c 0dc03152 fe01140c     .0......R1......
  42a870:	134031ca fe001414 13403292 06000514     .1@......2@.....
  42a880:	18c032c4 00001119 1b803399 fd00171c     .2.......3......
  42a890:	18c034db fdff171b 16003612 fe001516     .4.......6......
  42a8a0:	134036f9 02000c13 1340376b 02000c13     .6@.....k7@.....
  42a8b0:	1b8037dd ff00121c 160038d9 00001116     .7.......8......
  42a8c0:	16003994 fd001716 16003a91 fdff1717     .9.......:......
  42a8d0:	13403b9a fe001414 13403c62 fd001714     .;@.....b<@.....
  42a8e0:	13403d48 fe001414 0dc03e10 fdff170f     H=@......>......
  42a8f0:	13403ebd fd001714 13403fa3 fd001714     .>@......?@.....
  42a900:	18c04089 00001119 1600415e fdff1718     .@......^A......
  42a910:	10804272 fd001711 1b804336 fe00151c     rB......6C......
  42a920:	1b80445c 01000f1c 1b80452e 01000f1c     \D.......E......
  42a930:	1b804600 01000f1c 1b8046d2 01000f1c     .F.......F......
  42a940:	1b8047a4 01000f1c 1b804876 ff00121c     .G......vH......
  42a950:	13404972 fd011711 13404a36 fd001714     rI@.....6J@.....
  42a960:	16004b1c fdff1717 1b804c25 0000111c     .K......%L......
  42a970:	10804d13 fd001711 16204dd7 01000e17     .M.......M .....

0042a980 <gylph_bitmap>:
  42a980:	f23ff24f f12ff13f f01ff01f e00ff00f     O.?.?./.........
  42a990:	d00fd00f 0000900a b01b0000 d12df56f     ............o.-.
  42a9a0:	399f309f 8ff209f3 f2289f20 108ff208     .0.9.... .(.....
  42a9b0:	08f1178f 000000f1 0f000000 404f0090     ..............O@
  42a9c0:	f7010000 00f20600 503f0000 00008f00     ..........?P....
  42a9d0:	00f30500 0b00e00a ffffffff 7ae0ffff     ...............z
  42a9e0:	afaafaad 0000a8da f80000bd 0d000000     ................
  42a9f0:	602f00b0 f9000000 00f50300 701f0000     ../`...........p
  42aa00:	00305f00 aafcab4a 16aafaac ffffffff     ._0.J...........
  42aa10:	00f2ffff 0b00f206 000000d0 db00008f     ................
  42aa20:	0a000000 900f00e0 cc000000 00f70100     ................
  42aa30:	00000000 00000065 a00c0000 00000000     ....e...........
  42aa40:	0000ca00 ef3a0000 0010c7fe ffffff7f     ......:.........
  42aa50:	f83f00fe a04aa01c ca00fa09 bf000000     ..?...J.........
  42aa60:	00a00c70 00fd0900 000000ca a07dfe2f     p.........../.}.
  42aa70:	4e000000 0094feff bf060000 0030fdff     ...N..........0.
  42aa80:	9fcc0000 000020ff f91da00c ca000000     ..... ..........
  42aa90:	42b07f00 09a00c00 20f80dfa 40ff17ca     ...B....... ...@
  42aaa0:	ffffff8f 280080ff 40eaffcf 0c000000     .......(...@....
  42aab0:	000000a0 00ca0000 00000000 00005006     .............P..
  42aac0:	40fd6d00 f10a0000 5af80600 4f0000f3     .m.@.......Z...O
  42aad0:	900e0060 0000cb00 1f0000eb 008e0050     `...........P...
  42aae0:	0000f109 7e00402f 00604f00 00800f00     ..../@.~.O`.....
  42aaf0:	00ec00bc f5080000 f209f516 00000000     ................
  42ab00:	3f80ffaf 20fb9f70 00310100 5df609dc     ...?p.. ..1....]
  42ab10:	000000d0 601ff208 0000f602 4f703f00     .......`.....?pO
  42ab20:	00d90010 00dc0000 bb00006f f2080000     ........o.......
  42ab30:	00104f00 3f0000c9 501f0080 0000f501     .O.....?...P....
  42ab40:	080000dd 00d03ce5 0000f308 10fb8e00     .....<..........
  42ab50:	ee4c0000 000000c4 affa7f00 000000f5     ..L.............
  42ab60:	2f00f20f 010000c0 fd0000fe 0f000000     .../............
  42ab70:	906f00f2 8f000000 00e18fc1 cf000000     ..o.............
  42ab80:	0000c1ff ff2c0000 000000d0 dff84f00     ......,......O..
  42ab90:	006300a0 df01f43f 0be00ea0 df0100f6     ..c.?...........
  42aba0:	ff00f9a4 df010010 f40e30ff ef010000     .........0......
  42abb0:	e39f00d0 ffaf0200 fecf01a0 dfc3ffce     ................
  42abc0:	ef6b0080 c20150eb 00000000 00000000     ..k..P..........
  42abd0:	8ff3399f 178ff228 000000f1 f01f708f     .9..(........p..
  42abe0:	df00f808 06e02f30 808f00fa cf00f50b     ....0/..........
  42abf0:	00f30d40 f30d20ef 0b40cf00 708f00f5     @.... ....@....p
  42ac00:	2f00fa05 30df00e0 1f00f807 708f00f0     .../...0.......p
  42ac10:	0900e01f fe0200f7 40cf0000 00907f00     ...........@....
  42ac20:	1f00c04f f20e00f0 00f30d00 0b00f40c     O...............
  42ac30:	f40c00f5 00f30d00 1f00f20e c03f00f0     ..............?.
  42ac40:	00907f00 fe0240cf 00f70900 0000e01f     .....@..........
  42ac50:	0000f004 50004f40 dff4b65f fcff4d20     ....@O.P_... M..
  42ac60:	ff8f0030 afef0460 132ac2af 00003bf0     0...`.....*..;..
  42ac70:	0000004f 00006001 406d0000 08000000     O....`....m@....
  42ac80:	000000f5 00508f00 f5080000 cc6c0000     ......P.......l.
  42ac90:	48ccdcef ffffffff 8f0000f5 00000050     ...H........P...
  42aca0:	0000f508 508f0000 08000000 030000f5     .......P........
  42acb0:	e4dffb0b f1673ffb ddad00bb ffff2cdd     .....?g......,..
  42acc0:	f90900f2 00f7e8ff f6080000 0d000000     ................
  42acd0:	000000f1 0000b03f 00509f00 00ef0000     ....?.....P.....
  42ace0:	fa040000 09000000 000000f5 0000f00e     ................
  42acf0:	00904f00 40af0000 fe000000 05000000     .O.....@........
  42ad00:	000000f9 0000f30a 00e00f00 805f0000     .............._.
  42ad10:	bf000000 01000030 000000fd 0000f806     ....0...........
  42ad20:	00f20b00 d01f0000 7f000000 00000070     ............p...
  42ad30:	fdae0300 07000081 e3ffffff 81ff0600     ................
  42ad40:	00f1bf03 000060ef d05fa0bf ff030000     .....`...._.....
  42ad50:	0000f81a cff50d00 00000050 00f47eaf     ........P....~..
  42ad60:	f9090000 000040ef f59c9f00 0a000000     .....@..........
  42ad70:	0080aff7 55df0000 000000fd f61ef12f     .......U..../...
  42ad80:	fa0b0000 10f76f00 0010ff2b feffff8f     .....o..+.......
  42ad90:	3a000030 0010d8ef cffdffdf 0500fdff     0..:............
  42ada0:	fd0500fd 00fd0500 0500fd05 fd0500fd     ................
  42adb0:	00fd0500 0500fd05 fd0500fd 00fd0500     ................
  42adc0:	0500fd05 fd0500fd fddf3900 ff0a0081     .........9......
  42add0:	20feffff 1520e76f 2006c0ef f14f0000     ... o. .... ..O.
  42ade0:	00000000 0000f30f f11f0000 00000000     ................
  42adf0:	0000c08f 40ff0400 3f000000 000000f7     .......@...?....
  42ae00:	0090ff03 f83f0000 03000000 000080ff     ......?.........
  42ae10:	00f83f00 ff040000 00000080 ffffff1f     .?..............
  42ae20:	ff3ffdff feffffff ffffff3f ff2ff0ff     ..?.....?...../.
  42ae30:	e0ffffff 03000000 000030ff 00f61e00     .........0......
  42ae40:	cf000000 000000a0 0000fd09 f65f0000     .............._.
  42ae50:	00000000 00f9ffaf 8b460000 0000b0ff     ..........F.....
  42ae60:	f44f0000 00000000 0000f80c f80a0000     ..O.............
  42ae70:	00000006 c58ff61e e0cf1410 ffffff6f     ............o...
  42ae80:	7b0130fe 0081edef 00000000 0000b0af     .0.{............
  42ae90:	6f000000 000000e1 f33f0000 00000000     ...o......?.....
  42aea0:	00f70d00 00000000 0000fb0a 07000000     ................
  42aeb0:	000010fe ff030000 00630330 70ef0100     ........0.c....p
  42aec0:	00808f00 00b0bf00 0000f808 0000e17f     ................
  42aed0:	1f00808f ffffffff ff62ffff ffffffff     ..........b.....
  42aee0:	0000f7ff f8090000 00000000 809f0000     ................
  42aef0:	00000000 00f80900 00000000 00809f00     ................
  42af00:	ffffbf00 df00f0ff f0ffffff 0010ff00     ................
  42af10:	ff000000 00000000 0000fe02 fc030000     ................
  42af20:	00000000 ecffff05 ff070082 60ffffff     ...............`
  42af30:	14000000 0000f3bf fa0c0000 00000000     ................
  42af40:	0000fd06 fc060000 00000007 e74ff90c     ..............O.
  42af50:	f3bf0320 ffffff3d 5a0060ff 0092fddf      ...=....`.Z....
  42af60:	ef7c0100 3e0060db d0ffffff 00b3ff03     ..|..`.>........
  42af70:	f90d4004 00000000 0000e04f 809f0000     .@......O.......
  42af80:	00000000 cb6a50cf 6def0082 60ffffff     .....Pj....m...`
  42af90:	0271ffef f4dff4af fb0a0000 0000e0bf     ..q.............
  42afa0:	d08ffe04 fe030000 0000f22f fd09fb08     ......../.......
  42afb0:	f46f0040 dffeaf00 050070ff 00a3febe     @.o......p......
  42afc0:	ffffff5f ff45ffff ffffffff 00c05ff3     _.....E......_..
  42afd0:	05fd0600 000000fc 904d60df f04f0000     .........`M...O.
  42afe0:	00000000 0000f90b ff020000 00000020     ............ ...
  42aff0:	00b09f00 1f000000 000000f4 00fd0700     ................
  42b000:	00000000 000060ef f05f0000 00000000     .....`...._.....
  42b010:	0000f80c ff030000 00000020 00b0af00     ........ .......
  42b020:	1f000000 000000f4 ff9d0200 000030d9     .............0..
  42b030:	ffeeff4f ff0100f7 ff1900a1 00fe0520     O........... ...
  42b040:	80bf0000 0000fc07 04908f00 000010fe     ................
  42b050:	cf0070cf fe3b10c4 ff1c0010 00d2ffff     .p....;.........
  42b060:	ccfe8f00 0700faef 030050fe f50e90df     .........P......
  42b070:	3f000000 00f30ff0 f20f0000 0000f70e     ...?............
  42b080:	07f04f00 050060ff af00a0ef fcffedff     .O...`..........
  42b090:	ad040010 0050ebff fdcf0700 1c000091     ......P.........
  42b0a0:	f4ffedff 30fd0b00 02f28f00 000020ff     .......0..... ..
  42b0b0:	d05fb09f ff030000 0000fd15 2ff44f00     .._..........O./
  42b0c0:	0b0000f3 e6bf60ff f7ff3a10 ffffcf01     .....`...:......
  42b0d0:	0070bff9 0c94cc5a 000000f5 20ff0000     ..p.Z.......... 
  42b0e0:	00000000 0000d05f f61e0000 01200700     ...._......... .
  42b0f0:	0500fb6e faffffff ce180000 0000a4fd     n...............
  42b100:	9ffe8f8f 00000080 00000000 fff90900     ................
  42b110:	8f8ff7e8 00809ffe 00000000 08000000     ................
  42b120:	fce7eff8 acf2762f 00002003 30170000     ..../v... .....0
  42b130:	af030000 7d0100f5 3a00c6ff 0020e9ff     .......}...:.. .
  42b140:	0050fc7f 71fe0800 18000000 0040faef     ..P....q......@.
  42b150:	ff5b0000 000010e7 40ff8e02 05000000     ..[........@....
  42b160:	000000b5 8f000000 ffffffff cccccc56     ............V...
  42b170:	0000c4cc 00000000 00000000 00000000     ................
  42b180:	cc060000 c4cccccc ffffff8f 005650ff     .............PV.
  42b190:	08000000 000092fe fcdf1700 00000050     ............P...
  42b1a0:	20e8ff4a 6d010000 000040ff 00f58f02     J.. ...m.@......
  42b1b0:	d7ff5c00 faef2900 fd7f0030 08000071     .\...)..0...q...
  42b1c0:	000000a4 00000000 00000000 81fddf4a     ............J...
  42b1d0:	feff0a00 8f30feff ef0400e5 001006c0     ......0.........
  42b1e0:	00f05f00 2f000000 000000f0 00d07f00     ._...../........
  42b1f0:	ff040000 00000040 0000f64f 60ff0200     ....@...O......`
  42b200:	0b000000 000000f9 00e30d00 00000000     ................
	...
  42b218:	0a000000 000000c2 00f84f00 0c000000     .........O......
  42b228:	000000e3 df5a0000 0040d9ff 06000000     ......Z...@.....
  42b238:	8a87eaef 0000d4ef 40fc0a00 4d000000     ...........@...M
  42b248:	0b0000f8 000000f8 f7090000 00f90600     ................
  42b258:	50fccf05 00f30afe ff0a00ec e09fefdc     ...P............
  42b268:	406fc00e 0020fd07 6f00fe8f ef00f02a     ..o@.. ....o*...
  42b278:	af000020 dcf601e0 00b04f00 00fe0300      ........O......
  42b288:	06a09e0e 000000f9 da00e00f 906f00ea     ..............o.
  42b298:	fe000000 c0ad0d00 0000fb04 00e03f00     .............?..
  42b2a8:	0e00afe9 0a0000f2 652f00fe d27f00f5     ........../e....
  42b2b8:	f1ff0800 d00ef109 cefcaf00 f8ec9ff9     ................
  42b2c8:	00906f00 01c5ff5c 0000e7bf 000080af     .o..\...........
  42b2d8:	00000000 af000000 000000c4 00000002     ................
  42b2e8:	fe6e0000 e0bf89a8 00000000 ffad0500     ..n.............
  42b2f8:	000083ec 00000000 0050ff04 00000000     ..........P.....
  42b308:	c0ff0b00 00000000 ee2f0000 000000f3     ........../.....
  42b318:	9f000000 0000fa87 00000000 10ff21ff     .............!..
  42b328:	00000000 af00fb07 00000080 00f40d00     ................
  42b338:	0000e03f d05f0000 00f60c00 cf000000     ?....._.........
  42b348:	fd050060 02000000 000000ff 000040ef     `............@..
  42b358:	ccccff09 00b0efcc ffff1f00 f2ffffff     ................
  42b368:	b07f0000 0a000000 ef0000f9 00000040     ............@...
  42b378:	0510ff03 000000fd 70df0000 0000f70c     ...........p....
  42b388:	6f000000 ffffbfe0 0050ebff ddddedbf     ...o......P.....
  42b398:	bf00faff 07000080 80bf50ff bf000000     .........P......
  42b3a8:	0080bfa0 b08f0000 000080bf bf80bf00     ................
  42b3b8:	07000080 edbf20ff f4ffdddd ffffbf00     ..... ..........
  42b3c8:	10fbffff 000080bf bfd0cf14 00000080     ................
  42b3d8:	80bff50e 0b000000 0080bff8 f70d0000     ................
  42b3e8:	000080bf bff29f01 efdddded ffbf70ff     .............p..
  42b3f8:	93fdffff 29000000 00a5fedf ff8f0000     .......)........
  42b408:	20fdffff 41facf00 00fc6e02 0000f59f     ... ...A.n......
  42b418:	2f200900 000000f5 fc090000 00000000     .. /............
  42b428:	70cf0000 00000000 00f40e00 00000000     ...p............
  42b438:	0040ef00 00000000 0000f70c 00000000     ..@.............
  42b448:	0000c09f 03000000 000050ff 09000000     .........P......
  42b458:	000040ff 0c009200 1610a4ff 0900c0ef     .@..............
  42b468:	ffffffff 030000d2 50eaff9d ffffbf00     ...........P....
  42b478:	0030d9fe ffffbf00 10fbffff 0080bf00     ..0.............
  42b488:	e1ff3800 0080bf00 fc2d0000 0080bf00     .8........-.....
  42b498:	ff020000 0080bf60 9f000000 0080bfc0     ....`...........
  42b4a8:	4f000000 0080bff0 2f000000 0080bff1     ...O......./....
  42b4b8:	2f000000 0080bff1 4f000000 0080bff0     .../.......O....
  42b4c8:	9f000000 0080bfb0 ff020000 0080bf60     ............`...
  42b4d8:	fc2d0000 0080bf00 e1ff3800 ffffbf00     ..-......8......
  42b4e8:	10fbffff ffffbf00 0030d9fe ffffbf00     ..........0.....
  42b4f8:	bff2ffff ffffffff 0080bff2 bf000000     ................
  42b508:	00000080 0080bf00 bf000000 00000080     ................
  42b518:	0080bf00 bf000000 eeeeeefe ffffbf30     ............0...
  42b528:	bf30ffff 00000080 0080bf00 bf000000     ..0.............
  42b538:	00000080 0080bf00 bf000000 00000080     ................
  42b548:	ffffbf00 bff7ffff ffffffff ffffbff7     ................
  42b558:	bff2ffff ffffffff 0080bff2 bf000000     ................
  42b568:	00000080 0080bf00 bf000000 00000080     ................
  42b578:	0080bf00 bf000000 00000080 ffffbf00     ................
  42b588:	bf30ffff ffffffff 0080bf30 bf000000     ..0.....0.......
  42b598:	00000080 0080bf00 bf000000 00000080     ................
  42b5a8:	0080bf00 bf000000 00000080 29000000     ...............)
  42b5b8:	00b6fedf ff8f0000 30feffff 41facf00     ...........0...A
  42b5c8:	00fe5c01 0000f59f 2f300800 000000f5     .\........0/....
  42b5d8:	fc080000 00000000 70cf0000 00000000     ...........p....
  42b5e8:	00f40e00 01000000 0040ef10 ff000000     ..........@.....
  42b5f8:	0000f71c f10f0000 0000c08f 12ff0000     ................
  42b608:	000050ff 09f10f00 000050ff 0c10ff00     .P.......P......
  42b618:	2510a4ff 0800f1cf ffffffff 020000f6     ...%............
  42b628:	60ebff9d 0080bf00 f80a0000 000080bf     ...`............
  42b638:	bff80a00 00000080 80bff80a 0a000000     ................
  42b648:	0080bff8 f80a0000 000080bf bff80a00     ................
  42b658:	00000080 ffbff80a ffffffff ffffbff8     ................
  42b668:	f8ffffff 000080bf bff80a00 00000080     ................
  42b678:	80bff80a 0a000000 0080bff8 f80a0000     ................
  42b688:	000080bf bff80a00 00000080 80bff80a     ................
  42b698:	0a000000 f88bbff8 bff88bbf 8bbff88b     ................
  42b6a8:	f88bbff8 bff88bbf 8bbff88b ffaf00f8     ................
  42b6b8:	0910ffff f1ffffff 01000000 000010ff     ................
  42b6c8:	00f11f00 ff010000 00000010 0000f11f     ................
  42b6d8:	10ff0100 1f000000 000000f1 0010ff01     ................
  42b6e8:	f11f0000 01000000 000010ff 03f02f00     ............./..
  42b6f8:	fe050050 0370ef00 ff0890ef 00e1ffff     P.....p.........
  42b708:	91feae04 0080bf00 d19f0000 000080bf     ................
  42b718:	bf10fe08 7f000080 80bf00e2 30ff0600     ...............0
  42b728:	0080bf00 0000f45f ff0480bf bf000050     ...._.......P...
  42b738:	00f73f80 83bf0000 0000f1ff ffaebf00     .?..............
  42b748:	000000fc ffb4ffbf bf000090 f65f00fc     .............._.
  42b758:	c0bf0000 30ff0800 0080bf00 00e1bf00     .......0........
  42b768:	000080bf bf00fc0d 01000080 80bf90ef     ................
  42b778:	3f000000 0080bff6 f80b0000 00000000     ...?............
  42b788:	000080bf 00f80b00 bf000000 00000080     ................
  42b798:	0000f80b 80bf0000 0b000000 000000f8     ................
  42b7a8:	0080bf00 f80b0000 00000000 000080bf     ................
  42b7b8:	00f80b00 bf000000 00000080 0000f80b     ................
  42b7c8:	ffbf0000 cbffffff ffffffff 0060bffd     ..............`.
  42b7d8:	00000000 00feab6f 00000000 f8bffa0e     ....o...........
  42b7e8:	00000000 ffabff08 000000f2 bffaff02     ................
  42b7f8:	0000a0ef abefaf00 0030eff7 fad73f00     ..........0..?..
  42b808:	00fc65bf 6ff50c00 f60cf6ab 06fc0500     .e.....o........
  42b818:	3f60bffa 30ef00e0 00f6bb6f 907f80af     ..`?...0o.......
  42b828:	60bffb06 f13fff01 f6bb6f00 f7ff0700     ...`..?..o......
  42b838:	bffb0600 fd0e0060 bb6f0000 5f0000f6     ....`.....o...._
  42b848:	fb060050 000060bf 6f000010 0000f6bb     P....`.....o....
  42b858:	06000000 0070bffb f80a0000 0000f4bf     ......p.........
  42b868:	bff80a00 000010fe ffbff80a 0a0000c0     ................
  42b878:	f9bfbff8 f80a0000 50ff86bf bff80a00     ...........P....
  42b888:	00f29f80 80bff80a 0a00fd0c 0280bff8     ................
  42b898:	f80ab0ef 4f0080bf bff80af7 ff080080     .......O........
  42b8a8:	80bff84a ebbf0000 0080bff8 f8ff1e00     J...............
  42b8b8:	000080bf bff8ff03 00000080 80bff86f     ............o...
  42b8c8:	0a000000 280000f8 00b6fedf 8f000000     .......(........
  42b8d8:	fdffffff bf000030 7e0241fa 8f0040ff     ....0....A.~.@..
  42b8e8:	000000f4 2f10fe1b 000000f5 08fa0d00     ......./........
  42b8f8:	000000fc f15f0000 000070cf ff000000     ......_..p......
  42b908:	0000f44e 0d000000 0040eff6 00000000     N.........@.....
  42b918:	00f76cdf 00000000 c08ff40f 00000000     .l..............
  42b928:	ff12ff05 00000050 08a0df00 000040ff     ....P........@..
  42b938:	00e2bf00 10a4ff0c 00f4ef26 ffff0800     ........&.......
  42b948:	00d3ffff 9d020000 0060ebff ffffbf00     ..........`.....
  42b958:	0b00b6fe ffffffff 80bf20fd fd6e0100     ......... ....n.
  42b968:	0000f80b bff61e00 00000080 00f8ab9f     ................
  42b978:	fb070000 000080bf f8ab9f00 1e000000     ................
  42b988:	0080bff6 0bfd6e01 ffffffff ffbf20fd     .....n....... ..
  42b998:	00b6feff 0000f80b bf000000 00000080     ................
  42b9a8:	00f80b00 00000000 000080bf f80b0000     ................
  42b9b8:	00000000 28000000 00b6fedf 08000000     .......(........
  42b9c8:	ffffffff 000000d3 0241fabf 0040ff7e     ..........A.~.@.
  42b9d8:	0050ff08 e1bf0100 00f52f00 0d000000     ..P....../......
  42b9e8:	c08f00fa 00000000 cf00ff05 00000070     ............p...
  42b9f8:	40ff0000 000040ef df000000 0040ef60     ...@.@......`.@.
  42ba08:	00000000 70cf50df 00000000 8f40ff00     .....P.p......@.
  42ba18:	000000c0 00ff0500 0000f52f fa0d0000     ......../.......
  42ba28:	30ff0a00 af000000 df0000f2 6d0130f9     ...0.........0.m
  42ba38:	000050ff ffffff0b 0000e4ff ef4a0000     .P............J.
  42ba48:	0000d6ff 00000000 00e5bf00 00008007     ................
  42ba58:	ff090000 00c0ffec 00000000 00d7ef4a     ............J...
  42ba68:	feffffbf ff0b00b6 fdffffff 0080bf20     ............ ...
  42ba78:	0bfd6e01 000000f8 80bff61e 9f000000     .n..............
  42ba88:	0000f8ab bffb0700 00000080 00f89b9f     ................
  42ba98:	f51e0000 010080bf ff0bfd5d fdffefee     ........].......
  42baa8:	ffffbf20 0b00faff 5f0000f8 80bf00e1      .........._....
  42bab8:	a0bf0000 0000f80b bf50ef01 06000080     ..........P.....
  42bac8:	00f81bfe fa0b0000 ff9d0200 060060eb     .............`..
  42bad8:	ffefffff 92ff03e0 00ba0400 0000b09f     ................
  42bae8:	f70a0000 00000000 00c09f00 02000000     ................
  42baf8:	0020e7ff ef040000 0050eaff ff6b0000     .. .......P...k.
  42bb08:	0000d4ff ff380000 000000f2 90df0100     ......8.........
  42bb18:	00000000 2004fb07 af000000 0094df90     ....... ........
  42bb28:	07f38f01 ffefffff 7b0100f7 0092fdef     ...........{....
  42bb38:	ffffffef ffddffff ffffffff 0a0000fc     ................
  42bb48:	000000f8 80af0000 00000000 0000f80a     ................
  42bb58:	af000000 00000080 00f80a00 00000000     ................
  42bb68:	000080af f80a0000 00000000 0080af00     ................
  42bb78:	0a000000 000000f8 80af0000 00000000     ................
  42bb88:	0000f80a af000000 00000080 00f80a00     ................
  42bb98:	00000000 000080af 000060df dff30f00     .........`......
  42bba8:	00000060 60dff30f 0f000000 0060dff3     `......`......`.
  42bbb8:	f30f0000 000060df dff30f00 00000060     .....`......`...
  42bbc8:	60dff30f 0f000000 0060dff3 f30f0000     ...`......`.....
  42bbd8:	000060df cff30f00 00000060 80bff20f     .`......`.......
  42bbe8:	1f000000 00c08ff1 e05f0000 0000f52f     .........._./...
  42bbf8:	0a80df00 4d0071ff bf0010fe e3ffffff     .....q.M........
  42bc08:	be050000 0010c7ff 0000f90c bf000000     ................
  42bc18:	00f06f70 2f000000 60ef00f1 09000000     po...../...`....
  42bc28:	fd0800fa 00000000 1f0030ff 000000f4     .........0......
  42bc38:	0000c06f 0000a0bf 0000f50d 0010ff04     o...............
  42bc48:	0000fe04 00f80d00 0080bf00 e06f0000     ..............o.
  42bc58:	00f12f00 ff000000 00fa0850 09000000     ./......P.......
  42bc68:	40ff00fc 00000000 d06ff32f 00000000     ...@..../.o.....
  42bc78:	f69dbf00 00000000 ffff0400 00000000     ................
  42bc88:	ff0e0000 00000090 7f000000 000000f2     ................
  42bc98:	0000f22f 00fa0b00 fe020000 0070df00     /.............p.
  42bca8:	f0ff0000 8f000000 00fc0790 ff5f0000     .............._.
  42bcb8:	0d000040 f12f00f4 fc0b0000 020000f9     @...../.........
  42bcc8:	df0000fe ff000060 0000e03f 0800907f     ....`...?.......
  42bcd8:	5f0000fb 0040dfa0 0000f40c 0b00f13f     ..._..@.....?...
  42bce8:	00f908f5 0000ff02 0150ef00 e03f00ff     ..........P...?.
  42bcf8:	00a07f00 00fa0800 df00a05f 00f50c30     ........_...0...
  42bd08:	f03f0000 0800f50b 00ff01f9 ef000000     ..?.............
  42bd18:	0000ff51 b06fe03f 09000000 00a06ffa     Q...?.o......o..
  42bd28:	f53cdf00 00000000 00f5fb4f fffa0800     ..<.....O.......
  42bd38:	00000010 00ffef00 ff3f0000 000000b0     ..........?.....
  42bd48:	b0ff0a00 ef000000 000000f6 f54f0000     ..............O.
  42bd58:	08000000 000010ff 0000f71e 00fc0a00     ................
  42bd68:	0000f35f 0010ff05 0100d09f 000050ef     _............P..
  42bd78:	bf0090df 030000a0 e16f40ff 08000000     .........@o.....
  42bd88:	00f43ffe 0c000000 0000f8ff 2f000000     .?............./
  42bd98:	000000fd ff060000 000000f3 bfff0200     ................
  42bda8:	000000e0 df90cf00 000000a0 ff02d08f     ................
  42bdb8:	4f000050 fe0700f3 f81e0010 fb0c0000     P..O............
  42bdc8:	00fd0a00 f71f0000 0020ff05 f25f0000     .......... ..._.
  42bdd8:	0000f80c f12f0000 0020ff03 70bf0000     ....../... ....p
  42bde8:	00b0af00 00fd0500 00f41f00 00f40e00     ................
  42bdf8:	00fd0700 00b08f00 70df0000 0020ff01     ...........p.. .
  42be08:	f14f0000 0000f80a fa0b0000 0000e04f     ..O.........O...
  42be18:	ff020000 000050ef 8f000000 000000fc     .....P..........
  42be28:	0f000000 000000f4 0f000000 000000f3     ................
  42be38:	0f000000 000000f3 0f000000 000000f3     ................
  42be48:	0f000000 000000f3 0f000000 000000f3     ................
  42be58:	ffffff0e 0df8ffff ffffffff 0000f7ff     ................
  42be68:	cf000000 000000c0 10fe0900 00000000     ................
  42be78:	0000f45f ff020000 00000070 00fb0d00     _.......p.......
  42be88:	00000000 0000d1af ff070000 00000030     ............0...
  42be98:	00f63f00 01000000 000090ef fd0b0000     .?..............
  42bea8:	00000000 00f28f00 04000000 000050ff     .............P..
  42beb8:	ff0e0000 ffffffff ffff0ffc fdffffff     ................
  42bec8:	fdebffbf 0b60bfcb 60bf00f6 bf00f60b     ......`....`....
  42bed8:	00f60b60 f60b60bf 0b60bf00 60bf00f6     `....`....`....`
  42bee8:	bf00f60b 00f60b60 f60b60bf 0b60bf00     ....`....`....`.
  42bef8:	ffbfcbfd 0040afe0 905f0000 0f000000     ......@..._.....
  42bf08:	000000e0 0000f40a 00fa0400 ef000000     ................
  42bf18:	00000000 0000509f 00a04f00 f00e0000     .....P...O......
  42bf28:	08000000 000000f5 0000fb03 10df0000     ................
  42bf38:	8f000000 00000060 0000b02f 00f10d00     ....`.../.......
  42bf48:	f7070000 02000000 000000fc 0020cf00     .............. .
  42bf58:	707f0000 1f000000 000000d0 ff9ff20c     ...p............
  42bf68:	f0cf7cf0 00f01f00 1f00f01f f01f00f0     .|..............
  42bf78:	00f01f00 1f00f01f f01f00f0 00f01f00     ................
  42bf88:	1f00f01f f01f00f0 00f01f00 1f00f01f     ................
  42bf98:	f01f00f0 7cf01f00 ff9ff0cf 480000f0     .......|.......H
  42bfa8:	00000030 0000fb0d f1fc0400 ae000000     0...............
  42bfb8:	0000802f 00be801f 04f20800 eb0000f5     /...............
  42bfc8:	00b00e00 8f00505f 00e00b20 f802f801     ...._P.. .......
  42bfd8:	e00b0000 11111111 ffff1f11 44ffffff     ...............D
  42bfe8:	44444444 00fb1b40 00fb0900 00fb0600     DDDD@...........
  42bff8:	eaff8d02 feff0420 1d30ffef fc2c0061     .... .....0.a.,.
  42c008:	00000000 0000f11f 30ef0000 ffffef3a     ...........0:...
  42c018:	98fc4ff3 f83cff88 f30e0000 010030ef     .O....<......0..
  42c028:	00f83bff 3ff3bf00 efef99fc eaef2a30     .;.....?....0*..
  42c038:	10fff32c 00000000 0000f10f ff000000     ,...............
  42c048:	00000010 00f10f00 00000000 000010ff     ................
  42c058:	f10f0000 10d8ef4b ff9fff00 0f40feef     ....K.........@.
  42c068:	2b00c3ff d0ff10fe f90c0000 0000f50f     ...+............
  42c078:	ffe05f00 01000020 00f20fff f01f0000     ._.. ...........
  42c088:	000050ff fd0ffe05 df000000 30fcff80     .P.............0
  42c098:	0fe1cf03 fffffff8 04ff00e3 0081fdbe     ................
  42c0a8:	7c000000 0000d8ef fffeff3d c3ef01e2     ...|....=.......
  42c0b8:	08f82b00 000000fc 00f50e50 0f000000     .+......P.......
  42c0c8:	000000f1 00f10f00 0d000000 000000f5     ................
  42c0d8:	00fc0800 01500000 2c00c3ef ff2d00f9     ......P....,..-.
  42c0e8:	00d1ffff d7ef7c00 00000000 f01f0000     .....|..........
  42c0f8:	00000000 0000ff01 1f000000 000000f0     ................
  42c108:	00ff0100 00000000 1800f01f ff41ebdf     ..............A.
  42c118:	efff4e00 1ef09fff cf0320fc 00fd09ff     .N....... ......
  42c128:	f0df0000 000050ef f10fff05 2f000000     .....P........./
  42c138:	0010fff0 0eff0200 000000f4 c09ff05f     ............_...
  42c148:	ff0c0000 00a1ef01 04f0ff1a f9dffcef     ................
  42c158:	8d0100ff f00fb5ff fe8d0100 030000b5     ................
  42c168:	faeffdef 90ef0100 00f83d00 0000908f     .........=......
  42c178:	f20ef12f af000000 ffffff50 0ff7ffff     /.......P.......
  42c188:	888888f9 50ef4088 00000000 0000fd08     .....@.P........
  42c198:	1e001000 7f0140fc ff3e0050 00f5fffe     .....@..P.>.....
  42c1a8:	fdce0700 02000092 0030fcbf 00f3edef     ..........0.....
  42c1b8:	0002c07f 0000f609 0060bf00 ffffff0a     ..........`.....
  42c1c8:	dcef8cc0 f60b00c9 bf000000 0b000060     ............`...
  42c1d8:	000000f6 000060bf 0000f60b 0060bf00     .....`........`.
  42c1e8:	00f60b00 60bf0000 f60b0000 bf000000     .......`........
  42c1f8:	00000060 c6fe8d02 5f00f20d bdffffff     `.........._....
  42c208:	b2ff03f2 f2ff1900 0000fa0a 0ff28f00     ................
  42c218:	000000f3 f10ff21f 0e000000 00f30ff2     ................
  42c228:	f21f0000 0000fb0a 03f29f00 1900a2ff     ................
  42c238:	5f00f2ff afffeeff 9d0200f2 f10fc5ff     ..._............
  42c248:	00000000 00f01f00 00000020 ec01c08f     ........ .......
  42c258:	ff070051 ffdf0260 00f9ffee ffad0500     Q...`...........
  42c268:	ff0040ea 00000010 0010ff00 ff000000     .@..............
  42c278:	00000010 0010ff00 ff000000 00000010     ................
  42c288:	be15ff00 ff0080fd fdffffbf 20faff00     ............... 
  42c298:	ff80ff06 7f0000c0 0050ffd0 fff02f00     ..........P../..
  42c2a8:	0f000020 0010fff0 fff10f00 0f000010      ...............
  42c2b8:	0010fff1 fff10f00 0f000010 0010fff1     ................
  42c2c8:	fff10f00 0f000010 5fe21df1 00a10af6     ..........._....
  42c2d8:	0f000000 0ff10ff1 0ff10ff1 0ff10ff1     ................
  42c2e8:	0ff10ff1 0ff10ff1 00f10ff1 00e30c00     ................
  42c2f8:	00f83f00 00b20900 00000000 00000000     .?..............
  42c308:	00f30e00 00f30e00 00f30e00 00f30e00     ................
  42c318:	00f30e00 00f30e00 00f30e00 00f30e00     ................
  42c328:	00f30e00 00f30e00 00f30e00 00f30e00     ................
  42c338:	01f20f00 0bf04f00 0880fffd ff00e8ef     .....O..........
  42c348:	00000010 0010ff00 ff000000 00000010     ................
  42c358:	0010ff00 ff000000 00000010 0010ff00     ................
  42c368:	ff80ef02 f83e0010 0310ff00 ff0080ff     ......>.........
  42c378:	00f84f10 ff15ff00 ff000090 0080ff7f     .O..............
  42c388:	bfffff00 ff0000f4 20fe0af6 0060ff00     ........... ..`.
  42c398:	ff00c0cf f92e0010 0010ff00 ff50ff04     ..............P.
  42c3a8:	7f000010 f11ffff2 fff11fff 1ffff11f     ................
  42c3b8:	f11ffff1 fff11fff 1ffff11f ff10fff1     ................
  42c3c8:	60fccf06 a2feae03 fdbfff00 fe6ffaff     ...`..........o.
  42c3d8:	ff30ffdf ff0700f7 cf0130fe 00a0ffd0     ..0......0......
  42c3e8:	00f4bf00 fff22f00 7f000040 0d0000e0     ...../..@.......
  42c3f8:	0020fff5 00c06f00 fff50c00 6f000010     .. ..o.........o
  42c408:	0c0000b0 0010fff5 00b06f00 fff50c00     .........o......
  42c418:	6f000010 0c0000b0 0010fff5 00b06f00     ...o.........o..
  42c428:	fff50c00 6f000010 0c0000b0 0010fff5     .......o........
  42c438:	00b06f00 fff50c00 80fdce06 fdbfff00     .o..............
  42c448:	ff00fdef ef0400f8 00b0ff80 ffd06f00     .............o..
  42c458:	2f000040 0020fff0 fff00f00 0f000010     @../.. .........
  42c468:	0010fff1 fff10f00 0f000010 0010fff1     ................
  42c478:	fff10f00 0f000010 0010fff1 00f10f00     ................
  42c488:	c7ff7c01 3e000010 d3ffefff b2ef0100     .|.....>........
  42c498:	10fe2b00 0000fc08 0e80cf00 000000f5     .+..............
  42c4a8:	f10fd05f 2f000000 00f10ff0 f02f0000     _....../....../.
  42c4b8:	0000f50e 08d05f00 000000fd ef0170df     ....._.......p..
  42c4c8:	fd3c00c3 ff3d0010 00d2ffff ff7c0100     ..<...=.......|.
  42c4d8:	ff0000c7 81fdbe05 fffa0f00 00e4ffdd     ................
  42c4e8:	0110fbff fc0fe1af cf000000 0050ff90     ..............P.
  42c4f8:	0ffe0400 000000f2 20fff01f ff010000     ........... ....
  42c508:	0000f50f ffe05f00 0d0000d0 c3ff0ff8     ....._..........
  42c518:	10fe3c00 ffff9fff f10f30fe 10d8ef4b     .<.......0..K...
  42c528:	0010ff00 0f000000 000000f1 10ff0000     ................
  42c538:	00000000 0000f10f 00000000 b4fe8d01     ................
  42c548:	ef04f00f fff8fffe 00b2ef01 9ff0ff3c     ............<...
  42c558:	0d0000c0 00f50eff f05f0000 000010ff     .........._.....
  42c568:	f10fff02 2f000000 0050eff0 09ff0500     ......./..P.....
  42c578:	000000fd fc1ef0df ffcf0330 ffff4e00     ........0....N..
  42c588:	00f09fff 41ebdf18 000000ff f01f0000     .......A........
  42c598:	00000000 0000ff01 1f000000 000000f0     ................
  42c5a8:	ffff0100 f84fbe05 fcfff4ff 00fd0f41     ......O.....A...
  42c5b8:	0050ff00 0000f30f 0f0010ff ff0000f1     ..P.............
  42c5c8:	f10f0010 10ff0000 00f10f00 df290000     ..............).
  42c5d8:	5f0093fd c0ffdeff 0100f80e 00ff0173     ..._........s...
  42c5e8:	0e000000 000020fa ebff5f00 28000072     ..... ..._..r..(
  42c5f8:	00f8ffcf 8f020000 000000f3 d850cf00     ..............P.
  42c608:	f34f0020 fffeff4f cf2800f9 0000b4fd      .O.O.....(.....
  42c618:	00003058 0000f60b 0060bf00 ffffff0a     X0........`.....
  42c628:	dcef8cc0 f60b00c9 bf000000 0b000060     ............`...
  42c638:	000000f6 000060bf 0000f60b 0060bf00     .....`........`.
  42c648:	00f70a00 c07f0000 ff010002 0200f4fe     ................
  42c658:	1f20ebbe 030000f0 00f01ffe 1ffe0300     .. .............
  42c668:	030000f0 00f01ffe 1ffe0300 030000f0     ................
  42c678:	00f01ffe 1ffe0300 040000f0 00f11ffe     ................
  42c688:	0efe0600 0c0000f5 30fe09fe 01fe9f00     ...........0....
  42c698:	fbdffedf df0800fe 0dfe52fc 000000f5     .........R......
  42c6a8:	fc06f10e 6f000000 30ff00a0 40df0000     .......o...0...@
  42c6b8:	00908f00 0000fd03 0a00f12f 0b0000f6     ......../.......
  42c6c8:	e01f00f7 fd040000 00808f00 40df0000     ...............@
  42c6d8:	000020ef fbb56f00 00000000 00f4fd0f     . ...o..........
  42c6e8:	09000000 0000d0ff ff020000 bf000060     ............`...
  42c6f8:	2f000050 060000f0 00a05ff7 00f58f00     P../....._......
  42c708:	0ff10c00 df0000f0 2f0000fb 00f609b0     .........../....
  42c718:	10dffa03 03508f00 f40900fb df00708f     ......P......p..
  42c728:	10ef0000 c02fe00f 0000fa03 805f608f     ....../......`_.
  42c738:	f409f20c c02f0000 f80620bf 0000e00e     ....../.. ......
  42c748:	00fcf30c 905ffe00 fe070000 af0000f6     ......_.........
  42c758:	000030df 00f1ff01 00fd4f00 bf000000     .0.......O......
  42c768:	0e0000a0 2f0000f7 2f0000f4 10fe05f3     ......./.../....
  42c778:	0070cf00 fb09b09f f70d0000 0000e14f     ..p.........O...
  42c788:	30efff02 6f000000 000000f7 00fa9f00     ...0...o........
  42c798:	fe050000 000060df f32ff42f 80cf0000     .....`.././.....
  42c7a8:	0910fe06 af0000fc 00e15fb0 0df70d00     ........._......
  42c7b8:	000000f6 fc06f10e 6f000000 40ef00a0     ...........o...@
  42c7c8:	30df0000 00b07f00 0000fc04 0b00f21f     ...0............
  42c7d8:	090000f5 d02f00f9 ff020000 00709f00     ....../.......p.
  42c7e8:	71bf0000 000000ff f8d74f00 00000000     ...q.....O......
  42c7f8:	00f2ff0c 05000000 0000a0ff ff000000     ................
  42c808:	00000030 00fc0500 10060000 0000f52e     0...............
  42c818:	fffe4f00 000000a0 00d7ef08 0f000000     .O..............
  42c828:	ffffffff cccccc70 0000f5df 00f90c00     ....p...........
  42c838:	fc090000 05000000 000020fe 0040ff02     ......... ....@.
  42c848:	80df0100 bf000000 000000b0 0000d17f     ................
  42c858:	00f34f00 fe0e0000 72cccccc ffffffff     .O.........r....
  42c868:	ef0900fa d3ff0940 0060ef00 0000f20f     ....@.....`.....
  42c878:	0f0020ff ff0000f2 f20f0020 10ff0100     . ...... .......
  42c888:	00b0ef09 0000f8cf 0000f03f 0f0010ff     ........?.......
  42c898:	ff0000f2 f20f0020 20ff0000 00f20f00     .... ...... ....
  42c8a8:	0060df00 00d3ff08 bf40ef08 4bbff44b     ..`.......@.K..K
  42c8b8:	f44bbff4 bff44bbf 4bbff44b f44bbff4     ..K..K..K..K..K.
  42c8c8:	bff44bbf 4bbff44b 9f40bff4 ef0700d6     .K..K..K..@.....
  42c8d8:	af0000f4 fb0600a0 b06f0000 00fb0600     ..........o.....
  42c8e8:	00b06f00 0000fb06 0100d05f 0b00d5ef     .o......_.......
  42c8f8:	fe0470ff b05f0010 00fb0600 00b06f00     .p...._......o..
  42c908:	0000fb06 0600b06f af0000fb f3ef0790     ....o...........
  42c918:	00d59f00 50890100 ef510900 f502a0ff     .......P..Q.....
  42c928:	d88f417f 00b01adf 0040fd3c 0060fd4c     .A......<.@.L.`.
  42c938:	806f834f 5f00800c 0100f400 00600df3     O.o...._......`.
  42c948:	507e104f 8f00a03d 0000a0ff 00001002     O.~P=...........
  42c958:	b0cf0100 ff56ff7f 00fa0bf5 00000000     ......V.........
  42c968:	00000000 00010000 00000000 00000000     ................
  42c978:	00f89e05 00000000 bf260000 00d0ffff     ..........&.....
  42c988:	00000000 ffffdf48 0000fdff ff5a0100     ....H.........Z.
  42c998:	ffffffff 0000d0ff ffffff05 ffffffff     ................
  42c9a8:	000000fd ffffffaf ffffffff 0a0000d0     ................
  42c9b8:	ffffffff fd0e94fd af000000 72fcffff     ...............r
  42c9c8:	d0ef0000 ff0a0000 000050ea 00fd0e00     .........P......
  42c9d8:	f1af0000 00000000 00d0ef00 10ff0a00     ................
  42c9e8:	00000000 0000fd0e 00f1af00 00000000     ................
  42c9f8:	0000d0ef 0010ff0a 0e000000 000000fd     ................
  42ca08:	0000f1af ff540300 0a0000d0 000010ff     ......T.........
  42ca18:	fdffff5e af000000 3f0000f1 d0ffffff     ^..........?....
  42ca28:	ff9d6901 ff060010 06fcffff f1ffffff     .i..............
  42ca38:	ff1e0000 ff61ffff 10ffffff ff2a0000     ......a.......*.
  42ca48:	ff1f50fc 00f0ffff 10000000 ff9f0000     .P..............
  42ca58:	0000f7ff 00000000 cc4a0000 000000a3     ..........J.....
  42ca68:	00000000 78004200 88888888 24008788     .....B.x.......$
  42ca78:	ffef22f8 ffffffff ff8f22fe 99b9ffff     ."......."......
  42ca88:	ff9b9999 44f9ffff 000030ff 44ff0300     .......D.0.....D
  42ca98:	ef00f69f 00000030 6f00fe03 30ef00f7     ....0......o...0
  42caa8:	03000000 ff7f00fe 0030ffff ff030000     ..........0.....
  42cab8:	66faffff 444474ff 66ff4744 ef00f6af     ...f.tDDDG.f....
  42cac8:	ffffffff 6f00feff dcef00f6 cdcccccc     .......o........
  42cad8:	ff6f00fe 0030ffee ff030000 88fcffee     ..o...0.........
  42cae8:	000030ff 88ff0300 ef00f6cf 00000030     .0..........0...
  42caf8:	6f00fe03 30ef00f6 03000000 fe6f00fe     ...o...0......o.
  42cb08:	1141ffcc ff141111 aafdefcc ffffffff     ..A.............
  42cb18:	aaffffff ef00c6df ffffffff 6c00feff     ...............l
  42cb28:	31feffbf ffffffdf fffbffff ff63ffff     ...1..........c.
  42cb38:	ffffffff ffffffff ffff63ff ffffffff     .........c......
  42cb48:	ffffffff ffffff63 ffffffff 63ffffff     ....c..........c
  42cb58:	ffffffff 58ffffff 78008788 88888888     .......X...x....
  42cb68:	00008588 00000000 00000000 ffffcf00     ................
  42cb78:	ffffef31 fcffffff 63ffffff ffffffff     1..........c....
  42cb88:	ffffffff ff63ffff ffffffff ffffffff     ......c.........
  42cb98:	ffff63ff ffffffff ffffffff ffffff53     .c..........S...
  42cba8:	ffffffff 00878847 88888868 00748888     ....G...h.....t.
	...
  42cbc0:	ffcf0000 ffef31ff ffffffff fffffffc     .....1..........
  42cbd0:	ffffff63 ffffffff 63ffffff ffffffff     c..........c....
  42cbe0:	ffffffff ff63ffff ffffffff ffffffff     ......c.........
  42cbf0:	ffff52ff ffffffff 767737ff 77775700     .R.......7wv.Www
  42cc00:	74777777 00000000 00000000 00001600     wwwt............
  42cc10:	00000000 02000000 0000b0ef 00000000     ................
  42cc20:	ff2e0000 000000fb 00000000 feffef02     ................
  42cc30:	00000000 2e000000 00f3ffff 00000000     ................
  42cc40:	ffef0200 e80430ff 00000000 f3ffff2e     .....0..........
  42cc50:	80ff4f00 ef020000 0030ffff 00f8ffef     .O........0.....
  42cc60:	ffff2e00 af0000f3 0280ffff 30ffffef     ...............0
  42cc70:	ff0a0000 ff2ef8ff 0000f3ff ffaf0000     ................
  42cc80:	ffffffff 00000030 ffff0a00 00f3ffff     ....0...........
  42cc90:	00000000 ffffaf00 000030ff 00000000     .........0......
  42cca0:	f3ffff0a 00000000 00000000 0030feaf     ..............0.
  42ccb0:	00000000 09000000 000000d3 08000000     ................
  42ccc0:	000000c4 9f00c902 000040ff ffb0ff2e     .........@......
  42ccd0:	0200f4ff 7ff1ffef 2e40ffff 0890ffff     ..........@.....
  42cce0:	eff6ffff 0000faff ffffff8f 0000a0ff     ................
  42ccf0:	ffffff08 000000fa ffff9f00 000000b0     ................
  42cd00:	ffffef02 000000f4 ffffff2e 020040ff     .............@..
  42cd10:	fffdffef 2e00f4ff 8fa0ffff df40ffff     ..............@.
  42cd20:	0800faff dff0ffff 0000a0ff 2ee0ff8f     ................
  42cd30:	000000fa 0030ff08 00000030 00002100     ......0.0....!..
  42cd40:	01000000 00000033 00000000 ff0d0000     ....3...........
  42cd50:	00000060 00000000 80ff0e00 00000000     `...............
  42cd60:	50af0000 0b80ff0e 000000f4 0ee0ff0b     ...P............
  42cd70:	ff4f80ff 9f000050 ff0ee0ff f2ff5f80     ..O.P........_..
  42cd80:	feff0300 80ff0e30 00fcff08 00f3ff0b     ....0...........
  42cd90:	0080ff0e 1f50ffaf 0e0090ff 1f0080ff     ......P.........
  42cda0:	ff6fb0ff ff0e0030 ff090080 00ff8ff0     ..o.0...........
  42cdb0:	80ff0e00 f2ff0500 0000fdaf 0080ff0e     ................
  42cdc0:	9ff3ff03 0c0000fd 040050ff ff8ff2ff     .........P......
  42cdd0:	11000000 ff060000 50ff4ff1 00000000     .........O.P....
  42cde0:	e0ff0b00 00c0ff0f 00000000 0890ff3f     ............?...
  42cdf0:	0000f8ff ef010000 ef0120ff 000090ff     ......... ......
  42ce00:	f9ff2d00 ff4f0000 490162fd 00c0ffff     .-....O..b.I....
  42ce10:	ffff0600 ffffffff 000010fd ffff4e00     .............N..
  42ce20:	a0ffffff 00000000 ffff7d00 0000b4ff     .........}......
  42ce30:	00000000 30652500 00000000 00000000     .....%e0........
	...
  42ce48:	6c000000 0000c7ee 00000000 ffbf0000     ...l............
  42ce58:	000000fc 00000000 fcffbf00 00000000     ................
  42ce68:	2a300800 b2ffffff 00008003 fffffb8f     ..0*............
  42ce78:	bfffffff ff0300f8 ffffffff ffffffff     ................
  42ce88:	ffff0b40 ffffffff b0ffffff ffffff1f     @...............
  42ce98:	ffaf55fa 06f2ffff 70ffffef ffff0700     .U.........p....
  42cea8:	2f0060ff 0000fdff f3ffcf00 ff3f0000     .`./..........?.
  42ceb8:	000000fa 00f3ff9f fbff2f00 af000000     ........./......
  42cec8:	0000f3ff 20ffff8f ffff0100 ff1e00f9     ....... ........
  42ced8:	00d3ffff ffffff3d ffff0ee1 ffeeffff     ....=...........
  42cee8:	e0ffffff ffffff07 ffffffff 0080ffff     ................
  42cef8:	ffffffdf ffffffff 2f0000fd ffff9fb2     .........../....
  42cf08:	f32afaff 00010000 feffdf02 00100030     ..*.........0...
  42cf18:	00000000 00fcffbf 00000000 bf000000     ................
  42cf28:	0000fbff 00000000 66140000 00000041     ...........fA...
  42cf38:	00000000 e91b0000 d0ff0500 00000000     ................
  42cf48:	ff3e0000 ff7f10fc 00000000 ff6f0000     ..>...........o.
  42cf58:	ff37feff 000000f0 ff9f0000 bfffdfb4     ..7.............
  42cf68:	000000ff ffbf0100 ffbf0180 0000f0ff     ................
  42cf78:	ffdf0200 9f508f50 0000ffff feff0400     ....P.P.........
  42cf88:	70ffbf30 00f1ff6f fcff0700 ffffdf12     0..po...........
  42cf98:	e3ff3ea0 faff0a00 ffffef03 ff2dc1ff     .>............-.
  42cfa8:	f7ff0cf6 ffffff06 0be3ffff f59ff8ff     ................
  42cfb8:	ffffff09 f5ffffff 9350ff08 ffffff0a     ..........P.....
  42cfc8:	ffffffff 007005f6 ffffef00 ffffffff     ......p.........
  42cfd8:	0000a0ff ffff0e00 ffcfccff 0000faff     ................
  42cfe8:	ffef0000 9f0050ff 00a0ffff ff0e0000     .....P..........
  42cff8:	0900f5ff 00faffff ef000000 0050ffff     ..............P.
  42d008:	a0ffff9f 0e000000 00f5ffff faffff09     ................
  42d018:	00000000 40ffffdf ffff8f00 00000090     .......@........
  42d028:	40444402 44440100 00000041 02000000     .DD@..DDA.......
  42d038:	00002022 00000000 ff9f0000 000000f9     " ..............
  42d048:	00000000 fcffcf00 00000000 00000000     ................
  42d058:	00fcffcf 00000000 cf000000 0000fcff     ................
  42d068:	00000000 ffcf0000 000000fc 00000000     ................
  42d078:	fcffcf00 00000000 00000000 00fcffcf     ................
  42d088:	00000000 cf000000 0000fcff 03000000     ................
  42d098:	ffffeeee 20eeeeff ff020000 ffffffff     ....... ........
  42d0a8:	0020ffff ff3f0000 ffffffff 000000f3     .. ...?.........
  42d0b8:	ffff0300 30ffffff 00000000 ffff3f00     .......0.....?..
  42d0c8:	0000f3ff 00000000 ffffff03 00000040     ............@...
  42d0d8:	00000000 00f4ff4f cf000000 04fcffff     ....O...........
  42d0e8:	ffcf40ff fffffcff 23c0ffff ffffff0c     .@.........#....
  42d0f8:	ffffffff cf44fcff ffffffff ffffffff     ......D.........
  42d108:	ffffffff ffffffff ffffffff 6ef1ffff     ...............n
  42d118:	ffffff0b ffffffff 5daff6ff ffffbfff     ...........]....
  42d128:	ffffffff fbffffff ab040000 bbbbbbbb     ................
  42d138:	0000a2bb ff040000 ffffffff 00e1ffff     ................
  42d148:	ef000000 ffffffff b0ffffff 9f000000     ................
  42d158:	000000fa ff1d0000 4f000050 000010fe     ........P..O....
  42d168:	4f000000 0d0010fe 000060ff 00000000     ...O.....`......
  42d178:	0900faaf 0000b0ff 00000000 03f5ef01     ................
  42d188:	0000f2ff 00000000 e1ff0500 4444fadf     ..............DD
  42d198:	00000020 ff4d4434 ffffff8f 000000fe      ...4DM.........
  42d1a8:	ffffff3f fffffffb 0000f7ff ffffff0b     ?...............
  42d1b8:	ffffcfff 88e8ffff ffffff88 fffffcff     ................
  42d1c8:	ffffffff ffffffff ffcfffff ffffffff     ................
  42d1d8:	ffffffff fffcffff ffffffff ffffffff     ................
  42d1e8:	bdffffff ffffffff ffffffff f9ffffff     ................
  42d1f8:	ffffff4e ffffffff fcffffff 00000010     N...............
  42d208:	00000000 76060000 05000000 30b8dd9c     .......v.......0
  42d218:	00ff0f00 ffef0600 40fcffff 0000ff0f     ...........@....
  42d228:	ffffffbf 0ff9ffff ff0c00ff 6b34a5ff     ..............4k
  42d238:	ffceffff b2ffaf00 2b000000 05ffffff     ...........+....
  42d248:	0000f9ff 8f000000 ff0dffff 000000b0     ................
  42d258:	ffbfdc7d 20ff2fff af000000 ffffffff     }..../. ........
  42d268:	0000fb6f ff9f0000 02ffffff 00000020     o........... ...
  42d278:	22220200 00002122 00000000 00000000     .."""!..........
	...
  42d294:	eeeeeede 000000e7 ffe59e00 faffffff     ................
  42d2a4:	01000000 fffff3ff 00f9ffff ff090000     ................
  42d2b4:	f4ffffe0 00001000 70ff5f00 70ffffff     ........._.p...p
  42d2c4:	07000000 ff00fdff 61fdffff ffcf0500     ...........a....
  42d2d4:	e3ff00f2 eeffffef 30feffff 19f0ff00     ...........0....
  42d2e4:	ffffffff 0000b1ff 2800f0ff a3feffdf     ...........(....
  42d2f4:	ab000000 010000a0 00001033 00000000     ........3.......
  42d304:	30030000 06000000 000000ff 00f0ff06     ...0............
  42d314:	ffff0600 ff474424 fffffeff ffffffff     ....$DG.........
  42d324:	ffffffff ffffffff ffffffff ffffffff     ................
  42d334:	ffffffff ffffffff ffffffff ffffffff     ................
  42d344:	ffffffbf 0000f0ff 00ffff2e ff2e0000     ................
  42d354:	000000f0 0000ff2e c02e0000 00000000     ................
  42d364:	00000000 00300300 00000000 00ff0600     ......0.........
  42d374:	00000000 f0ff0600 00000000 ffff0600     ................
  42d384:	24000000 ffff4744 0e0000f0 ffffffff     ...$DG..........
  42d394:	007500ff ffffffff f72ff0ff ffffff0f     ..u......./.....
  42d3a4:	7f00ffff fffffff0 00f0ffff ffff3fdf     .............?..
  42d3b4:	00ffffff fffff30f f0ffffff ff0ffd0c     ................
  42d3c4:	ffffffff bf20fe01 ffffffff 000001f0     ...... .........
  42d3d4:	ff2e0000 000000ff 2e000000 0000f0ff     ................
  42d3e4:	00000000 0000ff2e 00000000 00c02d00     .............-..
	...
  42d404:	73000000 00000000 00000000 4f000000     ...s...........O
  42d414:	000000f7 03000000 00000030 0000f79f     ........0.......
  42d424:	06000000 010000ff 00f57f00 06000000     ................
  42d434:	0500f0ff e19f00f9 06000000 0000ffff     ................
  42d444:	df00fb4f 47442480 00f0ffff 04f73f00     O....$DG.....?..
  42d454:	ffff0eff 00ffffff f14f0086 fffff40d     ..........O.....
  42d464:	f0ffffff cf00f72f ff8f9f60 ffffffff     ..../...`.......
  42d474:	07f16f00 fffa06f9 ffffffff 40df00f0     .o.............@
  42d484:	bf5fb05f ffffffff f21f00ff fb05fa05     _._.............
  42d494:	ffffffff fc0df0ff 7f809f00 ffffff9f     ................
  42d4a4:	fd01ffff 0bf31e20 ffffbff6 01f0ffff     .... ...........
  42d4b4:	01fc0a00 000020ff 00ffff2e 20ff0b00     ..... ......... 
  42d4c4:	0000c08f f0ff2e00 40ff0700 0000f42f     ...........@/...
  42d4d4:	ff2e0000 20190000 0000fa1d 2e000000     ....... ........
  42d4e4:	000000c0 0010fd2d 00000000 00000000     ....-...........
  42d4f4:	0020fd2f 00000000 00000000 0010fb02     /. .............
	...
  42d510:	77770500 77777777 50777777 ffffff9f     ..wwwwwwwwwP....
  42d520:	ffffffff fff9ffff ffffffff ffffffff     ................
  42d530:	f6ffffff ffffbf01 ffffffff 0090ffff     ................
  42d540:	ffffff0f ffffffff 0d0070ff dbffffff     .........p......
  42d550:	ffffffff ff2f00c0 af10fdff fbffffff     ....../.........
  42d560:	ffffef56 ff0a00d1 ffffffff 10fdffff     V...............
  42d570:	ffaf0000 2ef7ffff 0000d1ff ffff0d00     ................
  42d580:	ed0270ff 00000010 f7ffff0c 00210000     .p............!.
  42d590:	0c000000 00c0ffff 00000000 ff0c0000     ................
  42d5a0:	0000c0ff 00000000 ffff0c00 ccccccfc     ................
  42d5b0:	cccccccc ffefffcf ffffffff ffffffff     ................
  42d5c0:	ffff4efd ffffffff e4ffffff 00000000     .N..............
  42d5d0:	01000000 0000c0ef 2fd30b00 000000fe     .........../....
  42d5e0:	ff82ff1d 2d0000e0 fe2ff9ff ff2e0000     .......-../.....
  42d5f0:	e0ff92ff ffff3e00 00fe2ff9 ffffff4f     .....>.../..O...
  42d600:	5fe0ff92 f9ffffff ff6ffe2f 92ffffff     ..._..../.o.....
  42d610:	ffffffff 2ff9ffff ffffffff ff92ffff     ......./........
  42d620:	ffffffff ff2ff9ff ffffffcf e0ff92ff     ....../.........
  42d630:	ffffffbf 00fe2ff9 ffffffaf 00e0ff92     ...../..........
  42d640:	f9ffff8f 0000fe2f 92ffff7f 0000e0ff     ..../...........
  42d650:	2ff9ff6f 000000fe ff92ff5f 000000e0     o../...._.......
  42d660:	4304f54f 00000000 20020013 00000000     O..C....... ....
  42d670:	00000000 0020fb8f 00000000 ffff0000     ...... .........
  42d680:	000000f8 00000000 e5ffffff 00000000     ................
  42d690:	ffff0000 00c2ffff 00000000 ffffffff     ................
  42d6a0:	000091ff ffff0000 feffffff 00000060     ............`...
  42d6b0:	ffffffff 30fcffff ffff0000 ffffffff     .......0........
  42d6c0:	0010f9ff ffffffff ffffffff ffff00f7     ................
  42d6d0:	ffffffff c0ffffff ffffffff ffffffff     ................
  42d6e0:	fffff3ff ffffffff f1ffffff ffffffff     ................
  42d6f0:	ffffffff ffff40fe ffffffff 0080ffff     .....@..........
  42d700:	ffffffff b2ffffff ffff0000 ffffffff     ................
  42d710:	000000d4 ffffffff 0000f7ff ffff0000     ................
  42d720:	10faffff 00000000 fdffffff 00000040     ............@...
  42d730:	ffff0000 000070ff 00000000 0091ffcf     .....p..........
  42d740:	00000000 a32a0000 00000000 00000000     ......*.........
	...
  42d758:	ff3d0000 0300e6ff 60feffdf ffffffdf     ..=........`....
  42d768:	ffff0d10 fffff1ff 0f30ffff f3ffffff     ..........0.....
  42d778:	ffffffff ffff0f40 fffff4ff 0f40ffff     ....@.........@.
  42d788:	f4ffffff ffffffff ffff0f40 fffff4ff     ........@.......
  42d798:	0f40ffff f4ffffff ffffffff ffff0f40     ..@.........@...
  42d7a8:	fffff4ff 0f40ffff f4ffffff ffffffff     ......@.........
  42d7b8:	ffff0f40 fffff4ff 0f40ffff f4ffffff     @.........@.....
  42d7c8:	ffffffff ffff0f40 fffff4ff 0f40ffff     ....@.........@.
  42d7d8:	f4ffffff ffffffff ffff0f40 fffff4ff     ........@.......
  42d7e8:	0f40ffff f4ffffff ffffffff ffff0f40     ..@.........@...
  42d7f8:	fffff4ff 0f40ffff f4ffffff ffffffff     ......@.........
  42d808:	ffff0f30 ff8ff3ff 0800fbff b0ffffff     0...............
  42d818:	30444402 44240000 ff3d0043 ffffffff     .DD0..$DC.=.....
  42d828:	60feffff ffffffdf ffffffff fffff1ff     ...`............
  42d838:	ffffffff f3ffffff ffffffff ffffffff     ................
  42d848:	fffff4ff ffffffff f4ffffff ffffffff     ................
  42d858:	ffffffff fffff4ff ffffffff f4ffffff     ................
  42d868:	ffffffff ffffffff fffff4ff ffffffff     ................
  42d878:	f4ffffff ffffffff ffffffff fffff4ff     ................
  42d888:	ffffffff f4ffffff ffffffff ffffffff     ................
  42d898:	fffff4ff ffffffff f4ffffff ffffffff     ................
  42d8a8:	ffffffff fffff4ff ffffffff f4ffffff     ................
  42d8b8:	ffffffff ffffffff fffff4ff ffffffff     ................
  42d8c8:	f4ffffff ffffffff ffffffff ff8ff3ff     ................
  42d8d8:	ffffffff b0ffffff 44444402 44444444     .........DDDDDDD
  42d8e8:	00000043 00000000 10dc0200 bf000000     C...............
  42d8f8:	20fd7ff3 ff0d0000 30feff47 f4df0000     ... ....G..0....
  42d908:	40ffff7f 47ff0d00 50ffffff 7ff4df00     ...@...G...P....
  42d918:	60ffffff ff47ff0d 70ffffff ff7ff4df     ...`..G....p....
  42d928:	8dffffff ffff47ff ffffffff ffff7ff4     .....G..........
  42d938:	ffffffff ffffff47 f4ffffff ffffff7f     ....G...........
  42d948:	47ffcdff ffffffff 7ff4dfb0 a0ffffff     ...G............
  42d958:	ff47ff0d 0090ffff ff7ff4df 0d0080ff     ..G.............
  42d968:	ffff47ff df000070 60ff7ff4 ff0d0000     .G..p......`....
  42d978:	0050ff44 f4cf0000 00002002 00440200     D.P...... ....D.
  42d988:	00000000 0010ea08 00000000 ff090000     ................
  42d998:	000000fc 00000000 fbffff07 00000000     ................
  42d9a8:	ff060000 00faffff 00000000 ffffff05     ................
  42d9b8:	0000f9ff ff040000 ffffffff 000000f7     ................
  42d9c8:	ffffff03 f6ffffff ef020000 ffffffff     ................
  42d9d8:	00f5ffff ffffef01 ffffffff cf00f4ff     ................
  42d9e8:	ffffffff ffffffff ffff0fe1 ffffffff     ................
  42d9f8:	30ffffff ffffff9f ffffffff 5600d0ff     ...0...........V
  42da08:	66666666 61666666 00000000 00000000     fffffffa........
  42da18:	0a000000 ffffffff ffffffff ffff00fd     ................
  42da28:	ffffffff f3ffffff ffffff0f ffffffff     ................
  42da38:	ff40ffff ffffffff ffffffff ffff0ef4     ..@.............
  42da48:	ffffffff 20ffffff 77777727 77777777     ....... 'wwwwwww
  42da58:	00003077 20190000 01000000 0000e2df     w0..... ........
  42da68:	f8ff1d00 df010000 0000d1ff 10fcff1d     ................
  42da78:	ffdf0100 1d0000c1 0010fcff c1ffdf01     ................
  42da88:	ff1d0000 000010fc 00d1ffbf ff7f0000     ................
  42da98:	000000f6 60ffff07 7f000000 0000f6ff     .......`........
  42daa8:	ffff0700 00000060 00f6ff7f ff070000     ....`...........
  42dab8:	000060ff f5ff7f00 07000000 0000f6ff     .`..............
  42dac8:	907f0000 00000000 80050001 00000000     ................
  42dad8:	0000fb5f ffcf0000 000000b0 00fbff3e     _...........>...
  42dae8:	ef030000 0000b0ff fbff3e00 03000000     .........>......
  42daf8:	00b0ffef ff3e0000 000000fb b0ffef03     ......>.........
  42db08:	3f000000 0000f7ff f3ff9f00 ff090000     ...?............
  42db18:	000040ff 00f4ff9f ffff0900 9f000040     .@..........@...
  42db28:	0000f4ff 40ffff09 ff8f0000 000000f4     .......@........
  42db38:	0040ffaf f41c0000 00000000 00000000     ..@.............
  42db48:	00000000 d3be0100 00000000 06000000     ................
  42db58:	0000faff 00000000 fbff0700 00000000     ................
  42db68:	07000000 0000fbff 00000000 fbff0700     ................
  42db78:	00000000 07000000 0000fbff 00000000     ................
  42db88:	fbff0700 00000000 59555514 5555fcff     .........UUY..UU
  42db98:	ffdf2054 ffffffff f1ffffff ffffffff     T ..............
  42dba8:	ffffffff fffff3ff ffffffff f3ffffff     ................
  42dbb8:	dedddd6c ddddffff 000090dc fbff0700     l...............
  42dbc8:	00000000 07000000 0000fbff 00000000     ................
  42dbd8:	fbff0700 00000000 07000000 0000fbff     ................
  42dbe8:	00000000 fbff0700 00000000 07000000     ................
  42dbf8:	0000fbff 00000000 f8ff0400 00000000     ................
  42dc08:	00000000 00005036 22020000 22222222     ....6P....."""""
  42dc18:	00222222 ffffffbf ffffffff ffffe1ff     """.............
  42dc28:	ffffffff f3ffffff ffffffff ffffffff     ................
  42dc38:	ff8ff3ff ffffffff b0ffffff 00000000     ................
  42dc48:	10432300 00000000 00000000 ffffff5b     .#C.........[...
  42dc58:	000040ea 05000000 cefdffef 00c3ffff     .@..............
  42dc68:	1b000000 0071ffff f8ff9f02 2d000000     ......q........-
  42dc78:	0220feff ff5f0053 1e0000fb 0030ffff     .. .S._.......0.
  42dc88:	7f10fc6f 0c00fbff 00a0ffff 00fcff06     o...............
  42dc98:	06f8ffef 01f5ffff f4ffef03 f3ffff09     ................
  42dca8:	30ffffef ffffffbf ffff7f70 f3ffffad     ...0....p.......
  42dcb8:	ffffff0a ffff07f6 ffff3ff9 ffff5f60     .........?..`_..
  42dcc8:	ffaf10ff ff8f10fe ffaf00fc ff1f60ff     .............`..
  42dcd8:	af0050ff 6c00f6ff ff0a40db 000070ff     .P.....l.@...p..
  42dce8:	00f6ffaf ff090000 000070ff fcff6f00     .........p...o..
  42dcf8:	ff6d1252 000040fe ff190000 ffffffff     R.m..@..........
  42dd08:	000000f8 01000000 d9fede5a 00000050     ........Z...P...
	...
  42dd24:	4e000000 00000070 00000000 00000000     ...Np...........
  42dd34:	00fbef00 00000000 00000000 6f000000     ...............o
  42dd44:	0000d2ff 00322400 00000000 ffef0300     .....$2.........
  42dd54:	ffcf2860 0060fbff 00000000 fffcff1b     `(....`.........
  42dd64:	ffdfecff 000070fe 8f000000 00a3ffff     .....p..........
  42dd74:	fcff6e00 00000020 ffef0400 01401570     .n.. .......p.@.
  42dd84:	00e3ffdf 00010000 1ffbff1c ff2f50fe     .............P/.
  42dd94:	000020ff 9f00307e f3ffefff d0ffff08     . ..~0..........
  42dda4:	f6ff0200 ffff0500 ff03faff 0800f8ff     ................
  42ddb4:	00a0ffff fdffff2d ffffff01 ffff0600     ....-...........
  42ddc4:	af0000fa ff02fbff 0000feff 00fdffdf     ................
  42ddd4:	ffff0600 f5ffff55 ff2f0000 000040ff     ....U...../..@..
  42dde4:	fffeff3d 000090ff d0ffff04 bf000000     =...............
  42ddf4:	00fbffff 4f000000 0010fbff ffff0700     .......O........
  42de04:	000000c0 ffdf0200 002031e8 00f6ff3e     .........1 .>...
  42de14:	00000000 ffffef06 bf0100fb 0000a0ff     ................
  42de24:	04000000 80fdef9c fdff0800 00000020     ............ ...
	...
  42de3c:	00f3ff4e 00000000 00000000 cf010000     N...............
  42de4c:	000000f4 00000000 00000000 00600800     ..............`.
	...
  42de6c:	fb1d0000 00000000 00000000 0b000000     ................
  42de7c:	0000f7ff 00000000 00000000 f1ffff04     ................
	...
  42de94:	ffdf0000 0000a0ff 00000000 7f000000     ................
  42dea4:	30ffffff 00000000 00000000 ffffff1f     ...0............
  42deb4:	000000fc 00000000 ffff0a00 00f6ffff     ................
  42dec4:	00000000 ff030000 ff8f88fd 000000e0     ................
  42ded4:	00000000 0080ffcf 0080ffcf 00000000     ................
  42dee4:	f9ff6f00 ffff0d00 00000020 ff0e0000     .o...... .......
  42def4:	ef00a0ff 0000fbff 08000000 00fbffff     ................
  42df04:	f4ffff0f 00000000 ffffff02 ffff00c0     ................
  42df14:	0000d0ff ffbf0000 1f00fdff 70ffffff     ...............p
  42df24:	4f000000 fdffffff ffffffcd 000010ff     ...O............
  42df34:	ffffff0d ff6f30fe 00faffff ffff0700     .....0o.........
  42df44:	0080ffff ffffffbf ff0100f3 f8ffffff     ................
  42df54:	ffff0c00 00c0ffff ffffff9f ff17f4ff     ................
  42df64:	ffffffff ffff0f50 ffffffff ffffffff     ....P...........
  42df74:	df00fbff ffffffff ffffffff 90ffffff     ................
  42df84:	ccccbc02 cccccccc cccccccc 00000090     ................
	...
  42dfa4:	00503c00 00000000 00000000 1200f57f     .<P.............
  42dfb4:	00002022 9f220000 ffff50ff 000020fe     " ...."..P... ..
  42dfc4:	ffffff0c fffffff5 cf0000e2 ffffffff     ................
  42dfd4:	fdffffff ffff0b10 45f8ffff 60ffbf55     ...........EU..`
  42dfe4:	afd5ffaf 000080ff ff0af80b f88f10fe     ................
  42dff4:	00000000 e2ff9f70 00804f00 08000000     ....p....O......
  42e004:	0020feff 00000000 ff7f0000 2a0010f3     .. ............*
  42e014:	00000030 41ffff06 f37f00da 5f000000     0......A......._
  42e024:	ff0df4ff 30ff8f90 ffffffef ffff2e50     .......0....P...
  42e034:	fff3ffff 00f6ffff ffffef02 fffffeff     ................
  42e044:	000070ff ffffff3f 757767fa 03000000     .p..?....gwu....
  42e054:	a0ffbf77 00000000 00000000 0000fa8f     w...............
  42e064:	00000000 6f000000 000000a0 00000000     .......o........
  42e074:	00020000 00000000 00704e00 00000000     .........Np.....
  42e084:	ff4f0000 00000070 4f000000 0070ffff     ..O.p......O..p.
  42e094:	00000000 ffffff4f 00000070 fcff4f00     ....O...p....O..
  42e0a4:	0070ffff ff4f0000 ffff05fa 4f000070     ..p...O.....p..O
  42e0b4:	0500faff 0070ffff 00f9ff4f ffff0600     ......p.O.......
  42e0c4:	f9ff3f70 06000000 ff7affff 000000f9     p?........z.....
  42e0d4:	ffff0600 0000f92e 06000000 002550ff     .............P%.
  42e0e4:	00000000 09400400 000000d3 cb010000     ......@.........
  42e0f4:	00e3ff18 01000000 ff9ffccf 000000e3     ................
  42e104:	d0ffcf01 00e3ffbf ffcf0100 ffbf00d1     ................
  42e114:	cf0100e3 0000d1ff 01e3ffbf 00d1ffcf     ................
  42e124:	ffbf0000 d1ffcfe4 00000000 ffffffbf     ................
  42e134:	000000d1 ffbf0000 0000d1ff 00000000     ................
  42e144:	00d1ffbf 00000000 d1bf0000 00000000     ................
  42e154:	00000000 00000061 27000000 00000010     ....a......'....
	...
  42e16c:	00d1ef02 00000000 00000000 ff2e0000     ................
  42e17c:	ff3f10fd ffffffff 020000e0 d1ffffef     ..?.............
  42e18c:	ffffff3f 00f1ffff ffff2e00 bb15fdff     ?...............
  42e19c:	efbbbbbb df0000f1 ffdceffb 000000b0     ................
  42e1ac:	00f1af00 efc09f00 0070dfd1 af000000     ..........p.....
  42e1bc:	030000f1 03d0ef00 00000000 00f1af00     ................
  42e1cc:	ef000000 000000d0 af000000 000000f1     ................
  42e1dc:	00d0ef00 00000000 00f1af00 ef000000     ................
  42e1ec:	000000d0 af500700 003019f1 00d0ef00     ......P...0.....
  42e1fc:	8f000000 dff3aff6 ef0000e0 000000d0     ................
  42e20c:	efff5f00 00d0fffe ffffef00 17fcffff     ._..............
  42e21c:	fdffffff ef000010 ffffffff ff6f80ff     ..............o.
  42e22c:	0000d1ff bbbb6b00 30babbbb 10fcff06     .....k.....0....
	...
  42e244:	6f000000 000000c1 00000000 00000000     ...o............
  42e254:	00000200 88780500 00007188 00000000     ......x..q......
  42e264:	ffffffaf 000010fd ff000000 ffffffff     ................
  42e274:	000000d1 ffff0000 feffffff cbcccccc     ................
  42e284:	ffffff91 ffffffff fcffffff ffffffff     ................
  42e294:	ffffffff ffffffff ffffffff ffffffff     ................
  42e2a4:	ffffffff ffffffff ffffffff ffffffff     ................
  42e2b4:	ffffffff ffffffff ffffffff ffffffff     ................
  42e2c4:	ffffffff ffffffff ffffffff ffffffff     ................
  42e2d4:	ffffffff ffffffff ffffffff ffffffff     ................
  42e2e4:	ffffffff ffffffff ffffffff ffffffff     ................
  42e2f4:	ffffffff ffffffff ffefffff ffffffff     ................
  42e304:	ffffffff ffff4efd ffffffff e4ffffff     .....N..........
	...
  42e320:	03000000 000010fc 00000000 ff3f0000     ..............?.
  42e330:	000000c1 00000000 fcffff03 00000010     ................
  42e340:	3f000000 c1ffffff 00000000 ffff0300     ...?............
  42e350:	10fcffff 00000000 ffffff3f 00c1ffff     ........?.......
  42e360:	ff030000 ffffffff 0000fcff ffff0600     ................
  42e370:	ffffffff 000010ff ef111100 1011f9ff     ................
  42e380:	00000000 ffef0000 000000f9 00000000     ................
  42e390:	f9ffef00 00000000 00000000 00f9ffef     ................
  42e3a0:	00000000 ef000000 0000f9ff 00000000     ................
  42e3b0:	ffef0000 000000f9 00000000 f9ffef00     ................
  42e3c0:	00000000 e0ffffcf 0ef8ffdf fffcffff     ................
  42e3d0:	26f3ffff ff3f5066 ffffffff 2252feff     ...&fP?.......R"
  42e3e0:	ffffef25 ffffffff ffffffff ffffffff     %...............
  42e3f0:	ffffffff f1ffffff ffff0b6e ffffffff     ........n.......
  42e400:	aff6ffff ffbfff5d ffffffff ffffffff     ....]...........
  42e410:	000000fb 00000000 00000200 00000000     ................
  42e420:	00000000 51c8ff07 00000000 00000000     .......Q........
  42e430:	e0ffffef 00000000 5f000000 00ffffff     ..........._....
  42e440:	00000000 ff0c0000 00e0ffff 00000000     ................
  42e450:	ffff0300 0000fdff 00000000 ffff8f00     ................
  42e460:	0000a0ff 00000000 ffffdf02 000000f7     ................
  42e470:	00000000 ffffcf01 00000030 00000000     ........0.......
  42e480:	d0ffdf00 00000000 00000000 00f8ff3f     ............?...
  42e490:	00000000 0c000000 0010ffff 00000000     ................
  42e4a0:	ff080000 000080ff 00000000 ffff0500     ................
  42e4b0:	000000d0 0000b805 f3ffff06 8e010000     ................
  42e4c0:	0800f6ff 00f6ffff ffff0900 ff4df4ff     ..............M.
  42e4d0:	0000f8ff ffffef00 ffffffff 000000f8     ................
  42e4e0:	ffffff0b f6ffffff 00000000 ffffff7f     ................
  42e4f0:	00c2ffff 04000000 ffffffff 000060fe     .............`..
  42e500:	0f000000 b5ffffff 00000000 7b000000     ...............{
  42e510:	000074b9 00000000 8c010000 000020da     .t........... ..
  42e520:	00200000 f3ffff1d 8f000000 ffaf80ff     .. .............
  42e530:	0000fdff f1ffff0a ff0ce1ef ffbf0020     ............ ...
  42e540:	d0ff30fe 0b30ff0a 00e3ffff ffbffcbf     .0....0.........
  42e550:	feffcf10 ff3f0030 ffdcffff 0000e3ff     ....0.?.........
  42e560:	ffffdf03 20feffff 01000000 ffffff2d     ....... ....-...
  42e570:	000000e2 ff020000 0030ffff 00000000     ..........0.....
  42e580:	ffffff0b 000000c0 ffef8c01 00fcffff     ................
  42e590:	ff1d0000 ffffffff 0000c0ff ffffffaf     ................
  42e5a0:	fcffef33 e1ef0000 2e20ff0c 00c1ffff     3......... .....
  42e5b0:	ff0ad0ff ffef0230 fcbf10fc 0000ffbf     ....0...........
  42e5c0:	c0ffff1d f7ffff3f cf010000 df03d1ff     ....?...........
  42e5d0:	000060fe 00750400 00100100 00000000     .`....u.........
  42e5e0:	00000000 22221200 00000122 ff030000     ......""".......
  42e5f0:	0efeffff 00000070 ffffff05 00f70efe     ....p...........
  42e600:	ff050000 0efeffff 220170ff ffffff05     .........p."....
  42e610:	f2ff0efe ff25ffdf 10ffffff ffff0000     ......%.........
  42e620:	ffffff25 f3ffffff ff25ffff ffffffff     %.........%.....
  42e630:	fffff3ff ffffff25 f3ffffff ff25ffff     ....%.........%.
  42e640:	ffffffff fffff3ff ffffff25 f3ffffff     ........%.......
  42e650:	ff25ffff ffffffff fffff3ff ffffff25     ..%.........%...
  42e660:	f3ffffff ff25ffff ffffffff fffff3ff     ......%.........
  42e670:	ffffff25 f3ffffff ff25ffff ffffffff     %.........%.....
  42e680:	fffff3ff ffffff25 f3ffffff ff24ffff     ....%.........$.
  42e690:	ffffffff fffff2ff 66665650 50666666     ........PVfffffP
  42e6a0:	00e4ffff 00000000 ffff0000 ffffffff     ................
  42e6b0:	000000fe ffffffff 00feffff cc8b0000     ................
  42e6c0:	cccccccc 000000b7 cccccc2a 91cccccc     ........*.......
  42e6d0:	ffcf0000 ffffffff 0010fdff ffffffff     ................
  42e6e0:	ffffffff c0ff00d1 00000000 10fdff03     ................
  42e6f0:	0000c0ff ff010000 c0ffd0ff 00000000     ................
  42e700:	f5ffff01 0000c0ff ff010000 c0fff6ff     ................
  42e710:	00000000 f6ffff01 bbbbfbff ffbcbbbb     ................
  42e720:	fffff6ff ffffffff f6ffffff ffffffff     ................
  42e730:	ffffffff fffff6ff 3b51feff f6ffffff     ..........Q;....
  42e740:	f3ffffff ffcf0000 fffff6ff 0000e0ff     ................
  42e750:	f6ffff8f f0ffffff ff9f0000 fffff6ff     ................
  42e760:	0400f9ff f6ffffff ffffffff ffffbfda     ................
  42e770:	ffeff6ff ffffffff f5ffffff ffffff6f     ............o...
  42e780:	ffffffff 2200b0ff 22222222 00212222     ......."""""""!.
  42e790:	44440300 00000043 ffffff08 000000f8     ..DDC...........
  42e7a0:	ffffffbf 0d000060 f1ffffff ff000000     ....`...........
  42e7b0:	00fcffff ff2f0000 0070ffff ffff0400     ....../...p.....
  42e7c0:	0000f2ff ffff6f00 516666fe ffffff08     .....o...ffQ....
  42e7d0:	a0ffffff ffffffaf 0cf6ffff ffffffff     ................
  42e7e0:	ff00fdff ffffffff ff0d40ff ffffffff     .........@......
  42e7f0:	220100b0 f2ffff22 00000000 00f8ff2f     ...""......./...
  42e800:	06000000 0000feff af000000 000060ff     .............`..
  42e810:	ff0e0000 000000c0 f3ff0200 00000000     ................
  42e820:	00fa5f00 00000000 0010ff09 00000000     ._..............
  42e830:	000070cf 06000000 00000090 00000000     .p..............
  42e840:	00000010 00000000 90ff1c00 00000000     ................
  42e850:	dfcc8c00 c6ccfcbc ff000000 ff01feff     ................
  42e860:	0000fcff ffffff00 fcffffde ff000000     ................
  42e870:	ffffffff 0000fcff ffffff00 00000092     ................
  42e880:	ff000000 2201fcff 00012222 f8ffff00     ......."""......
  42e890:	fcffff0e ff00700e ff1ff8ff f70efcff     .....p..........
  42e8a0:	f8ffff00 fcffff1f ff70ff0e ff1ff8ff     ..........p.....
  42e8b0:	ff0efcff f8fffff2 feffff1f ff000010     ................
  42e8c0:	ff1ff8ff ffffffff f8fffff3 ffffff1f     ................
  42e8d0:	fff3ffff ff1ff8ff ffffffff f8fffff3     ................
  42e8e0:	ffffff1f fff3ffff ff1ff8ff ffffffff     ................
  42e8f0:	848858f3 ffffff1f 00f3ffff ff1f0000     .X..............
  42e900:	ffffffff 000000f3 ffffff1f 00f3ffff     ................
  42e910:	ff1f0000 ffffffff 000000f3 aaaaaa08     ................
  42e920:	0080aaaa 00000000 00000000 00000000     ................
  42e930:	00a06f00 00000000 bf000000 000000f0     .o..............
  42e940:	00000000 40f9ef28 00000000 ffff0800     ....(..@........
  42e950:	0010fbff af000000 ffffffff 000000c0     ................
  42e960:	ffffff05 00f8ffff ff0d0000 ffffffff     ................
  42e970:	000000ff ffffff1f 50ffffff ff3f0000     ...........P..?.
  42e980:	ffffffff 000070ff ffffff4f 80ffffff     .....p..O.......
  42e990:	ff5f0000 ffffffff 000090ff ffffff8f     .._.............
  42e9a0:	c0ffffff ffcf0000 ffffffff 0200f0ff     ................
  42e9b0:	ffffffff f6ffffff ffff0b00 ffffffff     ................
  42e9c0:	9f10feff ffffffff ffffffff ffffffc0     ................
  42e9d0:	ffffffff 6cf3ffff dddddddd dddddddd     .......l........
  42e9e0:	00000090 00000000 00000000 ff0f0000     ................
  42e9f0:	000040ff 00000000 00fdff09 00000000     .@..............
  42ea00:	7b000000 00000081 bbbb1900 bbbbbbbb     ...{............
  42ea10:	bbbbbbbb ffff0cb7 ffffffff ffffffff     ................
  42ea20:	fffff7ff ffffffff ffffffff fdbfffff     ................
  42ea30:	7f108f00 3f305f10 fffc1f50 06e007c0     ....._0?P.......
  42ea40:	02f204f0 cfff00f4 008f00fc 305f107f     .............._0
  42ea50:	fc1f503f ffffffff ffffffff ffffffff     ?P..............
  42ea60:	66feffcf 76af66bf ff7f868f d0fffffc     ...f.f.v........
  42ea70:	f105f006 ff01f303 fdffcfff 5f007f00     ..............._
  42ea80:	1f303f10 fffffcff ffffffff ffffffff     .?0.............
  42ea90:	fecfffff 6676cf66 9f666666 fffc7fa6     ....f.vffff.....
  42eaa0:	00e007c0 02000000 cfff00f4 007e00fc     ..............~.
  42eab0:	00000000 fc0f402f fccefcff cccccccc     ..../@..........
  42eac0:	ffccfdcd ffffffbd ffffffff ffffffff     ................
  42ead0:	ffff4ef9 ffffffff ffffffff 000010fc     .N..............
	...
  42eae8:	00000021 00000000 5c000000 000050ff     !..........\.P..
  42eaf8:	00000000 ff6d0000 0000e0ff 00000000     ......m.........
  42eb08:	ffff7e01 0000d0ff 02000000 ffffff9f     .~..............
  42eb18:	000060ff af030000 ffffffff 000000fe     .`..............
  42eb28:	ffbf0400 ffffffff 000000f8 ffffdf05     ................
  42eb38:	ffffffff 070000f1 ffffffef ffffffff     ................
  42eb48:	ef040090 ffffffff ffffffff ff0e0020     ............ ...
  42eb58:	ffffffff faffffff ff0e0000 ffffffff     ................
  42eb68:	f3ffffff ff050000 ffffffff c0ffffff     ................
  42eb78:	01000000 7f222222 40ffffff 00000000     ...."""....@....
  42eb88:	6f000000 00fdffff 00000000 6f000000     ...o...........o
  42eb98:	00f6ffff 00000000 6f000000 00e0ffff     ...........o....
  42eba8:	00000000 6f000000 0070ffff 00000000     .......o..p.....
  42ebb8:	6f000000 0000ffff 00000000 6f000000     ...o...........o
  42ebc8:	0000f8ff 00000000 5f000000 0000f1ff     ..........._....
  42ebd8:	00000000 2f000000 000090ff 00000000     ......./........
  42ebe8:	05000000 000000b8 77370000 05747777     ..........7wwwt.
  42ebf8:	ff0f0000 a0ffffff ff0000fa faffffff     ................
  42ec08:	0f00fa0f ffffffff 00faffa0 ffffffff     ................
  42ec18:	faff0ffa ffffff0f ffffa0ff fffffff6     ................
  42ec28:	0000faff ffff0f00 22e3ffff ffff2122     ...........""!..
  42ec38:	ffffffff ff8fffff ffffffff fff8ffff     ................
  42ec48:	ffffffff 8fffffff ffffffff f8ffffff     ................
  42ec58:	ffffffff ffffffff ffffff8f ffffffff     ................
  42ec68:	fffffff8 ffffffff ffff8fff ffffffff     ................
  42ec78:	fffff8ff ffffffff ff8fffff ffffffff     ................
  42ec88:	fff8ffff ffffffff 8fffffff ffffffff     ................
  42ec98:	f8ffffff ffffffff ffffffff ffffff8f     ................
  42eca8:	ffffffff ffffbff7 ffffffff 000040fe     .............@..
	...
  42ecc8:	dcde9c26 000050b8 00000000 ffff8d01     &....P..........
  42ecd8:	ffffffff 000000b5 ffaf0100 ffffffff     ................
  42ece8:	d5ffffff 6f000000 dbffffff ffcf9a99     .......o........
  42ecf8:	00b1ffff fcffff0a 00000061 ffef3900     ........a....9..
  42ed08:	ffcf40fe 000030fb 00000000 f4ffff07     .@...0..........
  42ed18:	0060ffaf 00000000 1b000000 d20af2ff     ..`.............
  42ed28:	9c040000 20b6edef 308e0000 06000000     ....... ...0....
  42ed38:	ffffffef 0020faff 00000000 ffffcf02     ...... .........
  42ed48:	ffffffff 000000f7 ff1f0000 8987fbff     ................
  42ed58:	80ffffdf 00000000 00e6ff0b af030000     ................
  42ed68:	000040ff ba000000 00000010 00d40500     .@..............
	...
  42ed80:	00000001 00000000 00000000 f6cf0100     ................
	...
  42ed98:	0b000000 0030ffff 00000000 00000000     ......0.........
  42eda8:	ffff0f00 00000070 00000000 0d000000     ....p...........
  42edb8:	0050ffff 00000000 00000000 faff0300     ..P.............
	...
  42edd4:	00003015 00000000 00000000 00000000     .0..............
  42ede4:	00000000 ff4e0000 ffffffff ffffffff     ......N.........
  42edf4:	00f6ffff ffffffef ffffffff ffffffff     ................
  42ee04:	ebff00ff bbbbbbbb bbbbbbbb 50ffbdbb     ...............P
  42ee14:	0000c0ff 00000000 07000000 c0fff9ff     ................
  42ee24:	ffffffef ffffffff faff07ff ffefc0ff     ................
  42ee34:	ffffffff 03ffffff c0fffa7f ffffffef     ................
  42ee44:	ffffffff fa1f00ff ffefc0ff ffffffff     ................
  42ee54:	00ffffff c0fffa1f ffffffef ffffffff     ................
  42ee64:	fadf05ff 8878c0ff 88888888 07888888     ......x.........
  42ee74:	c0fffaff 00000000 00000000 f6ff0700     ................
  42ee84:	ffffffff ffffffff ffffffff ffcf10ff     ................
  42ee94:	ffffffff ffffffff 00fdffff bbbbbb19     ................
  42eea4:	bbbbbbbb bbbbbbbb 00000092 00000000     ................
	...
  42eebc:	ffffff4e ffffffff ffffffff ffef00f6     N...............
  42eecc:	ffffffff ffffffff 00ffffff bbbbebff     ................
  42eedc:	bbbbbbbb bdbbbbbb c0ff50ff 00000000     .........P......
  42eeec:	00000000 f9ff0700 ffefc0ff ffffffff     ................
  42eefc:	070000fd c0fffaff ffffffef 00fdffff     ................
  42ef0c:	fa7f0300 ffefc0ff ffffffff 000000fd     ................
  42ef1c:	c0fffa1f ffffffef 00fdffff fa1f0000     ................
  42ef2c:	ffefc0ff ffffffff 050000fd c0fffadf     ................
  42ef3c:	88888878 00868888 faff0700 0000c0ff     x...............
  42ef4c:	00000000 07000000 fffff6ff ffffffff     ................
  42ef5c:	ffffffff 10ffffff ffffffcf ffffffff     ................
  42ef6c:	ffffffff bb1900fd bbbbbbbb bbbbbbbb     ................
  42ef7c:	0092bbbb 00000000 00000000 00000000     ................
  42ef8c:	ff4e0000 ffffffff ffffffff 00f6ffff     ..N.............
  42ef9c:	ffffffef ffffffff ffffffff ebff00ff     ................
  42efac:	bbbbbbbb bbbbbbbb 50ffbdbb 0000c0ff     ...........P....
  42efbc:	00000000 07000000 c0fff9ff ffffffef     ................
  42efcc:	000000fb faff0700 ffefc0ff 00fbffff     ................
  42efdc:	03000000 c0fffa7f ffffffef 000000fb     ................
  42efec:	fa1f0000 ffefc0ff 00fbffff 00000000     ................
  42effc:	c0fffa1f ffffffef 000000fb fadf0500     ................
  42f00c:	8878c0ff 00858888 07000000 c0fffaff     ..x.............
	...
  42f024:	f6ff0700 ffffffff ffffffff ffffffff     ................
  42f034:	ffcf10ff ffffffff ffffffff 00fdffff     ................
  42f044:	bbbbbb19 bbbbbbbb bbbbbbbb 00000092     ................
	...
  42f060:	ffffff4e ffffffff ffffffff ffef00f6     N...............
  42f070:	ffffffff ffffffff 00ffffff bbbbebff     ................
  42f080:	bbbbbbbb bdbbbbbb c0ff50ff 00000000     .........P......
  42f090:	00000000 f9ff0700 ffefc0ff 000000f9     ................
  42f0a0:	07000000 c0fffaff 00f9ffef 00000000     ................
  42f0b0:	fa7f0300 ffefc0ff 000000f9 00000000     ................
  42f0c0:	c0fffa1f 00f9ffef 00000000 fa1f0000     ................
  42f0d0:	ffefc0ff 000000f9 05000000 c0fffadf     ................
  42f0e0:	00848878 00000000 faff0700 0000c0ff     x...............
  42f0f0:	00000000 07000000 fffff6ff ffffffff     ................
  42f100:	ffffffff 10ffffff ffffffcf ffffffff     ................
  42f110:	ffffffff bb1900fd bbbbbbbb bbbbbbbb     ................
  42f120:	0092bbbb 00000000 00000000 00000000     ................
  42f130:	ff4e0000 ffffffff ffffffff 00f6ffff     ..N.............
  42f140:	ffffffef ffffffff ffffffff ebff00ff     ................
  42f150:	bbbbbbbb bbbbbbbb 50ffbdbb 0000c0ff     ...........P....
  42f160:	00000000 07000000 c0fff9ff 00000000     ................
  42f170:	00000000 faff0700 0000c0ff 00000000     ................
  42f180:	03000000 c0fffa7f 00000000 00000000     ................
  42f190:	fa1f0000 0000c0ff 00000000 00000000     ................
  42f1a0:	c0fffa1f 00000000 00000000 fadf0500     ................
  42f1b0:	0000c0ff 00000000 07000000 c0fffaff     ................
	...
  42f1c8:	f6ff0700 ffffffff ffffffff ffffffff     ................
  42f1d8:	ffcf10ff ffffffff ffffffff 00fdffff     ................
  42f1e8:	bbbbbb19 bbbbbbbb bbbbbbbb 00000092     ................
  42f1f8:	00000000 00921800 00000000 00000000     ................
  42f208:	df120000 000010fe 00000000 1c000000     ................
  42f218:	50ffffff 00000000 00000000 ff76cf00     ...P..........v.
  42f228:	000020ff 00000000 f6050000 00d54c00     . ...........L..
  42f238:	00000000 00003300 0000d00d 00000000     .....3..........
  42f248:	ff1c0000 604f00d2 00000000 00400c00     ......O`......@.
  42f258:	01fcffaf 000000de 1f000000 ffff10fa     ................
  42f268:	ffffffff ffffffff f5ffffff 88ffffdf     ................
  42f278:	88e89f88 8f888888 ff5f91ff 070000f8     .........._.....
  42f288:	000000f3 00c30f00 0060bb04 00eb0000     ..........`.....
  42f298:	04000000 00000000 00000000 8808308f     .............0..
  42f2a8:	00000083 00000000 c11e0000 00f7ff2f     ............/...
	...
  42f2c0:	ffffff04 000000f7 00000000 27000000     ...............'
  42f2d0:	00f7ff9f 00000000 00000000 ff2f0000     ............../.
  42f2e0:	000000f6 00000000 00000000 00000000     ................
  42f2f0:	00000000 00110000 00000000 ffff9e02     ................
  42f300:	000000c7 dfffff07 0020fdff f2ffff08     .......... .....
  42f310:	00feffdf ffffff03 f9ffdf11 ffffaf00     ................
  42f320:	ffef01f1 ffff0ff0 ef1212ff f4ff53ff     .............S..
  42f330:	133df17f ff6ff8ff f5137f40 ffb8ff0c     ..=...o.@.......
  42f340:	357140ff 9ffdff0a 0040ffff eaffff08     .@q5......@.....
  42f350:	30ffffff feffff06 f4ffffaf ffff6f00     ...0.........o..
  42f360:	f4ffffe9 ff7f0000 f4ff8ffe 8f501306     ..............P.
  42f370:	f4ffd6ff 403ff107 ff3ffb9f d113ff47     ......?@..?.G...
  42f380:	ff90ff1d 21f1ffff 0af5ff1d 20ffffff     .......!....... 
  42f390:	00ffff2e f2ffff2f 80ffff2e ffff6f00     ..../........o..
  42f3a0:	e0ffff4e ff4e0000 c2ffffff 05000000     N.....N.........
  42f3b0:	40c9dd9c 00000000 22220200 00000010     ...@......""....
  42f3c0:	cf000000 00e1ffff ccac0000 ffffffcd     ................
  42f3d0:	c1ccccfd ffffffff ffffffff ffdff4ff     ................
  42f3e0:	ffffffff e2ffffff 00000000 00000000     ................
  42f3f0:	cc070000 cccccccc 00cacccc ffffff0a     ................
  42f400:	ffffffff ff0a00fe ffffffff 00feffff     ................
  42f410:	efe1ff0a bff3cff2 ff0a00fe bff0dfd0     ................
  42f420:	00fe9ff1 dfd0ff0a 9ff1bff0 ff0a00fe     ................
  42f430:	bff0dfd0 00fe9ff1 dfd0ff0a 9ff1bff0     ................
  42f440:	ff0a00fe bff0dfd0 00fe9ff1 dfd0ff0a     ................
  42f450:	9ff1bff0 ff0a00fe bff0dfd0 00fe9ff1     ................
  42f460:	dfd0ff0a 9ff1bff0 ff0a00fe bff0dfd0     ................
  42f470:	00fe9ff1 efe1ff0a aff3cff1 ff0900fe     ................
  42f480:	ffffffff 00fdffff ffffff06 ffffffff     ................
  42f490:	7b0000fa cccccccc 0091cbcc 00000000     ...{............
  42f4a0:	00000000 00003001 00000000 04000000     .....0..........
  42f4b0:	0000d1ff 00000000 ff040000 0000d1ff     ................
  42f4c0:	00000000 ffff0300 0000d1ff 00000000     ................
  42f4d0:	ffff0c01 0000b0ff 04000000 ffff0cf4     ................
  42f4e0:	000000ff ff040000 ffff0cf4 000000a0     ................
  42f4f0:	ffff0400 b0ff0cf4 00000000 ffffff04     ................
  42f500:	00b00cf4 04000000 ffffffff 000000f4     ................
  42f510:	ff040000 ffffffff 000000b0 ffff0400     ................
  42f520:	b0ffffff 00000000 ffffff04 00b0ffff     ................
  42f530:	04000000 ffffffff 0000b0ff ff040000     ................
  42f540:	ffffffff 000000b0 ffff0400 b0ffffff     ................
  42f550:	00000000 ffffff03 00b0ffff 00000000     ................
  42f560:	ffffff8f 0000b0ff 0a000000 ffffffff     ................
  42f570:	000000b0 cf000000 b0ffffff 00000000     ................
  42f580:	ff0e0000 00b0ffff 00000000 ffff0000     ................
  42f590:	0000b0ff 00000000 75b90800 00000040     ...........u@...
	...
  42f5a8:	88886802 88888888 00007588 ff5f0000     .h.......u...._.
  42f5b8:	ffffffff ffffffff 050000c0 ffffffff     ................
  42f5c8:	ffffffff 00f5ffff ffff5f00 ffffffff     ........._......
  42f5d8:	ffffffff ff0500f7 80ffffff 8fc0ffcf     ................
  42f5e8:	00f8ffff ffffff5f fc0c00fc ffff0c00     ...._...........
  42f5f8:	ffff05f8 50ffffff 5f009000 5ff8ffff     .......P..._..._
  42f608:	ffffffff 0000f5ff ffffff05 ffffeff8     ................
  42f618:	ffffffff ff4f0040 bff8ffff ffffffff     ....@.O.........
  42f628:	0000fcff ffffff0c ffff0cf8 c0ffffff     ................
  42f638:	cf001000 00f8ffff ffffffcf f50500fd     ................
  42f648:	ffff0d00 ff0c00f8 20feffff 2e50ff5f     ........... _.P.
  42f658:	00f8ffff ffffcf00 ffffe8ff ffffeff8     ................
  42f668:	0c0000f8 ffffffff ffffffff 00f7ffff     ................
  42f678:	ffcf0000 ffffffff ffffffff 000000f2     ................
  42f688:	ffffef09 ffffffff 0050fdff 00000000     ..........P.....
  42f698:	00000000 ffef0200 70feffff ffef0200     ...........p....
  42f6a8:	ffffffff bbef0250 bfdbbffc d0ef02f9     ....P...........
  42f6b8:	01e7402f fdefa2ff 700ef402 ffeffa1f     /@.........p....
  42f6c8:	e7402fd0 ffafff01 2ef624fd fffa3f82     ./@......$...?..
  42f6d8:	ffffffff afffffff ffffffff faffffff     ................
  42f6e8:	ffffffff ffffffff ffffffaf ffffffff     ................
  42f6f8:	fffffffa ffffffff ffffafff ffffffff     ................
  42f708:	fffffaff ffffffff ffafffff ffffffff     ................
  42f718:	fffaffff ffffffff afffffff ffffffff     ................
  42f728:	faffffff ffffffff ffffffff ffffffaf     ................
  42f738:	ffffffff fffffffa ffffffff ffff99ff     ................
  42f748:	ffffffff ef09f4ff ffffffff 0000d5ff     ................
	...
  42f760:	00002c00 00000000 00000000 0000f12e     .,..............
  42f770:	00000000 1e000000 030010ff 000000ed     ................
  42f780:	ff050000 ff0400f1 000000f0 ff5f0000     .............._.
  42f790:	ffff0510 00000000 f1ff0500 f6ffff06     ................
  42f7a0:	66666666 17ff9f66 ffffffff ffffffff     fffff...........
  42f7b0:	dff1ffff ffffffff ffffffff ef13ffff     ................
  42f7c0:	ffffffff ffffffff ef02d0ff 1111f1ff     ................
  42f7d0:	11111111 df020010 000000ff 00000000     ................
  42f7e0:	df010000 000000f0 00000000 b8010000     ................
	...

0042f7f8 <kern_class_values>:
  42f7f8:	00000100 00000000 00000100 00000004     ................
  42f808:	00000200 00000000 00000000 00000000     ................
  42f818:	00010000 00000000 00000000 00000000     ................
  42f828:	00100100 0000f80a ebed0000 06081102     ................
  42f838:	011102f2 000b040f 00000000 00000000     ................
  42f848:	03150000 000000fe 00000000 00000000     ................
  42f858:	f5000700 00000000 0706f900 00fc0000     ................
  42f868:	fc0004fe f9fefc00 00000000 fb0000fc     ................
  42f878:	fc0000fb 0000f900 00000000 fc000000     ................
  42f888:	00fb00fc 00d500f6 0700f900 f900000b     ................
  42f898:	070c0404 000007fa 000000ec 00000000     ................
  42f8a8:	00000000 000000f3 00000000 00000000     ................
  42f8b8:	f6000000 f200effc 000000fe 000e0100     ................
  42f8c8:	01fffdf5 0000fa00 0000e6fe 00000000     ................
  42f8d8:	00000000 0dfde400 00000000 00000000     ................
  42f8e8:	00000000 000000f2 00000000 0c000000     ................
  42f8f8:	00000400 000000f9 00000000 00000000     ................
  42f908:	00000000 030d0000 00000001 00000000     ................
	...
  42f938:	000000f3 00000000 00000000 00000000     ................
  42f948:	00000000 02000000 fc0b0407 fc070000     ................
  42f958:	0a02d0f4 00fb0107 000b000d 00df000b     ................
  42f968:	0c000bfc 000407fc 00fc0100 001cfa00     ................
  42f978:	000b001c 0b06050f f3000000 00000000     ................
  42f988:	0200fe01 02f9fbfa 0000fc00 0000f200     ................
	...
  42f9a0:	0000e900 00000000 00000000 00000000     ................
  42f9b0:	00ed0100 000000ea 2300fe00 0404fbfc     ...........#....
  42f9c0:	04fb00fd 00ed0000 00000000 00000000     ................
  42f9d0:	00de0000 00000004 00000000 00000000     ................
  42f9e0:	1500ea00 00f30000 dee8000c 000bf9e8     ................
  42f9f0:	0400e800 00fb00f8 00000000 00000000     ................
  42fa00:	09000000 0000d50b 00000000 00000000     ................
  42fa10:	00110000 00000002 02020000 ff00f9fc     ................
  42fa20:	0000fcff 000000fe 00fd00f9 f700f9f8     ................
  42fa30:	00f9f4f4 00f900f9 fd000000 00040000     ................
  42fa40:	0100fc02 04000000 000000fe ff0404fe     ................
  42fa50:	f9000000 0000ff00 01000000 00fe0500     ................
  42fa60:	00fa00fc 0b00fe00 00fc0000 00000000     ................
  42fa70:	fefe01ff 00fc0000 000000fc 00000000     ................
  42fa80:	fefe0000 00fcfc00 00000000 fe000001     ................
  42fa90:	fcfcfc00 00000000 00000000 0000fe00     ................
  42faa0:	fbfe0000 f500fb00 0007f5fe 0704f900     ................
  42fab0:	fff7000a efff00fc ed02fe04 01000004     ................
  42fac0:	fded00ee ee00fee1 000a0700 00000005     ................
  42fad0:	fa000100 00f500fb 00fc0000 00fc0000     ................
  42fae0:	00000000 fe00fefe 000000fb 00000000     ................
  42faf0:	fe00fcfc 0000fdfc 000000fc 00000000     ................
  42fb00:	00000000 fc00fdfd f900fe00 fc000004     ................
  42fb10:	00040402 00000000 0000fe00 02000000     ................
  42fb20:	00fc0000 00fcfefc 00000000 00030000     ................
  42fb30:	000000fd 00fbfc00 fe0b00f9 0000f501     ................
  42fb40:	f1eeee0a fd0004f9 fa00fae9 fa05f900     ................
  42fb50:	00f600e9 03ff0200 000400fe ee00f3f5     ................
  42fb60:	f5f8f9f8 f9fff6fc 010002f6 0000fc00     ................
  42fb70:	04000200 00000000 00000000 fc000000     ................
  42fb80:	ff00fe00 f8fa00fc f500fff8 00000000     ................
  42fb90:	00fd0000 01000000 000000fe 00000004     ................
  42fba0:	00000000 00001100 00000000 00000002     ................
  42fbb0:	000000fc 00000000 00000000 000400fa     ................
	...
  42fbcc:	000000fe 000000f9 00f5ee00 eefb0000     ................
  42fbdc:	04fc0000 0000f600 00000000 00000000     ................
  42fbec:	f90000fa 00000000 00000000 00000000     ................
  42fbfc:	00fa0004 04000000 f9f90200 fcfcfc00     ................
  42fc0c:	00000000 00f50000 fcfb00fc f5f7f800     ................
  42fc1c:	00f900fd 000000f5 00001c00 fb000002     ................
  42fc2c:	f1000400 00000000 0cfadf00 00f1fd0b     ................
  42fc3c:	ee00fb04 e704fbfe 050005fc f4f3fbf4     ................
  42fc4c:	eb0000f1 00001400 000000fe f6fcfefe     ................
  42fc5c:	00dffff4 00000000 00000000 00000001     ................
	...
  42fc78:	fe00fc00 0000fbfc 00fc00f9 00000000     ................
	...
  42fc90:	00ff0000 070000f9 f80005ff f7fffe04     ................
  42fca0:	fcfb00fc fafb00fe fffd0000 00fcfafe     ................
  42fcb0:	0400fc00 00f800fe 00f90000 fafa00fa     ................
  42fcc0:	00000004 00000000 0004f900 fcfe00fb     ................
  42fcd0:	fefefef5 fffcfeff 00000000 fdfdfc00     ................
  42fce0:	00000000 fe00fe04 fe000000 fcfdfefc     ................
  42fcf0:	0e0300fd 00f600ff fc0007fe 0005fbf1     ................
  42fd00:	04faef00 fe0002fa fb00f5fd fa000002     ................
  42fd10:	04000000 00f9f904 fcfbfcfa 02fa00fc     ................
  42fd20:	000bfaf9 00000000 00000000 00000004     ................
	...
  42fd44:	000000fa 00000000 00000000 00000000     ................
	...
  42fd70:	000000fe 00000000 00000000 00000000     ................
	...
  42fd8c:	fcfd0000 00000000 00000000 00000000     ................
  42fd9c:	fb0000fb fcfc0000 00000000 000000fc     ................
  42fdac:	0000fe00 fe000000 00000000 00f900fb     ................
  42fdbc:	00f40000 0107f802 0000effe f200fcf8     ................
  42fdcc:	0000f6f7 f3f2fcf1 00f700ef 00fb1803     ................
  42fddc:	fcfffcf8 f3faf6fa 00fcf8f2 0100fe00     ................
  42fdec:	fde70000 f3f8080b 00f50100 07fcfeee     ................
  42fdfc:	0001fbe0 eefce900 0000e6fc 011500e7     ................
  42fe0c:	0000fe00 fefe0000 e900fef3 00000000     ................
  42fe1c:	00fd00f5 00eff6ff f5fbfe00 00fe00fc     ................
  42fe2c:	f0000000 fdf5f4fc fafcf7fa f4fdf900     ................
  42fe3c:	f9fc00fb 0200f9fc 00f4fe00 00fa0007     ................
  42fe4c:	04000000 0ef90200 fcfcfc00 00000000     ................
  42fe5c:	00f50000 fcfb00fc f5f7f800 03f900fd     ................
  42fe6c:	0000000e 00001c00 fb000002 00000400     ................
  42fe7c:	00000000 00ff0000 00000000 0000f9fe     ................
  42fe8c:	fe000000 fc000000 f90000fc f90000fc     ................
  42fe9c:	00fe0600 00000000 00000200 07050000     ................
  42feac:	f500fd03 f40b00fa 0ef9f9f5 fee10406     ................
  42febc:	fc00fc07 00f4fc04 fdfb04fc 0000fdf5     ................
  42fecc:	f600070b 0afbed00 fb01f3fb 0efcf4f4     ................
  42fedc:	00fb0004 0c0300f6 f7f2f3f8 e601000b     ................
  42feec:	fefa04fd f3f800f8 00fdfbfb fcf9f800     ................
  42fefc:	fc080b00 fbed00ed ffecf400 f6f4faf5     ................
  42ff0c:	fb00000a 00fdf900 0600fafc 000004f4     ................
  42ff1c:	f8fc00ed f7f5fefa f500f8f4 f5f9f8fc     ................
  42ff2c:	010000fc f500fa11 f9fc00fc f3f6f6f8     ................
  42ff3c:	0007f9fb fcee00fb f3f50702 fc0cf4f9     ................
  42ff4c:	07fadf02 00f3faf8 fcfcf1f5 f5f9fcfd     ................
  42ff5c:	0b0000ff 00e9fe0a f308f8eb f1f4f9e8     ................
  42ff6c:	0007f4ee fc000000 fc040000 07f90207     ................
  42ff7c:	fff50000 0100ff00 0000fd01 00000000     ................
  42ff8c:	000000fc 010b0300 0000fc00 fefe0000     ................
  42ff9c:	000000fc 00000301 00030000 000d00fd     ................
  42ffac:	fb010106 00000700 00000300 00000000     ................
  42ffbc:	00000000 0a000b00 00000000 00000000     ................
  42ffcc:	00000000 00eb0000 0b0006fc 04230000     ..............#.
  42ffdc:	0404f9f9 00ee01fe 00eb1100 00000000     ................
  42ffec:	00000000 0de80000 00000031 00000000     ........1.......
  42fffc:	00000000 0000eb00 00000000 00000000     ................
	...
  43001c:	f90000fa 000000fd 00000000 00000000     ................
	...
  430034:	00f600fe 00000100 fdf92d04 04f60a0b     .........-......
  430044:	04040000 000000fb 00000000 00000000     ................
  430054:	00000ad2 00000000 00000000 00000000     ................
  430064:	f6000000 f6000000 00000000 0000fef8     ................
  430074:	fc00f800 0000ef00 00000000 00000000     ................
  430084:	0000e800 00010000 00000000 0000fc00     ................
  430094:	00fb00f9 000000f6 00fc04fa f8fcf600     ................
  4300a4:	00f60000 00ef00fc e30000fc f3fcf2f9     ................
  4300b4:	00e80000 0000fef6 00000000 fafb0000     ................
  4300c4:	0000fafd 00f80000 07fc05f8 fef8fe00     ................
  4300d4:	fc00f9fa f602fefe 000000ff 00fbfde1     ................
  4300e4:	effe00f8 fe0000fd 000000fd fe000200     ................
  4300f4:	0006fefa 00000000 00000000 00000000     ................
	...
  430120:	00050000 00000000 fe00f800 f9000000     ................
  430130:	00000004 00f9fcf6 fc00f600 0000ef00     ................
  430140:	00de0000 00eef3f9 fe00e800 000000fb     ................
  430150:	00000000 fefbfc00 000001fb 0b00fb06     ................
  430160:	f5fcfc11 08061104 040f04f6 000a080a     ................
	...
  430178:	11160000 fd00fcfa 001c0f1c 00040000     ................
  430188:	00000d00 000000fa 00000000 00fe0000     ................
  430198:	00000000 05000000 00000000 f2fdfce2     ................
  4301a8:	e80000ef 00000000 00000000 00000000     ................
  4301b8:	00000000 0000fa00 00000000 fe000000     ................
	...
  4301d0:	00000005 fdfce200 0000eff2 000000f2     ................
	...
  4301f0:	000000fd fc0004f8 f5040603 04fdff00     ................
  430200:	00000300 00f70000 00f9fefd 1600f2fd     ................
  430210:	fef800fc 00fafe00 fcf9f6fc fa000000     ................
	...
  430228:	0000fe00 00000000 00050000 e2000000     ................
  430238:	eff2fdfc 00e80000 00000000 00001200     ................
	...
  430250:	fcf500fa fcfd0bfd 01fe01f2 0801f6fe     ................
  430260:	03010301 00fcf2f8 f1f6f9f3 f9fa00f2     ................
  430270:	fefdfbfc fe00fefc 050005ff 000b00fe     ................
	...
  430288:	fe000000 0000fcfc 00fe00f6 000000fa     ................
	...
  4302a0:	000000eb 00000000 00000000 fb00fcfc     ................
  4302b0:	00000000 fa0000fd fa0004fc f600fef9     ................
  4302c0:	fcfef8fe 0000fa00 00000000 00000000     ................
  4302d0:	0b00e800 00fa0000 fb000000 0000fc00     ................
  4302e0:	fe0000fe 0000f800 f5f4fb0f ff040402     ................
  4302f0:	020502f6 fe0c020b f20000f6 f6f50000     ................
  430300:	00f90000 fb00fafb fe00fb00 f5fd0005     ................
  430310:	00000dfc 00f900fd 00f80500 0003fc04     ................
  430320:	fe00f400 04fc00ff 000000fd 00f8fcf2     ................
  430330:	ef0000f5 00fc0d00 000200fa f5fc00fc     ................
  430340:	0004fc00 fe000000 fb040000 fc000001     ................
  430350:	00fc00fe 00000000 00000000 00000000     ................
  430360:	00000000 000800ea 0000fd00 00010000     ................
  430370:	0000fcfc 08000700 00000000 01ecea00     ................
  430380:	f2060b0f 0d000f02 00000700 00000000     ................
  430390:	00000000 00001300 00000000 00000000     ................
	...

004303a8 <kern_classes>:
  4303a8:	0042f7f8 004303b8 00430454 0000313d     ..B...C.T.C.=1..

004303b8 <kern_left_class_mapping>:
  4303b8:	02010000 05040300 08070602 0a090a09     ................
  4303c8:	0d000c0b 11100f0e 140c1312 00000014     ................
  4303d8:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
  4303e8:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
  4303f8:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
  430408:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
  430418:	0000093d 00000000 00000000 00000000     =...............
	...

00430454 <kern_right_class_mapping>:
  430454:	02010000 05040300 08070602 0a090a09     ................
  430464:	0e0d0c0b 0c11100f 15141312 00000015     ................
  430474:	19181716 19191917 1a191917 19191919     ................
  430484:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
  430494:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
  4304a4:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
  4304b4:	00000931 00000000 00000000 00000000     1...............
	...

004304f0 <unicode_list_1>:
  4304f0:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
  430500:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
  430510:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
  430520:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
  430530:	efc9efc8 efe3efcb f014efe5 f017f015     ................
  430540:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
  430550:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
  430560:	f712f4aa 0000f7f2 0000ffff              ............

0043056c <lv_anim_path_def>:
  43056c:	004144c1 00000000 0000ffff              .DA.........

00430578 <sin0_90_table>:
  430578:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
  430588:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
  430598:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
  4305a8:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
  4305b8:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
  4305c8:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
  4305d8:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
  4305e8:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
  4305f8:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
  430608:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
  430618:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
  430628:	7ffa7feb 00007fff 2074754f 6d20666f     ........Out of m
  430638:	726f6d65 63202c79 74276e61 6c6c6120     emory, can't all
  430648:	7461636f 20612065 2077656e 66667562     ocate a new buff
  430658:	28207265 72636e69 65736165 756f7920     er (increase you
  430668:	564c2072 4d454d5f 5a49535f 65682f45     r LV_MEM_SIZE/he
  430678:	73207061 29657a69 00000000 66206f4e     ap size)....No f
  430688:	20656572 66667562 202e7265 72636e49     ree buffer. Incr
  430698:	65736165 5f564c20 5f4d454d 5f465542     ease LV_MEM_BUF_
  4306a8:	5f58414d 2e4d554e 00000000 3b2e2c20     MAX_NUM..... ,.;
  4306b8:	005f2d3a 0000ffff 00001084 008c80ef     :-_.............
  4306c8:	625f766c 00006e74 0000000a 625f766c     lv_btn......lv_b
  4306d8:	616d6e74 78697274 00000000 316e7442     tnmatrix....Btn1
  4306e8:	00000000 326e7442 00000000 336e7442     ....Btn2....Btn3
  4306f8:	00000000 346e7442 00000000 356e7442     ....Btn4....Btn5
  430708:	00000000 635f766c 00746e6f 74786554     ....lv_cont.Text
  430718:	00000000 6c5f766c 6c656261 00000000     ....lv_label....
  430728:	7373654d 00656761 6d5f766c 6f626773     Message.lv_msgbo
  430738:	00000078 0000ffff 0000e0ff 000007e2     x...............
  430748:	00000003 00000013 0000000c 0000000f     ................
  430758:	0000002d 00000001 63696c43 0a64656b     -.......Clicked.
  430768:	00000000 0046464f 00004e4f 72616c41     ....OFF.ON..Alar
  430778:	6120656d 61766974 00216f64 52414c41     me ativado!.ALAR
  430788:	0a20454d 32203c20 00303030 203a6425     ME . < 2000.%d: 
  430798:	4d3a4848 53533a4d 76202d20 726f6c61     HH:MM:SS - valor
  4307a8:	00000000 0044434c 6c696146 74206465     ....LCD.Failed t
  4307b8:	7263206f 65746165 64636c20 73617420     o create lcd tas
  4307c8:	000a0d6b 6e69616d 00000000 6c696146     k...main....Fail
  4307d8:	74206465 7263206f 65746165 69616d20     ed to create mai
  4307e8:	6174206e 0a0d6b73 00000000 74726175     n task......uart
  4307f8:	00000000 6c696146 74206465 7263206f     ....Failed to cr
  430808:	65746165 72617520 61742074 0a0d6b73     eate uart task..
  430818:	00000000 636f7270 00737365 6c696146     ....process.Fail
  430828:	74206465 7263206f 65746165 6f727020     ed to create pro
  430838:	73736563 73617420 000a0d6b 203a6425     cess task...%d: 
  430848:	64323025 3230253a 30253a64 2d206432     %02d:%02d:%02d -
  430858:	00642520 73256425 00000000 63656661      %d.%d%s....afec
  430868:	00000000 63617473 766f206b 6c667265     ....stack overfl
  430878:	2520776f 73252078 00000a0d              ow %x %s....

00430884 <_global_impure_ptr>:
  430884:	204000c8 33323130 37363534 42413938     ..@ 0123456789AB
  430894:	46454443 00000000 33323130 37363534     CDEF....01234567
  4308a4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4308b4:	0000296c                                l)..

004308b8 <blanks.7217>:
  4308b8:	20202020 20202020 20202020 20202020                     

004308c8 <zeroes.7218>:
  4308c8:	30303030 30303030 30303030 30303030     0000000000000000
  4308d8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004308e8 <_ctype_>:
  4308e8:	20202000 20202020 28282020 20282828     .         ((((( 
  4308f8:	20202020 20202020 20202020 20202020                     
  430908:	10108820 10101010 10101010 10101010      ...............
  430918:	04040410 04040404 10040404 10101010     ................
  430928:	41411010 41414141 01010101 01010101     ..AAAAAA........
  430938:	01010101 01010101 01010101 10101010     ................
  430948:	42421010 42424242 02020202 02020202     ..BBBBBB........
  430958:	02020202 02020202 02020202 10101010     ................
  430968:	00000020 00000000 00000000 00000000      ...............
	...

004309ec <_init>:
  4309ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4309ee:	bf00      	nop
  4309f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4309f2:	bc08      	pop	{r3}
  4309f4:	469e      	mov	lr, r3
  4309f6:	4770      	bx	lr

004309f8 <__init_array_start>:
  4309f8:	004246b9 	.word	0x004246b9

004309fc <__frame_dummy_init_array_entry>:
  4309fc:	0040018d                                ..@.

00430a00 <_fini>:
  430a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  430a02:	bf00      	nop
  430a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
  430a06:	bc08      	pop	{r3}
  430a08:	469e      	mov	lr, r3
  430a0a:	4770      	bx	lr

00430a0c <__fini_array_start>:
  430a0c:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <font_dsc>:
20400010:	60fc 0042 5c24 0042 5bfc 0042 a2c0 0042     .`B.$\B..[B...B.
20400020:	0010 2802 0000 0000 0000 0000               ...(........

2040002c <lv_font_montserrat_18>:
2040002c:	3ec1 0041 30b9 0041 0015 0004 ff00 0001     .>A..0A.........
2040003c:	0010 2040                                   ..@ 

20400040 <font_dsc>:
20400040:	a980 0042 a4a8 0042 a480 0042 03a8 0043     ..B...B...B...C.
20400050:	0010 2802 0000 0000 0000 0000               ...(........

2040005c <lv_font_montserrat_22>:
2040005c:	3ec1 0041 30b9 0041 0018 0004 fe00 0001     .>A..0A.........
2040006c:	0040 2040                                   @.@ 

20400070 <mem_buf_small>:
20400070:	c710 2040 0010 0000 c720 2040 0010 0000     ..@ .... .@ ....

20400080 <_lv_txt_encoded_get_byte_id>:
20400080:	6eb1 0041                                   .nA.

20400084 <_lv_txt_encoded_get_char_id>:
20400084:	6ee9 0041                                   .nA.

20400088 <_lv_txt_encoded_next>:
20400088:	6d5f 0041                                   _mA.

2040008c <_lv_txt_encoded_prev>:
2040008c:	6e5d 0041                                   ]nA.

20400090 <_lv_txt_encoded_size>:
20400090:	6d2d 0041                                   -mA.

20400094 <_lv_txt_get_encoded_length>:
20400094:	6f19 0041                                   .oA.

20400098 <lv_btnmatrix_def_map>:
20400098:	06e4 0043 06ec 0043 06f4 0043 06d0 0043     ..C...C...C...C.
204000a8:	06fc 0043 0704 0043 07f0 0043               ..C...C...C.

204000b4 <g_interrupt_enabled>:
204000b4:	0001 0000                                   ....

204000b8 <SystemCoreClock>:
204000b8:	0900 003d                                   ..=.

204000bc <alarm_create>:
204000bc:	0101                                             .

204000bd <isOn>:
204000bd:	0001 c800                                        ...

204000c0 <_impure_ptr>:
204000c0:	00c8 2040 0000 0000                         ..@ ....

204000c8 <impure_data>:
204000c8:	0000 0000 03b4 2040 041c 2040 0484 2040     ......@ ..@ ..@ 
	...
20400170:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400180:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204004f0 <__malloc_av_>:
	...
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 

204008f8 <__malloc_sbrk_base>:
204008f8:	ffff ffff                                   ....

204008fc <__malloc_trim_threshold>:
204008fc:	0000 0002                                   ....

20400900 <__atexit_recursive_mutex>:
20400900:	a310 2043                                   ..C 

20400904 <__global_locale>:
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400964:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400984:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009e4:	57b1 0042 5141 0042 0000 0000 08e8 0043     .WB.AQB.......C.
204009f4:	08e4 0043 07f0 0043 07f0 0043 07f0 0043     ..C...C...C...C.
20400a04:	07f0 0043 07f0 0043 07f0 0043 07f0 0043     ..C...C...C...C.
20400a14:	07f0 0043 07f0 0043 ffff ffff ffff ffff     ..C...C.........
20400a24:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20400a4c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
